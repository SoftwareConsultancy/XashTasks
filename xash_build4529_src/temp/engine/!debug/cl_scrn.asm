; Listing generated by Microsoft (R) Optimizing Compiler Version 19.16.27045.0 

	TITLE	C:\Users\USER\Downloads\xash_build4529_src\engine\client\cl_scrn.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

_DATA	SEGMENT
COMM	_pglColor4f:DWORD
COMM	_pglColor4fv:DWORD
COMM	_pglColor4i:DWORD
COMM	_pglColor4iv:DWORD
COMM	_pglColor4s:DWORD
COMM	_pglColor4sv:DWORD
COMM	_pglColor4ub:DWORD
COMM	_pglColor4ubv:DWORD
COMM	_pglColor4ui:DWORD
COMM	_pglColor4uiv:DWORD
COMM	_pglColor4us:DWORD
COMM	_pglColor4usv:DWORD
COMM	_pglColorMask:DWORD
COMM	_pglColorMaterial:DWORD
COMM	_pglColorPointer:DWORD
COMM	_pglCopyPixels:DWORD
COMM	_pglCopyTexImage1D:DWORD
COMM	_pglCopyTexImage2D:DWORD
COMM	_pglCopyTexSubImage1D:DWORD
COMM	_pglCopyTexSubImage2D:DWORD
COMM	_pglCullFace:DWORD
COMM	_pglDeleteLists:DWORD
COMM	_pglDeleteTextures:DWORD
COMM	_pglDepthFunc:DWORD
COMM	_pglDepthMask:DWORD
COMM	_pglDepthRange:DWORD
COMM	_pglDisable:DWORD
COMM	_pglDisableClientState:DWORD
COMM	_pglDrawArrays:DWORD
COMM	_pglDrawBuffer:DWORD
COMM	_pglDrawElements:DWORD
COMM	_pglDrawPixels:DWORD
COMM	_pglEdgeFlag:DWORD
COMM	_pglEdgeFlagPointer:DWORD
COMM	_pglEdgeFlagv:DWORD
COMM	_pglEnable:DWORD
COMM	_pglEnableClientState:DWORD
COMM	_pglEnd:DWORD
COMM	_pglEndList:DWORD
COMM	_pglEvalCoord1d:DWORD
COMM	_pglEvalCoord1dv:DWORD
COMM	_pglEvalCoord1f:DWORD
COMM	_pglEvalCoord1fv:DWORD
COMM	_pglEvalCoord2d:DWORD
COMM	_pglEvalCoord2dv:DWORD
COMM	_pglEvalCoord2f:DWORD
COMM	_pglEvalCoord2fv:DWORD
COMM	_pglEvalMesh1:DWORD
COMM	_pglEvalMesh2:DWORD
COMM	_pglEvalPoint1:DWORD
COMM	_pglEvalPoint2:DWORD
COMM	_pglFeedbackBuffer:DWORD
COMM	_pglFinish:DWORD
COMM	_pglFlush:DWORD
COMM	_pglFogf:DWORD
COMM	_pglFogfv:DWORD
COMM	_pglFogi:DWORD
COMM	_pglFogiv:DWORD
COMM	_pglFrontFace:DWORD
COMM	_pglFrustum:DWORD
COMM	_pglGenTextures:DWORD
COMM	_pglGetBooleanv:DWORD
COMM	_pglGetClipPlane:DWORD
COMM	_pglGetDoublev:DWORD
COMM	_pglGetFloatv:DWORD
COMM	_pglGetIntegerv:DWORD
COMM	_pglGetLightfv:DWORD
COMM	_pglGetLightiv:DWORD
COMM	_pglGetMapdv:DWORD
COMM	_pglGetMapfv:DWORD
COMM	_pglGetMapiv:DWORD
COMM	_pglGetMaterialfv:DWORD
COMM	_pglGetMaterialiv:DWORD
COMM	_pglGetPixelMapfv:DWORD
COMM	_pglGetPixelMapuiv:DWORD
COMM	_pglGetPixelMapusv:DWORD
COMM	_pglGetPointerv:DWORD
COMM	_pglGetPolygonStipple:DWORD
COMM	_pglGetTexEnvfv:DWORD
COMM	_pglGetTexEnviv:DWORD
COMM	_pglGetTexGendv:DWORD
COMM	_pglGetTexGenfv:DWORD
COMM	_pglGetTexGeniv:DWORD
COMM	_pglGetTexImage:DWORD
COMM	_pglGetTexLevelParameterfv:DWORD
COMM	_pglGetTexLevelParameteriv:DWORD
COMM	_pglGetTexParameterfv:DWORD
COMM	_pglGetTexParameteriv:DWORD
COMM	_pglHint:DWORD
COMM	_pglIndexMask:DWORD
COMM	_pglIndexPointer:DWORD
COMM	_pglIndexd:DWORD
COMM	_pglIndexdv:DWORD
COMM	_pglIndexf:DWORD
COMM	_pglIndexfv:DWORD
COMM	_pglIndexi:DWORD
COMM	_pglIndexiv:DWORD
COMM	_pglIndexs:DWORD
COMM	_pglIndexsv:DWORD
COMM	_pglIndexub:DWORD
COMM	_pglIndexubv:DWORD
COMM	_pglInitNames:DWORD
COMM	_pglInterleavedArrays:DWORD
COMM	_pglLightModelf:DWORD
COMM	_pglLightModelfv:DWORD
COMM	_pglLightModeli:DWORD
COMM	_pglLightModeliv:DWORD
COMM	_pglLightf:DWORD
COMM	_pglLightfv:DWORD
COMM	_pglLighti:DWORD
COMM	_pglLightiv:DWORD
COMM	_pglLineStipple:DWORD
COMM	_pglLineWidth:DWORD
COMM	_pglListBase:DWORD
COMM	_pglLoadIdentity:DWORD
COMM	_pglLoadMatrixd:DWORD
COMM	_pglLoadMatrixf:DWORD
COMM	_pglLoadName:DWORD
COMM	_pglLogicOp:DWORD
COMM	_pglMap1d:DWORD
COMM	_pglMap1f:DWORD
COMM	_pglMap2d:DWORD
COMM	_pglMap2f:DWORD
COMM	_pglMapGrid1d:DWORD
COMM	_pglMapGrid1f:DWORD
COMM	_pglMapGrid2d:DWORD
COMM	_pglMapGrid2f:DWORD
COMM	_pglMaterialf:DWORD
COMM	_pglMaterialfv:DWORD
COMM	_pglMateriali:DWORD
COMM	_pglMaterialiv:DWORD
COMM	_pglMatrixMode:DWORD
COMM	_pglMultMatrixd:DWORD
COMM	_pglMultMatrixf:DWORD
COMM	_pglNewList:DWORD
COMM	_pglNormal3b:DWORD
COMM	_pglNormal3bv:DWORD
COMM	_pglNormal3d:DWORD
COMM	_pglNormal3dv:DWORD
COMM	_pglNormal3f:DWORD
COMM	_pglNormal3fv:DWORD
COMM	_pglNormal3i:DWORD
COMM	_pglNormal3iv:DWORD
COMM	_pglNormal3s:DWORD
COMM	_pglNormal3sv:DWORD
COMM	_pglNormalPointer:DWORD
COMM	_pglOrtho:DWORD
COMM	_pglPassThrough:DWORD
COMM	_pglPixelMapfv:DWORD
COMM	_pglPixelMapuiv:DWORD
COMM	_pglPixelMapusv:DWORD
COMM	_pglPixelStoref:DWORD
COMM	_pglPixelStorei:DWORD
COMM	_pglPixelTransferf:DWORD
COMM	_pglPixelTransferi:DWORD
COMM	_pglPixelZoom:DWORD
COMM	_pglPointSize:DWORD
COMM	_pglPolygonMode:DWORD
COMM	_pglPolygonOffset:DWORD
COMM	_pglPolygonStipple:DWORD
COMM	_pglPopAttrib:DWORD
COMM	_pglPopClientAttrib:DWORD
COMM	_pglPopMatrix:DWORD
COMM	_pglPopName:DWORD
COMM	_pglPushAttrib:DWORD
COMM	_pglPushClientAttrib:DWORD
COMM	_pglPushMatrix:DWORD
COMM	_pglPushName:DWORD
COMM	_pglRasterPos2d:DWORD
COMM	_pglRasterPos2dv:DWORD
COMM	_pglRasterPos2f:DWORD
COMM	_pglRasterPos2fv:DWORD
COMM	_pglRasterPos2i:DWORD
COMM	_pglRasterPos2iv:DWORD
COMM	_pglRasterPos2s:DWORD
COMM	_pglRasterPos2sv:DWORD
COMM	_pglRasterPos3d:DWORD
COMM	_pglRasterPos3dv:DWORD
COMM	_pglRasterPos3f:DWORD
COMM	_pglRasterPos3fv:DWORD
COMM	_pglRasterPos3i:DWORD
COMM	_pglRasterPos3iv:DWORD
COMM	_pglRasterPos3s:DWORD
COMM	_pglRasterPos3sv:DWORD
COMM	_pglRasterPos4d:DWORD
COMM	_pglRasterPos4dv:DWORD
COMM	_pglRasterPos4f:DWORD
COMM	_pglRasterPos4fv:DWORD
COMM	_pglRasterPos4i:DWORD
COMM	_pglRasterPos4iv:DWORD
COMM	_pglRasterPos4s:DWORD
COMM	_pglRasterPos4sv:DWORD
COMM	_pglReadBuffer:DWORD
COMM	_pglReadPixels:DWORD
COMM	_pglRectd:DWORD
COMM	_pglRectdv:DWORD
COMM	_pglRectf:DWORD
COMM	_pglRectfv:DWORD
COMM	_pglRecti:DWORD
COMM	_pglRectiv:DWORD
COMM	_pglRects:DWORD
COMM	_pglRectsv:DWORD
COMM	_pglRotated:DWORD
COMM	_pglRotatef:DWORD
COMM	_pglScaled:DWORD
COMM	_pglScalef:DWORD
COMM	_pglScissor:DWORD
COMM	_pglSelectBuffer:DWORD
COMM	_pglShadeModel:DWORD
COMM	_pglStencilFunc:DWORD
COMM	_pglStencilMask:DWORD
COMM	_pglStencilOp:DWORD
COMM	_pglTexCoord1d:DWORD
COMM	_pglTexCoord1dv:DWORD
COMM	_pglTexCoord1f:DWORD
COMM	_pglTexCoord1fv:DWORD
COMM	_pglTexCoord1i:DWORD
COMM	_pglTexCoord1iv:DWORD
COMM	_pglTexCoord1s:DWORD
COMM	_pglTexCoord1sv:DWORD
COMM	_pglTexCoord2d:DWORD
COMM	_pglTexCoord2dv:DWORD
COMM	_pglTexCoord2f:DWORD
COMM	_pglTexCoord2fv:DWORD
COMM	_pglTexCoord2i:DWORD
COMM	_pglTexCoord2iv:DWORD
COMM	_pglTexCoord2s:DWORD
COMM	_pglTexCoord2sv:DWORD
COMM	_pglTexCoord3d:DWORD
COMM	_pglTexCoord3dv:DWORD
COMM	_pglTexCoord3f:DWORD
COMM	_pglTexCoord3fv:DWORD
COMM	_pglTexCoord3i:DWORD
COMM	_pglTexCoord3iv:DWORD
COMM	_pglTexCoord3s:DWORD
COMM	_pglTexCoord3sv:DWORD
COMM	_pglTexCoord4d:DWORD
COMM	_pglTexCoord4dv:DWORD
COMM	_pglTexCoord4f:DWORD
COMM	_pglTexCoord4fv:DWORD
COMM	_pglTexCoord4i:DWORD
COMM	_pglTexCoord4iv:DWORD
COMM	_pglTexCoord4s:DWORD
COMM	_pglTexCoord4sv:DWORD
COMM	_pglTexCoordPointer:DWORD
COMM	_pglTexEnvf:DWORD
COMM	_pglTexEnvfv:DWORD
COMM	_pglTexEnvi:DWORD
COMM	_pglTexEnviv:DWORD
COMM	_pglTexGend:DWORD
COMM	_pglTexGendv:DWORD
COMM	_pglTexGenf:DWORD
COMM	_pglTexGenfv:DWORD
COMM	_pglTexGeni:DWORD
COMM	_pglTexGeniv:DWORD
COMM	_pglTexImage1D:DWORD
COMM	_pglTexImage2D:DWORD
COMM	_pglTexParameterf:DWORD
COMM	_pglTexParameterfv:DWORD
COMM	_pglTexParameteri:DWORD
COMM	_pglTexParameteriv:DWORD
COMM	_pglTexSubImage1D:DWORD
COMM	_pglTexSubImage2D:DWORD
COMM	_pglTranslated:DWORD
COMM	_pglTranslatef:DWORD
COMM	_pglVertex2d:DWORD
COMM	_pglVertex2dv:DWORD
COMM	_pglVertex2f:DWORD
COMM	_pglVertex2fv:DWORD
COMM	_pglVertex2i:DWORD
COMM	_pglVertex2iv:DWORD
COMM	_pglVertex2s:DWORD
COMM	_pglVertex2sv:DWORD
COMM	_pglVertex3d:DWORD
COMM	_pglVertex3dv:DWORD
COMM	_pglVertex3f:DWORD
COMM	_pglVertex3fv:DWORD
COMM	_pglVertex3i:DWORD
COMM	_pglVertex3iv:DWORD
COMM	_pglVertex3s:DWORD
COMM	_pglVertex3sv:DWORD
COMM	_pglVertex4d:DWORD
COMM	_pglVertex4dv:DWORD
COMM	_pglVertex4f:DWORD
COMM	_pglVertex4fv:DWORD
COMM	_pglVertex4i:DWORD
COMM	_pglVertex4iv:DWORD
COMM	_pglVertex4s:DWORD
COMM	_pglVertex4sv:DWORD
COMM	_pglVertexPointer:DWORD
COMM	_pglViewport:DWORD
COMM	_pglPointParameterfEXT:DWORD
COMM	_pglPointParameterfvEXT:DWORD
COMM	_pglLockArraysEXT:DWORD
COMM	_pglUnlockArraysEXT:DWORD
COMM	_pglActiveTextureARB:DWORD
COMM	_pglClientActiveTextureARB:DWORD
COMM	_pglGetCompressedTexImage:DWORD
COMM	_pglDrawRangeElements:DWORD
COMM	_pglDrawRangeElementsEXT:DWORD
COMM	_pglMultiTexCoord1f:DWORD
COMM	_pglMultiTexCoord2f:DWORD
COMM	_pglMultiTexCoord3f:DWORD
COMM	_pglMultiTexCoord4f:DWORD
COMM	_pglActiveTexture:DWORD
COMM	_pglClientActiveTexture:DWORD
COMM	_pglCompressedTexImage3DARB:DWORD
COMM	_pglCompressedTexImage2DARB:DWORD
COMM	_pglCompressedTexImage1DARB:DWORD
COMM	_pglCompressedTexSubImage3DARB:DWORD
COMM	_pglCompressedTexSubImage2DARB:DWORD
COMM	_pglCompressedTexSubImage1DARB:DWORD
COMM	_pglDeleteObjectARB:DWORD
COMM	_pglGetHandleARB:DWORD
COMM	_pglDetachObjectARB:DWORD
COMM	_pglCreateShaderObjectARB:DWORD
COMM	_pglShaderSourceARB:DWORD
COMM	_pglCompileShaderARB:DWORD
COMM	_pglCreateProgramObjectARB:DWORD
COMM	_pglAttachObjectARB:DWORD
COMM	_pglLinkProgramARB:DWORD
COMM	_pglUseProgramObjectARB:DWORD
COMM	_pglValidateProgramARB:DWORD
COMM	_pglBindProgramARB:DWORD
COMM	_pglDeleteProgramsARB:DWORD
COMM	_pglGenProgramsARB:DWORD
COMM	_pglProgramStringARB:DWORD
COMM	_pglProgramEnvParameter4fARB:DWORD
COMM	_pglProgramLocalParameter4fARB:DWORD
COMM	_pglUniform1fARB:DWORD
COMM	_pglUniform2fARB:DWORD
COMM	_pglUniform3fARB:DWORD
COMM	_pglUniform4fARB:DWORD
COMM	_pglUniform1iARB:DWORD
COMM	_pglUniform2iARB:DWORD
COMM	_pglUniform3iARB:DWORD
COMM	_pglUniform4iARB:DWORD
COMM	_pglUniform1fvARB:DWORD
COMM	_pglUniform2fvARB:DWORD
COMM	_pglUniform3fvARB:DWORD
COMM	_pglUniform4fvARB:DWORD
COMM	_pglUniform1ivARB:DWORD
COMM	_pglUniform2ivARB:DWORD
COMM	_pglUniform3ivARB:DWORD
COMM	_pglUniform4ivARB:DWORD
COMM	_pglUniformMatrix2fvARB:DWORD
COMM	_pglUniformMatrix3fvARB:DWORD
COMM	_pglUniformMatrix4fvARB:DWORD
COMM	_pglGetObjectParameterfvARB:DWORD
COMM	_pglGetObjectParameterivARB:DWORD
COMM	_pglGetInfoLogARB:DWORD
COMM	_pglGetAttachedObjectsARB:DWORD
COMM	_pglGetUniformLocationARB:DWORD
COMM	_pglGetActiveUniformARB:DWORD
COMM	_pglGetUniformfvARB:DWORD
COMM	_pglGetUniformivARB:DWORD
COMM	_pglGetShaderSourceARB:DWORD
COMM	_pglTexImage3D:DWORD
COMM	_pglTexSubImage3D:DWORD
COMM	_pglCopyTexSubImage3D:DWORD
COMM	_pglBlendEquationEXT:DWORD
COMM	_pglStencilOpSeparate:DWORD
COMM	_pglStencilFuncSeparate:DWORD
COMM	_pglActiveStencilFaceEXT:DWORD
COMM	_pglVertexAttribPointerARB:DWORD
COMM	_pglEnableVertexAttribArrayARB:DWORD
COMM	_pglDisableVertexAttribArrayARB:DWORD
COMM	_pglBindAttribLocationARB:DWORD
COMM	_pglGetActiveAttribARB:DWORD
COMM	_pglGetAttribLocationARB:DWORD
COMM	_pglBindFragDataLocation:DWORD
COMM	_pglVertexAttrib2fARB:DWORD
COMM	_pglVertexAttrib2fvARB:DWORD
COMM	_pglVertexAttrib3fvARB:DWORD
COMM	_pglBindBufferARB:DWORD
COMM	_pglDeleteBuffersARB:DWORD
COMM	_pglGenBuffersARB:DWORD
COMM	_pglIsBufferARB:DWORD
COMM	_pglMapBufferARB:DWORD
COMM	_pglUnmapBufferARB:DWORD
COMM	_pglBufferDataARB:DWORD
COMM	_pglBufferSubDataARB:DWORD
COMM	_pglGenQueriesARB:DWORD
COMM	_pglDeleteQueriesARB:DWORD
COMM	_pglIsQueryARB:DWORD
COMM	_pglBeginQueryARB:DWORD
COMM	_pglEndQueryARB:DWORD
COMM	_pglGetQueryivARB:DWORD
COMM	_pglGetQueryObjectivARB:DWORD
COMM	_pglGetQueryObjectuivARB:DWORD
COMM	_pglDebugMessageControlARB:DWORD
COMM	_pglDebugMessageInsertARB:DWORD
COMM	_pglDebugMessageCallbackARB:DWORD
COMM	_pglGetDebugMessageLogARB:DWORD
COMM	_pglIsRenderbuffer:DWORD
COMM	_pglBindRenderbuffer:DWORD
COMM	_pglDeleteRenderbuffers:DWORD
COMM	_pglGenRenderbuffers:DWORD
COMM	_pglRenderbufferStorage:DWORD
COMM	_pglRenderbufferStorageMultisample:DWORD
COMM	_pglGetRenderbufferParameteriv:DWORD
COMM	_pglIsFramebuffer:DWORD
COMM	_pglBindFramebuffer:DWORD
COMM	_pglDeleteFramebuffers:DWORD
COMM	_pglGenFramebuffers:DWORD
COMM	_pglCheckFramebufferStatus:DWORD
COMM	_pglFramebufferTexture1D:DWORD
COMM	_pglFramebufferTexture2D:DWORD
COMM	_pglFramebufferTexture3D:DWORD
COMM	_pglFramebufferTextureLayer:DWORD
COMM	_pglFramebufferRenderbuffer:DWORD
COMM	_pglGetFramebufferAttachmentParameteriv:DWORD
COMM	_pglBlitFramebuffer:DWORD
COMM	_pglDrawBuffersARB:DWORD
COMM	_pglGenerateMipmap:DWORD
COMM	_pglBindVertexArray:DWORD
COMM	_pglDeleteVertexArrays:DWORD
COMM	_pglGenVertexArrays:DWORD
COMM	_pglIsVertexArray:DWORD
COMM	_pglSwapInterval:DWORD
COMM	_pwglSwapBuffers:DWORD
COMM	_pwglCopyContext:DWORD
COMM	_pwglCreateContext:DWORD
COMM	_pwglCreateLayerContext:DWORD
COMM	_pwglDeleteContext:DWORD
COMM	_pwglGetCurrentContext:DWORD
COMM	_pwglGetProcAddress:DWORD
COMM	_pwglMakeCurrent:DWORD
COMM	_pwglShareLists:DWORD
COMM	_pwglUseFontBitmaps:DWORD
COMM	_pwglUseFontOutlines:DWORD
COMM	_pwglDescribeLayerPlane:DWORD
COMM	_pwglSetLayerPaletteEntries:DWORD
COMM	_pwglGetLayerPaletteEntries:DWORD
COMM	_pwglRealizeLayerPalette:DWORD
COMM	_pwglSwapLayerBuffers:DWORD
COMM	_pwglSwapIntervalEXT:DWORD
COMM	_pwglCreateContextAttribsARB:DWORD
COMM	_pwglGetPixelFormatAttribiv:DWORD
COMM	_pwglChoosePixelFormat:DWORD
COMM	_pwglGetExtensionsStringEXT:DWORD
COMM	_scr_loading:DWORD
COMM	_scr_download:DWORD
COMM	_cl_allow_levelshots:DWORD
COMM	_cl_envshot_size:DWORD
COMM	_cl_testlights:DWORD
COMM	_cl_levelshot_name:DWORD
COMM	_scr_centertime:DWORD
COMM	_scr_viewsize:DWORD
COMM	_v_dark:DWORD
COMM	_pglGetError:DWORD
COMM	_pglGetString:DWORD
COMM	_pglAccum:DWORD
COMM	_pglAlphaFunc:DWORD
COMM	_pglArrayElement:DWORD
COMM	_pglBegin:DWORD
COMM	_pglBindTexture:DWORD
COMM	_pglBitmap:DWORD
COMM	_pglBlendFunc:DWORD
COMM	_pglCallList:DWORD
COMM	_pglCallLists:DWORD
COMM	_pglClear:DWORD
COMM	_pglClearAccum:DWORD
COMM	_pglClearColor:DWORD
COMM	_pglClearDepth:DWORD
COMM	_pglClearIndex:DWORD
COMM	_pglClearStencil:DWORD
COMM	_pglIsEnabled:DWORD
COMM	_pglIsList:DWORD
COMM	_pglIsTexture:DWORD
COMM	_pglClipPlane:DWORD
COMM	_pglColor3b:DWORD
COMM	_pglColor3bv:DWORD
COMM	_pglColor3d:DWORD
COMM	_pglColor3dv:DWORD
COMM	_pglColor3f:DWORD
COMM	_pglColor3fv:DWORD
COMM	_pglColor3i:DWORD
COMM	_pglColor3iv:DWORD
COMM	_pglColor3s:DWORD
COMM	_pglColor3sv:DWORD
COMM	_pglColor3ub:DWORD
COMM	_pglColor3ubv:DWORD
COMM	_pglColor3ui:DWORD
COMM	_pglColor3uiv:DWORD
COMM	_pglColor3us:DWORD
COMM	_pglColor3usv:DWORD
COMM	_pglColor4b:DWORD
COMM	_pglColor4bv:DWORD
COMM	_pglColor4d:DWORD
COMM	_pglColor4dv:DWORD
_DATA	ENDS
PUBLIC	_SCR_Init
PUBLIC	_SCR_UpdateScreen
PUBLIC	_SCR_BeginLoadingPlaque
PUBLIC	_SCR_Shutdown
PUBLIC	_SCR_VidInit
PUBLIC	_SCR_TileClear
PUBLIC	_SCR_DirtyScreen
PUBLIC	_SCR_AddDirtyPoint
PUBLIC	_SCR_InstallParticlePalette
PUBLIC	_SCR_EndLoadingPlaque
PUBLIC	_SCR_RegisterTextures
PUBLIC	_SCR_LoadCreditsFont
PUBLIC	_SCR_MakeScreenShot
PUBLIC	_SCR_MakeLevelShot
PUBLIC	_SCR_NetSpeeds
PUBLIC	_SCR_RSpeeds
PUBLIC	_SCR_DrawFPS
PUBLIC	_SCR_DrawPlaque
PUBLIC	_SCR_LoadFixedWidthFont
PUBLIC	_SCR_LoadVariableWidthFont
PUBLIC	_SCR_SizeUp_f
PUBLIC	_SCR_SizeDown_f
PUBLIC	__real@00000000
PUBLIC	__real@3f000000
PUBLIC	__real@3f1a36e2e0000000
PUBLIC	__real@3f800000
PUBLIC	__real@3fe0000000000000
PUBLIC	__real@3ff0000000000000
PUBLIC	__real@40000000
PUBLIC	__real@404e000000000000
PUBLIC	__real@41200000
PUBLIC	__real@41f00000
PUBLIC	__real@42700000
PUBLIC	__real@42f00000
PUBLIC	__xmm@41f00000000000000000000000000000
EXTRN	___report_rangecheckfailure:PROC
EXTRN	_memset:PROC
EXTRN	_Sys_DoubleTime:PROC
EXTRN	_Sys_CheckParm:PROC
EXTRN	_Cbuf_AddText:PROC
EXTRN	_Cmd_AddCommand:PROC
EXTRN	_Cmd_RemoveCommand:PROC
EXTRN	_Q_strchr:PROC
EXTRN	_Q_snprintf:PROC
EXTRN	_Q_pretifymem:PROC
EXTRN	__Mem_Free:PROC
EXTRN	_Cvar_Get:PROC
EXTRN	_Cvar_SetValue:PROC
EXTRN	_FS_LoadFile:PROC
EXTRN	_FS_FileExists:PROC
EXTRN	_FS_LoadImage:PROC
EXTRN	_FS_FreeImage:PROC
EXTRN	_Host_Error:PROC
EXTRN	_Con_Reportf:PROC
EXTRN	_Con_DPrintf:PROC
EXTRN	_Con_Printf:PROC
EXTRN	_CL_IsInMenu:PROC
EXTRN	_UI_SetActiveMenu:PROC
EXTRN	_S_StopAllSounds:PROC
EXTRN	_fmod:PROC
EXTRN	_CL_SetSky_f:PROC
EXTRN	_SCR_Viewpos_f:PROC
EXTRN	_SCR_TimeRefresh_f:PROC
EXTRN	_CL_DrawHUD:PROC
EXTRN	_CL_ClearSpriteTextures:PROC
EXTRN	_CL_InitNetgraph:PROC
EXTRN	_V_PreRender:PROC
EXTRN	_V_PostRender:PROC
EXTRN	_V_RenderView:PROC
EXTRN	_Con_VidInit:PROC
EXTRN	_Con_ClearNotify:PROC
EXTRN	_Con_RunConsole:PROC
EXTRN	_Con_DrawStringLen:PROC
EXTRN	_Con_DrawString:PROC
EXTRN	_UI_UnloadProgs:PROC
EXTRN	_UI_LoadProgs:PROC
EXTRN	_SCR_InitCinematic:PROC
EXTRN	_SCR_DrawCinematic:PROC
EXTRN	_GL_SetRenderMode:PROC
EXTRN	_R_DrawTileClear:PROC
EXTRN	_GL_LoadTexture:PROC
EXTRN	_VID_ScreenShot:PROC
EXTRN	_VID_CubemapShot:PROC
EXTRN	_R_GetTextureParms:PROC
EXTRN	_R_DrawStretchPic:PROC
EXTRN	_R_SpeedsMessage:PROC
EXTRN	_VGui_Startup:PROC
EXTRN	_IN_MouseSavePos:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__ftol2_sse:PROC
EXTRN	_host:BYTE
EXTRN	_net_speeds:DWORD
EXTRN	_cl:BYTE
EXTRN	_cls:BYTE
EXTRN	_clgame:BYTE
EXTRN	_gameui:BYTE
EXTRN	_cl_showfps:DWORD
EXTRN	_glState:BYTE
EXTRN	_gl_clear:DWORD
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
_BSS	SEGMENT
_scr_dirty DB	010H DUP (?)
_scr_old_dirty DB 020H DUP (?)
_scr_init DD	01H DUP (?)
	ALIGN	8

?nexttime@?1??SCR_DrawFPS@@9@9 DQ 01H DUP (?)		; `SCR_DrawFPS'::`2'::nexttime
?lasttime@?1??SCR_DrawFPS@@9@9 DQ 01H DUP (?)		; `SCR_DrawFPS'::`2'::lasttime
?framerate@?1??SCR_DrawFPS@@9@9 DQ 01H DUP (?)		; `SCR_DrawFPS'::`2'::framerate
?framecount@?1??SCR_DrawFPS@@9@9 DD 01H DUP (?)		; `SCR_DrawFPS'::`2'::framecount
?maxfps@?1??SCR_DrawFPS@@9@9 DD 01H DUP (?)		; `SCR_DrawFPS'::`2'::maxfps
?msg@?1??SCR_NetSpeeds@@9@9 DB 0400H DUP (?)		; `SCR_NetSpeeds'::`2'::msg
?max_svfps@?1??SCR_NetSpeeds@@9@9 DD 01H DUP (?)	; `SCR_NetSpeeds'::`2'::max_svfps
?max_clfps@?1??SCR_NetSpeeds@@9@9 DD 01H DUP (?)	; `SCR_NetSpeeds'::`2'::max_clfps
_BSS	ENDS
;	COMDAT __xmm@41f00000000000000000000000000000
CONST	SEGMENT
__xmm@41f00000000000000000000000000000 DB 00H, 00H, 00H, 00H, 00H, 00H, 00H
	DB	00H, 00H, 00H, 00H, 00H, 00H, 00H, 0f0H, 'A'
CONST	ENDS
;	COMDAT __real@42f00000
CONST	SEGMENT
__real@42f00000 DD 042f00000r			; 120
CONST	ENDS
;	COMDAT __real@42700000
CONST	SEGMENT
__real@42700000 DD 042700000r			; 60
CONST	ENDS
;	COMDAT __real@41f00000
CONST	SEGMENT
__real@41f00000 DD 041f00000r			; 30
CONST	ENDS
;	COMDAT __real@41200000
CONST	SEGMENT
__real@41200000 DD 041200000r			; 10
CONST	ENDS
;	COMDAT __real@404e000000000000
CONST	SEGMENT
__real@404e000000000000 DQ 0404e000000000000r	; 60
CONST	ENDS
;	COMDAT __real@40000000
CONST	SEGMENT
__real@40000000 DD 040000000r			; 2
CONST	ENDS
;	COMDAT __real@3ff0000000000000
CONST	SEGMENT
__real@3ff0000000000000 DQ 03ff0000000000000r	; 1
CONST	ENDS
;	COMDAT __real@3fe0000000000000
CONST	SEGMENT
__real@3fe0000000000000 DQ 03fe0000000000000r	; 0.5
CONST	ENDS
;	COMDAT __real@3f800000
CONST	SEGMENT
__real@3f800000 DD 03f800000r			; 1
CONST	ENDS
;	COMDAT __real@3f1a36e2e0000000
CONST	SEGMENT
__real@3f1a36e2e0000000 DQ 03f1a36e2e0000000r	; 0.0001
CONST	ENDS
;	COMDAT __real@3f000000
CONST	SEGMENT
__real@3f000000 DD 03f000000r			; 0.5
CONST	ENDS
;	COMDAT __real@00000000
CONST	SEGMENT
__real@00000000 DD 000000000r			; 0
CONST	ENDS
_DATA	SEGMENT
?minfps@?1??SCR_DrawFPS@@9@9 DD 0270fH			; `SCR_DrawFPS'::`2'::minfps
$SG143572 DB	'%4i spf', 00H
$SG143577 DB	'fps: ^1%4i min, ^3%4i cur, ^2%4i max', 00H
	ORG $+3
$SG143578 DB	'%4i fps', 00H
?min_svfps@?1??SCR_NetSpeeds@@9@9 DD 064H		; `SCR_NetSpeeds'::`2'::min_svfps
?min_clfps@?1??SCR_NetSpeeds@@9@9 DD 064H		; `SCR_NetSpeeds'::`2'::min_clfps
$SG143651 DB	'levelshot', 0aH, 00H
	ORG $+1
$SG143622 DB	'sv fps: ^1%4i min, ^3%4i cur, ^2%4i max', 0aH, 'cl fps: '
	DB	'^1%4i min, ^3%4i cur, ^2%4i max', 0aH, 'Game Time: %02d:%02d', 0aH
	DB	'Total received from server: %s', 0aH, 'Total sent to server: '
	DB	'%s', 0aH, 00H
	ORG $+2
$SG143672 DB	'Write %s', 0aH, 00H
	ORG $+2
$SG143673 DB	'^1Error:^7 Unable to write %s', 0aH, 00H
	ORG $+1
$SG143737 DB	'SCR_UpdateScreen: bad cls.state', 0aH, 00H
	ORG $+3
$SG143773 DB	'c:\users\user\downloads\xash_build4529_src\engine\client'
	DB	'\cl_scrn.c', 00H
	ORG $+1
$SG143777 DB	'gfx.wad/creditsfont.fnt', 00H
$SG143779 DB	'gfx/conchars', 00H
	ORG $+3
$SG143780 DB	'^1Error:^7 failed to load HUD font', 0aH, 00H
$SG143794 DB	'gfx/palette.lmp', 00H
$SG143796 DB	'gfx/palette.pal', 00H
$SG143798 DB	'#valve.pal', 00H
	ORG $+1
$SG143812 DB	'gfx/paused.lmp', 00H
	ORG $+1
$SG143813 DB	'gfx/paused.lmp', 00H
	ORG $+1
$SG143815 DB	'gfx/pause.lmp', 00H
	ORG $+2
$SG143816 DB	'gfx/pause.lmp', 00H
	ORG $+2
$SG143819 DB	'gfx/lambda.lmp', 00H
	ORG $+1
$SG143822 DB	'gfx/lambda.lmp', 00H
	ORG $+1
$SG143823 DB	'gfx/lambda.lmp', 00H
	ORG $+1
$SG143825 DB	'gfx/loading.lmp', 00H
$SG143828 DB	'gfx/loading.lmp', 00H
$SG143829 DB	'gfx/loading.lmp', 00H
$SG143830 DB	'gfx/backtile.lmp', 00H
	ORG $+3
$SG143834 DB	'viewsize', 00H
	ORG $+3
$SG143838 DB	'viewsize', 00H
	ORG $+3
$SG143846 DB	'centerprint hold time', 00H
	ORG $+2
$SG143847 DB	'2.5', 00H
$SG143848 DB	'scr_centertime', 00H
	ORG $+1
$SG143849 DB	'contains path to current levelshot', 00H
	ORG $+1
$SG143850 DB	'*black', 00H
	ORG $+1
$SG143851 DB	'cl_levelshot_name', 00H
	ORG $+2
$SG143853 DB	'0', 00H
	ORG $+2
$SG143852 DB	'allow engine to use indivdual levelshots instead of ''lo'
	DB	'ading'' image', 00H
$SG143854 DB	'allow_levelshots', 00H
	ORG $+3
$SG143855 DB	'loading bar progress', 00H
	ORG $+3
$SG143856 DB	'0', 00H
	ORG $+2
$SG143857 DB	'scr_loading', 00H
$SG143858 DB	'downloading bar progress', 00H
	ORG $+3
$SG143859 DB	'-1', 00H
	ORG $+1
$SG143860 DB	'scr_download', 00H
	ORG $+3
$SG143861 DB	'test dynamic lights', 00H
$SG143862 DB	'0', 00H
	ORG $+2
$SG143863 DB	'cl_testlights', 00H
	ORG $+2
$SG143864 DB	'envshot size of cube side', 00H
	ORG $+2
$SG143865 DB	'256', 00H
$SG143866 DB	'cl_envshot_size', 00H
$SG143867 DB	'starts level from dark screen', 00H
	ORG $+2
$SG143868 DB	'0', 00H
	ORG $+2
$SG143869 DB	'v_dark', 00H
	ORG $+1
$SG143870 DB	'screen size', 00H
$SG143871 DB	'120', 00H
$SG143872 DB	'viewsize', 00H
	ORG $+3
$SG143873 DB	'turn quickly and print rendering statistcs', 00H
	ORG $+1
$SG143874 DB	'timerefresh', 00H
$SG143875 DB	'set new skybox by basename', 00H
	ORG $+1
$SG143876 DB	'skyname', 00H
$SG143877 DB	'set new skybox by basename', 00H
	ORG $+1
$SG143878 DB	'loadsky', 00H
$SG143879 DB	'prints current player origin', 00H
	ORG $+3
$SG143880 DB	'viewpos', 00H
$SG143881 DB	'screen size up to 10 points', 00H
$SG143882 DB	'sizeup', 00H
	ORG $+1
$SG143883 DB	'screen size down to 10 points', 00H
	ORG $+2
$SG143884 DB	'sizedown', 00H
	ORG $+3
$SG143886 DB	'^1Error:^7 can''t initialize gameui.dll', 0aH, 00H
$SG143889 DB	'-toconsole', 00H
	ORG $+1
$SG143890 DB	'toggleconsole', 0aH, 00H
	ORG $+1
$SG143894 DB	'timerefresh', 00H
$SG143895 DB	'skyname', 00H
$SG143896 DB	'viewpos', 00H
_DATA	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xash_build4529_src\engine\client\cl_scrn.c
_TEXT	SEGMENT
tv71 = -4						; size = 4
_SCR_SizeDown_f PROC

; 675  : {

	push	ebp
	mov	ebp, esp
	push	ecx

; 676  : 	Cvar_SetValue( "viewsize", Q_max( scr_viewsize->value - 10, 30 ));

	mov	eax, DWORD PTR _scr_viewsize
	movss	xmm0, DWORD PTR [eax+12]
	subss	xmm0, DWORD PTR __real@41200000
	comiss	xmm0, DWORD PTR __real@41f00000
	jbe	SHORT $LN3@SCR_SizeDo
	mov	ecx, DWORD PTR _scr_viewsize
	movss	xmm0, DWORD PTR [ecx+12]
	subss	xmm0, DWORD PTR __real@41200000
	movss	DWORD PTR tv71[ebp], xmm0
	jmp	SHORT $LN4@SCR_SizeDo
$LN3@SCR_SizeDo:
	movss	xmm0, DWORD PTR __real@41f00000
	movss	DWORD PTR tv71[ebp], xmm0
$LN4@SCR_SizeDo:
	push	ecx
	movss	xmm0, DWORD PTR tv71[ebp]
	movss	DWORD PTR [esp], xmm0
	push	OFFSET $SG143838
	call	_Cvar_SetValue
	add	esp, 8

; 677  : }

	mov	esp, ebp
	pop	ebp
	ret	0
_SCR_SizeDown_f ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xash_build4529_src\engine\client\cl_scrn.c
_TEXT	SEGMENT
tv71 = -4						; size = 4
_SCR_SizeUp_f PROC

; 662  : {

	push	ebp
	mov	ebp, esp
	push	ecx

; 663  : 	Cvar_SetValue( "viewsize", Q_min( scr_viewsize->value + 10, 120 ));

	mov	eax, DWORD PTR _scr_viewsize
	movss	xmm0, DWORD PTR [eax+12]
	addss	xmm0, DWORD PTR __real@41200000
	movss	xmm1, DWORD PTR __real@42f00000
	comiss	xmm1, xmm0
	jbe	SHORT $LN3@SCR_SizeUp
	mov	ecx, DWORD PTR _scr_viewsize
	movss	xmm0, DWORD PTR [ecx+12]
	addss	xmm0, DWORD PTR __real@41200000
	movss	DWORD PTR tv71[ebp], xmm0
	jmp	SHORT $LN4@SCR_SizeUp
$LN3@SCR_SizeUp:
	movss	xmm0, DWORD PTR __real@42f00000
	movss	DWORD PTR tv71[ebp], xmm0
$LN4@SCR_SizeUp:
	push	ecx
	movss	xmm0, DWORD PTR tv71[ebp]
	movss	DWORD PTR [esp], xmm0
	push	OFFSET $SG143834
	call	_Cvar_SetValue
	add	esp, 8

; 664  : }

	mov	esp, ebp
	pop	ebp
	ret	0
_SCR_SizeUp_f ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xash_build4529_src\engine\client\cl_scrn.c
_TEXT	SEGMENT
_length$ = -20						; size = 4
_fontWidth$ = -16					; size = 4
_buffer$ = -12						; size = 4
_src$ = -8						; size = 4
_i$ = -4						; size = 4
_fontname$ = 8						; size = 4
_SCR_LoadVariableWidthFont PROC

; 524  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H

; 525  : 	int	i, fontWidth;
; 526  : 	byte	*buffer;
; 527  : 	size_t	length;
; 528  : 	qfont_t	*src;
; 529  : 
; 530  : 	if( cls.creditsFont.valid )

	cmp	DWORD PTR _cls+291748, 0
	je	SHORT $LN5@SCR_LoadVa

; 531  : 		return true; // already loaded

	mov	eax, 1
	jmp	$LN1@SCR_LoadVa
$LN5@SCR_LoadVa:

; 532  : 
; 533  : 	if( !FS_FileExists( fontname, false ))

	push	0
	mov	eax, DWORD PTR _fontname$[ebp]
	push	eax
	call	_FS_FileExists
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN6@SCR_LoadVa

; 534  : 		return false;

	xor	eax, eax
	jmp	$LN1@SCR_LoadVa
$LN6@SCR_LoadVa:

; 535  : 
; 536  : 	cls.creditsFont.hFontTexture = GL_LoadTexture( fontname, NULL, 0, TF_IMAGE );

	push	6144					; 00001800H
	push	0
	push	0
	mov	ecx, DWORD PTR _fontname$[ebp]
	push	ecx
	call	_GL_LoadTexture
	add	esp, 16					; 00000010H
	mov	DWORD PTR _cls+287384, eax

; 537  : 	R_GetTextureParms( &fontWidth, NULL, cls.creditsFont.hFontTexture );

	mov	edx, DWORD PTR _cls+287384
	push	edx
	push	0
	lea	eax, DWORD PTR _fontWidth$[ebp]
	push	eax
	call	_R_GetTextureParms
	add	esp, 12					; 0000000cH

; 538  : 
; 539  : 	// half-life font with variable chars witdh
; 540  : 	buffer = FS_LoadFile( fontname, &length, false );

	push	0
	lea	ecx, DWORD PTR _length$[ebp]
	push	ecx
	mov	edx, DWORD PTR _fontname$[ebp]
	push	edx
	call	_FS_LoadFile
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _buffer$[ebp], eax

; 541  : 
; 542  : 	// setup creditsfont	
; 543  : 	if( buffer && length >= sizeof( qfont_t ))

	cmp	DWORD PTR _buffer$[ebp], 0
	je	$LN7@SCR_LoadVa
	cmp	DWORD PTR _length$[ebp], 1044		; 00000414H
	jb	$LN7@SCR_LoadVa

; 544  : 	{
; 545  : 		src = (qfont_t *)buffer;

	mov	eax, DWORD PTR _buffer$[ebp]
	mov	DWORD PTR _src$[ebp], eax

; 546  : 		cls.creditsFont.charHeight = clgame.scrInfo.iCharHeight = src->rowheight;

	mov	ecx, DWORD PTR _src$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR _clgame+124900, edx
	mov	eax, DWORD PTR _clgame+124900
	mov	DWORD PTR _cls+291740, eax

; 547  : 		cls.creditsFont.type = FONT_VARIABLE;

	mov	DWORD PTR _cls+291744, 1

; 548  : 
; 549  : 		// build rectangles
; 550  : 		for( i = 0; i < 256; i++ )

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN4@SCR_LoadVa
$LN2@SCR_LoadVa:
	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
$LN4@SCR_LoadVa:
	cmp	DWORD PTR _i$[ebp], 256			; 00000100H
	jge	$LN3@SCR_LoadVa

; 551  : 		{
; 552  : 			cls.creditsFont.fontRc[i].left = (word)src->fontinfo[i].startoffset % fontWidth;

	mov	edx, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR _src$[ebp]
	movzx	eax, WORD PTR [eax+edx*4+16]
	cdq
	idiv	DWORD PTR _fontWidth$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	shl	ecx, 4
	mov	DWORD PTR _cls[ecx+287388], edx

; 553  : 			cls.creditsFont.fontRc[i].right = cls.creditsFont.fontRc[i].left + src->fontinfo[i].charwidth;

	mov	edx, DWORD PTR _i$[ebp]
	shl	edx, 4
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _src$[ebp]
	movsx	eax, WORD PTR [ecx+eax*4+18]
	add	eax, DWORD PTR _cls[edx+287388]
	mov	ecx, DWORD PTR _i$[ebp]
	shl	ecx, 4
	mov	DWORD PTR _cls[ecx+287392], eax

; 554  : 			cls.creditsFont.fontRc[i].top = (word)src->fontinfo[i].startoffset / fontWidth;

	mov	edx, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR _src$[ebp]
	movzx	eax, WORD PTR [eax+edx*4+16]
	cdq
	idiv	DWORD PTR _fontWidth$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	shl	ecx, 4
	mov	DWORD PTR _cls[ecx+287396], eax

; 555  : 			cls.creditsFont.fontRc[i].bottom = cls.creditsFont.fontRc[i].top + src->rowheight;

	mov	edx, DWORD PTR _i$[ebp]
	shl	edx, 4
	mov	eax, DWORD PTR _cls[edx+287396]
	mov	ecx, DWORD PTR _src$[ebp]
	add	eax, DWORD PTR [ecx+12]
	mov	edx, DWORD PTR _i$[ebp]
	shl	edx, 4
	mov	DWORD PTR _cls[edx+287400], eax

; 556  : 			cls.creditsFont.charWidths[i] = clgame.scrInfo.charWidths[i] = src->fontinfo[i].charwidth;

	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR _src$[ebp]
	mov	cx, WORD PTR [edx+ecx*4+18]
	mov	WORD PTR _clgame[eax*2+124904], cx
	mov	edx, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR _i$[ebp]
	mov	cl, BYTE PTR _clgame[eax*2+124904]
	mov	BYTE PTR _cls[edx+291484], cl

; 557  : 		}

	jmp	$LN2@SCR_LoadVa
$LN3@SCR_LoadVa:

; 558  : 		cls.creditsFont.valid = true;

	mov	DWORD PTR _cls+291748, 1
$LN7@SCR_LoadVa:

; 559  : 	}
; 560  : 	if( buffer ) Mem_Free( buffer );

	cmp	DWORD PTR _buffer$[ebp], 0
	je	SHORT $LN8@SCR_LoadVa
	push	560					; 00000230H
	push	OFFSET $SG143773
	mov	edx, DWORD PTR _buffer$[ebp]
	push	edx
	call	__Mem_Free
	add	esp, 12					; 0000000cH
$LN8@SCR_LoadVa:

; 561  : 
; 562  : 	return true;

	mov	eax, 1
$LN1@SCR_LoadVa:

; 563  : }

	mov	esp, ebp
	pop	ebp
	ret	0
_SCR_LoadVariableWidthFont ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xash_build4529_src\engine\client\cl_scrn.c
_TEXT	SEGMENT
tv144 = -12						; size = 4
_fontWidth$ = -8					; size = 4
_i$ = -4						; size = 4
_fontname$ = 8						; size = 4
_SCR_LoadFixedWidthFont PROC

; 495  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH

; 496  : 	int	i, fontWidth;
; 497  : 
; 498  : 	if( cls.creditsFont.valid )

	cmp	DWORD PTR _cls+291748, 0
	je	SHORT $LN5@SCR_LoadFi

; 499  : 		return true; // already loaded

	mov	eax, 1
	jmp	$LN1@SCR_LoadFi
$LN5@SCR_LoadFi:

; 500  : 
; 501  : 	if( !FS_FileExists( fontname, false ))

	push	0
	mov	eax, DWORD PTR _fontname$[ebp]
	push	eax
	call	_FS_FileExists
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN6@SCR_LoadFi

; 502  : 		return false;

	xor	eax, eax
	jmp	$LN1@SCR_LoadFi
$LN6@SCR_LoadFi:

; 503  : 
; 504  : 	cls.creditsFont.hFontTexture = GL_LoadTexture( fontname, NULL, 0, TF_IMAGE|TF_KEEP_SOURCE );

	push	6146					; 00001802H
	push	0
	push	0
	mov	ecx, DWORD PTR _fontname$[ebp]
	push	ecx
	call	_GL_LoadTexture
	add	esp, 16					; 00000010H
	mov	DWORD PTR _cls+287384, eax

; 505  : 	R_GetTextureParms( &fontWidth, NULL, cls.creditsFont.hFontTexture );

	mov	edx, DWORD PTR _cls+287384
	push	edx
	push	0
	lea	eax, DWORD PTR _fontWidth$[ebp]
	push	eax
	call	_R_GetTextureParms
	add	esp, 12					; 0000000cH

; 506  : 	cls.creditsFont.charHeight = clgame.scrInfo.iCharHeight = fontWidth / 16;

	mov	eax, DWORD PTR _fontWidth$[ebp]
	cdq
	and	edx, 15					; 0000000fH
	add	eax, edx
	sar	eax, 4
	mov	DWORD PTR _clgame+124900, eax
	mov	ecx, DWORD PTR _clgame+124900
	mov	DWORD PTR _cls+291740, ecx

; 507  : 	cls.creditsFont.type = FONT_FIXED;

	mov	DWORD PTR _cls+291744, 0

; 508  : 	cls.creditsFont.valid = true;

	mov	DWORD PTR _cls+291748, 1

; 509  : 
; 510  : 	// build fixed rectangles
; 511  : 	for( i = 0; i < 256; i++ )

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN4@SCR_LoadFi
$LN2@SCR_LoadFi:
	mov	edx, DWORD PTR _i$[ebp]
	add	edx, 1
	mov	DWORD PTR _i$[ebp], edx
$LN4@SCR_LoadFi:
	cmp	DWORD PTR _i$[ebp], 256			; 00000100H
	jge	$LN3@SCR_LoadFi

; 512  : 	{
; 513  : 		cls.creditsFont.fontRc[i].left = (i * (fontWidth / 16)) % fontWidth;

	mov	eax, DWORD PTR _fontWidth$[ebp]
	cdq
	and	edx, 15					; 0000000fH
	add	eax, edx
	sar	eax, 4
	imul	eax, DWORD PTR _i$[ebp]
	cdq
	idiv	DWORD PTR _fontWidth$[ebp]
	mov	eax, DWORD PTR _i$[ebp]
	shl	eax, 4
	mov	DWORD PTR _cls[eax+287388], edx

; 514  : 		cls.creditsFont.fontRc[i].right = cls.creditsFont.fontRc[i].left + fontWidth / 16;

	mov	ecx, DWORD PTR _i$[ebp]
	shl	ecx, 4
	mov	eax, DWORD PTR _fontWidth$[ebp]
	cdq
	and	edx, 15					; 0000000fH
	add	eax, edx
	sar	eax, 4
	add	eax, DWORD PTR _cls[ecx+287388]
	mov	edx, DWORD PTR _i$[ebp]
	shl	edx, 4
	mov	DWORD PTR _cls[edx+287392], eax

; 515  : 		cls.creditsFont.fontRc[i].top = (i / 16) * (fontWidth / 16);

	mov	eax, DWORD PTR _i$[ebp]
	cdq
	and	edx, 15					; 0000000fH
	add	eax, edx
	mov	ecx, eax
	sar	ecx, 4
	mov	eax, DWORD PTR _fontWidth$[ebp]
	cdq
	and	edx, 15					; 0000000fH
	add	eax, edx
	sar	eax, 4
	imul	ecx, eax
	mov	edx, DWORD PTR _i$[ebp]
	shl	edx, 4
	mov	DWORD PTR _cls[edx+287396], ecx

; 516  : 		cls.creditsFont.fontRc[i].bottom = cls.creditsFont.fontRc[i].top + fontWidth / 16;

	mov	ecx, DWORD PTR _i$[ebp]
	shl	ecx, 4
	mov	eax, DWORD PTR _fontWidth$[ebp]
	cdq
	and	edx, 15					; 0000000fH
	add	eax, edx
	sar	eax, 4
	add	eax, DWORD PTR _cls[ecx+287396]
	mov	edx, DWORD PTR _i$[ebp]
	shl	edx, 4
	mov	DWORD PTR _cls[edx+287400], eax

; 517  : 		cls.creditsFont.charWidths[i] = clgame.scrInfo.charWidths[i] = fontWidth / 16;

	mov	eax, DWORD PTR _fontWidth$[ebp]
	cdq
	and	edx, 15					; 0000000fH
	add	eax, edx
	sar	eax, 4
	mov	DWORD PTR tv144[ebp], eax
	mov	eax, DWORD PTR _i$[ebp]
	mov	cx, WORD PTR tv144[ebp]
	mov	WORD PTR _clgame[eax*2+124904], cx
	mov	edx, DWORD PTR _i$[ebp]
	mov	al, BYTE PTR tv144[ebp]
	mov	BYTE PTR _cls[edx+291484], al

; 518  : 	}

	jmp	$LN2@SCR_LoadFi
$LN3@SCR_LoadFi:

; 519  : 
; 520  : 	return true;

	mov	eax, 1
$LN1@SCR_LoadFi:

; 521  : }

	mov	esp, ebp
	pop	ebp
	ret	0
_SCR_LoadFixedWidthFont ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xash_build4529_src\engine\client\cl_scrn.c
_TEXT	SEGMENT
_levelshot$1 = -4					; size = 4
_SCR_DrawPlaque PROC

; 295  : {

	push	ebp
	mov	ebp, esp
	push	ecx

; 296  : 	if(( cl_allow_levelshots->value && !cls.changelevel ) || cl.background )

	mov	eax, DWORD PTR _cl_allow_levelshots
	movss	xmm0, DWORD PTR [eax+12]
	ucomiss	xmm0, DWORD PTR __real@00000000
	lahf
	test	ah, 68					; 00000044H
	jnp	SHORT $LN4@SCR_DrawPl
	cmp	DWORD PTR _cls+8, 0
	je	SHORT $LN3@SCR_DrawPl
$LN4@SCR_DrawPl:
	cmp	DWORD PTR _cl+64, 0
	je	$LN5@SCR_DrawPl
$LN3@SCR_DrawPl:

; 297  : 	{
; 298  : 		int levelshot = GL_LoadTexture( cl_levelshot_name->string, NULL, 0, TF_IMAGE );

	push	6144					; 00001800H
	push	0
	push	0
	mov	ecx, DWORD PTR _cl_levelshot_name
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	call	_GL_LoadTexture
	add	esp, 16					; 00000010H
	mov	DWORD PTR _levelshot$1[ebp], eax

; 299  : 		GL_SetRenderMode( kRenderNormal );

	push	0
	call	_GL_SetRenderMode
	add	esp, 4

; 300  : 		R_DrawStretchPic( 0, 0, glState.width, glState.height, 0, 0, 1, 1, levelshot );

	mov	eax, DWORD PTR _levelshot$1[ebp]
	push	eax
	push	ecx
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	xorps	xmm0, xmm0
	movss	DWORD PTR [esp], xmm0
	push	ecx
	xorps	xmm0, xmm0
	movss	DWORD PTR [esp], xmm0
	cvtsi2ss xmm0, DWORD PTR _glState+4
	push	ecx
	movss	DWORD PTR [esp], xmm0
	cvtsi2ss xmm0, DWORD PTR _glState
	push	ecx
	movss	DWORD PTR [esp], xmm0
	push	ecx
	xorps	xmm0, xmm0
	movss	DWORD PTR [esp], xmm0
	push	ecx
	xorps	xmm0, xmm0
	movss	DWORD PTR [esp], xmm0
	call	_R_DrawStretchPic
	add	esp, 36					; 00000024H

; 301  : 		if( !cl.background ) CL_DrawHUD( CL_LOADING );

	cmp	DWORD PTR _cl+64, 0
	jne	SHORT $LN5@SCR_DrawPl
	push	1
	call	_CL_DrawHUD
	add	esp, 4
$LN5@SCR_DrawPl:

; 302  : 	}
; 303  : }

	mov	esp, ebp
	pop	ebp
	ret	0
_SCR_DrawPlaque ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xash_build4529_src\engine\client\cl_scrn.c
_TEXT	SEGMENT
tv86 = -112						; size = 8
_newtime$ = -104					; size = 8
_offset$ = -96						; size = 4
$T1 = -92						; size = 4
$T2 = -88						; size = 4
tv68 = -84						; size = 4
_calc$ = -80						; size = 4
_curfps$3 = -76						; size = 4
_color$ = -72						; size = 4
_fpsstring$ = -68					; size = 64
__$ArrayPad$ = -4					; size = 4
_height$ = 8						; size = 4
_SCR_DrawFPS PROC

; 47   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 112				; 00000070H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 48   : 	float		calc;
; 49   : 	rgba_t		color;
; 50   : 	double		newtime;
; 51   : 	static double	nexttime = 0, lasttime = 0;
; 52   : 	static double	framerate = 0;
; 53   : 	static int	framecount = 0;
; 54   : 	static int	minfps = 9999;
; 55   : 	static int	maxfps = 0;
; 56   : 	char		fpsstring[64];
; 57   : 	int		offset;
; 58   : 
; 59   : 	if( cls.state != ca_active || !cl_showfps->value || cl.background )

	cmp	DWORD PTR _cls, 4
	jne	SHORT $LN5@SCR_DrawFP
	mov	eax, DWORD PTR _cl_showfps
	movss	xmm0, DWORD PTR [eax+12]
	ucomiss	xmm0, DWORD PTR __real@00000000
	lahf
	test	ah, 68					; 00000044H
	jnp	SHORT $LN5@SCR_DrawFP
	cmp	DWORD PTR _cl+64, 0
	je	SHORT $LN4@SCR_DrawFP
$LN5@SCR_DrawFP:

; 60   : 		return; 

	jmp	$LN1@SCR_DrawFP
$LN4@SCR_DrawFP:

; 61   : 
; 62   : 	switch( cls.scrshot_action )

	mov	ecx, DWORD PTR _cls+293060
	mov	DWORD PTR tv68[ebp], ecx
	cmp	DWORD PTR tv68[ebp], 0
	jl	SHORT $LN7@SCR_DrawFP
	cmp	DWORD PTR tv68[ebp], 2
	jle	SHORT $LN6@SCR_DrawFP
	jmp	SHORT $LN7@SCR_DrawFP
$LN6@SCR_DrawFP:

; 63   : 	{
; 64   : 	case scrshot_normal:
; 65   : 	case scrshot_snapshot:
; 66   : 	case scrshot_inactive:
; 67   : 		break;

	jmp	SHORT $LN2@SCR_DrawFP
$LN7@SCR_DrawFP:

; 68   : 	default: return;

	jmp	$LN1@SCR_DrawFP
$LN2@SCR_DrawFP:

; 69   : 	}
; 70   : 
; 71   : 	newtime = Sys_DoubleTime();

	call	_Sys_DoubleTime
	fstp	QWORD PTR _newtime$[ebp]

; 72   : 	if( newtime >= nexttime )

	movsd	xmm0, QWORD PTR _newtime$[ebp]
	comisd	xmm0, QWORD PTR ?nexttime@?1??SCR_DrawFPS@@9@9
	jb	$LN8@SCR_DrawFP

; 73   : 	{
; 74   : 		framerate = framecount / (newtime - lasttime);

	cvtsi2sd xmm0, DWORD PTR ?framecount@?1??SCR_DrawFPS@@9@9
	movsd	xmm1, QWORD PTR _newtime$[ebp]
	subsd	xmm1, QWORD PTR ?lasttime@?1??SCR_DrawFPS@@9@9
	divsd	xmm0, xmm1
	movsd	QWORD PTR ?framerate@?1??SCR_DrawFPS@@9@9, xmm0

; 75   : 		lasttime = newtime;

	movsd	xmm0, QWORD PTR _newtime$[ebp]
	movsd	QWORD PTR ?lasttime@?1??SCR_DrawFPS@@9@9, xmm0

; 76   : 		nexttime = Q_max( nexttime + 1.0, lasttime - 1.0 );

	movsd	xmm0, QWORD PTR ?nexttime@?1??SCR_DrawFPS@@9@9
	addsd	xmm0, QWORD PTR __real@3ff0000000000000
	movsd	xmm1, QWORD PTR ?lasttime@?1??SCR_DrawFPS@@9@9
	subsd	xmm1, QWORD PTR __real@3ff0000000000000
	comisd	xmm0, xmm1
	jbe	SHORT $LN16@SCR_DrawFP
	movsd	xmm0, QWORD PTR ?nexttime@?1??SCR_DrawFPS@@9@9
	addsd	xmm0, QWORD PTR __real@3ff0000000000000
	movsd	QWORD PTR tv86[ebp], xmm0
	jmp	SHORT $LN17@SCR_DrawFP
$LN16@SCR_DrawFP:
	movsd	xmm0, QWORD PTR ?lasttime@?1??SCR_DrawFPS@@9@9
	subsd	xmm0, QWORD PTR __real@3ff0000000000000
	movsd	QWORD PTR tv86[ebp], xmm0
$LN17@SCR_DrawFP:
	movsd	xmm0, QWORD PTR tv86[ebp]
	movsd	QWORD PTR ?nexttime@?1??SCR_DrawFPS@@9@9, xmm0

; 77   : 		framecount = 0;

	mov	DWORD PTR ?framecount@?1??SCR_DrawFPS@@9@9, 0
$LN8@SCR_DrawFP:

; 78   : 	}
; 79   : 
; 80   : 	calc = framerate;

	cvtsd2ss xmm0, QWORD PTR ?framerate@?1??SCR_DrawFPS@@9@9
	movss	DWORD PTR _calc$[ebp], xmm0

; 81   : 	framecount++;

	mov	edx, DWORD PTR ?framecount@?1??SCR_DrawFPS@@9@9
	add	edx, 1
	mov	DWORD PTR ?framecount@?1??SCR_DrawFPS@@9@9, edx

; 82   : 
; 83   : 	if( calc < 1.0f )

	movss	xmm0, DWORD PTR __real@3f800000
	comiss	xmm0, DWORD PTR _calc$[ebp]
	jbe	$LN9@SCR_DrawFP

; 84   : 	{
; 85   : 		Q_snprintf( fpsstring, sizeof( fpsstring ), "%4i spf", (int)(1.0f / calc + 0.5f));

	movss	xmm0, DWORD PTR __real@3f800000
	divss	xmm0, DWORD PTR _calc$[ebp]
	addss	xmm0, DWORD PTR __real@3f000000
	cvttss2si eax, xmm0
	push	eax
	push	OFFSET $SG143572
	push	64					; 00000040H
	lea	ecx, DWORD PTR _fpsstring$[ebp]
	push	ecx
	call	_Q_snprintf
	add	esp, 16					; 00000010H

; 86   : 		MakeRGBA( color, 255, 0, 0, 255 );

	mov	edx, 1
	imul	eax, edx, 0
	mov	BYTE PTR _color$[ebp+eax], 255		; 000000ffH
	mov	DWORD PTR $T2[ebp], 1
	cmp	DWORD PTR $T2[ebp], 4
	jae	SHORT $LN18@SCR_DrawFP
	jmp	SHORT $LN19@SCR_DrawFP
$LN18@SCR_DrawFP:
	call	___report_rangecheckfailure
$LN19@SCR_DrawFP:
	mov	ecx, DWORD PTR $T2[ebp]
	mov	BYTE PTR _color$[ebp+ecx], 0
	mov	edx, 1
	shl	edx, 1
	mov	DWORD PTR $T1[ebp], edx
	cmp	DWORD PTR $T1[ebp], 4
	jae	SHORT $LN20@SCR_DrawFP
	jmp	SHORT $LN21@SCR_DrawFP
$LN20@SCR_DrawFP:
	call	___report_rangecheckfailure
$LN21@SCR_DrawFP:
	mov	eax, DWORD PTR $T1[ebp]
	mov	BYTE PTR _color$[ebp+eax], 0
	mov	ecx, 1
	imul	edx, ecx, 3
	mov	BYTE PTR _color$[ebp+edx], 255		; 000000ffH

; 87   : 	}

	jmp	$LN10@SCR_DrawFP
$LN9@SCR_DrawFP:

; 88   : 	else
; 89   : 	{
; 90   : 		int	curfps = (int)(calc + 0.5f);

	movss	xmm0, DWORD PTR _calc$[ebp]
	addss	xmm0, DWORD PTR __real@3f000000
	cvttss2si eax, xmm0
	mov	DWORD PTR _curfps$3[ebp], eax

; 91   : 
; 92   : 		if( curfps < minfps ) minfps = curfps;

	mov	ecx, DWORD PTR _curfps$3[ebp]
	cmp	ecx, DWORD PTR ?minfps@?1??SCR_DrawFPS@@9@9
	jge	SHORT $LN11@SCR_DrawFP
	mov	edx, DWORD PTR _curfps$3[ebp]
	mov	DWORD PTR ?minfps@?1??SCR_DrawFPS@@9@9, edx
$LN11@SCR_DrawFP:

; 93   : 		if( curfps > maxfps ) maxfps = curfps;

	mov	eax, DWORD PTR _curfps$3[ebp]
	cmp	eax, DWORD PTR ?maxfps@?1??SCR_DrawFPS@@9@9
	jle	SHORT $LN12@SCR_DrawFP
	mov	ecx, DWORD PTR _curfps$3[ebp]
	mov	DWORD PTR ?maxfps@?1??SCR_DrawFPS@@9@9, ecx
$LN12@SCR_DrawFP:

; 94   : 
; 95   : 		if( cl_showfps->value == 2 )

	mov	edx, DWORD PTR _cl_showfps
	movss	xmm0, DWORD PTR [edx+12]
	ucomiss	xmm0, DWORD PTR __real@40000000
	lahf
	test	ah, 68					; 00000044H
	jp	SHORT $LN13@SCR_DrawFP

; 96   : 			Q_snprintf( fpsstring, sizeof( fpsstring ), "fps: ^1%4i min, ^3%4i cur, ^2%4i max", minfps, curfps, maxfps );

	mov	eax, DWORD PTR ?maxfps@?1??SCR_DrawFPS@@9@9
	push	eax
	mov	ecx, DWORD PTR _curfps$3[ebp]
	push	ecx
	mov	edx, DWORD PTR ?minfps@?1??SCR_DrawFPS@@9@9
	push	edx
	push	OFFSET $SG143577
	push	64					; 00000040H
	lea	eax, DWORD PTR _fpsstring$[ebp]
	push	eax
	call	_Q_snprintf
	add	esp, 24					; 00000018H
	jmp	SHORT $LN14@SCR_DrawFP
$LN13@SCR_DrawFP:

; 97   : 		else Q_snprintf( fpsstring, sizeof( fpsstring ), "%4i fps", curfps );

	mov	ecx, DWORD PTR _curfps$3[ebp]
	push	ecx
	push	OFFSET $SG143578
	push	64					; 00000040H
	lea	edx, DWORD PTR _fpsstring$[ebp]
	push	edx
	call	_Q_snprintf
	add	esp, 16					; 00000010H
$LN14@SCR_DrawFP:

; 98   : 		MakeRGBA( color, 255, 255, 255, 255 );

	mov	eax, 1
	imul	ecx, eax, 0
	mov	BYTE PTR _color$[ebp+ecx], 255		; 000000ffH
	mov	edx, 1
	shl	edx, 0
	mov	BYTE PTR _color$[ebp+edx], 255		; 000000ffH
	mov	eax, 1
	shl	eax, 1
	mov	BYTE PTR _color$[ebp+eax], 255		; 000000ffH
	mov	ecx, 1
	imul	edx, ecx, 3
	mov	BYTE PTR _color$[ebp+edx], 255		; 000000ffH
$LN10@SCR_DrawFP:

; 99   :           }
; 100  : 
; 101  : 	Con_DrawStringLen( fpsstring, &offset, NULL );

	push	0
	lea	eax, DWORD PTR _offset$[ebp]
	push	eax
	lea	ecx, DWORD PTR _fpsstring$[ebp]
	push	ecx
	call	_Con_DrawStringLen
	add	esp, 12					; 0000000cH

; 102  : 	Con_DrawString( glState.width - offset - 4, height, fpsstring, color );

	lea	edx, DWORD PTR _color$[ebp]
	push	edx
	lea	eax, DWORD PTR _fpsstring$[ebp]
	push	eax
	mov	ecx, DWORD PTR _height$[ebp]
	push	ecx
	mov	edx, DWORD PTR _glState
	sub	edx, DWORD PTR _offset$[ebp]
	sub	edx, 4
	push	edx
	call	_Con_DrawString
	add	esp, 16					; 00000010H
$LN1@SCR_DrawFP:

; 103  : }

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_SCR_DrawFPS ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xash_build4529_src\engine\client\cl_scrn.c
_TEXT	SEGMENT
_x$1 = -2084						; size = 4
_height$2 = -2080					; size = 4
$T3 = -2076						; size = 4
_start$4 = -2072					; size = 4
_p$5 = -2068						; size = 4
_end$6 = -2064						; size = 4
_color$7 = -2060					; size = 4
_y$8 = -2056						; size = 4
_msg$ = -2052						; size = 2048
__$ArrayPad$ = -4					; size = 4
_SCR_RSpeeds PROC

; 178  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 2084				; 00000824H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 179  : 	char	msg[2048];
; 180  : 
; 181  : 	if( !host.allow_console )

	cmp	DWORD PTR _host+34336, 0
	jne	SHORT $LN5@SCR_RSpeed

; 182  : 		return;

	jmp	$LN11@SCR_RSpeed
$LN5@SCR_RSpeed:

; 183  : 
; 184  : 	if( R_SpeedsMessage( msg, sizeof( msg )))

	push	2048					; 00000800H
	lea	eax, DWORD PTR _msg$[ebp]
	push	eax
	call	_R_SpeedsMessage
	add	esp, 8
	test	eax, eax
	je	$LN11@SCR_RSpeed

; 185  : 	{
; 186  : 		int	x, y, height;
; 187  : 		char	*p, *start, *end;
; 188  : 		rgba_t	color;
; 189  : 
; 190  : 		x = glState.width - 340;

	mov	ecx, DWORD PTR _glState
	sub	ecx, 340				; 00000154H
	mov	DWORD PTR _x$1[ebp], ecx

; 191  : 		y = 64;

	mov	DWORD PTR _y$8[ebp], 64			; 00000040H

; 192  : 
; 193  : 		Con_DrawStringLen( NULL, NULL, &height );

	lea	edx, DWORD PTR _height$2[ebp]
	push	edx
	push	0
	push	0
	call	_Con_DrawStringLen
	add	esp, 12					; 0000000cH

; 194  : 		MakeRGBA( color, 255, 255, 255, 255 );

	mov	eax, 1
	imul	ecx, eax, 0
	mov	BYTE PTR _color$7[ebp+ecx], 255		; 000000ffH
	mov	edx, 1
	shl	edx, 0
	mov	BYTE PTR _color$7[ebp+edx], 255		; 000000ffH
	mov	eax, 1
	shl	eax, 1
	mov	BYTE PTR _color$7[ebp+eax], 255		; 000000ffH
	mov	ecx, 1
	imul	edx, ecx, 3
	mov	BYTE PTR _color$7[ebp+edx], 255		; 000000ffH

; 195  : 
; 196  : 		p = start = msg;

	lea	eax, DWORD PTR _msg$[ebp]
	mov	DWORD PTR _start$4[ebp], eax
	mov	ecx, DWORD PTR _start$4[ebp]
	mov	DWORD PTR _p$5[ebp], ecx
$LN4@SCR_RSpeed:

; 197  : 		do
; 198  : 		{
; 199  : 			end = Q_strchr( p, '\n' );

	push	10					; 0000000aH
	mov	edx, DWORD PTR _p$5[ebp]
	push	edx
	call	_Q_strchr
	add	esp, 8
	mov	DWORD PTR _end$6[ebp], eax

; 200  : 			if( end ) msg[end-start] = '\0';

	cmp	DWORD PTR _end$6[ebp], 0
	je	SHORT $LN7@SCR_RSpeed
	mov	eax, DWORD PTR _end$6[ebp]
	sub	eax, DWORD PTR _start$4[ebp]
	mov	DWORD PTR $T3[ebp], eax
	cmp	DWORD PTR $T3[ebp], 2048		; 00000800H
	jae	SHORT $LN12@SCR_RSpeed
	jmp	SHORT $LN13@SCR_RSpeed
$LN12@SCR_RSpeed:
	call	___report_rangecheckfailure
$LN13@SCR_RSpeed:
	mov	ecx, DWORD PTR $T3[ebp]
	mov	BYTE PTR _msg$[ebp+ecx], 0
$LN7@SCR_RSpeed:

; 201  : 
; 202  : 			Con_DrawString( x, y, p, color );

	lea	edx, DWORD PTR _color$7[ebp]
	push	edx
	mov	eax, DWORD PTR _p$5[ebp]
	push	eax
	mov	ecx, DWORD PTR _y$8[ebp]
	push	ecx
	mov	edx, DWORD PTR _x$1[ebp]
	push	edx
	call	_Con_DrawString
	add	esp, 16					; 00000010H

; 203  : 			y += height;

	mov	eax, DWORD PTR _y$8[ebp]
	add	eax, DWORD PTR _height$2[ebp]
	mov	DWORD PTR _y$8[ebp], eax

; 204  : 
; 205  : 			// handle '\n\n'
; 206  : 			if( *p == '\n' ) 

	mov	ecx, DWORD PTR _p$5[ebp]
	movsx	edx, BYTE PTR [ecx]
	cmp	edx, 10					; 0000000aH
	jne	SHORT $LN8@SCR_RSpeed

; 207  : 				y += height;

	mov	eax, DWORD PTR _y$8[ebp]
	add	eax, DWORD PTR _height$2[ebp]
	mov	DWORD PTR _y$8[ebp], eax
$LN8@SCR_RSpeed:

; 208  : 			if( end ) p = end + 1;

	cmp	DWORD PTR _end$6[ebp], 0
	je	SHORT $LN9@SCR_RSpeed
	mov	ecx, DWORD PTR _end$6[ebp]
	add	ecx, 1
	mov	DWORD PTR _p$5[ebp], ecx
	jmp	SHORT $LN2@SCR_RSpeed
$LN9@SCR_RSpeed:

; 209  : 			else break;

	jmp	SHORT $LN11@SCR_RSpeed
$LN2@SCR_RSpeed:

; 210  : 		} while( 1 );

	mov	edx, 1
	test	edx, edx
	jne	$LN4@SCR_RSpeed
$LN11@SCR_RSpeed:

; 211  : 	}
; 212  : }

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_SCR_RSpeeds ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xash_build4529_src\engine\client\cl_scrn.c
_TEXT	SEGMENT
tv279 = -76						; size = 8
tv268 = -68						; size = 8
_height$ = -60						; size = 4
_x$ = -56						; size = 4
$T1 = -52						; size = 4
_start$ = -48						; size = 4
_time$ = -44						; size = 4
tv275 = -40						; size = 4
tv264 = -36						; size = 4
tv166 = -32						; size = 4
tv141 = -28						; size = 4
_p$ = -24						; size = 4
_y$ = -20						; size = 4
_end$ = -16						; size = 4
_color$ = -12						; size = 4
_cur_svfps$ = -8					; size = 4
_cur_clfps$ = -4					; size = 4
_SCR_NetSpeeds PROC

; 113  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 76					; 0000004cH

; 114  : 	static char	msg[MAX_SYSPATH];
; 115  : 	int		x, y, height;
; 116  : 	char		*p, *start, *end;
; 117  : 	float		time = cl.mtime[0];

	mov	eax, 8
	imul	ecx, eax, 0
	cvtsd2ss xmm0, QWORD PTR _cl[ecx+32]
	movss	DWORD PTR _time$[ebp], xmm0

; 118  : 	static int	min_svfps = 100;
; 119  : 	static int	max_svfps = 0;
; 120  : 	int		cur_svfps = 0;

	mov	DWORD PTR _cur_svfps$[ebp], 0

; 121  : 	static int	min_clfps = 100;
; 122  : 	static int	max_clfps = 0;
; 123  : 	int		cur_clfps = 0;

	mov	DWORD PTR _cur_clfps$[ebp], 0

; 124  : 	rgba_t		color;
; 125  : 
; 126  : 	if( !host.allow_console )

	cmp	DWORD PTR _host+34336, 0
	jne	SHORT $LN5@SCR_NetSpe

; 127  : 		return;

	jmp	$LN3@SCR_NetSpe
$LN5@SCR_NetSpe:

; 128  : 
; 129  : 	if( !net_speeds->value || cls.state != ca_active )

	mov	edx, DWORD PTR _net_speeds
	movss	xmm0, DWORD PTR [edx+12]
	ucomiss	xmm0, DWORD PTR __real@00000000
	lahf
	test	ah, 68					; 00000044H
	jnp	SHORT $LN7@SCR_NetSpe
	cmp	DWORD PTR _cls, 4
	je	SHORT $LN6@SCR_NetSpe
$LN7@SCR_NetSpe:

; 130  : 		return;

	jmp	$LN3@SCR_NetSpe
$LN6@SCR_NetSpe:

; 131  : 
; 132  : 	// prevent to get too big values at max
; 133  : 	if( cl_serverframetime() > 0.0001f )

	mov	eax, 8
	imul	ecx, eax, 0
	mov	edx, 8
	shl	edx, 0
	movsd	xmm0, QWORD PTR _cl[ecx+32]
	subsd	xmm0, QWORD PTR _cl[edx+32]
	comisd	xmm0, QWORD PTR __real@3f1a36e2e0000000
	jbe	$LN10@SCR_NetSpe

; 134  : 	{
; 135  : 		cur_svfps = Q_rint( 1.0f / cl_serverframetime( ));

	mov	eax, 8
	imul	ecx, eax, 0
	mov	edx, 8
	shl	edx, 0
	movsd	xmm0, QWORD PTR _cl[ecx+32]
	subsd	xmm0, QWORD PTR _cl[edx+32]
	movsd	xmm1, QWORD PTR __real@3ff0000000000000
	divsd	xmm1, xmm0
	xorps	xmm0, xmm0
	comisd	xmm0, xmm1
	jbe	SHORT $LN18@SCR_NetSpe
	mov	eax, 8
	imul	ecx, eax, 0
	mov	edx, 8
	shl	edx, 0
	movsd	xmm0, QWORD PTR _cl[ecx+32]
	subsd	xmm0, QWORD PTR _cl[edx+32]
	movsd	xmm1, QWORD PTR __real@3ff0000000000000
	divsd	xmm1, xmm0
	subsd	xmm1, QWORD PTR __real@3fe0000000000000
	cvttsd2si eax, xmm1
	mov	DWORD PTR tv141[ebp], eax
	jmp	SHORT $LN19@SCR_NetSpe
$LN18@SCR_NetSpe:
	mov	ecx, 8
	imul	edx, ecx, 0
	mov	eax, 8
	shl	eax, 0
	movsd	xmm0, QWORD PTR _cl[edx+32]
	subsd	xmm0, QWORD PTR _cl[eax+32]
	movsd	xmm1, QWORD PTR __real@3ff0000000000000
	divsd	xmm1, xmm0
	addsd	xmm1, QWORD PTR __real@3fe0000000000000
	cvttsd2si ecx, xmm1
	mov	DWORD PTR tv141[ebp], ecx
$LN19@SCR_NetSpe:
	mov	edx, DWORD PTR tv141[ebp]
	mov	DWORD PTR _cur_svfps$[ebp], edx

; 136  : 		if( cur_svfps < min_svfps ) min_svfps = cur_svfps;

	mov	eax, DWORD PTR _cur_svfps$[ebp]
	cmp	eax, DWORD PTR ?min_svfps@?1??SCR_NetSpeeds@@9@9
	jge	SHORT $LN9@SCR_NetSpe
	mov	ecx, DWORD PTR _cur_svfps$[ebp]
	mov	DWORD PTR ?min_svfps@?1??SCR_NetSpeeds@@9@9, ecx
$LN9@SCR_NetSpe:

; 137  : 		if( cur_svfps > max_svfps ) max_svfps = cur_svfps;

	mov	edx, DWORD PTR _cur_svfps$[ebp]
	cmp	edx, DWORD PTR ?max_svfps@?1??SCR_NetSpeeds@@9@9
	jle	SHORT $LN10@SCR_NetSpe
	mov	eax, DWORD PTR _cur_svfps$[ebp]
	mov	DWORD PTR ?max_svfps@?1??SCR_NetSpeeds@@9@9, eax
$LN10@SCR_NetSpe:

; 138  : 	}
; 139  : 
; 140  : 	// prevent to get too big values at max
; 141  : 	if( cl_clientframetime() > 0.0001f )

	movsd	xmm0, QWORD PTR _cl+1525848
	subsd	xmm0, QWORD PTR _cl+1525856
	comisd	xmm0, QWORD PTR __real@3f1a36e2e0000000
	jbe	$LN13@SCR_NetSpe

; 142  : 	{
; 143  : 		cur_clfps = Q_rint( 1.0f / cl_clientframetime( ));

	movsd	xmm0, QWORD PTR _cl+1525848
	subsd	xmm0, QWORD PTR _cl+1525856
	movsd	xmm1, QWORD PTR __real@3ff0000000000000
	divsd	xmm1, xmm0
	xorps	xmm0, xmm0
	comisd	xmm0, xmm1
	jbe	SHORT $LN20@SCR_NetSpe
	movsd	xmm0, QWORD PTR _cl+1525848
	subsd	xmm0, QWORD PTR _cl+1525856
	movsd	xmm1, QWORD PTR __real@3ff0000000000000
	divsd	xmm1, xmm0
	subsd	xmm1, QWORD PTR __real@3fe0000000000000
	cvttsd2si ecx, xmm1
	mov	DWORD PTR tv166[ebp], ecx
	jmp	SHORT $LN21@SCR_NetSpe
$LN20@SCR_NetSpe:
	movsd	xmm0, QWORD PTR _cl+1525848
	subsd	xmm0, QWORD PTR _cl+1525856
	movsd	xmm1, QWORD PTR __real@3ff0000000000000
	divsd	xmm1, xmm0
	addsd	xmm1, QWORD PTR __real@3fe0000000000000
	cvttsd2si edx, xmm1
	mov	DWORD PTR tv166[ebp], edx
$LN21@SCR_NetSpe:
	mov	eax, DWORD PTR tv166[ebp]
	mov	DWORD PTR _cur_clfps$[ebp], eax

; 144  : 		if( cur_clfps < min_clfps ) min_clfps = cur_clfps;

	mov	ecx, DWORD PTR _cur_clfps$[ebp]
	cmp	ecx, DWORD PTR ?min_clfps@?1??SCR_NetSpeeds@@9@9
	jge	SHORT $LN12@SCR_NetSpe
	mov	edx, DWORD PTR _cur_clfps$[ebp]
	mov	DWORD PTR ?min_clfps@?1??SCR_NetSpeeds@@9@9, edx
$LN12@SCR_NetSpe:

; 145  : 		if( cur_clfps > max_clfps ) max_clfps = cur_clfps;

	mov	eax, DWORD PTR _cur_clfps$[ebp]
	cmp	eax, DWORD PTR ?max_clfps@?1??SCR_NetSpeeds@@9@9
	jle	SHORT $LN13@SCR_NetSpe
	mov	ecx, DWORD PTR _cur_clfps$[ebp]
	mov	DWORD PTR ?max_clfps@?1??SCR_NetSpeeds@@9@9, ecx
$LN13@SCR_NetSpe:

; 146  : 	}
; 147  : 
; 148  : 	Q_snprintf( msg, sizeof( msg ), "sv fps: ^1%4i min, ^3%4i cur, ^2%4i max\ncl fps: ^1%4i min, ^3%4i cur, ^2%4i max\nGame Time: %02d:%02d\nTotal received from server: %s\nTotal sent to server: %s\n",

	push	2
	mov	edx, DWORD PTR _cls+287312
	mov	DWORD PTR tv264[ebp], edx
	cvtsi2sd xmm0, DWORD PTR tv264[ebp]
	mov	eax, DWORD PTR tv264[ebp]
	shr	eax, 31					; 0000001fH
	addsd	xmm0, QWORD PTR __xmm@41f00000000000000000000000000000[eax*8]
	movsd	QWORD PTR tv268[ebp], xmm0
	cvtsd2ss xmm0, QWORD PTR tv268[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	_Q_pretifymem
	add	esp, 8
	push	eax
	push	2
	mov	ecx, DWORD PTR _cls+287316
	mov	DWORD PTR tv275[ebp], ecx
	cvtsi2sd xmm0, DWORD PTR tv275[ebp]
	mov	edx, DWORD PTR tv275[ebp]
	shr	edx, 31					; 0000001fH
	addsd	xmm0, QWORD PTR __xmm@41f00000000000000000000000000000[edx*8]
	movsd	QWORD PTR tv279[ebp], xmm0
	cvtsd2ss xmm0, QWORD PTR tv279[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	_Q_pretifymem
	add	esp, 8
	push	eax
	sub	esp, 8
	movsd	xmm0, QWORD PTR __real@404e000000000000
	movsd	QWORD PTR [esp], xmm0
	cvtss2sd xmm0, DWORD PTR _time$[ebp]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	call	_fmod
	add	esp, 16					; 00000010H
	call	__ftol2_sse
	push	eax
	movss	xmm0, DWORD PTR _time$[ebp]
	divss	xmm0, DWORD PTR __real@42700000
	cvttss2si eax, xmm0
	push	eax
	mov	ecx, DWORD PTR ?max_clfps@?1??SCR_NetSpeeds@@9@9
	push	ecx
	mov	edx, DWORD PTR _cur_clfps$[ebp]
	push	edx
	mov	eax, DWORD PTR ?min_clfps@?1??SCR_NetSpeeds@@9@9
	push	eax
	mov	ecx, DWORD PTR ?max_svfps@?1??SCR_NetSpeeds@@9@9
	push	ecx
	mov	edx, DWORD PTR _cur_svfps$[ebp]
	push	edx
	mov	eax, DWORD PTR ?min_svfps@?1??SCR_NetSpeeds@@9@9
	push	eax
	push	OFFSET $SG143622
	push	1024					; 00000400H
	push	OFFSET ?msg@?1??SCR_NetSpeeds@@9@9
	call	_Q_snprintf
	add	esp, 52					; 00000034H

; 149  : 	min_svfps, cur_svfps, max_svfps, min_clfps, cur_clfps, max_clfps, (int)(time / 60.0f ), (int)fmod( time, 60.0f ), Q_memprint( cls.netchan.total_received ), Q_memprint( cls.netchan.total_sended ));
; 150  : 
; 151  : 	x = glState.width - 320;

	mov	ecx, DWORD PTR _glState
	sub	ecx, 320				; 00000140H
	mov	DWORD PTR _x$[ebp], ecx

; 152  : 	y = 384;

	mov	DWORD PTR _y$[ebp], 384			; 00000180H

; 153  : 
; 154  : 	Con_DrawStringLen( NULL, NULL, &height );

	lea	edx, DWORD PTR _height$[ebp]
	push	edx
	push	0
	push	0
	call	_Con_DrawStringLen
	add	esp, 12					; 0000000cH

; 155  : 	MakeRGBA( color, 255, 255, 255, 255 );

	mov	eax, 1
	imul	ecx, eax, 0
	mov	BYTE PTR _color$[ebp+ecx], 255		; 000000ffH
	mov	edx, 1
	shl	edx, 0
	mov	BYTE PTR _color$[ebp+edx], 255		; 000000ffH
	mov	eax, 1
	shl	eax, 1
	mov	BYTE PTR _color$[ebp+eax], 255		; 000000ffH
	mov	ecx, 1
	imul	edx, ecx, 3
	mov	BYTE PTR _color$[ebp+edx], 255		; 000000ffH

; 156  : 
; 157  : 	p = start = msg;

	mov	DWORD PTR _start$[ebp], OFFSET ?msg@?1??SCR_NetSpeeds@@9@9
	mov	eax, DWORD PTR _start$[ebp]
	mov	DWORD PTR _p$[ebp], eax
$LN4@SCR_NetSpe:

; 158  : 
; 159  : 	do
; 160  : 	{
; 161  : 		end = Q_strchr( p, '\n' );

	push	10					; 0000000aH
	mov	ecx, DWORD PTR _p$[ebp]
	push	ecx
	call	_Q_strchr
	add	esp, 8
	mov	DWORD PTR _end$[ebp], eax

; 162  : 		if( end ) msg[end-start] = '\0';

	cmp	DWORD PTR _end$[ebp], 0
	je	SHORT $LN14@SCR_NetSpe
	mov	edx, DWORD PTR _end$[ebp]
	sub	edx, DWORD PTR _start$[ebp]
	mov	DWORD PTR $T1[ebp], edx
	cmp	DWORD PTR $T1[ebp], 1024		; 00000400H
	jae	SHORT $LN22@SCR_NetSpe
	jmp	SHORT $LN23@SCR_NetSpe
$LN22@SCR_NetSpe:
	call	___report_rangecheckfailure
$LN23@SCR_NetSpe:
	mov	eax, DWORD PTR $T1[ebp]
	mov	BYTE PTR ?msg@?1??SCR_NetSpeeds@@9@9[eax], 0
$LN14@SCR_NetSpe:

; 163  : 
; 164  : 		Con_DrawString( x, y, p, color );

	lea	ecx, DWORD PTR _color$[ebp]
	push	ecx
	mov	edx, DWORD PTR _p$[ebp]
	push	edx
	mov	eax, DWORD PTR _y$[ebp]
	push	eax
	mov	ecx, DWORD PTR _x$[ebp]
	push	ecx
	call	_Con_DrawString
	add	esp, 16					; 00000010H

; 165  : 		y += height;

	mov	edx, DWORD PTR _y$[ebp]
	add	edx, DWORD PTR _height$[ebp]
	mov	DWORD PTR _y$[ebp], edx

; 166  : 
; 167  : 		if( end ) p = end + 1;

	cmp	DWORD PTR _end$[ebp], 0
	je	SHORT $LN15@SCR_NetSpe
	mov	eax, DWORD PTR _end$[ebp]
	add	eax, 1
	mov	DWORD PTR _p$[ebp], eax
	jmp	SHORT $LN16@SCR_NetSpe
$LN15@SCR_NetSpe:

; 168  : 		else break;

	jmp	SHORT $LN3@SCR_NetSpe
$LN16@SCR_NetSpe:

; 169  : 	} while( 1 );

	mov	ecx, 1
	test	ecx, ecx
	jne	SHORT $LN4@SCR_NetSpe
$LN3@SCR_NetSpe:

; 170  : }

	mov	esp, ebp
	pop	ebp
	ret	0
_SCR_NetSpeeds ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xash_build4529_src\engine\client\cl_scrn.c
_TEXT	SEGMENT
_SCR_MakeLevelShot PROC

; 222  : {

	push	ebp
	mov	ebp, esp

; 223  : 	if( cls.scrshot_request != scrshot_plaque )

	cmp	DWORD PTR _cls+293056, 3
	je	SHORT $LN2@SCR_MakeLe

; 224  : 		return;

	jmp	SHORT $LN1@SCR_MakeLe
$LN2@SCR_MakeLe:

; 225  : 
; 226  : 	// make levelshot at nextframe()
; 227  : 	Cbuf_AddText( "levelshot\n" );

	push	OFFSET $SG143651
	call	_Cbuf_AddText
	add	esp, 4
$LN1@SCR_MakeLe:

; 228  : }

	pop	ebp
	ret	0
_SCR_MakeLevelShot ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xash_build4529_src\engine\client\cl_scrn.c
_TEXT	SEGMENT
tv67 = -12						; size = 4
_viewsize$ = -8						; size = 4
_iRet$ = -4						; size = 4
_SCR_MakeScreenShot PROC

; 238  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH

; 239  : 	qboolean	iRet = false;

	mov	DWORD PTR _iRet$[ebp], 0

; 240  : 	int	viewsize;
; 241  : 
; 242  : 	if( cls.envshot_viewsize > 0 )

	cmp	DWORD PTR _cls+293068, 0
	jle	SHORT $LN4@SCR_MakeSc

; 243  : 		viewsize = cls.envshot_viewsize;

	mov	eax, DWORD PTR _cls+293068
	mov	DWORD PTR _viewsize$[ebp], eax
	jmp	SHORT $LN5@SCR_MakeSc
$LN4@SCR_MakeSc:

; 244  : 	else viewsize = cl_envshot_size->value;

	mov	ecx, DWORD PTR _cl_envshot_size
	cvttss2si edx, DWORD PTR [ecx+12]
	mov	DWORD PTR _viewsize$[ebp], edx
$LN5@SCR_MakeSc:

; 245  : 
; 246  : 	switch( cls.scrshot_action )

	mov	eax, DWORD PTR _cls+293060
	mov	DWORD PTR tv67[ebp], eax
	cmp	DWORD PTR tv67[ebp], 7
	ja	$LN2@SCR_MakeSc
	mov	ecx, DWORD PTR tv67[ebp]
	jmp	DWORD PTR $LN18@SCR_MakeSc[ecx*4]
$LN6@SCR_MakeSc:

; 247  : 	{
; 248  : 	case scrshot_normal:
; 249  : 		iRet = VID_ScreenShot( cls.shotname, VID_SCREENSHOT );

	push	0
	push	OFFSET _cls+293076
	call	_VID_ScreenShot
	add	esp, 8
	mov	DWORD PTR _iRet$[ebp], eax

; 250  : 		break;

	jmp	$LN2@SCR_MakeSc
$LN7@SCR_MakeSc:

; 251  : 	case scrshot_snapshot:
; 252  : 		iRet = VID_ScreenShot( cls.shotname, VID_SNAPSHOT );

	push	4
	push	OFFSET _cls+293076
	call	_VID_ScreenShot
	add	esp, 8
	mov	DWORD PTR _iRet$[ebp], eax

; 253  : 		break;

	jmp	SHORT $LN2@SCR_MakeSc
$LN8@SCR_MakeSc:

; 254  : 	case scrshot_plaque:
; 255  : 		iRet = VID_ScreenShot( cls.shotname, VID_LEVELSHOT );

	push	1
	push	OFFSET _cls+293076
	call	_VID_ScreenShot
	add	esp, 8
	mov	DWORD PTR _iRet$[ebp], eax

; 256  : 		break;

	jmp	SHORT $LN2@SCR_MakeSc
$LN9@SCR_MakeSc:

; 257  : 	case scrshot_savegame:
; 258  : 		iRet = VID_ScreenShot( cls.shotname, VID_MINISHOT );

	push	2
	push	OFFSET _cls+293076
	call	_VID_ScreenShot
	add	esp, 8
	mov	DWORD PTR _iRet$[ebp], eax

; 259  : 		break;

	jmp	SHORT $LN2@SCR_MakeSc
$LN10@SCR_MakeSc:

; 260  : 	case scrshot_envshot:
; 261  : 		iRet = VID_CubemapShot( cls.shotname, viewsize, cls.envshot_vieworg, false );

	push	0
	mov	edx, DWORD PTR _cls+293064
	push	edx
	mov	eax, DWORD PTR _viewsize$[ebp]
	push	eax
	push	OFFSET _cls+293076
	call	_VID_CubemapShot
	add	esp, 16					; 00000010H
	mov	DWORD PTR _iRet$[ebp], eax

; 262  : 		break;

	jmp	SHORT $LN2@SCR_MakeSc
$LN11@SCR_MakeSc:

; 263  : 	case scrshot_skyshot:
; 264  : 		iRet = VID_CubemapShot( cls.shotname, viewsize, cls.envshot_vieworg, true );

	push	1
	mov	ecx, DWORD PTR _cls+293064
	push	ecx
	mov	edx, DWORD PTR _viewsize$[ebp]
	push	edx
	push	OFFSET _cls+293076
	call	_VID_CubemapShot
	add	esp, 16					; 00000010H
	mov	DWORD PTR _iRet$[ebp], eax

; 265  : 		break;

	jmp	SHORT $LN2@SCR_MakeSc
$LN12@SCR_MakeSc:

; 266  : 	case scrshot_mapshot:
; 267  : 		iRet = VID_ScreenShot( cls.shotname, VID_MAPSHOT );

	push	3
	push	OFFSET _cls+293076
	call	_VID_ScreenShot
	add	esp, 8
	mov	DWORD PTR _iRet$[ebp], eax

; 268  : 		break;

	jmp	SHORT $LN2@SCR_MakeSc
$LN13@SCR_MakeSc:

; 269  : 	case scrshot_inactive:
; 270  : 		return;

	jmp	SHORT $LN1@SCR_MakeSc
$LN2@SCR_MakeSc:

; 271  : 	}
; 272  : 
; 273  : 	// report
; 274  : 	if( iRet )

	cmp	DWORD PTR _iRet$[ebp], 0
	je	SHORT $LN14@SCR_MakeSc

; 275  : 	{
; 276  : 		// snapshots don't writes message about image		
; 277  : 		if( cls.scrshot_action != scrshot_snapshot )

	cmp	DWORD PTR _cls+293060, 2
	je	SHORT $LN16@SCR_MakeSc

; 278  : 			Con_Reportf( "Write %s\n", cls.shotname );

	push	OFFSET _cls+293076
	push	OFFSET $SG143672
	call	_Con_Reportf
	add	esp, 8
$LN16@SCR_MakeSc:

; 279  : 	}

	jmp	SHORT $LN15@SCR_MakeSc
$LN14@SCR_MakeSc:

; 280  : 	else Con_Printf( S_ERROR "Unable to write %s\n", cls.shotname );

	push	OFFSET _cls+293076
	push	OFFSET $SG143673
	call	_Con_Printf
	add	esp, 8
$LN15@SCR_MakeSc:

; 281  : 
; 282  : 	cls.envshot_vieworg = NULL;

	mov	DWORD PTR _cls+293064, 0

; 283  : 	cls.scrshot_action = scrshot_inactive;

	mov	DWORD PTR _cls+293060, 0

; 284  : 	cls.envshot_disable_vis = false;

	mov	DWORD PTR _cls+293072, 0

; 285  : 	cls.envshot_viewsize = 0;

	mov	DWORD PTR _cls+293068, 0

; 286  : 	cls.shotname[0] = '\0';

	mov	eax, 1
	imul	ecx, eax, 0
	mov	BYTE PTR _cls[ecx+293076], 0
$LN1@SCR_MakeSc:

; 287  : }

	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN18@SCR_MakeSc:
	DD	$LN13@SCR_MakeSc
	DD	$LN6@SCR_MakeSc
	DD	$LN7@SCR_MakeSc
	DD	$LN8@SCR_MakeSc
	DD	$LN9@SCR_MakeSc
	DD	$LN10@SCR_MakeSc
	DD	$LN11@SCR_MakeSc
	DD	$LN12@SCR_MakeSc
_SCR_MakeScreenShot ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xash_build4529_src\engine\client\cl_scrn.c
_TEXT	SEGMENT
_SCR_LoadCreditsFont PROC

; 573  : {

	push	ebp
	mov	ebp, esp

; 574  : 	if( !SCR_LoadVariableWidthFont( "gfx.wad/creditsfont.fnt" ))

	push	OFFSET $SG143777
	call	_SCR_LoadVariableWidthFont
	add	esp, 4
	test	eax, eax
	jne	SHORT $LN1@SCR_LoadCr

; 575  : 	{
; 576  : 		if( !SCR_LoadFixedWidthFont( "gfx/conchars" ))

	push	OFFSET $SG143779
	call	_SCR_LoadFixedWidthFont
	add	esp, 4
	test	eax, eax
	jne	SHORT $LN1@SCR_LoadCr

; 577  : 			Con_DPrintf( S_ERROR "failed to load HUD font\n" );

	push	OFFSET $SG143780
	call	_Con_DPrintf
	add	esp, 4
$LN1@SCR_LoadCr:

; 578  : 	}
; 579  : }

	pop	ebp
	ret	0
_SCR_LoadCreditsFont ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xash_build4529_src\engine\client\cl_scrn.c
_TEXT	SEGMENT
_SCR_RegisterTextures PROC

; 630  : {

	push	ebp
	mov	ebp, esp

; 631  : 	// register gfx.wad images
; 632  : 
; 633  : 	if( FS_FileExists( "gfx/paused.lmp", false ))

	push	0
	push	OFFSET $SG143812
	call	_FS_FileExists
	add	esp, 8
	test	eax, eax
	je	SHORT $LN2@SCR_Regist

; 634  : 		cls.pauseIcon = GL_LoadTexture( "gfx/paused.lmp", NULL, 0, TF_IMAGE );

	push	6144					; 00001800H
	push	0
	push	0
	push	OFFSET $SG143813
	call	_GL_LoadTexture
	add	esp, 16					; 00000010H
	mov	DWORD PTR _cls+287372, eax
	jmp	SHORT $LN4@SCR_Regist
$LN2@SCR_Regist:

; 635  : 	else if( FS_FileExists( "gfx/pause.lmp", false ))

	push	0
	push	OFFSET $SG143815
	call	_FS_FileExists
	add	esp, 8
	test	eax, eax
	je	SHORT $LN4@SCR_Regist

; 636  : 		cls.pauseIcon = GL_LoadTexture( "gfx/pause.lmp", NULL, 0, TF_IMAGE );

	push	6144					; 00001800H
	push	0
	push	0
	push	OFFSET $SG143816
	call	_GL_LoadTexture
	add	esp, 16					; 00000010H
	mov	DWORD PTR _cls+287372, eax
$LN4@SCR_Regist:

; 637  : 
; 638  : 	if( FS_FileExists( "gfx/lambda.lmp", false ))

	push	0
	push	OFFSET $SG143819
	call	_FS_FileExists
	add	esp, 8
	test	eax, eax
	je	SHORT $LN5@SCR_Regist

; 639  : 	{
; 640  : 		if( cl_allow_levelshots->value )

	mov	eax, DWORD PTR _cl_allow_levelshots
	movss	xmm0, DWORD PTR [eax+12]
	ucomiss	xmm0, DWORD PTR __real@00000000
	lahf
	test	ah, 68					; 00000044H
	jnp	SHORT $LN7@SCR_Regist

; 641  : 			cls.loadingBar = GL_LoadTexture( "gfx/lambda.lmp", NULL, 0, TF_IMAGE|TF_LUMINANCE );

	push	6656					; 00001a00H
	push	0
	push	0
	push	OFFSET $SG143822
	call	_GL_LoadTexture
	add	esp, 16					; 00000010H
	mov	DWORD PTR _cls+287380, eax
	jmp	SHORT $LN8@SCR_Regist
$LN7@SCR_Regist:

; 642  : 		else cls.loadingBar = GL_LoadTexture( "gfx/lambda.lmp", NULL, 0, TF_IMAGE ); 

	push	6144					; 00001800H
	push	0
	push	0
	push	OFFSET $SG143823
	call	_GL_LoadTexture
	add	esp, 16					; 00000010H
	mov	DWORD PTR _cls+287380, eax
$LN8@SCR_Regist:

; 643  : 	}

	jmp	SHORT $LN11@SCR_Regist
$LN5@SCR_Regist:

; 644  : 	else if( FS_FileExists( "gfx/loading.lmp", false ))

	push	0
	push	OFFSET $SG143825
	call	_FS_FileExists
	add	esp, 8
	test	eax, eax
	je	SHORT $LN11@SCR_Regist

; 645  : 	{
; 646  : 		if( cl_allow_levelshots->value )

	mov	ecx, DWORD PTR _cl_allow_levelshots
	movss	xmm0, DWORD PTR [ecx+12]
	ucomiss	xmm0, DWORD PTR __real@00000000
	lahf
	test	ah, 68					; 00000044H
	jnp	SHORT $LN10@SCR_Regist

; 647  : 			cls.loadingBar = GL_LoadTexture( "gfx/loading.lmp", NULL, 0, TF_IMAGE|TF_LUMINANCE );

	push	6656					; 00001a00H
	push	0
	push	0
	push	OFFSET $SG143828
	call	_GL_LoadTexture
	add	esp, 16					; 00000010H
	mov	DWORD PTR _cls+287380, eax
	jmp	SHORT $LN11@SCR_Regist
$LN10@SCR_Regist:

; 648  : 		else cls.loadingBar = GL_LoadTexture( "gfx/loading.lmp", NULL, 0, TF_IMAGE ); 

	push	6144					; 00001800H
	push	0
	push	0
	push	OFFSET $SG143829
	call	_GL_LoadTexture
	add	esp, 16					; 00000010H
	mov	DWORD PTR _cls+287380, eax
$LN11@SCR_Regist:

; 649  : 	}
; 650  : 	
; 651  : 	cls.tileImage = GL_LoadTexture( "gfx/backtile.lmp", NULL, 0, TF_NOMIPMAP );

	push	4096					; 00001000H
	push	0
	push	0
	push	OFFSET $SG143830
	call	_GL_LoadTexture
	add	esp, 16					; 00000010H
	mov	DWORD PTR _cls+287376, eax

; 652  : }

	pop	ebp
	ret	0
_SCR_RegisterTextures ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xash_build4529_src\engine\client\cl_scrn.c
_TEXT	SEGMENT
_SCR_EndLoadingPlaque PROC

; 349  : {

	push	ebp
	mov	ebp, esp

; 350  : 	cls.disable_screen = 0.0f;

	xorps	xmm0, xmm0
	movss	DWORD PTR _cls+24, xmm0

; 351  : 	Con_ClearNotify();

	call	_Con_ClearNotify

; 352  : //	SNDDMA_UnlockSound();
; 353  : }

	pop	ebp
	ret	0
_SCR_EndLoadingPlaque ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xash_build4529_src\engine\client\cl_scrn.c
_TEXT	SEGMENT
_pic$ = -8						; size = 4
_i$ = -4						; size = 4
_SCR_InstallParticlePalette PROC

; 589  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 590  : 	rgbdata_t	*pic;
; 591  : 	int	i;
; 592  : 
; 593  : 	// first check 'palette.lmp' then 'palette.pal'
; 594  : 	pic = FS_LoadImage( DEFAULT_INTERNAL_PALETTE, NULL, 0 );

	push	0
	push	0
	push	OFFSET $SG143794
	call	_FS_LoadImage
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _pic$[ebp], eax

; 595  : 	if( !pic ) pic = FS_LoadImage( DEFAULT_EXTERNAL_PALETTE, NULL, 0 );

	cmp	DWORD PTR _pic$[ebp], 0
	jne	SHORT $LN8@SCR_Instal
	push	0
	push	0
	push	OFFSET $SG143796
	call	_FS_LoadImage
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _pic$[ebp], eax
$LN8@SCR_Instal:

; 596  : 
; 597  : 	// NOTE: imagelib required this fakebuffer for loading internal palette
; 598  : 	if( !pic ) pic = FS_LoadImage( "#valve.pal", (byte *)&i, 768 );

	cmp	DWORD PTR _pic$[ebp], 0
	jne	SHORT $LN9@SCR_Instal
	push	768					; 00000300H
	lea	eax, DWORD PTR _i$[ebp]
	push	eax
	push	OFFSET $SG143798
	call	_FS_LoadImage
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _pic$[ebp], eax
$LN9@SCR_Instal:

; 599  : 
; 600  : 	if( pic )

	cmp	DWORD PTR _pic$[ebp], 0
	je	SHORT $LN10@SCR_Instal

; 601  : 	{
; 602  : 		for( i = 0; i < 256; i++ )

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN4@SCR_Instal
$LN2@SCR_Instal:
	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
$LN4@SCR_Instal:
	cmp	DWORD PTR _i$[ebp], 256			; 00000100H
	jge	SHORT $LN3@SCR_Instal

; 603  : 		{
; 604  : 			clgame.palette[i].r = pic->palette[i*4+0];

	mov	edx, DWORD PTR _pic$[ebp]
	mov	eax, DWORD PTR [edx+20]
	imul	ecx, DWORD PTR _i$[ebp], 3
	mov	edx, DWORD PTR _i$[ebp]
	mov	al, BYTE PTR [eax+edx*4]
	mov	BYTE PTR _clgame[ecx+125460], al

; 605  : 			clgame.palette[i].g = pic->palette[i*4+1];

	mov	ecx, DWORD PTR _pic$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	imul	eax, DWORD PTR _i$[ebp], 3
	mov	ecx, DWORD PTR _i$[ebp]
	mov	dl, BYTE PTR [edx+ecx*4+1]
	mov	BYTE PTR _clgame[eax+125461], dl

; 606  : 			clgame.palette[i].b = pic->palette[i*4+2];

	mov	eax, DWORD PTR _pic$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	imul	edx, DWORD PTR _i$[ebp], 3
	mov	eax, DWORD PTR _i$[ebp]
	mov	cl, BYTE PTR [ecx+eax*4+2]
	mov	BYTE PTR _clgame[edx+125462], cl

; 607  : 		}

	jmp	SHORT $LN2@SCR_Instal
$LN3@SCR_Instal:

; 608  : 		FS_FreeImage( pic );

	mov	edx, DWORD PTR _pic$[ebp]
	push	edx
	call	_FS_FreeImage
	add	esp, 4

; 609  : 	}

	jmp	SHORT $LN1@SCR_Instal
$LN10@SCR_Instal:

; 610  : 	else
; 611  : 	{
; 612  : 		// someone deleted internal palette from code...
; 613  : 		for( i = 0; i < 256; i++ )

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN7@SCR_Instal
$LN5@SCR_Instal:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN7@SCR_Instal:
	cmp	DWORD PTR _i$[ebp], 256			; 00000100H
	jge	SHORT $LN1@SCR_Instal

; 614  : 		{
; 615  : 			clgame.palette[i].r = i;

	imul	ecx, DWORD PTR _i$[ebp], 3
	mov	dl, BYTE PTR _i$[ebp]
	mov	BYTE PTR _clgame[ecx+125460], dl

; 616  : 			clgame.palette[i].g = i;

	imul	eax, DWORD PTR _i$[ebp], 3
	mov	cl, BYTE PTR _i$[ebp]
	mov	BYTE PTR _clgame[eax+125461], cl

; 617  : 			clgame.palette[i].b = i;

	imul	edx, DWORD PTR _i$[ebp], 3
	mov	al, BYTE PTR _i$[ebp]
	mov	BYTE PTR _clgame[edx+125462], al

; 618  : 		}

	jmp	SHORT $LN5@SCR_Instal
$LN1@SCR_Instal:

; 619  : 	}
; 620  : }

	mov	esp, ebp
	pop	ebp
	ret	0
_SCR_InstallParticlePalette ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xash_build4529_src\engine\client\cl_scrn.c
_TEXT	SEGMENT
_x$ = 8							; size = 4
_y$ = 12						; size = 4
_SCR_AddDirtyPoint PROC

; 361  : {

	push	ebp
	mov	ebp, esp

; 362  : 	if( x < scr_dirty.x1 ) scr_dirty.x1 = x;

	mov	eax, DWORD PTR _x$[ebp]
	cmp	eax, DWORD PTR _scr_dirty
	jge	SHORT $LN2@SCR_AddDir
	mov	ecx, DWORD PTR _x$[ebp]
	mov	DWORD PTR _scr_dirty, ecx
$LN2@SCR_AddDir:

; 363  : 	if( x > scr_dirty.x2 ) scr_dirty.x2 = x;

	mov	edx, DWORD PTR _x$[ebp]
	cmp	edx, DWORD PTR _scr_dirty+8
	jle	SHORT $LN3@SCR_AddDir
	mov	eax, DWORD PTR _x$[ebp]
	mov	DWORD PTR _scr_dirty+8, eax
$LN3@SCR_AddDir:

; 364  : 	if( y < scr_dirty.y1 ) scr_dirty.y1 = y;

	mov	ecx, DWORD PTR _y$[ebp]
	cmp	ecx, DWORD PTR _scr_dirty+4
	jge	SHORT $LN4@SCR_AddDir
	mov	edx, DWORD PTR _y$[ebp]
	mov	DWORD PTR _scr_dirty+4, edx
$LN4@SCR_AddDir:

; 365  : 	if( y > scr_dirty.y2 ) scr_dirty.y2 = y;

	mov	eax, DWORD PTR _y$[ebp]
	cmp	eax, DWORD PTR _scr_dirty+12
	jle	SHORT $LN1@SCR_AddDir
	mov	ecx, DWORD PTR _y$[ebp]
	mov	DWORD PTR _scr_dirty+12, ecx
$LN1@SCR_AddDir:

; 366  : }

	pop	ebp
	ret	0
_SCR_AddDirtyPoint ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xash_build4529_src\engine\client\cl_scrn.c
_TEXT	SEGMENT
_SCR_DirtyScreen PROC

; 374  : {

	push	ebp
	mov	ebp, esp

; 375  : 	SCR_AddDirtyPoint( 0, 0 );

	push	0
	push	0
	call	_SCR_AddDirtyPoint
	add	esp, 8

; 376  : 	SCR_AddDirtyPoint( glState.width - 1, glState.height - 1 );

	mov	eax, DWORD PTR _glState+4
	sub	eax, 1
	push	eax
	mov	ecx, DWORD PTR _glState
	sub	ecx, 1
	push	ecx
	call	_SCR_AddDirtyPoint
	add	esp, 8

; 377  : }

	pop	ebp
	ret	0
_SCR_DirtyScreen ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xash_build4529_src\engine\client\cl_scrn.c
_TEXT	SEGMENT
tv191 = -56						; size = 4
tv178 = -52						; size = 4
tv165 = -48						; size = 4
tv152 = -44						; size = 4
_right$ = -40						; size = 4
_bottom$ = -36						; size = 4
_left$ = -32						; size = 4
_top$ = -28						; size = 4
_i$ = -24						; size = 4
_clear$ = -20						; size = 16
__$ArrayPad$ = -4					; size = 4
_SCR_TileClear PROC

; 385  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 56					; 00000038H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 386  : 	int	i, top, bottom, left, right;
; 387  : 	dirty_t	clear;
; 388  : 
; 389  : 	if( scr_viewsize->value >= 120 )

	mov	eax, DWORD PTR _scr_viewsize
	movss	xmm0, DWORD PTR [eax+12]
	comiss	xmm0, DWORD PTR __real@42f00000
	jb	SHORT $LN5@SCR_TileCl

; 390  : 		return; // full screen rendering

	jmp	$LN14@SCR_TileCl
$LN5@SCR_TileCl:

; 391  : 
; 392  : 	// erase rect will be the union of the past three frames
; 393  : 	// so tripple buffering works properly
; 394  : 	clear = scr_dirty;

	mov	ecx, DWORD PTR _scr_dirty
	mov	DWORD PTR _clear$[ebp], ecx
	mov	edx, DWORD PTR _scr_dirty+4
	mov	DWORD PTR _clear$[ebp+4], edx
	mov	eax, DWORD PTR _scr_dirty+8
	mov	DWORD PTR _clear$[ebp+8], eax
	mov	ecx, DWORD PTR _scr_dirty+12
	mov	DWORD PTR _clear$[ebp+12], ecx

; 395  : 
; 396  : 	for( i = 0; i < 2; i++ )

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN4@SCR_TileCl
$LN2@SCR_TileCl:
	mov	edx, DWORD PTR _i$[ebp]
	add	edx, 1
	mov	DWORD PTR _i$[ebp], edx
$LN4@SCR_TileCl:
	cmp	DWORD PTR _i$[ebp], 2
	jge	$LN3@SCR_TileCl

; 397  : 	{
; 398  : 		if( scr_old_dirty[i].x1 < clear.x1 )

	mov	eax, DWORD PTR _i$[ebp]
	shl	eax, 4
	mov	ecx, DWORD PTR _scr_old_dirty[eax]
	cmp	ecx, DWORD PTR _clear$[ebp]
	jge	SHORT $LN6@SCR_TileCl

; 399  : 			clear.x1 = scr_old_dirty[i].x1;

	mov	edx, DWORD PTR _i$[ebp]
	shl	edx, 4
	mov	eax, DWORD PTR _scr_old_dirty[edx]
	mov	DWORD PTR _clear$[ebp], eax
$LN6@SCR_TileCl:

; 400  : 		if( scr_old_dirty[i].x2 > clear.x2 )

	mov	ecx, DWORD PTR _i$[ebp]
	shl	ecx, 4
	mov	edx, DWORD PTR _scr_old_dirty[ecx+8]
	cmp	edx, DWORD PTR _clear$[ebp+8]
	jle	SHORT $LN7@SCR_TileCl

; 401  : 			clear.x2 = scr_old_dirty[i].x2;

	mov	eax, DWORD PTR _i$[ebp]
	shl	eax, 4
	mov	ecx, DWORD PTR _scr_old_dirty[eax+8]
	mov	DWORD PTR _clear$[ebp+8], ecx
$LN7@SCR_TileCl:

; 402  : 		if( scr_old_dirty[i].y1 < clear.y1 )

	mov	edx, DWORD PTR _i$[ebp]
	shl	edx, 4
	mov	eax, DWORD PTR _scr_old_dirty[edx+4]
	cmp	eax, DWORD PTR _clear$[ebp+4]
	jge	SHORT $LN8@SCR_TileCl

; 403  : 			clear.y1 = scr_old_dirty[i].y1;

	mov	ecx, DWORD PTR _i$[ebp]
	shl	ecx, 4
	mov	edx, DWORD PTR _scr_old_dirty[ecx+4]
	mov	DWORD PTR _clear$[ebp+4], edx
$LN8@SCR_TileCl:

; 404  : 		if( scr_old_dirty[i].y2 > clear.y2 )

	mov	eax, DWORD PTR _i$[ebp]
	shl	eax, 4
	mov	ecx, DWORD PTR _scr_old_dirty[eax+12]
	cmp	ecx, DWORD PTR _clear$[ebp+12]
	jle	SHORT $LN9@SCR_TileCl

; 405  : 			clear.y2 = scr_old_dirty[i].y2;

	mov	edx, DWORD PTR _i$[ebp]
	shl	edx, 4
	mov	eax, DWORD PTR _scr_old_dirty[edx+12]
	mov	DWORD PTR _clear$[ebp+12], eax
$LN9@SCR_TileCl:

; 406  : 	}

	jmp	$LN2@SCR_TileCl
$LN3@SCR_TileCl:

; 407  : 
; 408  : 	scr_old_dirty[1] = scr_old_dirty[0];

	mov	ecx, 16					; 00000010H
	imul	edx, ecx, 0
	add	edx, OFFSET _scr_old_dirty
	mov	eax, 16					; 00000010H
	shl	eax, 0
	add	eax, OFFSET _scr_old_dirty
	mov	ecx, DWORD PTR [edx]
	mov	DWORD PTR [eax], ecx
	mov	ecx, DWORD PTR [edx+4]
	mov	DWORD PTR [eax+4], ecx
	mov	ecx, DWORD PTR [edx+8]
	mov	DWORD PTR [eax+8], ecx
	mov	edx, DWORD PTR [edx+12]
	mov	DWORD PTR [eax+12], edx

; 409  : 	scr_old_dirty[0] = scr_dirty;

	mov	eax, 16					; 00000010H
	imul	ecx, eax, 0
	add	ecx, OFFSET _scr_old_dirty
	mov	edx, DWORD PTR _scr_dirty
	mov	DWORD PTR [ecx], edx
	mov	eax, DWORD PTR _scr_dirty+4
	mov	DWORD PTR [ecx+4], eax
	mov	edx, DWORD PTR _scr_dirty+8
	mov	DWORD PTR [ecx+8], edx
	mov	eax, DWORD PTR _scr_dirty+12
	mov	DWORD PTR [ecx+12], eax

; 410  : 
; 411  : 	scr_dirty.x1 = 9999;

	mov	DWORD PTR _scr_dirty, 9999		; 0000270fH

; 412  : 	scr_dirty.x2 = -9999;

	mov	DWORD PTR _scr_dirty+8, -9999		; ffffd8f1H

; 413  : 	scr_dirty.y1 = 9999;

	mov	DWORD PTR _scr_dirty+4, 9999		; 0000270fH

; 414  : 	scr_dirty.y2 = -9999;

	mov	DWORD PTR _scr_dirty+12, -9999		; ffffd8f1H

; 415  : 
; 416  : 	if( clear.y2 <= clear.y1 )

	mov	ecx, DWORD PTR _clear$[ebp+12]
	cmp	ecx, DWORD PTR _clear$[ebp+4]
	jg	SHORT $LN10@SCR_TileCl

; 417  : 		return; // nothing disturbed

	jmp	$LN14@SCR_TileCl
$LN10@SCR_TileCl:

; 418  : 
; 419  : 	top = clgame.viewport[1];

	mov	edx, 4
	shl	edx, 0
	mov	eax, DWORD PTR _clgame[edx+122640]
	mov	DWORD PTR _top$[ebp], eax

; 420  : 	bottom = top + clgame.viewport[3] - 1;

	mov	ecx, 4
	imul	edx, ecx, 3
	mov	eax, DWORD PTR _clgame[edx+122640]
	mov	ecx, DWORD PTR _top$[ebp]
	lea	edx, DWORD PTR [ecx+eax-1]
	mov	DWORD PTR _bottom$[ebp], edx

; 421  : 	left = clgame.viewport[0];

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _clgame[ecx+122640]
	mov	DWORD PTR _left$[ebp], edx

; 422  : 	right = left + clgame.viewport[2] - 1;

	mov	eax, 4
	shl	eax, 1
	mov	ecx, DWORD PTR _clgame[eax+122640]
	mov	edx, DWORD PTR _left$[ebp]
	lea	eax, DWORD PTR [edx+ecx-1]
	mov	DWORD PTR _right$[ebp], eax

; 423  : 
; 424  : 	if( clear.y1 < top )

	mov	ecx, DWORD PTR _clear$[ebp+4]
	cmp	ecx, DWORD PTR _top$[ebp]
	jge	SHORT $LN11@SCR_TileCl

; 425  : 	{	
; 426  : 		// clear above view screen
; 427  : 		i = clear.y2 < top-1 ? clear.y2 : top - 1;

	mov	edx, DWORD PTR _top$[ebp]
	sub	edx, 1
	cmp	DWORD PTR _clear$[ebp+12], edx
	jge	SHORT $LN16@SCR_TileCl
	mov	eax, DWORD PTR _clear$[ebp+12]
	mov	DWORD PTR tv152[ebp], eax
	jmp	SHORT $LN17@SCR_TileCl
$LN16@SCR_TileCl:
	mov	ecx, DWORD PTR _top$[ebp]
	sub	ecx, 1
	mov	DWORD PTR tv152[ebp], ecx
$LN17@SCR_TileCl:
	mov	edx, DWORD PTR tv152[ebp]
	mov	DWORD PTR _i$[ebp], edx

; 428  : 		R_DrawTileClear( clear.x1, clear.y1, clear.x2 - clear.x1 + 1, i - clear.y1 + 1 );

	mov	eax, DWORD PTR _i$[ebp]
	sub	eax, DWORD PTR _clear$[ebp+4]
	add	eax, 1
	push	eax
	mov	ecx, DWORD PTR _clear$[ebp+8]
	sub	ecx, DWORD PTR _clear$[ebp]
	add	ecx, 1
	push	ecx
	mov	edx, DWORD PTR _clear$[ebp+4]
	push	edx
	mov	eax, DWORD PTR _clear$[ebp]
	push	eax
	call	_R_DrawTileClear
	add	esp, 16					; 00000010H

; 429  : 		clear.y1 = top;

	mov	ecx, DWORD PTR _top$[ebp]
	mov	DWORD PTR _clear$[ebp+4], ecx
$LN11@SCR_TileCl:

; 430  : 	}
; 431  : 
; 432  : 	if( clear.y2 > bottom )

	mov	edx, DWORD PTR _clear$[ebp+12]
	cmp	edx, DWORD PTR _bottom$[ebp]
	jle	SHORT $LN12@SCR_TileCl

; 433  : 	{	
; 434  : 		// clear below view screen
; 435  : 		i = clear.y1 > bottom + 1 ? clear.y1 : bottom + 1;

	mov	eax, DWORD PTR _bottom$[ebp]
	add	eax, 1
	cmp	DWORD PTR _clear$[ebp+4], eax
	jle	SHORT $LN18@SCR_TileCl
	mov	ecx, DWORD PTR _clear$[ebp+4]
	mov	DWORD PTR tv165[ebp], ecx
	jmp	SHORT $LN19@SCR_TileCl
$LN18@SCR_TileCl:
	mov	edx, DWORD PTR _bottom$[ebp]
	add	edx, 1
	mov	DWORD PTR tv165[ebp], edx
$LN19@SCR_TileCl:
	mov	eax, DWORD PTR tv165[ebp]
	mov	DWORD PTR _i$[ebp], eax

; 436  : 		R_DrawTileClear( clear.x1, i, clear.x2 - clear.x1 + 1, clear.y2 - i + 1 );

	mov	ecx, DWORD PTR _clear$[ebp+12]
	sub	ecx, DWORD PTR _i$[ebp]
	add	ecx, 1
	push	ecx
	mov	edx, DWORD PTR _clear$[ebp+8]
	sub	edx, DWORD PTR _clear$[ebp]
	add	edx, 1
	push	edx
	mov	eax, DWORD PTR _i$[ebp]
	push	eax
	mov	ecx, DWORD PTR _clear$[ebp]
	push	ecx
	call	_R_DrawTileClear
	add	esp, 16					; 00000010H

; 437  : 		clear.y2 = bottom;

	mov	edx, DWORD PTR _bottom$[ebp]
	mov	DWORD PTR _clear$[ebp+12], edx
$LN12@SCR_TileCl:

; 438  : 	}
; 439  : 
; 440  : 	if( clear.x1 < left )

	mov	eax, DWORD PTR _clear$[ebp]
	cmp	eax, DWORD PTR _left$[ebp]
	jge	SHORT $LN13@SCR_TileCl

; 441  : 	{
; 442  : 		// clear left of view screen
; 443  : 		i = clear.x2 < left - 1 ? clear.x2 : left - 1;

	mov	ecx, DWORD PTR _left$[ebp]
	sub	ecx, 1
	cmp	DWORD PTR _clear$[ebp+8], ecx
	jge	SHORT $LN20@SCR_TileCl
	mov	edx, DWORD PTR _clear$[ebp+8]
	mov	DWORD PTR tv178[ebp], edx
	jmp	SHORT $LN21@SCR_TileCl
$LN20@SCR_TileCl:
	mov	eax, DWORD PTR _left$[ebp]
	sub	eax, 1
	mov	DWORD PTR tv178[ebp], eax
$LN21@SCR_TileCl:
	mov	ecx, DWORD PTR tv178[ebp]
	mov	DWORD PTR _i$[ebp], ecx

; 444  : 		R_DrawTileClear( clear.x1, clear.y1, i - clear.x1 + 1, clear.y2 - clear.y1 + 1 );

	mov	edx, DWORD PTR _clear$[ebp+12]
	sub	edx, DWORD PTR _clear$[ebp+4]
	add	edx, 1
	push	edx
	mov	eax, DWORD PTR _i$[ebp]
	sub	eax, DWORD PTR _clear$[ebp]
	add	eax, 1
	push	eax
	mov	ecx, DWORD PTR _clear$[ebp+4]
	push	ecx
	mov	edx, DWORD PTR _clear$[ebp]
	push	edx
	call	_R_DrawTileClear
	add	esp, 16					; 00000010H

; 445  : 		clear.x1 = left;

	mov	eax, DWORD PTR _left$[ebp]
	mov	DWORD PTR _clear$[ebp], eax
$LN13@SCR_TileCl:

; 446  : 	}
; 447  : 
; 448  : 	if( clear.x2 > right )

	mov	ecx, DWORD PTR _clear$[ebp+8]
	cmp	ecx, DWORD PTR _right$[ebp]
	jle	SHORT $LN14@SCR_TileCl

; 449  : 	{	
; 450  : 		// clear left of view screen
; 451  : 		i = clear.x1 > right + 1 ? clear.x1 : right + 1;

	mov	edx, DWORD PTR _right$[ebp]
	add	edx, 1
	cmp	DWORD PTR _clear$[ebp], edx
	jle	SHORT $LN22@SCR_TileCl
	mov	eax, DWORD PTR _clear$[ebp]
	mov	DWORD PTR tv191[ebp], eax
	jmp	SHORT $LN23@SCR_TileCl
$LN22@SCR_TileCl:
	mov	ecx, DWORD PTR _right$[ebp]
	add	ecx, 1
	mov	DWORD PTR tv191[ebp], ecx
$LN23@SCR_TileCl:
	mov	edx, DWORD PTR tv191[ebp]
	mov	DWORD PTR _i$[ebp], edx

; 452  : 		R_DrawTileClear( i, clear.y1, clear.x2 - i + 1, clear.y2 - clear.y1 + 1 );

	mov	eax, DWORD PTR _clear$[ebp+12]
	sub	eax, DWORD PTR _clear$[ebp+4]
	add	eax, 1
	push	eax
	mov	ecx, DWORD PTR _clear$[ebp+8]
	sub	ecx, DWORD PTR _i$[ebp]
	add	ecx, 1
	push	ecx
	mov	edx, DWORD PTR _clear$[ebp+4]
	push	edx
	mov	eax, DWORD PTR _i$[ebp]
	push	eax
	call	_R_DrawTileClear
	add	esp, 16					; 00000010H

; 453  : 		clear.x2 = right;

	mov	ecx, DWORD PTR _right$[ebp]
	mov	DWORD PTR _clear$[ebp+8], ecx
$LN14@SCR_TileCl:

; 454  : 	}
; 455  : }

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_SCR_TileClear ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xash_build4529_src\engine\client\cl_scrn.c
_TEXT	SEGMENT
_SCR_VidInit PROC

; 685  : {

	push	ebp
	mov	ebp, esp

; 686  : 	memset( &clgame.ds, 0, sizeof( clgame.ds )); // reset a draw state

	push	84					; 00000054H
	push	0
	push	OFFSET _clgame+122656
	call	_memset
	add	esp, 12					; 0000000cH

; 687  : 	memset( &gameui.ds, 0, sizeof( gameui.ds )); // reset a draw state

	push	28					; 0000001cH
	push	0
	push	OFFSET _gameui+3656
	call	_memset
	add	esp, 12					; 0000000cH

; 688  : 	memset( &clgame.centerPrint, 0, sizeof( clgame.centerPrint ));

	push	2068					; 00000814H
	push	0
	push	OFFSET _clgame+122816
	call	_memset
	add	esp, 12					; 0000000cH

; 689  : 
; 690  : 	// update screen sizes for menu
; 691  : 	gameui.globals->scrWidth = glState.width;

	mov	eax, DWORD PTR _gameui+6712
	mov	ecx, DWORD PTR _glState
	mov	DWORD PTR [eax+8], ecx

; 692  : 	gameui.globals->scrHeight = glState.height;

	mov	edx, DWORD PTR _gameui+6712
	mov	eax, DWORD PTR _glState+4
	mov	DWORD PTR [edx+12], eax

; 693  : 
; 694  : 	VGui_Startup ();

	call	_VGui_Startup

; 695  : 
; 696  : 	CL_ClearSpriteTextures(); // now all hud sprites are invalid

	call	_CL_ClearSpriteTextures

; 697  : 	
; 698  : 	// vid_state has changed
; 699  : 	if( gameui.hInstance ) gameui.dllFuncs.pfnVidInit();

	cmp	DWORD PTR _gameui, 0
	je	SHORT $LN2@SCR_VidIni
	call	DWORD PTR _gameui+4
$LN2@SCR_VidIni:

; 700  : 	if( clgame.hInstance ) clgame.dllFuncs.pfnVidInit();

	cmp	DWORD PTR _clgame, 0
	je	SHORT $LN3@SCR_VidIni
	call	DWORD PTR _clgame+12
$LN3@SCR_VidIni:

; 701  : 
; 702  : 	// restart console size
; 703  : 	Con_VidInit ();

	call	_Con_VidInit

; 704  : }

	pop	ebp
	ret	0
_SCR_VidInit ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xash_build4529_src\engine\client\cl_scrn.c
_TEXT	SEGMENT
_SCR_Shutdown PROC

; 754  : {

	push	ebp
	mov	ebp, esp

; 755  : 	if( !scr_init ) return;

	cmp	DWORD PTR _scr_init, 0
	jne	SHORT $LN2@SCR_Shutdo
	jmp	SHORT $LN1@SCR_Shutdo
$LN2@SCR_Shutdo:

; 756  : 
; 757  : 	Cmd_RemoveCommand( "timerefresh" );

	push	OFFSET $SG143894
	call	_Cmd_RemoveCommand
	add	esp, 4

; 758  : 	Cmd_RemoveCommand( "skyname" );

	push	OFFSET $SG143895
	call	_Cmd_RemoveCommand
	add	esp, 4

; 759  : 	Cmd_RemoveCommand( "viewpos" );

	push	OFFSET $SG143896
	call	_Cmd_RemoveCommand
	add	esp, 4

; 760  : 	UI_SetActiveMenu( false );

	push	0
	call	_UI_SetActiveMenu
	add	esp, 4

; 761  : 	UI_UnloadProgs();

	call	_UI_UnloadProgs

; 762  : 
; 763  : 	scr_init = false;

	mov	DWORD PTR _scr_init, 0
$LN1@SCR_Shutdo:

; 764  : }

	pop	ebp
	ret	0
_SCR_Shutdown ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xash_build4529_src\engine\client\cl_scrn.c
_TEXT	SEGMENT
_oldclear$ = -8						; size = 4
tv78 = -4						; size = 4
_is_background$ = 8					; size = 4
_SCR_BeginLoadingPlaque PROC

; 311  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 312  : 	float	oldclear;
; 313  : 
; 314  : 	S_StopAllSounds( true );

	push	1
	call	_S_StopAllSounds
	add	esp, 4

; 315  : 	cl.audio_prepped = false;			// don't play ambients

	mov	DWORD PTR _cl+20, 0

; 316  : 	cl.video_prepped = false;

	mov	DWORD PTR _cl+16, 0

; 317  : 	oldclear = gl_clear->value;

	mov	eax, DWORD PTR _gl_clear
	movss	xmm0, DWORD PTR [eax+12]
	movss	DWORD PTR _oldclear$[ebp], xmm0

; 318  : 
; 319  : 	if( CL_IsInMenu( ) && !cls.changedemo && !is_background )

	call	_CL_IsInMenu
	test	eax, eax
	je	SHORT $LN3@SCR_BeginL
	cmp	DWORD PTR _cls+12, 0
	jne	SHORT $LN3@SCR_BeginL
	cmp	DWORD PTR _is_background$[ebp], 0
	jne	SHORT $LN3@SCR_BeginL

; 320  : 	{
; 321  : 		UI_SetActiveMenu( false );

	push	0
	call	_UI_SetActiveMenu
	add	esp, 4

; 322  : 		if( cls.state == ca_disconnected )

	cmp	DWORD PTR _cls, 0
	jne	SHORT $LN3@SCR_BeginL

; 323  : 			SCR_UpdateScreen();

	call	_SCR_UpdateScreen
$LN3@SCR_BeginL:

; 324  : 	}
; 325  : 
; 326  : 	if( cls.state == ca_disconnected || cls.disable_screen )

	cmp	DWORD PTR _cls, 0
	je	SHORT $LN5@SCR_BeginL
	movss	xmm0, DWORD PTR _cls+24
	ucomiss	xmm0, DWORD PTR __real@00000000
	lahf
	test	ah, 68					; 00000044H
	jnp	SHORT $LN4@SCR_BeginL
$LN5@SCR_BeginL:

; 327  : 		return; // already set

	jmp	SHORT $LN1@SCR_BeginL
$LN4@SCR_BeginL:

; 328  : 
; 329  : 	if( cls.key_dest == key_console )

	cmp	DWORD PTR _cls+36, 0
	jne	SHORT $LN6@SCR_BeginL

; 330  : 		return;

	jmp	SHORT $LN1@SCR_BeginL
$LN6@SCR_BeginL:

; 331  : 
; 332  : 	gl_clear->value = 0.0f;

	mov	ecx, DWORD PTR _gl_clear
	xorps	xmm0, xmm0
	movss	DWORD PTR [ecx+12], xmm0

; 333  : 	if( is_background ) IN_MouseSavePos( );

	cmp	DWORD PTR _is_background$[ebp], 0
	je	SHORT $LN7@SCR_BeginL
	call	_IN_MouseSavePos
$LN7@SCR_BeginL:

; 334  : 	cls.draw_changelevel = !is_background;

	cmp	DWORD PTR _is_background$[ebp], 0
	jne	SHORT $LN9@SCR_BeginL
	mov	DWORD PTR tv78[ebp], 1
	jmp	SHORT $LN10@SCR_BeginL
$LN9@SCR_BeginL:
	mov	DWORD PTR tv78[ebp], 0
$LN10@SCR_BeginL:
	mov	edx, DWORD PTR tv78[ebp]
	mov	DWORD PTR _cls+32, edx

; 335  : 	SCR_UpdateScreen();

	call	_SCR_UpdateScreen

; 336  : 	cls.disable_screen = host.realtime;

	cvtsd2ss xmm0, QWORD PTR _host+1440
	movss	DWORD PTR _cls+24, xmm0

; 337  : 	cls.disable_servercount = cl.servercount;

	mov	eax, DWORD PTR _cl
	mov	DWORD PTR _cls+28, eax

; 338  : 	cl.background = is_background;		// set right state before svc_serverdata is came

	mov	ecx, DWORD PTR _is_background$[ebp]
	mov	DWORD PTR _cl+64, ecx

; 339  : 	gl_clear->value = oldclear;

	mov	edx, DWORD PTR _gl_clear
	movss	xmm0, DWORD PTR _oldclear$[ebp]
	movss	DWORD PTR [edx+12], xmm0
$LN1@SCR_BeginL:

; 340  : //	SNDDMA_LockSound();
; 341  : }

	mov	esp, ebp
	pop	ebp
	ret	0
_SCR_BeginLoadingPlaque ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xash_build4529_src\engine\client\cl_scrn.c
_TEXT	SEGMENT
tv66 = -4						; size = 4
_SCR_UpdateScreen PROC

; 466  : {

	push	ebp
	mov	ebp, esp
	push	ecx

; 467  : 	if( !V_PreRender( )) return;

	call	_V_PreRender
	test	eax, eax
	jne	SHORT $LN4@SCR_Update
	jmp	SHORT $LN1@SCR_Update
$LN4@SCR_Update:

; 468  : 
; 469  : 	switch( cls.state )

	mov	eax, DWORD PTR _cls
	mov	DWORD PTR tv66[ebp], eax
	cmp	DWORD PTR tv66[ebp], 5
	ja	SHORT $LN9@SCR_Update
	mov	ecx, DWORD PTR tv66[ebp]
	jmp	DWORD PTR $LN11@SCR_Update[ecx*4]
$LN5@SCR_Update:

; 470  : 	{
; 471  : 	case ca_disconnected:
; 472  : 		Con_RunConsole ();

	call	_Con_RunConsole

; 473  : 		break;

	jmp	SHORT $LN2@SCR_Update
$LN6@SCR_Update:

; 474  : 	case ca_connecting:
; 475  : 	case ca_connected:
; 476  : 	case ca_validate:
; 477  : 		SCR_DrawPlaque();

	call	_SCR_DrawPlaque

; 478  : 		break;

	jmp	SHORT $LN2@SCR_Update
$LN7@SCR_Update:

; 479  : 	case ca_active:
; 480  : 		Con_RunConsole ();

	call	_Con_RunConsole

; 481  : 		V_RenderView();

	call	_V_RenderView

; 482  : 		break;

	jmp	SHORT $LN2@SCR_Update
$LN8@SCR_Update:

; 483  : 	case ca_cinematic:
; 484  : 		SCR_DrawCinematic();

	call	_SCR_DrawCinematic

; 485  : 		break;

	jmp	SHORT $LN2@SCR_Update
$LN9@SCR_Update:

; 486  : 	default:
; 487  : 		Host_Error( "SCR_UpdateScreen: bad cls.state\n" );

	push	OFFSET $SG143737
	call	_Host_Error
	add	esp, 4
$LN2@SCR_Update:

; 488  : 		break;
; 489  : 	}
; 490  : 
; 491  : 	V_PostRender();

	call	_V_PostRender
$LN1@SCR_Update:

; 492  : }

	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN11@SCR_Update:
	DD	$LN5@SCR_Update
	DD	$LN6@SCR_Update
	DD	$LN6@SCR_Update
	DD	$LN6@SCR_Update
	DD	$LN7@SCR_Update
	DD	$LN8@SCR_Update
_SCR_UpdateScreen ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xash_build4529_src\engine\client\cl_scrn.c
_TEXT	SEGMENT
_SCR_Init PROC

; 712  : {

	push	ebp
	mov	ebp, esp

; 713  : 	if( scr_init ) return;

	cmp	DWORD PTR _scr_init, 0
	je	SHORT $LN2@SCR_Init
	jmp	$LN1@SCR_Init
$LN2@SCR_Init:

; 714  : 
; 715  : 	scr_centertime = Cvar_Get( "scr_centertime", "2.5", 0, "centerprint hold time" );

	push	OFFSET $SG143846
	push	0
	push	OFFSET $SG143847
	push	OFFSET $SG143848
	call	_Cvar_Get
	add	esp, 16					; 00000010H
	mov	DWORD PTR _scr_centertime, eax

; 716  : 	cl_levelshot_name = Cvar_Get( "cl_levelshot_name", "*black", 0, "contains path to current levelshot" );

	push	OFFSET $SG143849
	push	0
	push	OFFSET $SG143850
	push	OFFSET $SG143851
	call	_Cvar_Get
	add	esp, 16					; 00000010H
	mov	DWORD PTR _cl_levelshot_name, eax

; 717  : 	cl_allow_levelshots = Cvar_Get( "allow_levelshots", "0", FCVAR_ARCHIVE, "allow engine to use indivdual levelshots instead of 'loading' image" );

	push	OFFSET $SG143852
	push	1
	push	OFFSET $SG143853
	push	OFFSET $SG143854
	call	_Cvar_Get
	add	esp, 16					; 00000010H
	mov	DWORD PTR _cl_allow_levelshots, eax

; 718  : 	scr_loading = Cvar_Get( "scr_loading", "0", 0, "loading bar progress" );

	push	OFFSET $SG143855
	push	0
	push	OFFSET $SG143856
	push	OFFSET $SG143857
	call	_Cvar_Get
	add	esp, 16					; 00000010H
	mov	DWORD PTR _scr_loading, eax

; 719  : 	scr_download = Cvar_Get( "scr_download", "-1", 0, "downloading bar progress" );

	push	OFFSET $SG143858
	push	0
	push	OFFSET $SG143859
	push	OFFSET $SG143860
	call	_Cvar_Get
	add	esp, 16					; 00000010H
	mov	DWORD PTR _scr_download, eax

; 720  : 	cl_testlights = Cvar_Get( "cl_testlights", "0", 0, "test dynamic lights" );

	push	OFFSET $SG143861
	push	0
	push	OFFSET $SG143862
	push	OFFSET $SG143863
	call	_Cvar_Get
	add	esp, 16					; 00000010H
	mov	DWORD PTR _cl_testlights, eax

; 721  : 	cl_envshot_size = Cvar_Get( "cl_envshot_size", "256", FCVAR_ARCHIVE, "envshot size of cube side" );

	push	OFFSET $SG143864
	push	1
	push	OFFSET $SG143865
	push	OFFSET $SG143866
	call	_Cvar_Get
	add	esp, 16					; 00000010H
	mov	DWORD PTR _cl_envshot_size, eax

; 722  : 	v_dark = Cvar_Get( "v_dark", "0", 0, "starts level from dark screen" );

	push	OFFSET $SG143867
	push	0
	push	OFFSET $SG143868
	push	OFFSET $SG143869
	call	_Cvar_Get
	add	esp, 16					; 00000010H
	mov	DWORD PTR _v_dark, eax

; 723  : 	scr_viewsize = Cvar_Get( "viewsize", "120", FCVAR_ARCHIVE, "screen size" );

	push	OFFSET $SG143870
	push	1
	push	OFFSET $SG143871
	push	OFFSET $SG143872
	call	_Cvar_Get
	add	esp, 16					; 00000010H
	mov	DWORD PTR _scr_viewsize, eax

; 724  : 	
; 725  : 	// register our commands
; 726  : 	Cmd_AddCommand( "timerefresh", SCR_TimeRefresh_f, "turn quickly and print rendering statistcs" );

	push	OFFSET $SG143873
	push	OFFSET _SCR_TimeRefresh_f
	push	OFFSET $SG143874
	call	_Cmd_AddCommand
	add	esp, 12					; 0000000cH

; 727  : 	Cmd_AddCommand( "skyname", CL_SetSky_f, "set new skybox by basename" );

	push	OFFSET $SG143875
	push	OFFSET _CL_SetSky_f
	push	OFFSET $SG143876
	call	_Cmd_AddCommand
	add	esp, 12					; 0000000cH

; 728  : 	Cmd_AddCommand( "loadsky", CL_SetSky_f, "set new skybox by basename" );

	push	OFFSET $SG143877
	push	OFFSET _CL_SetSky_f
	push	OFFSET $SG143878
	call	_Cmd_AddCommand
	add	esp, 12					; 0000000cH

; 729  : 	Cmd_AddCommand( "viewpos", SCR_Viewpos_f, "prints current player origin" );

	push	OFFSET $SG143879
	push	OFFSET _SCR_Viewpos_f
	push	OFFSET $SG143880
	call	_Cmd_AddCommand
	add	esp, 12					; 0000000cH

; 730  : 	Cmd_AddCommand( "sizeup", SCR_SizeUp_f, "screen size up to 10 points" );

	push	OFFSET $SG143881
	push	OFFSET _SCR_SizeUp_f
	push	OFFSET $SG143882
	call	_Cmd_AddCommand
	add	esp, 12					; 0000000cH

; 731  : 	Cmd_AddCommand( "sizedown", SCR_SizeDown_f, "screen size down to 10 points" );

	push	OFFSET $SG143883
	push	OFFSET _SCR_SizeDown_f
	push	OFFSET $SG143884
	call	_Cmd_AddCommand
	add	esp, 12					; 0000000cH

; 732  : 
; 733  : 	if( !UI_LoadProgs( ))

	call	_UI_LoadProgs
	test	eax, eax
	jne	SHORT $LN3@SCR_Init

; 734  : 	{
; 735  : 		Con_Printf( S_ERROR "can't initialize gameui.dll\n" ); // there is non fatal for us

	push	OFFSET $SG143886
	call	_Con_Printf
	add	esp, 4

; 736  : 		host.allow_console = true; // we need console, because menu is missing

	mov	DWORD PTR _host+34336, 1
$LN3@SCR_Init:

; 737  : 	}
; 738  : 
; 739  : 	SCR_VidInit();

	call	_SCR_VidInit

; 740  : 	SCR_LoadCreditsFont ();

	call	_SCR_LoadCreditsFont

; 741  : 	SCR_RegisterTextures ();

	call	_SCR_RegisterTextures

; 742  : 	SCR_InstallParticlePalette ();

	call	_SCR_InstallParticlePalette

; 743  : 	SCR_InitCinematic();

	call	_SCR_InitCinematic

; 744  : 	CL_InitNetgraph();

	call	_CL_InitNetgraph

; 745  : 
; 746  : 	if( host.allow_console && Sys_CheckParm( "-toconsole" ))

	cmp	DWORD PTR _host+34336, 0
	je	SHORT $LN4@SCR_Init
	push	OFFSET $SG143889
	call	_Sys_CheckParm
	add	esp, 4
	test	eax, eax
	je	SHORT $LN4@SCR_Init

; 747  : 		Cbuf_AddText( "toggleconsole\n" );

	push	OFFSET $SG143890
	call	_Cbuf_AddText
	add	esp, 4
	jmp	SHORT $LN5@SCR_Init
$LN4@SCR_Init:

; 748  : 	else UI_SetActiveMenu( true );

	push	1
	call	_UI_SetActiveMenu
	add	esp, 4
$LN5@SCR_Init:

; 749  : 
; 750  : 	scr_init = true;

	mov	DWORD PTR _scr_init, 1
$LN1@SCR_Init:

; 751  : }

	pop	ebp
	ret	0
_SCR_Init ENDP
_TEXT	ENDS
END
