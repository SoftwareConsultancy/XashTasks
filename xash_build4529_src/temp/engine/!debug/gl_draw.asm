; Listing generated by Microsoft (R) Optimizing Compiler Version 19.16.27045.0 

	TITLE	C:\Users\USER\Documents\GitHub\XashTasks\xash_build4529_src\engine\client\gl_draw.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

_DATA	SEGMENT
COMM	_pglColor4f:DWORD
COMM	_pglColor4fv:DWORD
COMM	_pglColor4i:DWORD
COMM	_pglColor4iv:DWORD
COMM	_pglColor4s:DWORD
COMM	_pglColor4sv:DWORD
COMM	_pglColor4ub:DWORD
COMM	_pglColor4ubv:DWORD
COMM	_pglColor4ui:DWORD
COMM	_pglColor4uiv:DWORD
COMM	_pglColor4us:DWORD
COMM	_pglColor4usv:DWORD
COMM	_pglColorMask:DWORD
COMM	_pglColorMaterial:DWORD
COMM	_pglColorPointer:DWORD
COMM	_pglCopyPixels:DWORD
COMM	_pglCopyTexImage1D:DWORD
COMM	_pglCopyTexImage2D:DWORD
COMM	_pglCopyTexSubImage1D:DWORD
COMM	_pglCopyTexSubImage2D:DWORD
COMM	_pglCullFace:DWORD
COMM	_pglDeleteLists:DWORD
COMM	_pglDeleteTextures:DWORD
COMM	_pglDepthFunc:DWORD
COMM	_pglDepthMask:DWORD
COMM	_pglDepthRange:DWORD
COMM	_pglDisable:DWORD
COMM	_pglDisableClientState:DWORD
COMM	_pglDrawArrays:DWORD
COMM	_pglDrawBuffer:DWORD
COMM	_pglDrawElements:DWORD
COMM	_pglDrawPixels:DWORD
COMM	_pglEdgeFlag:DWORD
COMM	_pglEdgeFlagPointer:DWORD
COMM	_pglEdgeFlagv:DWORD
COMM	_pglEnable:DWORD
COMM	_pglEnableClientState:DWORD
COMM	_pglEnd:DWORD
COMM	_pglEndList:DWORD
COMM	_pglEvalCoord1d:DWORD
COMM	_pglEvalCoord1dv:DWORD
COMM	_pglEvalCoord1f:DWORD
COMM	_pglEvalCoord1fv:DWORD
COMM	_pglEvalCoord2d:DWORD
COMM	_pglEvalCoord2dv:DWORD
COMM	_pglEvalCoord2f:DWORD
COMM	_pglEvalCoord2fv:DWORD
COMM	_pglEvalMesh1:DWORD
COMM	_pglEvalMesh2:DWORD
COMM	_pglEvalPoint1:DWORD
COMM	_pglEvalPoint2:DWORD
COMM	_pglFeedbackBuffer:DWORD
COMM	_pglFinish:DWORD
COMM	_pglFlush:DWORD
COMM	_pglFogf:DWORD
COMM	_pglFogfv:DWORD
COMM	_pglFogi:DWORD
COMM	_pglFogiv:DWORD
COMM	_pglFrontFace:DWORD
COMM	_pglFrustum:DWORD
COMM	_pglGenTextures:DWORD
COMM	_pglGetBooleanv:DWORD
COMM	_pglGetClipPlane:DWORD
COMM	_pglGetDoublev:DWORD
COMM	_pglGetFloatv:DWORD
COMM	_pglGetIntegerv:DWORD
COMM	_pglGetLightfv:DWORD
COMM	_pglGetLightiv:DWORD
COMM	_pglGetMapdv:DWORD
COMM	_pglGetMapfv:DWORD
COMM	_pglGetMapiv:DWORD
COMM	_pglGetMaterialfv:DWORD
COMM	_pglGetMaterialiv:DWORD
COMM	_pglGetPixelMapfv:DWORD
COMM	_pglGetPixelMapuiv:DWORD
COMM	_pglGetPixelMapusv:DWORD
COMM	_pglGetPointerv:DWORD
COMM	_pglGetPolygonStipple:DWORD
COMM	_pglGetTexEnvfv:DWORD
COMM	_pglGetTexEnviv:DWORD
COMM	_pglGetTexGendv:DWORD
COMM	_pglGetTexGenfv:DWORD
COMM	_pglGetTexGeniv:DWORD
COMM	_pglGetTexImage:DWORD
COMM	_pglGetTexLevelParameterfv:DWORD
COMM	_pglGetTexLevelParameteriv:DWORD
COMM	_pglGetTexParameterfv:DWORD
COMM	_pglGetTexParameteriv:DWORD
COMM	_pglHint:DWORD
COMM	_pglIndexMask:DWORD
COMM	_pglIndexPointer:DWORD
COMM	_pglIndexd:DWORD
COMM	_pglIndexdv:DWORD
COMM	_pglIndexf:DWORD
COMM	_pglIndexfv:DWORD
COMM	_pglIndexi:DWORD
COMM	_pglIndexiv:DWORD
COMM	_pglIndexs:DWORD
COMM	_pglIndexsv:DWORD
COMM	_pglIndexub:DWORD
COMM	_pglIndexubv:DWORD
COMM	_pglInitNames:DWORD
COMM	_pglInterleavedArrays:DWORD
COMM	_pglLightModelf:DWORD
COMM	_pglLightModelfv:DWORD
COMM	_pglLightModeli:DWORD
COMM	_pglLightModeliv:DWORD
COMM	_pglLightf:DWORD
COMM	_pglLightfv:DWORD
COMM	_pglLighti:DWORD
COMM	_pglLightiv:DWORD
COMM	_pglLineStipple:DWORD
COMM	_pglLineWidth:DWORD
COMM	_pglListBase:DWORD
COMM	_pglLoadIdentity:DWORD
COMM	_pglLoadMatrixd:DWORD
COMM	_pglLoadMatrixf:DWORD
COMM	_pglLoadName:DWORD
COMM	_pglLogicOp:DWORD
COMM	_pglMap1d:DWORD
COMM	_pglMap1f:DWORD
COMM	_pglMap2d:DWORD
COMM	_pglMap2f:DWORD
COMM	_pglMapGrid1d:DWORD
COMM	_pglMapGrid1f:DWORD
COMM	_pglMapGrid2d:DWORD
COMM	_pglMapGrid2f:DWORD
COMM	_pglMaterialf:DWORD
COMM	_pglMaterialfv:DWORD
COMM	_pglMateriali:DWORD
COMM	_pglMaterialiv:DWORD
COMM	_pglMatrixMode:DWORD
COMM	_pglMultMatrixd:DWORD
COMM	_pglMultMatrixf:DWORD
COMM	_pglNewList:DWORD
COMM	_pglNormal3b:DWORD
COMM	_pglNormal3bv:DWORD
COMM	_pglNormal3d:DWORD
COMM	_pglNormal3dv:DWORD
COMM	_pglNormal3f:DWORD
COMM	_pglNormal3fv:DWORD
COMM	_pglNormal3i:DWORD
COMM	_pglNormal3iv:DWORD
COMM	_pglNormal3s:DWORD
COMM	_pglNormal3sv:DWORD
COMM	_pglNormalPointer:DWORD
COMM	_pglOrtho:DWORD
COMM	_pglPassThrough:DWORD
COMM	_pglPixelMapfv:DWORD
COMM	_pglPixelMapuiv:DWORD
COMM	_pglPixelMapusv:DWORD
COMM	_pglPixelStoref:DWORD
COMM	_pglPixelStorei:DWORD
COMM	_pglPixelTransferf:DWORD
COMM	_pglPixelTransferi:DWORD
COMM	_pglPixelZoom:DWORD
COMM	_pglPointSize:DWORD
COMM	_pglPolygonMode:DWORD
COMM	_pglPolygonOffset:DWORD
COMM	_pglPolygonStipple:DWORD
COMM	_pglPopAttrib:DWORD
COMM	_pglPopClientAttrib:DWORD
COMM	_pglPopMatrix:DWORD
COMM	_pglPopName:DWORD
COMM	_pglPushAttrib:DWORD
COMM	_pglPushClientAttrib:DWORD
COMM	_pglPushMatrix:DWORD
COMM	_pglPushName:DWORD
COMM	_pglRasterPos2d:DWORD
COMM	_pglRasterPos2dv:DWORD
COMM	_pglRasterPos2f:DWORD
COMM	_pglRasterPos2fv:DWORD
COMM	_pglRasterPos2i:DWORD
COMM	_pglRasterPos2iv:DWORD
COMM	_pglRasterPos2s:DWORD
COMM	_pglRasterPos2sv:DWORD
COMM	_pglRasterPos3d:DWORD
COMM	_pglRasterPos3dv:DWORD
COMM	_pglRasterPos3f:DWORD
COMM	_pglRasterPos3fv:DWORD
COMM	_pglRasterPos3i:DWORD
COMM	_pglRasterPos3iv:DWORD
COMM	_pglRasterPos3s:DWORD
COMM	_pglRasterPos3sv:DWORD
COMM	_pglRasterPos4d:DWORD
COMM	_pglRasterPos4dv:DWORD
COMM	_pglRasterPos4f:DWORD
COMM	_pglRasterPos4fv:DWORD
COMM	_pglRasterPos4i:DWORD
COMM	_pglRasterPos4iv:DWORD
COMM	_pglRasterPos4s:DWORD
COMM	_pglRasterPos4sv:DWORD
COMM	_pglReadBuffer:DWORD
COMM	_pglReadPixels:DWORD
COMM	_pglRectd:DWORD
COMM	_pglRectdv:DWORD
COMM	_pglRectf:DWORD
COMM	_pglRectfv:DWORD
COMM	_pglRecti:DWORD
COMM	_pglRectiv:DWORD
COMM	_pglRects:DWORD
COMM	_pglRectsv:DWORD
COMM	_pglRotated:DWORD
COMM	_pglRotatef:DWORD
COMM	_pglScaled:DWORD
COMM	_pglScalef:DWORD
COMM	_pglScissor:DWORD
COMM	_pglSelectBuffer:DWORD
COMM	_pglShadeModel:DWORD
COMM	_pglStencilFunc:DWORD
COMM	_pglStencilMask:DWORD
COMM	_pglStencilOp:DWORD
COMM	_pglTexCoord1d:DWORD
COMM	_pglTexCoord1dv:DWORD
COMM	_pglTexCoord1f:DWORD
COMM	_pglTexCoord1fv:DWORD
COMM	_pglTexCoord1i:DWORD
COMM	_pglTexCoord1iv:DWORD
COMM	_pglTexCoord1s:DWORD
COMM	_pglTexCoord1sv:DWORD
COMM	_pglTexCoord2d:DWORD
COMM	_pglTexCoord2dv:DWORD
COMM	_pglTexCoord2f:DWORD
COMM	_pglTexCoord2fv:DWORD
COMM	_pglTexCoord2i:DWORD
COMM	_pglTexCoord2iv:DWORD
COMM	_pglTexCoord2s:DWORD
COMM	_pglTexCoord2sv:DWORD
COMM	_pglTexCoord3d:DWORD
COMM	_pglTexCoord3dv:DWORD
COMM	_pglTexCoord3f:DWORD
COMM	_pglTexCoord3fv:DWORD
COMM	_pglTexCoord3i:DWORD
COMM	_pglTexCoord3iv:DWORD
COMM	_pglTexCoord3s:DWORD
COMM	_pglTexCoord3sv:DWORD
COMM	_pglTexCoord4d:DWORD
COMM	_pglTexCoord4dv:DWORD
COMM	_pglTexCoord4f:DWORD
COMM	_pglTexCoord4fv:DWORD
COMM	_pglTexCoord4i:DWORD
COMM	_pglTexCoord4iv:DWORD
COMM	_pglTexCoord4s:DWORD
COMM	_pglTexCoord4sv:DWORD
COMM	_pglTexCoordPointer:DWORD
COMM	_pglTexEnvf:DWORD
COMM	_pglTexEnvfv:DWORD
COMM	_pglTexEnvi:DWORD
COMM	_pglTexEnviv:DWORD
COMM	_pglTexGend:DWORD
COMM	_pglTexGendv:DWORD
COMM	_pglTexGenf:DWORD
COMM	_pglTexGenfv:DWORD
COMM	_pglTexGeni:DWORD
COMM	_pglTexGeniv:DWORD
COMM	_pglTexImage1D:DWORD
COMM	_pglTexImage2D:DWORD
COMM	_pglTexParameterf:DWORD
COMM	_pglTexParameterfv:DWORD
COMM	_pglTexParameteri:DWORD
COMM	_pglTexParameteriv:DWORD
COMM	_pglTexSubImage1D:DWORD
COMM	_pglTexSubImage2D:DWORD
COMM	_pglTranslated:DWORD
COMM	_pglTranslatef:DWORD
COMM	_pglVertex2d:DWORD
COMM	_pglVertex2dv:DWORD
COMM	_pglVertex2f:DWORD
COMM	_pglVertex2fv:DWORD
COMM	_pglVertex2i:DWORD
COMM	_pglVertex2iv:DWORD
COMM	_pglVertex2s:DWORD
COMM	_pglVertex2sv:DWORD
COMM	_pglVertex3d:DWORD
COMM	_pglVertex3dv:DWORD
COMM	_pglVertex3f:DWORD
COMM	_pglVertex3fv:DWORD
COMM	_pglVertex3i:DWORD
COMM	_pglVertex3iv:DWORD
COMM	_pglVertex3s:DWORD
COMM	_pglVertex3sv:DWORD
COMM	_pglVertex4d:DWORD
COMM	_pglVertex4dv:DWORD
COMM	_pglVertex4f:DWORD
COMM	_pglVertex4fv:DWORD
COMM	_pglVertex4i:DWORD
COMM	_pglVertex4iv:DWORD
COMM	_pglVertex4s:DWORD
COMM	_pglVertex4sv:DWORD
COMM	_pglVertexPointer:DWORD
COMM	_pglViewport:DWORD
COMM	_pglPointParameterfEXT:DWORD
COMM	_pglPointParameterfvEXT:DWORD
COMM	_pglLockArraysEXT:DWORD
COMM	_pglUnlockArraysEXT:DWORD
COMM	_pglActiveTextureARB:DWORD
COMM	_pglClientActiveTextureARB:DWORD
COMM	_pglGetCompressedTexImage:DWORD
COMM	_pglDrawRangeElements:DWORD
COMM	_pglDrawRangeElementsEXT:DWORD
COMM	_pglMultiTexCoord1f:DWORD
COMM	_pglMultiTexCoord2f:DWORD
COMM	_pglMultiTexCoord3f:DWORD
COMM	_pglMultiTexCoord4f:DWORD
COMM	_pglActiveTexture:DWORD
COMM	_pglClientActiveTexture:DWORD
COMM	_pglCompressedTexImage3DARB:DWORD
COMM	_pglCompressedTexImage2DARB:DWORD
COMM	_pglCompressedTexImage1DARB:DWORD
COMM	_pglCompressedTexSubImage3DARB:DWORD
COMM	_pglCompressedTexSubImage2DARB:DWORD
COMM	_pglCompressedTexSubImage1DARB:DWORD
COMM	_pglDeleteObjectARB:DWORD
COMM	_pglGetHandleARB:DWORD
COMM	_pglDetachObjectARB:DWORD
COMM	_pglCreateShaderObjectARB:DWORD
COMM	_pglShaderSourceARB:DWORD
COMM	_pglCompileShaderARB:DWORD
COMM	_pglCreateProgramObjectARB:DWORD
COMM	_pglAttachObjectARB:DWORD
COMM	_pglLinkProgramARB:DWORD
COMM	_pglUseProgramObjectARB:DWORD
COMM	_pglValidateProgramARB:DWORD
COMM	_pglBindProgramARB:DWORD
COMM	_pglDeleteProgramsARB:DWORD
COMM	_pglGenProgramsARB:DWORD
COMM	_pglProgramStringARB:DWORD
COMM	_pglProgramEnvParameter4fARB:DWORD
COMM	_pglProgramLocalParameter4fARB:DWORD
COMM	_pglUniform1fARB:DWORD
COMM	_pglUniform2fARB:DWORD
COMM	_pglUniform3fARB:DWORD
COMM	_pglUniform4fARB:DWORD
COMM	_pglUniform1iARB:DWORD
COMM	_pglUniform2iARB:DWORD
COMM	_pglUniform3iARB:DWORD
COMM	_pglUniform4iARB:DWORD
COMM	_pglUniform1fvARB:DWORD
COMM	_pglUniform2fvARB:DWORD
COMM	_pglUniform3fvARB:DWORD
COMM	_pglUniform4fvARB:DWORD
COMM	_pglUniform1ivARB:DWORD
COMM	_pglUniform2ivARB:DWORD
COMM	_pglUniform3ivARB:DWORD
COMM	_pglUniform4ivARB:DWORD
COMM	_pglUniformMatrix2fvARB:DWORD
COMM	_pglUniformMatrix3fvARB:DWORD
COMM	_pglUniformMatrix4fvARB:DWORD
COMM	_pglGetObjectParameterfvARB:DWORD
COMM	_pglGetObjectParameterivARB:DWORD
COMM	_pglGetInfoLogARB:DWORD
COMM	_pglGetAttachedObjectsARB:DWORD
COMM	_pglGetUniformLocationARB:DWORD
COMM	_pglGetActiveUniformARB:DWORD
COMM	_pglGetUniformfvARB:DWORD
COMM	_pglGetUniformivARB:DWORD
COMM	_pglGetShaderSourceARB:DWORD
COMM	_pglTexImage3D:DWORD
COMM	_pglTexSubImage3D:DWORD
COMM	_pglCopyTexSubImage3D:DWORD
COMM	_pglBlendEquationEXT:DWORD
COMM	_pglStencilOpSeparate:DWORD
COMM	_pglStencilFuncSeparate:DWORD
COMM	_pglActiveStencilFaceEXT:DWORD
COMM	_pglVertexAttribPointerARB:DWORD
COMM	_pglEnableVertexAttribArrayARB:DWORD
COMM	_pglDisableVertexAttribArrayARB:DWORD
COMM	_pglBindAttribLocationARB:DWORD
COMM	_pglGetActiveAttribARB:DWORD
COMM	_pglGetAttribLocationARB:DWORD
COMM	_pglBindFragDataLocation:DWORD
COMM	_pglVertexAttrib2fARB:DWORD
COMM	_pglVertexAttrib2fvARB:DWORD
COMM	_pglVertexAttrib3fvARB:DWORD
COMM	_pglBindBufferARB:DWORD
COMM	_pglDeleteBuffersARB:DWORD
COMM	_pglGenBuffersARB:DWORD
COMM	_pglIsBufferARB:DWORD
COMM	_pglMapBufferARB:DWORD
COMM	_pglUnmapBufferARB:DWORD
COMM	_pglBufferDataARB:DWORD
COMM	_pglBufferSubDataARB:DWORD
COMM	_pglGenQueriesARB:DWORD
COMM	_pglDeleteQueriesARB:DWORD
COMM	_pglIsQueryARB:DWORD
COMM	_pglBeginQueryARB:DWORD
COMM	_pglEndQueryARB:DWORD
COMM	_pglGetQueryivARB:DWORD
COMM	_pglGetQueryObjectivARB:DWORD
COMM	_pglGetQueryObjectuivARB:DWORD
COMM	_pglDebugMessageControlARB:DWORD
COMM	_pglDebugMessageInsertARB:DWORD
COMM	_pglDebugMessageCallbackARB:DWORD
COMM	_pglGetDebugMessageLogARB:DWORD
COMM	_pglIsRenderbuffer:DWORD
COMM	_pglBindRenderbuffer:DWORD
COMM	_pglDeleteRenderbuffers:DWORD
COMM	_pglGenRenderbuffers:DWORD
COMM	_pglRenderbufferStorage:DWORD
COMM	_pglRenderbufferStorageMultisample:DWORD
COMM	_pglGetRenderbufferParameteriv:DWORD
COMM	_pglIsFramebuffer:DWORD
COMM	_pglBindFramebuffer:DWORD
COMM	_pglDeleteFramebuffers:DWORD
COMM	_pglGenFramebuffers:DWORD
COMM	_pglCheckFramebufferStatus:DWORD
COMM	_pglFramebufferTexture1D:DWORD
COMM	_pglFramebufferTexture2D:DWORD
COMM	_pglFramebufferTexture3D:DWORD
COMM	_pglFramebufferTextureLayer:DWORD
COMM	_pglFramebufferRenderbuffer:DWORD
COMM	_pglGetFramebufferAttachmentParameteriv:DWORD
COMM	_pglBlitFramebuffer:DWORD
COMM	_pglDrawBuffersARB:DWORD
COMM	_pglGenerateMipmap:DWORD
COMM	_pglBindVertexArray:DWORD
COMM	_pglDeleteVertexArrays:DWORD
COMM	_pglGenVertexArrays:DWORD
COMM	_pglIsVertexArray:DWORD
COMM	_pglSwapInterval:DWORD
COMM	_pwglSwapBuffers:DWORD
COMM	_pwglCopyContext:DWORD
COMM	_pwglCreateContext:DWORD
COMM	_pwglCreateLayerContext:DWORD
COMM	_pwglDeleteContext:DWORD
COMM	_pwglGetCurrentContext:DWORD
COMM	_pwglGetProcAddress:DWORD
COMM	_pwglMakeCurrent:DWORD
COMM	_pwglShareLists:DWORD
COMM	_pwglUseFontBitmaps:DWORD
COMM	_pwglUseFontOutlines:DWORD
COMM	_pwglDescribeLayerPlane:DWORD
COMM	_pwglSetLayerPaletteEntries:DWORD
COMM	_pwglGetLayerPaletteEntries:DWORD
COMM	_pwglRealizeLayerPalette:DWORD
COMM	_pwglSwapLayerBuffers:DWORD
COMM	_pwglSwapIntervalEXT:DWORD
COMM	_pwglCreateContextAttribsARB:DWORD
COMM	_pwglGetPixelFormatAttribiv:DWORD
COMM	_pwglChoosePixelFormat:DWORD
COMM	_pwglGetExtensionsStringEXT:DWORD
COMM	_pglGetError:DWORD
COMM	_pglGetString:DWORD
COMM	_pglAccum:DWORD
COMM	_pglAlphaFunc:DWORD
COMM	_pglArrayElement:DWORD
COMM	_pglBegin:DWORD
COMM	_pglBindTexture:DWORD
COMM	_pglBitmap:DWORD
COMM	_pglBlendFunc:DWORD
COMM	_pglCallList:DWORD
COMM	_pglCallLists:DWORD
COMM	_pglClear:DWORD
COMM	_pglClearAccum:DWORD
COMM	_pglClearColor:DWORD
COMM	_pglClearDepth:DWORD
COMM	_pglClearIndex:DWORD
COMM	_pglClearStencil:DWORD
COMM	_pglIsEnabled:DWORD
COMM	_pglIsList:DWORD
COMM	_pglIsTexture:DWORD
COMM	_pglClipPlane:DWORD
COMM	_pglColor3b:DWORD
COMM	_pglColor3bv:DWORD
COMM	_pglColor3d:DWORD
COMM	_pglColor3dv:DWORD
COMM	_pglColor3f:DWORD
COMM	_pglColor3fv:DWORD
COMM	_pglColor3i:DWORD
COMM	_pglColor3iv:DWORD
COMM	_pglColor3s:DWORD
COMM	_pglColor3sv:DWORD
COMM	_pglColor3ub:DWORD
COMM	_pglColor3ubv:DWORD
COMM	_pglColor3ui:DWORD
COMM	_pglColor3uiv:DWORD
COMM	_pglColor3us:DWORD
COMM	_pglColor3usv:DWORD
COMM	_pglColor4b:DWORD
COMM	_pglColor4bv:DWORD
COMM	_pglColor4d:DWORD
COMM	_pglColor4dv:DWORD
_DATA	ENDS
PUBLIC	_R_Set2DMode
PUBLIC	_R_DrawTileClear
PUBLIC	_R_UploadStretchRaw
PUBLIC	_R_GetTextureParms
PUBLIC	_R_GetSpriteParms
PUBLIC	_R_DrawStretchRaw
PUBLIC	_R_DrawStretchPic
PUBLIC	_R_GetSpriteTexture
PUBLIC	__real@3f800000
PUBLIC	__real@40f869f000000000
PUBLIC	__real@c0f869f000000000
EXTRN	_Host_Error:PROC
EXTRN	_NearestPOW:PROC
EXTRN	_GL_Bind:PROC
EXTRN	_GL_LoadMatrix:PROC
EXTRN	_GL_SetRenderMode:PROC
EXTRN	_GL_Cull:PROC
EXTRN	_R_GetTexture:PROC
EXTRN	_GL_ResampleTexture:PROC
EXTRN	_GL_ApplyTextureParams:PROC
EXTRN	_R_GetSpriteFrame:PROC
EXTRN	_GL_Support:PROC
EXTRN	_cls:BYTE
EXTRN	_RI:BYTE
EXTRN	_tr:BYTE
EXTRN	_glConfig:BYTE
EXTRN	_glState:BYTE
EXTRN	__fltused:DWORD
;	COMDAT __real@c0f869f000000000
CONST	SEGMENT
__real@c0f869f000000000 DQ 0c0f869f000000000r	; -99999
CONST	ENDS
;	COMDAT __real@40f869f000000000
CONST	SEGMENT
__real@40f869f000000000 DQ 040f869f000000000r	; 99999
CONST	ENDS
;	COMDAT __real@3f800000
CONST	SEGMENT
__real@3f800000 DD 03f800000r			; 1
CONST	ENDS
_DATA	SEGMENT
$SG143396 DB	'R_DrawStretchRaw: size %i exceeds hardware limits', 0aH, 00H
	ORG $+1
$SG143398 DB	'R_DrawStretchRaw: size %i exceeds hardware limits', 0aH, 00H
	ORG $+1
$SG143426 DB	'R_UploadStretchRaw: size %i exceeds hardware limits', 0aH
	DB	00H
	ORG $+3
$SG143428 DB	'R_UploadStretchRaw: size %i exceeds hardware limits', 0aH
	DB	00H
_DATA	ENDS
; Function compile flags: /Odtp
; File c:\users\user\documents\github\xashtasks\xash_build4529_src\engine\client\gl_draw.c
_TEXT	SEGMENT
_m_pSpriteModel$ = 8					; size = 4
_frame$ = 12						; size = 4
_R_GetSpriteTexture PROC

; 55   : {

	push	ebp
	mov	ebp, esp

; 56   : 	if( !m_pSpriteModel || m_pSpriteModel->type != mod_sprite || !m_pSpriteModel->cache.data )

	cmp	DWORD PTR _m_pSpriteModel$[ebp], 0
	je	SHORT $LN3@R_GetSprit
	mov	eax, DWORD PTR _m_pSpriteModel$[ebp]
	cmp	DWORD PTR [eax+68], 1
	jne	SHORT $LN3@R_GetSprit
	mov	ecx, DWORD PTR _m_pSpriteModel$[ebp]
	cmp	DWORD PTR [ecx+388], 0
	jne	SHORT $LN2@R_GetSprit
$LN3@R_GetSprit:

; 57   : 		return 0;

	xor	eax, eax
	jmp	SHORT $LN1@R_GetSprit
$LN2@R_GetSprit:

; 58   : 
; 59   : 	return R_GetSpriteFrame( m_pSpriteModel, frame, 0.0f )->gl_texturenum;

	push	ecx
	xorps	xmm0, xmm0
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _frame$[ebp]
	push	edx
	mov	eax, DWORD PTR _m_pSpriteModel$[ebp]
	push	eax
	call	_R_GetSpriteFrame
	add	esp, 12					; 0000000cH
	mov	eax, DWORD PTR [eax+24]
$LN1@R_GetSprit:

; 60   : }

	pop	ebp
	ret	0
_R_GetSpriteTexture ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\documents\github\xashtasks\xash_build4529_src\engine\client\gl_draw.c
_TEXT	SEGMENT
_x$ = 8							; size = 4
_y$ = 12						; size = 4
_w$ = 16						; size = 4
_h$ = 20						; size = 4
_s1$ = 24						; size = 4
_t1$ = 28						; size = 4
_s2$ = 32						; size = 4
_t2$ = 36						; size = 4
_texnum$ = 40						; size = 4
_R_DrawStretchPic PROC

; 68   : {

	push	ebp
	mov	ebp, esp

; 69   : 	GL_Bind( GL_TEXTURE0, texnum );

	mov	eax, DWORD PTR _texnum$[ebp]
	push	eax
	push	0
	call	_GL_Bind
	add	esp, 8

; 70   : 
; 71   : 	pglBegin( GL_QUADS );

	push	7
	call	DWORD PTR _pglBegin

; 72   : 		pglTexCoord2f( s1, t1 );

	push	ecx
	movss	xmm0, DWORD PTR _t1$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _s1$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	DWORD PTR _pglTexCoord2f

; 73   : 		pglVertex2f( x, y );

	push	ecx
	movss	xmm0, DWORD PTR _y$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _x$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	DWORD PTR _pglVertex2f

; 74   : 
; 75   : 		pglTexCoord2f( s2, t1 );

	push	ecx
	movss	xmm0, DWORD PTR _t1$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _s2$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	DWORD PTR _pglTexCoord2f

; 76   : 		pglVertex2f( x + w, y );

	push	ecx
	movss	xmm0, DWORD PTR _y$[ebp]
	movss	DWORD PTR [esp], xmm0
	movss	xmm0, DWORD PTR _x$[ebp]
	addss	xmm0, DWORD PTR _w$[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	DWORD PTR _pglVertex2f

; 77   : 
; 78   : 		pglTexCoord2f( s2, t2 );

	push	ecx
	movss	xmm0, DWORD PTR _t2$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _s2$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	DWORD PTR _pglTexCoord2f

; 79   : 		pglVertex2f( x + w, y + h );

	movss	xmm0, DWORD PTR _y$[ebp]
	addss	xmm0, DWORD PTR _h$[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	movss	xmm0, DWORD PTR _x$[ebp]
	addss	xmm0, DWORD PTR _w$[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	DWORD PTR _pglVertex2f

; 80   : 
; 81   : 		pglTexCoord2f( s1, t2 );

	push	ecx
	movss	xmm0, DWORD PTR _t2$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _s1$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	DWORD PTR _pglTexCoord2f

; 82   : 		pglVertex2f( x, y + h );

	movss	xmm0, DWORD PTR _y$[ebp]
	addss	xmm0, DWORD PTR _h$[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _x$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	DWORD PTR _pglVertex2f

; 83   : 	pglEnd();

	call	DWORD PTR _pglEnd

; 84   : }

	pop	ebp
	ret	0
_R_DrawStretchPic ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\documents\github\xashtasks\xash_build4529_src\engine\client\gl_draw.c
_TEXT	SEGMENT
_raw$ = -16						; size = 4
_height$1 = -12						; size = 4
_width$2 = -8						; size = 4
_tex$ = -4						; size = 4
_x$ = 8							; size = 4
_y$ = 12						; size = 4
_w$ = 16						; size = 4
_h$ = 20						; size = 4
_cols$ = 24						; size = 4
_rows$ = 28						; size = 4
_data$ = 32						; size = 4
_dirty$ = 36						; size = 4
_R_DrawStretchRaw PROC

; 125  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H

; 126  : 	byte		*raw = NULL;

	mov	DWORD PTR _raw$[ebp], 0

; 127  : 	gl_texture_t	*tex;
; 128  : 
; 129  : 	if( !GL_Support( GL_ARB_TEXTURE_NPOT_EXT ))

	push	14					; 0000000eH
	call	_GL_Support
	add	esp, 4
	test	eax, eax
	jne	SHORT $LN2@R_DrawStre

; 130  : 	{
; 131  : 		int	width = 1, height = 1;

	mov	DWORD PTR _width$2[ebp], 1
	mov	DWORD PTR _height$1[ebp], 1

; 132  : 	
; 133  : 		// check the dimensions
; 134  : 		width = NearestPOW( cols, true );

	push	1
	mov	eax, DWORD PTR _cols$[ebp]
	push	eax
	call	_NearestPOW
	add	esp, 8
	mov	DWORD PTR _width$2[ebp], eax

; 135  : 		height = NearestPOW( rows, false );

	push	0
	mov	ecx, DWORD PTR _rows$[ebp]
	push	ecx
	call	_NearestPOW
	add	esp, 8
	mov	DWORD PTR _height$1[ebp], eax

; 136  : 
; 137  : 		if( cols != width || rows != height )

	mov	edx, DWORD PTR _cols$[ebp]
	cmp	edx, DWORD PTR _width$2[ebp]
	jne	SHORT $LN5@R_DrawStre
	mov	eax, DWORD PTR _rows$[ebp]
	cmp	eax, DWORD PTR _height$1[ebp]
	je	SHORT $LN4@R_DrawStre
$LN5@R_DrawStre:

; 138  : 		{
; 139  : 			raw = GL_ResampleTexture( data, cols, rows, width, height, false );

	push	0
	mov	ecx, DWORD PTR _height$1[ebp]
	push	ecx
	mov	edx, DWORD PTR _width$2[ebp]
	push	edx
	mov	eax, DWORD PTR _rows$[ebp]
	push	eax
	mov	ecx, DWORD PTR _cols$[ebp]
	push	ecx
	mov	edx, DWORD PTR _data$[ebp]
	push	edx
	call	_GL_ResampleTexture
	add	esp, 24					; 00000018H
	mov	DWORD PTR _raw$[ebp], eax

; 140  : 			cols = width;

	mov	eax, DWORD PTR _width$2[ebp]
	mov	DWORD PTR _cols$[ebp], eax

; 141  : 			rows = height;

	mov	ecx, DWORD PTR _height$1[ebp]
	mov	DWORD PTR _rows$[ebp], ecx
$LN4@R_DrawStre:

; 142  : 		}
; 143  : 	}

	jmp	SHORT $LN3@R_DrawStre
$LN2@R_DrawStre:

; 144  : 	else
; 145  : 	{
; 146  : 		raw = (byte *)data;

	mov	edx, DWORD PTR _data$[ebp]
	mov	DWORD PTR _raw$[ebp], edx
$LN3@R_DrawStre:

; 147  : 	}
; 148  : 
; 149  : 	if( cols > glConfig.max_2d_texture_size )

	mov	eax, DWORD PTR _cols$[ebp]
	cmp	eax, DWORD PTR _glConfig+60
	jle	SHORT $LN6@R_DrawStre

; 150  : 		Host_Error( "R_DrawStretchRaw: size %i exceeds hardware limits\n", cols );

	mov	ecx, DWORD PTR _cols$[ebp]
	push	ecx
	push	OFFSET $SG143396
	call	_Host_Error
	add	esp, 8
$LN6@R_DrawStre:

; 151  : 	if( rows > glConfig.max_2d_texture_size )

	mov	edx, DWORD PTR _rows$[ebp]
	cmp	edx, DWORD PTR _glConfig+60
	jle	SHORT $LN7@R_DrawStre

; 152  : 		Host_Error( "R_DrawStretchRaw: size %i exceeds hardware limits\n", rows );

	mov	eax, DWORD PTR _rows$[ebp]
	push	eax
	push	OFFSET $SG143398
	call	_Host_Error
	add	esp, 8
$LN7@R_DrawStre:

; 153  : 
; 154  : 	pglDisable( GL_BLEND );

	push	3042					; 00000be2H
	call	DWORD PTR _pglDisable

; 155  : 	pglDisable( GL_ALPHA_TEST );

	push	3008					; 00000bc0H
	call	DWORD PTR _pglDisable

; 156  : 	pglTexEnvi( GL_TEXTURE_ENV, GL_TEXTURE_ENV_MODE, GL_REPLACE );

	push	7681					; 00001e01H
	push	8704					; 00002200H
	push	8960					; 00002300H
	call	DWORD PTR _pglTexEnvi

; 157  : 
; 158  : 	tex = R_GetTexture( tr.cinTexture );

	mov	ecx, DWORD PTR _tr+1080
	push	ecx
	call	_R_GetTexture
	add	esp, 4
	mov	DWORD PTR _tex$[ebp], eax

; 159  : 	GL_Bind( GL_TEXTURE0, tr.cinTexture );

	mov	edx, DWORD PTR _tr+1080
	push	edx
	push	0
	call	_GL_Bind
	add	esp, 8

; 160  : 
; 161  : 	if( cols == tex->width && rows == tex->height )

	mov	eax, DWORD PTR _tex$[ebp]
	movzx	ecx, WORD PTR [eax+260]
	cmp	DWORD PTR _cols$[ebp], ecx
	jne	SHORT $LN8@R_DrawStre
	mov	edx, DWORD PTR _tex$[ebp]
	movzx	eax, WORD PTR [edx+262]
	cmp	DWORD PTR _rows$[ebp], eax
	jne	SHORT $LN8@R_DrawStre

; 162  : 	{
; 163  : 		if( dirty )

	cmp	DWORD PTR _dirty$[ebp], 0
	je	SHORT $LN10@R_DrawStre

; 164  : 		{
; 165  : 			pglTexSubImage2D( GL_TEXTURE_2D, 0, 0, 0, cols, rows, GL_BGRA, GL_UNSIGNED_BYTE, raw );

	mov	ecx, DWORD PTR _raw$[ebp]
	push	ecx
	push	5121					; 00001401H
	push	32993					; 000080e1H
	mov	edx, DWORD PTR _rows$[ebp]
	push	edx
	mov	eax, DWORD PTR _cols$[ebp]
	push	eax
	push	0
	push	0
	push	0
	push	3553					; 00000de1H
	call	DWORD PTR _pglTexSubImage2D
$LN10@R_DrawStre:

; 166  : 		}
; 167  : 	}

	jmp	SHORT $LN11@R_DrawStre
$LN8@R_DrawStre:

; 168  : 	else
; 169  : 	{
; 170  : 		tex->size = cols * rows * 4;

	mov	ecx, DWORD PTR _cols$[ebp]
	imul	ecx, DWORD PTR _rows$[ebp]
	shl	ecx, 2
	mov	edx, DWORD PTR _tex$[ebp]
	mov	DWORD PTR [edx+296], ecx

; 171  : 		tex->width = cols;

	mov	eax, DWORD PTR _tex$[ebp]
	mov	cx, WORD PTR _cols$[ebp]
	mov	WORD PTR [eax+260], cx

; 172  : 		tex->height = rows;

	mov	edx, DWORD PTR _tex$[ebp]
	mov	ax, WORD PTR _rows$[ebp]
	mov	WORD PTR [edx+262], ax

; 173  : 		if( dirty )

	cmp	DWORD PTR _dirty$[ebp], 0
	je	SHORT $LN11@R_DrawStre

; 174  : 		{
; 175  : 			pglTexImage2D( GL_TEXTURE_2D, 0, GL_RGBA, cols, rows, 0, GL_BGRA, GL_UNSIGNED_BYTE, raw );

	mov	ecx, DWORD PTR _raw$[ebp]
	push	ecx
	push	5121					; 00001401H
	push	32993					; 000080e1H
	push	0
	mov	edx, DWORD PTR _rows$[ebp]
	push	edx
	mov	eax, DWORD PTR _cols$[ebp]
	push	eax
	push	6408					; 00001908H
	push	0
	push	3553					; 00000de1H
	call	DWORD PTR _pglTexImage2D
$LN11@R_DrawStre:

; 176  : 		}
; 177  : 	}
; 178  : 
; 179  : 	pglBegin( GL_QUADS );

	push	7
	call	DWORD PTR _pglBegin

; 180  : 	pglTexCoord2f( 0, 0 );

	push	ecx
	xorps	xmm0, xmm0
	movss	DWORD PTR [esp], xmm0
	push	ecx
	xorps	xmm0, xmm0
	movss	DWORD PTR [esp], xmm0
	call	DWORD PTR _pglTexCoord2f

; 181  : 	pglVertex2f( x, y );

	push	ecx
	movss	xmm0, DWORD PTR _y$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _x$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	DWORD PTR _pglVertex2f

; 182  : 	pglTexCoord2f( 1, 0 );

	push	ecx
	xorps	xmm0, xmm0
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [esp], xmm0
	call	DWORD PTR _pglTexCoord2f

; 183  : 	pglVertex2f( x + w, y );

	push	ecx
	movss	xmm0, DWORD PTR _y$[ebp]
	movss	DWORD PTR [esp], xmm0
	movss	xmm0, DWORD PTR _x$[ebp]
	addss	xmm0, DWORD PTR _w$[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	DWORD PTR _pglVertex2f

; 184  : 	pglTexCoord2f( 1, 1 );

	push	ecx
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [esp], xmm0
	call	DWORD PTR _pglTexCoord2f

; 185  : 	pglVertex2f( x + w, y + h );

	movss	xmm0, DWORD PTR _y$[ebp]
	addss	xmm0, DWORD PTR _h$[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	movss	xmm0, DWORD PTR _x$[ebp]
	addss	xmm0, DWORD PTR _w$[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	DWORD PTR _pglVertex2f

; 186  : 	pglTexCoord2f( 0, 1 );

	push	ecx
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	xorps	xmm0, xmm0
	movss	DWORD PTR [esp], xmm0
	call	DWORD PTR _pglTexCoord2f

; 187  : 	pglVertex2f( x, y + h );

	movss	xmm0, DWORD PTR _y$[ebp]
	addss	xmm0, DWORD PTR _h$[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _x$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	DWORD PTR _pglVertex2f

; 188  : 	pglEnd();

	call	DWORD PTR _pglEnd

; 189  : }

	mov	esp, ebp
	pop	ebp
	ret	0
_R_DrawStretchRaw ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\documents\github\xashtasks\xash_build4529_src\engine\client\gl_draw.c
_TEXT	SEGMENT
_pFrame$ = -4						; size = 4
_frameWidth$ = 8					; size = 4
_frameHeight$ = 12					; size = 4
_numFrames$ = 16					; size = 4
_currentFrame$ = 20					; size = 4
_pSprite$ = 24						; size = 4
_R_GetSpriteParms PROC

; 43   : {

	push	ebp
	mov	ebp, esp
	push	ecx

; 44   : 	mspriteframe_t	*pFrame;
; 45   : 
; 46   : 	if( !pSprite || pSprite->type != mod_sprite ) return; // bad model ?

	cmp	DWORD PTR _pSprite$[ebp], 0
	je	SHORT $LN3@R_GetSprit
	mov	eax, DWORD PTR _pSprite$[ebp]
	cmp	DWORD PTR [eax+68], 1
	je	SHORT $LN2@R_GetSprit
$LN3@R_GetSprit:
	jmp	SHORT $LN6@R_GetSprit
$LN2@R_GetSprit:

; 47   : 	pFrame = R_GetSpriteFrame( pSprite, currentFrame, 0.0f );

	push	ecx
	xorps	xmm0, xmm0
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _currentFrame$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pSprite$[ebp]
	push	edx
	call	_R_GetSpriteFrame
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _pFrame$[ebp], eax

; 48   : 
; 49   : 	if( frameWidth ) *frameWidth = pFrame->width;

	cmp	DWORD PTR _frameWidth$[ebp], 0
	je	SHORT $LN4@R_GetSprit
	mov	eax, DWORD PTR _frameWidth$[ebp]
	mov	ecx, DWORD PTR _pFrame$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx
$LN4@R_GetSprit:

; 50   : 	if( frameHeight ) *frameHeight = pFrame->height;

	cmp	DWORD PTR _frameHeight$[ebp], 0
	je	SHORT $LN5@R_GetSprit
	mov	eax, DWORD PTR _frameHeight$[ebp]
	mov	ecx, DWORD PTR _pFrame$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax], edx
$LN5@R_GetSprit:

; 51   : 	if( numFrames ) *numFrames = pSprite->numframes;

	cmp	DWORD PTR _numFrames$[ebp], 0
	je	SHORT $LN6@R_GetSprit
	mov	eax, DWORD PTR _numFrames$[ebp]
	mov	ecx, DWORD PTR _pSprite$[ebp]
	mov	edx, DWORD PTR [ecx+72]
	mov	DWORD PTR [eax], edx
$LN6@R_GetSprit:

; 52   : }

	mov	esp, ebp
	pop	ebp
	ret	0
_R_GetSpriteParms ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\documents\github\xashtasks\xash_build4529_src\engine\client\gl_draw.c
_TEXT	SEGMENT
_glt$ = -4						; size = 4
_w$ = 8							; size = 4
_h$ = 12						; size = 4
_texnum$ = 16						; size = 4
_R_GetTextureParms PROC

; 26   : {

	push	ebp
	mov	ebp, esp
	push	ecx

; 27   : 	gl_texture_t	*glt;
; 28   : 
; 29   : 	glt = R_GetTexture( texnum );

	mov	eax, DWORD PTR _texnum$[ebp]
	push	eax
	call	_R_GetTexture
	add	esp, 4
	mov	DWORD PTR _glt$[ebp], eax

; 30   : 	if( w ) *w = glt->srcWidth;

	cmp	DWORD PTR _w$[ebp], 0
	je	SHORT $LN2@R_GetTextu
	mov	ecx, DWORD PTR _glt$[ebp]
	movzx	edx, WORD PTR [ecx+256]
	mov	eax, DWORD PTR _w$[ebp]
	mov	DWORD PTR [eax], edx
$LN2@R_GetTextu:

; 31   : 	if( h ) *h = glt->srcHeight;

	cmp	DWORD PTR _h$[ebp], 0
	je	SHORT $LN1@R_GetTextu
	mov	ecx, DWORD PTR _glt$[ebp]
	movzx	edx, WORD PTR [ecx+258]
	mov	eax, DWORD PTR _h$[ebp]
	mov	DWORD PTR [eax], edx
$LN1@R_GetTextu:

; 32   : }

	mov	esp, ebp
	pop	ebp
	ret	0
_R_GetTextureParms ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\documents\github\xashtasks\xash_build4529_src\engine\client\gl_draw.c
_TEXT	SEGMENT
tv80 = -24						; size = 4
tv79 = -20						; size = 4
tv76 = -16						; size = 4
tv75 = -12						; size = 4
_raw$ = -8						; size = 4
_tex$ = -4						; size = 4
_texture$ = 8						; size = 4
_cols$ = 12						; size = 4
_rows$ = 16						; size = 4
_width$ = 20						; size = 4
_height$ = 24						; size = 4
_data$ = 28						; size = 4
_R_UploadStretchRaw PROC

; 197  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H

; 198  : 	byte		*raw = NULL;

	mov	DWORD PTR _raw$[ebp], 0

; 199  : 	gl_texture_t	*tex;
; 200  : 
; 201  : 	if( !GL_Support( GL_ARB_TEXTURE_NPOT_EXT ))

	push	14					; 0000000eH
	call	_GL_Support
	add	esp, 4
	test	eax, eax
	jne	SHORT $LN2@R_UploadSt

; 202  : 	{
; 203  : 		// check the dimensions
; 204  : 		width = NearestPOW( width, true );

	push	1
	mov	eax, DWORD PTR _width$[ebp]
	push	eax
	call	_NearestPOW
	add	esp, 8
	mov	DWORD PTR _width$[ebp], eax

; 205  : 		height = NearestPOW( height, false );

	push	0
	mov	ecx, DWORD PTR _height$[ebp]
	push	ecx
	call	_NearestPOW
	add	esp, 8
	mov	DWORD PTR _height$[ebp], eax

; 206  : 	}

	jmp	SHORT $LN3@R_UploadSt
$LN2@R_UploadSt:

; 207  : 	else
; 208  : 	{
; 209  : 		width = bound( 128, width, glConfig.max_2d_texture_size );

	cmp	DWORD PTR _width$[ebp], 128		; 00000080H
	jl	SHORT $LN12@R_UploadSt
	mov	edx, DWORD PTR _width$[ebp]
	cmp	edx, DWORD PTR _glConfig+60
	jge	SHORT $LN10@R_UploadSt
	mov	eax, DWORD PTR _width$[ebp]
	mov	DWORD PTR tv75[ebp], eax
	jmp	SHORT $LN11@R_UploadSt
$LN10@R_UploadSt:
	mov	ecx, DWORD PTR _glConfig+60
	mov	DWORD PTR tv75[ebp], ecx
$LN11@R_UploadSt:
	mov	edx, DWORD PTR tv75[ebp]
	mov	DWORD PTR tv76[ebp], edx
	jmp	SHORT $LN13@R_UploadSt
$LN12@R_UploadSt:
	mov	DWORD PTR tv76[ebp], 128		; 00000080H
$LN13@R_UploadSt:
	mov	eax, DWORD PTR tv76[ebp]
	mov	DWORD PTR _width$[ebp], eax

; 210  : 		height = bound( 128, height, glConfig.max_2d_texture_size );

	cmp	DWORD PTR _height$[ebp], 128		; 00000080H
	jl	SHORT $LN16@R_UploadSt
	mov	ecx, DWORD PTR _height$[ebp]
	cmp	ecx, DWORD PTR _glConfig+60
	jge	SHORT $LN14@R_UploadSt
	mov	edx, DWORD PTR _height$[ebp]
	mov	DWORD PTR tv79[ebp], edx
	jmp	SHORT $LN15@R_UploadSt
$LN14@R_UploadSt:
	mov	eax, DWORD PTR _glConfig+60
	mov	DWORD PTR tv79[ebp], eax
$LN15@R_UploadSt:
	mov	ecx, DWORD PTR tv79[ebp]
	mov	DWORD PTR tv80[ebp], ecx
	jmp	SHORT $LN17@R_UploadSt
$LN16@R_UploadSt:
	mov	DWORD PTR tv80[ebp], 128		; 00000080H
$LN17@R_UploadSt:
	mov	edx, DWORD PTR tv80[ebp]
	mov	DWORD PTR _height$[ebp], edx
$LN3@R_UploadSt:

; 211  : 	}
; 212  : 
; 213  : 	if( cols != width || rows != height )

	mov	eax, DWORD PTR _cols$[ebp]
	cmp	eax, DWORD PTR _width$[ebp]
	jne	SHORT $LN6@R_UploadSt
	mov	ecx, DWORD PTR _rows$[ebp]
	cmp	ecx, DWORD PTR _height$[ebp]
	je	SHORT $LN4@R_UploadSt
$LN6@R_UploadSt:

; 214  : 	{
; 215  : 		raw = GL_ResampleTexture( data, cols, rows, width, height, false );

	push	0
	mov	edx, DWORD PTR _height$[ebp]
	push	edx
	mov	eax, DWORD PTR _width$[ebp]
	push	eax
	mov	ecx, DWORD PTR _rows$[ebp]
	push	ecx
	mov	edx, DWORD PTR _cols$[ebp]
	push	edx
	mov	eax, DWORD PTR _data$[ebp]
	push	eax
	call	_GL_ResampleTexture
	add	esp, 24					; 00000018H
	mov	DWORD PTR _raw$[ebp], eax

; 216  : 		cols = width;

	mov	ecx, DWORD PTR _width$[ebp]
	mov	DWORD PTR _cols$[ebp], ecx

; 217  : 		rows = height;

	mov	edx, DWORD PTR _height$[ebp]
	mov	DWORD PTR _rows$[ebp], edx

; 218  : 	}

	jmp	SHORT $LN5@R_UploadSt
$LN4@R_UploadSt:

; 219  : 	else
; 220  : 	{
; 221  : 		raw = (byte *)data;

	mov	eax, DWORD PTR _data$[ebp]
	mov	DWORD PTR _raw$[ebp], eax
$LN5@R_UploadSt:

; 222  : 	}
; 223  : 
; 224  : 	if( cols > glConfig.max_2d_texture_size )

	mov	ecx, DWORD PTR _cols$[ebp]
	cmp	ecx, DWORD PTR _glConfig+60
	jle	SHORT $LN7@R_UploadSt

; 225  : 		Host_Error( "R_UploadStretchRaw: size %i exceeds hardware limits\n", cols );

	mov	edx, DWORD PTR _cols$[ebp]
	push	edx
	push	OFFSET $SG143426
	call	_Host_Error
	add	esp, 8
$LN7@R_UploadSt:

; 226  : 	if( rows > glConfig.max_2d_texture_size )

	mov	eax, DWORD PTR _rows$[ebp]
	cmp	eax, DWORD PTR _glConfig+60
	jle	SHORT $LN8@R_UploadSt

; 227  : 		Host_Error( "R_UploadStretchRaw: size %i exceeds hardware limits\n", rows );

	mov	ecx, DWORD PTR _rows$[ebp]
	push	ecx
	push	OFFSET $SG143428
	call	_Host_Error
	add	esp, 8
$LN8@R_UploadSt:

; 228  : 
; 229  : 	tex = R_GetTexture( texture );

	mov	edx, DWORD PTR _texture$[ebp]
	push	edx
	call	_R_GetTexture
	add	esp, 4
	mov	DWORD PTR _tex$[ebp], eax

; 230  : 	GL_Bind( GL_KEEP_UNIT, texture );

	mov	eax, DWORD PTR _texture$[ebp]
	push	eax
	push	-1
	call	_GL_Bind
	add	esp, 8

; 231  : 	tex->width = cols;

	mov	ecx, DWORD PTR _tex$[ebp]
	mov	dx, WORD PTR _cols$[ebp]
	mov	WORD PTR [ecx+260], dx

; 232  : 	tex->height = rows;

	mov	eax, DWORD PTR _tex$[ebp]
	mov	cx, WORD PTR _rows$[ebp]
	mov	WORD PTR [eax+262], cx

; 233  : 
; 234  : 	pglTexImage2D( GL_TEXTURE_2D, 0, tex->format, cols, rows, 0, GL_BGRA, GL_UNSIGNED_BYTE, raw );

	mov	edx, DWORD PTR _raw$[ebp]
	push	edx
	push	5121					; 00001401H
	push	32993					; 000080e1H
	push	0
	mov	eax, DWORD PTR _rows$[ebp]
	push	eax
	mov	ecx, DWORD PTR _cols$[ebp]
	push	ecx
	mov	edx, DWORD PTR _tex$[ebp]
	mov	eax, DWORD PTR [edx+276]
	push	eax
	push	0
	push	3553					; 00000de1H
	call	DWORD PTR _pglTexImage2D

; 235  : 	GL_ApplyTextureParams( tex );

	mov	ecx, DWORD PTR _tex$[ebp]
	push	ecx
	call	_GL_ApplyTextureParams
	add	esp, 4

; 236  : }

	mov	esp, ebp
	pop	ebp
	ret	0
_R_UploadStretchRaw ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\documents\github\xashtasks\xash_build4529_src\engine\client\gl_draw.c
_TEXT	SEGMENT
_glt$ = -12						; size = 4
_tw$ = -8						; size = 4
_th$ = -4						; size = 4
_x$ = 8							; size = 4
_y$ = 12						; size = 4
_w$ = 16						; size = 4
_h$ = 20						; size = 4
_R_DrawTileClear PROC

; 95   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH

; 96   : 	float		tw, th;
; 97   : 	gl_texture_t	*glt;
; 98   : 
; 99   : 	GL_SetRenderMode( kRenderNormal );

	push	0
	call	_GL_SetRenderMode

; 100  : 	pglColor4f( 1.0f, 1.0f, 1.0f, 1.0f );

	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [esp], xmm0
	call	DWORD PTR _pglColor4f

; 101  : 	GL_Bind( GL_TEXTURE0, cls.tileImage );

	mov	eax, DWORD PTR _cls+287376
	push	eax
	push	0
	call	_GL_Bind
	add	esp, 8

; 102  : 
; 103  : 	glt = R_GetTexture( cls.tileImage );

	mov	ecx, DWORD PTR _cls+287376
	push	ecx
	call	_R_GetTexture
	add	esp, 4
	mov	DWORD PTR _glt$[ebp], eax

; 104  : 	tw = glt->srcWidth;

	mov	edx, DWORD PTR _glt$[ebp]
	movzx	eax, WORD PTR [edx+256]
	cvtsi2ss xmm0, eax
	movss	DWORD PTR _tw$[ebp], xmm0

; 105  : 	th = glt->srcHeight;

	mov	ecx, DWORD PTR _glt$[ebp]
	movzx	edx, WORD PTR [ecx+258]
	cvtsi2ss xmm0, edx
	movss	DWORD PTR _th$[ebp], xmm0

; 106  : 
; 107  : 	pglBegin( GL_QUADS );

	push	7
	call	DWORD PTR _pglBegin

; 108  : 		pglTexCoord2f( x / tw, y / th );

	cvtsi2ss xmm0, DWORD PTR _y$[ebp]
	divss	xmm0, DWORD PTR _th$[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	cvtsi2ss xmm0, DWORD PTR _x$[ebp]
	divss	xmm0, DWORD PTR _tw$[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	DWORD PTR _pglTexCoord2f

; 109  : 		pglVertex2f( x, y );

	cvtsi2ss xmm0, DWORD PTR _y$[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	cvtsi2ss xmm0, DWORD PTR _x$[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	DWORD PTR _pglVertex2f

; 110  : 		pglTexCoord2f((x + w) / tw, y / th );

	cvtsi2ss xmm0, DWORD PTR _y$[ebp]
	divss	xmm0, DWORD PTR _th$[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _x$[ebp]
	add	eax, DWORD PTR _w$[ebp]
	cvtsi2ss xmm0, eax
	divss	xmm0, DWORD PTR _tw$[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	DWORD PTR _pglTexCoord2f

; 111  : 		pglVertex2f( x + w, y );

	cvtsi2ss xmm0, DWORD PTR _y$[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _x$[ebp]
	add	ecx, DWORD PTR _w$[ebp]
	cvtsi2ss xmm0, ecx
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	DWORD PTR _pglVertex2f

; 112  : 		pglTexCoord2f((x + w) / tw, (y + h) / th );

	mov	edx, DWORD PTR _y$[ebp]
	add	edx, DWORD PTR _h$[ebp]
	cvtsi2ss xmm0, edx
	divss	xmm0, DWORD PTR _th$[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _x$[ebp]
	add	eax, DWORD PTR _w$[ebp]
	cvtsi2ss xmm0, eax
	divss	xmm0, DWORD PTR _tw$[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	DWORD PTR _pglTexCoord2f

; 113  : 		pglVertex2f( x + w, y + h );

	mov	ecx, DWORD PTR _y$[ebp]
	add	ecx, DWORD PTR _h$[ebp]
	cvtsi2ss xmm0, ecx
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _x$[ebp]
	add	edx, DWORD PTR _w$[ebp]
	cvtsi2ss xmm0, edx
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	DWORD PTR _pglVertex2f

; 114  : 		pglTexCoord2f( x / tw, (y + h) / th );

	mov	eax, DWORD PTR _y$[ebp]
	add	eax, DWORD PTR _h$[ebp]
	cvtsi2ss xmm0, eax
	divss	xmm0, DWORD PTR _th$[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	cvtsi2ss xmm0, DWORD PTR _x$[ebp]
	divss	xmm0, DWORD PTR _tw$[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	DWORD PTR _pglTexCoord2f

; 115  : 		pglVertex2f( x, y + h );

	mov	ecx, DWORD PTR _y$[ebp]
	add	ecx, DWORD PTR _h$[ebp]
	cvtsi2ss xmm0, ecx
	push	ecx
	movss	DWORD PTR [esp], xmm0
	cvtsi2ss xmm0, DWORD PTR _x$[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	DWORD PTR _pglVertex2f

; 116  : 	pglEnd ();

	call	DWORD PTR _pglEnd

; 117  : }

	mov	esp, ebp
	pop	ebp
	ret	0
_R_DrawTileClear ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\documents\github\xashtasks\xash_build4529_src\engine\client\gl_draw.c
_TEXT	SEGMENT
_enable$ = 8						; size = 4
_R_Set2DMode PROC

; 244  : {

	push	ebp
	mov	ebp, esp

; 245  : 	if( enable )

	cmp	DWORD PTR _enable$[ebp], 0
	je	$LN2@R_Set2DMod

; 246  : 	{
; 247  : 		if( glState.in2DMode )

	cmp	DWORD PTR _glState+576, 0
	je	SHORT $LN4@R_Set2DMod

; 248  : 			return;

	jmp	$LN3@R_Set2DMod
$LN4@R_Set2DMod:

; 249  : 
; 250  : 		// set 2D virtual screen size
; 251  : 		pglViewport( 0, 0, glState.width, glState.height );

	mov	eax, DWORD PTR _glState+4
	push	eax
	mov	ecx, DWORD PTR _glState
	push	ecx
	push	0
	push	0
	call	DWORD PTR _pglViewport

; 252  : 		pglMatrixMode( GL_PROJECTION );

	push	5889					; 00001701H
	call	DWORD PTR _pglMatrixMode

; 253  : 		pglLoadIdentity();

	call	DWORD PTR _pglLoadIdentity

; 254  : 		pglOrtho( 0, glState.width, glState.height, 0, -99999, 99999 );

	sub	esp, 8
	movsd	xmm0, QWORD PTR __real@40f869f000000000
	movsd	QWORD PTR [esp], xmm0
	sub	esp, 8
	movsd	xmm0, QWORD PTR __real@c0f869f000000000
	movsd	QWORD PTR [esp], xmm0
	sub	esp, 8
	xorps	xmm0, xmm0
	movsd	QWORD PTR [esp], xmm0
	cvtsi2sd xmm0, DWORD PTR _glState+4
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	cvtsi2sd xmm0, DWORD PTR _glState
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	sub	esp, 8
	xorps	xmm0, xmm0
	movsd	QWORD PTR [esp], xmm0
	call	DWORD PTR _pglOrtho

; 255  : 		pglMatrixMode( GL_MODELVIEW );

	push	5888					; 00001700H
	call	DWORD PTR _pglMatrixMode

; 256  : 		pglLoadIdentity();

	call	DWORD PTR _pglLoadIdentity

; 257  : 
; 258  : 		GL_Cull( GL_NONE );

	push	0
	call	_GL_Cull
	add	esp, 4

; 259  : 
; 260  : 		pglDepthMask( GL_FALSE );

	push	0
	call	DWORD PTR _pglDepthMask

; 261  : 		pglDisable( GL_DEPTH_TEST );

	push	2929					; 00000b71H
	call	DWORD PTR _pglDisable

; 262  : 		pglEnable( GL_ALPHA_TEST );

	push	3008					; 00000bc0H
	call	DWORD PTR _pglEnable

; 263  : 		pglColor4f( 1.0f, 1.0f, 1.0f, 1.0f );

	push	ecx
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [esp], xmm0
	call	DWORD PTR _pglColor4f

; 264  : 
; 265  : 		glState.in2DMode = true;

	mov	DWORD PTR _glState+576, 1

; 266  : 		RI.currententity = NULL;

	mov	DWORD PTR _RI+28, 0

; 267  : 		RI.currentmodel = NULL;

	mov	DWORD PTR _RI+32, 0

; 268  : 	}

	jmp	SHORT $LN3@R_Set2DMod
$LN2@R_Set2DMod:

; 269  : 	else
; 270  : 	{
; 271  : 		pglDepthMask( GL_TRUE );

	push	1
	call	DWORD PTR _pglDepthMask

; 272  : 		pglEnable( GL_DEPTH_TEST );

	push	2929					; 00000b71H
	call	DWORD PTR _pglEnable

; 273  : 		glState.in2DMode = false;

	mov	DWORD PTR _glState+576, 0

; 274  : 
; 275  : 		pglMatrixMode( GL_PROJECTION );

	push	5889					; 00001701H
	call	DWORD PTR _pglMatrixMode

; 276  : 		GL_LoadMatrix( RI.projectionMatrix );

	push	OFFSET _RI+648
	call	_GL_LoadMatrix
	add	esp, 4

; 277  : 
; 278  : 		pglMatrixMode( GL_MODELVIEW );

	push	5888					; 00001700H
	call	DWORD PTR _pglMatrixMode

; 279  : 		GL_LoadMatrix( RI.worldviewMatrix );

	push	OFFSET _RI+520
	call	_GL_LoadMatrix
	add	esp, 4

; 280  : 
; 281  : 		GL_Cull( GL_FRONT );

	push	1028					; 00000404H
	call	_GL_Cull
	add	esp, 4
$LN3@R_Set2DMod:

; 282  : 	}
; 283  : }

	pop	ebp
	ret	0
_R_Set2DMode ENDP
_TEXT	ENDS
END
