; Listing generated by Microsoft (R) Optimizing Compiler Version 19.16.27045.0 

	TITLE	C:\Users\USER\Downloads\xash_build4529_src\engine\common\custom.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	_COM_ClearCustomizationList
PUBLIC	_COM_CreateCustomization
PUBLIC	_COM_SizeofResourceList
PUBLIC	_CustomDecal_Validate
EXTRN	_memset:PROC
EXTRN	__Mem_Alloc:PROC
EXTRN	__Mem_Free:PROC
EXTRN	_FS_LoadFile:PROC
EXTRN	_FS_LoadImage:PROC
EXTRN	_FS_FreeImage:PROC
EXTRN	_CL_Active:PROC
EXTRN	_HPAK_GetDataPointer:PROC
EXTRN	_R_DecalRemoveAll:PROC
EXTRN	_host:BYTE
_DATA	SEGMENT
$SG129754 DB	'#logo.bmp', 00H
	ORG $+6
$SG129769 DB	'c:\users\user\downloads\xash_build4529_src\engine\common'
	DB	'\custom.c', 00H
	ORG $+6
$SG129773 DB	'c:\users\user\downloads\xash_build4529_src\engine\common'
	DB	'\custom.c', 00H
	ORG $+6
$SG129797 DB	'c:\users\user\downloads\xash_build4529_src\engine\common'
	DB	'\custom.c', 00H
	ORG $+2
$SG129802 DB	'custom.hpk', 00H
	ORG $+1
$SG129811 DB	'#logo.bmp', 00H
	ORG $+6
$SG129815 DB	'c:\users\user\downloads\xash_build4529_src\engine\common'
	DB	'\custom.c', 00H
	ORG $+6
$SG129817 DB	'c:\users\user\downloads\xash_build4529_src\engine\common'
	DB	'\custom.c', 00H
	ORG $+6
$SG129818 DB	'c:\users\user\downloads\xash_build4529_src\engine\common'
	DB	'\custom.c', 00H
_DATA	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xash_build4529_src\engine\common\custom.c
_TEXT	SEGMENT
_test$ = -4						; size = 4
_raw$ = 8						; size = 4
_nFileSize$ = 12					; size = 4
_CustomDecal_Validate PROC

; 20   : {

	push	ebp
	mov	ebp, esp
	push	ecx

; 21   : 	rgbdata_t	*test = FS_LoadImage( "#logo.bmp", raw, nFileSize );

	mov	eax, DWORD PTR _nFileSize$[ebp]
	push	eax
	mov	ecx, DWORD PTR _raw$[ebp]
	push	ecx
	push	OFFSET $SG129754
	call	_FS_LoadImage
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _test$[ebp], eax

; 22   : 
; 23   : 	if( test )

	cmp	DWORD PTR _test$[ebp], 0
	je	SHORT $LN2@CustomDeca

; 24   : 	{
; 25   : 		// all's ok, logo is valid
; 26   : 		FS_FreeImage( test );

	mov	edx, DWORD PTR _test$[ebp]
	push	edx
	call	_FS_FreeImage
	add	esp, 4

; 27   : 		return true;

	mov	eax, 1
	jmp	SHORT $LN1@CustomDeca
$LN2@CustomDeca:

; 28   : 	}
; 29   : 
; 30   : 	return false;

	xor	eax, eax
$LN1@CustomDeca:

; 31   : }

	mov	esp, ebp
	pop	ebp
	ret	0
_CustomDecal_Validate ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xash_build4529_src\engine\common\custom.c
_TEXT	SEGMENT
_nSize$ = -8						; size = 4
_p$ = -4						; size = 4
_pList$ = 8						; size = 4
_ri$ = 12						; size = 4
_COM_SizeofResourceList PROC

; 134  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 135  : 	int		nSize = 0;

	mov	DWORD PTR _nSize$[ebp], 0

; 136  : 	resource_t	*p;
; 137  : 
; 138  : 	memset( ri, 0, sizeof( *ri ));

	push	32					; 00000020H
	push	0
	mov	eax, DWORD PTR _ri$[ebp]
	push	eax
	call	_memset
	add	esp, 12					; 0000000cH

; 139  : 
; 140  : 	for( p = pList->pNext; p != pList; p = p->pNext )

	mov	ecx, DWORD PTR _pList$[ebp]
	mov	edx, DWORD PTR [ecx+128]
	mov	DWORD PTR _p$[ebp], edx
	jmp	SHORT $LN4@COM_Sizeof
$LN2@COM_Sizeof:
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax+128]
	mov	DWORD PTR _p$[ebp], ecx
$LN4@COM_Sizeof:
	mov	edx, DWORD PTR _p$[ebp]
	cmp	edx, DWORD PTR _pList$[ebp]
	je	SHORT $LN3@COM_Sizeof

; 141  : 	{
; 142  : 		nSize += p->nDownloadSize;

	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR _nSize$[ebp]
	add	ecx, DWORD PTR [eax+72]
	mov	DWORD PTR _nSize$[ebp], ecx

; 143  : 
; 144  : 		if( p->type == t_model && p->nIndex == 1 )

	mov	edx, DWORD PTR _p$[ebp]
	cmp	DWORD PTR [edx+64], 2
	jne	SHORT $LN5@COM_Sizeof
	mov	eax, DWORD PTR _p$[ebp]
	cmp	DWORD PTR [eax+68], 1
	jne	SHORT $LN5@COM_Sizeof

; 145  : 			ri->info[t_world].size += p->nDownloadSize;

	mov	ecx, 4
	imul	edx, ecx, 6
	mov	eax, DWORD PTR _ri$[ebp]
	mov	ecx, DWORD PTR [eax+edx]
	mov	edx, DWORD PTR _p$[ebp]
	add	ecx, DWORD PTR [edx+72]
	mov	eax, 4
	imul	edx, eax, 6
	mov	eax, DWORD PTR _ri$[ebp]
	mov	DWORD PTR [eax+edx], ecx
	jmp	SHORT $LN6@COM_Sizeof
$LN5@COM_Sizeof:

; 146  : 		else ri->info[p->type].size += p->nDownloadSize;

	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR [ecx+64]
	mov	eax, DWORD PTR _ri$[ebp]
	mov	ecx, DWORD PTR [eax+edx*4]
	mov	edx, DWORD PTR _p$[ebp]
	add	ecx, DWORD PTR [edx+72]
	mov	eax, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR [eax+64]
	mov	eax, DWORD PTR _ri$[ebp]
	mov	DWORD PTR [eax+edx*4], ecx
$LN6@COM_Sizeof:

; 147  : 	}

	jmp	SHORT $LN2@COM_Sizeof
$LN3@COM_Sizeof:

; 148  : 
; 149  : 	return nSize;

	mov	eax, DWORD PTR _nSize$[ebp]

; 150  : }

	mov	esp, ebp
	pop	ebp
	ret	0
_COM_SizeofResourceList ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xash_build4529_src\engine\common\custom.c
_TEXT	SEGMENT
_checksize$ = -12					; size = 4
_bError$ = -8						; size = 4
_pCust$ = -4						; size = 4
_pListHead$ = 8						; size = 4
_pResource$ = 12					; size = 4
_playernumber$ = 16					; size = 4
_flags$ = 20						; size = 4
_pOut$ = 24						; size = 4
_nLumps$ = 28						; size = 4
_COM_CreateCustomization PROC

; 62   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	push	esi
	push	edi

; 63   : 	qboolean		bError = false;

	mov	DWORD PTR _bError$[ebp], 0

; 64   : 	int		checksize = 0;

	mov	DWORD PTR _checksize$[ebp], 0

; 65   : 	customization_t	*pCust;
; 66   : 
; 67   : 	if( pOut ) *pOut = NULL;

	cmp	DWORD PTR _pOut$[ebp], 0
	je	SHORT $LN2@COM_Create
	mov	eax, DWORD PTR _pOut$[ebp]
	mov	DWORD PTR [eax], 0
$LN2@COM_Create:

; 68   : 
; 69   : 	pCust = Z_Calloc( sizeof( customization_t ));

	push	69					; 00000045H
	push	OFFSET $SG129797
	push	1
	push	164					; 000000a4H
	mov	ecx, DWORD PTR _host+236
	push	ecx
	call	__Mem_Alloc
	add	esp, 20					; 00000014H
	mov	DWORD PTR _pCust$[ebp], eax

; 70   : 	pCust->resource = *pResource;

	mov	edi, DWORD PTR _pCust$[ebp]
	add	edi, 4
	mov	ecx, 34					; 00000022H
	mov	esi, DWORD PTR _pResource$[ebp]
	rep movsd

; 71   : 
; 72   : 	if( pResource->nDownloadSize <= 0 )

	mov	edx, DWORD PTR _pResource$[ebp]
	cmp	DWORD PTR [edx+72], 0
	jg	SHORT $LN3@COM_Create

; 73   : 		goto CustomizationError;

	jmp	$CustomizationError$20
$LN3@COM_Create:

; 74   : 
; 75   : 	pCust->bInUse = true;

	mov	eax, DWORD PTR _pCust$[ebp]
	mov	DWORD PTR [eax], 1

; 76   : 
; 77   : 	if( FBitSet( flags, FCUST_FROMHPAK ))

	mov	ecx, DWORD PTR _flags$[ebp]
	and	ecx, 1
	je	SHORT $LN4@COM_Create

; 78   : 	{
; 79   : 		if( !HPAK_GetDataPointer( CUSTOM_RES_PATH, pResource, (byte **)&pCust->pBuffer, NULL ))

	push	0
	mov	edx, DWORD PTR _pCust$[ebp]
	add	edx, 156				; 0000009cH
	push	edx
	mov	eax, DWORD PTR _pResource$[ebp]
	push	eax
	push	OFFSET $SG129802
	call	_HPAK_GetDataPointer
	add	esp, 16					; 00000010H
	test	eax, eax
	jne	SHORT $LN6@COM_Create

; 80   : 			bError = true;

	mov	DWORD PTR _bError$[ebp], 1
$LN6@COM_Create:

; 81   : 	}

	jmp	SHORT $LN5@COM_Create
$LN4@COM_Create:

; 82   : 	else
; 83   : 	{
; 84   : 
; 85   : 		pCust->pBuffer = FS_LoadFile( pResource->szFileName, &checksize, true );

	push	1
	lea	ecx, DWORD PTR _checksize$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pResource$[ebp]
	push	edx
	call	_FS_LoadFile
	add	esp, 12					; 0000000cH
	mov	ecx, DWORD PTR _pCust$[ebp]
	mov	DWORD PTR [ecx+156], eax

; 86   : 		if( checksize != pCust->resource.nDownloadSize )

	mov	edx, DWORD PTR _pCust$[ebp]
	mov	eax, DWORD PTR _checksize$[ebp]
	cmp	eax, DWORD PTR [edx+76]
	je	SHORT $LN5@COM_Create

; 87   : 			bError = true;

	mov	DWORD PTR _bError$[ebp], 1
$LN5@COM_Create:

; 88   : 	}
; 89   : 
; 90   : 	if( bError )

	cmp	DWORD PTR _bError$[ebp], 0
	je	SHORT $LN8@COM_Create

; 91   : 		goto CustomizationError;

	jmp	$CustomizationError$20
$LN8@COM_Create:

; 92   : 
; 93   : 	if( FBitSet( pCust->resource.ucFlags, RES_CUSTOM ) && pCust->resource.type == t_decal )

	mov	ecx, DWORD PTR _pCust$[ebp]
	movzx	edx, BYTE PTR [ecx+80]
	and	edx, 4
	je	$LN9@COM_Create
	mov	eax, DWORD PTR _pCust$[ebp]
	cmp	DWORD PTR [eax+68], 3
	jne	$LN9@COM_Create

; 94   : 	{
; 95   : 		pCust->resource.playernum = playernumber;

	mov	ecx, DWORD PTR _pCust$[ebp]
	mov	dl, BYTE PTR _playernumber$[ebp]
	mov	BYTE PTR [ecx+97], dl

; 96   : 
; 97   : 		if( CustomDecal_Validate( pCust->pBuffer, pResource->nDownloadSize ))

	mov	eax, DWORD PTR _pResource$[ebp]
	mov	ecx, DWORD PTR [eax+72]
	push	ecx
	mov	edx, DWORD PTR _pCust$[ebp]
	mov	eax, DWORD PTR [edx+156]
	push	eax
	call	_CustomDecal_Validate
	add	esp, 8
	test	eax, eax
	je	$LN9@COM_Create

; 98   : 		{
; 99   : 			if( !FBitSet( flags, FCUST_IGNOREINIT ))

	mov	ecx, DWORD PTR _flags$[ebp]
	and	ecx, 4
	jne	$LN9@COM_Create

; 100  : 			{
; 101  : 				if( pResource->nDownloadSize >= (1 * 1024) && pResource->nDownloadSize <= ( 16 * 1024 ))

	mov	edx, DWORD PTR _pResource$[ebp]
	cmp	DWORD PTR [edx+72], 1024		; 00000400H
	jl	$LN9@COM_Create
	mov	eax, DWORD PTR _pResource$[ebp]
	cmp	DWORD PTR [eax+72], 16384		; 00004000H
	jg	SHORT $LN9@COM_Create

; 102  : 				{
; 103  : 					pCust->bTranslated = true;

	mov	ecx, DWORD PTR _pCust$[ebp]
	mov	DWORD PTR [ecx+140], 1

; 104  : 					pCust->nUserData1 = 0;

	mov	edx, DWORD PTR _pCust$[ebp]
	mov	DWORD PTR [edx+144], 0

; 105  : 					pCust->nUserData2 = 1;

	mov	eax, DWORD PTR _pCust$[ebp]
	mov	DWORD PTR [eax+148], 1

; 106  : 
; 107  : 					if( !FBitSet( flags, FCUST_WIPEDATA ))

	mov	ecx, DWORD PTR _flags$[ebp]
	and	ecx, 2
	jne	SHORT $LN13@COM_Create

; 108  : 						pCust->pInfo = FS_LoadImage( "#logo.bmp", pCust->pBuffer, pCust->resource.nDownloadSize );

	mov	edx, DWORD PTR _pCust$[ebp]
	mov	eax, DWORD PTR [edx+76]
	push	eax
	mov	ecx, DWORD PTR _pCust$[ebp]
	mov	edx, DWORD PTR [ecx+156]
	push	edx
	push	OFFSET $SG129811
	call	_FS_LoadImage
	add	esp, 12					; 0000000cH
	mov	ecx, DWORD PTR _pCust$[ebp]
	mov	DWORD PTR [ecx+152], eax
	jmp	SHORT $LN14@COM_Create
$LN13@COM_Create:

; 109  : 					else pCust->pInfo = NULL;

	mov	edx, DWORD PTR _pCust$[ebp]
	mov	DWORD PTR [edx+152], 0
$LN14@COM_Create:

; 110  : 					if( nLumps ) *nLumps = 1;

	cmp	DWORD PTR _nLumps$[ebp], 0
	je	SHORT $LN9@COM_Create
	mov	eax, DWORD PTR _nLumps$[ebp]
	mov	DWORD PTR [eax], 1
$LN9@COM_Create:

; 111  : 				}
; 112  : 			}
; 113  : 		}
; 114  : 	}
; 115  : 
; 116  : 	if( pOut ) *pOut = pCust;

	cmp	DWORD PTR _pOut$[ebp], 0
	je	SHORT $LN16@COM_Create
	mov	ecx, DWORD PTR _pOut$[ebp]
	mov	edx, DWORD PTR _pCust$[ebp]
	mov	DWORD PTR [ecx], edx
$LN16@COM_Create:

; 117  : 	pCust->pNext = pListHead->pNext;

	mov	eax, DWORD PTR _pCust$[ebp]
	mov	ecx, DWORD PTR _pListHead$[ebp]
	mov	edx, DWORD PTR [ecx+160]
	mov	DWORD PTR [eax+160], edx

; 118  : 	pListHead->pNext = pCust;

	mov	eax, DWORD PTR _pListHead$[ebp]
	mov	ecx, DWORD PTR _pCust$[ebp]
	mov	DWORD PTR [eax+160], ecx

; 119  : 
; 120  : 	return true;

	mov	eax, 1
	jmp	SHORT $LN1@COM_Create
$CustomizationError$20:

; 121  : 
; 122  : CustomizationError:
; 123  : 	if( pCust->pBuffer )

	mov	edx, DWORD PTR _pCust$[ebp]
	cmp	DWORD PTR [edx+156], 0
	je	SHORT $LN17@COM_Create

; 124  : 		Mem_Free( pCust->pBuffer );

	push	124					; 0000007cH
	push	OFFSET $SG129815
	mov	eax, DWORD PTR _pCust$[ebp]
	mov	ecx, DWORD PTR [eax+156]
	push	ecx
	call	__Mem_Free
	add	esp, 12					; 0000000cH
$LN17@COM_Create:

; 125  : 
; 126  : 	if( pCust->pInfo )

	mov	edx, DWORD PTR _pCust$[ebp]
	cmp	DWORD PTR [edx+152], 0
	je	SHORT $LN18@COM_Create

; 127  : 		Mem_Free( pCust->pInfo );

	push	127					; 0000007fH
	push	OFFSET $SG129817
	mov	eax, DWORD PTR _pCust$[ebp]
	mov	ecx, DWORD PTR [eax+152]
	push	ecx
	call	__Mem_Free
	add	esp, 12					; 0000000cH
$LN18@COM_Create:

; 128  : 	Mem_Free( pCust );

	push	128					; 00000080H
	push	OFFSET $SG129818
	mov	edx, DWORD PTR _pCust$[ebp]
	push	edx
	call	__Mem_Free
	add	esp, 12					; 0000000cH

; 129  : 
; 130  : 	return false;

	xor	eax, eax
$LN1@COM_Create:

; 131  : }

	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	0
_COM_CreateCustomization ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xash_build4529_src\engine\common\custom.c
_TEXT	SEGMENT
_pNext$ = -8						; size = 4
_pCurrent$ = -4						; size = 4
_pHead$ = 8						; size = 4
_bCleanDecals$ = 12					; size = 4
_COM_ClearCustomizationList PROC

; 34   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 35   : 	customization_t	*pCurrent;
; 36   : 	customization_t	*pNext;
; 37   : 
; 38   : 	for( pCurrent = pHead->pNext; pCurrent != NULL; pCurrent = pNext )

	mov	eax, DWORD PTR _pHead$[ebp]
	mov	ecx, DWORD PTR [eax+160]
	mov	DWORD PTR _pCurrent$[ebp], ecx
	jmp	SHORT $LN4@COM_ClearC
$LN2@COM_ClearC:
	mov	edx, DWORD PTR _pNext$[ebp]
	mov	DWORD PTR _pCurrent$[ebp], edx
$LN4@COM_ClearC:
	cmp	DWORD PTR _pCurrent$[ebp], 0
	je	$LN3@COM_ClearC

; 39   : 	{
; 40   : 		pNext = pCurrent->pNext;

	mov	eax, DWORD PTR _pCurrent$[ebp]
	mov	ecx, DWORD PTR [eax+160]
	mov	DWORD PTR _pNext$[ebp], ecx

; 41   : 
; 42   : 		if( pCurrent->bInUse && pCurrent->pBuffer )

	mov	edx, DWORD PTR _pCurrent$[ebp]
	cmp	DWORD PTR [edx], 0
	je	SHORT $LN5@COM_ClearC
	mov	eax, DWORD PTR _pCurrent$[ebp]
	cmp	DWORD PTR [eax+156], 0
	je	SHORT $LN5@COM_ClearC

; 43   : 			Mem_Free( pCurrent->pBuffer );

	push	43					; 0000002bH
	push	OFFSET $SG129769
	mov	ecx, DWORD PTR _pCurrent$[ebp]
	mov	edx, DWORD PTR [ecx+156]
	push	edx
	call	__Mem_Free
	add	esp, 12					; 0000000cH
$LN5@COM_ClearC:

; 44   : 
; 45   : 		if( pCurrent->bInUse && pCurrent->pInfo )

	mov	eax, DWORD PTR _pCurrent$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN6@COM_ClearC
	mov	ecx, DWORD PTR _pCurrent$[ebp]
	cmp	DWORD PTR [ecx+152], 0
	je	SHORT $LN6@COM_ClearC

; 46   : 		{
; 47   : 			if( pCurrent->resource.type == t_decal )

	mov	edx, DWORD PTR _pCurrent$[ebp]
	cmp	DWORD PTR [edx+68], 3
	jne	SHORT $LN7@COM_ClearC

; 48   : 			{
; 49   : 				if( bCleanDecals && CL_Active( ))

	cmp	DWORD PTR _bCleanDecals$[ebp], 0
	je	SHORT $LN7@COM_ClearC
	call	_CL_Active
	test	eax, eax
	je	SHORT $LN7@COM_ClearC

; 50   : 					R_DecalRemoveAll( pCurrent->nUserData1 );

	mov	eax, DWORD PTR _pCurrent$[ebp]
	mov	ecx, DWORD PTR [eax+144]
	push	ecx
	call	_R_DecalRemoveAll
	add	esp, 4
$LN7@COM_ClearC:

; 51   : 			}
; 52   : 
; 53   : 			FS_FreeImage( pCurrent->pInfo );

	mov	edx, DWORD PTR _pCurrent$[ebp]
	mov	eax, DWORD PTR [edx+152]
	push	eax
	call	_FS_FreeImage
	add	esp, 4
$LN6@COM_ClearC:

; 54   : 		}
; 55   : 		Mem_Free( pCurrent );

	push	55					; 00000037H
	push	OFFSET $SG129773
	mov	ecx, DWORD PTR _pCurrent$[ebp]
	push	ecx
	call	__Mem_Free
	add	esp, 12					; 0000000cH

; 56   : 	}

	jmp	$LN2@COM_ClearC
$LN3@COM_ClearC:

; 57   : 
; 58   : 	pHead->pNext = NULL;

	mov	edx, DWORD PTR _pHead$[ebp]
	mov	DWORD PTR [edx+160], 0

; 59   : }

	mov	esp, ebp
	pop	ebp
	ret	0
_COM_ClearCustomizationList ENDP
_TEXT	ENDS
END
