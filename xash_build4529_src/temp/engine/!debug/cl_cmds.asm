; Listing generated by Microsoft (R) Optimizing Compiler Version 19.16.27045.0 

	TITLE	C:\Users\USER\Downloads\xash_build4529_src\engine\client\cl_cmds.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

_DATA	SEGMENT
COMM	_pglColor4f:DWORD
COMM	_pglColor4fv:DWORD
COMM	_pglColor4i:DWORD
COMM	_pglColor4iv:DWORD
COMM	_pglColor4s:DWORD
COMM	_pglColor4sv:DWORD
COMM	_pglColor4ub:DWORD
COMM	_pglColor4ubv:DWORD
COMM	_pglColor4ui:DWORD
COMM	_pglColor4uiv:DWORD
COMM	_pglColor4us:DWORD
COMM	_pglColor4usv:DWORD
COMM	_pglColorMask:DWORD
COMM	_pglColorMaterial:DWORD
COMM	_pglColorPointer:DWORD
COMM	_pglCopyPixels:DWORD
COMM	_pglCopyTexImage1D:DWORD
COMM	_pglCopyTexImage2D:DWORD
COMM	_pglCopyTexSubImage1D:DWORD
COMM	_pglCopyTexSubImage2D:DWORD
COMM	_pglCullFace:DWORD
COMM	_pglDeleteLists:DWORD
COMM	_pglDeleteTextures:DWORD
COMM	_pglDepthFunc:DWORD
COMM	_pglDepthMask:DWORD
COMM	_pglDepthRange:DWORD
COMM	_pglDisable:DWORD
COMM	_pglDisableClientState:DWORD
COMM	_pglDrawArrays:DWORD
COMM	_pglDrawBuffer:DWORD
COMM	_pglDrawElements:DWORD
COMM	_pglDrawPixels:DWORD
COMM	_pglEdgeFlag:DWORD
COMM	_pglEdgeFlagPointer:DWORD
COMM	_pglEdgeFlagv:DWORD
COMM	_pglEnable:DWORD
COMM	_pglEnableClientState:DWORD
COMM	_pglEnd:DWORD
COMM	_pglEndList:DWORD
COMM	_pglEvalCoord1d:DWORD
COMM	_pglEvalCoord1dv:DWORD
COMM	_pglEvalCoord1f:DWORD
COMM	_pglEvalCoord1fv:DWORD
COMM	_pglEvalCoord2d:DWORD
COMM	_pglEvalCoord2dv:DWORD
COMM	_pglEvalCoord2f:DWORD
COMM	_pglEvalCoord2fv:DWORD
COMM	_pglEvalMesh1:DWORD
COMM	_pglEvalMesh2:DWORD
COMM	_pglEvalPoint1:DWORD
COMM	_pglEvalPoint2:DWORD
COMM	_pglFeedbackBuffer:DWORD
COMM	_pglFinish:DWORD
COMM	_pglFlush:DWORD
COMM	_pglFogf:DWORD
COMM	_pglFogfv:DWORD
COMM	_pglFogi:DWORD
COMM	_pglFogiv:DWORD
COMM	_pglFrontFace:DWORD
COMM	_pglFrustum:DWORD
COMM	_pglGenTextures:DWORD
COMM	_pglGetBooleanv:DWORD
COMM	_pglGetClipPlane:DWORD
COMM	_pglGetDoublev:DWORD
COMM	_pglGetFloatv:DWORD
COMM	_pglGetIntegerv:DWORD
COMM	_pglGetLightfv:DWORD
COMM	_pglGetLightiv:DWORD
COMM	_pglGetMapdv:DWORD
COMM	_pglGetMapfv:DWORD
COMM	_pglGetMapiv:DWORD
COMM	_pglGetMaterialfv:DWORD
COMM	_pglGetMaterialiv:DWORD
COMM	_pglGetPixelMapfv:DWORD
COMM	_pglGetPixelMapuiv:DWORD
COMM	_pglGetPixelMapusv:DWORD
COMM	_pglGetPointerv:DWORD
COMM	_pglGetPolygonStipple:DWORD
COMM	_pglGetTexEnvfv:DWORD
COMM	_pglGetTexEnviv:DWORD
COMM	_pglGetTexGendv:DWORD
COMM	_pglGetTexGenfv:DWORD
COMM	_pglGetTexGeniv:DWORD
COMM	_pglGetTexImage:DWORD
COMM	_pglGetTexLevelParameterfv:DWORD
COMM	_pglGetTexLevelParameteriv:DWORD
COMM	_pglGetTexParameterfv:DWORD
COMM	_pglGetTexParameteriv:DWORD
COMM	_pglHint:DWORD
COMM	_pglIndexMask:DWORD
COMM	_pglIndexPointer:DWORD
COMM	_pglIndexd:DWORD
COMM	_pglIndexdv:DWORD
COMM	_pglIndexf:DWORD
COMM	_pglIndexfv:DWORD
COMM	_pglIndexi:DWORD
COMM	_pglIndexiv:DWORD
COMM	_pglIndexs:DWORD
COMM	_pglIndexsv:DWORD
COMM	_pglIndexub:DWORD
COMM	_pglIndexubv:DWORD
COMM	_pglInitNames:DWORD
COMM	_pglInterleavedArrays:DWORD
COMM	_pglLightModelf:DWORD
COMM	_pglLightModelfv:DWORD
COMM	_pglLightModeli:DWORD
COMM	_pglLightModeliv:DWORD
COMM	_pglLightf:DWORD
COMM	_pglLightfv:DWORD
COMM	_pglLighti:DWORD
COMM	_pglLightiv:DWORD
COMM	_pglLineStipple:DWORD
COMM	_pglLineWidth:DWORD
COMM	_pglListBase:DWORD
COMM	_pglLoadIdentity:DWORD
COMM	_pglLoadMatrixd:DWORD
COMM	_pglLoadMatrixf:DWORD
COMM	_pglLoadName:DWORD
COMM	_pglLogicOp:DWORD
COMM	_pglMap1d:DWORD
COMM	_pglMap1f:DWORD
COMM	_pglMap2d:DWORD
COMM	_pglMap2f:DWORD
COMM	_pglMapGrid1d:DWORD
COMM	_pglMapGrid1f:DWORD
COMM	_pglMapGrid2d:DWORD
COMM	_pglMapGrid2f:DWORD
COMM	_pglMaterialf:DWORD
COMM	_pglMaterialfv:DWORD
COMM	_pglMateriali:DWORD
COMM	_pglMaterialiv:DWORD
COMM	_pglMatrixMode:DWORD
COMM	_pglMultMatrixd:DWORD
COMM	_pglMultMatrixf:DWORD
COMM	_pglNewList:DWORD
COMM	_pglNormal3b:DWORD
COMM	_pglNormal3bv:DWORD
COMM	_pglNormal3d:DWORD
COMM	_pglNormal3dv:DWORD
COMM	_pglNormal3f:DWORD
COMM	_pglNormal3fv:DWORD
COMM	_pglNormal3i:DWORD
COMM	_pglNormal3iv:DWORD
COMM	_pglNormal3s:DWORD
COMM	_pglNormal3sv:DWORD
COMM	_pglNormalPointer:DWORD
COMM	_pglOrtho:DWORD
COMM	_pglPassThrough:DWORD
COMM	_pglPixelMapfv:DWORD
COMM	_pglPixelMapuiv:DWORD
COMM	_pglPixelMapusv:DWORD
COMM	_pglPixelStoref:DWORD
COMM	_pglPixelStorei:DWORD
COMM	_pglPixelTransferf:DWORD
COMM	_pglPixelTransferi:DWORD
COMM	_pglPixelZoom:DWORD
COMM	_pglPointSize:DWORD
COMM	_pglPolygonMode:DWORD
COMM	_pglPolygonOffset:DWORD
COMM	_pglPolygonStipple:DWORD
COMM	_pglPopAttrib:DWORD
COMM	_pglPopClientAttrib:DWORD
COMM	_pglPopMatrix:DWORD
COMM	_pglPopName:DWORD
COMM	_pglPushAttrib:DWORD
COMM	_pglPushClientAttrib:DWORD
COMM	_pglPushMatrix:DWORD
COMM	_pglPushName:DWORD
COMM	_pglRasterPos2d:DWORD
COMM	_pglRasterPos2dv:DWORD
COMM	_pglRasterPos2f:DWORD
COMM	_pglRasterPos2fv:DWORD
COMM	_pglRasterPos2i:DWORD
COMM	_pglRasterPos2iv:DWORD
COMM	_pglRasterPos2s:DWORD
COMM	_pglRasterPos2sv:DWORD
COMM	_pglRasterPos3d:DWORD
COMM	_pglRasterPos3dv:DWORD
COMM	_pglRasterPos3f:DWORD
COMM	_pglRasterPos3fv:DWORD
COMM	_pglRasterPos3i:DWORD
COMM	_pglRasterPos3iv:DWORD
COMM	_pglRasterPos3s:DWORD
COMM	_pglRasterPos3sv:DWORD
COMM	_pglRasterPos4d:DWORD
COMM	_pglRasterPos4dv:DWORD
COMM	_pglRasterPos4f:DWORD
COMM	_pglRasterPos4fv:DWORD
COMM	_pglRasterPos4i:DWORD
COMM	_pglRasterPos4iv:DWORD
COMM	_pglRasterPos4s:DWORD
COMM	_pglRasterPos4sv:DWORD
COMM	_pglReadBuffer:DWORD
COMM	_pglReadPixels:DWORD
COMM	_pglRectd:DWORD
COMM	_pglRectdv:DWORD
COMM	_pglRectf:DWORD
COMM	_pglRectfv:DWORD
COMM	_pglRecti:DWORD
COMM	_pglRectiv:DWORD
COMM	_pglRects:DWORD
COMM	_pglRectsv:DWORD
COMM	_pglRotated:DWORD
COMM	_pglRotatef:DWORD
COMM	_pglScaled:DWORD
COMM	_pglScalef:DWORD
COMM	_pglScissor:DWORD
COMM	_pglSelectBuffer:DWORD
COMM	_pglShadeModel:DWORD
COMM	_pglStencilFunc:DWORD
COMM	_pglStencilMask:DWORD
COMM	_pglStencilOp:DWORD
COMM	_pglTexCoord1d:DWORD
COMM	_pglTexCoord1dv:DWORD
COMM	_pglTexCoord1f:DWORD
COMM	_pglTexCoord1fv:DWORD
COMM	_pglTexCoord1i:DWORD
COMM	_pglTexCoord1iv:DWORD
COMM	_pglTexCoord1s:DWORD
COMM	_pglTexCoord1sv:DWORD
COMM	_pglTexCoord2d:DWORD
COMM	_pglTexCoord2dv:DWORD
COMM	_pglTexCoord2f:DWORD
COMM	_pglTexCoord2fv:DWORD
COMM	_pglTexCoord2i:DWORD
COMM	_pglTexCoord2iv:DWORD
COMM	_pglTexCoord2s:DWORD
COMM	_pglTexCoord2sv:DWORD
COMM	_pglTexCoord3d:DWORD
COMM	_pglTexCoord3dv:DWORD
COMM	_pglTexCoord3f:DWORD
COMM	_pglTexCoord3fv:DWORD
COMM	_pglTexCoord3i:DWORD
COMM	_pglTexCoord3iv:DWORD
COMM	_pglTexCoord3s:DWORD
COMM	_pglTexCoord3sv:DWORD
COMM	_pglTexCoord4d:DWORD
COMM	_pglTexCoord4dv:DWORD
COMM	_pglTexCoord4f:DWORD
COMM	_pglTexCoord4fv:DWORD
COMM	_pglTexCoord4i:DWORD
COMM	_pglTexCoord4iv:DWORD
COMM	_pglTexCoord4s:DWORD
COMM	_pglTexCoord4sv:DWORD
COMM	_pglTexCoordPointer:DWORD
COMM	_pglTexEnvf:DWORD
COMM	_pglTexEnvfv:DWORD
COMM	_pglTexEnvi:DWORD
COMM	_pglTexEnviv:DWORD
COMM	_pglTexGend:DWORD
COMM	_pglTexGendv:DWORD
COMM	_pglTexGenf:DWORD
COMM	_pglTexGenfv:DWORD
COMM	_pglTexGeni:DWORD
COMM	_pglTexGeniv:DWORD
COMM	_pglTexImage1D:DWORD
COMM	_pglTexImage2D:DWORD
COMM	_pglTexParameterf:DWORD
COMM	_pglTexParameterfv:DWORD
COMM	_pglTexParameteri:DWORD
COMM	_pglTexParameteriv:DWORD
COMM	_pglTexSubImage1D:DWORD
COMM	_pglTexSubImage2D:DWORD
COMM	_pglTranslated:DWORD
COMM	_pglTranslatef:DWORD
COMM	_pglVertex2d:DWORD
COMM	_pglVertex2dv:DWORD
COMM	_pglVertex2f:DWORD
COMM	_pglVertex2fv:DWORD
COMM	_pglVertex2i:DWORD
COMM	_pglVertex2iv:DWORD
COMM	_pglVertex2s:DWORD
COMM	_pglVertex2sv:DWORD
COMM	_pglVertex3d:DWORD
COMM	_pglVertex3dv:DWORD
COMM	_pglVertex3f:DWORD
COMM	_pglVertex3fv:DWORD
COMM	_pglVertex3i:DWORD
COMM	_pglVertex3iv:DWORD
COMM	_pglVertex3s:DWORD
COMM	_pglVertex3sv:DWORD
COMM	_pglVertex4d:DWORD
COMM	_pglVertex4dv:DWORD
COMM	_pglVertex4f:DWORD
COMM	_pglVertex4fv:DWORD
COMM	_pglVertex4i:DWORD
COMM	_pglVertex4iv:DWORD
COMM	_pglVertex4s:DWORD
COMM	_pglVertex4sv:DWORD
COMM	_pglVertexPointer:DWORD
COMM	_pglViewport:DWORD
COMM	_pglPointParameterfEXT:DWORD
COMM	_pglPointParameterfvEXT:DWORD
COMM	_pglLockArraysEXT:DWORD
COMM	_pglUnlockArraysEXT:DWORD
COMM	_pglActiveTextureARB:DWORD
COMM	_pglClientActiveTextureARB:DWORD
COMM	_pglGetCompressedTexImage:DWORD
COMM	_pglDrawRangeElements:DWORD
COMM	_pglDrawRangeElementsEXT:DWORD
COMM	_pglMultiTexCoord1f:DWORD
COMM	_pglMultiTexCoord2f:DWORD
COMM	_pglMultiTexCoord3f:DWORD
COMM	_pglMultiTexCoord4f:DWORD
COMM	_pglActiveTexture:DWORD
COMM	_pglClientActiveTexture:DWORD
COMM	_pglCompressedTexImage3DARB:DWORD
COMM	_pglCompressedTexImage2DARB:DWORD
COMM	_pglCompressedTexImage1DARB:DWORD
COMM	_pglCompressedTexSubImage3DARB:DWORD
COMM	_pglCompressedTexSubImage2DARB:DWORD
COMM	_pglCompressedTexSubImage1DARB:DWORD
COMM	_pglDeleteObjectARB:DWORD
COMM	_pglGetHandleARB:DWORD
COMM	_pglDetachObjectARB:DWORD
COMM	_pglCreateShaderObjectARB:DWORD
COMM	_pglShaderSourceARB:DWORD
COMM	_pglCompileShaderARB:DWORD
COMM	_pglCreateProgramObjectARB:DWORD
COMM	_pglAttachObjectARB:DWORD
COMM	_pglLinkProgramARB:DWORD
COMM	_pglUseProgramObjectARB:DWORD
COMM	_pglValidateProgramARB:DWORD
COMM	_pglBindProgramARB:DWORD
COMM	_pglDeleteProgramsARB:DWORD
COMM	_pglGenProgramsARB:DWORD
COMM	_pglProgramStringARB:DWORD
COMM	_pglProgramEnvParameter4fARB:DWORD
COMM	_pglProgramLocalParameter4fARB:DWORD
COMM	_pglUniform1fARB:DWORD
COMM	_pglUniform2fARB:DWORD
COMM	_pglUniform3fARB:DWORD
COMM	_pglUniform4fARB:DWORD
COMM	_pglUniform1iARB:DWORD
COMM	_pglUniform2iARB:DWORD
COMM	_pglUniform3iARB:DWORD
COMM	_pglUniform4iARB:DWORD
COMM	_pglUniform1fvARB:DWORD
COMM	_pglUniform2fvARB:DWORD
COMM	_pglUniform3fvARB:DWORD
COMM	_pglUniform4fvARB:DWORD
COMM	_pglUniform1ivARB:DWORD
COMM	_pglUniform2ivARB:DWORD
COMM	_pglUniform3ivARB:DWORD
COMM	_pglUniform4ivARB:DWORD
COMM	_pglUniformMatrix2fvARB:DWORD
COMM	_pglUniformMatrix3fvARB:DWORD
COMM	_pglUniformMatrix4fvARB:DWORD
COMM	_pglGetObjectParameterfvARB:DWORD
COMM	_pglGetObjectParameterivARB:DWORD
COMM	_pglGetInfoLogARB:DWORD
COMM	_pglGetAttachedObjectsARB:DWORD
COMM	_pglGetUniformLocationARB:DWORD
COMM	_pglGetActiveUniformARB:DWORD
COMM	_pglGetUniformfvARB:DWORD
COMM	_pglGetUniformivARB:DWORD
COMM	_pglGetShaderSourceARB:DWORD
COMM	_pglTexImage3D:DWORD
COMM	_pglTexSubImage3D:DWORD
COMM	_pglCopyTexSubImage3D:DWORD
COMM	_pglBlendEquationEXT:DWORD
COMM	_pglStencilOpSeparate:DWORD
COMM	_pglStencilFuncSeparate:DWORD
COMM	_pglActiveStencilFaceEXT:DWORD
COMM	_pglVertexAttribPointerARB:DWORD
COMM	_pglEnableVertexAttribArrayARB:DWORD
COMM	_pglDisableVertexAttribArrayARB:DWORD
COMM	_pglBindAttribLocationARB:DWORD
COMM	_pglGetActiveAttribARB:DWORD
COMM	_pglGetAttribLocationARB:DWORD
COMM	_pglBindFragDataLocation:DWORD
COMM	_pglVertexAttrib2fARB:DWORD
COMM	_pglVertexAttrib2fvARB:DWORD
COMM	_pglVertexAttrib3fvARB:DWORD
COMM	_pglBindBufferARB:DWORD
COMM	_pglDeleteBuffersARB:DWORD
COMM	_pglGenBuffersARB:DWORD
COMM	_pglIsBufferARB:DWORD
COMM	_pglMapBufferARB:DWORD
COMM	_pglUnmapBufferARB:DWORD
COMM	_pglBufferDataARB:DWORD
COMM	_pglBufferSubDataARB:DWORD
COMM	_pglGenQueriesARB:DWORD
COMM	_pglDeleteQueriesARB:DWORD
COMM	_pglIsQueryARB:DWORD
COMM	_pglBeginQueryARB:DWORD
COMM	_pglEndQueryARB:DWORD
COMM	_pglGetQueryivARB:DWORD
COMM	_pglGetQueryObjectivARB:DWORD
COMM	_pglGetQueryObjectuivARB:DWORD
COMM	_pglDebugMessageControlARB:DWORD
COMM	_pglDebugMessageInsertARB:DWORD
COMM	_pglDebugMessageCallbackARB:DWORD
COMM	_pglGetDebugMessageLogARB:DWORD
COMM	_pglIsRenderbuffer:DWORD
COMM	_pglBindRenderbuffer:DWORD
COMM	_pglDeleteRenderbuffers:DWORD
COMM	_pglGenRenderbuffers:DWORD
COMM	_pglRenderbufferStorage:DWORD
COMM	_pglRenderbufferStorageMultisample:DWORD
COMM	_pglGetRenderbufferParameteriv:DWORD
COMM	_pglIsFramebuffer:DWORD
COMM	_pglBindFramebuffer:DWORD
COMM	_pglDeleteFramebuffers:DWORD
COMM	_pglGenFramebuffers:DWORD
COMM	_pglCheckFramebufferStatus:DWORD
COMM	_pglFramebufferTexture1D:DWORD
COMM	_pglFramebufferTexture2D:DWORD
COMM	_pglFramebufferTexture3D:DWORD
COMM	_pglFramebufferTextureLayer:DWORD
COMM	_pglFramebufferRenderbuffer:DWORD
COMM	_pglGetFramebufferAttachmentParameteriv:DWORD
COMM	_pglBlitFramebuffer:DWORD
COMM	_pglDrawBuffersARB:DWORD
COMM	_pglGenerateMipmap:DWORD
COMM	_pglBindVertexArray:DWORD
COMM	_pglDeleteVertexArrays:DWORD
COMM	_pglGenVertexArrays:DWORD
COMM	_pglIsVertexArray:DWORD
COMM	_pglSwapInterval:DWORD
COMM	_pwglSwapBuffers:DWORD
COMM	_pwglCopyContext:DWORD
COMM	_pwglCreateContext:DWORD
COMM	_pwglCreateLayerContext:DWORD
COMM	_pwglDeleteContext:DWORD
COMM	_pwglGetCurrentContext:DWORD
COMM	_pwglGetProcAddress:DWORD
COMM	_pwglMakeCurrent:DWORD
COMM	_pwglShareLists:DWORD
COMM	_pwglUseFontBitmaps:DWORD
COMM	_pwglUseFontOutlines:DWORD
COMM	_pwglDescribeLayerPlane:DWORD
COMM	_pwglSetLayerPaletteEntries:DWORD
COMM	_pwglGetLayerPaletteEntries:DWORD
COMM	_pwglRealizeLayerPalette:DWORD
COMM	_pwglSwapLayerBuffers:DWORD
COMM	_pwglSwapIntervalEXT:DWORD
COMM	_pwglCreateContextAttribsARB:DWORD
COMM	_pwglGetPixelFormatAttribiv:DWORD
COMM	_pwglChoosePixelFormat:DWORD
COMM	_pwglGetExtensionsStringEXT:DWORD
COMM	_pglGetError:DWORD
COMM	_pglGetString:DWORD
COMM	_pglAccum:DWORD
COMM	_pglAlphaFunc:DWORD
COMM	_pglArrayElement:DWORD
COMM	_pglBegin:DWORD
COMM	_pglBindTexture:DWORD
COMM	_pglBitmap:DWORD
COMM	_pglBlendFunc:DWORD
COMM	_pglCallList:DWORD
COMM	_pglCallLists:DWORD
COMM	_pglClear:DWORD
COMM	_pglClearAccum:DWORD
COMM	_pglClearColor:DWORD
COMM	_pglClearDepth:DWORD
COMM	_pglClearIndex:DWORD
COMM	_pglClearStencil:DWORD
COMM	_pglIsEnabled:DWORD
COMM	_pglIsList:DWORD
COMM	_pglIsTexture:DWORD
COMM	_pglClipPlane:DWORD
COMM	_pglColor3b:DWORD
COMM	_pglColor3bv:DWORD
COMM	_pglColor3d:DWORD
COMM	_pglColor3dv:DWORD
COMM	_pglColor3f:DWORD
COMM	_pglColor3fv:DWORD
COMM	_pglColor3i:DWORD
COMM	_pglColor3iv:DWORD
COMM	_pglColor3s:DWORD
COMM	_pglColor3sv:DWORD
COMM	_pglColor3ub:DWORD
COMM	_pglColor3ubv:DWORD
COMM	_pglColor3ui:DWORD
COMM	_pglColor3uiv:DWORD
COMM	_pglColor3us:DWORD
COMM	_pglColor3usv:DWORD
COMM	_pglColor4b:DWORD
COMM	_pglColor4bv:DWORD
COMM	_pglColor4d:DWORD
COMM	_pglColor4dv:DWORD
_DATA	ENDS
PUBLIC	_CL_ScreenShot_f
PUBLIC	_CL_SnapShot_f
PUBLIC	_CL_PlayCDTrack_f
PUBLIC	_CL_EnvShot_f
PUBLIC	_CL_SkyShot_f
PUBLIC	_CL_SaveShot_f
PUBLIC	_CL_LevelShot_f
PUBLIC	_CL_SetSky_f
PUBLIC	_SCR_Viewpos_f
PUBLIC	_SCR_TimeRefresh_f
PUBLIC	_CL_DeleteDemo_f
PUBLIC	_CL_PlayVideo_f
PUBLIC	_CL_ScreenshotGetName
PUBLIC	_CL_SnapshotGetName
PUBLIC	__real@4060000000000000
PUBLIC	__real@4076800000000000
EXTRN	_Sys_DoubleTime:PROC
EXTRN	_Cmd_Argc:PROC
EXTRN	_Cmd_Argv:PROC
EXTRN	_Q_strlen:PROC
EXTRN	_Q_strncpy:PROC
EXTRN	_Q_isdigit:PROC
EXTRN	_Q_atoi:PROC
EXTRN	_Q_strnicmp:PROC
EXTRN	_Q_snprintf:PROC
EXTRN	_Q_sprintf:PROC
EXTRN	_va:PROC
EXTRN	_Cvar_VariableValue:PROC
EXTRN	_FS_AllowDirectPaths:PROC
EXTRN	_FS_FileTime:PROC
EXTRN	_FS_FileExists:PROC
EXTRN	_FS_Delete:PROC
EXTRN	_Con_Printf:PROC
EXTRN	_S_StopBackgroundTrack:PROC
EXTRN	_CL_IsDevOverviewMode:PROC
EXTRN	_S_StartBackgroundTrack:PROC
EXTRN	_S_StreamSetPause:PROC
EXTRN	_SCR_PlayCinematic:PROC
EXTRN	_R_RenderScene:PROC
EXTRN	_R_BeginFrame:PROC
EXTRN	_R_EndFrame:PROC
EXTRN	_R_SetupSky:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	_cl:BYTE
EXTRN	_cls:BYTE
EXTRN	_clgame:BYTE
EXTRN	_RI:BYTE
EXTRN	_glState:BYTE
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
_BSS	SEGMENT
?track@?1??CL_PlayCDTrack_f@@9@9 DD 01H DUP (?)		; `CL_PlayCDTrack_f'::`2'::track
?paused@?1??CL_PlayCDTrack_f@@9@9 DD 01H DUP (?)	; `CL_PlayCDTrack_f'::`2'::paused
?looped@?1??CL_PlayCDTrack_f@@9@9 DD 01H DUP (?)	; `CL_PlayCDTrack_f'::`2'::looped
_BSS	ENDS
;	COMDAT __real@4076800000000000
CONST	SEGMENT
__real@4076800000000000 DQ 04076800000000000r	; 360
CONST	ENDS
;	COMDAT __real@4060000000000000
CONST	SEGMENT
__real@4060000000000000 DQ 04060000000000000r	; 128
CONST	ENDS
_DATA	SEGMENT
$SG143309 DB	'Usage: movie <moviename> [full]', 0aH, 00H
	ORG $+7
$SG143311 DB	'Can''t play movie while connected to a server.', 0aH, 'P'
	DB	'lease disconnect first.', 0aH, 00H
$SG143313 DB	'media/%s.avi', 00H
	ORG $+3
?enabled@?1??CL_PlayCDTrack_f@@9@9 DD 01H		; `CL_PlayCDTrack_f'::`2'::enabled
$SG143336 DB	'on', 00H
	ORG $+1
$SG143339 DB	'play', 00H
	ORG $+3
$SG143344 DB	'loop', 00H
	ORG $+3
$SG143349 DB	'pause', 00H
	ORG $+2
$SG143352 DB	'resume', 00H
	ORG $+1
$SG143355 DB	'stop', 00H
	ORG $+3
$SG143358 DB	'on', 00H
	ORG $+1
$SG143361 DB	'off', 00H
$SG143364 DB	'info', 00H
	ORG $+3
$SG143366 DB	'%u tracks', 0aH, 00H
	ORG $+1
$SG143370 DB	'looping', 00H
$SG143371 DB	'playing', 00H
$SG143372 DB	'Paused %s track %u', 0aH, 00H
$SG143373 DB	'looping', 00H
$SG143374 DB	'playing', 00H
$SG143375 DB	'Currently %s track %u', 0aH, 00H
	ORG $+1
$SG143376 DB	'MP3Volume', 00H
	ORG $+2
$SG143377 DB	'Volume is %f', 0aH, 00H
	ORG $+2
$SG143378 DB	'%s: unknown command %s', 0aH, 00H
$SG143391 DB	'^1Error:^7 unable to write screenshot', 0aH, 00H
	ORG $+1
$SG143392 DB	'scrshots/%s_shot%i%i%i%i.bmp', 00H
	ORG $+3
$SG143405 DB	'^1Error:^7 unable to write snapshot', 0aH, 00H
	ORG $+3
$SG143406 DB	'../%s_%i%i%i%i.bmp', 00H
	ORG $+1
$SG143417 DB	'overviews/%s.bmp', 00H
	ORG $+3
$SG143430 DB	'overviews/%s.bmp', 00H
	ORG $+3
$SG143437 DB	'Usage: envshot <shotname>', 0aH, 00H
	ORG $+1
$SG143438 DB	'gfx/env/%s', 00H
	ORG $+1
$SG143443 DB	'Usage: skyshot <shotname>', 0aH, 00H
	ORG $+1
$SG143444 DB	'gfx/env/%s', 00H
	ORG $+1
$SG143453 DB	'16x9', 00H
	ORG $+3
$SG143454 DB	'4x3', 00H
$SG143455 DB	'levelshots/%s_%s.bmp', 00H
	ORG $+3
$SG143456 DB	'%s.dem', 00H
	ORG $+1
$SG143457 DB	'16x9', 00H
	ORG $+3
$SG143458 DB	'4x3', 00H
$SG143459 DB	'levelshots/%s_%s.bmp', 00H
	ORG $+3
$SG143466 DB	'Usage: saveshot <savename>', 0aH, 00H
$SG143467 DB	'save/', 00H
	ORG $+2
$SG143468 DB	'%s%s.bmp', 00H
	ORG $+3
$SG143472 DB	'Usage: killdemo <name>', 0aH, 00H
$SG143474 DB	'Can''t delete %s - recording', 0aH, 00H
	ORG $+3
$SG143475 DB	'%s.dem', 00H
	ORG $+1
$SG143479 DB	'Usage: skyname <skybox>', 0aH, 00H
	ORG $+3
$SG143495 DB	'%f seconds (%f fps)', 0aH, 00H
	ORG $+3
$SG143498 DB	'org ( %g %g %g )', 0aH, 00H
	ORG $+2
$SG143499 DB	'ang ( %g %g %g )', 0aH, 00H
_DATA	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xash_build4529_src\engine\client\cl_cmds.c
_TEXT	SEGMENT
_d$ = -16						; size = 4
_a$ = -12						; size = 4
_b$ = -8						; size = 4
_c$ = -4						; size = 4
_lastnum$ = 8						; size = 4
_filename$ = 12						; size = 4
_CL_SnapshotGetName PROC

; 178  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H

; 179  : 	int	a, b, c, d;
; 180  : 
; 181  : 	if( lastnum < 0 || lastnum > 9999 )

	cmp	DWORD PTR _lastnum$[ebp], 0
	jl	SHORT $LN3@CL_Snapsho
	cmp	DWORD PTR _lastnum$[ebp], 9999		; 0000270fH
	jle	SHORT $LN2@CL_Snapsho
$LN3@CL_Snapsho:

; 182  : 	{
; 183  : 		Con_Printf( S_ERROR "unable to write snapshot\n" );

	push	OFFSET $SG143405
	call	_Con_Printf
	add	esp, 4

; 184  : 		FS_AllowDirectPaths( false );

	push	0
	call	_FS_AllowDirectPaths
	add	esp, 4

; 185  : 		return false;

	xor	eax, eax
	jmp	$LN1@CL_Snapsho
$LN2@CL_Snapsho:

; 186  : 	}
; 187  : 
; 188  : 	a = lastnum / 1000;

	mov	eax, DWORD PTR _lastnum$[ebp]
	cdq
	mov	ecx, 1000				; 000003e8H
	idiv	ecx
	mov	DWORD PTR _a$[ebp], eax

; 189  : 	lastnum -= a * 1000;

	imul	edx, DWORD PTR _a$[ebp], 1000
	mov	eax, DWORD PTR _lastnum$[ebp]
	sub	eax, edx
	mov	DWORD PTR _lastnum$[ebp], eax

; 190  : 	b = lastnum / 100;

	mov	eax, DWORD PTR _lastnum$[ebp]
	cdq
	mov	ecx, 100				; 00000064H
	idiv	ecx
	mov	DWORD PTR _b$[ebp], eax

; 191  : 	lastnum -= b * 100;

	imul	edx, DWORD PTR _b$[ebp], 100
	mov	eax, DWORD PTR _lastnum$[ebp]
	sub	eax, edx
	mov	DWORD PTR _lastnum$[ebp], eax

; 192  : 	c = lastnum / 10;

	mov	eax, DWORD PTR _lastnum$[ebp]
	cdq
	mov	ecx, 10					; 0000000aH
	idiv	ecx
	mov	DWORD PTR _c$[ebp], eax

; 193  : 	lastnum -= c * 10;

	imul	edx, DWORD PTR _c$[ebp], 10
	mov	eax, DWORD PTR _lastnum$[ebp]
	sub	eax, edx
	mov	DWORD PTR _lastnum$[ebp], eax

; 194  : 	d = lastnum;

	mov	ecx, DWORD PTR _lastnum$[ebp]
	mov	DWORD PTR _d$[ebp], ecx

; 195  : 
; 196  : 	Q_sprintf( filename, "../%s_%i%i%i%i.bmp", clgame.mapname, a, b, c, d );

	mov	edx, DWORD PTR _d$[ebp]
	push	edx
	mov	eax, DWORD PTR _c$[ebp]
	push	eax
	mov	ecx, DWORD PTR _b$[ebp]
	push	ecx
	mov	edx, DWORD PTR _a$[ebp]
	push	edx
	push	OFFSET _clgame+232
	push	OFFSET $SG143406
	mov	eax, DWORD PTR _filename$[ebp]
	push	eax
	call	_Q_sprintf
	add	esp, 28					; 0000001cH

; 197  : 
; 198  : 	return true;

	mov	eax, 1
$LN1@CL_Snapsho:

; 199  : }

	mov	esp, ebp
	pop	ebp
	ret	0
_CL_SnapshotGetName ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xash_build4529_src\engine\client\cl_cmds.c
_TEXT	SEGMENT
_d$ = -16						; size = 4
_a$ = -12						; size = 4
_b$ = -8						; size = 4
_c$ = -4						; size = 4
_lastnum$ = 8						; size = 4
_filename$ = 12						; size = 4
_CL_ScreenshotGetName PROC

; 150  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H

; 151  : 	int	a, b, c, d;
; 152  : 
; 153  : 	if( lastnum < 0 || lastnum > 9999 )

	cmp	DWORD PTR _lastnum$[ebp], 0
	jl	SHORT $LN3@CL_Screens
	cmp	DWORD PTR _lastnum$[ebp], 9999		; 0000270fH
	jle	SHORT $LN2@CL_Screens
$LN3@CL_Screens:

; 154  : 	{
; 155  : 		Con_Printf( S_ERROR "unable to write screenshot\n" );

	push	OFFSET $SG143391
	call	_Con_Printf
	add	esp, 4

; 156  : 		return false;

	xor	eax, eax
	jmp	$LN1@CL_Screens
$LN2@CL_Screens:

; 157  : 	}
; 158  : 
; 159  : 	a = lastnum / 1000;

	mov	eax, DWORD PTR _lastnum$[ebp]
	cdq
	mov	ecx, 1000				; 000003e8H
	idiv	ecx
	mov	DWORD PTR _a$[ebp], eax

; 160  : 	lastnum -= a * 1000;

	imul	edx, DWORD PTR _a$[ebp], 1000
	mov	eax, DWORD PTR _lastnum$[ebp]
	sub	eax, edx
	mov	DWORD PTR _lastnum$[ebp], eax

; 161  : 	b = lastnum / 100;

	mov	eax, DWORD PTR _lastnum$[ebp]
	cdq
	mov	ecx, 100				; 00000064H
	idiv	ecx
	mov	DWORD PTR _b$[ebp], eax

; 162  : 	lastnum -= b * 100;

	imul	edx, DWORD PTR _b$[ebp], 100
	mov	eax, DWORD PTR _lastnum$[ebp]
	sub	eax, edx
	mov	DWORD PTR _lastnum$[ebp], eax

; 163  : 	c = lastnum / 10;

	mov	eax, DWORD PTR _lastnum$[ebp]
	cdq
	mov	ecx, 10					; 0000000aH
	idiv	ecx
	mov	DWORD PTR _c$[ebp], eax

; 164  : 	lastnum -= c * 10;

	imul	edx, DWORD PTR _c$[ebp], 10
	mov	eax, DWORD PTR _lastnum$[ebp]
	sub	eax, edx
	mov	DWORD PTR _lastnum$[ebp], eax

; 165  : 	d = lastnum;

	mov	ecx, DWORD PTR _lastnum$[ebp]
	mov	DWORD PTR _d$[ebp], ecx

; 166  : 
; 167  : 	Q_sprintf( filename, "scrshots/%s_shot%i%i%i%i.bmp", clgame.mapname, a, b, c, d );

	mov	edx, DWORD PTR _d$[ebp]
	push	edx
	mov	eax, DWORD PTR _c$[ebp]
	push	eax
	mov	ecx, DWORD PTR _b$[ebp]
	push	ecx
	mov	edx, DWORD PTR _a$[ebp]
	push	edx
	push	OFFSET _clgame+232
	push	OFFSET $SG143392
	mov	eax, DWORD PTR _filename$[ebp]
	push	eax
	call	_Q_sprintf
	add	esp, 28					; 0000001cH

; 168  : 
; 169  : 	return true;

	mov	eax, 1
$LN1@CL_Screens:

; 170  : }

	mov	esp, ebp
	pop	ebp
	ret	0
_CL_ScreenshotGetName ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xash_build4529_src\engine\client\cl_cmds.c
_TEXT	SEGMENT
tv72 = -264						; size = 4
_path$ = -260						; size = 256
__$ArrayPad$ = -4					; size = 4
_CL_PlayVideo_f PROC

; 28   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 264				; 00000108H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 29   : 	string	path;
; 30   : 
; 31   : 	if( Cmd_Argc() != 2 && Cmd_Argc() != 3 )

	call	_Cmd_Argc
	cmp	eax, 2
	je	SHORT $LN4@CL_PlayVid
	call	_Cmd_Argc
	cmp	eax, 3
	je	SHORT $LN4@CL_PlayVid

; 32   : 	{
; 33   : 		Con_Printf( S_USAGE "movie <moviename> [full]\n" );

	push	OFFSET $SG143309
	call	_Con_Printf
	add	esp, 4

; 34   : 		return;

	jmp	SHORT $LN1@CL_PlayVid
$LN4@CL_PlayVid:

; 35   : 	}
; 36   : 
; 37   : 	if( cls.state == ca_active )

	cmp	DWORD PTR _cls, 4
	jne	SHORT $LN5@CL_PlayVid

; 38   : 	{
; 39   : 		Con_Printf( "Can't play movie while connected to a server.\nPlease disconnect first.\n" );

	push	OFFSET $SG143311
	call	_Con_Printf
	add	esp, 4

; 40   : 		return;

	jmp	SHORT $LN1@CL_PlayVid
$LN5@CL_PlayVid:

; 41   : 	}
; 42   : 
; 43   : 	switch( Cmd_Argc( ))

	call	_Cmd_Argc
	mov	DWORD PTR tv72[ebp], eax
	cmp	DWORD PTR tv72[ebp], 2
	je	SHORT $LN6@CL_PlayVid
	cmp	DWORD PTR tv72[ebp], 3
	je	SHORT $LN7@CL_PlayVid
	jmp	SHORT $LN1@CL_PlayVid
$LN6@CL_PlayVid:

; 44   : 	{
; 45   : 	case 2:	// simple user version
; 46   : 		Q_snprintf( path, sizeof( path ), "media/%s.avi", Cmd_Argv( 1 ));

	push	1
	call	_Cmd_Argv
	add	esp, 4
	push	eax
	push	OFFSET $SG143313
	push	256					; 00000100H
	lea	eax, DWORD PTR _path$[ebp]
	push	eax
	call	_Q_snprintf
	add	esp, 16					; 00000010H

; 47   : 		SCR_PlayCinematic( path );

	lea	ecx, DWORD PTR _path$[ebp]
	push	ecx
	call	_SCR_PlayCinematic
	add	esp, 4

; 48   : 		break;

	jmp	SHORT $LN1@CL_PlayVid
$LN7@CL_PlayVid:

; 49   : 	case 3:	// sequenced cinematics used this
; 50   : 		SCR_PlayCinematic( Cmd_Argv( 1 ));

	push	1
	call	_Cmd_Argv
	add	esp, 4
	push	eax
	call	_SCR_PlayCinematic
	add	esp, 4
$LN1@CL_PlayVid:

; 51   : 		break;
; 52   : 	}
; 53   : }

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_CL_PlayVideo_f ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xash_build4529_src\engine\client\cl_cmds.c
_TEXT	SEGMENT
_CL_DeleteDemo_f PROC

; 395  : {

	push	ebp
	mov	ebp, esp

; 396  : 	if( Cmd_Argc() != 2 )

	call	_Cmd_Argc
	cmp	eax, 2
	je	SHORT $LN2@CL_DeleteD

; 397  : 	{
; 398  : 		Con_Printf( S_USAGE "killdemo <name>\n" );

	push	OFFSET $SG143472
	call	_Con_Printf
	add	esp, 4

; 399  : 		return;

	jmp	SHORT $LN1@CL_DeleteD
$LN2@CL_DeleteD:

; 400  : 	}
; 401  : 
; 402  : 	if( cls.demorecording && !Q_stricmp( cls.demoname, Cmd_Argv( 1 )))

	cmp	DWORD PTR _cls+297576, 0
	je	SHORT $LN3@CL_DeleteD
	push	99999					; 0001869fH
	push	1
	call	_Cmd_Argv
	add	esp, 4
	push	eax
	push	OFFSET _cls+297592
	call	_Q_strnicmp
	add	esp, 12					; 0000000cH
	test	eax, eax
	jne	SHORT $LN3@CL_DeleteD

; 403  : 	{
; 404  : 		Con_Printf( "Can't delete %s - recording\n", Cmd_Argv( 1 ));

	push	1
	call	_Cmd_Argv
	add	esp, 4
	push	eax
	push	OFFSET $SG143474
	call	_Con_Printf
	add	esp, 8

; 405  : 		return;

	jmp	SHORT $LN1@CL_DeleteD
$LN3@CL_DeleteD:

; 406  : 	}
; 407  : 
; 408  : 	// delete demo
; 409  : 	FS_Delete( va( "%s.dem", Cmd_Argv( 1 )));

	push	1
	call	_Cmd_Argv
	add	esp, 4
	push	eax
	push	OFFSET $SG143475
	call	_va
	add	esp, 8
	push	eax
	call	_FS_Delete
	add	esp, 4
$LN1@CL_DeleteD:

; 410  : }

	pop	ebp
	ret	0
_CL_DeleteDemo_f ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xash_build4529_src\engine\client\cl_cmds.c
_TEXT	SEGMENT
_start$ = -28						; size = 8
_stop$ = -20						; size = 8
_time$ = -12						; size = 8
_i$ = -4						; size = 4
_SCR_TimeRefresh_f PROC

; 438  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH

; 439  : 	int	i;
; 440  : 	double	start, stop;
; 441  : 	double	time;
; 442  : 
; 443  : 	if( cls.state != ca_active )

	cmp	DWORD PTR _cls, 4
	je	SHORT $LN8@SCR_TimeRe

; 444  : 		return;

	jmp	$LN1@SCR_TimeRe
$LN8@SCR_TimeRe:

; 445  : 
; 446  : 	start = Sys_DoubleTime();

	call	_Sys_DoubleTime
	fstp	QWORD PTR _start$[ebp]

; 447  : 
; 448  : 	// run without page flipping like GoldSrc
; 449  : 	if( Cmd_Argc() == 1 )

	call	_Cmd_Argc
	cmp	eax, 1
	jne	SHORT $LN9@SCR_TimeRe

; 450  : 	{	
; 451  : 		pglDrawBuffer( GL_FRONT );

	push	1028					; 00000404H
	call	DWORD PTR _pglDrawBuffer

; 452  : 		for( i = 0; i < 128; i++ )

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN4@SCR_TimeRe
$LN2@SCR_TimeRe:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN4@SCR_TimeRe:
	cmp	DWORD PTR _i$[ebp], 128			; 00000080H
	jge	SHORT $LN3@SCR_TimeRe

; 453  : 		{
; 454  : 			RI.viewangles[1] = i / 128.0 * 360.0f;

	cvtsi2sd xmm0, DWORD PTR _i$[ebp]
	divsd	xmm0, QWORD PTR __real@4060000000000000
	mulsd	xmm0, QWORD PTR __real@4076800000000000
	mov	ecx, 4
	shl	ecx, 0
	cvtsd2ss xmm0, xmm0
	movss	DWORD PTR _RI[ecx+212], xmm0

; 455  : 			R_RenderScene();

	call	_R_RenderScene

; 456  : 		}

	jmp	SHORT $LN2@SCR_TimeRe
$LN3@SCR_TimeRe:

; 457  : 		pglFinish();

	call	DWORD PTR _pglFinish

; 458  : 		R_EndFrame();

	call	_R_EndFrame

; 459  : 	}

	jmp	SHORT $LN6@SCR_TimeRe
$LN9@SCR_TimeRe:

; 460  : 	else
; 461  : 	{
; 462  : 		for( i = 0; i < 128; i++ )

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN7@SCR_TimeRe
$LN5@SCR_TimeRe:
	mov	edx, DWORD PTR _i$[ebp]
	add	edx, 1
	mov	DWORD PTR _i$[ebp], edx
$LN7@SCR_TimeRe:
	cmp	DWORD PTR _i$[ebp], 128			; 00000080H
	jge	SHORT $LN6@SCR_TimeRe

; 463  : 		{
; 464  : 			R_BeginFrame( true );

	push	1
	call	_R_BeginFrame
	add	esp, 4

; 465  : 			RI.viewangles[1] = i / 128.0 * 360.0f;

	cvtsi2sd xmm0, DWORD PTR _i$[ebp]
	divsd	xmm0, QWORD PTR __real@4060000000000000
	mulsd	xmm0, QWORD PTR __real@4076800000000000
	mov	eax, 4
	shl	eax, 0
	cvtsd2ss xmm0, xmm0
	movss	DWORD PTR _RI[eax+212], xmm0

; 466  : 			R_RenderScene();

	call	_R_RenderScene

; 467  : 			R_EndFrame();

	call	_R_EndFrame

; 468  : 		}

	jmp	SHORT $LN5@SCR_TimeRe
$LN6@SCR_TimeRe:

; 469  : 	}
; 470  : 
; 471  : 	stop = Sys_DoubleTime ();

	call	_Sys_DoubleTime
	fstp	QWORD PTR _stop$[ebp]

; 472  : 	time = (stop - start);

	movsd	xmm0, QWORD PTR _stop$[ebp]
	subsd	xmm0, QWORD PTR _start$[ebp]
	movsd	QWORD PTR _time$[ebp], xmm0

; 473  : 	Con_Printf( "%f seconds (%f fps)\n", time, 128 / time );

	movsd	xmm0, QWORD PTR __real@4060000000000000
	divsd	xmm0, QWORD PTR _time$[ebp]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	sub	esp, 8
	movsd	xmm0, QWORD PTR _time$[ebp]
	movsd	QWORD PTR [esp], xmm0
	push	OFFSET $SG143495
	call	_Con_Printf
	add	esp, 20					; 00000014H
$LN1@SCR_TimeRe:

; 474  : }

	mov	esp, ebp
	pop	ebp
	ret	0
_SCR_TimeRefresh_f ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xash_build4529_src\engine\client\cl_cmds.c
_TEXT	SEGMENT
_SCR_Viewpos_f PROC

; 484  : {

	push	ebp
	mov	ebp, esp

; 485  : 	Con_Printf( "org ( %g %g %g )\n", RI.vieworg[0], RI.vieworg[1], RI.vieworg[2] );

	mov	eax, 4
	shl	eax, 1
	cvtss2sd xmm0, DWORD PTR _RI[eax+200]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	mov	ecx, 4
	shl	ecx, 0
	cvtss2sd xmm0, DWORD PTR _RI[ecx+200]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	mov	edx, 4
	imul	eax, edx, 0
	cvtss2sd xmm0, DWORD PTR _RI[eax+200]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	push	OFFSET $SG143498
	call	_Con_Printf
	add	esp, 28					; 0000001cH

; 486  : 	Con_Printf( "ang ( %g %g %g )\n", RI.viewangles[0], RI.viewangles[1], RI.viewangles[2] );

	mov	ecx, 4
	shl	ecx, 1
	cvtss2sd xmm0, DWORD PTR _RI[ecx+212]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	mov	edx, 4
	shl	edx, 0
	cvtss2sd xmm0, DWORD PTR _RI[edx+212]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	mov	eax, 4
	imul	ecx, eax, 0
	cvtss2sd xmm0, DWORD PTR _RI[ecx+212]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	push	OFFSET $SG143499
	call	_Con_Printf
	add	esp, 28					; 0000001cH

; 487  : }

	pop	ebp
	ret	0
_SCR_Viewpos_f ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xash_build4529_src\engine\client\cl_cmds.c
_TEXT	SEGMENT
_CL_SetSky_f PROC

; 420  : {

	push	ebp
	mov	ebp, esp

; 421  : 	if( Cmd_Argc() < 2 )

	call	_Cmd_Argc
	cmp	eax, 2
	jae	SHORT $LN2@CL_SetSky_

; 422  : 	{
; 423  : 		Con_Printf( S_USAGE "skyname <skybox>\n" );

	push	OFFSET $SG143479
	call	_Con_Printf
	add	esp, 4

; 424  : 		return;

	jmp	SHORT $LN1@CL_SetSky_
$LN2@CL_SetSky_:

; 425  : 	}
; 426  : 
; 427  : 	R_SetupSky( Cmd_Argv( 1 ));

	push	1
	call	_Cmd_Argv
	add	esp, 4
	push	eax
	call	_R_SetupSky
	add	esp, 4
$LN1@CL_SetSky_:

; 428  : }

	pop	ebp
	ret	0
_CL_SetSky_f ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xash_build4529_src\engine\client\cl_cmds.c
_TEXT	SEGMENT
_ft1$ = -276						; size = 4
tv85 = -272						; size = 4
tv69 = -268						; size = 4
_ft2$ = -264						; size = 4
_filename$ = -260					; size = 256
__$ArrayPad$ = -4					; size = 4
_CL_LevelShot_f PROC

; 337  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 276				; 00000114H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 338  : 	size_t	ft1, ft2;
; 339  : 	string	filename;
; 340  : 
; 341  : 	if( cls.scrshot_request != scrshot_plaque ) return;

	cmp	DWORD PTR _cls+293056, 3
	je	SHORT $LN2@CL_LevelSh
	jmp	$LN1@CL_LevelSh
$LN2@CL_LevelSh:

; 342  : 	cls.scrshot_request = scrshot_inactive;

	mov	DWORD PTR _cls+293056, 0

; 343  : 
; 344  : 	// check for exist
; 345  : 	if( cls.demoplayback && ( cls.demonum != -1 ))

	cmp	DWORD PTR _cls+297580, 0
	je	$LN3@CL_LevelSh
	cmp	DWORD PTR _cls+293464, -1
	je	$LN3@CL_LevelSh

; 346  : 	{
; 347  : 		Q_sprintf( cls.shotname, "levelshots/%s_%s.bmp", cls.demoname, glState.wideScreen ? "16x9" : "4x3" );

	cmp	DWORD PTR _glState+12, 0
	je	SHORT $LN9@CL_LevelSh
	mov	DWORD PTR tv69[ebp], OFFSET $SG143453
	jmp	SHORT $LN10@CL_LevelSh
$LN9@CL_LevelSh:
	mov	DWORD PTR tv69[ebp], OFFSET $SG143454
$LN10@CL_LevelSh:
	mov	eax, DWORD PTR tv69[ebp]
	push	eax
	push	OFFSET _cls+297592
	push	OFFSET $SG143455
	push	OFFSET _cls+293076
	call	_Q_sprintf
	add	esp, 16					; 00000010H

; 348  : 		Q_snprintf( filename, sizeof( filename ), "%s.dem", cls.demoname );

	push	OFFSET _cls+297592
	push	OFFSET $SG143456
	push	256					; 00000100H
	lea	ecx, DWORD PTR _filename$[ebp]
	push	ecx
	call	_Q_snprintf
	add	esp, 16					; 00000010H

; 349  : 
; 350  : 		// make sure what levelshot is newer than demo
; 351  : 		ft1 = FS_FileTime( filename, false );

	push	0
	lea	edx, DWORD PTR _filename$[ebp]
	push	edx
	call	_FS_FileTime
	add	esp, 8
	mov	DWORD PTR _ft1$[ebp], eax

; 352  : 		ft2 = FS_FileTime( cls.shotname, true );

	push	1
	push	OFFSET _cls+293076
	call	_FS_FileTime
	add	esp, 8
	mov	DWORD PTR _ft2$[ebp], eax

; 353  : 	}

	jmp	SHORT $LN4@CL_LevelSh
$LN3@CL_LevelSh:

; 354  : 	else
; 355  : 	{
; 356  : 		Q_sprintf( cls.shotname, "levelshots/%s_%s.bmp", clgame.mapname, glState.wideScreen ? "16x9" : "4x3" );

	cmp	DWORD PTR _glState+12, 0
	je	SHORT $LN11@CL_LevelSh
	mov	DWORD PTR tv85[ebp], OFFSET $SG143457
	jmp	SHORT $LN12@CL_LevelSh
$LN11@CL_LevelSh:
	mov	DWORD PTR tv85[ebp], OFFSET $SG143458
$LN12@CL_LevelSh:
	mov	eax, DWORD PTR tv85[ebp]
	push	eax
	push	OFFSET _clgame+232
	push	OFFSET $SG143459
	push	OFFSET _cls+293076
	call	_Q_sprintf
	add	esp, 16					; 00000010H

; 357  : 
; 358  : 		// make sure what levelshot is newer than bsp
; 359  : 		ft1 = FS_FileTime( cl.worldmodel->name, false );

	push	0
	mov	ecx, DWORD PTR _cl+2686576
	push	ecx
	call	_FS_FileTime
	add	esp, 8
	mov	DWORD PTR _ft1$[ebp], eax

; 360  : 		ft2 = FS_FileTime( cls.shotname, true );

	push	1
	push	OFFSET _cls+293076
	call	_FS_FileTime
	add	esp, 8
	mov	DWORD PTR _ft2$[ebp], eax
$LN4@CL_LevelSh:

; 361  : 	}
; 362  : 
; 363  : 	// missing levelshot or level never than levelshot
; 364  : 	if( ft2 == -1 || ft1 > ft2 )

	cmp	DWORD PTR _ft2$[ebp], -1
	je	SHORT $LN7@CL_LevelSh
	mov	edx, DWORD PTR _ft1$[ebp]
	cmp	edx, DWORD PTR _ft2$[ebp]
	jbe	SHORT $LN5@CL_LevelSh
$LN7@CL_LevelSh:

; 365  : 		cls.scrshot_action = scrshot_plaque;	// build new frame for levelshot

	mov	DWORD PTR _cls+293060, 3
	jmp	SHORT $LN1@CL_LevelSh
$LN5@CL_LevelSh:

; 366  : 	else cls.scrshot_action = scrshot_inactive;	// disable - not needs

	mov	DWORD PTR _cls+293060, 0
$LN1@CL_LevelSh:

; 367  : }

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_CL_LevelShot_f ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xash_build4529_src\engine\client\cl_cmds.c
_TEXT	SEGMENT
_CL_SaveShot_f PROC

; 377  : {

	push	ebp
	mov	ebp, esp

; 378  : 	if( Cmd_Argc() < 2 )

	call	_Cmd_Argc
	cmp	eax, 2
	jae	SHORT $LN2@CL_SaveSho

; 379  : 	{
; 380  : 		Con_Printf( S_USAGE "saveshot <savename>\n" );

	push	OFFSET $SG143466
	call	_Con_Printf
	add	esp, 4

; 381  : 		return;

	jmp	SHORT $LN1@CL_SaveSho
$LN2@CL_SaveSho:

; 382  : 	}
; 383  : 
; 384  : 	Q_sprintf( cls.shotname, "%s%s.bmp", DEFAULT_SAVE_DIRECTORY, Cmd_Argv( 1 ));

	push	1
	call	_Cmd_Argv
	add	esp, 4
	push	eax
	push	OFFSET $SG143467
	push	OFFSET $SG143468
	push	OFFSET _cls+293076
	call	_Q_sprintf
	add	esp, 16					; 00000010H

; 385  : 	cls.scrshot_action = scrshot_savegame;	// build new frame for saveshot

	mov	DWORD PTR _cls+293060, 4
$LN1@CL_SaveSho:

; 386  : }

	pop	ebp
	ret	0
_CL_SaveShot_f ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xash_build4529_src\engine\client\cl_cmds.c
_TEXT	SEGMENT
_CL_SkyShot_f PROC

; 316  : {

	push	ebp
	mov	ebp, esp

; 317  : 	if( Cmd_Argc() < 2 )

	call	_Cmd_Argc
	cmp	eax, 2
	jae	SHORT $LN2@CL_SkyShot

; 318  : 	{
; 319  : 		Con_Printf( S_USAGE "skyshot <shotname>\n" );

	push	OFFSET $SG143443
	call	_Con_Printf
	add	esp, 4

; 320  : 		return;

	jmp	SHORT $LN1@CL_SkyShot
$LN2@CL_SkyShot:

; 321  : 	}
; 322  : 
; 323  : 	Q_sprintf( cls.shotname, "gfx/env/%s", Cmd_Argv( 1 ));

	push	1
	call	_Cmd_Argv
	add	esp, 4
	push	eax
	push	OFFSET $SG143444
	push	OFFSET _cls+293076
	call	_Q_sprintf
	add	esp, 12					; 0000000cH

; 324  : 	cls.scrshot_action = scrshot_skyshot;	// build new frame for skyshot

	mov	DWORD PTR _cls+293060, 6

; 325  : 	cls.envshot_vieworg = NULL; // no custom view

	mov	DWORD PTR _cls+293064, 0

; 326  : 	cls.envshot_viewsize = 0;

	mov	DWORD PTR _cls+293068, 0
$LN1@CL_SkyShot:

; 327  : }

	pop	ebp
	ret	0
_CL_SkyShot_f ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xash_build4529_src\engine\client\cl_cmds.c
_TEXT	SEGMENT
_CL_EnvShot_f PROC

; 295  : {

	push	ebp
	mov	ebp, esp

; 296  : 	if( Cmd_Argc() < 2 )

	call	_Cmd_Argc
	cmp	eax, 2
	jae	SHORT $LN2@CL_EnvShot

; 297  : 	{
; 298  : 		Con_Printf( S_USAGE "envshot <shotname>\n" );

	push	OFFSET $SG143437
	call	_Con_Printf
	add	esp, 4

; 299  : 		return;

	jmp	SHORT $LN1@CL_EnvShot
$LN2@CL_EnvShot:

; 300  : 	}
; 301  : 
; 302  : 	Q_sprintf( cls.shotname, "gfx/env/%s", Cmd_Argv( 1 ));

	push	1
	call	_Cmd_Argv
	add	esp, 4
	push	eax
	push	OFFSET $SG143438
	push	OFFSET _cls+293076
	call	_Q_sprintf
	add	esp, 12					; 0000000cH

; 303  : 	cls.scrshot_action = scrshot_envshot;	// build new frame for envshot

	mov	DWORD PTR _cls+293060, 5

; 304  : 	cls.envshot_vieworg = NULL; // no custom view

	mov	DWORD PTR _cls+293064, 0

; 305  : 	cls.envshot_viewsize = 0;

	mov	DWORD PTR _cls+293068, 0
$LN1@CL_EnvShot:

; 306  : }

	pop	ebp
	ret	0
_CL_EnvShot_f ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xash_build4529_src\engine\client\cl_cmds.c
_TEXT	SEGMENT
tv232 = -40						; size = 4
tv227 = -36						; size = 4
tv166 = -32						; size = 4
tv165 = -28						; size = 4
tv131 = -24						; size = 4
tv130 = -20						; size = 4
_maxTrack$1 = -16					; size = 4
_i$2 = -12						; size = 4
_pszTrack$ = -8						; size = 4
_command$ = -4						; size = 4
_CL_PlayCDTrack_f PROC

; 63   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 40					; 00000028H

; 64   : 	const char	*command;
; 65   : 	const char	*pszTrack;
; 66   : 	static int	track = 0;
; 67   : 	static qboolean	paused = false;
; 68   : 	static qboolean	looped = false;
; 69   : 	static qboolean	enabled = true;
; 70   : 
; 71   : 	if( Cmd_Argc() < 2 ) return;

	call	_Cmd_Argc
	cmp	eax, 2
	jae	SHORT $LN5@CL_PlayCDT
	jmp	$LN26@CL_PlayCDT
$LN5@CL_PlayCDT:

; 72   : 	command = Cmd_Argv( 1 );

	push	1
	call	_Cmd_Argv
	add	esp, 4
	mov	DWORD PTR _command$[ebp], eax

; 73   : 	pszTrack = Cmd_Argv( 2 );

	push	2
	call	_Cmd_Argv
	add	esp, 4
	mov	DWORD PTR _pszTrack$[ebp], eax

; 74   : 
; 75   : 	if( !enabled && Q_stricmp( command, "on" ))

	cmp	DWORD PTR ?enabled@?1??CL_PlayCDTrack_f@@9@9, 0
	jne	SHORT $LN6@CL_PlayCDT
	push	99999					; 0001869fH
	push	OFFSET $SG143336
	mov	eax, DWORD PTR _command$[ebp]
	push	eax
	call	_Q_strnicmp
	add	esp, 12					; 0000000cH
	test	eax, eax
	je	SHORT $LN6@CL_PlayCDT

; 76   : 		return; // CD-player is disabled

	jmp	$LN26@CL_PlayCDT
$LN6@CL_PlayCDT:

; 77   : 
; 78   : 	if( !Q_stricmp( command, "play" ))

	push	99999					; 0001869fH
	push	OFFSET $SG143339
	mov	ecx, DWORD PTR _command$[ebp]
	push	ecx
	call	_Q_strnicmp
	add	esp, 12					; 0000000cH
	test	eax, eax
	jne	$LN7@CL_PlayCDT

; 79   : 	{
; 80   : 		if( Q_isdigit( pszTrack ))

	mov	edx, DWORD PTR _pszTrack$[ebp]
	push	edx
	call	_Q_isdigit
	add	esp, 4
	test	eax, eax
	je	$LN9@CL_PlayCDT

; 81   : 		{
; 82   : 			track = bound( 1, Q_atoi( Cmd_Argv( 2 )), MAX_CDTRACKS );

	push	2
	call	_Cmd_Argv
	add	esp, 4
	push	eax
	call	_Q_atoi
	add	esp, 4
	cmp	eax, 1
	jl	SHORT $LN34@CL_PlayCDT
	push	2
	call	_Cmd_Argv
	add	esp, 4
	push	eax
	call	_Q_atoi
	add	esp, 4
	cmp	eax, 32					; 00000020H
	jge	SHORT $LN32@CL_PlayCDT
	push	2
	call	_Cmd_Argv
	add	esp, 4
	push	eax
	call	_Q_atoi
	add	esp, 4
	mov	DWORD PTR tv130[ebp], eax
	jmp	SHORT $LN33@CL_PlayCDT
$LN32@CL_PlayCDT:
	mov	DWORD PTR tv130[ebp], 32		; 00000020H
$LN33@CL_PlayCDT:
	mov	eax, DWORD PTR tv130[ebp]
	mov	DWORD PTR tv131[ebp], eax
	jmp	SHORT $LN35@CL_PlayCDT
$LN34@CL_PlayCDT:
	mov	DWORD PTR tv131[ebp], 1
$LN35@CL_PlayCDT:
	mov	ecx, DWORD PTR tv131[ebp]
	mov	DWORD PTR ?track@?1??CL_PlayCDTrack_f@@9@9, ecx

; 83   : 			S_StartBackgroundTrack( clgame.cdtracks[track-1], NULL, 0, false );

	push	0
	push	0
	push	0
	mov	edx, DWORD PTR ?track@?1??CL_PlayCDTrack_f@@9@9
	sub	edx, 1
	shl	edx, 8
	add	edx, OFFSET _clgame+14096
	push	edx
	call	_S_StartBackgroundTrack
	add	esp, 16					; 00000010H

; 84   : 		}

	jmp	SHORT $LN10@CL_PlayCDT
$LN9@CL_PlayCDT:

; 85   : 		else S_StartBackgroundTrack( pszTrack, NULL, 0, true );

	push	1
	push	0
	push	0
	mov	eax, DWORD PTR _pszTrack$[ebp]
	push	eax
	call	_S_StartBackgroundTrack
	add	esp, 16					; 00000010H
$LN10@CL_PlayCDT:

; 86   : 		paused = false;

	mov	DWORD PTR ?paused@?1??CL_PlayCDTrack_f@@9@9, 0

; 87   : 		looped = false;

	mov	DWORD PTR ?looped@?1??CL_PlayCDTrack_f@@9@9, 0

; 88   : 	}

	jmp	$LN26@CL_PlayCDT
$LN7@CL_PlayCDT:

; 89   : 	else if( !Q_stricmp( command, "loop" ))

	push	99999					; 0001869fH
	push	OFFSET $SG143344
	mov	ecx, DWORD PTR _command$[ebp]
	push	ecx
	call	_Q_strnicmp
	add	esp, 12					; 0000000cH
	test	eax, eax
	jne	$LN11@CL_PlayCDT

; 90   : 	{
; 91   : 		if( Q_isdigit( pszTrack ))

	mov	edx, DWORD PTR _pszTrack$[ebp]
	push	edx
	call	_Q_isdigit
	add	esp, 4
	test	eax, eax
	je	$LN13@CL_PlayCDT

; 92   : 		{
; 93   : 			track = bound( 1, Q_atoi( Cmd_Argv( 2 )), MAX_CDTRACKS );

	push	2
	call	_Cmd_Argv
	add	esp, 4
	push	eax
	call	_Q_atoi
	add	esp, 4
	cmp	eax, 1
	jl	SHORT $LN38@CL_PlayCDT
	push	2
	call	_Cmd_Argv
	add	esp, 4
	push	eax
	call	_Q_atoi
	add	esp, 4
	cmp	eax, 32					; 00000020H
	jge	SHORT $LN36@CL_PlayCDT
	push	2
	call	_Cmd_Argv
	add	esp, 4
	push	eax
	call	_Q_atoi
	add	esp, 4
	mov	DWORD PTR tv165[ebp], eax
	jmp	SHORT $LN37@CL_PlayCDT
$LN36@CL_PlayCDT:
	mov	DWORD PTR tv165[ebp], 32		; 00000020H
$LN37@CL_PlayCDT:
	mov	eax, DWORD PTR tv165[ebp]
	mov	DWORD PTR tv166[ebp], eax
	jmp	SHORT $LN39@CL_PlayCDT
$LN38@CL_PlayCDT:
	mov	DWORD PTR tv166[ebp], 1
$LN39@CL_PlayCDT:
	mov	ecx, DWORD PTR tv166[ebp]
	mov	DWORD PTR ?track@?1??CL_PlayCDTrack_f@@9@9, ecx

; 94   : 			S_StartBackgroundTrack( clgame.cdtracks[track-1], clgame.cdtracks[track-1], 0, false );

	push	0
	push	0
	mov	edx, DWORD PTR ?track@?1??CL_PlayCDTrack_f@@9@9
	sub	edx, 1
	shl	edx, 8
	add	edx, OFFSET _clgame+14096
	push	edx
	mov	eax, DWORD PTR ?track@?1??CL_PlayCDTrack_f@@9@9
	sub	eax, 1
	shl	eax, 8
	add	eax, OFFSET _clgame+14096
	push	eax
	call	_S_StartBackgroundTrack
	add	esp, 16					; 00000010H

; 95   : 		}

	jmp	SHORT $LN14@CL_PlayCDT
$LN13@CL_PlayCDT:

; 96   : 		else S_StartBackgroundTrack( pszTrack, pszTrack, 0, true );

	push	1
	push	0
	mov	ecx, DWORD PTR _pszTrack$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pszTrack$[ebp]
	push	edx
	call	_S_StartBackgroundTrack
	add	esp, 16					; 00000010H
$LN14@CL_PlayCDT:

; 97   : 		paused = false;

	mov	DWORD PTR ?paused@?1??CL_PlayCDTrack_f@@9@9, 0

; 98   : 		looped = true;

	mov	DWORD PTR ?looped@?1??CL_PlayCDTrack_f@@9@9, 1

; 99   : 	}

	jmp	$LN26@CL_PlayCDT
$LN11@CL_PlayCDT:

; 100  : 	else if( !Q_stricmp( command, "pause" ))

	push	99999					; 0001869fH
	push	OFFSET $SG143349
	mov	eax, DWORD PTR _command$[ebp]
	push	eax
	call	_Q_strnicmp
	add	esp, 12					; 0000000cH
	test	eax, eax
	jne	SHORT $LN15@CL_PlayCDT

; 101  : 	{
; 102  : 		S_StreamSetPause( true );

	push	1
	call	_S_StreamSetPause
	add	esp, 4

; 103  : 		paused = true;

	mov	DWORD PTR ?paused@?1??CL_PlayCDTrack_f@@9@9, 1

; 104  : 	}

	jmp	$LN26@CL_PlayCDT
$LN15@CL_PlayCDT:

; 105  : 	else if( !Q_stricmp( command, "resume" ))

	push	99999					; 0001869fH
	push	OFFSET $SG143352
	mov	ecx, DWORD PTR _command$[ebp]
	push	ecx
	call	_Q_strnicmp
	add	esp, 12					; 0000000cH
	test	eax, eax
	jne	SHORT $LN17@CL_PlayCDT

; 106  : 	{
; 107  : 		S_StreamSetPause( false );

	push	0
	call	_S_StreamSetPause
	add	esp, 4

; 108  : 		paused = false;

	mov	DWORD PTR ?paused@?1??CL_PlayCDTrack_f@@9@9, 0

; 109  : 	}

	jmp	$LN26@CL_PlayCDT
$LN17@CL_PlayCDT:

; 110  : 	else if( !Q_stricmp( command, "stop" ))

	push	99999					; 0001869fH
	push	OFFSET $SG143355
	mov	edx, DWORD PTR _command$[ebp]
	push	edx
	call	_Q_strnicmp
	add	esp, 12					; 0000000cH
	test	eax, eax
	jne	SHORT $LN19@CL_PlayCDT

; 111  : 	{
; 112  : 		S_StopBackgroundTrack();

	call	_S_StopBackgroundTrack

; 113  : 		paused = false;

	mov	DWORD PTR ?paused@?1??CL_PlayCDTrack_f@@9@9, 0

; 114  : 		looped = false;

	mov	DWORD PTR ?looped@?1??CL_PlayCDTrack_f@@9@9, 0

; 115  : 		track = 0;

	mov	DWORD PTR ?track@?1??CL_PlayCDTrack_f@@9@9, 0

; 116  : 	}

	jmp	$LN26@CL_PlayCDT
$LN19@CL_PlayCDT:

; 117  : 	else if( !Q_stricmp( command, "on" ))

	push	99999					; 0001869fH
	push	OFFSET $SG143358
	mov	eax, DWORD PTR _command$[ebp]
	push	eax
	call	_Q_strnicmp
	add	esp, 12					; 0000000cH
	test	eax, eax
	jne	SHORT $LN21@CL_PlayCDT

; 118  : 	{
; 119  : 		enabled = true;

	mov	DWORD PTR ?enabled@?1??CL_PlayCDTrack_f@@9@9, 1

; 120  : 	}

	jmp	$LN26@CL_PlayCDT
$LN21@CL_PlayCDT:

; 121  : 	else if( !Q_stricmp( command, "off" ))

	push	99999					; 0001869fH
	push	OFFSET $SG143361
	mov	ecx, DWORD PTR _command$[ebp]
	push	ecx
	call	_Q_strnicmp
	add	esp, 12					; 0000000cH
	test	eax, eax
	jne	SHORT $LN23@CL_PlayCDT

; 122  : 	{
; 123  : 		enabled = false;

	mov	DWORD PTR ?enabled@?1??CL_PlayCDTrack_f@@9@9, 0

; 124  : 	}

	jmp	$LN26@CL_PlayCDT
$LN23@CL_PlayCDT:

; 125  : 	else if( !Q_stricmp( command, "info" ))

	push	99999					; 0001869fH
	push	OFFSET $SG143364
	mov	edx, DWORD PTR _command$[ebp]
	push	edx
	call	_Q_strnicmp
	add	esp, 12					; 0000000cH
	test	eax, eax
	jne	$LN25@CL_PlayCDT

; 126  : 	{
; 127  : 		int	i, maxTrack;
; 128  : 
; 129  : 		for( maxTrack = i = 0; i < MAX_CDTRACKS; i++ )

	mov	DWORD PTR _i$2[ebp], 0
	mov	eax, DWORD PTR _i$2[ebp]
	mov	DWORD PTR _maxTrack$1[ebp], eax
	jmp	SHORT $LN4@CL_PlayCDT
$LN2@CL_PlayCDT:
	mov	ecx, DWORD PTR _i$2[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$2[ebp], ecx
$LN4@CL_PlayCDT:
	cmp	DWORD PTR _i$2[ebp], 32			; 00000020H
	jge	SHORT $LN3@CL_PlayCDT

; 130  : 			if( Q_strlen( clgame.cdtracks[i] )) maxTrack++;

	mov	edx, DWORD PTR _i$2[ebp]
	shl	edx, 8
	add	edx, OFFSET _clgame+14096
	push	edx
	call	_Q_strlen
	add	esp, 4
	test	eax, eax
	je	SHORT $LN27@CL_PlayCDT
	mov	eax, DWORD PTR _maxTrack$1[ebp]
	add	eax, 1
	mov	DWORD PTR _maxTrack$1[ebp], eax
$LN27@CL_PlayCDT:
	jmp	SHORT $LN2@CL_PlayCDT
$LN3@CL_PlayCDT:

; 131  : 			
; 132  : 		Con_Printf( "%u tracks\n", maxTrack );

	mov	ecx, DWORD PTR _maxTrack$1[ebp]
	push	ecx
	push	OFFSET $SG143366
	call	_Con_Printf
	add	esp, 8

; 133  : 		if( track )

	cmp	DWORD PTR ?track@?1??CL_PlayCDTrack_f@@9@9, 0
	je	SHORT $LN30@CL_PlayCDT

; 134  : 		{
; 135  : 			if( paused ) Con_Printf( "Paused %s track %u\n", looped ? "looping" : "playing", track );

	cmp	DWORD PTR ?paused@?1??CL_PlayCDTrack_f@@9@9, 0
	je	SHORT $LN29@CL_PlayCDT
	cmp	DWORD PTR ?looped@?1??CL_PlayCDTrack_f@@9@9, 0
	je	SHORT $LN40@CL_PlayCDT
	mov	DWORD PTR tv227[ebp], OFFSET $SG143370
	jmp	SHORT $LN41@CL_PlayCDT
$LN40@CL_PlayCDT:
	mov	DWORD PTR tv227[ebp], OFFSET $SG143371
$LN41@CL_PlayCDT:
	mov	edx, DWORD PTR ?track@?1??CL_PlayCDTrack_f@@9@9
	push	edx
	mov	eax, DWORD PTR tv227[ebp]
	push	eax
	push	OFFSET $SG143372
	call	_Con_Printf
	add	esp, 12					; 0000000cH
	jmp	SHORT $LN30@CL_PlayCDT
$LN29@CL_PlayCDT:

; 136  : 			else Con_Printf( "Currently %s track %u\n", looped ? "looping" : "playing", track );

	cmp	DWORD PTR ?looped@?1??CL_PlayCDTrack_f@@9@9, 0
	je	SHORT $LN42@CL_PlayCDT
	mov	DWORD PTR tv232[ebp], OFFSET $SG143373
	jmp	SHORT $LN43@CL_PlayCDT
$LN42@CL_PlayCDT:
	mov	DWORD PTR tv232[ebp], OFFSET $SG143374
$LN43@CL_PlayCDT:
	mov	ecx, DWORD PTR ?track@?1??CL_PlayCDTrack_f@@9@9
	push	ecx
	mov	edx, DWORD PTR tv232[ebp]
	push	edx
	push	OFFSET $SG143375
	call	_Con_Printf
	add	esp, 12					; 0000000cH
$LN30@CL_PlayCDT:

; 137  : 		}
; 138  : 		Con_Printf( "Volume is %f\n", Cvar_VariableValue( "MP3Volume" ));

	push	OFFSET $SG143376
	call	_Cvar_VariableValue
	add	esp, -4					; fffffffcH
	fstp	QWORD PTR [esp]
	push	OFFSET $SG143377
	call	_Con_Printf
	add	esp, 12					; 0000000cH

; 139  : 		return;

	jmp	SHORT $LN26@CL_PlayCDT

; 140  : 	}

	jmp	SHORT $LN26@CL_PlayCDT
$LN25@CL_PlayCDT:

; 141  : 	else Con_Printf( "%s: unknown command %s\n", Cmd_Argv( 0 ), command );

	mov	eax, DWORD PTR _command$[ebp]
	push	eax
	push	0
	call	_Cmd_Argv
	add	esp, 4
	push	eax
	push	OFFSET $SG143378
	call	_Con_Printf
	add	esp, 12					; 0000000cH
$LN26@CL_PlayCDT:

; 142  : }

	mov	esp, ebp
	pop	ebp
	ret	0
_CL_PlayCDTrack_f ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xash_build4529_src\engine\client\cl_cmds.c
_TEXT	SEGMENT
_i$ = -264						; size = 4
_checkname$ = -260					; size = 256
__$ArrayPad$ = -4					; size = 4
_CL_SnapShot_f PROC

; 254  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 264				; 00000108H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 255  : 	int	i;
; 256  : 	string	checkname;
; 257  : 
; 258  : 	if( CL_IsDevOverviewMode() == 1 )

	call	_CL_IsDevOverviewMode
	cmp	eax, 1
	jne	SHORT $LN5@CL_SnapSho

; 259  : 	{
; 260  : 		// special case for write overview image and script file
; 261  : 		Q_snprintf( cls.shotname, sizeof( cls.shotname ), "overviews/%s.bmp", clgame.mapname );

	push	OFFSET _clgame+232
	push	OFFSET $SG143430
	push	256					; 00000100H
	push	OFFSET _cls+293076
	call	_Q_snprintf
	add	esp, 16					; 00000010H

; 262  : 		cls.scrshot_action = scrshot_mapshot; // build new frame for mapshot

	mov	DWORD PTR _cls+293060, 7

; 263  : 	}

	jmp	$LN6@CL_SnapSho
$LN5@CL_SnapSho:

; 264  : 	else
; 265  : 	{
; 266  : 		FS_AllowDirectPaths( true );

	push	1
	call	_FS_AllowDirectPaths
	add	esp, 4

; 267  : 
; 268  : 		// scan for a free filename
; 269  : 		for( i = 0; i < 9999; i++ )

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN4@CL_SnapSho
$LN2@CL_SnapSho:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN4@CL_SnapSho:
	cmp	DWORD PTR _i$[ebp], 9999		; 0000270fH
	jge	SHORT $LN3@CL_SnapSho

; 270  : 		{
; 271  : 			if( !CL_SnapshotGetName( i, checkname ))

	lea	ecx, DWORD PTR _checkname$[ebp]
	push	ecx
	mov	edx, DWORD PTR _i$[ebp]
	push	edx
	call	_CL_SnapshotGetName
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN7@CL_SnapSho

; 272  : 				return;	// no namespace

	jmp	SHORT $LN1@CL_SnapSho
$LN7@CL_SnapSho:

; 273  : 
; 274  : 			if( !FS_FileExists( checkname, false ))

	push	0
	lea	eax, DWORD PTR _checkname$[ebp]
	push	eax
	call	_FS_FileExists
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN8@CL_SnapSho

; 275  : 				break;

	jmp	SHORT $LN3@CL_SnapSho
$LN8@CL_SnapSho:

; 276  : 		}

	jmp	SHORT $LN2@CL_SnapSho
$LN3@CL_SnapSho:

; 277  : 
; 278  : 		FS_AllowDirectPaths( false );

	push	0
	call	_FS_AllowDirectPaths
	add	esp, 4

; 279  : 		Q_strncpy( cls.shotname, checkname, sizeof( cls.shotname ));

	push	256					; 00000100H
	lea	ecx, DWORD PTR _checkname$[ebp]
	push	ecx
	push	OFFSET _cls+293076
	call	_Q_strncpy
	add	esp, 12					; 0000000cH

; 280  : 		cls.scrshot_action = scrshot_snapshot; // build new frame for screenshot

	mov	DWORD PTR _cls+293060, 2
$LN6@CL_SnapSho:

; 281  : 	}
; 282  : 
; 283  : 	cls.envshot_vieworg = NULL; // no custom view

	mov	DWORD PTR _cls+293064, 0

; 284  : 	cls.envshot_viewsize = 0;

	mov	DWORD PTR _cls+293068, 0
$LN1@CL_SnapSho:

; 285  : }

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_CL_SnapShot_f ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xash_build4529_src\engine\client\cl_cmds.c
_TEXT	SEGMENT
_i$ = -264						; size = 4
_checkname$ = -260					; size = 256
__$ArrayPad$ = -4					; size = 4
_CL_ScreenShot_f PROC

; 216  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 264				; 00000108H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 217  : 	int	i;
; 218  : 	string	checkname;
; 219  : 
; 220  : 	if( CL_IsDevOverviewMode() == 1 )

	call	_CL_IsDevOverviewMode
	cmp	eax, 1
	jne	SHORT $LN5@CL_ScreenS

; 221  : 	{
; 222  : 		// special case for write overview image and script file
; 223  : 		Q_snprintf( cls.shotname, sizeof( cls.shotname ), "overviews/%s.bmp", clgame.mapname );

	push	OFFSET _clgame+232
	push	OFFSET $SG143417
	push	256					; 00000100H
	push	OFFSET _cls+293076
	call	_Q_snprintf
	add	esp, 16					; 00000010H

; 224  : 		cls.scrshot_action = scrshot_mapshot; // build new frame for mapshot

	mov	DWORD PTR _cls+293060, 7

; 225  : 	}

	jmp	SHORT $LN6@CL_ScreenS
$LN5@CL_ScreenS:

; 226  : 	else
; 227  : 	{
; 228  : 		// scan for a free filename
; 229  : 		for( i = 0; i < 9999; i++ )

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN4@CL_ScreenS
$LN2@CL_ScreenS:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN4@CL_ScreenS:
	cmp	DWORD PTR _i$[ebp], 9999		; 0000270fH
	jge	SHORT $LN3@CL_ScreenS

; 230  : 		{
; 231  : 			if( !CL_ScreenshotGetName( i, checkname ))

	lea	ecx, DWORD PTR _checkname$[ebp]
	push	ecx
	mov	edx, DWORD PTR _i$[ebp]
	push	edx
	call	_CL_ScreenshotGetName
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN7@CL_ScreenS

; 232  : 				return;	// no namespace

	jmp	SHORT $LN1@CL_ScreenS
$LN7@CL_ScreenS:

; 233  : 
; 234  : 			if( !FS_FileExists( checkname, false ))

	push	0
	lea	eax, DWORD PTR _checkname$[ebp]
	push	eax
	call	_FS_FileExists
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN8@CL_ScreenS

; 235  : 				break;

	jmp	SHORT $LN3@CL_ScreenS
$LN8@CL_ScreenS:

; 236  : 		}

	jmp	SHORT $LN2@CL_ScreenS
$LN3@CL_ScreenS:

; 237  : 
; 238  : 		Q_strncpy( cls.shotname, checkname, sizeof( cls.shotname ));

	push	256					; 00000100H
	lea	ecx, DWORD PTR _checkname$[ebp]
	push	ecx
	push	OFFSET _cls+293076
	call	_Q_strncpy
	add	esp, 12					; 0000000cH

; 239  : 		cls.scrshot_action = scrshot_normal; // build new frame for screenshot

	mov	DWORD PTR _cls+293060, 1
$LN6@CL_ScreenS:

; 240  : 	}
; 241  : 
; 242  : 	cls.envshot_vieworg = NULL; // no custom view

	mov	DWORD PTR _cls+293064, 0

; 243  : 	cls.envshot_viewsize = 0;

	mov	DWORD PTR _cls+293068, 0
$LN1@CL_ScreenS:

; 244  : }

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_CL_ScreenShot_f ENDP
_TEXT	ENDS
END
