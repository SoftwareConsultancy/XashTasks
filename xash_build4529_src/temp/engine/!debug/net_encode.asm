; Listing generated by Microsoft (R) Optimizing Compiler Version 19.16.27045.0 

	TITLE	C:\Users\USER\Documents\GitHub\XashTasks\xash_build4529_src\engine\common\net_encode.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

CONST	SEGMENT
_cmd_fields DD	FLAT:$SG138578
	DD	00H
	DD	02H
	DD	FLAT:$SG138579
	DD	02H
	DD	01H
	DD	FLAT:$SG138580
	DD	04H
	DD	04H
	DD	FLAT:$SG138581
	DD	08H
	DD	04H
	DD	FLAT:$SG138582
	DD	0cH
	DD	04H
	DD	FLAT:$SG138583
	DD	010H
	DD	04H
	DD	FLAT:$SG138584
	DD	014H
	DD	04H
	DD	FLAT:$SG138585
	DD	018H
	DD	04H
	DD	FLAT:$SG138586
	DD	01cH
	DD	01H
	DD	FLAT:$SG138587
	DD	01eH
	DD	02H
	DD	FLAT:$SG138588
	DD	020H
	DD	01H
	DD	FLAT:$SG138589
	DD	021H
	DD	01H
	DD	FLAT:$SG138590
	DD	024H
	DD	04H
	DD	FLAT:$SG138591
	DD	028H
	DD	04H
	DD	FLAT:$SG138592
	DD	02cH
	DD	04H
	DD	FLAT:$SG138593
	DD	030H
	DD	04H
	DD	00H
	ORG $+8
	ORG $+4
_pm_fields DD	FLAT:$SG138677
	DD	00H
	DD	04H
	DD	FLAT:$SG138678
	DD	04H
	DD	04H
	DD	FLAT:$SG138679
	DD	08H
	DD	04H
	DD	FLAT:$SG138680
	DD	0cH
	DD	04H
	DD	FLAT:$SG138681
	DD	010H
	DD	04H
	DD	FLAT:$SG138682
	DD	014H
	DD	04H
	DD	FLAT:$SG138683
	DD	018H
	DD	04H
	DD	FLAT:$SG138684
	DD	01cH
	DD	04H
	DD	FLAT:$SG138685
	DD	020H
	DD	04H
	DD	FLAT:$SG138686
	DD	024H
	DD	04H
	DD	FLAT:$SG138687
	DD	02cH
	DD	04H
	DD	FLAT:$SG138688
	DD	030H
	DD	04H
	DD	FLAT:$SG138689
	DD	034H
	DD	04H
	DD	FLAT:$SG138690
	DD	038H
	DD	04H
	DD	FLAT:$SG138691
	DD	03cH
	DD	04H
	DD	FLAT:$SG138692
	DD	040H
	DD	04H
	DD	FLAT:$SG138693
	DD	044H
	DD	020H
	DD	FLAT:$SG138694
	DD	064H
	DD	04H
	DD	FLAT:$SG138695
	DD	068H
	DD	04H
	DD	FLAT:$SG138696
	DD	06cH
	DD	04H
	DD	FLAT:$SG138697
	DD	070H
	DD	04H
	DD	FLAT:$SG138698
	DD	074H
	DD	04H
	DD	FLAT:$SG138699
	DD	078H
	DD	04H
	DD	FLAT:$SG138700
	DD	07cH
	DD	04H
	DD	FLAT:$SG138701
	DD	080H
	DD	04H
	DD	FLAT:$SG138702
	DD	088H
	DD	04H
	DD	FLAT:$SG138703
	DD	08cH
	DD	04H
	DD	00H
	ORG $+8
_ev_fields DD	FLAT:$SG138760
	DD	00H
	DD	04H
	DD	FLAT:$SG138761
	DD	04H
	DD	04H
	DD	FLAT:$SG138762
	DD	08H
	DD	04H
	DD	FLAT:$SG138763
	DD	0cH
	DD	04H
	DD	FLAT:$SG138764
	DD	010H
	DD	04H
	DD	FLAT:$SG138765
	DD	014H
	DD	04H
	DD	FLAT:$SG138766
	DD	018H
	DD	04H
	DD	FLAT:$SG138767
	DD	01cH
	DD	04H
	DD	FLAT:$SG138768
	DD	020H
	DD	04H
	DD	FLAT:$SG138769
	DD	024H
	DD	04H
	DD	FLAT:$SG138770
	DD	028H
	DD	04H
	DD	FLAT:$SG138771
	DD	02cH
	DD	04H
	DD	FLAT:$SG138772
	DD	030H
	DD	04H
	DD	FLAT:$SG138773
	DD	034H
	DD	04H
	DD	FLAT:$SG138774
	DD	038H
	DD	04H
	DD	FLAT:$SG138775
	DD	03cH
	DD	04H
	DD	FLAT:$SG138776
	DD	040H
	DD	04H
	DD	FLAT:$SG138777
	DD	044H
	DD	04H
	DD	00H
	ORG $+8
	ORG $+4
_wd_fields DD	FLAT:$SG138846
	DD	00H
	DD	04H
	DD	FLAT:$SG138847
	DD	04H
	DD	04H
	DD	FLAT:$SG138848
	DD	08H
	DD	04H
	DD	FLAT:$SG138849
	DD	0cH
	DD	04H
	DD	FLAT:$SG138850
	DD	010H
	DD	04H
	DD	FLAT:$SG138851
	DD	014H
	DD	04H
	DD	FLAT:$SG138852
	DD	018H
	DD	04H
	DD	FLAT:$SG138853
	DD	01cH
	DD	04H
	DD	FLAT:$SG138854
	DD	020H
	DD	04H
	DD	FLAT:$SG138855
	DD	024H
	DD	04H
	DD	FLAT:$SG138856
	DD	028H
	DD	04H
	DD	FLAT:$SG138857
	DD	02cH
	DD	04H
	DD	FLAT:$SG138858
	DD	030H
	DD	04H
	DD	FLAT:$SG138859
	DD	034H
	DD	04H
	DD	FLAT:$SG138860
	DD	038H
	DD	04H
	DD	FLAT:$SG138861
	DD	03cH
	DD	04H
	DD	FLAT:$SG138862
	DD	040H
	DD	04H
	DD	FLAT:$SG138863
	DD	044H
	DD	04H
	DD	FLAT:$SG138864
	DD	048H
	DD	04H
	DD	FLAT:$SG138865
	DD	04cH
	DD	04H
	DD	FLAT:$SG138866
	DD	050H
	DD	04H
	DD	FLAT:$SG138867
	DD	054H
	DD	04H
	DD	00H
	ORG $+8
	ORG $+4
_cd_fields DD	FLAT:$SG139038
	DD	00H
	DD	04H
	DD	FLAT:$SG139039
	DD	04H
	DD	04H
	DD	FLAT:$SG139040
	DD	08H
	DD	04H
	DD	FLAT:$SG139041
	DD	0cH
	DD	04H
	DD	FLAT:$SG139042
	DD	010H
	DD	04H
	DD	FLAT:$SG139043
	DD	014H
	DD	04H
	DD	FLAT:$SG139044
	DD	018H
	DD	04H
	DD	FLAT:$SG139045
	DD	01cH
	DD	04H
	DD	FLAT:$SG139046
	DD	020H
	DD	04H
	DD	FLAT:$SG139047
	DD	024H
	DD	04H
	DD	FLAT:$SG139048
	DD	028H
	DD	04H
	DD	FLAT:$SG139049
	DD	02cH
	DD	04H
	DD	FLAT:$SG139050
	DD	030H
	DD	04H
	DD	FLAT:$SG139051
	DD	034H
	DD	04H
	DD	FLAT:$SG139052
	DD	038H
	DD	04H
	DD	FLAT:$SG139053
	DD	03cH
	DD	04H
	DD	FLAT:$SG139054
	DD	040H
	DD	04H
	DD	FLAT:$SG139055
	DD	044H
	DD	04H
	DD	FLAT:$SG139056
	DD	048H
	DD	04H
	DD	FLAT:$SG139057
	DD	04cH
	DD	04H
	DD	FLAT:$SG139058
	DD	050H
	DD	04H
	DD	FLAT:$SG139059
	DD	054H
	DD	04H
	DD	FLAT:$SG139060
	DD	058H
	DD	04H
	DD	FLAT:$SG139061
	DD	05cH
	DD	04H
	DD	FLAT:$SG139062
	DD	060H
	DD	04H
	DD	FLAT:$SG139063
	DD	064H
	DD	04H
	DD	FLAT:$SG139064
	DD	068H
	DD	04H
	DD	FLAT:$SG139065
	DD	06cH
	DD	04H
	DD	FLAT:$SG139066
	DD	070H
	DD	04H
	DD	FLAT:$SG139067
	DD	074H
	DD	04H
	DD	FLAT:$SG139068
	DD	078H
	DD	04H
	DD	FLAT:$SG139069
	DD	07cH
	DD	04H
	DD	FLAT:$SG139070
	DD	080H
	DD	04H
	DD	FLAT:$SG139071
	DD	084H
	DD	04H
	DD	FLAT:$SG139072
	DD	088H
	DD	04H
	DD	FLAT:$SG139073
	DD	08cH
	DD	0100H
	DD	FLAT:$SG139074
	DD	018cH
	DD	04H
	DD	FLAT:$SG139075
	DD	0190H
	DD	04H
	DD	FLAT:$SG139076
	DD	0194H
	DD	04H
	DD	FLAT:$SG139077
	DD	0198H
	DD	04H
	DD	FLAT:$SG139078
	DD	019cH
	DD	04H
	DD	FLAT:$SG139079
	DD	01a0H
	DD	04H
	DD	FLAT:$SG139080
	DD	01a4H
	DD	04H
	DD	FLAT:$SG139081
	DD	01a8H
	DD	04H
	DD	FLAT:$SG139082
	DD	01acH
	DD	04H
	DD	FLAT:$SG139083
	DD	01b0H
	DD	04H
	DD	FLAT:$SG139084
	DD	01b4H
	DD	04H
	DD	FLAT:$SG139085
	DD	01b8H
	DD	04H
	DD	FLAT:$SG139086
	DD	01bcH
	DD	04H
	DD	FLAT:$SG139087
	DD	01c0H
	DD	04H
	DD	FLAT:$SG139088
	DD	01c4H
	DD	04H
	DD	FLAT:$SG139089
	DD	01c8H
	DD	04H
	DD	FLAT:$SG139090
	DD	01ccH
	DD	04H
	DD	FLAT:$SG139091
	DD	01d0H
	DD	04H
	DD	FLAT:$SG139092
	DD	01d4H
	DD	04H
	DD	FLAT:$SG139093
	DD	01d8H
	DD	04H
	DD	00H
	ORG $+8
	ORG $+4
_ent_fields DD	FLAT:$SG139369
	DD	00H
	DD	04H
	DD	FLAT:$SG139370
	DD	010H
	DD	04H
	DD	FLAT:$SG139371
	DD	014H
	DD	04H
	DD	FLAT:$SG139372
	DD	018H
	DD	04H
	DD	FLAT:$SG139373
	DD	01cH
	DD	04H
	DD	FLAT:$SG139374
	DD	020H
	DD	04H
	DD	FLAT:$SG139375
	DD	024H
	DD	04H
	DD	FLAT:$SG139376
	DD	028H
	DD	04H
	DD	FLAT:$SG139377
	DD	02cH
	DD	04H
	DD	FLAT:$SG139378
	DD	030H
	DD	04H
	DD	FLAT:$SG139379
	DD	034H
	DD	04H
	DD	FLAT:$SG139380
	DD	038H
	DD	02H
	DD	FLAT:$SG139381
	DD	03aH
	DD	02H
	DD	FLAT:$SG139382
	DD	03cH
	DD	04H
	DD	FLAT:$SG139383
	DD	040H
	DD	04H
	DD	FLAT:$SG139384
	DD	044H
	DD	01H
	DD	FLAT:$SG139385
	DD	048H
	DD	04H
	DD	FLAT:$SG139386
	DD	04cH
	DD	04H
	DD	FLAT:$SG139387
	DD	050H
	DD	01H
	DD	FLAT:$SG139388
	DD	051H
	DD	01H
	DD	FLAT:$SG139389
	DD	052H
	DD	01H
	DD	FLAT:$SG139390
	DD	054H
	DD	04H
	DD	FLAT:$SG139391
	DD	058H
	DD	04H
	DD	FLAT:$SG139392
	DD	05cH
	DD	04H
	DD	FLAT:$SG139393
	DD	060H
	DD	04H
	DD	FLAT:$SG139394
	DD	064H
	DD	04H
	DD	FLAT:$SG139395
	DD	068H
	DD	01H
	DD	FLAT:$SG139396
	DD	069H
	DD	01H
	DD	FLAT:$SG139397
	DD	06aH
	DD	01H
	DD	FLAT:$SG139398
	DD	06bH
	DD	01H
	DD	FLAT:$SG139399
	DD	06cH
	DD	01H
	DD	FLAT:$SG139400
	DD	06dH
	DD	01H
	DD	FLAT:$SG139401
	DD	06eH
	DD	01H
	DD	FLAT:$SG139402
	DD	06fH
	DD	01H
	DD	FLAT:$SG139403
	DD	070H
	DD	04H
	DD	FLAT:$SG139404
	DD	074H
	DD	04H
	DD	FLAT:$SG139405
	DD	078H
	DD	04H
	DD	FLAT:$SG139406
	DD	07cH
	DD	04H
	DD	FLAT:$SG139407
	DD	080H
	DD	04H
	DD	FLAT:$SG139408
	DD	084H
	DD	04H
	DD	FLAT:$SG139409
	DD	088H
	DD	04H
	DD	FLAT:$SG139410
	DD	08cH
	DD	04H
	DD	FLAT:$SG139411
	DD	090H
	DD	04H
	DD	FLAT:$SG139412
	DD	094H
	DD	04H
	DD	FLAT:$SG139413
	DD	098H
	DD	04H
	DD	FLAT:$SG139414
	DD	09cH
	DD	04H
	DD	FLAT:$SG139415
	DD	0a0H
	DD	04H
	DD	FLAT:$SG139416
	DD	0a4H
	DD	04H
	DD	FLAT:$SG139417
	DD	0a8H
	DD	04H
	DD	FLAT:$SG139418
	DD	0acH
	DD	04H
	DD	FLAT:$SG139419
	DD	0b0H
	DD	04H
	DD	FLAT:$SG139420
	DD	0b4H
	DD	04H
	DD	FLAT:$SG139421
	DD	0b8H
	DD	04H
	DD	FLAT:$SG139422
	DD	0bcH
	DD	04H
	DD	FLAT:$SG139423
	DD	0c0H
	DD	04H
	DD	FLAT:$SG139424
	DD	0c4H
	DD	04H
	DD	FLAT:$SG139425
	DD	0c8H
	DD	04H
	DD	FLAT:$SG139426
	DD	0ccH
	DD	04H
	DD	FLAT:$SG139427
	DD	0d0H
	DD	04H
	DD	FLAT:$SG139428
	DD	0d4H
	DD	04H
	DD	FLAT:$SG139429
	DD	0d8H
	DD	04H
	DD	FLAT:$SG139430
	DD	0dcH
	DD	04H
	DD	FLAT:$SG139431
	DD	0e0H
	DD	04H
	DD	FLAT:$SG139432
	DD	0e4H
	DD	04H
	DD	FLAT:$SG139433
	DD	0e8H
	DD	04H
	DD	FLAT:$SG139434
	DD	0ecH
	DD	04H
	DD	FLAT:$SG139435
	DD	0f0H
	DD	04H
	DD	FLAT:$SG139436
	DD	0f4H
	DD	04H
	DD	FLAT:$SG139437
	DD	0f8H
	DD	04H
	DD	FLAT:$SG139438
	DD	0fcH
	DD	04H
	DD	FLAT:$SG139439
	DD	0100H
	DD	04H
	DD	FLAT:$SG139440
	DD	0104H
	DD	04H
	DD	FLAT:$SG139441
	DD	0108H
	DD	04H
	DD	FLAT:$SG139442
	DD	010cH
	DD	04H
	DD	FLAT:$SG139443
	DD	0110H
	DD	04H
	DD	FLAT:$SG139444
	DD	0114H
	DD	04H
	DD	FLAT:$SG139445
	DD	0118H
	DD	04H
	DD	FLAT:$SG139446
	DD	011cH
	DD	04H
	DD	FLAT:$SG139447
	DD	0120H
	DD	04H
	DD	FLAT:$SG139448
	DD	0124H
	DD	04H
	DD	FLAT:$SG139449
	DD	0128H
	DD	04H
	DD	FLAT:$SG139450
	DD	012cH
	DD	04H
	DD	FLAT:$SG139451
	DD	0130H
	DD	04H
	DD	FLAT:$SG139452
	DD	0134H
	DD	04H
	DD	FLAT:$SG139453
	DD	0138H
	DD	04H
	DD	FLAT:$SG139454
	DD	013cH
	DD	04H
	DD	FLAT:$SG139455
	DD	0140H
	DD	04H
	DD	FLAT:$SG139456
	DD	0144H
	DD	04H
	DD	FLAT:$SG139457
	DD	0148H
	DD	04H
	DD	FLAT:$SG139458
	DD	014cH
	DD	04H
	DD	FLAT:$SG139459
	DD	0150H
	DD	04H
	DD	00H
	ORG $+8
CONST	ENDS
_DATA	SEGMENT
$SG139369 DB	'entityType', 00H
	ORG $+1
$SG139370 DB	'origin[0]', 00H
	ORG $+2
$SG139371 DB	'origin[1]', 00H
	ORG $+2
$SG139372 DB	'origin[2]', 00H
	ORG $+2
$SG139373 DB	'angles[0]', 00H
	ORG $+2
$SG139374 DB	'angles[1]', 00H
	ORG $+2
$SG139375 DB	'angles[2]', 00H
	ORG $+2
$SG139376 DB	'modelindex', 00H
	ORG $+1
$SG139377 DB	'sequence', 00H
	ORG $+3
$SG139378 DB	'frame', 00H
	ORG $+2
$SG139379 DB	'colormap', 00H
	ORG $+3
$SG139380 DB	'skin', 00H
	ORG $+3
$SG139381 DB	'solid', 00H
	ORG $+2
$SG139382 DB	'effects', 00H
$SG139383 DB	'scale', 00H
	ORG $+2
$SG139384 DB	'eflags', 00H
	ORG $+1
$SG139385 DB	'rendermode', 00H
	ORG $+1
$SG139386 DB	'renderamt', 00H
	ORG $+2
$SG139387 DB	'rendercolor.r', 00H
	ORG $+2
$SG139388 DB	'rendercolor.g', 00H
	ORG $+2
$SG139389 DB	'rendercolor.b', 00H
	ORG $+2
$SG139390 DB	'renderfx', 00H
	ORG $+3
$SG139391 DB	'movetype', 00H
	ORG $+3
$SG139392 DB	'animtime', 00H
	ORG $+3
$SG139393 DB	'framerate', 00H
	ORG $+2
$SG139394 DB	'body', 00H
	ORG $+3
$SG139395 DB	'controller[0]', 00H
	ORG $+2
$SG139396 DB	'controller[1]', 00H
	ORG $+2
$SG139397 DB	'controller[2]', 00H
	ORG $+2
$SG139398 DB	'controller[3]', 00H
	ORG $+2
$SG139399 DB	'blending[0]', 00H
$SG139400 DB	'blending[1]', 00H
$SG139401 DB	'blending[2]', 00H
$SG139402 DB	'blending[3]', 00H
$SG139403 DB	'velocity[0]', 00H
$SG139404 DB	'velocity[1]', 00H
$SG139405 DB	'velocity[2]', 00H
$SG139406 DB	'mins[0]', 00H
$SG139407 DB	'mins[1]', 00H
$SG139408 DB	'mins[2]', 00H
$SG139409 DB	'maxs[0]', 00H
$SG139410 DB	'maxs[1]', 00H
$SG139411 DB	'maxs[2]', 00H
$SG139412 DB	'aiment', 00H
	ORG $+1
$SG139413 DB	'owner', 00H
	ORG $+2
$SG139414 DB	'friction', 00H
	ORG $+3
$SG139415 DB	'gravity', 00H
$SG139416 DB	'team', 00H
	ORG $+3
$SG139417 DB	'playerclass', 00H
$SG139418 DB	'health', 00H
	ORG $+1
$SG139419 DB	'spectator', 00H
	ORG $+2
$SG139420 DB	'weaponmodel', 00H
$SG139421 DB	'gaitsequence', 00H
	ORG $+3
$SG139422 DB	'basevelocity[0]', 00H
$SG139423 DB	'basevelocity[1]', 00H
$SG139424 DB	'basevelocity[2]', 00H
$SG139425 DB	'usehull', 00H
$SG139426 DB	'oldbuttons', 00H
	ORG $+1
$SG139427 DB	'onground', 00H
	ORG $+3
$SG139428 DB	'iStepLeft', 00H
	ORG $+2
$SG139429 DB	'flFallVelocity', 00H
	ORG $+1
$SG139430 DB	'fov', 00H
$SG139431 DB	'weaponanim', 00H
	ORG $+1
$SG139432 DB	'startpos[0]', 00H
$SG139433 DB	'startpos[1]', 00H
$SG139434 DB	'startpos[2]', 00H
$SG139435 DB	'endpos[0]', 00H
	ORG $+2
$SG139436 DB	'endpos[1]', 00H
	ORG $+2
$SG139437 DB	'endpos[2]', 00H
	ORG $+2
$SG139438 DB	'impacttime', 00H
	ORG $+1
$SG139439 DB	'starttime', 00H
	ORG $+2
$SG139440 DB	'iuser1', 00H
	ORG $+1
$SG139441 DB	'iuser2', 00H
	ORG $+1
$SG139442 DB	'iuser3', 00H
	ORG $+1
$SG139443 DB	'iuser4', 00H
	ORG $+1
$SG139444 DB	'fuser1', 00H
	ORG $+1
$SG139445 DB	'fuser2', 00H
	ORG $+1
$SG139446 DB	'fuser3', 00H
	ORG $+1
$SG139447 DB	'fuser4', 00H
	ORG $+1
$SG139448 DB	'vuser1[0]', 00H
	ORG $+2
$SG139449 DB	'vuser1[1]', 00H
	ORG $+2
$SG139450 DB	'vuser1[2]', 00H
	ORG $+2
$SG139451 DB	'vuser2[0]', 00H
	ORG $+2
$SG139452 DB	'vuser2[1]', 00H
	ORG $+2
$SG139453 DB	'vuser2[2]', 00H
	ORG $+2
$SG139454 DB	'vuser3[0]', 00H
	ORG $+2
$SG139455 DB	'vuser3[1]', 00H
	ORG $+2
$SG139456 DB	'vuser3[2]', 00H
	ORG $+2
$SG139457 DB	'vuser4[0]', 00H
	ORG $+2
$SG139458 DB	'vuser4[1]', 00H
	ORG $+2
$SG139459 DB	'vuser4[2]', 00H
	ORG $+2
$SG139462 DB	'event_t', 00H
$SG139463 DB	'movevars_t', 00H
	ORG $+1
$SG139464 DB	'usercmd_t', 00H
	ORG $+2
$SG139465 DB	'clientdata_t', 00H
	ORG $+3
$SG139466 DB	'weapon_data_t', 00H
	ORG $+2
$SG139467 DB	'entity_state_t', 00H
	ORG $+1
$SG139468 DB	'entity_state_player_t', 00H
	ORG $+2
$SG139469 DB	'custom_entity_state_t', 00H
	ORG $+2
$SG138578 DB	'lerp_msec', 00H
	ORG $+2
$SG138579 DB	'msec', 00H
	ORG $+3
$SG138580 DB	'viewangles[0]', 00H
	ORG $+2
$SG138581 DB	'viewangles[1]', 00H
	ORG $+2
$SG138582 DB	'viewangles[2]', 00H
	ORG $+2
$SG138583 DB	'forwardmove', 00H
$SG138584 DB	'sidemove', 00H
	ORG $+3
$SG138585 DB	'upmove', 00H
	ORG $+1
$SG138586 DB	'lightlevel', 00H
	ORG $+1
$SG138587 DB	'buttons', 00H
$SG138588 DB	'impulse', 00H
$SG138589 DB	'weaponselect', 00H
	ORG $+3
$SG138590 DB	'impact_index', 00H
	ORG $+3
$SG138591 DB	'impact_position[0]', 00H
	ORG $+1
$SG138592 DB	'impact_position[1]', 00H
	ORG $+1
$SG138593 DB	'impact_position[2]', 00H
	ORG $+1
$SG138677 DB	'gravity', 00H
$SG138678 DB	'stopspeed', 00H
	ORG $+2
$SG138679 DB	'maxspeed', 00H
	ORG $+3
$SG138680 DB	'spectatormaxspeed', 00H
	ORG $+2
$SG138681 DB	'accelerate', 00H
	ORG $+1
$SG138682 DB	'airaccelerate', 00H
	ORG $+2
$SG138683 DB	'wateraccelerate', 00H
$SG138684 DB	'friction', 00H
	ORG $+3
$SG138685 DB	'edgefriction', 00H
	ORG $+3
$SG138686 DB	'waterfriction', 00H
	ORG $+2
$SG138687 DB	'bounce', 00H
	ORG $+1
$SG138688 DB	'stepsize', 00H
	ORG $+3
$SG138689 DB	'maxvelocity', 00H
$SG138690 DB	'zmax', 00H
	ORG $+3
$SG138691 DB	'waveHeight', 00H
	ORG $+1
$SG138692 DB	'footsteps', 00H
	ORG $+2
$SG138693 DB	'skyName', 00H
$SG138694 DB	'rollangle', 00H
	ORG $+2
$SG138695 DB	'rollspeed', 00H
	ORG $+2
$SG138696 DB	'skycolor_r', 00H
	ORG $+1
$SG138697 DB	'skycolor_g', 00H
	ORG $+1
$SG138698 DB	'skycolor_b', 00H
	ORG $+1
$SG138699 DB	'skyvec_x', 00H
	ORG $+3
$SG138700 DB	'skyvec_y', 00H
	ORG $+3
$SG138701 DB	'skyvec_z', 00H
	ORG $+3
$SG138702 DB	'fog_settings', 00H
	ORG $+3
$SG138703 DB	'wateralpha', 00H
	ORG $+1
$SG138760 DB	'flags', 00H
	ORG $+2
$SG138761 DB	'entindex', 00H
	ORG $+3
$SG138762 DB	'origin[0]', 00H
	ORG $+2
$SG138763 DB	'origin[1]', 00H
	ORG $+2
$SG138764 DB	'origin[2]', 00H
	ORG $+2
$SG138765 DB	'angles[0]', 00H
	ORG $+2
$SG138766 DB	'angles[1]', 00H
	ORG $+2
$SG138767 DB	'angles[2]', 00H
	ORG $+2
$SG138768 DB	'velocity[0]', 00H
$SG138769 DB	'velocity[1]', 00H
$SG138770 DB	'velocity[2]', 00H
$SG138771 DB	'ducking', 00H
$SG138772 DB	'fparam1', 00H
$SG138773 DB	'fparam2', 00H
$SG138774 DB	'iparam1', 00H
$SG138775 DB	'iparam2', 00H
$SG138776 DB	'bparam1', 00H
$SG138777 DB	'bparam2', 00H
$SG138846 DB	'm_iId', 00H
	ORG $+2
$SG138847 DB	'm_iClip', 00H
$SG138848 DB	'm_flNextPrimaryAttack', 00H
	ORG $+2
$SG138849 DB	'm_flNextSecondaryAttack', 00H
$SG138850 DB	'm_flTimeWeaponIdle', 00H
	ORG $+1
$SG138851 DB	'm_fInReload', 00H
$SG138852 DB	'm_fInSpecialReload', 00H
	ORG $+1
$SG138853 DB	'm_flNextReload', 00H
	ORG $+1
$SG138854 DB	'm_flPumpTime', 00H
	ORG $+3
$SG138855 DB	'm_fReloadTime', 00H
	ORG $+2
$SG138856 DB	'm_fAimedDamage', 00H
	ORG $+1
$SG138857 DB	'm_fNextAimBonus', 00H
$SG138858 DB	'm_fInZoom', 00H
	ORG $+2
$SG138859 DB	'm_iWeaponState', 00H
	ORG $+1
$SG138860 DB	'iuser1', 00H
	ORG $+1
$SG138861 DB	'iuser2', 00H
	ORG $+1
$SG138862 DB	'iuser3', 00H
	ORG $+1
$SG138863 DB	'iuser4', 00H
	ORG $+1
$SG138864 DB	'fuser1', 00H
	ORG $+1
$SG138865 DB	'fuser2', 00H
	ORG $+1
$SG138866 DB	'fuser3', 00H
	ORG $+1
$SG138867 DB	'fuser4', 00H
	ORG $+1
$SG139038 DB	'origin[0]', 00H
	ORG $+2
$SG139039 DB	'origin[1]', 00H
	ORG $+2
$SG139040 DB	'origin[2]', 00H
	ORG $+2
$SG139041 DB	'velocity[0]', 00H
$SG139042 DB	'velocity[1]', 00H
$SG139043 DB	'velocity[2]', 00H
$SG139044 DB	'viewmodel', 00H
	ORG $+2
$SG139045 DB	'punchangle[0]', 00H
	ORG $+2
$SG139046 DB	'punchangle[1]', 00H
	ORG $+2
$SG139047 DB	'punchangle[2]', 00H
	ORG $+2
$SG139048 DB	'flags', 00H
	ORG $+2
$SG139049 DB	'waterlevel', 00H
	ORG $+1
$SG139050 DB	'watertype', 00H
	ORG $+2
$SG139051 DB	'view_ofs[0]', 00H
$SG139052 DB	'view_ofs[1]', 00H
$SG139053 DB	'view_ofs[2]', 00H
$SG139054 DB	'health', 00H
	ORG $+1
$SG139055 DB	'bInDuck', 00H
$SG139056 DB	'weapons', 00H
$SG139057 DB	'flTimeStepSound', 00H
$SG139058 DB	'flDuckTime', 00H
	ORG $+1
$SG139059 DB	'flSwimTime', 00H
	ORG $+1
$SG139060 DB	'waterjumptime', 00H
	ORG $+2
$SG139061 DB	'maxspeed', 00H
	ORG $+3
$SG139062 DB	'fov', 00H
$SG139063 DB	'weaponanim', 00H
	ORG $+1
$SG139064 DB	'm_iId', 00H
	ORG $+2
$SG139065 DB	'ammo_shells', 00H
$SG139066 DB	'ammo_nails', 00H
	ORG $+1
$SG139067 DB	'ammo_cells', 00H
	ORG $+1
$SG139068 DB	'ammo_rockets', 00H
	ORG $+3
$SG139069 DB	'm_flNextAttack', 00H
	ORG $+1
$SG139070 DB	'tfstate', 00H
$SG139071 DB	'pushmsec', 00H
	ORG $+3
$SG139072 DB	'deadflag', 00H
	ORG $+3
$SG139073 DB	'physinfo', 00H
	ORG $+3
$SG139074 DB	'iuser1', 00H
	ORG $+1
$SG139075 DB	'iuser2', 00H
	ORG $+1
$SG139076 DB	'iuser3', 00H
	ORG $+1
$SG139077 DB	'iuser4', 00H
	ORG $+1
$SG139078 DB	'fuser1', 00H
	ORG $+1
$SG139079 DB	'fuser2', 00H
	ORG $+1
$SG139080 DB	'fuser3', 00H
	ORG $+1
$SG139081 DB	'fuser4', 00H
	ORG $+1
$SG139082 DB	'vuser1[0]', 00H
	ORG $+2
$SG139083 DB	'vuser1[1]', 00H
	ORG $+2
$SG139084 DB	'vuser1[2]', 00H
	ORG $+2
$SG139085 DB	'vuser2[0]', 00H
	ORG $+2
$SG139086 DB	'vuser2[1]', 00H
	ORG $+2
$SG139087 DB	'vuser2[2]', 00H
	ORG $+2
$SG139088 DB	'vuser3[0]', 00H
	ORG $+2
$SG139089 DB	'vuser3[1]', 00H
	ORG $+2
$SG139090 DB	'vuser3[2]', 00H
	ORG $+2
$SG139091 DB	'vuser4[0]', 00H
	ORG $+2
$SG139092 DB	'vuser4[1]', 00H
	ORG $+2
$SG139093 DB	'vuser4[2]', 00H
_DATA	ENDS
PUBLIC	_Delta_Init
PUBLIC	_Delta_InitClient
PUBLIC	_Delta_Shutdown
PUBLIC	_Delta_InitFields
PUBLIC	_Delta_NumTables
PUBLIC	_Delta_FindStructByIndex
PUBLIC	_Delta_AddEncoder
PUBLIC	_Delta_FindField
PUBLIC	_Delta_SetField
PUBLIC	_Delta_UnsetField
PUBLIC	_Delta_SetFieldByIndex
PUBLIC	_Delta_UnsetFieldByIndex
PUBLIC	_Delta_WriteTableField
PUBLIC	_Delta_ParseTableField
PUBLIC	_MSG_WriteDeltaUsercmd
PUBLIC	_MSG_ReadDeltaUsercmd
PUBLIC	_MSG_WriteDeltaEvent
PUBLIC	_MSG_ReadDeltaEvent
PUBLIC	_MSG_WriteDeltaMovevars
PUBLIC	_MSG_ReadDeltaMovevars
PUBLIC	_MSG_WriteClientData
PUBLIC	_MSG_ReadClientData
PUBLIC	_MSG_WriteWeaponData
PUBLIC	_MSG_ReadWeaponData
PUBLIC	_MSG_WriteDeltaEntity
PUBLIC	_MSG_ReadDeltaEntity
PUBLIC	_Delta_TestBaseline
PUBLIC	_Delta_FindStruct
PUBLIC	_Delta_FindStructByEncoder
PUBLIC	_Delta_FindStructByDelta
PUBLIC	_Delta_CustomEncode
PUBLIC	_Delta_FindFieldInfo
PUBLIC	_Delta_IndexForFieldInfo
PUBLIC	_Delta_AddField
PUBLIC	_Delta_ParseField
PUBLIC	_Delta_ParseTable
PUBLIC	_Delta_ClampIntegerField
PUBLIC	_Delta_CompareField
PUBLIC	_Delta_WriteField
PUBLIC	_Delta_ReadField
PUBLIC	__real@00000000
PUBLIC	__real@3c23d70a
PUBLIC	__real@3f000000
PUBLIC	__real@3f800000
PUBLIC	__real@41000000
PUBLIC	__real@41800000
PUBLIC	__real@42000000
PUBLIC	__real@42c80000
PUBLIC	__xmm@41f00000000000000000000000000000
EXTRN	_memset:PROC
EXTRN	_abs:PROC
EXTRN	_Sys_Error:PROC
EXTRN	_Q_strlen:PROC
EXTRN	_Q_strncpy:PROC
EXTRN	_Q_atoi:PROC
EXTRN	_Q_atof:PROC
EXTRN	_Q_strnicmp:PROC
EXTRN	_Q_strncmp:PROC
EXTRN	__Mem_Realloc:PROC
EXTRN	__Mem_Alloc:PROC
EXTRN	__Mem_Free:PROC
EXTRN	_DBG_AssertFunction:PROC
EXTRN	_FS_LoadFile:PROC
EXTRN	_COM_NormalizeAngles:PROC
EXTRN	_COM_CheckString:PROC
EXTRN	_Host_Error:PROC
EXTRN	_Con_Reportf:PROC
EXTRN	_Con_DPrintf:PROC
EXTRN	_COM_ParseFile:PROC
EXTRN	_MSG_SeekToBit:PROC
EXTRN	_MSG_WriteOneBit:PROC
EXTRN	_MSG_WriteUBitLong:PROC
EXTRN	_MSG_WriteSBitLong:PROC
EXTRN	_MSG_WriteBitLong:PROC
EXTRN	_MSG_WriteBitAngle:PROC
EXTRN	_MSG_WriteCmdExt:PROC
EXTRN	_MSG_WriteFloat:PROC
EXTRN	_MSG_WriteString:PROC
EXTRN	_MSG_ReadOneBit:PROC
EXTRN	_MSG_ReadBitAngle:PROC
EXTRN	_MSG_ReadSBitLong:PROC
EXTRN	_MSG_ReadUBitLong:PROC
EXTRN	_MSG_ReadBitLong:PROC
EXTRN	_MSG_ReadFloat:PROC
EXTRN	_MSG_ReadStringExt:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__ftoui3:PROC
EXTRN	_host:BYTE
EXTRN	_SI:BYTE
EXTRN	_cl:BYTE
EXTRN	_cls:BYTE
EXTRN	_clgame:BYTE
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
_BSS	SEGMENT
_delta_init DD	01H DUP (?)
_BSS	ENDS
;	COMDAT __xmm@41f00000000000000000000000000000
CONST	SEGMENT
__xmm@41f00000000000000000000000000000 DB 00H, 00H, 00H, 00H, 00H, 00H, 00H
	DB	00H, 00H, 00H, 00H, 00H, 00H, 00H, 0f0H, 'A'
CONST	ENDS
;	COMDAT __real@42c80000
CONST	SEGMENT
__real@42c80000 DD 042c80000r			; 100
CONST	ENDS
;	COMDAT __real@42000000
CONST	SEGMENT
__real@42000000 DD 042000000r			; 32
CONST	ENDS
;	COMDAT __real@41800000
CONST	SEGMENT
__real@41800000 DD 041800000r			; 16
CONST	ENDS
;	COMDAT __real@41000000
CONST	SEGMENT
__real@41000000 DD 041000000r			; 8
CONST	ENDS
;	COMDAT __real@3f800000
CONST	SEGMENT
__real@3f800000 DD 03f800000r			; 1
CONST	ENDS
;	COMDAT __real@3f000000
CONST	SEGMENT
__real@3f000000 DD 03f000000r			; 0.5
CONST	ENDS
;	COMDAT __real@3c23d70a
CONST	SEGMENT
__real@3c23d70a DD 03c23d70ar			; 0.01
CONST	ENDS
;	COMDAT __real@00000000
CONST	SEGMENT
__real@00000000 DD 000000000r			; 0
CONST	ENDS
_DATA	SEGMENT
	ORG $+2
_dt_info DD	FLAT:$SG139462
	DD	FLAT:_ev_fields
	DD	012H
	ORG $+52
	DD	FLAT:$SG139463
	DD	FLAT:_pm_fields
	DD	01bH
	ORG $+52
	DD	FLAT:$SG139464
	DD	FLAT:_cmd_fields
	DD	010H
	ORG $+52
	DD	FLAT:$SG139465
	DD	FLAT:_cd_fields
	DD	038H
	ORG $+52
	DD	FLAT:$SG139466
	DD	FLAT:_wd_fields
	DD	016H
	ORG $+52
	DD	FLAT:$SG139467
	DD	FLAT:_ent_fields
	DD	05bH
	ORG $+52
	DD	FLAT:$SG139468
	DD	FLAT:_ent_fields
	DD	05bH
	ORG $+52
	DD	FLAT:$SG139469
	DD	FLAT:_ent_fields
	DD	05bH
	ORG $+52
	DD	00H
	ORG $+60
$SG139482 DB	'^3Warning:^7 Struct %s not found in delta_info', 0aH, 00H
$SG139530 DB	'c:\users\user\documents\github\xashtasks\xash_build4529_'
	DB	'src\engine\common\net_encode.c', 00H
	ORG $+1
$SG139531 DB	'dt != NULL', 00H
	ORG $+1
$SG139589 DB	'dt != NULL', 00H
	ORG $+1
$SG139588 DB	'c:\users\user\documents\github\xashtasks\xash_build4529_'
	DB	'src\engine\common\net_encode.c', 00H
	ORG $+1
$SG139592 DB	'^1Error:^7 Delta_Add: couldn''t find description for %s-'
	DB	'>%s', 0aH, 00H
$SG139594 DB	'^3Warning:^7 Delta_Add: can''t add %s->%s encoder list i'
	DB	's full', 0aH, 00H
	ORG $+1
$SG139616 DB	'nameIndex >= 0 && nameIndex < dt->maxFields', 00H
$SG139595 DB	'c:\users\user\documents\github\xashtasks\xash_build4529_'
	DB	'src\engine\common\net_encode.c', 00H
	ORG $+1
$SG139610 DB	'c:\users\user\documents\github\xashtasks\xash_build4529_'
	DB	'src\engine\common\net_encode.c', 00H
	ORG $+1
$SG139611 DB	'pField != NULL', 00H
	ORG $+1
$SG139613 DB	'c:\users\user\documents\github\xashtasks\xash_build4529_'
	DB	'src\engine\common\net_encode.c', 00H
	ORG $+1
$SG139614 DB	'dt && dt->bInitialized', 00H
	ORG $+1
$SG139615 DB	'c:\users\user\documents\github\xashtasks\xash_build4529_'
	DB	'src\engine\common\net_encode.c', 00H
	ORG $+1
$SG139635 DB	'c:\users\user\documents\github\xashtasks\xash_build4529_'
	DB	'src\engine\common\net_encode.c', 00H
	ORG $+1
$SG139636 DB	'dt != NULL', 00H
	ORG $+1
$SG139638 DB	'nameIndex >= 0 && nameIndex < dt->maxFields', 00H
$SG139637 DB	'c:\users\user\documents\github\xashtasks\xash_build4529_'
	DB	'src\engine\common\net_encode.c', 00H
	ORG $+1
$SG139662 DB	'(', 00H
	ORG $+2
$SG139663 DB	'^1Error:^7 Delta_ParseField: expected ''('', found ''%s'''
	DB	' instead', 0aH, 00H
	ORG $+1
$SG139665 DB	'^1Error:^7 Delta_ParseField: missing field name', 0aH, 00H
	ORG $+3
$SG139667 DB	'^1Error:^7 Delta_ParseField: unable to find field %s', 0aH
	DB	00H
	ORG $+2
$SG139669 DB	',', 00H
	ORG $+2
$SG139670 DB	'^1Error:^7 Delta_ParseField: expected '','', found ''%s'''
	DB	' instead', 0aH, 00H
	ORG $+1
$SG139672 DB	',', 00H
	ORG $+2
$SG139674 DB	'|', 00H
	ORG $+2
$SG139677 DB	'DT_BYTE', 00H
$SG139680 DB	'DT_SHORT', 00H
	ORG $+3
$SG139683 DB	'DT_FLOAT', 00H
	ORG $+3
$SG139686 DB	'DT_INTEGER', 00H
	ORG $+1
$SG139689 DB	'DT_ANGLE', 00H
	ORG $+3
$SG139692 DB	'DT_TIMEWINDOW_8', 00H
$SG139695 DB	'DT_TIMEWINDOW_BIG', 00H
	ORG $+2
$SG139698 DB	'DT_STRING', 00H
	ORG $+2
$SG139700 DB	'DT_SIGNED', 00H
	ORG $+2
$SG139702 DB	',', 00H
	ORG $+2
$SG139703 DB	'^1Error:^7 Delta_ParseField: expected '','', found ''%s'''
	DB	' instead', 0aH, 00H
	ORG $+1
$SG139705 DB	'^1Error:^7 Delta_ReadField: %s field bits argument is mi'
	DB	'ssing', 0aH, 00H
	ORG $+1
$SG139707 DB	',', 00H
	ORG $+2
$SG139708 DB	'^1Error:^7 Delta_ReadField: expected '','', found ''%s'''
	DB	' instead', 0aH, 00H
	ORG $+2
$SG139710 DB	'^1Error:^7 Delta_ReadField: %s missing ''multiplier'' ar'
	DB	'gument', 0aH, 00H
	ORG $+2
$SG139714 DB	',', 00H
	ORG $+2
$SG139715 DB	'^1Error:^7 Delta_ReadField: expected '','', found ''%s'''
	DB	' instead', 0aH, 00H
	ORG $+2
$SG139719 DB	')', 00H
	ORG $+2
$SG139717 DB	'^1Error:^7 Delta_ReadField: %s missing ''post_multiply'''
	DB	' argument', 0aH, 00H
	ORG $+3
$SG139720 DB	'^1Error:^7 Delta_ParseField: expected '')'', found ''%s'''
	DB	' instead', 0aH, 00H
	ORG $+1
$SG139752 DB	'DEFINE_DELTA_POST', 00H
	ORG $+2
$SG139743 DB	'c:\users\user\documents\github\xashtasks\xash_build4529_'
	DB	'src\engine\common\net_encode.c', 00H
	ORG $+1
$SG139744 DB	'c:\users\user\documents\github\xashtasks\xash_build4529_'
	DB	'src\engine\common\net_encode.c', 00H
	ORG $+1
$SG139745 DB	'dt->numFields <= dt->maxFields', 00H
	ORG $+1
$SG139748 DB	'DEFINE_DELTA', 00H
	ORG $+3
$SG139757 DB	'none', 00H
	ORG $+3
$SG139760 DB	'gamedll', 00H
$SG139762 DB	'clientdll', 00H
	ORG $+2
$SG139778 DB	'delta.lst', 00H
	ORG $+2
$SG139764 DB	'c:\users\user\documents\github\xashtasks\xash_build4529_'
	DB	'src\engine\common\net_encode.c', 00H
	ORG $+1
$SG139780 DB	'delta.lst', 00H
	ORG $+2
$SG139781 DB	'DELTA_Load: couldn''t load file %s', 0aH, 00H
	ORG $+1
$SG139783 DB	'delta.lst', 00H
	ORG $+2
$SG139784 DB	'%s: unknown struct %s', 0aH, 00H
	ORG $+1
$SG139787 DB	'none', 00H
	ORG $+3
$SG139788 DB	'null', 00H
	ORG $+3
$SG139790 DB	'delta.lst', 00H
	ORG $+2
$SG139791 DB	'%s: missing ''{'' in section %s', 0aH, 00H
	ORG $+1
$SG139792 DB	'c:\users\user\documents\github\xashtasks\xash_build4529_'
	DB	'src\engine\common\net_encode.c', 00H
	ORG $+1
$SG139799 DB	'movevars_t', 00H
	ORG $+1
$SG139801 DB	'dt != NULL', 00H
	ORG $+1
$SG139800 DB	'c:\users\user\documents\github\xashtasks\xash_build4529_'
	DB	'src\engine\common\net_encode.c', 00H
	ORG $+1
$SG139803 DB	'gravity', 00H
$SG139804 DB	'movevars_t', 00H
	ORG $+1
$SG139805 DB	'stopspeed', 00H
	ORG $+2
$SG139806 DB	'movevars_t', 00H
	ORG $+1
$SG139807 DB	'maxspeed', 00H
	ORG $+3
$SG139808 DB	'movevars_t', 00H
	ORG $+1
$SG139809 DB	'spectatormaxspeed', 00H
	ORG $+2
$SG139810 DB	'movevars_t', 00H
	ORG $+1
$SG139811 DB	'accelerate', 00H
	ORG $+1
$SG139812 DB	'movevars_t', 00H
	ORG $+1
$SG139813 DB	'airaccelerate', 00H
	ORG $+2
$SG139814 DB	'movevars_t', 00H
	ORG $+1
$SG139815 DB	'wateraccelerate', 00H
$SG139816 DB	'movevars_t', 00H
	ORG $+1
$SG139817 DB	'friction', 00H
	ORG $+3
$SG139818 DB	'movevars_t', 00H
	ORG $+1
$SG139819 DB	'edgefriction', 00H
	ORG $+3
$SG139820 DB	'movevars_t', 00H
	ORG $+1
$SG139821 DB	'waterfriction', 00H
	ORG $+2
$SG139822 DB	'movevars_t', 00H
	ORG $+1
$SG139823 DB	'bounce', 00H
	ORG $+1
$SG139824 DB	'movevars_t', 00H
	ORG $+1
$SG139825 DB	'stepsize', 00H
	ORG $+3
$SG139826 DB	'movevars_t', 00H
	ORG $+1
$SG139827 DB	'maxvelocity', 00H
$SG139828 DB	'movevars_t', 00H
	ORG $+1
$SG139831 DB	'zmax', 00H
	ORG $+3
$SG139832 DB	'movevars_t', 00H
	ORG $+1
$SG139833 DB	'zmax', 00H
	ORG $+3
$SG139834 DB	'movevars_t', 00H
	ORG $+1
$SG139835 DB	'waveHeight', 00H
	ORG $+1
$SG139836 DB	'movevars_t', 00H
	ORG $+1
$SG139837 DB	'skyName', 00H
$SG139838 DB	'movevars_t', 00H
	ORG $+1
$SG139839 DB	'footsteps', 00H
	ORG $+2
$SG139840 DB	'movevars_t', 00H
	ORG $+1
$SG139841 DB	'rollangle', 00H
	ORG $+2
$SG139842 DB	'movevars_t', 00H
	ORG $+1
$SG139843 DB	'rollspeed', 00H
	ORG $+2
$SG139844 DB	'movevars_t', 00H
	ORG $+1
$SG139845 DB	'skycolor_r', 00H
	ORG $+1
$SG139846 DB	'movevars_t', 00H
	ORG $+1
$SG139847 DB	'skycolor_g', 00H
	ORG $+1
$SG139848 DB	'movevars_t', 00H
	ORG $+1
$SG139849 DB	'skycolor_b', 00H
	ORG $+1
$SG139850 DB	'movevars_t', 00H
	ORG $+1
$SG139851 DB	'skyvec_x', 00H
	ORG $+3
$SG139852 DB	'movevars_t', 00H
	ORG $+1
$SG139853 DB	'skyvec_y', 00H
	ORG $+3
$SG139854 DB	'movevars_t', 00H
	ORG $+1
$SG139855 DB	'skyvec_z', 00H
	ORG $+3
$SG139856 DB	'movevars_t', 00H
	ORG $+1
$SG139857 DB	'wateralpha', 00H
	ORG $+1
$SG139858 DB	'movevars_t', 00H
	ORG $+1
$SG139859 DB	'fog_settings', 00H
	ORG $+3
$SG139860 DB	'movevars_t', 00H
	ORG $+1
$SG139883 DB	'c:\users\user\documents\github\xashtasks\xash_build4529_'
	DB	'src\engine\common\net_encode.c', 00H
	ORG $+1
$SG139900 DB	'%s %d overflow %d', 0aH, 00H
	ORG $+1
$SG139990 DB	'to != NULL', 00H
	ORG $+1
$SG139985 DB	'c:\users\user\documents\github\xashtasks\xash_build4529_'
	DB	'src\engine\common\net_encode.c', 00H
	ORG $+1
$SG139986 DB	'pField != NULL', 00H
	ORG $+1
$SG139987 DB	'c:\users\user\documents\github\xashtasks\xash_build4529_'
	DB	'src\engine\common\net_encode.c', 00H
	ORG $+1
$SG139988 DB	'from != NULL', 00H
	ORG $+3
$SG139989 DB	'c:\users\user\documents\github\xashtasks\xash_build4529_'
	DB	'src\engine\common\net_encode.c', 00H
	ORG $+1
$SG140047 DB	'custom_entity_state_t', 00H
	ORG $+2
$SG140050 DB	'entity_state_player_t', 00H
	ORG $+2
$SG140051 DB	'entity_state_t', 00H
	ORG $+1
$SG140052 DB	'c:\users\user\documents\github\xashtasks\xash_build4529_'
	DB	'src\engine\common\net_encode.c', 00H
	ORG $+1
$SG140053 DB	'dt && dt->bInitialized', 00H
	ORG $+1
$SG140054 DB	'c:\users\user\documents\github\xashtasks\xash_build4529_'
	DB	'src\engine\common\net_encode.c', 00H
	ORG $+1
$SG140055 DB	'pField != NULL', 00H
	ORG $+1
$SG140181 DB	'c:\users\user\documents\github\xashtasks\xash_build4529_'
	DB	'src\engine\common\net_encode.c', 00H
	ORG $+1
$SG140182 DB	'pField->multiplier != 0.0f', 00H
	ORG $+1
$SG140233 DB	'usercmd_t', 00H
	ORG $+2
$SG140234 DB	'c:\users\user\documents\github\xashtasks\xash_build4529_'
	DB	'src\engine\common\net_encode.c', 00H
	ORG $+1
$SG140235 DB	'dt && dt->bInitialized', 00H
	ORG $+1
$SG140236 DB	'c:\users\user\documents\github\xashtasks\xash_build4529_'
	DB	'src\engine\common\net_encode.c', 00H
	ORG $+1
$SG140237 DB	'pField != NULL', 00H
	ORG $+1
$SG140254 DB	'usercmd_t', 00H
	ORG $+2
$SG140256 DB	'dt && dt->bInitialized', 00H
	ORG $+1
$SG140275 DB	'event_t', 00H
$SG140320 DB	'movevars_t', 00H
	ORG $+1
$SG140255 DB	'c:\users\user\documents\github\xashtasks\xash_build4529_'
	DB	'src\engine\common\net_encode.c', 00H
	ORG $+1
$SG140257 DB	'c:\users\user\documents\github\xashtasks\xash_build4529_'
	DB	'src\engine\common\net_encode.c', 00H
	ORG $+1
$SG140258 DB	'pField != NULL', 00H
	ORG $+1
$SG140276 DB	'c:\users\user\documents\github\xashtasks\xash_build4529_'
	DB	'src\engine\common\net_encode.c', 00H
	ORG $+1
$SG140277 DB	'dt && dt->bInitialized', 00H
	ORG $+1
$SG140278 DB	'c:\users\user\documents\github\xashtasks\xash_build4529_'
	DB	'src\engine\common\net_encode.c', 00H
	ORG $+1
$SG140279 DB	'pField != NULL', 00H
	ORG $+1
$SG140296 DB	'event_t', 00H
$SG140297 DB	'c:\users\user\documents\github\xashtasks\xash_build4529_'
	DB	'src\engine\common\net_encode.c', 00H
	ORG $+1
$SG140298 DB	'dt && dt->bInitialized', 00H
	ORG $+1
$SG140299 DB	'c:\users\user\documents\github\xashtasks\xash_build4529_'
	DB	'src\engine\common\net_encode.c', 00H
	ORG $+1
$SG140300 DB	'pField != NULL', 00H
	ORG $+1
$SG140321 DB	'c:\users\user\documents\github\xashtasks\xash_build4529_'
	DB	'src\engine\common\net_encode.c', 00H
	ORG $+1
$SG140322 DB	'dt && dt->bInitialized', 00H
	ORG $+1
$SG140323 DB	'c:\users\user\documents\github\xashtasks\xash_build4529_'
	DB	'src\engine\common\net_encode.c', 00H
	ORG $+1
$SG140324 DB	'pField != NULL', 00H
	ORG $+1
$SG140343 DB	'movevars_t', 00H
	ORG $+1
$SG140540 DB	'MSG_ReadDeltaEntity: bad delta entity number: %i', 0aH, 00H
	ORG $+2
$SG140344 DB	'c:\users\user\documents\github\xashtasks\xash_build4529_'
	DB	'src\engine\common\net_encode.c', 00H
	ORG $+1
$SG140345 DB	'dt && dt->bInitialized', 00H
	ORG $+1
$SG140346 DB	'c:\users\user\documents\github\xashtasks\xash_build4529_'
	DB	'src\engine\common\net_encode.c', 00H
	ORG $+1
$SG140347 DB	'pField != NULL', 00H
	ORG $+1
$SG140368 DB	'clientdata_t', 00H
	ORG $+3
$SG140369 DB	'c:\users\user\documents\github\xashtasks\xash_build4529_'
	DB	'src\engine\common\net_encode.c', 00H
	ORG $+1
$SG140370 DB	'dt && dt->bInitialized', 00H
	ORG $+1
$SG140371 DB	'c:\users\user\documents\github\xashtasks\xash_build4529_'
	DB	'src\engine\common\net_encode.c', 00H
	ORG $+1
$SG140372 DB	'pField != NULL', 00H
	ORG $+1
$SG140393 DB	'clientdata_t', 00H
	ORG $+3
$SG140394 DB	'c:\users\user\documents\github\xashtasks\xash_build4529_'
	DB	'src\engine\common\net_encode.c', 00H
	ORG $+1
$SG140395 DB	'dt && dt->bInitialized', 00H
	ORG $+1
$SG140396 DB	'c:\users\user\documents\github\xashtasks\xash_build4529_'
	DB	'src\engine\common\net_encode.c', 00H
	ORG $+1
$SG140397 DB	'pField != NULL', 00H
	ORG $+1
$SG140421 DB	'weapon_data_t', 00H
	ORG $+2
$SG140422 DB	'c:\users\user\documents\github\xashtasks\xash_build4529_'
	DB	'src\engine\common\net_encode.c', 00H
	ORG $+1
$SG140423 DB	'dt && dt->bInitialized', 00H
	ORG $+1
$SG140424 DB	'c:\users\user\documents\github\xashtasks\xash_build4529_'
	DB	'src\engine\common\net_encode.c', 00H
	ORG $+1
$SG140425 DB	'pField != NULL', 00H
	ORG $+1
$SG140446 DB	'weapon_data_t', 00H
	ORG $+2
$SG140447 DB	'c:\users\user\documents\github\xashtasks\xash_build4529_'
	DB	'src\engine\common\net_encode.c', 00H
	ORG $+1
$SG140448 DB	'dt && dt->bInitialized', 00H
	ORG $+1
$SG140449 DB	'c:\users\user\documents\github\xashtasks\xash_build4529_'
	DB	'src\engine\common\net_encode.c', 00H
	ORG $+1
$SG140450 DB	'pField != NULL', 00H
	ORG $+1
$SG140490 DB	'MSG_WriteDeltaEntity: Bad entity number: %i', 0aH, 00H
	ORG $+3
$SG140498 DB	'custom_entity_state_t', 00H
	ORG $+2
$SG140501 DB	'entity_state_player_t', 00H
	ORG $+2
$SG140502 DB	'entity_state_t', 00H
	ORG $+1
$SG140503 DB	'c:\users\user\documents\github\xashtasks\xash_build4529_'
	DB	'src\engine\common\net_encode.c', 00H
	ORG $+1
$SG140504 DB	'dt && dt->bInitialized', 00H
	ORG $+1
$SG140505 DB	'c:\users\user\documents\github\xashtasks\xash_build4529_'
	DB	'src\engine\common\net_encode.c', 00H
	ORG $+1
$SG140506 DB	'pField != NULL', 00H
	ORG $+1
$SG140544 DB	'MSG_ReadDeltaEntity: unknown update type %i', 0aH, 00H
	ORG $+3
$SG140555 DB	'custom_entity_state_t', 00H
	ORG $+2
$SG140558 DB	'entity_state_player_t', 00H
	ORG $+2
$SG140559 DB	'entity_state_t', 00H
	ORG $+1
$SG140560 DB	'c:\users\user\documents\github\xashtasks\xash_build4529_'
	DB	'src\engine\common\net_encode.c', 00H
	ORG $+1
$SG140561 DB	'dt && dt->bInitialized', 00H
	ORG $+1
$SG140562 DB	'c:\users\user\documents\github\xashtasks\xash_build4529_'
	DB	'src\engine\common\net_encode.c', 00H
	ORG $+1
$SG140563 DB	'pField != NULL', 00H
	ORG $+1
$SG140572 DB	'^1Error:^7 Delta_AddEncoder: couldn''t find delta with s'
	DB	'pecified custom encode %s', 0aH, 00H
	ORG $+6
$SG140574 DB	'^1Error:^7 Delta_AddEncoder: %s not supposed for custom '
	DB	'encoding', 0aH, 00H
_DATA	ENDS
; Function compile flags: /Odtp
; File c:\users\user\documents\github\xashtasks\xash_build4529_src\engine\common\net_encode.c
_TEXT	SEGMENT
tv409 = -88						; size = 8
tv353 = -80						; size = 8
tv324 = -72						; size = 8
tv295 = -64						; size = 8
_pOut$ = -56						; size = 4
_pStr$ = -52						; size = 4
tv405 = -48						; size = 4
_flAngle$ = -44						; size = 4
tv349 = -40						; size = 4
tv320 = -36						; size = 4
tv291 = -32						; size = 4
tv76 = -28						; size = 4
tv67 = -24						; size = 4
_flTime$ = -20						; size = 4
_bSigned$ = -16						; size = 4
_flValue$ = -12						; size = 4
_bChanged$ = -8						; size = 4
_iValue$ = -4						; size = 4
_msg$ = 8						; size = 4
_pField$ = 12						; size = 4
_from$ = 16						; size = 4
_to$ = 20						; size = 4
_timebase$ = 24						; size = 4
_Delta_ReadField PROC

; 1170 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 88					; 00000058H

; 1171 : 	qboolean		bSigned = ( pField->flags & DT_SIGNED ) ? true : false;

	mov	eax, DWORD PTR _pField$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	and	ecx, 256				; 00000100H
	je	SHORT $LN37@Delta_Read
	mov	DWORD PTR tv67[ebp], 1
	jmp	SHORT $LN38@Delta_Read
$LN37@Delta_Read:
	mov	DWORD PTR tv67[ebp], 0
$LN38@Delta_Read:
	mov	edx, DWORD PTR tv67[ebp]
	mov	DWORD PTR _bSigned$[ebp], edx

; 1172 : 	float		flValue, flAngle, flTime;
; 1173 : 	qboolean		bChanged;
; 1174 : 	uint		iValue;	
; 1175 : 	const char	*pStr;
; 1176 : 	char		*pOut;
; 1177 : 	
; 1178 : 	bChanged = MSG_ReadOneBit( msg );

	mov	eax, DWORD PTR _msg$[ebp]
	push	eax
	call	_MSG_ReadOneBit
	add	esp, 4
	mov	DWORD PTR _bChanged$[ebp], eax

; 1179 : 
; 1180 : 	Assert( pField->multiplier != 0.0f );

	mov	ecx, DWORD PTR _pField$[ebp]
	movss	xmm0, DWORD PTR [ecx+16]
	ucomiss	xmm0, DWORD PTR __real@00000000
	lahf
	test	ah, 68					; 00000044H
	jnp	SHORT $LN39@Delta_Read
	mov	DWORD PTR tv76[ebp], 1
	jmp	SHORT $LN40@Delta_Read
$LN39@Delta_Read:
	mov	DWORD PTR tv76[ebp], 0
$LN40@Delta_Read:
	push	0
	push	1180					; 0000049cH
	push	OFFSET $SG140181
	push	OFFSET $SG140182
	mov	edx, DWORD PTR tv76[ebp]
	push	edx
	call	_DBG_AssertFunction
	add	esp, 20					; 00000014H

; 1181 : 
; 1182 : 	if( pField->flags & DT_BYTE )

	mov	eax, DWORD PTR _pField$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	and	ecx, 1
	je	$LN2@Delta_Read

; 1183 : 	{
; 1184 : 		if( bChanged )

	cmp	DWORD PTR _bChanged$[ebp], 0
	je	SHORT $LN4@Delta_Read

; 1185 : 		{
; 1186 : 			iValue = MSG_ReadBitLong( msg, pField->bits, bSigned );

	mov	edx, DWORD PTR _bSigned$[ebp]
	push	edx
	mov	eax, DWORD PTR _pField$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	push	ecx
	mov	edx, DWORD PTR _msg$[ebp]
	push	edx
	call	_MSG_ReadBitLong
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _iValue$[ebp], eax

; 1187 : 			if( pField->multiplier != 1.0f ) iValue /= pField->multiplier;

	mov	eax, DWORD PTR _pField$[ebp]
	movss	xmm0, DWORD PTR [eax+16]
	ucomiss	xmm0, DWORD PTR __real@3f800000
	lahf
	test	ah, 68					; 00000044H
	jnp	SHORT $LN6@Delta_Read
	mov	ecx, DWORD PTR _iValue$[ebp]
	mov	DWORD PTR tv291[ebp], ecx
	cvtsi2sd xmm0, DWORD PTR tv291[ebp]
	mov	edx, DWORD PTR tv291[ebp]
	shr	edx, 31					; 0000001fH
	addsd	xmm0, QWORD PTR __xmm@41f00000000000000000000000000000[edx*8]
	movsd	QWORD PTR tv295[ebp], xmm0
	cvtsd2ss xmm0, QWORD PTR tv295[ebp]
	mov	eax, DWORD PTR _pField$[ebp]
	divss	xmm0, DWORD PTR [eax+16]
	call	__ftoui3
	mov	DWORD PTR _iValue$[ebp], eax
$LN6@Delta_Read:

; 1188 : 		}

	jmp	SHORT $LN5@Delta_Read
$LN4@Delta_Read:

; 1189 : 		else
; 1190 : 		{
; 1191 : 			iValue = *(byte *)((byte *)from + pField->offset );

	mov	ecx, DWORD PTR _pField$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR _from$[ebp]
	movzx	ecx, BYTE PTR [eax+edx]
	mov	DWORD PTR _iValue$[ebp], ecx
$LN5@Delta_Read:

; 1192 : 		}
; 1193 : 		*(byte *)((byte *)to + pField->offset ) = iValue;

	mov	edx, DWORD PTR _pField$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR _to$[ebp]
	mov	dl, BYTE PTR _iValue$[ebp]
	mov	BYTE PTR [ecx+eax], dl

; 1194 : 	}

	jmp	$LN33@Delta_Read
$LN2@Delta_Read:

; 1195 : 	else if( pField->flags & DT_SHORT )

	mov	eax, DWORD PTR _pField$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	and	ecx, 2
	je	$LN7@Delta_Read

; 1196 : 	{
; 1197 : 		if( bChanged )

	cmp	DWORD PTR _bChanged$[ebp], 0
	je	SHORT $LN9@Delta_Read

; 1198 : 		{
; 1199 : 			iValue = MSG_ReadBitLong( msg, pField->bits, bSigned );

	mov	edx, DWORD PTR _bSigned$[ebp]
	push	edx
	mov	eax, DWORD PTR _pField$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	push	ecx
	mov	edx, DWORD PTR _msg$[ebp]
	push	edx
	call	_MSG_ReadBitLong
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _iValue$[ebp], eax

; 1200 : 			if( pField->multiplier != 1.0f ) iValue /= pField->multiplier;

	mov	eax, DWORD PTR _pField$[ebp]
	movss	xmm0, DWORD PTR [eax+16]
	ucomiss	xmm0, DWORD PTR __real@3f800000
	lahf
	test	ah, 68					; 00000044H
	jnp	SHORT $LN11@Delta_Read
	mov	ecx, DWORD PTR _iValue$[ebp]
	mov	DWORD PTR tv320[ebp], ecx
	cvtsi2sd xmm0, DWORD PTR tv320[ebp]
	mov	edx, DWORD PTR tv320[ebp]
	shr	edx, 31					; 0000001fH
	addsd	xmm0, QWORD PTR __xmm@41f00000000000000000000000000000[edx*8]
	movsd	QWORD PTR tv324[ebp], xmm0
	cvtsd2ss xmm0, QWORD PTR tv324[ebp]
	mov	eax, DWORD PTR _pField$[ebp]
	divss	xmm0, DWORD PTR [eax+16]
	call	__ftoui3
	mov	DWORD PTR _iValue$[ebp], eax
$LN11@Delta_Read:

; 1201 : 		}

	jmp	SHORT $LN10@Delta_Read
$LN9@Delta_Read:

; 1202 : 		else
; 1203 : 		{
; 1204 : 			iValue = *(word *)((byte *)from + pField->offset );

	mov	ecx, DWORD PTR _pField$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR _from$[ebp]
	movzx	ecx, WORD PTR [eax+edx]
	mov	DWORD PTR _iValue$[ebp], ecx
$LN10@Delta_Read:

; 1205 : 		}
; 1206 : 		*(word *)((byte *)to + pField->offset ) = iValue;

	mov	edx, DWORD PTR _pField$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR _to$[ebp]
	mov	dx, WORD PTR _iValue$[ebp]
	mov	WORD PTR [ecx+eax], dx

; 1207 : 	}

	jmp	$LN33@Delta_Read
$LN7@Delta_Read:

; 1208 : 	else if( pField->flags & DT_INTEGER )

	mov	eax, DWORD PTR _pField$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	and	ecx, 8
	je	$LN12@Delta_Read

; 1209 : 	{
; 1210 : 		if( bChanged )

	cmp	DWORD PTR _bChanged$[ebp], 0
	je	SHORT $LN14@Delta_Read

; 1211 : 		{
; 1212 : 			iValue = MSG_ReadBitLong( msg, pField->bits, bSigned );

	mov	edx, DWORD PTR _bSigned$[ebp]
	push	edx
	mov	eax, DWORD PTR _pField$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	push	ecx
	mov	edx, DWORD PTR _msg$[ebp]
	push	edx
	call	_MSG_ReadBitLong
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _iValue$[ebp], eax

; 1213 : 			if( pField->multiplier != 1.0f ) iValue /= pField->multiplier;

	mov	eax, DWORD PTR _pField$[ebp]
	movss	xmm0, DWORD PTR [eax+16]
	ucomiss	xmm0, DWORD PTR __real@3f800000
	lahf
	test	ah, 68					; 00000044H
	jnp	SHORT $LN16@Delta_Read
	mov	ecx, DWORD PTR _iValue$[ebp]
	mov	DWORD PTR tv349[ebp], ecx
	cvtsi2sd xmm0, DWORD PTR tv349[ebp]
	mov	edx, DWORD PTR tv349[ebp]
	shr	edx, 31					; 0000001fH
	addsd	xmm0, QWORD PTR __xmm@41f00000000000000000000000000000[edx*8]
	movsd	QWORD PTR tv353[ebp], xmm0
	cvtsd2ss xmm0, QWORD PTR tv353[ebp]
	mov	eax, DWORD PTR _pField$[ebp]
	divss	xmm0, DWORD PTR [eax+16]
	call	__ftoui3
	mov	DWORD PTR _iValue$[ebp], eax
$LN16@Delta_Read:

; 1214 : 		}

	jmp	SHORT $LN15@Delta_Read
$LN14@Delta_Read:

; 1215 : 		else
; 1216 : 		{
; 1217 : 			iValue = *(uint *)((byte *)from + pField->offset );

	mov	ecx, DWORD PTR _pField$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR _from$[ebp]
	mov	ecx, DWORD PTR [eax+edx]
	mov	DWORD PTR _iValue$[ebp], ecx
$LN15@Delta_Read:

; 1218 : 		}
; 1219 : 		*(uint *)((byte *)to + pField->offset ) = iValue;

	mov	edx, DWORD PTR _pField$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR _to$[ebp]
	mov	edx, DWORD PTR _iValue$[ebp]
	mov	DWORD PTR [ecx+eax], edx

; 1220 : 	}

	jmp	$LN33@Delta_Read
$LN12@Delta_Read:

; 1221 : 	else if( pField->flags & DT_FLOAT )

	mov	eax, DWORD PTR _pField$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	and	ecx, 4
	je	SHORT $LN17@Delta_Read

; 1222 : 	{
; 1223 : 		if( bChanged )

	cmp	DWORD PTR _bChanged$[ebp], 0
	je	SHORT $LN19@Delta_Read

; 1224 : 		{
; 1225 : 			iValue = MSG_ReadBitLong( msg, pField->bits, bSigned );

	mov	edx, DWORD PTR _bSigned$[ebp]
	push	edx
	mov	eax, DWORD PTR _pField$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	push	ecx
	mov	edx, DWORD PTR _msg$[ebp]
	push	edx
	call	_MSG_ReadBitLong
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _iValue$[ebp], eax

; 1226 : 			flValue = (int)iValue * ( 1.0f / pField->multiplier );

	cvtsi2ss xmm0, DWORD PTR _iValue$[ebp]
	mov	eax, DWORD PTR _pField$[ebp]
	movss	xmm1, DWORD PTR __real@3f800000
	divss	xmm1, DWORD PTR [eax+16]
	mulss	xmm0, xmm1
	movss	DWORD PTR _flValue$[ebp], xmm0

; 1227 : 			flValue = flValue * pField->post_multiplier;

	mov	ecx, DWORD PTR _pField$[ebp]
	movss	xmm0, DWORD PTR _flValue$[ebp]
	mulss	xmm0, DWORD PTR [ecx+20]
	movss	DWORD PTR _flValue$[ebp], xmm0

; 1228 : 		}

	jmp	SHORT $LN20@Delta_Read
$LN19@Delta_Read:

; 1229 : 		else
; 1230 : 		{
; 1231 : 			flValue = *(float *)((byte *)from + pField->offset );

	mov	edx, DWORD PTR _pField$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR _from$[ebp]
	movss	xmm0, DWORD PTR [ecx+eax]
	movss	DWORD PTR _flValue$[ebp], xmm0
$LN20@Delta_Read:

; 1232 : 		}
; 1233 : 		*(float *)((byte *)to + pField->offset ) = flValue;

	mov	edx, DWORD PTR _pField$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR _to$[ebp]
	movss	xmm0, DWORD PTR _flValue$[ebp]
	movss	DWORD PTR [ecx+eax], xmm0

; 1234 : 	}

	jmp	$LN33@Delta_Read
$LN17@Delta_Read:

; 1235 : 	else if( pField->flags & DT_ANGLE )

	mov	edx, DWORD PTR _pField$[ebp]
	mov	eax, DWORD PTR [edx+12]
	and	eax, 16					; 00000010H
	je	SHORT $LN21@Delta_Read

; 1236 : 	{
; 1237 : 		if( bChanged )

	cmp	DWORD PTR _bChanged$[ebp], 0
	je	SHORT $LN23@Delta_Read

; 1238 : 		{
; 1239 : 			flAngle = MSG_ReadBitAngle( msg, pField->bits );

	mov	ecx, DWORD PTR _pField$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	push	edx
	mov	eax, DWORD PTR _msg$[ebp]
	push	eax
	call	_MSG_ReadBitAngle
	add	esp, 8
	fstp	DWORD PTR _flAngle$[ebp]

; 1240 : 		}

	jmp	SHORT $LN24@Delta_Read
$LN23@Delta_Read:

; 1241 : 		else
; 1242 : 		{
; 1243 : 			flAngle = *(float *)((byte *)from + pField->offset );

	mov	ecx, DWORD PTR _pField$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR _from$[ebp]
	movss	xmm0, DWORD PTR [eax+edx]
	movss	DWORD PTR _flAngle$[ebp], xmm0
$LN24@Delta_Read:

; 1244 : 		}
; 1245 : 		*(float *)((byte *)to + pField->offset ) = flAngle;

	mov	ecx, DWORD PTR _pField$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR _to$[ebp]
	movss	xmm0, DWORD PTR _flAngle$[ebp]
	movss	DWORD PTR [eax+edx], xmm0

; 1246 : 	}

	jmp	$LN33@Delta_Read
$LN21@Delta_Read:

; 1247 : 	else if( pField->flags & DT_TIMEWINDOW_8 )

	mov	ecx, DWORD PTR _pField$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	and	edx, 32					; 00000020H
	je	$LN25@Delta_Read

; 1248 : 	{
; 1249 : 		if( bChanged )

	cmp	DWORD PTR _bChanged$[ebp], 0
	je	SHORT $LN27@Delta_Read

; 1250 : 		{
; 1251 : 			iValue = MSG_ReadBitLong( msg, pField->bits, bSigned );

	mov	eax, DWORD PTR _bSigned$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pField$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	push	edx
	mov	eax, DWORD PTR _msg$[ebp]
	push	eax
	call	_MSG_ReadBitLong
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _iValue$[ebp], eax

; 1252 : 			flValue = (float)((int)(iValue * 0.01f ));

	mov	ecx, DWORD PTR _iValue$[ebp]
	mov	DWORD PTR tv405[ebp], ecx
	cvtsi2sd xmm0, DWORD PTR tv405[ebp]
	mov	edx, DWORD PTR tv405[ebp]
	shr	edx, 31					; 0000001fH
	addsd	xmm0, QWORD PTR __xmm@41f00000000000000000000000000000[edx*8]
	movsd	QWORD PTR tv409[ebp], xmm0
	cvtsd2ss xmm0, QWORD PTR tv409[ebp]
	mulss	xmm0, DWORD PTR __real@3c23d70a
	cvttss2si eax, xmm0
	cvtsi2ss xmm0, eax
	movss	DWORD PTR _flValue$[ebp], xmm0

; 1253 : 			flTime = timebase + flValue;

	movss	xmm0, DWORD PTR _timebase$[ebp]
	addss	xmm0, DWORD PTR _flValue$[ebp]
	movss	DWORD PTR _flTime$[ebp], xmm0

; 1254 : 		}

	jmp	SHORT $LN28@Delta_Read
$LN27@Delta_Read:

; 1255 : 		else
; 1256 : 		{
; 1257 : 			flTime = *(float *)((byte *)from + pField->offset );

	mov	ecx, DWORD PTR _pField$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR _from$[ebp]
	movss	xmm0, DWORD PTR [eax+edx]
	movss	DWORD PTR _flTime$[ebp], xmm0
$LN28@Delta_Read:

; 1258 : 		}
; 1259 : 		*(float *)((byte *)to + pField->offset ) = flTime;

	mov	ecx, DWORD PTR _pField$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR _to$[ebp]
	movss	xmm0, DWORD PTR _flTime$[ebp]
	movss	DWORD PTR [eax+edx], xmm0

; 1260 : 	}

	jmp	$LN33@Delta_Read
$LN25@Delta_Read:

; 1261 : 	else if( pField->flags & DT_TIMEWINDOW_BIG )

	mov	ecx, DWORD PTR _pField$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	and	edx, 64					; 00000040H
	je	SHORT $LN29@Delta_Read

; 1262 : 	{
; 1263 : 		if( bChanged )

	cmp	DWORD PTR _bChanged$[ebp], 0
	je	SHORT $LN31@Delta_Read

; 1264 : 		{
; 1265 : 			iValue = MSG_ReadBitLong( msg, pField->bits, bSigned );

	mov	eax, DWORD PTR _bSigned$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pField$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	push	edx
	mov	eax, DWORD PTR _msg$[ebp]
	push	eax
	call	_MSG_ReadBitLong
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _iValue$[ebp], eax

; 1266 : 			flValue = (float)((int)iValue) * ( 1.0f / pField->multiplier );

	cvtsi2ss xmm0, DWORD PTR _iValue$[ebp]
	mov	ecx, DWORD PTR _pField$[ebp]
	movss	xmm1, DWORD PTR __real@3f800000
	divss	xmm1, DWORD PTR [ecx+16]
	mulss	xmm0, xmm1
	movss	DWORD PTR _flValue$[ebp], xmm0

; 1267 : 			flTime = timebase + flValue;

	movss	xmm0, DWORD PTR _timebase$[ebp]
	addss	xmm0, DWORD PTR _flValue$[ebp]
	movss	DWORD PTR _flTime$[ebp], xmm0

; 1268 : 		}

	jmp	SHORT $LN32@Delta_Read
$LN31@Delta_Read:

; 1269 : 		else
; 1270 : 		{
; 1271 : 			flTime = *(float *)((byte *)from + pField->offset );

	mov	edx, DWORD PTR _pField$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR _from$[ebp]
	movss	xmm0, DWORD PTR [ecx+eax]
	movss	DWORD PTR _flTime$[ebp], xmm0
$LN32@Delta_Read:

; 1272 : 		}
; 1273 : 		*(float *)((byte *)to + pField->offset ) = flTime;

	mov	edx, DWORD PTR _pField$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR _to$[ebp]
	movss	xmm0, DWORD PTR _flTime$[ebp]
	movss	DWORD PTR [ecx+eax], xmm0

; 1274 : 	}

	jmp	SHORT $LN33@Delta_Read
$LN29@Delta_Read:

; 1275 : 	else if( pField->flags & DT_STRING )

	mov	edx, DWORD PTR _pField$[ebp]
	mov	eax, DWORD PTR [edx+12]
	and	eax, 128				; 00000080H
	je	SHORT $LN33@Delta_Read

; 1276 : 	{
; 1277 : 		if( bChanged )

	cmp	DWORD PTR _bChanged$[ebp], 0
	je	SHORT $LN34@Delta_Read

; 1278 : 		{
; 1279 : 			pStr = MSG_ReadString( msg );

	push	0
	mov	ecx, DWORD PTR _msg$[ebp]
	push	ecx
	call	_MSG_ReadStringExt
	add	esp, 8
	mov	DWORD PTR _pStr$[ebp], eax

; 1280 : 		}

	jmp	SHORT $LN35@Delta_Read
$LN34@Delta_Read:

; 1281 : 		else
; 1282 : 		{
; 1283 : 			pStr = (char *)((byte *)from + pField->offset );

	mov	edx, DWORD PTR _pField$[ebp]
	mov	eax, DWORD PTR _from$[ebp]
	add	eax, DWORD PTR [edx+4]
	mov	DWORD PTR _pStr$[ebp], eax
$LN35@Delta_Read:

; 1284 : 		}
; 1285 : 
; 1286 : 		pOut = (char *)((byte *)to + pField->offset );

	mov	ecx, DWORD PTR _pField$[ebp]
	mov	edx, DWORD PTR _to$[ebp]
	add	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR _pOut$[ebp], edx

; 1287 : 		Q_strncpy( pOut, pStr, pField->size );

	mov	eax, DWORD PTR _pField$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	mov	edx, DWORD PTR _pStr$[ebp]
	push	edx
	mov	eax, DWORD PTR _pOut$[ebp]
	push	eax
	call	_Q_strncpy
	add	esp, 12					; 0000000cH
$LN33@Delta_Read:

; 1288 : 	}
; 1289 : 	return bChanged;

	mov	eax, DWORD PTR _bChanged$[ebp]

; 1290 : }

	mov	esp, ebp
	pop	ebp
	ret	0
_Delta_ReadField ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\documents\github\xashtasks\xash_build4529_src\engine\common\net_encode.c
_TEXT	SEGMENT
tv421 = -80						; size = 8
tv388 = -72						; size = 8
tv356 = -64						; size = 8
_pStr$ = -56						; size = 4
_flAngle$ = -52						; size = 4
tv294 = -48						; size = 4
tv277 = -44						; size = 4
tv239 = -40						; size = 4
tv225 = -36						; size = 4
tv417 = -32						; size = 4
tv384 = -28						; size = 4
tv352 = -24						; size = 4
tv67 = -20						; size = 4
_flTime$ = -16						; size = 4
_flValue$ = -12						; size = 4
_bSigned$ = -8						; size = 4
_iValue$ = -4						; size = 4
_msg$ = 8						; size = 4
_pField$ = 12						; size = 4
_from$ = 16						; size = 4
_to$ = 20						; size = 4
_timebase$ = 24						; size = 4
_Delta_WriteField PROC

; 1087 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 80					; 00000050H

; 1088 : 	qboolean		bSigned = ( pField->flags & DT_SIGNED ) ? true : false;

	mov	eax, DWORD PTR _pField$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	and	ecx, 256				; 00000100H
	je	SHORT $LN22@Delta_Writ
	mov	DWORD PTR tv67[ebp], 1
	jmp	SHORT $LN23@Delta_Writ
$LN22@Delta_Writ:
	mov	DWORD PTR tv67[ebp], 0
$LN23@Delta_Writ:
	mov	edx, DWORD PTR tv67[ebp]
	mov	DWORD PTR _bSigned$[ebp], edx

; 1089 : 	float		flValue, flAngle, flTime;
; 1090 : 	uint		iValue;
; 1091 : 	const char	*pStr;
; 1092 : 
; 1093 : 	if( Delta_CompareField( pField, from, to, timebase ))

	push	ecx
	movss	xmm0, DWORD PTR _timebase$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _to$[ebp]
	push	eax
	mov	ecx, DWORD PTR _from$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pField$[ebp]
	push	edx
	call	_Delta_CompareField
	add	esp, 16					; 00000010H
	test	eax, eax
	je	SHORT $LN2@Delta_Writ

; 1094 : 	{
; 1095 : 		MSG_WriteOneBit( msg, 0 );	// unchanged

	push	0
	mov	eax, DWORD PTR _msg$[ebp]
	push	eax
	call	_MSG_WriteOneBit
	add	esp, 8

; 1096 : 		return false;

	xor	eax, eax
	jmp	$LN1@Delta_Writ
$LN2@Delta_Writ:

; 1097 : 	}
; 1098 : 
; 1099 : 	MSG_WriteOneBit( msg, 1 );	// changed

	push	1
	mov	ecx, DWORD PTR _msg$[ebp]
	push	ecx
	call	_MSG_WriteOneBit
	add	esp, 8

; 1100 : 
; 1101 : 	if( pField->flags & DT_BYTE )

	mov	edx, DWORD PTR _pField$[ebp]
	mov	eax, DWORD PTR [edx+12]
	and	eax, 1
	je	$LN3@Delta_Writ

; 1102 : 	{
; 1103 : 		iValue = *(byte *)((byte *)to + pField->offset );

	mov	ecx, DWORD PTR _pField$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR _to$[ebp]
	movzx	ecx, BYTE PTR [eax+edx]
	mov	DWORD PTR _iValue$[ebp], ecx

; 1104 : 		iValue = Delta_ClampIntegerField( pField, iValue, bSigned, pField->bits );

	mov	edx, DWORD PTR _pField$[ebp]
	mov	eax, DWORD PTR [edx+24]
	push	eax
	mov	ecx, DWORD PTR _bSigned$[ebp]
	push	ecx
	mov	edx, DWORD PTR _iValue$[ebp]
	push	edx
	mov	eax, DWORD PTR _pField$[ebp]
	push	eax
	call	_Delta_ClampIntegerField
	add	esp, 16					; 00000010H
	mov	DWORD PTR _iValue$[ebp], eax

; 1105 : 		if( pField->multiplier != 1.0f ) iValue *= pField->multiplier;

	mov	ecx, DWORD PTR _pField$[ebp]
	movss	xmm0, DWORD PTR [ecx+16]
	ucomiss	xmm0, DWORD PTR __real@3f800000
	lahf
	test	ah, 68					; 00000044H
	jnp	SHORT $LN5@Delta_Writ
	mov	edx, DWORD PTR _iValue$[ebp]
	mov	DWORD PTR tv352[ebp], edx
	cvtsi2sd xmm0, DWORD PTR tv352[ebp]
	mov	eax, DWORD PTR tv352[ebp]
	shr	eax, 31					; 0000001fH
	addsd	xmm0, QWORD PTR __xmm@41f00000000000000000000000000000[eax*8]
	movsd	QWORD PTR tv356[ebp], xmm0
	cvtsd2ss xmm0, QWORD PTR tv356[ebp]
	mov	ecx, DWORD PTR _pField$[ebp]
	mulss	xmm0, DWORD PTR [ecx+16]
	call	__ftoui3
	mov	DWORD PTR _iValue$[ebp], eax
$LN5@Delta_Writ:

; 1106 : 		MSG_WriteBitLong( msg, iValue, pField->bits, bSigned );

	mov	edx, DWORD PTR _bSigned$[ebp]
	push	edx
	mov	eax, DWORD PTR _pField$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	push	ecx
	mov	edx, DWORD PTR _iValue$[ebp]
	push	edx
	mov	eax, DWORD PTR _msg$[ebp]
	push	eax
	call	_MSG_WriteBitLong
	add	esp, 16					; 00000010H

; 1107 : 	}

	jmp	$LN20@Delta_Writ
$LN3@Delta_Writ:

; 1108 : 	else if( pField->flags & DT_SHORT )

	mov	ecx, DWORD PTR _pField$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	and	edx, 2
	je	$LN6@Delta_Writ

; 1109 : 	{
; 1110 : 		iValue = *(word *)((byte *)to + pField->offset );

	mov	eax, DWORD PTR _pField$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _to$[ebp]
	movzx	eax, WORD PTR [edx+ecx]
	mov	DWORD PTR _iValue$[ebp], eax

; 1111 : 		iValue = Delta_ClampIntegerField( pField, iValue, bSigned, pField->bits );

	mov	ecx, DWORD PTR _pField$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	push	edx
	mov	eax, DWORD PTR _bSigned$[ebp]
	push	eax
	mov	ecx, DWORD PTR _iValue$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pField$[ebp]
	push	edx
	call	_Delta_ClampIntegerField
	add	esp, 16					; 00000010H
	mov	DWORD PTR _iValue$[ebp], eax

; 1112 : 		if( pField->multiplier != 1.0f ) iValue *= pField->multiplier;

	mov	eax, DWORD PTR _pField$[ebp]
	movss	xmm0, DWORD PTR [eax+16]
	ucomiss	xmm0, DWORD PTR __real@3f800000
	lahf
	test	ah, 68					; 00000044H
	jnp	SHORT $LN8@Delta_Writ
	mov	ecx, DWORD PTR _iValue$[ebp]
	mov	DWORD PTR tv384[ebp], ecx
	cvtsi2sd xmm0, DWORD PTR tv384[ebp]
	mov	edx, DWORD PTR tv384[ebp]
	shr	edx, 31					; 0000001fH
	addsd	xmm0, QWORD PTR __xmm@41f00000000000000000000000000000[edx*8]
	movsd	QWORD PTR tv388[ebp], xmm0
	cvtsd2ss xmm0, QWORD PTR tv388[ebp]
	mov	eax, DWORD PTR _pField$[ebp]
	mulss	xmm0, DWORD PTR [eax+16]
	call	__ftoui3
	mov	DWORD PTR _iValue$[ebp], eax
$LN8@Delta_Writ:

; 1113 : 		MSG_WriteBitLong( msg, iValue, pField->bits, bSigned );

	mov	ecx, DWORD PTR _bSigned$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pField$[ebp]
	mov	eax, DWORD PTR [edx+24]
	push	eax
	mov	ecx, DWORD PTR _iValue$[ebp]
	push	ecx
	mov	edx, DWORD PTR _msg$[ebp]
	push	edx
	call	_MSG_WriteBitLong
	add	esp, 16					; 00000010H

; 1114 : 	}

	jmp	$LN20@Delta_Writ
$LN6@Delta_Writ:

; 1115 : 	else if( pField->flags & DT_INTEGER )

	mov	eax, DWORD PTR _pField$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	and	ecx, 8
	je	$LN9@Delta_Writ

; 1116 : 	{
; 1117 : 		iValue = *(uint *)((byte *)to + pField->offset );

	mov	edx, DWORD PTR _pField$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR _to$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	mov	DWORD PTR _iValue$[ebp], edx

; 1118 : 		iValue = Delta_ClampIntegerField( pField, iValue, bSigned, pField->bits );

	mov	eax, DWORD PTR _pField$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	push	ecx
	mov	edx, DWORD PTR _bSigned$[ebp]
	push	edx
	mov	eax, DWORD PTR _iValue$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pField$[ebp]
	push	ecx
	call	_Delta_ClampIntegerField
	add	esp, 16					; 00000010H
	mov	DWORD PTR _iValue$[ebp], eax

; 1119 : 		if( pField->multiplier != 1.0f ) iValue *= pField->multiplier;

	mov	edx, DWORD PTR _pField$[ebp]
	movss	xmm0, DWORD PTR [edx+16]
	ucomiss	xmm0, DWORD PTR __real@3f800000
	lahf
	test	ah, 68					; 00000044H
	jnp	SHORT $LN11@Delta_Writ
	mov	eax, DWORD PTR _iValue$[ebp]
	mov	DWORD PTR tv417[ebp], eax
	cvtsi2sd xmm0, DWORD PTR tv417[ebp]
	mov	ecx, DWORD PTR tv417[ebp]
	shr	ecx, 31					; 0000001fH
	addsd	xmm0, QWORD PTR __xmm@41f00000000000000000000000000000[ecx*8]
	movsd	QWORD PTR tv421[ebp], xmm0
	cvtsd2ss xmm0, QWORD PTR tv421[ebp]
	mov	edx, DWORD PTR _pField$[ebp]
	mulss	xmm0, DWORD PTR [edx+16]
	call	__ftoui3
	mov	DWORD PTR _iValue$[ebp], eax
$LN11@Delta_Writ:

; 1120 : 		MSG_WriteBitLong( msg, iValue, pField->bits, bSigned );

	mov	eax, DWORD PTR _bSigned$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pField$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	push	edx
	mov	eax, DWORD PTR _iValue$[ebp]
	push	eax
	mov	ecx, DWORD PTR _msg$[ebp]
	push	ecx
	call	_MSG_WriteBitLong
	add	esp, 16					; 00000010H

; 1121 : 	}

	jmp	$LN20@Delta_Writ
$LN9@Delta_Writ:

; 1122 : 	else if( pField->flags & DT_FLOAT )

	mov	edx, DWORD PTR _pField$[ebp]
	mov	eax, DWORD PTR [edx+12]
	and	eax, 4
	je	SHORT $LN12@Delta_Writ

; 1123 : 	{
; 1124 : 		flValue = *(float *)((byte *)to + pField->offset );

	mov	ecx, DWORD PTR _pField$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR _to$[ebp]
	movss	xmm0, DWORD PTR [eax+edx]
	movss	DWORD PTR _flValue$[ebp], xmm0

; 1125 : 		iValue = (int)(flValue * pField->multiplier);

	mov	ecx, DWORD PTR _pField$[ebp]
	movss	xmm0, DWORD PTR _flValue$[ebp]
	mulss	xmm0, DWORD PTR [ecx+16]
	cvttss2si edx, xmm0
	mov	DWORD PTR _iValue$[ebp], edx

; 1126 : 		iValue = Delta_ClampIntegerField( pField, iValue, bSigned, pField->bits );

	mov	eax, DWORD PTR _pField$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	push	ecx
	mov	edx, DWORD PTR _bSigned$[ebp]
	push	edx
	mov	eax, DWORD PTR _iValue$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pField$[ebp]
	push	ecx
	call	_Delta_ClampIntegerField
	add	esp, 16					; 00000010H
	mov	DWORD PTR _iValue$[ebp], eax

; 1127 : 		MSG_WriteBitLong( msg, iValue, pField->bits, bSigned );

	mov	edx, DWORD PTR _bSigned$[ebp]
	push	edx
	mov	eax, DWORD PTR _pField$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	push	ecx
	mov	edx, DWORD PTR _iValue$[ebp]
	push	edx
	mov	eax, DWORD PTR _msg$[ebp]
	push	eax
	call	_MSG_WriteBitLong
	add	esp, 16					; 00000010H

; 1128 : 	}

	jmp	$LN20@Delta_Writ
$LN12@Delta_Writ:

; 1129 : 	else if( pField->flags & DT_ANGLE )

	mov	ecx, DWORD PTR _pField$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	and	edx, 16					; 00000010H
	je	SHORT $LN14@Delta_Writ

; 1130 : 	{
; 1131 : 		flAngle = *(float *)((byte *)to + pField->offset );

	mov	eax, DWORD PTR _pField$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _to$[ebp]
	movss	xmm0, DWORD PTR [edx+ecx]
	movss	DWORD PTR _flAngle$[ebp], xmm0

; 1132 : 
; 1133 : 		// NOTE: never applies multipliers to angle because
; 1134 : 		// result may be wrong on client-side
; 1135 : 		MSG_WriteBitAngle( msg, flAngle, pField->bits );

	mov	eax, DWORD PTR _pField$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	push	ecx
	push	ecx
	movss	xmm0, DWORD PTR _flAngle$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _msg$[ebp]
	push	edx
	call	_MSG_WriteBitAngle
	add	esp, 12					; 0000000cH

; 1136 : 	}

	jmp	$LN20@Delta_Writ
$LN14@Delta_Writ:

; 1137 : 	else if( pField->flags & DT_TIMEWINDOW_8 )

	mov	eax, DWORD PTR _pField$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	and	ecx, 32					; 00000020H
	je	$LN16@Delta_Writ

; 1138 : 	{
; 1139 : 		flValue = *(float *)((byte *)to + pField->offset );

	mov	edx, DWORD PTR _pField$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR _to$[ebp]
	movss	xmm0, DWORD PTR [ecx+eax]
	movss	DWORD PTR _flValue$[ebp], xmm0

; 1140 : 		flTime = Q_rint( timebase * 100.0f ) - Q_rint( flValue * 100.0f );

	movss	xmm0, DWORD PTR _timebase$[ebp]
	mulss	xmm0, DWORD PTR __real@42c80000
	xorps	xmm1, xmm1
	comiss	xmm1, xmm0
	jbe	SHORT $LN24@Delta_Writ
	movss	xmm0, DWORD PTR _timebase$[ebp]
	mulss	xmm0, DWORD PTR __real@42c80000
	subss	xmm0, DWORD PTR __real@3f000000
	cvttss2si edx, xmm0
	mov	DWORD PTR tv225[ebp], edx
	jmp	SHORT $LN25@Delta_Writ
$LN24@Delta_Writ:
	movss	xmm0, DWORD PTR _timebase$[ebp]
	mulss	xmm0, DWORD PTR __real@42c80000
	addss	xmm0, DWORD PTR __real@3f000000
	cvttss2si eax, xmm0
	mov	DWORD PTR tv225[ebp], eax
$LN25@Delta_Writ:
	movss	xmm0, DWORD PTR _flValue$[ebp]
	mulss	xmm0, DWORD PTR __real@42c80000
	xorps	xmm1, xmm1
	comiss	xmm1, xmm0
	jbe	SHORT $LN26@Delta_Writ
	movss	xmm0, DWORD PTR _flValue$[ebp]
	mulss	xmm0, DWORD PTR __real@42c80000
	subss	xmm0, DWORD PTR __real@3f000000
	cvttss2si ecx, xmm0
	mov	DWORD PTR tv239[ebp], ecx
	jmp	SHORT $LN27@Delta_Writ
$LN26@Delta_Writ:
	movss	xmm0, DWORD PTR _flValue$[ebp]
	mulss	xmm0, DWORD PTR __real@42c80000
	addss	xmm0, DWORD PTR __real@3f000000
	cvttss2si edx, xmm0
	mov	DWORD PTR tv239[ebp], edx
$LN27@Delta_Writ:
	mov	eax, DWORD PTR tv225[ebp]
	sub	eax, DWORD PTR tv239[ebp]
	cvtsi2ss xmm0, eax
	movss	DWORD PTR _flTime$[ebp], xmm0

; 1141 : 		iValue = (uint)abs( flTime );

	cvttss2si ecx, DWORD PTR _flTime$[ebp]
	push	ecx
	call	_abs
	add	esp, 4
	mov	DWORD PTR _iValue$[ebp], eax

; 1142 : 		iValue = Delta_ClampIntegerField( pField, iValue, bSigned, pField->bits );

	mov	edx, DWORD PTR _pField$[ebp]
	mov	eax, DWORD PTR [edx+24]
	push	eax
	mov	ecx, DWORD PTR _bSigned$[ebp]
	push	ecx
	mov	edx, DWORD PTR _iValue$[ebp]
	push	edx
	mov	eax, DWORD PTR _pField$[ebp]
	push	eax
	call	_Delta_ClampIntegerField
	add	esp, 16					; 00000010H
	mov	DWORD PTR _iValue$[ebp], eax

; 1143 : 		MSG_WriteBitLong( msg, iValue, pField->bits, bSigned );

	mov	ecx, DWORD PTR _bSigned$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pField$[ebp]
	mov	eax, DWORD PTR [edx+24]
	push	eax
	mov	ecx, DWORD PTR _iValue$[ebp]
	push	ecx
	mov	edx, DWORD PTR _msg$[ebp]
	push	edx
	call	_MSG_WriteBitLong
	add	esp, 16					; 00000010H

; 1144 : 	}

	jmp	$LN20@Delta_Writ
$LN16@Delta_Writ:

; 1145 : 	else if( pField->flags & DT_TIMEWINDOW_BIG )

	mov	eax, DWORD PTR _pField$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	and	ecx, 64					; 00000040H
	je	$LN18@Delta_Writ

; 1146 : 	{
; 1147 : 		flValue = *(float *)((byte *)to + pField->offset );

	mov	edx, DWORD PTR _pField$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR _to$[ebp]
	movss	xmm0, DWORD PTR [ecx+eax]
	movss	DWORD PTR _flValue$[ebp], xmm0

; 1148 : 		flTime = Q_rint( timebase * pField->multiplier ) - Q_rint( flValue * pField->multiplier );

	mov	edx, DWORD PTR _pField$[ebp]
	movss	xmm0, DWORD PTR _timebase$[ebp]
	mulss	xmm0, DWORD PTR [edx+16]
	xorps	xmm1, xmm1
	comiss	xmm1, xmm0
	jbe	SHORT $LN28@Delta_Writ
	mov	eax, DWORD PTR _pField$[ebp]
	movss	xmm0, DWORD PTR _timebase$[ebp]
	mulss	xmm0, DWORD PTR [eax+16]
	subss	xmm0, DWORD PTR __real@3f000000
	cvttss2si ecx, xmm0
	mov	DWORD PTR tv277[ebp], ecx
	jmp	SHORT $LN29@Delta_Writ
$LN28@Delta_Writ:
	mov	edx, DWORD PTR _pField$[ebp]
	movss	xmm0, DWORD PTR _timebase$[ebp]
	mulss	xmm0, DWORD PTR [edx+16]
	addss	xmm0, DWORD PTR __real@3f000000
	cvttss2si eax, xmm0
	mov	DWORD PTR tv277[ebp], eax
$LN29@Delta_Writ:
	mov	ecx, DWORD PTR _pField$[ebp]
	movss	xmm0, DWORD PTR _flValue$[ebp]
	mulss	xmm0, DWORD PTR [ecx+16]
	xorps	xmm1, xmm1
	comiss	xmm1, xmm0
	jbe	SHORT $LN30@Delta_Writ
	mov	edx, DWORD PTR _pField$[ebp]
	movss	xmm0, DWORD PTR _flValue$[ebp]
	mulss	xmm0, DWORD PTR [edx+16]
	subss	xmm0, DWORD PTR __real@3f000000
	cvttss2si eax, xmm0
	mov	DWORD PTR tv294[ebp], eax
	jmp	SHORT $LN31@Delta_Writ
$LN30@Delta_Writ:
	mov	ecx, DWORD PTR _pField$[ebp]
	movss	xmm0, DWORD PTR _flValue$[ebp]
	mulss	xmm0, DWORD PTR [ecx+16]
	addss	xmm0, DWORD PTR __real@3f000000
	cvttss2si edx, xmm0
	mov	DWORD PTR tv294[ebp], edx
$LN31@Delta_Writ:
	mov	eax, DWORD PTR tv277[ebp]
	sub	eax, DWORD PTR tv294[ebp]
	cvtsi2ss xmm0, eax
	movss	DWORD PTR _flTime$[ebp], xmm0

; 1149 : 		iValue = (uint)abs( flTime );

	cvttss2si ecx, DWORD PTR _flTime$[ebp]
	push	ecx
	call	_abs
	add	esp, 4
	mov	DWORD PTR _iValue$[ebp], eax

; 1150 : 		iValue = Delta_ClampIntegerField( pField, iValue, bSigned, pField->bits );

	mov	edx, DWORD PTR _pField$[ebp]
	mov	eax, DWORD PTR [edx+24]
	push	eax
	mov	ecx, DWORD PTR _bSigned$[ebp]
	push	ecx
	mov	edx, DWORD PTR _iValue$[ebp]
	push	edx
	mov	eax, DWORD PTR _pField$[ebp]
	push	eax
	call	_Delta_ClampIntegerField
	add	esp, 16					; 00000010H
	mov	DWORD PTR _iValue$[ebp], eax

; 1151 : 		MSG_WriteBitLong( msg, iValue, pField->bits, bSigned );

	mov	ecx, DWORD PTR _bSigned$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pField$[ebp]
	mov	eax, DWORD PTR [edx+24]
	push	eax
	mov	ecx, DWORD PTR _iValue$[ebp]
	push	ecx
	mov	edx, DWORD PTR _msg$[ebp]
	push	edx
	call	_MSG_WriteBitLong
	add	esp, 16					; 00000010H

; 1152 : 	}

	jmp	SHORT $LN20@Delta_Writ
$LN18@Delta_Writ:

; 1153 : 	else if( pField->flags & DT_STRING )

	mov	eax, DWORD PTR _pField$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	and	ecx, 128				; 00000080H
	je	SHORT $LN20@Delta_Writ

; 1154 : 	{
; 1155 : 		pStr = (char *)((byte *)to + pField->offset );

	mov	edx, DWORD PTR _pField$[ebp]
	mov	eax, DWORD PTR _to$[ebp]
	add	eax, DWORD PTR [edx+4]
	mov	DWORD PTR _pStr$[ebp], eax

; 1156 : 		MSG_WriteString( msg, pStr );

	mov	ecx, DWORD PTR _pStr$[ebp]
	push	ecx
	mov	edx, DWORD PTR _msg$[ebp]
	push	edx
	call	_MSG_WriteString
	add	esp, 8
$LN20@Delta_Writ:

; 1157 : 	}
; 1158 : 	return true;

	mov	eax, 1
$LN1@Delta_Writ:

; 1159 : }

	mov	esp, ebp
	pop	ebp
	ret	0
_Delta_WriteField ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\documents\github\xashtasks\xash_build4529_src\engine\common\net_encode.c
_TEXT	SEGMENT
_s1$1 = -64						; size = 4
_s2$2 = -60						; size = 4
tv372 = -56						; size = 4
tv332 = -52						; size = 4
tv316 = -48						; size = 4
tv301 = -44						; size = 4
tv277 = -40						; size = 4
tv87 = -36						; size = 4
tv80 = -32						; size = 4
tv73 = -28						; size = 4
tv67 = -24						; size = 4
_bSigned$ = -20						; size = 4
_val_b$ = -16						; size = 4
_val_a$ = -12						; size = 4
_fromF$ = -8						; size = 4
_toF$ = -4						; size = 4
_pField$ = 8						; size = 4
_from$ = 12						; size = 4
_to$ = 16						; size = 4
_timebase$ = 20						; size = 4
_Delta_CompareField PROC

; 904  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H

; 905  : 	qboolean	bSigned = ( pField->flags & DT_SIGNED ) ? true : false;

	mov	eax, DWORD PTR _pField$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	and	ecx, 256				; 00000100H
	je	SHORT $LN31@Delta_Comp
	mov	DWORD PTR tv67[ebp], 1
	jmp	SHORT $LN32@Delta_Comp
$LN31@Delta_Comp:
	mov	DWORD PTR tv67[ebp], 0
$LN32@Delta_Comp:
	mov	edx, DWORD PTR tv67[ebp]
	mov	DWORD PTR _bSigned$[ebp], edx

; 906  : 	float	val_a, val_b;
; 907  : 	int	fromF, toF;
; 908  : 
; 909  : 	Assert( pField != NULL );

	cmp	DWORD PTR _pField$[ebp], 0
	je	SHORT $LN33@Delta_Comp
	mov	DWORD PTR tv73[ebp], 1
	jmp	SHORT $LN34@Delta_Comp
$LN33@Delta_Comp:
	mov	DWORD PTR tv73[ebp], 0
$LN34@Delta_Comp:
	push	0
	push	909					; 0000038dH
	push	OFFSET $SG139985
	push	OFFSET $SG139986
	mov	eax, DWORD PTR tv73[ebp]
	push	eax
	call	_DBG_AssertFunction
	add	esp, 20					; 00000014H

; 910  : 	Assert( from != NULL );

	cmp	DWORD PTR _from$[ebp], 0
	je	SHORT $LN35@Delta_Comp
	mov	DWORD PTR tv80[ebp], 1
	jmp	SHORT $LN36@Delta_Comp
$LN35@Delta_Comp:
	mov	DWORD PTR tv80[ebp], 0
$LN36@Delta_Comp:
	push	0
	push	910					; 0000038eH
	push	OFFSET $SG139987
	push	OFFSET $SG139988
	mov	ecx, DWORD PTR tv80[ebp]
	push	ecx
	call	_DBG_AssertFunction
	add	esp, 20					; 00000014H

; 911  : 	Assert( to != NULL );

	cmp	DWORD PTR _to$[ebp], 0
	je	SHORT $LN37@Delta_Comp
	mov	DWORD PTR tv87[ebp], 1
	jmp	SHORT $LN38@Delta_Comp
$LN37@Delta_Comp:
	mov	DWORD PTR tv87[ebp], 0
$LN38@Delta_Comp:
	push	0
	push	911					; 0000038fH
	push	OFFSET $SG139989
	push	OFFSET $SG139990
	mov	edx, DWORD PTR tv87[ebp]
	push	edx
	call	_DBG_AssertFunction
	add	esp, 20					; 00000014H

; 912  : 
; 913  : 	if( pField->bInactive )

	mov	eax, DWORD PTR _pField$[ebp]
	cmp	DWORD PTR [eax+28], 0
	je	SHORT $LN2@Delta_Comp

; 914  : 		return true;

	mov	eax, 1
	jmp	$LN1@Delta_Comp
$LN2@Delta_Comp:

; 915  : 
; 916  : 	fromF = toF = 0;

	mov	DWORD PTR _toF$[ebp], 0
	mov	ecx, DWORD PTR _toF$[ebp]
	mov	DWORD PTR _fromF$[ebp], ecx

; 917  : 
; 918  : 	if( pField->flags & DT_BYTE )

	mov	edx, DWORD PTR _pField$[ebp]
	mov	eax, DWORD PTR [edx+12]
	and	eax, 1
	je	$LN3@Delta_Comp

; 919  : 	{
; 920  : 		if( pField->flags & DT_SIGNED )

	mov	ecx, DWORD PTR _pField$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	and	edx, 256				; 00000100H
	je	SHORT $LN5@Delta_Comp

; 921  : 		{
; 922  : 			fromF = *(signed char *)((byte *)from + pField->offset );

	mov	eax, DWORD PTR _pField$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _from$[ebp]
	movsx	eax, BYTE PTR [edx+ecx]
	mov	DWORD PTR _fromF$[ebp], eax

; 923  : 			toF = *(signed char *)((byte *)to + pField->offset );

	mov	ecx, DWORD PTR _pField$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR _to$[ebp]
	movsx	ecx, BYTE PTR [eax+edx]
	mov	DWORD PTR _toF$[ebp], ecx

; 924  : 		}

	jmp	SHORT $LN6@Delta_Comp
$LN5@Delta_Comp:

; 925  : 		else
; 926  : 		{
; 927  : 			fromF = *(byte *)((byte *)from + pField->offset );

	mov	edx, DWORD PTR _pField$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR _from$[ebp]
	movzx	edx, BYTE PTR [ecx+eax]
	mov	DWORD PTR _fromF$[ebp], edx

; 928  : 			toF = *(byte *)((byte *)to + pField->offset );

	mov	eax, DWORD PTR _pField$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _to$[ebp]
	movzx	eax, BYTE PTR [edx+ecx]
	mov	DWORD PTR _toF$[ebp], eax
$LN6@Delta_Comp:

; 929  : 		}
; 930  : 
; 931  : 		fromF = Delta_ClampIntegerField( pField, fromF, bSigned, pField->bits );

	mov	ecx, DWORD PTR _pField$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	push	edx
	mov	eax, DWORD PTR _bSigned$[ebp]
	push	eax
	mov	ecx, DWORD PTR _fromF$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pField$[ebp]
	push	edx
	call	_Delta_ClampIntegerField
	add	esp, 16					; 00000010H
	mov	DWORD PTR _fromF$[ebp], eax

; 932  : 		toF = Delta_ClampIntegerField( pField, toF, bSigned, pField->bits );

	mov	eax, DWORD PTR _pField$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	push	ecx
	mov	edx, DWORD PTR _bSigned$[ebp]
	push	edx
	mov	eax, DWORD PTR _toF$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pField$[ebp]
	push	ecx
	call	_Delta_ClampIntegerField
	add	esp, 16					; 00000010H
	mov	DWORD PTR _toF$[ebp], eax

; 933  : 		if( pField->multiplier != 1.0f ) fromF *= pField->multiplier;

	mov	edx, DWORD PTR _pField$[ebp]
	movss	xmm0, DWORD PTR [edx+16]
	ucomiss	xmm0, DWORD PTR __real@3f800000
	lahf
	test	ah, 68					; 00000044H
	jnp	SHORT $LN7@Delta_Comp
	cvtsi2ss xmm0, DWORD PTR _fromF$[ebp]
	mov	eax, DWORD PTR _pField$[ebp]
	mulss	xmm0, DWORD PTR [eax+16]
	cvttss2si ecx, xmm0
	mov	DWORD PTR _fromF$[ebp], ecx
$LN7@Delta_Comp:

; 934  : 		if( pField->multiplier != 1.0f ) toF *= pField->multiplier;

	mov	edx, DWORD PTR _pField$[ebp]
	movss	xmm0, DWORD PTR [edx+16]
	ucomiss	xmm0, DWORD PTR __real@3f800000
	lahf
	test	ah, 68					; 00000044H
	jnp	SHORT $LN8@Delta_Comp
	cvtsi2ss xmm0, DWORD PTR _toF$[ebp]
	mov	eax, DWORD PTR _pField$[ebp]
	mulss	xmm0, DWORD PTR [eax+16]
	cvttss2si ecx, xmm0
	mov	DWORD PTR _toF$[ebp], ecx
$LN8@Delta_Comp:

; 935  : 	}

	jmp	$LN29@Delta_Comp
$LN3@Delta_Comp:

; 936  : 	else if( pField->flags & DT_SHORT )

	mov	edx, DWORD PTR _pField$[ebp]
	mov	eax, DWORD PTR [edx+12]
	and	eax, 2
	je	$LN9@Delta_Comp

; 937  : 	{
; 938  : 		if( pField->flags & DT_SIGNED )

	mov	ecx, DWORD PTR _pField$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	and	edx, 256				; 00000100H
	je	SHORT $LN11@Delta_Comp

; 939  : 		{
; 940  : 			fromF = *(short *)((byte *)from + pField->offset );

	mov	eax, DWORD PTR _pField$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _from$[ebp]
	movsx	eax, WORD PTR [edx+ecx]
	mov	DWORD PTR _fromF$[ebp], eax

; 941  : 			toF = *(short *)((byte *)to + pField->offset );

	mov	ecx, DWORD PTR _pField$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR _to$[ebp]
	movsx	ecx, WORD PTR [eax+edx]
	mov	DWORD PTR _toF$[ebp], ecx

; 942  : 		}

	jmp	SHORT $LN12@Delta_Comp
$LN11@Delta_Comp:

; 943  : 		else
; 944  : 		{
; 945  : 			fromF = *(word *)((byte *)from + pField->offset );

	mov	edx, DWORD PTR _pField$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR _from$[ebp]
	movzx	edx, WORD PTR [ecx+eax]
	mov	DWORD PTR _fromF$[ebp], edx

; 946  : 			toF = *(word *)((byte *)to + pField->offset );

	mov	eax, DWORD PTR _pField$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _to$[ebp]
	movzx	eax, WORD PTR [edx+ecx]
	mov	DWORD PTR _toF$[ebp], eax
$LN12@Delta_Comp:

; 947  : 		}
; 948  : 
; 949  : 		fromF = Delta_ClampIntegerField( pField, fromF, bSigned, pField->bits );

	mov	ecx, DWORD PTR _pField$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	push	edx
	mov	eax, DWORD PTR _bSigned$[ebp]
	push	eax
	mov	ecx, DWORD PTR _fromF$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pField$[ebp]
	push	edx
	call	_Delta_ClampIntegerField
	add	esp, 16					; 00000010H
	mov	DWORD PTR _fromF$[ebp], eax

; 950  : 		toF = Delta_ClampIntegerField( pField, toF, bSigned, pField->bits );

	mov	eax, DWORD PTR _pField$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	push	ecx
	mov	edx, DWORD PTR _bSigned$[ebp]
	push	edx
	mov	eax, DWORD PTR _toF$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pField$[ebp]
	push	ecx
	call	_Delta_ClampIntegerField
	add	esp, 16					; 00000010H
	mov	DWORD PTR _toF$[ebp], eax

; 951  : 		if( pField->multiplier != 1.0f ) fromF *= pField->multiplier;

	mov	edx, DWORD PTR _pField$[ebp]
	movss	xmm0, DWORD PTR [edx+16]
	ucomiss	xmm0, DWORD PTR __real@3f800000
	lahf
	test	ah, 68					; 00000044H
	jnp	SHORT $LN13@Delta_Comp
	cvtsi2ss xmm0, DWORD PTR _fromF$[ebp]
	mov	eax, DWORD PTR _pField$[ebp]
	mulss	xmm0, DWORD PTR [eax+16]
	cvttss2si ecx, xmm0
	mov	DWORD PTR _fromF$[ebp], ecx
$LN13@Delta_Comp:

; 952  : 		if( pField->multiplier != 1.0f ) toF *= pField->multiplier;

	mov	edx, DWORD PTR _pField$[ebp]
	movss	xmm0, DWORD PTR [edx+16]
	ucomiss	xmm0, DWORD PTR __real@3f800000
	lahf
	test	ah, 68					; 00000044H
	jnp	SHORT $LN14@Delta_Comp
	cvtsi2ss xmm0, DWORD PTR _toF$[ebp]
	mov	eax, DWORD PTR _pField$[ebp]
	mulss	xmm0, DWORD PTR [eax+16]
	cvttss2si ecx, xmm0
	mov	DWORD PTR _toF$[ebp], ecx
$LN14@Delta_Comp:

; 953  : 	}

	jmp	$LN29@Delta_Comp
$LN9@Delta_Comp:

; 954  : 	else if( pField->flags & DT_INTEGER )

	mov	edx, DWORD PTR _pField$[ebp]
	mov	eax, DWORD PTR [edx+12]
	and	eax, 8
	je	$LN15@Delta_Comp

; 955  : 	{
; 956  : 		if( pField->flags & DT_SIGNED )

	mov	ecx, DWORD PTR _pField$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	and	edx, 256				; 00000100H
	je	SHORT $LN17@Delta_Comp

; 957  : 		{
; 958  : 			fromF = *(int *)((byte *)from + pField->offset );

	mov	eax, DWORD PTR _pField$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _from$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	mov	DWORD PTR _fromF$[ebp], eax

; 959  : 			toF = *(int *)((byte *)to + pField->offset );

	mov	ecx, DWORD PTR _pField$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR _to$[ebp]
	mov	ecx, DWORD PTR [eax+edx]
	mov	DWORD PTR _toF$[ebp], ecx

; 960  : 		}

	jmp	SHORT $LN18@Delta_Comp
$LN17@Delta_Comp:

; 961  : 		else
; 962  : 		{
; 963  : 			fromF = *(uint *)((byte *)from + pField->offset );

	mov	edx, DWORD PTR _pField$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR _from$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	mov	DWORD PTR _fromF$[ebp], edx

; 964  : 			toF = *(uint *)((byte *)to + pField->offset );

	mov	eax, DWORD PTR _pField$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _to$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	mov	DWORD PTR _toF$[ebp], eax
$LN18@Delta_Comp:

; 965  : 		}
; 966  : 
; 967  : 		fromF = Delta_ClampIntegerField( pField, fromF, bSigned, pField->bits );

	mov	ecx, DWORD PTR _pField$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	push	edx
	mov	eax, DWORD PTR _bSigned$[ebp]
	push	eax
	mov	ecx, DWORD PTR _fromF$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pField$[ebp]
	push	edx
	call	_Delta_ClampIntegerField
	add	esp, 16					; 00000010H
	mov	DWORD PTR _fromF$[ebp], eax

; 968  : 		toF = Delta_ClampIntegerField( pField, toF, bSigned, pField->bits );

	mov	eax, DWORD PTR _pField$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	push	ecx
	mov	edx, DWORD PTR _bSigned$[ebp]
	push	edx
	mov	eax, DWORD PTR _toF$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pField$[ebp]
	push	ecx
	call	_Delta_ClampIntegerField
	add	esp, 16					; 00000010H
	mov	DWORD PTR _toF$[ebp], eax

; 969  : 		if( pField->multiplier != 1.0f ) fromF *= pField->multiplier;

	mov	edx, DWORD PTR _pField$[ebp]
	movss	xmm0, DWORD PTR [edx+16]
	ucomiss	xmm0, DWORD PTR __real@3f800000
	lahf
	test	ah, 68					; 00000044H
	jnp	SHORT $LN19@Delta_Comp
	cvtsi2ss xmm0, DWORD PTR _fromF$[ebp]
	mov	eax, DWORD PTR _pField$[ebp]
	mulss	xmm0, DWORD PTR [eax+16]
	cvttss2si ecx, xmm0
	mov	DWORD PTR _fromF$[ebp], ecx
$LN19@Delta_Comp:

; 970  : 		if( pField->multiplier != 1.0f ) toF *= pField->multiplier;

	mov	edx, DWORD PTR _pField$[ebp]
	movss	xmm0, DWORD PTR [edx+16]
	ucomiss	xmm0, DWORD PTR __real@3f800000
	lahf
	test	ah, 68					; 00000044H
	jnp	SHORT $LN20@Delta_Comp
	cvtsi2ss xmm0, DWORD PTR _toF$[ebp]
	mov	eax, DWORD PTR _pField$[ebp]
	mulss	xmm0, DWORD PTR [eax+16]
	cvttss2si ecx, xmm0
	mov	DWORD PTR _toF$[ebp], ecx
$LN20@Delta_Comp:

; 971  : 	}

	jmp	$LN29@Delta_Comp
$LN15@Delta_Comp:

; 972  : 	else if( pField->flags & ( DT_ANGLE|DT_FLOAT ))

	mov	edx, DWORD PTR _pField$[ebp]
	mov	eax, DWORD PTR [edx+12]
	and	eax, 20					; 00000014H
	je	SHORT $LN21@Delta_Comp

; 973  : 	{
; 974  : 		// don't convert floats to integers
; 975  : 		fromF = *((int *)((byte *)from + pField->offset ));

	mov	ecx, DWORD PTR _pField$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR _from$[ebp]
	mov	ecx, DWORD PTR [eax+edx]
	mov	DWORD PTR _fromF$[ebp], ecx

; 976  : 		toF = *((int *)((byte *)to + pField->offset ));

	mov	edx, DWORD PTR _pField$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR _to$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	mov	DWORD PTR _toF$[ebp], edx

; 977  : 	}

	jmp	$LN29@Delta_Comp
$LN21@Delta_Comp:

; 978  : 	else if( pField->flags & DT_TIMEWINDOW_8 )

	mov	eax, DWORD PTR _pField$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	and	ecx, 32					; 00000020H
	je	$LN23@Delta_Comp

; 979  : 	{
; 980  : 		val_a = Q_rint((*(float *)((byte *)from + pField->offset )) * 100.0f );

	mov	edx, DWORD PTR _pField$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR _from$[ebp]
	movss	xmm0, DWORD PTR [ecx+eax]
	mulss	xmm0, DWORD PTR __real@42c80000
	xorps	xmm1, xmm1
	comiss	xmm1, xmm0
	jbe	SHORT $LN39@Delta_Comp
	mov	edx, DWORD PTR _pField$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR _from$[ebp]
	movss	xmm0, DWORD PTR [ecx+eax]
	mulss	xmm0, DWORD PTR __real@42c80000
	subss	xmm0, DWORD PTR __real@3f000000
	cvttss2si edx, xmm0
	mov	DWORD PTR tv277[ebp], edx
	jmp	SHORT $LN40@Delta_Comp
$LN39@Delta_Comp:
	mov	eax, DWORD PTR _pField$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _from$[ebp]
	movss	xmm0, DWORD PTR [edx+ecx]
	mulss	xmm0, DWORD PTR __real@42c80000
	addss	xmm0, DWORD PTR __real@3f000000
	cvttss2si eax, xmm0
	mov	DWORD PTR tv277[ebp], eax
$LN40@Delta_Comp:
	cvtsi2ss xmm0, DWORD PTR tv277[ebp]
	movss	DWORD PTR _val_a$[ebp], xmm0

; 981  : 		val_b = Q_rint((*(float *)((byte *)to + pField->offset )) * 100.0f );

	mov	ecx, DWORD PTR _pField$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR _to$[ebp]
	movss	xmm0, DWORD PTR [eax+edx]
	mulss	xmm0, DWORD PTR __real@42c80000
	xorps	xmm1, xmm1
	comiss	xmm1, xmm0
	jbe	SHORT $LN41@Delta_Comp
	mov	ecx, DWORD PTR _pField$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR _to$[ebp]
	movss	xmm0, DWORD PTR [eax+edx]
	mulss	xmm0, DWORD PTR __real@42c80000
	subss	xmm0, DWORD PTR __real@3f000000
	cvttss2si ecx, xmm0
	mov	DWORD PTR tv301[ebp], ecx
	jmp	SHORT $LN42@Delta_Comp
$LN41@Delta_Comp:
	mov	edx, DWORD PTR _pField$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR _to$[ebp]
	movss	xmm0, DWORD PTR [ecx+eax]
	mulss	xmm0, DWORD PTR __real@42c80000
	addss	xmm0, DWORD PTR __real@3f000000
	cvttss2si edx, xmm0
	mov	DWORD PTR tv301[ebp], edx
$LN42@Delta_Comp:
	cvtsi2ss xmm0, DWORD PTR tv301[ebp]
	movss	DWORD PTR _val_b$[ebp], xmm0

; 982  : 		val_a -= Q_rint(timebase * 100.0f);

	movss	xmm0, DWORD PTR _timebase$[ebp]
	mulss	xmm0, DWORD PTR __real@42c80000
	xorps	xmm1, xmm1
	comiss	xmm1, xmm0
	jbe	SHORT $LN43@Delta_Comp
	movss	xmm0, DWORD PTR _timebase$[ebp]
	mulss	xmm0, DWORD PTR __real@42c80000
	subss	xmm0, DWORD PTR __real@3f000000
	cvttss2si eax, xmm0
	mov	DWORD PTR tv316[ebp], eax
	jmp	SHORT $LN44@Delta_Comp
$LN43@Delta_Comp:
	movss	xmm0, DWORD PTR _timebase$[ebp]
	mulss	xmm0, DWORD PTR __real@42c80000
	addss	xmm0, DWORD PTR __real@3f000000
	cvttss2si ecx, xmm0
	mov	DWORD PTR tv316[ebp], ecx
$LN44@Delta_Comp:
	cvtsi2ss xmm0, DWORD PTR tv316[ebp]
	movss	xmm1, DWORD PTR _val_a$[ebp]
	subss	xmm1, xmm0
	movss	DWORD PTR _val_a$[ebp], xmm1

; 983  : 		val_b -= Q_rint(timebase * 100.0f);

	movss	xmm0, DWORD PTR _timebase$[ebp]
	mulss	xmm0, DWORD PTR __real@42c80000
	xorps	xmm1, xmm1
	comiss	xmm1, xmm0
	jbe	SHORT $LN45@Delta_Comp
	movss	xmm0, DWORD PTR _timebase$[ebp]
	mulss	xmm0, DWORD PTR __real@42c80000
	subss	xmm0, DWORD PTR __real@3f000000
	cvttss2si edx, xmm0
	mov	DWORD PTR tv332[ebp], edx
	jmp	SHORT $LN46@Delta_Comp
$LN45@Delta_Comp:
	movss	xmm0, DWORD PTR _timebase$[ebp]
	mulss	xmm0, DWORD PTR __real@42c80000
	addss	xmm0, DWORD PTR __real@3f000000
	cvttss2si eax, xmm0
	mov	DWORD PTR tv332[ebp], eax
$LN46@Delta_Comp:
	cvtsi2ss xmm0, DWORD PTR tv332[ebp]
	movss	xmm1, DWORD PTR _val_b$[ebp]
	subss	xmm1, xmm0
	movss	DWORD PTR _val_b$[ebp], xmm1

; 984  : 		fromF = *((int *)&val_a);

	mov	ecx, DWORD PTR _val_a$[ebp]
	mov	DWORD PTR _fromF$[ebp], ecx

; 985  : 		toF = *((int *)&val_b);

	mov	edx, DWORD PTR _val_b$[ebp]
	mov	DWORD PTR _toF$[ebp], edx

; 986  : 	}

	jmp	$LN29@Delta_Comp
$LN23@Delta_Comp:

; 987  : 	else if( pField->flags & DT_TIMEWINDOW_BIG )

	mov	eax, DWORD PTR _pField$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	and	ecx, 64					; 00000040H
	je	$LN25@Delta_Comp

; 988  : 	{
; 989  : 		val_a = (*(float *)((byte *)from + pField->offset ));

	mov	edx, DWORD PTR _pField$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR _from$[ebp]
	movss	xmm0, DWORD PTR [ecx+eax]
	movss	DWORD PTR _val_a$[ebp], xmm0

; 990  : 		val_b = (*(float *)((byte *)to + pField->offset ));

	mov	edx, DWORD PTR _pField$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR _to$[ebp]
	movss	xmm0, DWORD PTR [ecx+eax]
	movss	DWORD PTR _val_b$[ebp], xmm0

; 991  : 
; 992  : 		if( pField->multiplier != 1.0f )

	mov	edx, DWORD PTR _pField$[ebp]
	movss	xmm0, DWORD PTR [edx+16]
	ucomiss	xmm0, DWORD PTR __real@3f800000
	lahf
	test	ah, 68					; 00000044H
	jnp	SHORT $LN27@Delta_Comp

; 993  : 		{
; 994  : 			val_a *= pField->multiplier;

	mov	eax, DWORD PTR _pField$[ebp]
	movss	xmm0, DWORD PTR _val_a$[ebp]
	mulss	xmm0, DWORD PTR [eax+16]
	movss	DWORD PTR _val_a$[ebp], xmm0

; 995  : 			val_b *= pField->multiplier;

	mov	ecx, DWORD PTR _pField$[ebp]
	movss	xmm0, DWORD PTR _val_b$[ebp]
	mulss	xmm0, DWORD PTR [ecx+16]
	movss	DWORD PTR _val_b$[ebp], xmm0

; 996  : 			val_a = (timebase * pField->multiplier) - val_a;

	mov	edx, DWORD PTR _pField$[ebp]
	movss	xmm0, DWORD PTR _timebase$[ebp]
	mulss	xmm0, DWORD PTR [edx+16]
	subss	xmm0, DWORD PTR _val_a$[ebp]
	movss	DWORD PTR _val_a$[ebp], xmm0

; 997  : 			val_b = (timebase * pField->multiplier) - val_b;

	mov	eax, DWORD PTR _pField$[ebp]
	movss	xmm0, DWORD PTR _timebase$[ebp]
	mulss	xmm0, DWORD PTR [eax+16]
	subss	xmm0, DWORD PTR _val_b$[ebp]
	movss	DWORD PTR _val_b$[ebp], xmm0

; 998  : 		}

	jmp	SHORT $LN28@Delta_Comp
$LN27@Delta_Comp:

; 999  : 		else
; 1000 : 		{
; 1001 : 			val_a = timebase - val_a;

	movss	xmm0, DWORD PTR _timebase$[ebp]
	subss	xmm0, DWORD PTR _val_a$[ebp]
	movss	DWORD PTR _val_a$[ebp], xmm0

; 1002 : 			val_b = timebase - val_b;

	movss	xmm0, DWORD PTR _timebase$[ebp]
	subss	xmm0, DWORD PTR _val_b$[ebp]
	movss	DWORD PTR _val_b$[ebp], xmm0
$LN28@Delta_Comp:

; 1003 : 		}
; 1004 : 
; 1005 : 		fromF = *((int *)&val_a);

	mov	ecx, DWORD PTR _val_a$[ebp]
	mov	DWORD PTR _fromF$[ebp], ecx

; 1006 : 		toF = *((int *)&val_b);

	mov	edx, DWORD PTR _val_b$[ebp]
	mov	DWORD PTR _toF$[ebp], edx

; 1007 : 	}

	jmp	SHORT $LN29@Delta_Comp
$LN25@Delta_Comp:

; 1008 : 	else if( pField->flags & DT_STRING )

	mov	eax, DWORD PTR _pField$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	and	ecx, 128				; 00000080H
	je	SHORT $LN29@Delta_Comp

; 1009 : 	{
; 1010 : 		// compare strings
; 1011 : 		char	*s1 = (char *)((byte *)from + pField->offset );

	mov	edx, DWORD PTR _pField$[ebp]
	mov	eax, DWORD PTR _from$[ebp]
	add	eax, DWORD PTR [edx+4]
	mov	DWORD PTR _s1$1[ebp], eax

; 1012 : 		char	*s2 = (char *)((byte *)to + pField->offset );

	mov	ecx, DWORD PTR _pField$[ebp]
	mov	edx, DWORD PTR _to$[ebp]
	add	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR _s2$2[ebp], edx

; 1013 : 
; 1014 : 		// 0 is equal, otherwise not equal
; 1015 : 		toF = Q_strcmp( s1, s2 );

	push	99999					; 0001869fH
	mov	eax, DWORD PTR _s2$2[ebp]
	push	eax
	mov	ecx, DWORD PTR _s1$1[ebp]
	push	ecx
	call	_Q_strncmp
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _toF$[ebp], eax
$LN29@Delta_Comp:

; 1016 : 	}
; 1017 : 
; 1018 : 	return ( fromF == toF ) ? true : false;

	mov	edx, DWORD PTR _fromF$[ebp]
	cmp	edx, DWORD PTR _toF$[ebp]
	jne	SHORT $LN47@Delta_Comp
	mov	DWORD PTR tv372[ebp], 1
	jmp	SHORT $LN48@Delta_Comp
$LN47@Delta_Comp:
	mov	DWORD PTR tv372[ebp], 0
$LN48@Delta_Comp:
	mov	eax, DWORD PTR tv372[ebp]
$LN1@Delta_Comp:

; 1019 : }

	mov	esp, ebp
	pop	ebp
	ret	0
_Delta_CompareField ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\documents\github\xashtasks\xash_build4529_src\engine\common\net_encode.c
_TEXT	SEGMENT
_signbits$1 = -28					; size = 4
tv89 = -24						; size = 4
_minnum$2 = -20						; size = 4
tv88 = -16						; size = 4
tv85 = -12						; size = 4
tv80 = -8						; size = 4
_maxnum$3 = -4						; size = 4
_pField$ = 8						; size = 4
_iValue$ = 12						; size = 4
_bSigned$ = 16						; size = 4
_numbits$ = 20						; size = 4
_Delta_ClampIntegerField PROC

; 879  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH

; 880  : #ifdef _DEBUG
; 881  : 	if( numbits < 32 && abs( iValue ) >= (uint)BIT( numbits ))

	cmp	DWORD PTR _numbits$[ebp], 32		; 00000020H
	jge	SHORT $LN2@Delta_Clam
	mov	eax, DWORD PTR _iValue$[ebp]
	push	eax
	call	_abs
	add	esp, 4
	mov	edx, 1
	mov	ecx, DWORD PTR _numbits$[ebp]
	shl	edx, cl
	cmp	eax, edx
	jb	SHORT $LN2@Delta_Clam

; 882  : 		Con_Reportf( "%s %d overflow %d\n", pField->name, abs( iValue ), (uint)BIT( numbits ));

	mov	eax, 1
	mov	ecx, DWORD PTR _numbits$[ebp]
	shl	eax, cl
	push	eax
	mov	ecx, DWORD PTR _iValue$[ebp]
	push	ecx
	call	_abs
	add	esp, 4
	push	eax
	mov	edx, DWORD PTR _pField$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	push	OFFSET $SG139900
	call	_Con_Reportf
	add	esp, 16					; 00000010H
$LN2@Delta_Clam:

; 883  : #endif
; 884  : 	if( numbits < 32 )

	cmp	DWORD PTR _numbits$[ebp], 32		; 00000020H
	jge	SHORT $LN3@Delta_Clam

; 885  : 	{
; 886  : 		int signbits = bSigned ? (numbits - 1) : numbits;

	cmp	DWORD PTR _bSigned$[ebp], 0
	je	SHORT $LN5@Delta_Clam
	mov	ecx, DWORD PTR _numbits$[ebp]
	sub	ecx, 1
	mov	DWORD PTR tv80[ebp], ecx
	jmp	SHORT $LN6@Delta_Clam
$LN5@Delta_Clam:
	mov	edx, DWORD PTR _numbits$[ebp]
	mov	DWORD PTR tv80[ebp], edx
$LN6@Delta_Clam:
	mov	eax, DWORD PTR tv80[ebp]
	mov	DWORD PTR _signbits$1[ebp], eax

; 887  : 		int maxnum = BIT( signbits ) - 1;

	mov	edx, 1
	mov	ecx, DWORD PTR _signbits$1[ebp]
	shl	edx, cl
	sub	edx, 1
	mov	DWORD PTR _maxnum$3[ebp], edx

; 888  : 		int minnum = bSigned ? -maxnum : 0;

	cmp	DWORD PTR _bSigned$[ebp], 0
	je	SHORT $LN7@Delta_Clam
	mov	eax, DWORD PTR _maxnum$3[ebp]
	neg	eax
	mov	DWORD PTR tv85[ebp], eax
	jmp	SHORT $LN8@Delta_Clam
$LN7@Delta_Clam:
	mov	DWORD PTR tv85[ebp], 0
$LN8@Delta_Clam:
	mov	ecx, DWORD PTR tv85[ebp]
	mov	DWORD PTR _minnum$2[ebp], ecx

; 889  : 		iValue = bound( minnum, iValue, maxnum );

	mov	edx, DWORD PTR _iValue$[ebp]
	cmp	edx, DWORD PTR _minnum$2[ebp]
	jl	SHORT $LN11@Delta_Clam
	mov	eax, DWORD PTR _iValue$[ebp]
	cmp	eax, DWORD PTR _maxnum$3[ebp]
	jge	SHORT $LN9@Delta_Clam
	mov	ecx, DWORD PTR _iValue$[ebp]
	mov	DWORD PTR tv88[ebp], ecx
	jmp	SHORT $LN10@Delta_Clam
$LN9@Delta_Clam:
	mov	edx, DWORD PTR _maxnum$3[ebp]
	mov	DWORD PTR tv88[ebp], edx
$LN10@Delta_Clam:
	mov	eax, DWORD PTR tv88[ebp]
	mov	DWORD PTR tv89[ebp], eax
	jmp	SHORT $LN12@Delta_Clam
$LN11@Delta_Clam:
	mov	ecx, DWORD PTR _minnum$2[ebp]
	mov	DWORD PTR tv89[ebp], ecx
$LN12@Delta_Clam:
	mov	edx, DWORD PTR tv89[ebp]
	mov	DWORD PTR _iValue$[ebp], edx
$LN3@Delta_Clam:

; 890  : 	}
; 891  : 
; 892  : 	return iValue; // clamped;

	mov	eax, DWORD PTR _iValue$[ebp]

; 893  : } 

	mov	esp, ebp
	pop	ebp
	ret	0
_Delta_ClampIntegerField ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\documents\github\xashtasks\xash_build4529_src\engine\common\net_encode.c
_TEXT	SEGMENT
_pInfo$ = -272						; size = 4
_pField$ = -268						; size = 4
tv89 = -264						; size = 4
_token$ = -260						; size = 256
__$ArrayPad$ = -4					; size = 4
_delta_script$ = 8					; size = 4
_dt$ = 12						; size = 4
_encodeDll$ = 16					; size = 4
_encodeFunc$ = 20					; size = 4
_Delta_ParseTable PROC

; 682  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 272				; 00000110H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 683  : 	string		token;
; 684  : 	delta_t		*pField;
; 685  : 	const delta_field_t	*pInfo;
; 686  : 
; 687  : 	// allocate the delta-structures
; 688  : 	if( !dt->pFields ) dt->pFields = (delta_t *)Z_Calloc( dt->maxFields * sizeof( delta_t ));

	mov	eax, DWORD PTR _dt$[ebp]
	cmp	DWORD PTR [eax+16], 0
	jne	SHORT $LN4@Delta_Pars
	push	688					; 000002b0H
	push	OFFSET $SG139743
	push	1
	mov	ecx, DWORD PTR _dt$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	shl	edx, 5
	push	edx
	mov	eax, DWORD PTR _host+236
	push	eax
	call	__Mem_Alloc
	add	esp, 20					; 00000014H
	mov	ecx, DWORD PTR _dt$[ebp]
	mov	DWORD PTR [ecx+16], eax
$LN4@Delta_Pars:

; 689  : 
; 690  : 	pField = dt->pFields;

	mov	edx, DWORD PTR _dt$[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	DWORD PTR _pField$[ebp], eax

; 691  : 	pInfo = dt->pInfo;

	mov	ecx, DWORD PTR _dt$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR _pInfo$[ebp], edx

; 692  : 	dt->numFields = 0;

	mov	eax, DWORD PTR _dt$[ebp]
	mov	DWORD PTR [eax+12], 0
$LN2@Delta_Pars:

; 693  : 
; 694  : 	// assume we have handled '{'
; 695  : 	while(( *delta_script = COM_ParseFile( *delta_script, token )) != NULL )

	lea	ecx, DWORD PTR _token$[ebp]
	push	ecx
	mov	edx, DWORD PTR _delta_script$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	call	_COM_ParseFile
	add	esp, 8
	mov	ecx, DWORD PTR _delta_script$[ebp]
	mov	DWORD PTR [ecx], eax
	mov	edx, DWORD PTR _delta_script$[ebp]
	cmp	DWORD PTR [edx], 0
	je	$LN3@Delta_Pars

; 696  : 	{
; 697  : 		Assert( dt->numFields <= dt->maxFields );

	mov	eax, DWORD PTR _dt$[ebp]
	mov	ecx, DWORD PTR _dt$[ebp]
	mov	edx, DWORD PTR [eax+12]
	cmp	edx, DWORD PTR [ecx+8]
	jg	SHORT $LN19@Delta_Pars
	mov	DWORD PTR tv89[ebp], 1
	jmp	SHORT $LN20@Delta_Pars
$LN19@Delta_Pars:
	mov	DWORD PTR tv89[ebp], 0
$LN20@Delta_Pars:
	push	0
	push	697					; 000002b9H
	push	OFFSET $SG139744
	push	OFFSET $SG139745
	mov	eax, DWORD PTR tv89[ebp]
	push	eax
	call	_DBG_AssertFunction
	add	esp, 20					; 00000014H

; 698  : 
; 699  : 		if( !Q_strcmp( token, "DEFINE_DELTA" ))

	push	99999					; 0001869fH
	push	OFFSET $SG139748
	lea	ecx, DWORD PTR _token$[ebp]
	push	ecx
	call	_Q_strncmp
	add	esp, 12					; 0000000cH
	test	eax, eax
	jne	SHORT $LN5@Delta_Pars

; 700  : 		{
; 701  : 			if( Delta_ParseField( delta_script, pInfo, &pField[dt->numFields], false ))

	push	0
	mov	edx, DWORD PTR _dt$[ebp]
	mov	eax, DWORD PTR [edx+12]
	shl	eax, 5
	add	eax, DWORD PTR _pField$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pInfo$[ebp]
	push	ecx
	mov	edx, DWORD PTR _delta_script$[ebp]
	push	edx
	call	_Delta_ParseField
	add	esp, 16					; 00000010H
	test	eax, eax
	je	SHORT $LN7@Delta_Pars

; 702  : 				dt->numFields++;

	mov	eax, DWORD PTR _dt$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	add	ecx, 1
	mov	edx, DWORD PTR _dt$[ebp]
	mov	DWORD PTR [edx+12], ecx
$LN7@Delta_Pars:

; 703  : 		}

	jmp	SHORT $LN6@Delta_Pars
$LN5@Delta_Pars:

; 704  : 		else if( !Q_strcmp( token, "DEFINE_DELTA_POST" ))

	push	99999					; 0001869fH
	push	OFFSET $SG139752
	lea	eax, DWORD PTR _token$[ebp]
	push	eax
	call	_Q_strncmp
	add	esp, 12					; 0000000cH
	test	eax, eax
	jne	SHORT $LN8@Delta_Pars

; 705  : 		{
; 706  : 			if( Delta_ParseField( delta_script, pInfo, &pField[dt->numFields], true ))

	push	1
	mov	ecx, DWORD PTR _dt$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	shl	edx, 5
	add	edx, DWORD PTR _pField$[ebp]
	push	edx
	mov	eax, DWORD PTR _pInfo$[ebp]
	push	eax
	mov	ecx, DWORD PTR _delta_script$[ebp]
	push	ecx
	call	_Delta_ParseField
	add	esp, 16					; 00000010H
	test	eax, eax
	je	SHORT $LN10@Delta_Pars

; 707  : 				dt->numFields++;

	mov	edx, DWORD PTR _dt$[ebp]
	mov	eax, DWORD PTR [edx+12]
	add	eax, 1
	mov	ecx, DWORD PTR _dt$[ebp]
	mov	DWORD PTR [ecx+12], eax
$LN10@Delta_Pars:

; 708  : 		}

	jmp	SHORT $LN6@Delta_Pars
$LN8@Delta_Pars:

; 709  : 		else if( token[0] == '}' )

	mov	edx, 1
	imul	eax, edx, 0
	movsx	ecx, BYTE PTR _token$[ebp+eax]
	cmp	ecx, 125				; 0000007dH
	jne	SHORT $LN6@Delta_Pars

; 710  : 		{
; 711  : 			// end of the section
; 712  : 			break;

	jmp	SHORT $LN3@Delta_Pars
$LN6@Delta_Pars:

; 713  : 		}
; 714  : 	}

	jmp	$LN2@Delta_Pars
$LN3@Delta_Pars:

; 715  : 
; 716  : 	// copy function name
; 717  : 	Q_strncpy( dt->funcName, encodeFunc, sizeof( dt->funcName ));

	push	32					; 00000020H
	mov	edx, DWORD PTR _encodeFunc$[ebp]
	push	edx
	mov	eax, DWORD PTR _dt$[ebp]
	add	eax, 24					; 00000018H
	push	eax
	call	_Q_strncpy
	add	esp, 12					; 0000000cH

; 718  : 
; 719  : 	if( !Q_stricmp( encodeDll, "none" ))

	push	99999					; 0001869fH
	push	OFFSET $SG139757
	mov	ecx, DWORD PTR _encodeDll$[ebp]
	push	ecx
	call	_Q_strnicmp
	add	esp, 12					; 0000000cH
	test	eax, eax
	jne	SHORT $LN12@Delta_Pars

; 720  : 		dt->customEncode = CUSTOM_NONE;

	mov	edx, DWORD PTR _dt$[ebp]
	mov	DWORD PTR [edx+20], 0
	jmp	SHORT $LN13@Delta_Pars
$LN12@Delta_Pars:

; 721  : 	else if( !Q_stricmp( encodeDll, "gamedll" ))

	push	99999					; 0001869fH
	push	OFFSET $SG139760
	mov	eax, DWORD PTR _encodeDll$[ebp]
	push	eax
	call	_Q_strnicmp
	add	esp, 12					; 0000000cH
	test	eax, eax
	jne	SHORT $LN14@Delta_Pars

; 722  : 		dt->customEncode = CUSTOM_SERVER_ENCODE;

	mov	ecx, DWORD PTR _dt$[ebp]
	mov	DWORD PTR [ecx+20], 1
	jmp	SHORT $LN13@Delta_Pars
$LN14@Delta_Pars:

; 723  : 	else if( !Q_stricmp( encodeDll, "clientdll" ))

	push	99999					; 0001869fH
	push	OFFSET $SG139762
	mov	edx, DWORD PTR _encodeDll$[ebp]
	push	edx
	call	_Q_strnicmp
	add	esp, 12					; 0000000cH
	test	eax, eax
	jne	SHORT $LN13@Delta_Pars

; 724  : 		dt->customEncode = CUSTOM_CLIENT_ENCODE;

	mov	eax, DWORD PTR _dt$[ebp]
	mov	DWORD PTR [eax+20], 2
$LN13@Delta_Pars:

; 725  : 
; 726  : 	// adjust to fit memory size
; 727  : 	if( dt->numFields < dt->maxFields )

	mov	ecx, DWORD PTR _dt$[ebp]
	mov	edx, DWORD PTR _dt$[ebp]
	mov	eax, DWORD PTR [ecx+12]
	cmp	eax, DWORD PTR [edx+8]
	jge	SHORT $LN17@Delta_Pars

; 728  : 	{
; 729  : 		dt->pFields = Z_Realloc( dt->pFields, dt->numFields * sizeof( delta_t ));

	push	729					; 000002d9H
	push	OFFSET $SG139764
	push	1
	mov	ecx, DWORD PTR _dt$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	shl	edx, 5
	push	edx
	mov	eax, DWORD PTR _dt$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	push	ecx
	mov	edx, DWORD PTR _host+236
	push	edx
	call	__Mem_Realloc
	add	esp, 24					; 00000018H
	mov	ecx, DWORD PTR _dt$[ebp]
	mov	DWORD PTR [ecx+16], eax
$LN17@Delta_Pars:

; 730  : 	}
; 731  : 
; 732  : 	dt->bInitialized = true; // table is ok

	mov	edx, DWORD PTR _dt$[ebp]
	mov	DWORD PTR [edx+60], 1

; 733  : }

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_Delta_ParseTable ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\documents\github\xashtasks\xash_build4529_src\engine\common\net_encode.c
_TEXT	SEGMENT
_oldpos$ = -268						; size = 4
_pFieldInfo$ = -264					; size = 4
_token$ = -260						; size = 256
__$ArrayPad$ = -4					; size = 4
_delta_script$ = 8					; size = 4
_pInfo$ = 12						; size = 4
_pField$ = 16						; size = 4
_bPost$ = 20						; size = 4
_Delta_ParseField PROC

; 542  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 268				; 0000010cH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 543  : 	string		token;
; 544  : 	delta_field_t	*pFieldInfo;
; 545  : 	char		*oldpos;
; 546  : 
; 547  : 	*delta_script = COM_ParseFile( *delta_script, token );

	lea	eax, DWORD PTR _token$[ebp]
	push	eax
	mov	ecx, DWORD PTR _delta_script$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	_COM_ParseFile
	add	esp, 8
	mov	ecx, DWORD PTR _delta_script$[ebp]
	mov	DWORD PTR [ecx], eax

; 548  : 	if( Q_strcmp( token, "(" ))

	push	99999					; 0001869fH
	push	OFFSET $SG139662
	lea	edx, DWORD PTR _token$[ebp]
	push	edx
	call	_Q_strncmp
	add	esp, 12					; 0000000cH
	test	eax, eax
	je	SHORT $LN4@Delta_Pars

; 549  : 	{
; 550  : 		Con_DPrintf( S_ERROR "Delta_ParseField: expected '(', found '%s' instead\n", token );

	lea	eax, DWORD PTR _token$[ebp]
	push	eax
	push	OFFSET $SG139663
	call	_Con_DPrintf
	add	esp, 8

; 551  : 		return false;

	xor	eax, eax
	jmp	$LN1@Delta_Pars
$LN4@Delta_Pars:

; 552  : 	}
; 553  : 
; 554  : 	// read the variable name
; 555  : 	if(( *delta_script = COM_ParseFile( *delta_script, token )) == NULL )

	lea	ecx, DWORD PTR _token$[ebp]
	push	ecx
	mov	edx, DWORD PTR _delta_script$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	call	_COM_ParseFile
	add	esp, 8
	mov	ecx, DWORD PTR _delta_script$[ebp]
	mov	DWORD PTR [ecx], eax
	mov	edx, DWORD PTR _delta_script$[ebp]
	cmp	DWORD PTR [edx], 0
	jne	SHORT $LN5@Delta_Pars

; 556  : 	{
; 557  : 		Con_DPrintf( S_ERROR "Delta_ParseField: missing field name\n" );

	push	OFFSET $SG139665
	call	_Con_DPrintf
	add	esp, 4

; 558  : 		return false;

	xor	eax, eax
	jmp	$LN1@Delta_Pars
$LN5@Delta_Pars:

; 559  : 	}
; 560  : 
; 561  : 	pFieldInfo = Delta_FindFieldInfo( pInfo, token );

	lea	eax, DWORD PTR _token$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pInfo$[ebp]
	push	ecx
	call	_Delta_FindFieldInfo
	add	esp, 8
	mov	DWORD PTR _pFieldInfo$[ebp], eax

; 562  : 	if( !pFieldInfo )

	cmp	DWORD PTR _pFieldInfo$[ebp], 0
	jne	SHORT $LN6@Delta_Pars

; 563  : 	{
; 564  : 		Con_DPrintf( S_ERROR "Delta_ParseField: unable to find field %s\n", token );

	lea	edx, DWORD PTR _token$[ebp]
	push	edx
	push	OFFSET $SG139667
	call	_Con_DPrintf
	add	esp, 8

; 565  : 		return false;

	xor	eax, eax
	jmp	$LN1@Delta_Pars
$LN6@Delta_Pars:

; 566  : 	}
; 567  : 
; 568  : 	*delta_script = COM_ParseFile( *delta_script, token );

	lea	eax, DWORD PTR _token$[ebp]
	push	eax
	mov	ecx, DWORD PTR _delta_script$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	_COM_ParseFile
	add	esp, 8
	mov	ecx, DWORD PTR _delta_script$[ebp]
	mov	DWORD PTR [ecx], eax

; 569  : 	if( Q_strcmp( token, "," ))

	push	99999					; 0001869fH
	push	OFFSET $SG139669
	lea	edx, DWORD PTR _token$[ebp]
	push	edx
	call	_Q_strncmp
	add	esp, 12					; 0000000cH
	test	eax, eax
	je	SHORT $LN7@Delta_Pars

; 570  : 	{
; 571  : 		Con_DPrintf( S_ERROR "Delta_ParseField: expected ',', found '%s' instead\n", token );

	lea	eax, DWORD PTR _token$[ebp]
	push	eax
	push	OFFSET $SG139670
	call	_Con_DPrintf
	add	esp, 8

; 572  : 		return false;

	xor	eax, eax
	jmp	$LN1@Delta_Pars
$LN7@Delta_Pars:

; 573  : 	}
; 574  : 
; 575  : 	// copy base info to new field
; 576  : 	pField->name = pFieldInfo->name;

	mov	ecx, DWORD PTR _pField$[ebp]
	mov	edx, DWORD PTR _pFieldInfo$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR [ecx], eax

; 577  : 	pField->offset = pFieldInfo->offset;

	mov	ecx, DWORD PTR _pField$[ebp]
	mov	edx, DWORD PTR _pFieldInfo$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR [ecx+4], eax

; 578  : 	pField->size = pFieldInfo->size;

	mov	ecx, DWORD PTR _pField$[ebp]
	mov	edx, DWORD PTR _pFieldInfo$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR [ecx+8], eax

; 579  : 	pField->flags = 0;

	mov	ecx, DWORD PTR _pField$[ebp]
	mov	DWORD PTR [ecx+12], 0
$LN38@Delta_Pars:

; 580  : 
; 581  : 	// read delta-flags
; 582  : 	while(( *delta_script = COM_ParseFile( *delta_script, token )) != NULL )

	lea	edx, DWORD PTR _token$[ebp]
	push	edx
	mov	eax, DWORD PTR _delta_script$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	_COM_ParseFile
	add	esp, 8
	mov	edx, DWORD PTR _delta_script$[ebp]
	mov	DWORD PTR [edx], eax
	mov	eax, DWORD PTR _delta_script$[ebp]
	cmp	DWORD PTR [eax], 0
	je	$LN3@Delta_Pars

; 583  : 	{
; 584  : 		if( !Q_strcmp( token, "," ))

	push	99999					; 0001869fH
	push	OFFSET $SG139672
	lea	ecx, DWORD PTR _token$[ebp]
	push	ecx
	call	_Q_strncmp
	add	esp, 12					; 0000000cH
	test	eax, eax
	jne	SHORT $LN8@Delta_Pars

; 585  : 			break;	// end of flags argument

	jmp	$LN3@Delta_Pars
$LN8@Delta_Pars:

; 586  : 
; 587  : 		if( !Q_strcmp( token, "|" ))

	push	99999					; 0001869fH
	push	OFFSET $SG139674
	lea	edx, DWORD PTR _token$[ebp]
	push	edx
	call	_Q_strncmp
	add	esp, 12					; 0000000cH
	test	eax, eax
	jne	SHORT $LN9@Delta_Pars

; 588  : 			continue;

	jmp	SHORT $LN38@Delta_Pars
$LN9@Delta_Pars:

; 589  : 
; 590  : 		if( !Q_strcmp( token, "DT_BYTE" ))

	push	99999					; 0001869fH
	push	OFFSET $SG139677
	lea	eax, DWORD PTR _token$[ebp]
	push	eax
	call	_Q_strncmp
	add	esp, 12					; 0000000cH
	test	eax, eax
	jne	SHORT $LN10@Delta_Pars

; 591  : 			pField->flags |= DT_BYTE;

	mov	ecx, DWORD PTR _pField$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	or	edx, 1
	mov	eax, DWORD PTR _pField$[ebp]
	mov	DWORD PTR [eax+12], edx
	jmp	$LN26@Delta_Pars
$LN10@Delta_Pars:

; 592  : 		else if( !Q_strcmp( token, "DT_SHORT" ))

	push	99999					; 0001869fH
	push	OFFSET $SG139680
	lea	ecx, DWORD PTR _token$[ebp]
	push	ecx
	call	_Q_strncmp
	add	esp, 12					; 0000000cH
	test	eax, eax
	jne	SHORT $LN12@Delta_Pars

; 593  : 			pField->flags |= DT_SHORT;

	mov	edx, DWORD PTR _pField$[ebp]
	mov	eax, DWORD PTR [edx+12]
	or	eax, 2
	mov	ecx, DWORD PTR _pField$[ebp]
	mov	DWORD PTR [ecx+12], eax
	jmp	$LN26@Delta_Pars
$LN12@Delta_Pars:

; 594  : 		else if( !Q_strcmp( token, "DT_FLOAT" ))

	push	99999					; 0001869fH
	push	OFFSET $SG139683
	lea	edx, DWORD PTR _token$[ebp]
	push	edx
	call	_Q_strncmp
	add	esp, 12					; 0000000cH
	test	eax, eax
	jne	SHORT $LN14@Delta_Pars

; 595  : 			pField->flags |= DT_FLOAT;

	mov	eax, DWORD PTR _pField$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	or	ecx, 4
	mov	edx, DWORD PTR _pField$[ebp]
	mov	DWORD PTR [edx+12], ecx
	jmp	$LN26@Delta_Pars
$LN14@Delta_Pars:

; 596  : 		else if( !Q_strcmp( token, "DT_INTEGER" ))

	push	99999					; 0001869fH
	push	OFFSET $SG139686
	lea	eax, DWORD PTR _token$[ebp]
	push	eax
	call	_Q_strncmp
	add	esp, 12					; 0000000cH
	test	eax, eax
	jne	SHORT $LN16@Delta_Pars

; 597  : 			pField->flags |= DT_INTEGER;

	mov	ecx, DWORD PTR _pField$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	or	edx, 8
	mov	eax, DWORD PTR _pField$[ebp]
	mov	DWORD PTR [eax+12], edx
	jmp	$LN26@Delta_Pars
$LN16@Delta_Pars:

; 598  : 		else if( !Q_strcmp( token, "DT_ANGLE" ))

	push	99999					; 0001869fH
	push	OFFSET $SG139689
	lea	ecx, DWORD PTR _token$[ebp]
	push	ecx
	call	_Q_strncmp
	add	esp, 12					; 0000000cH
	test	eax, eax
	jne	SHORT $LN18@Delta_Pars

; 599  : 			pField->flags |= DT_ANGLE;

	mov	edx, DWORD PTR _pField$[ebp]
	mov	eax, DWORD PTR [edx+12]
	or	eax, 16					; 00000010H
	mov	ecx, DWORD PTR _pField$[ebp]
	mov	DWORD PTR [ecx+12], eax
	jmp	$LN26@Delta_Pars
$LN18@Delta_Pars:

; 600  : 		else if( !Q_strcmp( token, "DT_TIMEWINDOW_8" ))

	push	99999					; 0001869fH
	push	OFFSET $SG139692
	lea	edx, DWORD PTR _token$[ebp]
	push	edx
	call	_Q_strncmp
	add	esp, 12					; 0000000cH
	test	eax, eax
	jne	SHORT $LN20@Delta_Pars

; 601  : 			pField->flags |= DT_TIMEWINDOW_8;

	mov	eax, DWORD PTR _pField$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	or	ecx, 32					; 00000020H
	mov	edx, DWORD PTR _pField$[ebp]
	mov	DWORD PTR [edx+12], ecx
	jmp	$LN26@Delta_Pars
$LN20@Delta_Pars:

; 602  : 		else if( !Q_strcmp( token, "DT_TIMEWINDOW_BIG" ))

	push	99999					; 0001869fH
	push	OFFSET $SG139695
	lea	eax, DWORD PTR _token$[ebp]
	push	eax
	call	_Q_strncmp
	add	esp, 12					; 0000000cH
	test	eax, eax
	jne	SHORT $LN22@Delta_Pars

; 603  : 			pField->flags |= DT_TIMEWINDOW_BIG;

	mov	ecx, DWORD PTR _pField$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	or	edx, 64					; 00000040H
	mov	eax, DWORD PTR _pField$[ebp]
	mov	DWORD PTR [eax+12], edx
	jmp	SHORT $LN26@Delta_Pars
$LN22@Delta_Pars:

; 604  : 		else if( !Q_strcmp( token, "DT_STRING" ))

	push	99999					; 0001869fH
	push	OFFSET $SG139698
	lea	ecx, DWORD PTR _token$[ebp]
	push	ecx
	call	_Q_strncmp
	add	esp, 12					; 0000000cH
	test	eax, eax
	jne	SHORT $LN24@Delta_Pars

; 605  : 			pField->flags |= DT_STRING;

	mov	edx, DWORD PTR _pField$[ebp]
	mov	eax, DWORD PTR [edx+12]
	or	eax, 128				; 00000080H
	mov	ecx, DWORD PTR _pField$[ebp]
	mov	DWORD PTR [ecx+12], eax
	jmp	SHORT $LN26@Delta_Pars
$LN24@Delta_Pars:

; 606  : 		else if( !Q_strcmp( token, "DT_SIGNED" ))

	push	99999					; 0001869fH
	push	OFFSET $SG139700
	lea	edx, DWORD PTR _token$[ebp]
	push	edx
	call	_Q_strncmp
	add	esp, 12					; 0000000cH
	test	eax, eax
	jne	SHORT $LN26@Delta_Pars

; 607  : 			pField->flags |= DT_SIGNED;

	mov	eax, DWORD PTR _pField$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	or	ecx, 256				; 00000100H
	mov	edx, DWORD PTR _pField$[ebp]
	mov	DWORD PTR [edx+12], ecx
$LN26@Delta_Pars:

; 608  : 	}

	jmp	$LN38@Delta_Pars
$LN3@Delta_Pars:

; 609  : 
; 610  : 	if( Q_strcmp( token, "," ))

	push	99999					; 0001869fH
	push	OFFSET $SG139702
	lea	eax, DWORD PTR _token$[ebp]
	push	eax
	call	_Q_strncmp
	add	esp, 12					; 0000000cH
	test	eax, eax
	je	SHORT $LN27@Delta_Pars

; 611  : 	{
; 612  : 		Con_DPrintf( S_ERROR "Delta_ParseField: expected ',', found '%s' instead\n", token );

	lea	ecx, DWORD PTR _token$[ebp]
	push	ecx
	push	OFFSET $SG139703
	call	_Con_DPrintf
	add	esp, 8

; 613  : 		return false;

	xor	eax, eax
	jmp	$LN1@Delta_Pars
$LN27@Delta_Pars:

; 614  : 	}
; 615  : 
; 616  : 	// read delta-bits
; 617  : 	if(( *delta_script = COM_ParseFile( *delta_script, token )) == NULL )

	lea	edx, DWORD PTR _token$[ebp]
	push	edx
	mov	eax, DWORD PTR _delta_script$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	_COM_ParseFile
	add	esp, 8
	mov	edx, DWORD PTR _delta_script$[ebp]
	mov	DWORD PTR [edx], eax
	mov	eax, DWORD PTR _delta_script$[ebp]
	cmp	DWORD PTR [eax], 0
	jne	SHORT $LN28@Delta_Pars

; 618  : 	{
; 619  : 		Con_DPrintf( S_ERROR "Delta_ReadField: %s field bits argument is missing\n", pField->name );

	mov	ecx, DWORD PTR _pField$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	push	OFFSET $SG139705
	call	_Con_DPrintf
	add	esp, 8

; 620  : 		return false;

	xor	eax, eax
	jmp	$LN1@Delta_Pars
$LN28@Delta_Pars:

; 621  : 	}
; 622  : 
; 623  : 	pField->bits = Q_atoi( token );

	lea	eax, DWORD PTR _token$[ebp]
	push	eax
	call	_Q_atoi
	add	esp, 4
	mov	ecx, DWORD PTR _pField$[ebp]
	mov	DWORD PTR [ecx+24], eax

; 624  : 
; 625  : 	*delta_script = COM_ParseFile( *delta_script, token ); 

	lea	edx, DWORD PTR _token$[ebp]
	push	edx
	mov	eax, DWORD PTR _delta_script$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	_COM_ParseFile
	add	esp, 8
	mov	edx, DWORD PTR _delta_script$[ebp]
	mov	DWORD PTR [edx], eax

; 626  : 	if( Q_strcmp( token, "," ))

	push	99999					; 0001869fH
	push	OFFSET $SG139707
	lea	eax, DWORD PTR _token$[ebp]
	push	eax
	call	_Q_strncmp
	add	esp, 12					; 0000000cH
	test	eax, eax
	je	SHORT $LN29@Delta_Pars

; 627  : 	{
; 628  : 		Con_DPrintf( S_ERROR "Delta_ReadField: expected ',', found '%s' instead\n", token );

	lea	ecx, DWORD PTR _token$[ebp]
	push	ecx
	push	OFFSET $SG139708
	call	_Con_DPrintf
	add	esp, 8

; 629  : 		return false;

	xor	eax, eax
	jmp	$LN1@Delta_Pars
$LN29@Delta_Pars:

; 630  : 	}
; 631  : 
; 632  : 	// read delta-multiplier
; 633  : 	if(( *delta_script = COM_ParseFile( *delta_script, token )) == NULL )

	lea	edx, DWORD PTR _token$[ebp]
	push	edx
	mov	eax, DWORD PTR _delta_script$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	_COM_ParseFile
	add	esp, 8
	mov	edx, DWORD PTR _delta_script$[ebp]
	mov	DWORD PTR [edx], eax
	mov	eax, DWORD PTR _delta_script$[ebp]
	cmp	DWORD PTR [eax], 0
	jne	SHORT $LN30@Delta_Pars

; 634  : 	{
; 635  : 		Con_DPrintf( S_ERROR "Delta_ReadField: %s missing 'multiplier' argument\n", pField->name );

	mov	ecx, DWORD PTR _pField$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	push	OFFSET $SG139710
	call	_Con_DPrintf
	add	esp, 8

; 636  : 		return false;

	xor	eax, eax
	jmp	$LN1@Delta_Pars
$LN30@Delta_Pars:

; 637  : 	}
; 638  : 
; 639  : 	pField->multiplier = Q_atof( token );

	lea	eax, DWORD PTR _token$[ebp]
	push	eax
	call	_Q_atof
	add	esp, 4
	mov	ecx, DWORD PTR _pField$[ebp]
	fstp	DWORD PTR [ecx+16]

; 640  : 
; 641  : 	if( bPost )

	cmp	DWORD PTR _bPost$[ebp], 0
	je	$LN31@Delta_Pars

; 642  : 	{
; 643  : 		*delta_script = COM_ParseFile( *delta_script, token );

	lea	edx, DWORD PTR _token$[ebp]
	push	edx
	mov	eax, DWORD PTR _delta_script$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	_COM_ParseFile
	add	esp, 8
	mov	edx, DWORD PTR _delta_script$[ebp]
	mov	DWORD PTR [edx], eax

; 644  : 		if( Q_strcmp( token, "," ))

	push	99999					; 0001869fH
	push	OFFSET $SG139714
	lea	eax, DWORD PTR _token$[ebp]
	push	eax
	call	_Q_strncmp
	add	esp, 12					; 0000000cH
	test	eax, eax
	je	SHORT $LN33@Delta_Pars

; 645  : 		{
; 646  : 			Con_DPrintf( S_ERROR "Delta_ReadField: expected ',', found '%s' instead\n", token );

	lea	ecx, DWORD PTR _token$[ebp]
	push	ecx
	push	OFFSET $SG139715
	call	_Con_DPrintf
	add	esp, 8

; 647  : 			return false;

	xor	eax, eax
	jmp	$LN1@Delta_Pars
$LN33@Delta_Pars:

; 648  : 		}
; 649  : 
; 650  : 		// read delta-postmultiplier
; 651  : 		if(( *delta_script = COM_ParseFile( *delta_script, token )) == NULL )

	lea	edx, DWORD PTR _token$[ebp]
	push	edx
	mov	eax, DWORD PTR _delta_script$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	_COM_ParseFile
	add	esp, 8
	mov	edx, DWORD PTR _delta_script$[ebp]
	mov	DWORD PTR [edx], eax
	mov	eax, DWORD PTR _delta_script$[ebp]
	cmp	DWORD PTR [eax], 0
	jne	SHORT $LN34@Delta_Pars

; 652  : 		{
; 653  : 			Con_DPrintf( S_ERROR "Delta_ReadField: %s missing 'post_multiply' argument\n", pField->name );

	mov	ecx, DWORD PTR _pField$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	push	OFFSET $SG139717
	call	_Con_DPrintf
	add	esp, 8

; 654  : 			return false;

	xor	eax, eax
	jmp	$LN1@Delta_Pars
$LN34@Delta_Pars:

; 655  : 		}
; 656  : 
; 657  : 		pField->post_multiplier = Q_atof( token );

	lea	eax, DWORD PTR _token$[ebp]
	push	eax
	call	_Q_atof
	add	esp, 4
	mov	ecx, DWORD PTR _pField$[ebp]
	fstp	DWORD PTR [ecx+20]

; 658  : 	}

	jmp	SHORT $LN32@Delta_Pars
$LN31@Delta_Pars:

; 659  : 	else
; 660  : 	{
; 661  : 		// to avoid division by zero
; 662  : 		pField->post_multiplier = 1.0f;

	mov	edx, DWORD PTR _pField$[ebp]
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [edx+20], xmm0
$LN32@Delta_Pars:

; 663  : 	}
; 664  : 
; 665  : 	// closing brace...
; 666  : 	*delta_script = COM_ParseFile( *delta_script, token );

	lea	eax, DWORD PTR _token$[ebp]
	push	eax
	mov	ecx, DWORD PTR _delta_script$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	_COM_ParseFile
	add	esp, 8
	mov	ecx, DWORD PTR _delta_script$[ebp]
	mov	DWORD PTR [ecx], eax

; 667  : 	if( Q_strcmp( token, ")" ))

	push	99999					; 0001869fH
	push	OFFSET $SG139719
	lea	edx, DWORD PTR _token$[ebp]
	push	edx
	call	_Q_strncmp
	add	esp, 12					; 0000000cH
	test	eax, eax
	je	SHORT $LN35@Delta_Pars

; 668  : 	{
; 669  : 		Con_DPrintf( S_ERROR "Delta_ParseField: expected ')', found '%s' instead\n", token );

	lea	eax, DWORD PTR _token$[ebp]
	push	eax
	push	OFFSET $SG139720
	call	_Con_DPrintf
	add	esp, 8

; 670  : 		return false;

	xor	eax, eax
	jmp	SHORT $LN1@Delta_Pars
$LN35@Delta_Pars:

; 671  : 	}
; 672  : 
; 673  : 	// ... and trying to parse optional ',' post-symbol
; 674  : 	oldpos = *delta_script;

	mov	ecx, DWORD PTR _delta_script$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR _oldpos$[ebp], edx

; 675  : 	*delta_script = COM_ParseFile( *delta_script, token );

	lea	eax, DWORD PTR _token$[ebp]
	push	eax
	mov	ecx, DWORD PTR _delta_script$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	_COM_ParseFile
	add	esp, 8
	mov	ecx, DWORD PTR _delta_script$[ebp]
	mov	DWORD PTR [ecx], eax

; 676  : 	if( token[0] != ',' ) *delta_script = oldpos; // not a ','

	mov	edx, 1
	imul	eax, edx, 0
	movsx	ecx, BYTE PTR _token$[ebp+eax]
	cmp	ecx, 44					; 0000002cH
	je	SHORT $LN36@Delta_Pars
	mov	edx, DWORD PTR _delta_script$[ebp]
	mov	eax, DWORD PTR _oldpos$[ebp]
	mov	DWORD PTR [edx], eax
$LN36@Delta_Pars:

; 677  : 
; 678  : 	return true;

	mov	eax, 1
$LN1@Delta_Pars:

; 679  : }

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_Delta_ParseField ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\documents\github\xashtasks\xash_build4529_src\engine\common\net_encode.c
_TEXT	SEGMENT
tv71 = -20						; size = 4
_pFieldInfo$ = -16					; size = 4
_i$ = -12						; size = 4
_dt$ = -8						; size = 4
_pField$ = -4						; size = 4
_pStructName$ = 8					; size = 4
_pName$ = 12						; size = 4
_flags$ = 16						; size = 4
_bits$ = 20						; size = 4
_mul$ = 24						; size = 4
_post_mul$ = 28						; size = 4
_Delta_AddField PROC

; 415  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H

; 416  : 	delta_info_t	*dt;
; 417  : 	delta_field_t	*pFieldInfo;
; 418  : 	delta_t		*pField;
; 419  : 	int		i;
; 420  : 
; 421  : 	// get the delta struct
; 422  : 	dt = Delta_FindStruct( pStructName );

	mov	eax, DWORD PTR _pStructName$[ebp]
	push	eax
	call	_Delta_FindStruct
	add	esp, 4
	mov	DWORD PTR _dt$[ebp], eax

; 423  : 	Assert( dt != NULL );

	cmp	DWORD PTR _dt$[ebp], 0
	je	SHORT $LN12@Delta_AddF
	mov	DWORD PTR tv71[ebp], 1
	jmp	SHORT $LN13@Delta_AddF
$LN12@Delta_AddF:
	mov	DWORD PTR tv71[ebp], 0
$LN13@Delta_AddF:
	push	0
	push	423					; 000001a7H
	push	OFFSET $SG139588
	push	OFFSET $SG139589
	mov	ecx, DWORD PTR tv71[ebp]
	push	ecx
	call	_DBG_AssertFunction
	add	esp, 20					; 00000014H

; 424  : 
; 425  : 	// check for coexisting field
; 426  : 	for( i = 0, pField = dt->pFields; i < dt->numFields; i++, pField++ )

	mov	DWORD PTR _i$[ebp], 0
	mov	edx, DWORD PTR _dt$[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	DWORD PTR _pField$[ebp], eax
	jmp	SHORT $LN4@Delta_AddF
$LN2@Delta_AddF:
	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
	mov	edx, DWORD PTR _pField$[ebp]
	add	edx, 32					; 00000020H
	mov	DWORD PTR _pField$[ebp], edx
$LN4@Delta_AddF:
	mov	eax, DWORD PTR _dt$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	cmp	ecx, DWORD PTR [eax+12]
	jge	SHORT $LN3@Delta_AddF

; 427  : 	{
; 428  : 		if( !Q_strcmp( pField->name, pName ))

	push	99999					; 0001869fH
	mov	edx, DWORD PTR _pName$[ebp]
	push	edx
	mov	eax, DWORD PTR _pField$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	_Q_strncmp
	add	esp, 12					; 0000000cH
	test	eax, eax
	jne	SHORT $LN8@Delta_AddF

; 429  : 		{
; 430  : 			// update existed field
; 431  : 			pField->flags = flags;

	mov	edx, DWORD PTR _pField$[ebp]
	mov	eax, DWORD PTR _flags$[ebp]
	mov	DWORD PTR [edx+12], eax

; 432  : 			pField->bits = bits;

	mov	ecx, DWORD PTR _pField$[ebp]
	mov	edx, DWORD PTR _bits$[ebp]
	mov	DWORD PTR [ecx+24], edx

; 433  : 			pField->multiplier = mul;

	mov	eax, DWORD PTR _pField$[ebp]
	movss	xmm0, DWORD PTR _mul$[ebp]
	movss	DWORD PTR [eax+16], xmm0

; 434  : 			pField->post_multiplier = post_mul;

	mov	ecx, DWORD PTR _pField$[ebp]
	movss	xmm0, DWORD PTR _post_mul$[ebp]
	movss	DWORD PTR [ecx+20], xmm0

; 435  : 			return true;

	mov	eax, 1
	jmp	$LN1@Delta_AddF
$LN8@Delta_AddF:

; 436  : 		}
; 437  : 	}

	jmp	SHORT $LN2@Delta_AddF
$LN3@Delta_AddF:

; 438  : 
; 439  : 	// find field description
; 440  : 	pFieldInfo = Delta_FindFieldInfo( dt->pInfo, pName );

	mov	edx, DWORD PTR _pName$[ebp]
	push	edx
	mov	eax, DWORD PTR _dt$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	call	_Delta_FindFieldInfo
	add	esp, 8
	mov	DWORD PTR _pFieldInfo$[ebp], eax

; 441  : 	if( !pFieldInfo )

	cmp	DWORD PTR _pFieldInfo$[ebp], 0
	jne	SHORT $LN9@Delta_AddF

; 442  : 	{
; 443  : 		Con_DPrintf( S_ERROR "Delta_Add: couldn't find description for %s->%s\n", pStructName, pName );

	mov	edx, DWORD PTR _pName$[ebp]
	push	edx
	mov	eax, DWORD PTR _pStructName$[ebp]
	push	eax
	push	OFFSET $SG139592
	call	_Con_DPrintf
	add	esp, 12					; 0000000cH

; 444  : 		return false;

	xor	eax, eax
	jmp	$LN1@Delta_AddF
$LN9@Delta_AddF:

; 445  : 	}
; 446  : 
; 447  : 	if( dt->numFields + 1 > dt->maxFields )

	mov	ecx, DWORD PTR _dt$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	add	edx, 1
	mov	eax, DWORD PTR _dt$[ebp]
	cmp	edx, DWORD PTR [eax+8]
	jle	SHORT $LN10@Delta_AddF

; 448  : 	{
; 449  : 		Con_DPrintf( S_WARN "Delta_Add: can't add %s->%s encoder list is full\n", pStructName, pName );

	mov	ecx, DWORD PTR _pName$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pStructName$[ebp]
	push	edx
	push	OFFSET $SG139594
	call	_Con_DPrintf
	add	esp, 12					; 0000000cH

; 450  : 		return false; // too many fields specified (duplicated ?)

	xor	eax, eax
	jmp	$LN1@Delta_AddF
$LN10@Delta_AddF:

; 451  : 	}
; 452  : 
; 453  : 	// allocate a new one
; 454  : 	dt->pFields = Z_Realloc( dt->pFields, (dt->numFields + 1) * sizeof( delta_t ));	

	push	454					; 000001c6H
	push	OFFSET $SG139595
	push	1
	mov	eax, DWORD PTR _dt$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	add	ecx, 1
	shl	ecx, 5
	push	ecx
	mov	edx, DWORD PTR _dt$[ebp]
	mov	eax, DWORD PTR [edx+16]
	push	eax
	mov	ecx, DWORD PTR _host+236
	push	ecx
	call	__Mem_Realloc
	add	esp, 24					; 00000018H
	mov	edx, DWORD PTR _dt$[ebp]
	mov	DWORD PTR [edx+16], eax

; 455  : 	for( i = 0, pField = dt->pFields; i < dt->numFields; i++, pField++ );

	mov	DWORD PTR _i$[ebp], 0
	mov	eax, DWORD PTR _dt$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR _pField$[ebp], ecx
	jmp	SHORT $LN7@Delta_AddF
$LN5@Delta_AddF:
	mov	edx, DWORD PTR _i$[ebp]
	add	edx, 1
	mov	DWORD PTR _i$[ebp], edx
	mov	eax, DWORD PTR _pField$[ebp]
	add	eax, 32					; 00000020H
	mov	DWORD PTR _pField$[ebp], eax
$LN7@Delta_AddF:
	mov	ecx, DWORD PTR _dt$[ebp]
	mov	edx, DWORD PTR _i$[ebp]
	cmp	edx, DWORD PTR [ecx+12]
	jge	SHORT $LN6@Delta_AddF
	jmp	SHORT $LN5@Delta_AddF
$LN6@Delta_AddF:

; 456  : 
; 457  : 	// copy info to new field
; 458  : 	pField->name = pFieldInfo->name;

	mov	eax, DWORD PTR _pField$[ebp]
	mov	ecx, DWORD PTR _pFieldInfo$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx

; 459  : 	pField->offset = pFieldInfo->offset;

	mov	eax, DWORD PTR _pField$[ebp]
	mov	ecx, DWORD PTR _pFieldInfo$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], edx

; 460  : 	pField->size = pFieldInfo->size;

	mov	eax, DWORD PTR _pField$[ebp]
	mov	ecx, DWORD PTR _pFieldInfo$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR [eax+8], edx

; 461  : 	pField->flags = flags;

	mov	eax, DWORD PTR _pField$[ebp]
	mov	ecx, DWORD PTR _flags$[ebp]
	mov	DWORD PTR [eax+12], ecx

; 462  : 	pField->bits = bits;

	mov	edx, DWORD PTR _pField$[ebp]
	mov	eax, DWORD PTR _bits$[ebp]
	mov	DWORD PTR [edx+24], eax

; 463  : 	pField->multiplier = mul;

	mov	ecx, DWORD PTR _pField$[ebp]
	movss	xmm0, DWORD PTR _mul$[ebp]
	movss	DWORD PTR [ecx+16], xmm0

; 464  : 	pField->post_multiplier = post_mul;

	mov	edx, DWORD PTR _pField$[ebp]
	movss	xmm0, DWORD PTR _post_mul$[ebp]
	movss	DWORD PTR [edx+20], xmm0

; 465  : 	dt->numFields++;

	mov	eax, DWORD PTR _dt$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	add	ecx, 1
	mov	edx, DWORD PTR _dt$[ebp]
	mov	DWORD PTR [edx+12], ecx

; 466  : 
; 467  : 	return true;

	mov	eax, 1
$LN1@Delta_AddF:

; 468  : }

	mov	esp, ebp
	pop	ebp
	ret	0
_Delta_AddField ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\documents\github\xashtasks\xash_build4529_src\engine\common\net_encode.c
_TEXT	SEGMENT
_i$ = -4						; size = 4
_pInfo$ = 8						; size = 4
_fieldName$ = 12					; size = 4
_Delta_IndexForFieldInfo PROC

; 400  : {

	push	ebp
	mov	ebp, esp
	push	ecx

; 401  : 	int	i;
; 402  : 
; 403  : 	if( !fieldName || !*fieldName )

	cmp	DWORD PTR _fieldName$[ebp], 0
	je	SHORT $LN6@Delta_Inde
	mov	eax, DWORD PTR _fieldName$[ebp]
	movsx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	jne	SHORT $LN5@Delta_Inde
$LN6@Delta_Inde:

; 404  : 		return -1;	

	or	eax, -1
	jmp	SHORT $LN1@Delta_Inde
$LN5@Delta_Inde:

; 405  : 
; 406  : 	for( i = 0; pInfo->name; i++, pInfo++ )

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN4@Delta_Inde
$LN2@Delta_Inde:
	mov	edx, DWORD PTR _i$[ebp]
	add	edx, 1
	mov	DWORD PTR _i$[ebp], edx
	mov	eax, DWORD PTR _pInfo$[ebp]
	add	eax, 12					; 0000000cH
	mov	DWORD PTR _pInfo$[ebp], eax
$LN4@Delta_Inde:
	mov	ecx, DWORD PTR _pInfo$[ebp]
	cmp	DWORD PTR [ecx], 0
	je	SHORT $LN3@Delta_Inde

; 407  : 	{
; 408  : 		if( !Q_strcmp( pInfo->name, fieldName ))

	push	99999					; 0001869fH
	mov	edx, DWORD PTR _fieldName$[ebp]
	push	edx
	mov	eax, DWORD PTR _pInfo$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	_Q_strncmp
	add	esp, 12					; 0000000cH
	test	eax, eax
	jne	SHORT $LN7@Delta_Inde

; 409  : 			return i;

	mov	eax, DWORD PTR _i$[ebp]
	jmp	SHORT $LN1@Delta_Inde
$LN7@Delta_Inde:

; 410  : 	}

	jmp	SHORT $LN2@Delta_Inde
$LN3@Delta_Inde:

; 411  : 	return -1;

	or	eax, -1
$LN1@Delta_Inde:

; 412  : }

	mov	esp, ebp
	pop	ebp
	ret	0
_Delta_IndexForFieldInfo ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\documents\github\xashtasks\xash_build4529_src\engine\common\net_encode.c
_TEXT	SEGMENT
_pInfo$ = 8						; size = 4
_fieldName$ = 12					; size = 4
_Delta_FindFieldInfo PROC

; 387  : {

	push	ebp
	mov	ebp, esp

; 388  : 	if( !fieldName || !*fieldName )

	cmp	DWORD PTR _fieldName$[ebp], 0
	je	SHORT $LN6@Delta_Find
	mov	eax, DWORD PTR _fieldName$[ebp]
	movsx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	jne	SHORT $LN5@Delta_Find
$LN6@Delta_Find:

; 389  : 		return NULL;	

	xor	eax, eax
	jmp	SHORT $LN1@Delta_Find
$LN5@Delta_Find:

; 390  : 
; 391  : 	for( ; pInfo->name; pInfo++ )

	jmp	SHORT $LN4@Delta_Find
$LN2@Delta_Find:
	mov	edx, DWORD PTR _pInfo$[ebp]
	add	edx, 12					; 0000000cH
	mov	DWORD PTR _pInfo$[ebp], edx
$LN4@Delta_Find:
	mov	eax, DWORD PTR _pInfo$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN3@Delta_Find

; 392  : 	{
; 393  : 		if( !Q_strcmp( pInfo->name, fieldName ))

	push	99999					; 0001869fH
	mov	ecx, DWORD PTR _fieldName$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pInfo$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	call	_Q_strncmp
	add	esp, 12					; 0000000cH
	test	eax, eax
	jne	SHORT $LN7@Delta_Find

; 394  : 			return (delta_field_t *)pInfo;

	mov	eax, DWORD PTR _pInfo$[ebp]
	jmp	SHORT $LN1@Delta_Find
$LN7@Delta_Find:

; 395  : 	}

	jmp	SHORT $LN2@Delta_Find
$LN3@Delta_Find:

; 396  : 	return NULL;

	xor	eax, eax
$LN1@Delta_Find:

; 397  : }

	pop	ebp
	ret	0
_Delta_FindFieldInfo ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\documents\github\xashtasks\xash_build4529_src\engine\common\net_encode.c
_TEXT	SEGMENT
tv69 = -8						; size = 4
_i$ = -4						; size = 4
_dt$ = 8						; size = 4
_from$ = 12						; size = 4
_to$ = 16						; size = 4
_Delta_CustomEncode PROC

; 371  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 372  : 	int	i;
; 373  : 
; 374  : 	Assert( dt != NULL );

	cmp	DWORD PTR _dt$[ebp], 0
	je	SHORT $LN7@Delta_Cust
	mov	DWORD PTR tv69[ebp], 1
	jmp	SHORT $LN8@Delta_Cust
$LN7@Delta_Cust:
	mov	DWORD PTR tv69[ebp], 0
$LN8@Delta_Cust:
	push	0
	push	374					; 00000176H
	push	OFFSET $SG139530
	push	OFFSET $SG139531
	mov	eax, DWORD PTR tv69[ebp]
	push	eax
	call	_DBG_AssertFunction
	add	esp, 20					; 00000014H

; 375  : 
; 376  : 	// set all fields is active by default
; 377  : 	for( i = 0; i < dt->numFields; i++ )

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN4@Delta_Cust
$LN2@Delta_Cust:
	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
$LN4@Delta_Cust:
	mov	edx, DWORD PTR _dt$[ebp]
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR [edx+12]
	jge	SHORT $LN3@Delta_Cust

; 378  : 		dt->pFields[i].bInactive = false;

	mov	ecx, DWORD PTR _i$[ebp]
	shl	ecx, 5
	mov	edx, DWORD PTR _dt$[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	DWORD PTR [eax+ecx+28], 0
	jmp	SHORT $LN2@Delta_Cust
$LN3@Delta_Cust:

; 379  : 
; 380  : 	if( dt->userCallback )

	mov	ecx, DWORD PTR _dt$[ebp]
	cmp	DWORD PTR [ecx+56], 0
	je	SHORT $LN1@Delta_Cust

; 381  : 	{
; 382  : 		dt->userCallback( dt->pFields, from, to );

	mov	edx, DWORD PTR _to$[ebp]
	push	edx
	mov	eax, DWORD PTR _from$[ebp]
	push	eax
	mov	ecx, DWORD PTR _dt$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	push	edx
	mov	eax, DWORD PTR _dt$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	call	ecx
	add	esp, 12					; 0000000cH
$LN1@Delta_Cust:

; 383  : 	}
; 384  : }

	mov	esp, ebp
	pop	ebp
	ret	0
_Delta_CustomEncode ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\documents\github\xashtasks\xash_build4529_src\engine\common\net_encode.c
_TEXT	SEGMENT
_i$ = -4						; size = 4
_pFields$ = 8						; size = 4
_Delta_FindStructByDelta PROC

; 356  : {

	push	ebp
	mov	ebp, esp
	push	ecx

; 357  : 	int	i;
; 358  : 
; 359  : 	if( !pFields ) return NULL;

	cmp	DWORD PTR _pFields$[ebp], 0
	jne	SHORT $LN5@Delta_Find
	xor	eax, eax
	jmp	SHORT $LN1@Delta_Find
$LN5@Delta_Find:

; 360  : 
; 361  : 	for( i = 0; i < NUM_FIELDS( dt_info ); i++ )

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN4@Delta_Find
$LN2@Delta_Find:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN4@Delta_Find:
	cmp	DWORD PTR _i$[ebp], 8
	jae	SHORT $LN3@Delta_Find

; 362  : 	{
; 363  : 		if( dt_info[i].pFields == pFields )

	mov	ecx, DWORD PTR _i$[ebp]
	shl	ecx, 6
	mov	edx, DWORD PTR _dt_info[ecx+16]
	cmp	edx, DWORD PTR _pFields$[ebp]
	jne	SHORT $LN6@Delta_Find

; 364  : 			return &dt_info[i];

	mov	eax, DWORD PTR _i$[ebp]
	shl	eax, 6
	add	eax, OFFSET _dt_info
	jmp	SHORT $LN1@Delta_Find
$LN6@Delta_Find:

; 365  : 	}

	jmp	SHORT $LN2@Delta_Find
$LN3@Delta_Find:

; 366  : 	// found nothing
; 367  : 	return NULL;

	xor	eax, eax
$LN1@Delta_Find:

; 368  : }

	mov	esp, ebp
	pop	ebp
	ret	0
_Delta_FindStructByDelta ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\documents\github\xashtasks\xash_build4529_src\engine\common\net_encode.c
_TEXT	SEGMENT
_i$ = -4						; size = 4
_encoderName$ = 8					; size = 4
_Delta_FindStructByEncoder PROC

; 340  : {

	push	ebp
	mov	ebp, esp
	push	ecx

; 341  : 	int	i;
; 342  : 
; 343  : 	if( !encoderName || !encoderName[0] )

	cmp	DWORD PTR _encoderName$[ebp], 0
	je	SHORT $LN6@Delta_Find
	mov	eax, 1
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _encoderName$[ebp]
	movsx	eax, BYTE PTR [edx+ecx]
	test	eax, eax
	jne	SHORT $LN5@Delta_Find
$LN6@Delta_Find:

; 344  : 		return NULL;

	xor	eax, eax
	jmp	SHORT $LN1@Delta_Find
$LN5@Delta_Find:

; 345  : 
; 346  : 	for( i = 0; i < NUM_FIELDS( dt_info ); i++ )

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN4@Delta_Find
$LN2@Delta_Find:
	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
$LN4@Delta_Find:
	cmp	DWORD PTR _i$[ebp], 8
	jae	SHORT $LN3@Delta_Find

; 347  : 	{
; 348  : 		if( !Q_stricmp( dt_info[i].funcName, encoderName ))

	push	99999					; 0001869fH
	mov	edx, DWORD PTR _encoderName$[ebp]
	push	edx
	mov	eax, DWORD PTR _i$[ebp]
	shl	eax, 6
	add	eax, OFFSET _dt_info+24
	push	eax
	call	_Q_strnicmp
	add	esp, 12					; 0000000cH
	test	eax, eax
	jne	SHORT $LN7@Delta_Find

; 349  : 			return &dt_info[i];

	mov	eax, DWORD PTR _i$[ebp]
	shl	eax, 6
	add	eax, OFFSET _dt_info
	jmp	SHORT $LN1@Delta_Find
$LN7@Delta_Find:

; 350  : 	}

	jmp	SHORT $LN2@Delta_Find
$LN3@Delta_Find:

; 351  : 	// found nothing
; 352  : 	return NULL;

	xor	eax, eax
$LN1@Delta_Find:

; 353  : }

	mov	esp, ebp
	pop	ebp
	ret	0
_Delta_FindStructByEncoder ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\documents\github\xashtasks\xash_build4529_src\engine\common\net_encode.c
_TEXT	SEGMENT
_i$ = -4						; size = 4
_name$ = 8						; size = 4
_Delta_FindStruct PROC

; 308  : {

	push	ebp
	mov	ebp, esp
	push	ecx

; 309  : 	int	i;
; 310  : 
; 311  : 	if( !COM_CheckString( name ))

	mov	eax, DWORD PTR _name$[ebp]
	push	eax
	call	_COM_CheckString
	add	esp, 4
	test	eax, eax
	jne	SHORT $LN5@Delta_Find

; 312  : 		return NULL;

	xor	eax, eax
	jmp	SHORT $LN1@Delta_Find
$LN5@Delta_Find:

; 313  : 
; 314  : 	for( i = 0; i < NUM_FIELDS( dt_info ); i++ )

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN4@Delta_Find
$LN2@Delta_Find:
	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
$LN4@Delta_Find:
	cmp	DWORD PTR _i$[ebp], 8
	jae	SHORT $LN3@Delta_Find

; 315  : 	{
; 316  : 		if( !Q_stricmp( dt_info[i].pName, name ))

	push	99999					; 0001869fH
	mov	edx, DWORD PTR _name$[ebp]
	push	edx
	mov	eax, DWORD PTR _i$[ebp]
	shl	eax, 6
	mov	ecx, DWORD PTR _dt_info[eax]
	push	ecx
	call	_Q_strnicmp
	add	esp, 12					; 0000000cH
	test	eax, eax
	jne	SHORT $LN6@Delta_Find

; 317  : 			return &dt_info[i];

	mov	eax, DWORD PTR _i$[ebp]
	shl	eax, 6
	add	eax, OFFSET _dt_info
	jmp	SHORT $LN1@Delta_Find
$LN6@Delta_Find:

; 318  : 	}

	jmp	SHORT $LN2@Delta_Find
$LN3@Delta_Find:

; 319  : 
; 320  : 	Con_DPrintf( S_WARN "Struct %s not found in delta_info\n", name );

	mov	edx, DWORD PTR _name$[ebp]
	push	edx
	push	OFFSET $SG139482
	call	_Con_DPrintf
	add	esp, 8

; 321  : 
; 322  : 	// found nothing
; 323  : 	return NULL;

	xor	eax, eax
$LN1@Delta_Find:

; 324  : }

	mov	esp, ebp
	pop	ebp
	ret	0
_Delta_FindStruct ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\documents\github\xashtasks\xash_build4529_src\engine\common\net_encode.c
_TEXT	SEGMENT
_numChanges$ = -28					; size = 4
tv92 = -24						; size = 4
tv83 = -20						; size = 4
_i$ = -16						; size = 4
_pField$ = -12						; size = 4
_dt$ = -8						; size = 4
_countBits$ = -4					; size = 4
_from$ = 8						; size = 4
_to$ = 12						; size = 4
_player$ = 16						; size = 4
_timebase$ = 20						; size = 4
_Delta_TestBaseline PROC

; 1029 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH

; 1030 : 	delta_info_t	*dt = NULL;

	mov	DWORD PTR _dt$[ebp], 0

; 1031 : 	delta_t		*pField;
; 1032 : 	int		i, countBits;
; 1033 : 	int		numChanges = 0;

	mov	DWORD PTR _numChanges$[ebp], 0

; 1034 : 
; 1035 : 	countBits = MAX_ENTITY_BITS + 2;

	mov	DWORD PTR _countBits$[ebp], 15		; 0000000fH

; 1036 : 
; 1037 : 	if( to == NULL )

	cmp	DWORD PTR _to$[ebp], 0
	jne	SHORT $LN5@Delta_Test

; 1038 : 	{
; 1039 : 		if( from == NULL ) return 0;

	cmp	DWORD PTR _from$[ebp], 0
	jne	SHORT $LN6@Delta_Test
	xor	eax, eax
	jmp	$LN1@Delta_Test
$LN6@Delta_Test:

; 1040 : 		return countBits;

	mov	eax, DWORD PTR _countBits$[ebp]
	jmp	$LN1@Delta_Test
$LN5@Delta_Test:

; 1041 : 	}
; 1042 : 
; 1043 : 	if( FBitSet( to->entityType, ENTITY_BEAM ))

	mov	eax, DWORD PTR _to$[ebp]
	mov	ecx, DWORD PTR [eax]
	and	ecx, 2
	je	SHORT $LN7@Delta_Test

; 1044 : 		dt = Delta_FindStruct( "custom_entity_state_t" );

	push	OFFSET $SG140047
	call	_Delta_FindStruct
	add	esp, 4
	mov	DWORD PTR _dt$[ebp], eax
	jmp	SHORT $LN10@Delta_Test
$LN7@Delta_Test:

; 1045 : 	else if( player )

	cmp	DWORD PTR _player$[ebp], 0
	je	SHORT $LN9@Delta_Test

; 1046 : 		dt = Delta_FindStruct( "entity_state_player_t" );

	push	OFFSET $SG140050
	call	_Delta_FindStruct
	add	esp, 4
	mov	DWORD PTR _dt$[ebp], eax
	jmp	SHORT $LN10@Delta_Test
$LN9@Delta_Test:

; 1047 : 	else dt = Delta_FindStruct( "entity_state_t" );

	push	OFFSET $SG140051
	call	_Delta_FindStruct
	add	esp, 4
	mov	DWORD PTR _dt$[ebp], eax
$LN10@Delta_Test:

; 1048 : 
; 1049 : 	Assert( dt && dt->bInitialized );

	cmp	DWORD PTR _dt$[ebp], 0
	je	SHORT $LN15@Delta_Test
	mov	edx, DWORD PTR _dt$[ebp]
	cmp	DWORD PTR [edx+60], 0
	je	SHORT $LN15@Delta_Test
	mov	DWORD PTR tv83[ebp], 1
	jmp	SHORT $LN16@Delta_Test
$LN15@Delta_Test:
	mov	DWORD PTR tv83[ebp], 0
$LN16@Delta_Test:
	push	0
	push	1049					; 00000419H
	push	OFFSET $SG140052
	push	OFFSET $SG140053
	mov	eax, DWORD PTR tv83[ebp]
	push	eax
	call	_DBG_AssertFunction
	add	esp, 20					; 00000014H

; 1050 : 
; 1051 : 	countBits++; // entityType flag

	mov	ecx, DWORD PTR _countBits$[ebp]
	add	ecx, 1
	mov	DWORD PTR _countBits$[ebp], ecx

; 1052 : 
; 1053 : 	pField = dt->pFields;

	mov	edx, DWORD PTR _dt$[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	DWORD PTR _pField$[ebp], eax

; 1054 : 	Assert( pField != NULL );

	cmp	DWORD PTR _pField$[ebp], 0
	je	SHORT $LN17@Delta_Test
	mov	DWORD PTR tv92[ebp], 1
	jmp	SHORT $LN18@Delta_Test
$LN17@Delta_Test:
	mov	DWORD PTR tv92[ebp], 0
$LN18@Delta_Test:
	push	0
	push	1054					; 0000041eH
	push	OFFSET $SG140054
	push	OFFSET $SG140055
	mov	ecx, DWORD PTR tv92[ebp]
	push	ecx
	call	_DBG_AssertFunction
	add	esp, 20					; 00000014H

; 1055 : 
; 1056 : 	// activate fields and call custom encode func
; 1057 : 	Delta_CustomEncode( dt, from, to );

	mov	edx, DWORD PTR _to$[ebp]
	push	edx
	mov	eax, DWORD PTR _from$[ebp]
	push	eax
	mov	ecx, DWORD PTR _dt$[ebp]
	push	ecx
	call	_Delta_CustomEncode
	add	esp, 12					; 0000000cH

; 1058 : 
; 1059 : 	// process fields
; 1060 : 	for( i = 0; i < dt->numFields; i++, pField++ )

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN4@Delta_Test
$LN2@Delta_Test:
	mov	edx, DWORD PTR _i$[ebp]
	add	edx, 1
	mov	DWORD PTR _i$[ebp], edx
	mov	eax, DWORD PTR _pField$[ebp]
	add	eax, 32					; 00000020H
	mov	DWORD PTR _pField$[ebp], eax
$LN4@Delta_Test:
	mov	ecx, DWORD PTR _dt$[ebp]
	mov	edx, DWORD PTR _i$[ebp]
	cmp	edx, DWORD PTR [ecx+12]
	jge	SHORT $LN3@Delta_Test

; 1061 : 	{
; 1062 : 		// flag about field change (sets always)
; 1063 : 		countBits++;

	mov	eax, DWORD PTR _countBits$[ebp]
	add	eax, 1
	mov	DWORD PTR _countBits$[ebp], eax

; 1064 : 
; 1065 : 		if( !Delta_CompareField( pField, from, to, timebase ))

	push	ecx
	movss	xmm0, DWORD PTR _timebase$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _to$[ebp]
	push	ecx
	mov	edx, DWORD PTR _from$[ebp]
	push	edx
	mov	eax, DWORD PTR _pField$[ebp]
	push	eax
	call	_Delta_CompareField
	add	esp, 16					; 00000010H
	test	eax, eax
	jne	SHORT $LN13@Delta_Test

; 1066 : 		{
; 1067 : 			// strings are handled difference
; 1068 : 			if( FBitSet( pField->flags, DT_STRING ))

	mov	ecx, DWORD PTR _pField$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	and	edx, 128				; 00000080H
	je	SHORT $LN12@Delta_Test

; 1069 : 				countBits += Q_strlen(((byte *)to + pField->offset )) * 8;

	mov	eax, DWORD PTR _pField$[ebp]
	mov	ecx, DWORD PTR _to$[ebp]
	add	ecx, DWORD PTR [eax+4]
	push	ecx
	call	_Q_strlen
	add	esp, 4
	mov	edx, DWORD PTR _countBits$[ebp]
	lea	eax, DWORD PTR [edx+eax*8]
	mov	DWORD PTR _countBits$[ebp], eax
	jmp	SHORT $LN13@Delta_Test
$LN12@Delta_Test:

; 1070 : 			else countBits += pField->bits;

	mov	ecx, DWORD PTR _pField$[ebp]
	mov	edx, DWORD PTR _countBits$[ebp]
	add	edx, DWORD PTR [ecx+24]
	mov	DWORD PTR _countBits$[ebp], edx
$LN13@Delta_Test:

; 1071 : 		}
; 1072 : 	}

	jmp	$LN2@Delta_Test
$LN3@Delta_Test:

; 1073 : 
; 1074 : 	// g-cont. compare bitcount directly no reason to call BitByte here
; 1075 : 	return countBits;

	mov	eax, DWORD PTR _countBits$[ebp]
$LN1@Delta_Test:

; 1076 : }

	mov	esp, ebp
	pop	ebp
	ret	0
_Delta_TestBaseline ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\documents\github\xashtasks\xash_build4529_src\engine\common\net_encode.c
_TEXT	SEGMENT
_backup$1 = -40						; size = 4
_backup$2 = -36						; size = 4
tv177 = -32						; size = 4
tv169 = -28						; size = 4
tv129 = -24						; size = 4
_i$ = -20						; size = 4
_pField$ = -16						; size = 4
_fRemoveType$ = -12					; size = 4
_dt$ = -8						; size = 4
_baseline_offset$ = -4					; size = 4
_msg$ = 8						; size = 4
_from$ = 12						; size = 4
_to$ = 16						; size = 4
_number$ = 20						; size = 4
_delta_type$ = 24					; size = 4
_timebase$ = 28						; size = 4
_MSG_ReadDeltaEntity PROC

; 1753 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 40					; 00000028H
	push	esi
	push	edi

; 1754 : 	delta_info_t	*dt = NULL;

	mov	DWORD PTR _dt$[ebp], 0

; 1755 : 	delta_t		*pField;
; 1756 : 	int		i, fRemoveType;
; 1757 : 	int		baseline_offset = 0;

	mov	DWORD PTR _baseline_offset$[ebp], 0

; 1758 : 
; 1759 : 	if( number < 0 || number >= clgame.maxEntities )

	cmp	DWORD PTR _number$[ebp], 0
	jl	SHORT $LN6@MSG_ReadDe
	mov	eax, DWORD PTR _number$[ebp]
	cmp	eax, DWORD PTR _clgame+1012
	jl	SHORT $LN5@MSG_ReadDe
$LN6@MSG_ReadDe:

; 1760 : 		Host_Error( "MSG_ReadDeltaEntity: bad delta entity number: %i\n", number );

	mov	ecx, DWORD PTR _number$[ebp]
	push	ecx
	push	OFFSET $SG140540
	call	_Host_Error
	add	esp, 8
$LN5@MSG_ReadDe:

; 1761 : 
; 1762 : 	fRemoveType = MSG_ReadUBitLong( msg, 2 );

	push	2
	mov	edx, DWORD PTR _msg$[ebp]
	push	edx
	call	_MSG_ReadUBitLong
	add	esp, 8
	mov	DWORD PTR _fRemoveType$[ebp], eax

; 1763 : 
; 1764 : 	if( fRemoveType )

	cmp	DWORD PTR _fRemoveType$[ebp], 0
	je	SHORT $LN7@MSG_ReadDe

; 1765 : 	{
; 1766 : 		// check for a remove
; 1767 : 		memset( to, 0, sizeof( *to ));

	push	340					; 00000154H
	push	0
	mov	eax, DWORD PTR _to$[ebp]
	push	eax
	call	_memset
	add	esp, 12					; 0000000cH

; 1768 : 
; 1769 : 		if( fRemoveType & 1 )

	mov	ecx, DWORD PTR _fRemoveType$[ebp]
	and	ecx, 1
	je	SHORT $LN8@MSG_ReadDe

; 1770 : 		{
; 1771 : 			// removed from delta-message
; 1772 : 			return false;

	xor	eax, eax
	jmp	$LN1@MSG_ReadDe
$LN8@MSG_ReadDe:

; 1773 :                     }
; 1774 : 
; 1775 : 		if( fRemoveType & 2 )

	mov	edx, DWORD PTR _fRemoveType$[ebp]
	and	edx, 2
	je	SHORT $LN9@MSG_ReadDe

; 1776 : 		{	
; 1777 : 			// entity was removed from server
; 1778 : 			to->number = -1;

	mov	eax, DWORD PTR _to$[ebp]
	mov	DWORD PTR [eax+4], -1

; 1779 : 			return false;

	xor	eax, eax
	jmp	$LN1@MSG_ReadDe
$LN9@MSG_ReadDe:

; 1780 : 		}
; 1781 : 
; 1782 : 		Host_Error( "MSG_ReadDeltaEntity: unknown update type %i\n", fRemoveType );

	mov	ecx, DWORD PTR _fRemoveType$[ebp]
	push	ecx
	push	OFFSET $SG140544
	call	_Host_Error
	add	esp, 8
$LN7@MSG_ReadDe:

; 1783 : 	}
; 1784 : 
; 1785 : 	if( MSG_ReadOneBit( msg ))

	mov	edx, DWORD PTR _msg$[ebp]
	push	edx
	call	_MSG_ReadOneBit
	add	esp, 4
	test	eax, eax
	je	SHORT $LN10@MSG_ReadDe

; 1786 : 		baseline_offset = MSG_ReadSBitLong( msg, 7 );

	push	7
	mov	eax, DWORD PTR _msg$[ebp]
	push	eax
	call	_MSG_ReadSBitLong
	add	esp, 8
	mov	DWORD PTR _baseline_offset$[ebp], eax
$LN10@MSG_ReadDe:

; 1787 : 
; 1788 : 	if( baseline_offset != 0 )

	cmp	DWORD PTR _baseline_offset$[ebp], 0
	je	$LN16@MSG_ReadDe

; 1789 : 	{
; 1790 : 		if( delta_type == DELTA_STATIC )

	cmp	DWORD PTR _delta_type$[ebp], 2
	jne	SHORT $LN12@MSG_ReadDe

; 1791 : 		{
; 1792 : 			int backup = Q_max( 0, clgame.numStatics - abs( baseline_offset ));

	mov	ecx, DWORD PTR _baseline_offset$[ebp]
	push	ecx
	call	_abs
	add	esp, 4
	mov	edx, DWORD PTR _clgame+1020
	sub	edx, eax
	jns	SHORT $LN23@MSG_ReadDe
	mov	DWORD PTR tv129[ebp], 0
	jmp	SHORT $LN24@MSG_ReadDe
$LN23@MSG_ReadDe:
	mov	eax, DWORD PTR _baseline_offset$[ebp]
	push	eax
	call	_abs
	add	esp, 4
	mov	ecx, DWORD PTR _clgame+1020
	sub	ecx, eax
	mov	DWORD PTR tv129[ebp], ecx
$LN24@MSG_ReadDe:
	mov	edx, DWORD PTR tv129[ebp]
	mov	DWORD PTR _backup$2[ebp], edx

; 1793 : 			from = &clgame.static_entities[backup].baseline;

	imul	eax, DWORD PTR _backup$2[ebp], 3000
	mov	ecx, DWORD PTR _clgame+1004
	lea	edx, DWORD PTR [ecx+eax+8]
	mov	DWORD PTR _from$[ebp], edx

; 1794 : 		}

	jmp	SHORT $LN16@MSG_ReadDe
$LN12@MSG_ReadDe:

; 1795 : 		else if( baseline_offset > 0 )

	cmp	DWORD PTR _baseline_offset$[ebp], 0
	jle	SHORT $LN14@MSG_ReadDe

; 1796 : 		{
; 1797 : 			int backup = cls.next_client_entities - baseline_offset;

	mov	eax, DWORD PTR _cls+291760
	sub	eax, DWORD PTR _baseline_offset$[ebp]
	mov	DWORD PTR _backup$1[ebp], eax

; 1798 : 			from = &cls.packet_entities[backup % cls.num_client_entities];

	mov	eax, DWORD PTR _backup$1[ebp]
	cdq
	idiv	DWORD PTR _cls+291756
	imul	ecx, edx, 340
	add	ecx, DWORD PTR _cls+291764
	mov	DWORD PTR _from$[ebp], ecx

; 1799 : 		}

	jmp	SHORT $LN16@MSG_ReadDe
$LN14@MSG_ReadDe:

; 1800 : 		else
; 1801 : 		{
; 1802 : 			baseline_offset = abs( baseline_offset );

	mov	edx, DWORD PTR _baseline_offset$[ebp]
	push	edx
	call	_abs
	add	esp, 4
	mov	DWORD PTR _baseline_offset$[ebp], eax

; 1803 : 			if( baseline_offset < cl.instanced_baseline_count )

	mov	eax, DWORD PTR _baseline_offset$[ebp]
	cmp	eax, DWORD PTR _cl+1590596
	jge	SHORT $LN16@MSG_ReadDe

; 1804 : 				from = &cl.instanced_baseline[baseline_offset];

	imul	ecx, DWORD PTR _baseline_offset$[ebp], 340
	add	ecx, OFFSET _cl+1568836
	mov	DWORD PTR _from$[ebp], ecx
$LN16@MSG_ReadDe:

; 1805 : 		}
; 1806 : 	}
; 1807 : 
; 1808 : 	// g-cont. probably is redundant
; 1809 : 	*to = *from;

	mov	ecx, 85					; 00000055H
	mov	esi, DWORD PTR _from$[ebp]
	mov	edi, DWORD PTR _to$[ebp]
	rep movsd

; 1810 : 
; 1811 : 	if( MSG_ReadOneBit( msg ))

	mov	edx, DWORD PTR _msg$[ebp]
	push	edx
	call	_MSG_ReadOneBit
	add	esp, 4
	test	eax, eax
	je	SHORT $LN17@MSG_ReadDe

; 1812 : 		to->entityType = MSG_ReadUBitLong( msg, 2 );

	push	2
	mov	eax, DWORD PTR _msg$[ebp]
	push	eax
	call	_MSG_ReadUBitLong
	add	esp, 8
	mov	ecx, DWORD PTR _to$[ebp]
	mov	DWORD PTR [ecx], eax
$LN17@MSG_ReadDe:

; 1813 : 	to->number = number;

	mov	edx, DWORD PTR _to$[ebp]
	mov	eax, DWORD PTR _number$[ebp]
	mov	DWORD PTR [edx+4], eax

; 1814 : 
; 1815 : 	if( FBitSet( to->entityType, ENTITY_BEAM ))

	mov	ecx, DWORD PTR _to$[ebp]
	mov	edx, DWORD PTR [ecx]
	and	edx, 2
	je	SHORT $LN18@MSG_ReadDe

; 1816 : 	{
; 1817 : 		dt = Delta_FindStruct( "custom_entity_state_t" );

	push	OFFSET $SG140555
	call	_Delta_FindStruct
	add	esp, 4
	mov	DWORD PTR _dt$[ebp], eax

; 1818 : 	}

	jmp	SHORT $LN21@MSG_ReadDe
$LN18@MSG_ReadDe:

; 1819 : 	else if( delta_type == DELTA_PLAYER )

	cmp	DWORD PTR _delta_type$[ebp], 1
	jne	SHORT $LN20@MSG_ReadDe

; 1820 : 	{
; 1821 : 		dt = Delta_FindStruct( "entity_state_player_t" );

	push	OFFSET $SG140558
	call	_Delta_FindStruct
	add	esp, 4
	mov	DWORD PTR _dt$[ebp], eax

; 1822 : 	}

	jmp	SHORT $LN21@MSG_ReadDe
$LN20@MSG_ReadDe:

; 1823 : 	else
; 1824 : 	{
; 1825 : 		dt = Delta_FindStruct( "entity_state_t" );

	push	OFFSET $SG140559
	call	_Delta_FindStruct
	add	esp, 4
	mov	DWORD PTR _dt$[ebp], eax
$LN21@MSG_ReadDe:

; 1826 : 	}
; 1827 : 
; 1828 : 	Assert( dt && dt->bInitialized );

	cmp	DWORD PTR _dt$[ebp], 0
	je	SHORT $LN25@MSG_ReadDe
	mov	eax, DWORD PTR _dt$[ebp]
	cmp	DWORD PTR [eax+60], 0
	je	SHORT $LN25@MSG_ReadDe
	mov	DWORD PTR tv169[ebp], 1
	jmp	SHORT $LN26@MSG_ReadDe
$LN25@MSG_ReadDe:
	mov	DWORD PTR tv169[ebp], 0
$LN26@MSG_ReadDe:
	push	0
	push	1828					; 00000724H
	push	OFFSET $SG140560
	push	OFFSET $SG140561
	mov	ecx, DWORD PTR tv169[ebp]
	push	ecx
	call	_DBG_AssertFunction
	add	esp, 20					; 00000014H

; 1829 : 
; 1830 : 	pField = dt->pFields;

	mov	edx, DWORD PTR _dt$[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	DWORD PTR _pField$[ebp], eax

; 1831 : 	Assert( pField != NULL );

	cmp	DWORD PTR _pField$[ebp], 0
	je	SHORT $LN27@MSG_ReadDe
	mov	DWORD PTR tv177[ebp], 1
	jmp	SHORT $LN28@MSG_ReadDe
$LN27@MSG_ReadDe:
	mov	DWORD PTR tv177[ebp], 0
$LN28@MSG_ReadDe:
	push	0
	push	1831					; 00000727H
	push	OFFSET $SG140562
	push	OFFSET $SG140563
	mov	ecx, DWORD PTR tv177[ebp]
	push	ecx
	call	_DBG_AssertFunction
	add	esp, 20					; 00000014H

; 1832 : 
; 1833 : 	// process fields
; 1834 : 	for( i = 0; i < dt->numFields; i++, pField++ )

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN4@MSG_ReadDe
$LN2@MSG_ReadDe:
	mov	edx, DWORD PTR _i$[ebp]
	add	edx, 1
	mov	DWORD PTR _i$[ebp], edx
	mov	eax, DWORD PTR _pField$[ebp]
	add	eax, 32					; 00000020H
	mov	DWORD PTR _pField$[ebp], eax
$LN4@MSG_ReadDe:
	mov	ecx, DWORD PTR _dt$[ebp]
	mov	edx, DWORD PTR _i$[ebp]
	cmp	edx, DWORD PTR [ecx+12]
	jge	SHORT $LN3@MSG_ReadDe

; 1835 : 	{
; 1836 : 		Delta_ReadField( msg, pField, from, to, timebase );

	push	ecx
	movss	xmm0, DWORD PTR _timebase$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _to$[ebp]
	push	eax
	mov	ecx, DWORD PTR _from$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pField$[ebp]
	push	edx
	mov	eax, DWORD PTR _msg$[ebp]
	push	eax
	call	_Delta_ReadField
	add	esp, 20					; 00000014H

; 1837 : 	}

	jmp	SHORT $LN2@MSG_ReadDe
$LN3@MSG_ReadDe:

; 1838 : 
; 1839 : 	// message parsed
; 1840 : 	return true;

	mov	eax, 1
$LN1@MSG_ReadDe:

; 1841 : }

	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	0
_MSG_ReadDeltaEntity ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\documents\github\xashtasks\xash_build4529_src\engine\common\net_encode.c
_TEXT	SEGMENT
_startBit$ = -32					; size = 4
tv168 = -28						; size = 4
tv160 = -24						; size = 4
_fRemoveType$1 = -20					; size = 4
_pField$ = -16						; size = 4
_numChanges$ = -12					; size = 4
_i$ = -8						; size = 4
_dt$ = -4						; size = 4
_from$ = 8						; size = 4
_to$ = 12						; size = 4
_msg$ = 16						; size = 4
_force$ = 20						; size = 4
_delta_type$ = 24					; size = 4
_timebase$ = 28						; size = 4
_baseline$ = 32						; size = 4
_MSG_WriteDeltaEntity PROC

; 1651 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 32					; 00000020H

; 1652 : 	delta_info_t	*dt = NULL;

	mov	DWORD PTR _dt$[ebp], 0

; 1653 : 	delta_t		*pField;
; 1654 : 	int		i, startBit;
; 1655 : 	int		numChanges = 0;

	mov	DWORD PTR _numChanges$[ebp], 0

; 1656 : 
; 1657 : 	if( to == NULL )

	cmp	DWORD PTR _to$[ebp], 0
	jne	SHORT $LN8@MSG_WriteD

; 1658 : 	{
; 1659 : 		int	fRemoveType;
; 1660 : 
; 1661 : 		if( from == NULL ) return;

	cmp	DWORD PTR _from$[ebp], 0
	jne	SHORT $LN9@MSG_WriteD
	jmp	$LN26@MSG_WriteD
$LN9@MSG_WriteD:

; 1662 : 
; 1663 : 		// a NULL to is a delta remove message
; 1664 : 		MSG_WriteUBitLong( msg, from->number, MAX_ENTITY_BITS );

	push	13					; 0000000dH
	mov	eax, DWORD PTR _from$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR _msg$[ebp]
	push	edx
	call	_MSG_WriteUBitLong
	add	esp, 12					; 0000000cH

; 1665 : 
; 1666 : 		// fRemoveType:
; 1667 : 		// 0 - keep alive, has delta-update
; 1668 : 		// 1 - remove from delta message (but keep states)
; 1669 : 		// 2 - completely remove from server
; 1670 : 		if( force ) fRemoveType = 2;

	cmp	DWORD PTR _force$[ebp], 0
	je	SHORT $LN10@MSG_WriteD
	mov	DWORD PTR _fRemoveType$1[ebp], 2
	jmp	SHORT $LN11@MSG_WriteD
$LN10@MSG_WriteD:

; 1671 : 		else fRemoveType = 1;

	mov	DWORD PTR _fRemoveType$1[ebp], 1
$LN11@MSG_WriteD:

; 1672 : 
; 1673 : 		MSG_WriteUBitLong( msg, fRemoveType, 2 );

	push	2
	mov	eax, DWORD PTR _fRemoveType$1[ebp]
	push	eax
	mov	ecx, DWORD PTR _msg$[ebp]
	push	ecx
	call	_MSG_WriteUBitLong
	add	esp, 12					; 0000000cH

; 1674 : 		return;

	jmp	$LN26@MSG_WriteD
$LN8@MSG_WriteD:

; 1675 : 	}
; 1676 : 
; 1677 : 	startBit = msg->iCurBit;

	mov	edx, DWORD PTR _msg$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	DWORD PTR _startBit$[ebp], eax

; 1678 : 
; 1679 : 	if( to->number < 0 || to->number >= GI->max_edicts )

	mov	ecx, DWORD PTR _to$[ebp]
	cmp	DWORD PTR [ecx+4], 0
	jl	SHORT $LN13@MSG_WriteD
	mov	edx, DWORD PTR _to$[ebp]
	mov	eax, DWORD PTR _SI+768
	mov	ecx, DWORD PTR [edx+4]
	cmp	ecx, DWORD PTR [eax+1656]
	jl	SHORT $LN12@MSG_WriteD
$LN13@MSG_WriteD:

; 1680 : 		Host_Error( "MSG_WriteDeltaEntity: Bad entity number: %i\n", to->number );

	mov	edx, DWORD PTR _to$[ebp]
	mov	eax, DWORD PTR [edx+4]
	push	eax
	push	OFFSET $SG140490
	call	_Host_Error
	add	esp, 8
$LN12@MSG_WriteD:

; 1681 : 
; 1682 : 	MSG_WriteUBitLong( msg, to->number, MAX_ENTITY_BITS );

	push	13					; 0000000dH
	mov	ecx, DWORD PTR _to$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	mov	eax, DWORD PTR _msg$[ebp]
	push	eax
	call	_MSG_WriteUBitLong
	add	esp, 12					; 0000000cH

; 1683 : 	MSG_WriteUBitLong( msg, 0, 2 ); // alive

	push	2
	push	0
	mov	ecx, DWORD PTR _msg$[ebp]
	push	ecx
	call	_MSG_WriteUBitLong
	add	esp, 12					; 0000000cH

; 1684 : 
; 1685 : 	if( baseline != 0 )

	cmp	DWORD PTR _baseline$[ebp], 0
	je	SHORT $LN14@MSG_WriteD

; 1686 : 	{
; 1687 : 		MSG_WriteOneBit( msg, 1 );

	push	1
	mov	edx, DWORD PTR _msg$[ebp]
	push	edx
	call	_MSG_WriteOneBit
	add	esp, 8

; 1688 : 		MSG_WriteSBitLong( msg, baseline, 7 );

	push	7
	mov	eax, DWORD PTR _baseline$[ebp]
	push	eax
	mov	ecx, DWORD PTR _msg$[ebp]
	push	ecx
	call	_MSG_WriteSBitLong
	add	esp, 12					; 0000000cH

; 1689 : 	}

	jmp	SHORT $LN15@MSG_WriteD
$LN14@MSG_WriteD:

; 1690 : 	else MSG_WriteOneBit( msg, 0 ); 

	push	0
	mov	edx, DWORD PTR _msg$[ebp]
	push	edx
	call	_MSG_WriteOneBit
	add	esp, 8
$LN15@MSG_WriteD:

; 1691 : 
; 1692 : 	if( force || ( to->entityType != from->entityType ))

	cmp	DWORD PTR _force$[ebp], 0
	jne	SHORT $LN18@MSG_WriteD
	mov	eax, DWORD PTR _to$[ebp]
	mov	ecx, DWORD PTR _from$[ebp]
	mov	edx, DWORD PTR [eax]
	cmp	edx, DWORD PTR [ecx]
	je	SHORT $LN16@MSG_WriteD
$LN18@MSG_WriteD:

; 1693 : 	{
; 1694 : 		MSG_WriteOneBit( msg, 1 );

	push	1
	mov	eax, DWORD PTR _msg$[ebp]
	push	eax
	call	_MSG_WriteOneBit
	add	esp, 8

; 1695 : 		MSG_WriteUBitLong( msg, to->entityType, 2 );

	push	2
	mov	ecx, DWORD PTR _to$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	eax, DWORD PTR _msg$[ebp]
	push	eax
	call	_MSG_WriteUBitLong
	add	esp, 12					; 0000000cH

; 1696 : 		numChanges++;

	mov	ecx, DWORD PTR _numChanges$[ebp]
	add	ecx, 1
	mov	DWORD PTR _numChanges$[ebp], ecx

; 1697 : 	}

	jmp	SHORT $LN17@MSG_WriteD
$LN16@MSG_WriteD:

; 1698 : 	else MSG_WriteOneBit( msg, 0 );

	push	0
	mov	edx, DWORD PTR _msg$[ebp]
	push	edx
	call	_MSG_WriteOneBit
	add	esp, 8
$LN17@MSG_WriteD:

; 1699 : 
; 1700 : 	if( FBitSet( to->entityType, ENTITY_BEAM ))

	mov	eax, DWORD PTR _to$[ebp]
	mov	ecx, DWORD PTR [eax]
	and	ecx, 2
	je	SHORT $LN19@MSG_WriteD

; 1701 : 	{
; 1702 : 		dt = Delta_FindStruct( "custom_entity_state_t" );

	push	OFFSET $SG140498
	call	_Delta_FindStruct
	add	esp, 4
	mov	DWORD PTR _dt$[ebp], eax

; 1703 : 	}

	jmp	SHORT $LN22@MSG_WriteD
$LN19@MSG_WriteD:

; 1704 : 	else if( delta_type == DELTA_PLAYER )

	cmp	DWORD PTR _delta_type$[ebp], 1
	jne	SHORT $LN21@MSG_WriteD

; 1705 : 	{
; 1706 : 		dt = Delta_FindStruct( "entity_state_player_t" );

	push	OFFSET $SG140501
	call	_Delta_FindStruct
	add	esp, 4
	mov	DWORD PTR _dt$[ebp], eax

; 1707 : 	}

	jmp	SHORT $LN22@MSG_WriteD
$LN21@MSG_WriteD:

; 1708 : 	else
; 1709 : 	{
; 1710 : 		dt = Delta_FindStruct( "entity_state_t" );

	push	OFFSET $SG140502
	call	_Delta_FindStruct
	add	esp, 4
	mov	DWORD PTR _dt$[ebp], eax
$LN22@MSG_WriteD:

; 1711 : 	}
; 1712 : 
; 1713 : 	Assert( dt && dt->bInitialized );

	cmp	DWORD PTR _dt$[ebp], 0
	je	SHORT $LN28@MSG_WriteD
	mov	edx, DWORD PTR _dt$[ebp]
	cmp	DWORD PTR [edx+60], 0
	je	SHORT $LN28@MSG_WriteD
	mov	DWORD PTR tv160[ebp], 1
	jmp	SHORT $LN29@MSG_WriteD
$LN28@MSG_WriteD:
	mov	DWORD PTR tv160[ebp], 0
$LN29@MSG_WriteD:
	push	0
	push	1713					; 000006b1H
	push	OFFSET $SG140503
	push	OFFSET $SG140504
	mov	eax, DWORD PTR tv160[ebp]
	push	eax
	call	_DBG_AssertFunction
	add	esp, 20					; 00000014H

; 1714 : 		
; 1715 : 	pField = dt->pFields;

	mov	ecx, DWORD PTR _dt$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	DWORD PTR _pField$[ebp], edx

; 1716 : 	Assert( pField != NULL );

	cmp	DWORD PTR _pField$[ebp], 0
	je	SHORT $LN30@MSG_WriteD
	mov	DWORD PTR tv168[ebp], 1
	jmp	SHORT $LN31@MSG_WriteD
$LN30@MSG_WriteD:
	mov	DWORD PTR tv168[ebp], 0
$LN31@MSG_WriteD:
	push	0
	push	1716					; 000006b4H
	push	OFFSET $SG140505
	push	OFFSET $SG140506
	mov	eax, DWORD PTR tv168[ebp]
	push	eax
	call	_DBG_AssertFunction
	add	esp, 20					; 00000014H

; 1717 : 
; 1718 : 	if( delta_type == DELTA_STATIC )

	cmp	DWORD PTR _delta_type$[ebp], 2
	jne	SHORT $LN23@MSG_WriteD

; 1719 : 	{
; 1720 : 		// static entities won't to be custom encoded
; 1721 : 		for( i = 0; i < dt->numFields; i++ )

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN4@MSG_WriteD
$LN2@MSG_WriteD:
	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
$LN4@MSG_WriteD:
	mov	edx, DWORD PTR _dt$[ebp]
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR [edx+12]
	jge	SHORT $LN3@MSG_WriteD

; 1722 : 			dt->pFields[i].bInactive = false;

	mov	ecx, DWORD PTR _i$[ebp]
	shl	ecx, 5
	mov	edx, DWORD PTR _dt$[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	DWORD PTR [eax+ecx+28], 0
	jmp	SHORT $LN2@MSG_WriteD
$LN3@MSG_WriteD:

; 1723 : 	}

	jmp	SHORT $LN24@MSG_WriteD
$LN23@MSG_WriteD:

; 1724 : 	else
; 1725 : 	{
; 1726 : 		// activate fields and call custom encode func
; 1727 : 		Delta_CustomEncode( dt, from, to );

	mov	ecx, DWORD PTR _to$[ebp]
	push	ecx
	mov	edx, DWORD PTR _from$[ebp]
	push	edx
	mov	eax, DWORD PTR _dt$[ebp]
	push	eax
	call	_Delta_CustomEncode
	add	esp, 12					; 0000000cH
$LN24@MSG_WriteD:

; 1728 : 	}
; 1729 : 
; 1730 : 	// process fields
; 1731 : 	for( i = 0; i < dt->numFields; i++, pField++ )

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN7@MSG_WriteD
$LN5@MSG_WriteD:
	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
	mov	edx, DWORD PTR _pField$[ebp]
	add	edx, 32					; 00000020H
	mov	DWORD PTR _pField$[ebp], edx
$LN7@MSG_WriteD:
	mov	eax, DWORD PTR _dt$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	cmp	ecx, DWORD PTR [eax+12]
	jge	SHORT $LN6@MSG_WriteD

; 1732 : 	{
; 1733 : 		if( Delta_WriteField( msg, pField, from, to, timebase ))

	push	ecx
	movss	xmm0, DWORD PTR _timebase$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _to$[ebp]
	push	edx
	mov	eax, DWORD PTR _from$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pField$[ebp]
	push	ecx
	mov	edx, DWORD PTR _msg$[ebp]
	push	edx
	call	_Delta_WriteField
	add	esp, 20					; 00000014H
	test	eax, eax
	je	SHORT $LN25@MSG_WriteD

; 1734 : 			numChanges++;

	mov	eax, DWORD PTR _numChanges$[ebp]
	add	eax, 1
	mov	DWORD PTR _numChanges$[ebp], eax
$LN25@MSG_WriteD:

; 1735 : 	}

	jmp	SHORT $LN5@MSG_WriteD
$LN6@MSG_WriteD:

; 1736 : 
; 1737 : 	// if we have no changes - kill the message
; 1738 : 	if( !numChanges && !force ) MSG_SeekToBit( msg, startBit, SEEK_SET );

	cmp	DWORD PTR _numChanges$[ebp], 0
	jne	SHORT $LN26@MSG_WriteD
	cmp	DWORD PTR _force$[ebp], 0
	jne	SHORT $LN26@MSG_WriteD
	push	0
	mov	ecx, DWORD PTR _startBit$[ebp]
	push	ecx
	mov	edx, DWORD PTR _msg$[ebp]
	push	edx
	call	_MSG_SeekToBit
	add	esp, 12					; 0000000cH
$LN26@MSG_WriteD:

; 1739 : }

	mov	esp, ebp
	pop	ebp
	ret	0
_MSG_WriteDeltaEntity ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\documents\github\xashtasks\xash_build4529_src\engine\common\net_encode.c
_TEXT	SEGMENT
tv81 = -20						; size = 4
tv73 = -16						; size = 4
_i$ = -12						; size = 4
_pField$ = -8						; size = 4
_dt$ = -4						; size = 4
_msg$ = 8						; size = 4
_from$ = 12						; size = 4
_to$ = 16						; size = 4
_timebase$ = 20						; size = 4
_MSG_ReadWeaponData PROC

; 1612 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	push	esi
	push	edi

; 1613 : 	delta_t		*pField;
; 1614 : 	delta_info_t	*dt;
; 1615 : 	int		i;
; 1616 : 
; 1617 : 	dt = Delta_FindStruct( "weapon_data_t" );

	push	OFFSET $SG140446
	call	_Delta_FindStruct
	add	esp, 4
	mov	DWORD PTR _dt$[ebp], eax

; 1618 : 	Assert( dt && dt->bInitialized );

	cmp	DWORD PTR _dt$[ebp], 0
	je	SHORT $LN6@MSG_ReadWe
	mov	eax, DWORD PTR _dt$[ebp]
	cmp	DWORD PTR [eax+60], 0
	je	SHORT $LN6@MSG_ReadWe
	mov	DWORD PTR tv73[ebp], 1
	jmp	SHORT $LN7@MSG_ReadWe
$LN6@MSG_ReadWe:
	mov	DWORD PTR tv73[ebp], 0
$LN7@MSG_ReadWe:
	push	0
	push	1618					; 00000652H
	push	OFFSET $SG140447
	push	OFFSET $SG140448
	mov	ecx, DWORD PTR tv73[ebp]
	push	ecx
	call	_DBG_AssertFunction
	add	esp, 20					; 00000014H

; 1619 : 
; 1620 : 	pField = dt->pFields;

	mov	edx, DWORD PTR _dt$[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	DWORD PTR _pField$[ebp], eax

; 1621 : 	Assert( pField != NULL );

	cmp	DWORD PTR _pField$[ebp], 0
	je	SHORT $LN8@MSG_ReadWe
	mov	DWORD PTR tv81[ebp], 1
	jmp	SHORT $LN9@MSG_ReadWe
$LN8@MSG_ReadWe:
	mov	DWORD PTR tv81[ebp], 0
$LN9@MSG_ReadWe:
	push	0
	push	1621					; 00000655H
	push	OFFSET $SG140449
	push	OFFSET $SG140450
	mov	ecx, DWORD PTR tv81[ebp]
	push	ecx
	call	_DBG_AssertFunction
	add	esp, 20					; 00000014H

; 1622 : 
; 1623 : 	*to = *from;

	mov	ecx, 22					; 00000016H
	mov	esi, DWORD PTR _from$[ebp]
	mov	edi, DWORD PTR _to$[ebp]
	rep movsd

; 1624 : 
; 1625 : 	// process fields
; 1626 : 	for( i = 0; i < dt->numFields; i++, pField++ )

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN4@MSG_ReadWe
$LN2@MSG_ReadWe:
	mov	edx, DWORD PTR _i$[ebp]
	add	edx, 1
	mov	DWORD PTR _i$[ebp], edx
	mov	eax, DWORD PTR _pField$[ebp]
	add	eax, 32					; 00000020H
	mov	DWORD PTR _pField$[ebp], eax
$LN4@MSG_ReadWe:
	mov	ecx, DWORD PTR _dt$[ebp]
	mov	edx, DWORD PTR _i$[ebp]
	cmp	edx, DWORD PTR [ecx+12]
	jge	SHORT $LN3@MSG_ReadWe

; 1627 : 	{
; 1628 : 		Delta_ReadField( msg, pField, from, to, timebase );

	push	ecx
	movss	xmm0, DWORD PTR _timebase$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _to$[ebp]
	push	eax
	mov	ecx, DWORD PTR _from$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pField$[ebp]
	push	edx
	mov	eax, DWORD PTR _msg$[ebp]
	push	eax
	call	_Delta_ReadField
	add	esp, 20					; 00000014H

; 1629 : 	}

	jmp	SHORT $LN2@MSG_ReadWe
$LN3@MSG_ReadWe:

; 1630 : }

	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	0
_MSG_ReadWeaponData ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\documents\github\xashtasks\xash_build4529_src\engine\common\net_encode.c
_TEXT	SEGMENT
_startBit$ = -28					; size = 4
tv81 = -24						; size = 4
tv73 = -20						; size = 4
_numChanges$ = -16					; size = 4
_i$ = -12						; size = 4
_pField$ = -8						; size = 4
_dt$ = -4						; size = 4
_msg$ = 8						; size = 4
_from$ = 12						; size = 4
_to$ = 16						; size = 4
_timebase$ = 20						; size = 4
_index$ = 24						; size = 4
_MSG_WriteWeaponData PROC

; 1573 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH

; 1574 : 	delta_t		*pField;
; 1575 : 	delta_info_t	*dt;
; 1576 : 	int		i, startBit;
; 1577 : 	int		numChanges = 0;

	mov	DWORD PTR _numChanges$[ebp], 0

; 1578 : 
; 1579 : 	dt = Delta_FindStruct( "weapon_data_t" );

	push	OFFSET $SG140421
	call	_Delta_FindStruct
	add	esp, 4
	mov	DWORD PTR _dt$[ebp], eax

; 1580 : 	Assert( dt && dt->bInitialized );

	cmp	DWORD PTR _dt$[ebp], 0
	je	SHORT $LN8@MSG_WriteW
	mov	eax, DWORD PTR _dt$[ebp]
	cmp	DWORD PTR [eax+60], 0
	je	SHORT $LN8@MSG_WriteW
	mov	DWORD PTR tv73[ebp], 1
	jmp	SHORT $LN9@MSG_WriteW
$LN8@MSG_WriteW:
	mov	DWORD PTR tv73[ebp], 0
$LN9@MSG_WriteW:
	push	0
	push	1580					; 0000062cH
	push	OFFSET $SG140422
	push	OFFSET $SG140423
	mov	ecx, DWORD PTR tv73[ebp]
	push	ecx
	call	_DBG_AssertFunction
	add	esp, 20					; 00000014H

; 1581 : 
; 1582 : 	pField = dt->pFields;

	mov	edx, DWORD PTR _dt$[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	DWORD PTR _pField$[ebp], eax

; 1583 : 	Assert( pField != NULL );

	cmp	DWORD PTR _pField$[ebp], 0
	je	SHORT $LN10@MSG_WriteW
	mov	DWORD PTR tv81[ebp], 1
	jmp	SHORT $LN11@MSG_WriteW
$LN10@MSG_WriteW:
	mov	DWORD PTR tv81[ebp], 0
$LN11@MSG_WriteW:
	push	0
	push	1583					; 0000062fH
	push	OFFSET $SG140424
	push	OFFSET $SG140425
	mov	ecx, DWORD PTR tv81[ebp]
	push	ecx
	call	_DBG_AssertFunction
	add	esp, 20					; 00000014H

; 1584 : 
; 1585 : 	// activate fields and call custom encode func
; 1586 : 	Delta_CustomEncode( dt, from, to );

	mov	edx, DWORD PTR _to$[ebp]
	push	edx
	mov	eax, DWORD PTR _from$[ebp]
	push	eax
	mov	ecx, DWORD PTR _dt$[ebp]
	push	ecx
	call	_Delta_CustomEncode
	add	esp, 12					; 0000000cH

; 1587 : 
; 1588 : 	startBit = msg->iCurBit;

	mov	edx, DWORD PTR _msg$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	DWORD PTR _startBit$[ebp], eax

; 1589 : 
; 1590 : 	MSG_WriteOneBit( msg, 1 );

	push	1
	mov	ecx, DWORD PTR _msg$[ebp]
	push	ecx
	call	_MSG_WriteOneBit
	add	esp, 8

; 1591 : 	MSG_WriteUBitLong( msg, index, MAX_WEAPON_BITS );

	push	6
	mov	edx, DWORD PTR _index$[ebp]
	push	edx
	mov	eax, DWORD PTR _msg$[ebp]
	push	eax
	call	_MSG_WriteUBitLong
	add	esp, 12					; 0000000cH

; 1592 :                
; 1593 : 	// process fields
; 1594 : 	for( i = 0; i < dt->numFields; i++, pField++ )

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN4@MSG_WriteW
$LN2@MSG_WriteW:
	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
	mov	edx, DWORD PTR _pField$[ebp]
	add	edx, 32					; 00000020H
	mov	DWORD PTR _pField$[ebp], edx
$LN4@MSG_WriteW:
	mov	eax, DWORD PTR _dt$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	cmp	ecx, DWORD PTR [eax+12]
	jge	SHORT $LN3@MSG_WriteW

; 1595 : 	{
; 1596 : 		if( Delta_WriteField( msg, pField, from, to, timebase ))

	push	ecx
	movss	xmm0, DWORD PTR _timebase$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _to$[ebp]
	push	edx
	mov	eax, DWORD PTR _from$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pField$[ebp]
	push	ecx
	mov	edx, DWORD PTR _msg$[ebp]
	push	edx
	call	_Delta_WriteField
	add	esp, 20					; 00000014H
	test	eax, eax
	je	SHORT $LN5@MSG_WriteW

; 1597 : 			numChanges++;

	mov	eax, DWORD PTR _numChanges$[ebp]
	add	eax, 1
	mov	DWORD PTR _numChanges$[ebp], eax
$LN5@MSG_WriteW:

; 1598 : 	}

	jmp	SHORT $LN2@MSG_WriteW
$LN3@MSG_WriteW:

; 1599 : 
; 1600 : 	// if we have no changes - kill the message
; 1601 : 	if( !numChanges ) MSG_SeekToBit( msg, startBit, SEEK_SET );

	cmp	DWORD PTR _numChanges$[ebp], 0
	jne	SHORT $LN6@MSG_WriteW
	push	0
	mov	ecx, DWORD PTR _startBit$[ebp]
	push	ecx
	mov	edx, DWORD PTR _msg$[ebp]
	push	edx
	call	_MSG_SeekToBit
	add	esp, 12					; 0000000cH
$LN6@MSG_WriteW:

; 1602 : }

	mov	esp, ebp
	pop	ebp
	ret	0
_MSG_WriteWeaponData ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\documents\github\xashtasks\xash_build4529_src\engine\common\net_encode.c
_TEXT	SEGMENT
tv81 = -20						; size = 4
tv73 = -16						; size = 4
_i$ = -12						; size = 4
_pField$ = -8						; size = 4
_dt$ = -4						; size = 4
_msg$ = 8						; size = 4
_from$ = 12						; size = 4
_to$ = 16						; size = 4
_timebase$ = 20						; size = 4
_MSG_ReadClientData PROC

; 1534 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	push	esi
	push	edi

; 1535 : 	delta_t		*pField;
; 1536 : 	delta_info_t	*dt;
; 1537 : 	int		i;
; 1538 : 
; 1539 : 	dt = Delta_FindStruct( "clientdata_t" );

	push	OFFSET $SG140393
	call	_Delta_FindStruct
	add	esp, 4
	mov	DWORD PTR _dt$[ebp], eax

; 1540 : 	Assert( dt && dt->bInitialized );

	cmp	DWORD PTR _dt$[ebp], 0
	je	SHORT $LN7@MSG_ReadCl
	mov	eax, DWORD PTR _dt$[ebp]
	cmp	DWORD PTR [eax+60], 0
	je	SHORT $LN7@MSG_ReadCl
	mov	DWORD PTR tv73[ebp], 1
	jmp	SHORT $LN8@MSG_ReadCl
$LN7@MSG_ReadCl:
	mov	DWORD PTR tv73[ebp], 0
$LN8@MSG_ReadCl:
	push	0
	push	1540					; 00000604H
	push	OFFSET $SG140394
	push	OFFSET $SG140395
	mov	ecx, DWORD PTR tv73[ebp]
	push	ecx
	call	_DBG_AssertFunction
	add	esp, 20					; 00000014H

; 1541 : 
; 1542 : 	pField = dt->pFields;

	mov	edx, DWORD PTR _dt$[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	DWORD PTR _pField$[ebp], eax

; 1543 : 	Assert( pField != NULL );

	cmp	DWORD PTR _pField$[ebp], 0
	je	SHORT $LN9@MSG_ReadCl
	mov	DWORD PTR tv81[ebp], 1
	jmp	SHORT $LN10@MSG_ReadCl
$LN9@MSG_ReadCl:
	mov	DWORD PTR tv81[ebp], 0
$LN10@MSG_ReadCl:
	push	0
	push	1543					; 00000607H
	push	OFFSET $SG140396
	push	OFFSET $SG140397
	mov	ecx, DWORD PTR tv81[ebp]
	push	ecx
	call	_DBG_AssertFunction
	add	esp, 20					; 00000014H

; 1544 : 
; 1545 : 	*to = *from;

	mov	ecx, 119				; 00000077H
	mov	esi, DWORD PTR _from$[ebp]
	mov	edi, DWORD PTR _to$[ebp]
	rep movsd

; 1546 : 
; 1547 : 	if( !MSG_ReadOneBit( msg ))

	mov	edx, DWORD PTR _msg$[ebp]
	push	edx
	call	_MSG_ReadOneBit
	add	esp, 4
	test	eax, eax
	jne	SHORT $LN5@MSG_ReadCl

; 1548 : 		return; // we have no changes

	jmp	SHORT $LN3@MSG_ReadCl
$LN5@MSG_ReadCl:

; 1549 : 
; 1550 : 	// process fields
; 1551 : 	for( i = 0; i < dt->numFields; i++, pField++ )

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN4@MSG_ReadCl
$LN2@MSG_ReadCl:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
	mov	ecx, DWORD PTR _pField$[ebp]
	add	ecx, 32					; 00000020H
	mov	DWORD PTR _pField$[ebp], ecx
$LN4@MSG_ReadCl:
	mov	edx, DWORD PTR _dt$[ebp]
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR [edx+12]
	jge	SHORT $LN3@MSG_ReadCl

; 1552 : 	{
; 1553 : 		Delta_ReadField( msg, pField, from, to, timebase );

	push	ecx
	movss	xmm0, DWORD PTR _timebase$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _to$[ebp]
	push	ecx
	mov	edx, DWORD PTR _from$[ebp]
	push	edx
	mov	eax, DWORD PTR _pField$[ebp]
	push	eax
	mov	ecx, DWORD PTR _msg$[ebp]
	push	ecx
	call	_Delta_ReadField
	add	esp, 20					; 00000014H

; 1554 : 	}

	jmp	SHORT $LN2@MSG_ReadCl
$LN3@MSG_ReadCl:

; 1555 : }

	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	0
_MSG_ReadClientData ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\documents\github\xashtasks\xash_build4529_src\engine\common\net_encode.c
_TEXT	SEGMENT
_startBit$ = -28					; size = 4
tv81 = -24						; size = 4
tv73 = -20						; size = 4
_numChanges$ = -16					; size = 4
_i$ = -12						; size = 4
_pField$ = -8						; size = 4
_dt$ = -4						; size = 4
_msg$ = 8						; size = 4
_from$ = 12						; size = 4
_to$ = 16						; size = 4
_timebase$ = 20						; size = 4
_MSG_WriteClientData PROC

; 1494 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH

; 1495 : 	delta_t		*pField;
; 1496 : 	delta_info_t	*dt;
; 1497 : 	int		i, startBit;
; 1498 : 	int		numChanges = 0;

	mov	DWORD PTR _numChanges$[ebp], 0

; 1499 : 
; 1500 : 	dt = Delta_FindStruct( "clientdata_t" );

	push	OFFSET $SG140368
	call	_Delta_FindStruct
	add	esp, 4
	mov	DWORD PTR _dt$[ebp], eax

; 1501 : 	Assert( dt && dt->bInitialized );

	cmp	DWORD PTR _dt$[ebp], 0
	je	SHORT $LN8@MSG_WriteC
	mov	eax, DWORD PTR _dt$[ebp]
	cmp	DWORD PTR [eax+60], 0
	je	SHORT $LN8@MSG_WriteC
	mov	DWORD PTR tv73[ebp], 1
	jmp	SHORT $LN9@MSG_WriteC
$LN8@MSG_WriteC:
	mov	DWORD PTR tv73[ebp], 0
$LN9@MSG_WriteC:
	push	0
	push	1501					; 000005ddH
	push	OFFSET $SG140369
	push	OFFSET $SG140370
	mov	ecx, DWORD PTR tv73[ebp]
	push	ecx
	call	_DBG_AssertFunction
	add	esp, 20					; 00000014H

; 1502 : 
; 1503 : 	pField = dt->pFields;

	mov	edx, DWORD PTR _dt$[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	DWORD PTR _pField$[ebp], eax

; 1504 : 	Assert( pField != NULL );

	cmp	DWORD PTR _pField$[ebp], 0
	je	SHORT $LN10@MSG_WriteC
	mov	DWORD PTR tv81[ebp], 1
	jmp	SHORT $LN11@MSG_WriteC
$LN10@MSG_WriteC:
	mov	DWORD PTR tv81[ebp], 0
$LN11@MSG_WriteC:
	push	0
	push	1504					; 000005e0H
	push	OFFSET $SG140371
	push	OFFSET $SG140372
	mov	ecx, DWORD PTR tv81[ebp]
	push	ecx
	call	_DBG_AssertFunction
	add	esp, 20					; 00000014H

; 1505 : 
; 1506 : 	startBit = msg->iCurBit;

	mov	edx, DWORD PTR _msg$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	DWORD PTR _startBit$[ebp], eax

; 1507 : 
; 1508 : 	MSG_WriteOneBit( msg, 1 ); // have clientdata

	push	1
	mov	ecx, DWORD PTR _msg$[ebp]
	push	ecx
	call	_MSG_WriteOneBit
	add	esp, 8

; 1509 : 
; 1510 : 	// activate fields and call custom encode func
; 1511 : 	Delta_CustomEncode( dt, from, to );

	mov	edx, DWORD PTR _to$[ebp]
	push	edx
	mov	eax, DWORD PTR _from$[ebp]
	push	eax
	mov	ecx, DWORD PTR _dt$[ebp]
	push	ecx
	call	_Delta_CustomEncode
	add	esp, 12					; 0000000cH

; 1512 : 
; 1513 : 	// process fields
; 1514 : 	for( i = 0; i < dt->numFields; i++, pField++ )

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN4@MSG_WriteC
$LN2@MSG_WriteC:
	mov	edx, DWORD PTR _i$[ebp]
	add	edx, 1
	mov	DWORD PTR _i$[ebp], edx
	mov	eax, DWORD PTR _pField$[ebp]
	add	eax, 32					; 00000020H
	mov	DWORD PTR _pField$[ebp], eax
$LN4@MSG_WriteC:
	mov	ecx, DWORD PTR _dt$[ebp]
	mov	edx, DWORD PTR _i$[ebp]
	cmp	edx, DWORD PTR [ecx+12]
	jge	SHORT $LN3@MSG_WriteC

; 1515 : 	{
; 1516 : 		if( Delta_WriteField( msg, pField, from, to, timebase ))

	push	ecx
	movss	xmm0, DWORD PTR _timebase$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _to$[ebp]
	push	eax
	mov	ecx, DWORD PTR _from$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pField$[ebp]
	push	edx
	mov	eax, DWORD PTR _msg$[ebp]
	push	eax
	call	_Delta_WriteField
	add	esp, 20					; 00000014H
	test	eax, eax
	je	SHORT $LN5@MSG_WriteC

; 1517 : 			numChanges++;

	mov	ecx, DWORD PTR _numChanges$[ebp]
	add	ecx, 1
	mov	DWORD PTR _numChanges$[ebp], ecx
$LN5@MSG_WriteC:

; 1518 : 	}

	jmp	SHORT $LN2@MSG_WriteC
$LN3@MSG_WriteC:

; 1519 : 
; 1520 : 	if( numChanges ) return; // we have updates

	cmp	DWORD PTR _numChanges$[ebp], 0
	je	SHORT $LN6@MSG_WriteC
	jmp	SHORT $LN1@MSG_WriteC
$LN6@MSG_WriteC:

; 1521 : 
; 1522 : 	MSG_SeekToBit( msg, startBit, SEEK_SET );

	push	0
	mov	edx, DWORD PTR _startBit$[ebp]
	push	edx
	mov	eax, DWORD PTR _msg$[ebp]
	push	eax
	call	_MSG_SeekToBit
	add	esp, 12					; 0000000cH

; 1523 : 	MSG_WriteOneBit( msg, 0 ); // no changes

	push	0
	mov	ecx, DWORD PTR _msg$[ebp]
	push	ecx
	call	_MSG_WriteOneBit
	add	esp, 8
$LN1@MSG_WriteC:

; 1524 : }

	mov	esp, ebp
	pop	ebp
	ret	0
_MSG_WriteClientData ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\documents\github\xashtasks\xash_build4529_src\engine\common\net_encode.c
_TEXT	SEGMENT
tv81 = -20						; size = 4
tv73 = -16						; size = 4
_i$ = -12						; size = 4
_pField$ = -8						; size = 4
_dt$ = -4						; size = 4
_msg$ = 8						; size = 4
_from$ = 12						; size = 4
_to$ = 16						; size = 4
_MSG_ReadDeltaMovevars PROC

; 1458 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	push	esi
	push	edi

; 1459 : 	delta_t		*pField;
; 1460 : 	delta_info_t	*dt;
; 1461 : 	int		i;
; 1462 : 
; 1463 : 	dt = Delta_FindStruct( "movevars_t" );

	push	OFFSET $SG140343
	call	_Delta_FindStruct
	add	esp, 4
	mov	DWORD PTR _dt$[ebp], eax

; 1464 : 	Assert( dt && dt->bInitialized );

	cmp	DWORD PTR _dt$[ebp], 0
	je	SHORT $LN6@MSG_ReadDe
	mov	eax, DWORD PTR _dt$[ebp]
	cmp	DWORD PTR [eax+60], 0
	je	SHORT $LN6@MSG_ReadDe
	mov	DWORD PTR tv73[ebp], 1
	jmp	SHORT $LN7@MSG_ReadDe
$LN6@MSG_ReadDe:
	mov	DWORD PTR tv73[ebp], 0
$LN7@MSG_ReadDe:
	push	0
	push	1464					; 000005b8H
	push	OFFSET $SG140344
	push	OFFSET $SG140345
	mov	ecx, DWORD PTR tv73[ebp]
	push	ecx
	call	_DBG_AssertFunction
	add	esp, 20					; 00000014H

; 1465 : 
; 1466 : 	pField = dt->pFields;

	mov	edx, DWORD PTR _dt$[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	DWORD PTR _pField$[ebp], eax

; 1467 : 	Assert( pField != NULL );

	cmp	DWORD PTR _pField$[ebp], 0
	je	SHORT $LN8@MSG_ReadDe
	mov	DWORD PTR tv81[ebp], 1
	jmp	SHORT $LN9@MSG_ReadDe
$LN8@MSG_ReadDe:
	mov	DWORD PTR tv81[ebp], 0
$LN9@MSG_ReadDe:
	push	0
	push	1467					; 000005bbH
	push	OFFSET $SG140346
	push	OFFSET $SG140347
	mov	ecx, DWORD PTR tv81[ebp]
	push	ecx
	call	_DBG_AssertFunction
	add	esp, 20					; 00000014H

; 1468 : 
; 1469 : 	*to = *from;

	mov	ecx, 36					; 00000024H
	mov	esi, DWORD PTR _from$[ebp]
	mov	edi, DWORD PTR _to$[ebp]
	rep movsd

; 1470 : 
; 1471 : 	// process fields
; 1472 : 	for( i = 0; i < dt->numFields; i++, pField++ )

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN4@MSG_ReadDe
$LN2@MSG_ReadDe:
	mov	edx, DWORD PTR _i$[ebp]
	add	edx, 1
	mov	DWORD PTR _i$[ebp], edx
	mov	eax, DWORD PTR _pField$[ebp]
	add	eax, 32					; 00000020H
	mov	DWORD PTR _pField$[ebp], eax
$LN4@MSG_ReadDe:
	mov	ecx, DWORD PTR _dt$[ebp]
	mov	edx, DWORD PTR _i$[ebp]
	cmp	edx, DWORD PTR [ecx+12]
	jge	SHORT $LN3@MSG_ReadDe

; 1473 : 	{
; 1474 : 		Delta_ReadField( msg, pField, from, to, 0.0f );

	push	ecx
	xorps	xmm0, xmm0
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _to$[ebp]
	push	eax
	mov	ecx, DWORD PTR _from$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pField$[ebp]
	push	edx
	mov	eax, DWORD PTR _msg$[ebp]
	push	eax
	call	_Delta_ReadField
	add	esp, 20					; 00000014H

; 1475 : 	}

	jmp	SHORT $LN2@MSG_ReadDe
$LN3@MSG_ReadDe:

; 1476 : }

	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	0
_MSG_ReadDeltaMovevars ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\documents\github\xashtasks\xash_build4529_src\engine\common\net_encode.c
_TEXT	SEGMENT
_startBit$ = -28					; size = 4
tv81 = -24						; size = 4
tv73 = -20						; size = 4
_numChanges$ = -16					; size = 4
_i$ = -12						; size = 4
_pField$ = -8						; size = 4
_dt$ = -4						; size = 4
_msg$ = 8						; size = 4
_from$ = 12						; size = 4
_to$ = 16						; size = 4
_MSG_WriteDeltaMovevars PROC

; 1422 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH

; 1423 : 	delta_t		*pField;
; 1424 : 	delta_info_t	*dt;
; 1425 : 	int		i, startBit;
; 1426 : 	int		numChanges = 0;

	mov	DWORD PTR _numChanges$[ebp], 0

; 1427 : 
; 1428 : 	dt = Delta_FindStruct( "movevars_t" );

	push	OFFSET $SG140320
	call	_Delta_FindStruct
	add	esp, 4
	mov	DWORD PTR _dt$[ebp], eax

; 1429 : 	Assert( dt && dt->bInitialized );

	cmp	DWORD PTR _dt$[ebp], 0
	je	SHORT $LN8@MSG_WriteD
	mov	eax, DWORD PTR _dt$[ebp]
	cmp	DWORD PTR [eax+60], 0
	je	SHORT $LN8@MSG_WriteD
	mov	DWORD PTR tv73[ebp], 1
	jmp	SHORT $LN9@MSG_WriteD
$LN8@MSG_WriteD:
	mov	DWORD PTR tv73[ebp], 0
$LN9@MSG_WriteD:
	push	0
	push	1429					; 00000595H
	push	OFFSET $SG140321
	push	OFFSET $SG140322
	mov	ecx, DWORD PTR tv73[ebp]
	push	ecx
	call	_DBG_AssertFunction
	add	esp, 20					; 00000014H

; 1430 : 
; 1431 : 	pField = dt->pFields;

	mov	edx, DWORD PTR _dt$[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	DWORD PTR _pField$[ebp], eax

; 1432 : 	Assert( pField != NULL );

	cmp	DWORD PTR _pField$[ebp], 0
	je	SHORT $LN10@MSG_WriteD
	mov	DWORD PTR tv81[ebp], 1
	jmp	SHORT $LN11@MSG_WriteD
$LN10@MSG_WriteD:
	mov	DWORD PTR tv81[ebp], 0
$LN11@MSG_WriteD:
	push	0
	push	1432					; 00000598H
	push	OFFSET $SG140323
	push	OFFSET $SG140324
	mov	ecx, DWORD PTR tv81[ebp]
	push	ecx
	call	_DBG_AssertFunction
	add	esp, 20					; 00000014H

; 1433 : 
; 1434 : 	startBit = msg->iCurBit;

	mov	edx, DWORD PTR _msg$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	DWORD PTR _startBit$[ebp], eax

; 1435 : 
; 1436 : 	// activate fields and call custom encode func
; 1437 : 	Delta_CustomEncode( dt, from, to );

	mov	ecx, DWORD PTR _to$[ebp]
	push	ecx
	mov	edx, DWORD PTR _from$[ebp]
	push	edx
	mov	eax, DWORD PTR _dt$[ebp]
	push	eax
	call	_Delta_CustomEncode
	add	esp, 12					; 0000000cH

; 1438 : 
; 1439 : 	MSG_BeginServerCmd( msg, svc_deltamovevars );

	push	0
	push	1
	push	44					; 0000002cH
	mov	ecx, DWORD PTR _msg$[ebp]
	push	ecx
	call	_MSG_WriteCmdExt
	add	esp, 16					; 00000010H

; 1440 : 
; 1441 : 	// process fields
; 1442 : 	for( i = 0; i < dt->numFields; i++, pField++ )

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN4@MSG_WriteD
$LN2@MSG_WriteD:
	mov	edx, DWORD PTR _i$[ebp]
	add	edx, 1
	mov	DWORD PTR _i$[ebp], edx
	mov	eax, DWORD PTR _pField$[ebp]
	add	eax, 32					; 00000020H
	mov	DWORD PTR _pField$[ebp], eax
$LN4@MSG_WriteD:
	mov	ecx, DWORD PTR _dt$[ebp]
	mov	edx, DWORD PTR _i$[ebp]
	cmp	edx, DWORD PTR [ecx+12]
	jge	SHORT $LN3@MSG_WriteD

; 1443 : 	{
; 1444 : 		if( Delta_WriteField( msg, pField, from, to, 0.0f ))

	push	ecx
	xorps	xmm0, xmm0
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _to$[ebp]
	push	eax
	mov	ecx, DWORD PTR _from$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pField$[ebp]
	push	edx
	mov	eax, DWORD PTR _msg$[ebp]
	push	eax
	call	_Delta_WriteField
	add	esp, 20					; 00000014H
	test	eax, eax
	je	SHORT $LN5@MSG_WriteD

; 1445 : 			numChanges++;

	mov	ecx, DWORD PTR _numChanges$[ebp]
	add	ecx, 1
	mov	DWORD PTR _numChanges$[ebp], ecx
$LN5@MSG_WriteD:

; 1446 : 	}

	jmp	SHORT $LN2@MSG_WriteD
$LN3@MSG_WriteD:

; 1447 : 
; 1448 : 	// if we have no changes - kill the message
; 1449 : 	if( !numChanges )

	cmp	DWORD PTR _numChanges$[ebp], 0
	jne	SHORT $LN6@MSG_WriteD

; 1450 : 	{
; 1451 : 		MSG_SeekToBit( msg, startBit, SEEK_SET );

	push	0
	mov	edx, DWORD PTR _startBit$[ebp]
	push	edx
	mov	eax, DWORD PTR _msg$[ebp]
	push	eax
	call	_MSG_SeekToBit
	add	esp, 12					; 0000000cH

; 1452 : 		return false;

	xor	eax, eax
	jmp	SHORT $LN1@MSG_WriteD
$LN6@MSG_WriteD:

; 1453 : 	}
; 1454 : 	return true;

	mov	eax, 1
$LN1@MSG_WriteD:

; 1455 : }

	mov	esp, ebp
	pop	ebp
	ret	0
_MSG_WriteDeltaMovevars ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\documents\github\xashtasks\xash_build4529_src\engine\common\net_encode.c
_TEXT	SEGMENT
tv81 = -20						; size = 4
tv73 = -16						; size = 4
_i$ = -12						; size = 4
_pField$ = -8						; size = 4
_dt$ = -4						; size = 4
_msg$ = 8						; size = 4
_from$ = 12						; size = 4
_to$ = 16						; size = 4
_MSG_ReadDeltaEvent PROC

; 1394 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	push	esi
	push	edi

; 1395 : 	delta_t		*pField;
; 1396 : 	delta_info_t	*dt;
; 1397 : 	int		i;
; 1398 : 
; 1399 : 	dt = Delta_FindStruct( "event_t" );

	push	OFFSET $SG140296
	call	_Delta_FindStruct
	add	esp, 4
	mov	DWORD PTR _dt$[ebp], eax

; 1400 : 	Assert( dt && dt->bInitialized );

	cmp	DWORD PTR _dt$[ebp], 0
	je	SHORT $LN6@MSG_ReadDe
	mov	eax, DWORD PTR _dt$[ebp]
	cmp	DWORD PTR [eax+60], 0
	je	SHORT $LN6@MSG_ReadDe
	mov	DWORD PTR tv73[ebp], 1
	jmp	SHORT $LN7@MSG_ReadDe
$LN6@MSG_ReadDe:
	mov	DWORD PTR tv73[ebp], 0
$LN7@MSG_ReadDe:
	push	0
	push	1400					; 00000578H
	push	OFFSET $SG140297
	push	OFFSET $SG140298
	mov	ecx, DWORD PTR tv73[ebp]
	push	ecx
	call	_DBG_AssertFunction
	add	esp, 20					; 00000014H

; 1401 : 
; 1402 : 	pField = dt->pFields;

	mov	edx, DWORD PTR _dt$[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	DWORD PTR _pField$[ebp], eax

; 1403 : 	Assert( pField != NULL );

	cmp	DWORD PTR _pField$[ebp], 0
	je	SHORT $LN8@MSG_ReadDe
	mov	DWORD PTR tv81[ebp], 1
	jmp	SHORT $LN9@MSG_ReadDe
$LN8@MSG_ReadDe:
	mov	DWORD PTR tv81[ebp], 0
$LN9@MSG_ReadDe:
	push	0
	push	1403					; 0000057bH
	push	OFFSET $SG140299
	push	OFFSET $SG140300
	mov	ecx, DWORD PTR tv81[ebp]
	push	ecx
	call	_DBG_AssertFunction
	add	esp, 20					; 00000014H

; 1404 : 
; 1405 : 	*to = *from;

	mov	ecx, 18					; 00000012H
	mov	esi, DWORD PTR _from$[ebp]
	mov	edi, DWORD PTR _to$[ebp]
	rep movsd

; 1406 : 
; 1407 : 	// process fields
; 1408 : 	for( i = 0; i < dt->numFields; i++, pField++ )

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN4@MSG_ReadDe
$LN2@MSG_ReadDe:
	mov	edx, DWORD PTR _i$[ebp]
	add	edx, 1
	mov	DWORD PTR _i$[ebp], edx
	mov	eax, DWORD PTR _pField$[ebp]
	add	eax, 32					; 00000020H
	mov	DWORD PTR _pField$[ebp], eax
$LN4@MSG_ReadDe:
	mov	ecx, DWORD PTR _dt$[ebp]
	mov	edx, DWORD PTR _i$[ebp]
	cmp	edx, DWORD PTR [ecx+12]
	jge	SHORT $LN3@MSG_ReadDe

; 1409 : 	{
; 1410 : 		Delta_ReadField( msg, pField, from, to, 0.0f );

	push	ecx
	xorps	xmm0, xmm0
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _to$[ebp]
	push	eax
	mov	ecx, DWORD PTR _from$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pField$[ebp]
	push	edx
	mov	eax, DWORD PTR _msg$[ebp]
	push	eax
	call	_Delta_ReadField
	add	esp, 20					; 00000014H

; 1411 : 	}

	jmp	SHORT $LN2@MSG_ReadDe
$LN3@MSG_ReadDe:

; 1412 : }

	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	0
_MSG_ReadDeltaEvent ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\documents\github\xashtasks\xash_build4529_src\engine\common\net_encode.c
_TEXT	SEGMENT
tv81 = -20						; size = 4
tv73 = -16						; size = 4
_i$ = -12						; size = 4
_pField$ = -8						; size = 4
_dt$ = -4						; size = 4
_msg$ = 8						; size = 4
_from$ = 12						; size = 4
_to$ = 16						; size = 4
_MSG_WriteDeltaEvent PROC

; 1367 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H

; 1368 : 	delta_t		*pField;
; 1369 : 	delta_info_t	*dt;
; 1370 : 	int		i;
; 1371 : 
; 1372 : 	dt = Delta_FindStruct( "event_t" );

	push	OFFSET $SG140275
	call	_Delta_FindStruct
	add	esp, 4
	mov	DWORD PTR _dt$[ebp], eax

; 1373 : 	Assert( dt && dt->bInitialized );

	cmp	DWORD PTR _dt$[ebp], 0
	je	SHORT $LN6@MSG_WriteD
	mov	eax, DWORD PTR _dt$[ebp]
	cmp	DWORD PTR [eax+60], 0
	je	SHORT $LN6@MSG_WriteD
	mov	DWORD PTR tv73[ebp], 1
	jmp	SHORT $LN7@MSG_WriteD
$LN6@MSG_WriteD:
	mov	DWORD PTR tv73[ebp], 0
$LN7@MSG_WriteD:
	push	0
	push	1373					; 0000055dH
	push	OFFSET $SG140276
	push	OFFSET $SG140277
	mov	ecx, DWORD PTR tv73[ebp]
	push	ecx
	call	_DBG_AssertFunction
	add	esp, 20					; 00000014H

; 1374 : 
; 1375 : 	pField = dt->pFields;

	mov	edx, DWORD PTR _dt$[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	DWORD PTR _pField$[ebp], eax

; 1376 : 	Assert( pField != NULL );

	cmp	DWORD PTR _pField$[ebp], 0
	je	SHORT $LN8@MSG_WriteD
	mov	DWORD PTR tv81[ebp], 1
	jmp	SHORT $LN9@MSG_WriteD
$LN8@MSG_WriteD:
	mov	DWORD PTR tv81[ebp], 0
$LN9@MSG_WriteD:
	push	0
	push	1376					; 00000560H
	push	OFFSET $SG140278
	push	OFFSET $SG140279
	mov	ecx, DWORD PTR tv81[ebp]
	push	ecx
	call	_DBG_AssertFunction
	add	esp, 20					; 00000014H

; 1377 : 
; 1378 : 	// activate fields and call custom encode func
; 1379 : 	Delta_CustomEncode( dt, from, to );

	mov	edx, DWORD PTR _to$[ebp]
	push	edx
	mov	eax, DWORD PTR _from$[ebp]
	push	eax
	mov	ecx, DWORD PTR _dt$[ebp]
	push	ecx
	call	_Delta_CustomEncode
	add	esp, 12					; 0000000cH

; 1380 : 
; 1381 : 	// process fields
; 1382 : 	for( i = 0; i < dt->numFields; i++, pField++ )

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN4@MSG_WriteD
$LN2@MSG_WriteD:
	mov	edx, DWORD PTR _i$[ebp]
	add	edx, 1
	mov	DWORD PTR _i$[ebp], edx
	mov	eax, DWORD PTR _pField$[ebp]
	add	eax, 32					; 00000020H
	mov	DWORD PTR _pField$[ebp], eax
$LN4@MSG_WriteD:
	mov	ecx, DWORD PTR _dt$[ebp]
	mov	edx, DWORD PTR _i$[ebp]
	cmp	edx, DWORD PTR [ecx+12]
	jge	SHORT $LN3@MSG_WriteD

; 1383 : 	{
; 1384 : 		Delta_WriteField( msg, pField, from, to, 0.0f );

	push	ecx
	xorps	xmm0, xmm0
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _to$[ebp]
	push	eax
	mov	ecx, DWORD PTR _from$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pField$[ebp]
	push	edx
	mov	eax, DWORD PTR _msg$[ebp]
	push	eax
	call	_Delta_WriteField
	add	esp, 20					; 00000014H

; 1385 : 	}

	jmp	SHORT $LN2@MSG_WriteD
$LN3@MSG_WriteD:

; 1386 : }

	mov	esp, ebp
	pop	ebp
	ret	0
_MSG_WriteDeltaEvent ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\documents\github\xashtasks\xash_build4529_src\engine\common\net_encode.c
_TEXT	SEGMENT
tv81 = -20						; size = 4
tv73 = -16						; size = 4
_i$ = -12						; size = 4
_pField$ = -8						; size = 4
_dt$ = -4						; size = 4
_msg$ = 8						; size = 4
_from$ = 12						; size = 4
_to$ = 16						; size = 4
_MSG_ReadDeltaUsercmd PROC

; 1332 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	push	esi
	push	edi

; 1333 : 	delta_t		*pField;
; 1334 : 	delta_info_t	*dt;
; 1335 : 	int		i;
; 1336 : 
; 1337 : 	dt = Delta_FindStruct( "usercmd_t" );

	push	OFFSET $SG140254
	call	_Delta_FindStruct
	add	esp, 4
	mov	DWORD PTR _dt$[ebp], eax

; 1338 : 	Assert( dt && dt->bInitialized );

	cmp	DWORD PTR _dt$[ebp], 0
	je	SHORT $LN6@MSG_ReadDe
	mov	eax, DWORD PTR _dt$[ebp]
	cmp	DWORD PTR [eax+60], 0
	je	SHORT $LN6@MSG_ReadDe
	mov	DWORD PTR tv73[ebp], 1
	jmp	SHORT $LN7@MSG_ReadDe
$LN6@MSG_ReadDe:
	mov	DWORD PTR tv73[ebp], 0
$LN7@MSG_ReadDe:
	push	0
	push	1338					; 0000053aH
	push	OFFSET $SG140255
	push	OFFSET $SG140256
	mov	ecx, DWORD PTR tv73[ebp]
	push	ecx
	call	_DBG_AssertFunction
	add	esp, 20					; 00000014H

; 1339 : 
; 1340 : 	pField = dt->pFields;

	mov	edx, DWORD PTR _dt$[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	DWORD PTR _pField$[ebp], eax

; 1341 : 	Assert( pField != NULL );

	cmp	DWORD PTR _pField$[ebp], 0
	je	SHORT $LN8@MSG_ReadDe
	mov	DWORD PTR tv81[ebp], 1
	jmp	SHORT $LN9@MSG_ReadDe
$LN8@MSG_ReadDe:
	mov	DWORD PTR tv81[ebp], 0
$LN9@MSG_ReadDe:
	push	0
	push	1341					; 0000053dH
	push	OFFSET $SG140257
	push	OFFSET $SG140258
	mov	ecx, DWORD PTR tv81[ebp]
	push	ecx
	call	_DBG_AssertFunction
	add	esp, 20					; 00000014H

; 1342 : 
; 1343 : 	*to = *from;

	mov	ecx, 13					; 0000000dH
	mov	esi, DWORD PTR _from$[ebp]
	mov	edi, DWORD PTR _to$[ebp]
	rep movsd

; 1344 : 
; 1345 : 	// process fields
; 1346 : 	for( i = 0; i < dt->numFields; i++, pField++ )

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN4@MSG_ReadDe
$LN2@MSG_ReadDe:
	mov	edx, DWORD PTR _i$[ebp]
	add	edx, 1
	mov	DWORD PTR _i$[ebp], edx
	mov	eax, DWORD PTR _pField$[ebp]
	add	eax, 32					; 00000020H
	mov	DWORD PTR _pField$[ebp], eax
$LN4@MSG_ReadDe:
	mov	ecx, DWORD PTR _dt$[ebp]
	mov	edx, DWORD PTR _i$[ebp]
	cmp	edx, DWORD PTR [ecx+12]
	jge	SHORT $LN3@MSG_ReadDe

; 1347 : 	{
; 1348 : 		Delta_ReadField( msg, pField, from, to, 0.0f );

	push	ecx
	xorps	xmm0, xmm0
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _to$[ebp]
	push	eax
	mov	ecx, DWORD PTR _from$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pField$[ebp]
	push	edx
	mov	eax, DWORD PTR _msg$[ebp]
	push	eax
	call	_Delta_ReadField
	add	esp, 20					; 00000014H

; 1349 : 	}

	jmp	SHORT $LN2@MSG_ReadDe
$LN3@MSG_ReadDe:

; 1350 : 
; 1351 : 	COM_NormalizeAngles( to->viewangles );

	mov	ecx, DWORD PTR _to$[ebp]
	add	ecx, 4
	push	ecx
	call	_COM_NormalizeAngles
	add	esp, 4

; 1352 : }

	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	0
_MSG_ReadDeltaUsercmd ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\documents\github\xashtasks\xash_build4529_src\engine\common\net_encode.c
_TEXT	SEGMENT
tv81 = -20						; size = 4
tv73 = -16						; size = 4
_i$ = -12						; size = 4
_pField$ = -8						; size = 4
_dt$ = -4						; size = 4
_msg$ = 8						; size = 4
_from$ = 12						; size = 4
_to$ = 16						; size = 4
_MSG_WriteDeltaUsercmd PROC

; 1305 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H

; 1306 : 	delta_t		*pField;
; 1307 : 	delta_info_t	*dt;
; 1308 : 	int		i;
; 1309 : 
; 1310 : 	dt = Delta_FindStruct( "usercmd_t" );

	push	OFFSET $SG140233
	call	_Delta_FindStruct
	add	esp, 4
	mov	DWORD PTR _dt$[ebp], eax

; 1311 : 	Assert( dt && dt->bInitialized );

	cmp	DWORD PTR _dt$[ebp], 0
	je	SHORT $LN6@MSG_WriteD
	mov	eax, DWORD PTR _dt$[ebp]
	cmp	DWORD PTR [eax+60], 0
	je	SHORT $LN6@MSG_WriteD
	mov	DWORD PTR tv73[ebp], 1
	jmp	SHORT $LN7@MSG_WriteD
$LN6@MSG_WriteD:
	mov	DWORD PTR tv73[ebp], 0
$LN7@MSG_WriteD:
	push	0
	push	1311					; 0000051fH
	push	OFFSET $SG140234
	push	OFFSET $SG140235
	mov	ecx, DWORD PTR tv73[ebp]
	push	ecx
	call	_DBG_AssertFunction
	add	esp, 20					; 00000014H

; 1312 : 
; 1313 : 	pField = dt->pFields;

	mov	edx, DWORD PTR _dt$[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	DWORD PTR _pField$[ebp], eax

; 1314 : 	Assert( pField != NULL );

	cmp	DWORD PTR _pField$[ebp], 0
	je	SHORT $LN8@MSG_WriteD
	mov	DWORD PTR tv81[ebp], 1
	jmp	SHORT $LN9@MSG_WriteD
$LN8@MSG_WriteD:
	mov	DWORD PTR tv81[ebp], 0
$LN9@MSG_WriteD:
	push	0
	push	1314					; 00000522H
	push	OFFSET $SG140236
	push	OFFSET $SG140237
	mov	ecx, DWORD PTR tv81[ebp]
	push	ecx
	call	_DBG_AssertFunction
	add	esp, 20					; 00000014H

; 1315 : 
; 1316 : 	// activate fields and call custom encode func
; 1317 : 	Delta_CustomEncode( dt, from, to );

	mov	edx, DWORD PTR _to$[ebp]
	push	edx
	mov	eax, DWORD PTR _from$[ebp]
	push	eax
	mov	ecx, DWORD PTR _dt$[ebp]
	push	ecx
	call	_Delta_CustomEncode
	add	esp, 12					; 0000000cH

; 1318 : 
; 1319 : 	// process fields
; 1320 : 	for( i = 0; i < dt->numFields; i++, pField++ )

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN4@MSG_WriteD
$LN2@MSG_WriteD:
	mov	edx, DWORD PTR _i$[ebp]
	add	edx, 1
	mov	DWORD PTR _i$[ebp], edx
	mov	eax, DWORD PTR _pField$[ebp]
	add	eax, 32					; 00000020H
	mov	DWORD PTR _pField$[ebp], eax
$LN4@MSG_WriteD:
	mov	ecx, DWORD PTR _dt$[ebp]
	mov	edx, DWORD PTR _i$[ebp]
	cmp	edx, DWORD PTR [ecx+12]
	jge	SHORT $LN3@MSG_WriteD

; 1321 : 	{
; 1322 : 		Delta_WriteField( msg, pField, from, to, 0.0f );

	push	ecx
	xorps	xmm0, xmm0
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _to$[ebp]
	push	eax
	mov	ecx, DWORD PTR _from$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pField$[ebp]
	push	edx
	mov	eax, DWORD PTR _msg$[ebp]
	push	eax
	call	_Delta_WriteField
	add	esp, 20					; 00000014H

; 1323 : 	}

	jmp	SHORT $LN2@MSG_WriteD
$LN3@MSG_WriteD:

; 1324 : }

	mov	esp, ebp
	pop	ebp
	ret	0
_MSG_WriteDeltaUsercmd ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\documents\github\xashtasks\xash_build4529_src\engine\common\net_encode.c
_TEXT	SEGMENT
_pName$ = -40						; size = 4
_flags$ = -36						; size = 4
_bits$ = -32						; size = 4
_tableIndex$ = -28					; size = 4
_mul$ = -24						; size = 4
_post_mul$ = -20					; size = 4
tv86 = -16						; size = 4
tv74 = -12						; size = 4
_nameIndex$ = -8					; size = 4
_dt$ = -4						; size = 4
_msg$ = 8						; size = 4
_Delta_ParseTableField PROC

; 509  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 40					; 00000028H

; 510  : 	int		tableIndex, nameIndex;
; 511  : 	float		mul = 1.0f, post_mul = 1.0f;

	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR _mul$[ebp], xmm0
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR _post_mul$[ebp], xmm0

; 512  : 	int		flags, bits;
; 513  : 	const char	*pName;
; 514  : 	delta_info_t	*dt;
; 515  : 
; 516  : 	tableIndex = MSG_ReadUBitLong( msg, 4 );

	push	4
	mov	eax, DWORD PTR _msg$[ebp]
	push	eax
	call	_MSG_ReadUBitLong
	add	esp, 8
	mov	DWORD PTR _tableIndex$[ebp], eax

; 517  : 	dt = Delta_FindStructByIndex( tableIndex );

	mov	ecx, DWORD PTR _tableIndex$[ebp]
	push	ecx
	call	_Delta_FindStructByIndex
	add	esp, 4
	mov	DWORD PTR _dt$[ebp], eax

; 518  : 
; 519  : 	Assert( dt != NULL );

	cmp	DWORD PTR _dt$[ebp], 0
	je	SHORT $LN5@Delta_Pars
	mov	DWORD PTR tv74[ebp], 1
	jmp	SHORT $LN6@Delta_Pars
$LN5@Delta_Pars:
	mov	DWORD PTR tv74[ebp], 0
$LN6@Delta_Pars:
	push	0
	push	519					; 00000207H
	push	OFFSET $SG139635
	push	OFFSET $SG139636
	mov	edx, DWORD PTR tv74[ebp]
	push	edx
	call	_DBG_AssertFunction
	add	esp, 20					; 00000014H

; 520  : 
; 521  : 	nameIndex = MSG_ReadUBitLong( msg, 8 );	// read field name index		

	push	8
	mov	eax, DWORD PTR _msg$[ebp]
	push	eax
	call	_MSG_ReadUBitLong
	add	esp, 8
	mov	DWORD PTR _nameIndex$[ebp], eax

; 522  : 	Assert( nameIndex >= 0 && nameIndex < dt->maxFields );

	cmp	DWORD PTR _nameIndex$[ebp], 0
	jl	SHORT $LN7@Delta_Pars
	mov	ecx, DWORD PTR _dt$[ebp]
	mov	edx, DWORD PTR _nameIndex$[ebp]
	cmp	edx, DWORD PTR [ecx+8]
	jge	SHORT $LN7@Delta_Pars
	mov	DWORD PTR tv86[ebp], 1
	jmp	SHORT $LN8@Delta_Pars
$LN7@Delta_Pars:
	mov	DWORD PTR tv86[ebp], 0
$LN8@Delta_Pars:
	push	0
	push	522					; 0000020aH
	push	OFFSET $SG139637
	push	OFFSET $SG139638
	mov	eax, DWORD PTR tv86[ebp]
	push	eax
	call	_DBG_AssertFunction
	add	esp, 20					; 00000014H

; 523  : 	pName = dt->pInfo[nameIndex].name;

	imul	ecx, DWORD PTR _nameIndex$[ebp], 12
	mov	edx, DWORD PTR _dt$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR [eax+ecx]
	mov	DWORD PTR _pName$[ebp], ecx

; 524  : 	flags = MSG_ReadUBitLong( msg, 10 );

	push	10					; 0000000aH
	mov	edx, DWORD PTR _msg$[ebp]
	push	edx
	call	_MSG_ReadUBitLong
	add	esp, 8
	mov	DWORD PTR _flags$[ebp], eax

; 525  : 	bits = MSG_ReadUBitLong( msg, 5 ) + 1;

	push	5
	mov	eax, DWORD PTR _msg$[ebp]
	push	eax
	call	_MSG_ReadUBitLong
	add	esp, 8
	add	eax, 1
	mov	DWORD PTR _bits$[ebp], eax

; 526  : 
; 527  : 	// read the multipliers
; 528  : 	if( MSG_ReadOneBit( msg ))

	mov	ecx, DWORD PTR _msg$[ebp]
	push	ecx
	call	_MSG_ReadOneBit
	add	esp, 4
	test	eax, eax
	je	SHORT $LN2@Delta_Pars

; 529  : 		mul = MSG_ReadFloat( msg );

	mov	edx, DWORD PTR _msg$[ebp]
	push	edx
	call	_MSG_ReadFloat
	add	esp, 4
	fstp	DWORD PTR _mul$[ebp]
$LN2@Delta_Pars:

; 530  : 
; 531  : 	if( MSG_ReadOneBit( msg ))

	mov	eax, DWORD PTR _msg$[ebp]
	push	eax
	call	_MSG_ReadOneBit
	add	esp, 4
	test	eax, eax
	je	SHORT $LN3@Delta_Pars

; 532  : 		post_mul = MSG_ReadFloat( msg );

	mov	ecx, DWORD PTR _msg$[ebp]
	push	ecx
	call	_MSG_ReadFloat
	add	esp, 4
	fstp	DWORD PTR _post_mul$[ebp]
$LN3@Delta_Pars:

; 533  : #if 0
; 534  : 	// delta encoders it's already initialized on this machine (local game)
; 535  : 	if( delta_init ) return;
; 536  : #endif
; 537  : 	// add field to table
; 538  : 	Delta_AddField( dt->pName, pName, flags, bits, mul, post_mul );

	push	ecx
	movss	xmm0, DWORD PTR _post_mul$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _mul$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _bits$[ebp]
	push	edx
	mov	eax, DWORD PTR _flags$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pName$[ebp]
	push	ecx
	mov	edx, DWORD PTR _dt$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	call	_Delta_AddField
	add	esp, 24					; 00000018H

; 539  : }

	mov	esp, ebp
	pop	ebp
	ret	0
_Delta_ParseTableField ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\documents\github\xashtasks\xash_build4529_src\engine\common\net_encode.c
_TEXT	SEGMENT
tv130 = -20						; size = 4
tv84 = -16						; size = 4
tv69 = -12						; size = 4
_nameIndex$ = -8					; size = 4
_dt$ = -4						; size = 4
_msg$ = 8						; size = 4
_tableIndex$ = 12					; size = 4
_pField$ = 16						; size = 4
_Delta_WriteTableField PROC

; 471  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H

; 472  : 	int		nameIndex;
; 473  : 	delta_info_t	*dt;
; 474  : 	
; 475  : 	Assert( pField != NULL );

	cmp	DWORD PTR _pField$[ebp], 0
	je	SHORT $LN8@Delta_Writ
	mov	DWORD PTR tv69[ebp], 1
	jmp	SHORT $LN9@Delta_Writ
$LN8@Delta_Writ:
	mov	DWORD PTR tv69[ebp], 0
$LN9@Delta_Writ:
	push	0
	push	475					; 000001dbH
	push	OFFSET $SG139610
	push	OFFSET $SG139611
	mov	eax, DWORD PTR tv69[ebp]
	push	eax
	call	_DBG_AssertFunction
	add	esp, 20					; 00000014H

; 476  : 
; 477  : 	if( !COM_CheckString( pField->name ))

	mov	ecx, DWORD PTR _pField$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	_COM_CheckString
	add	esp, 4
	test	eax, eax
	jne	SHORT $LN2@Delta_Writ

; 478  : 		return;	// not initialized ?

	jmp	$LN6@Delta_Writ
$LN2@Delta_Writ:

; 479  : 
; 480  : 	dt = Delta_FindStructByIndex( tableIndex );

	mov	eax, DWORD PTR _tableIndex$[ebp]
	push	eax
	call	_Delta_FindStructByIndex
	add	esp, 4
	mov	DWORD PTR _dt$[ebp], eax

; 481  : 	Assert( dt && dt->bInitialized );

	cmp	DWORD PTR _dt$[ebp], 0
	je	SHORT $LN10@Delta_Writ
	mov	ecx, DWORD PTR _dt$[ebp]
	cmp	DWORD PTR [ecx+60], 0
	je	SHORT $LN10@Delta_Writ
	mov	DWORD PTR tv84[ebp], 1
	jmp	SHORT $LN11@Delta_Writ
$LN10@Delta_Writ:
	mov	DWORD PTR tv84[ebp], 0
$LN11@Delta_Writ:
	push	0
	push	481					; 000001e1H
	push	OFFSET $SG139613
	push	OFFSET $SG139614
	mov	edx, DWORD PTR tv84[ebp]
	push	edx
	call	_DBG_AssertFunction
	add	esp, 20					; 00000014H

; 482  : 
; 483  : 	nameIndex = Delta_IndexForFieldInfo( dt->pInfo, pField->name );

	mov	eax, DWORD PTR _pField$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	edx, DWORD PTR _dt$[ebp]
	mov	eax, DWORD PTR [edx+4]
	push	eax
	call	_Delta_IndexForFieldInfo
	add	esp, 8
	mov	DWORD PTR _nameIndex$[ebp], eax

; 484  : 	Assert( nameIndex >= 0 && nameIndex < dt->maxFields );

	cmp	DWORD PTR _nameIndex$[ebp], 0
	jl	SHORT $LN12@Delta_Writ
	mov	ecx, DWORD PTR _dt$[ebp]
	mov	edx, DWORD PTR _nameIndex$[ebp]
	cmp	edx, DWORD PTR [ecx+8]
	jge	SHORT $LN12@Delta_Writ
	mov	DWORD PTR tv130[ebp], 1
	jmp	SHORT $LN13@Delta_Writ
$LN12@Delta_Writ:
	mov	DWORD PTR tv130[ebp], 0
$LN13@Delta_Writ:
	push	0
	push	484					; 000001e4H
	push	OFFSET $SG139615
	push	OFFSET $SG139616
	mov	eax, DWORD PTR tv130[ebp]
	push	eax
	call	_DBG_AssertFunction
	add	esp, 20					; 00000014H

; 485  : 
; 486  : 	MSG_BeginServerCmd( msg, svc_deltatable );

	push	0
	push	1
	push	14					; 0000000eH
	mov	ecx, DWORD PTR _msg$[ebp]
	push	ecx
	call	_MSG_WriteCmdExt
	add	esp, 16					; 00000010H

; 487  : 	MSG_WriteUBitLong( msg, tableIndex, 4 );	// assume we support 16 network tables

	push	4
	mov	edx, DWORD PTR _tableIndex$[ebp]
	push	edx
	mov	eax, DWORD PTR _msg$[ebp]
	push	eax
	call	_MSG_WriteUBitLong
	add	esp, 12					; 0000000cH

; 488  : 	MSG_WriteUBitLong( msg, nameIndex, 8 );		// 255 fields by struct should be enough

	push	8
	mov	ecx, DWORD PTR _nameIndex$[ebp]
	push	ecx
	mov	edx, DWORD PTR _msg$[ebp]
	push	edx
	call	_MSG_WriteUBitLong
	add	esp, 12					; 0000000cH

; 489  : 	MSG_WriteUBitLong( msg, pField->flags, 10 );	// flags are indicated various input types

	push	10					; 0000000aH
	mov	eax, DWORD PTR _pField$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	mov	edx, DWORD PTR _msg$[ebp]
	push	edx
	call	_MSG_WriteUBitLong
	add	esp, 12					; 0000000cH

; 490  : 	MSG_WriteUBitLong( msg, pField->bits - 1, 5 );	// max received value is 32 (32 bit)

	push	5
	mov	eax, DWORD PTR _pField$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	sub	ecx, 1
	push	ecx
	mov	edx, DWORD PTR _msg$[ebp]
	push	edx
	call	_MSG_WriteUBitLong
	add	esp, 12					; 0000000cH

; 491  : 
; 492  : 	// multipliers is null-compressed
; 493  : 	if( pField->multiplier != 1.0f )

	mov	eax, DWORD PTR _pField$[ebp]
	movss	xmm0, DWORD PTR [eax+16]
	ucomiss	xmm0, DWORD PTR __real@3f800000
	lahf
	test	ah, 68					; 00000044H
	jnp	SHORT $LN3@Delta_Writ

; 494  : 	{
; 495  : 		MSG_WriteOneBit( msg, 1 );

	push	1
	mov	ecx, DWORD PTR _msg$[ebp]
	push	ecx
	call	_MSG_WriteOneBit
	add	esp, 8

; 496  : 		MSG_WriteFloat( msg, pField->multiplier );

	mov	edx, DWORD PTR _pField$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [edx+16]
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _msg$[ebp]
	push	eax
	call	_MSG_WriteFloat
	add	esp, 8

; 497  : 	}

	jmp	SHORT $LN4@Delta_Writ
$LN3@Delta_Writ:

; 498  : 	else MSG_WriteOneBit( msg, 0 );

	push	0
	mov	ecx, DWORD PTR _msg$[ebp]
	push	ecx
	call	_MSG_WriteOneBit
	add	esp, 8
$LN4@Delta_Writ:

; 499  : 
; 500  : 	if( pField->post_multiplier != 1.0f )

	mov	edx, DWORD PTR _pField$[ebp]
	movss	xmm0, DWORD PTR [edx+20]
	ucomiss	xmm0, DWORD PTR __real@3f800000
	lahf
	test	ah, 68					; 00000044H
	jnp	SHORT $LN5@Delta_Writ

; 501  : 	{
; 502  : 		MSG_WriteOneBit( msg, 1 );

	push	1
	mov	eax, DWORD PTR _msg$[ebp]
	push	eax
	call	_MSG_WriteOneBit
	add	esp, 8

; 503  : 		MSG_WriteFloat( msg, pField->post_multiplier );

	mov	ecx, DWORD PTR _pField$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [ecx+20]
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _msg$[ebp]
	push	edx
	call	_MSG_WriteFloat
	add	esp, 8

; 504  : 	}

	jmp	SHORT $LN6@Delta_Writ
$LN5@Delta_Writ:

; 505  : 	else MSG_WriteOneBit( msg, 0 );

	push	0
	mov	eax, DWORD PTR _msg$[ebp]
	push	eax
	call	_MSG_WriteOneBit
	add	esp, 8
$LN6@Delta_Writ:

; 506  : }

	mov	esp, ebp
	pop	ebp
	ret	0
_Delta_WriteTableField ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\documents\github\xashtasks\xash_build4529_src\engine\common\net_encode.c
_TEXT	SEGMENT
_dt$ = -4						; size = 4
_pFields$ = 8						; size = 4
_fieldNumber$ = 12					; size = 4
_Delta_UnsetFieldByIndex PROC

; 1942 : {

	push	ebp
	mov	ebp, esp
	push	ecx

; 1943 : 	delta_info_t	*dt;
; 1944 : 
; 1945 : 	dt = Delta_FindStructByDelta( pFields );

	mov	eax, DWORD PTR _pFields$[ebp]
	push	eax
	call	_Delta_FindStructByDelta
	add	esp, 4
	mov	DWORD PTR _dt$[ebp], eax

; 1946 : 	if( dt == NULL || fieldNumber < 0 || fieldNumber >= dt->numFields )

	cmp	DWORD PTR _dt$[ebp], 0
	je	SHORT $LN3@Delta_Unse
	cmp	DWORD PTR _fieldNumber$[ebp], 0
	jl	SHORT $LN3@Delta_Unse
	mov	ecx, DWORD PTR _dt$[ebp]
	mov	edx, DWORD PTR _fieldNumber$[ebp]
	cmp	edx, DWORD PTR [ecx+12]
	jl	SHORT $LN2@Delta_Unse
$LN3@Delta_Unse:

; 1947 : 		return;

	jmp	SHORT $LN1@Delta_Unse
$LN2@Delta_Unse:

; 1948 : 
; 1949 : 	dt->pFields[fieldNumber].bInactive = true;

	mov	eax, DWORD PTR _fieldNumber$[ebp]
	shl	eax, 5
	mov	ecx, DWORD PTR _dt$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	DWORD PTR [edx+eax+28], 1
$LN1@Delta_Unse:

; 1950 : }

	mov	esp, ebp
	pop	ebp
	ret	0
_Delta_UnsetFieldByIndex ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\documents\github\xashtasks\xash_build4529_src\engine\common\net_encode.c
_TEXT	SEGMENT
_dt$ = -4						; size = 4
_pFields$ = 8						; size = 4
_fieldNumber$ = 12					; size = 4
_Delta_SetFieldByIndex PROC

; 1931 : {

	push	ebp
	mov	ebp, esp
	push	ecx

; 1932 : 	delta_info_t	*dt;
; 1933 : 
; 1934 : 	dt = Delta_FindStructByDelta( pFields );

	mov	eax, DWORD PTR _pFields$[ebp]
	push	eax
	call	_Delta_FindStructByDelta
	add	esp, 4
	mov	DWORD PTR _dt$[ebp], eax

; 1935 : 	if( dt == NULL || fieldNumber < 0 || fieldNumber >= dt->numFields )

	cmp	DWORD PTR _dt$[ebp], 0
	je	SHORT $LN3@Delta_SetF
	cmp	DWORD PTR _fieldNumber$[ebp], 0
	jl	SHORT $LN3@Delta_SetF
	mov	ecx, DWORD PTR _dt$[ebp]
	mov	edx, DWORD PTR _fieldNumber$[ebp]
	cmp	edx, DWORD PTR [ecx+12]
	jl	SHORT $LN2@Delta_SetF
$LN3@Delta_SetF:

; 1936 : 		return;

	jmp	SHORT $LN1@Delta_SetF
$LN2@Delta_SetF:

; 1937 : 
; 1938 : 	dt->pFields[fieldNumber].bInactive = false;

	mov	eax, DWORD PTR _fieldNumber$[ebp]
	shl	eax, 5
	mov	ecx, DWORD PTR _dt$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	DWORD PTR [edx+eax+28], 0
$LN1@Delta_SetF:

; 1939 : }

	mov	esp, ebp
	pop	ebp
	ret	0
_Delta_SetFieldByIndex ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\documents\github\xashtasks\xash_build4529_src\engine\common\net_encode.c
_TEXT	SEGMENT
_i$ = -12						; size = 4
_dt$ = -8						; size = 4
_pField$ = -4						; size = 4
_pFields$ = 8						; size = 4
_fieldname$ = 12					; size = 4
_Delta_UnsetField PROC

; 1911 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH

; 1912 : 	delta_info_t	*dt;
; 1913 : 	delta_t		*pField;
; 1914 : 	int		i;
; 1915 : 
; 1916 : 	dt = Delta_FindStructByDelta( pFields );

	mov	eax, DWORD PTR _pFields$[ebp]
	push	eax
	call	_Delta_FindStructByDelta
	add	esp, 4
	mov	DWORD PTR _dt$[ebp], eax

; 1917 : 	if( dt == NULL || !fieldname || !fieldname[0] )

	cmp	DWORD PTR _dt$[ebp], 0
	je	SHORT $LN6@Delta_Unse
	cmp	DWORD PTR _fieldname$[ebp], 0
	je	SHORT $LN6@Delta_Unse
	mov	ecx, 1
	imul	edx, ecx, 0
	mov	eax, DWORD PTR _fieldname$[ebp]
	movsx	ecx, BYTE PTR [eax+edx]
	test	ecx, ecx
	jne	SHORT $LN5@Delta_Unse
$LN6@Delta_Unse:

; 1918 : 		return;

	jmp	SHORT $LN1@Delta_Unse
$LN5@Delta_Unse:

; 1919 : 
; 1920 : 	for( i = 0, pField = dt->pFields; i < dt->numFields; i++, pField++ )

	mov	DWORD PTR _i$[ebp], 0
	mov	edx, DWORD PTR _dt$[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	DWORD PTR _pField$[ebp], eax
	jmp	SHORT $LN4@Delta_Unse
$LN2@Delta_Unse:
	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
	mov	edx, DWORD PTR _pField$[ebp]
	add	edx, 32					; 00000020H
	mov	DWORD PTR _pField$[ebp], edx
$LN4@Delta_Unse:
	mov	eax, DWORD PTR _dt$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	cmp	ecx, DWORD PTR [eax+12]
	jge	SHORT $LN1@Delta_Unse

; 1921 : 	{
; 1922 : 		if( !Q_strcmp( pField->name, fieldname ))

	push	99999					; 0001869fH
	mov	edx, DWORD PTR _fieldname$[ebp]
	push	edx
	mov	eax, DWORD PTR _pField$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	_Q_strncmp
	add	esp, 12					; 0000000cH
	test	eax, eax
	jne	SHORT $LN7@Delta_Unse

; 1923 : 		{
; 1924 : 			pField->bInactive = true;

	mov	edx, DWORD PTR _pField$[ebp]
	mov	DWORD PTR [edx+28], 1

; 1925 : 			return;

	jmp	SHORT $LN1@Delta_Unse
$LN7@Delta_Unse:

; 1926 : 		}
; 1927 : 	}

	jmp	SHORT $LN2@Delta_Unse
$LN1@Delta_Unse:

; 1928 : }

	mov	esp, ebp
	pop	ebp
	ret	0
_Delta_UnsetField ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\documents\github\xashtasks\xash_build4529_src\engine\common\net_encode.c
_TEXT	SEGMENT
_i$ = -12						; size = 4
_dt$ = -8						; size = 4
_pField$ = -4						; size = 4
_pFields$ = 8						; size = 4
_fieldname$ = 12					; size = 4
_Delta_SetField PROC

; 1891 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH

; 1892 : 	delta_info_t	*dt;
; 1893 : 	delta_t		*pField;
; 1894 : 	int		i;
; 1895 : 
; 1896 : 	dt = Delta_FindStructByDelta( pFields );

	mov	eax, DWORD PTR _pFields$[ebp]
	push	eax
	call	_Delta_FindStructByDelta
	add	esp, 4
	mov	DWORD PTR _dt$[ebp], eax

; 1897 : 	if( dt == NULL || !fieldname || !fieldname[0] )

	cmp	DWORD PTR _dt$[ebp], 0
	je	SHORT $LN6@Delta_SetF
	cmp	DWORD PTR _fieldname$[ebp], 0
	je	SHORT $LN6@Delta_SetF
	mov	ecx, 1
	imul	edx, ecx, 0
	mov	eax, DWORD PTR _fieldname$[ebp]
	movsx	ecx, BYTE PTR [eax+edx]
	test	ecx, ecx
	jne	SHORT $LN5@Delta_SetF
$LN6@Delta_SetF:

; 1898 : 		return;

	jmp	SHORT $LN1@Delta_SetF
$LN5@Delta_SetF:

; 1899 : 
; 1900 : 	for( i = 0, pField = dt->pFields; i < dt->numFields; i++, pField++ )

	mov	DWORD PTR _i$[ebp], 0
	mov	edx, DWORD PTR _dt$[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	DWORD PTR _pField$[ebp], eax
	jmp	SHORT $LN4@Delta_SetF
$LN2@Delta_SetF:
	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
	mov	edx, DWORD PTR _pField$[ebp]
	add	edx, 32					; 00000020H
	mov	DWORD PTR _pField$[ebp], edx
$LN4@Delta_SetF:
	mov	eax, DWORD PTR _dt$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	cmp	ecx, DWORD PTR [eax+12]
	jge	SHORT $LN1@Delta_SetF

; 1901 : 	{
; 1902 : 		if( !Q_strcmp( pField->name, fieldname ))

	push	99999					; 0001869fH
	mov	edx, DWORD PTR _fieldname$[ebp]
	push	edx
	mov	eax, DWORD PTR _pField$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	_Q_strncmp
	add	esp, 12					; 0000000cH
	test	eax, eax
	jne	SHORT $LN7@Delta_SetF

; 1903 : 		{
; 1904 : 			pField->bInactive = false;

	mov	edx, DWORD PTR _pField$[ebp]
	mov	DWORD PTR [edx+28], 0

; 1905 : 			return;

	jmp	SHORT $LN1@Delta_SetF
$LN7@Delta_SetF:

; 1906 : 		}
; 1907 : 	}

	jmp	SHORT $LN2@Delta_SetF
$LN1@Delta_SetF:

; 1908 : }

	mov	esp, ebp
	pop	ebp
	ret	0
_Delta_SetField ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\documents\github\xashtasks\xash_build4529_src\engine\common\net_encode.c
_TEXT	SEGMENT
_pField$ = -12						; size = 4
_dt$ = -8						; size = 4
_i$ = -4						; size = 4
_pFields$ = 8						; size = 4
_fieldname$ = 12					; size = 4
_Delta_FindField PROC

; 1873 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH

; 1874 : 	delta_info_t	*dt;
; 1875 : 	delta_t		*pField;
; 1876 : 	int		i;
; 1877 : 
; 1878 : 	dt = Delta_FindStructByDelta( pFields );

	mov	eax, DWORD PTR _pFields$[ebp]
	push	eax
	call	_Delta_FindStructByDelta
	add	esp, 4
	mov	DWORD PTR _dt$[ebp], eax

; 1879 : 	if( dt == NULL || !fieldname || !fieldname[0] )

	cmp	DWORD PTR _dt$[ebp], 0
	je	SHORT $LN6@Delta_Find
	cmp	DWORD PTR _fieldname$[ebp], 0
	je	SHORT $LN6@Delta_Find
	mov	ecx, 1
	imul	edx, ecx, 0
	mov	eax, DWORD PTR _fieldname$[ebp]
	movsx	ecx, BYTE PTR [eax+edx]
	test	ecx, ecx
	jne	SHORT $LN5@Delta_Find
$LN6@Delta_Find:

; 1880 : 		return -1;

	or	eax, -1
	jmp	SHORT $LN1@Delta_Find
$LN5@Delta_Find:

; 1881 : 
; 1882 : 	for( i = 0, pField = dt->pFields; i < dt->numFields; i++, pField++ )

	mov	DWORD PTR _i$[ebp], 0
	mov	edx, DWORD PTR _dt$[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	DWORD PTR _pField$[ebp], eax
	jmp	SHORT $LN4@Delta_Find
$LN2@Delta_Find:
	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
	mov	edx, DWORD PTR _pField$[ebp]
	add	edx, 32					; 00000020H
	mov	DWORD PTR _pField$[ebp], edx
$LN4@Delta_Find:
	mov	eax, DWORD PTR _dt$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	cmp	ecx, DWORD PTR [eax+12]
	jge	SHORT $LN3@Delta_Find

; 1883 : 	{
; 1884 : 		if( !Q_strcmp( pField->name, fieldname ))

	push	99999					; 0001869fH
	mov	edx, DWORD PTR _fieldname$[ebp]
	push	edx
	mov	eax, DWORD PTR _pField$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	_Q_strncmp
	add	esp, 12					; 0000000cH
	test	eax, eax
	jne	SHORT $LN7@Delta_Find

; 1885 : 			return i;

	mov	eax, DWORD PTR _i$[ebp]
	jmp	SHORT $LN1@Delta_Find
$LN7@Delta_Find:

; 1886 : 	}

	jmp	SHORT $LN2@Delta_Find
$LN3@Delta_Find:

; 1887 : 	return -1;

	or	eax, -1
$LN1@Delta_Find:

; 1888 : }

	mov	esp, ebp
	pop	ebp
	ret	0
_Delta_FindField ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\documents\github\xashtasks\xash_build4529_src\engine\common\net_encode.c
_TEXT	SEGMENT
_dt$ = -4						; size = 4
_name$ = 8						; size = 4
_encodeFunc$ = 12					; size = 4
_Delta_AddEncoder PROC

; 1851 : {

	push	ebp
	mov	ebp, esp
	push	ecx

; 1852 : 	delta_info_t	*dt;
; 1853 : 
; 1854 : 	dt = Delta_FindStructByEncoder( name );

	mov	eax, DWORD PTR _name$[ebp]
	push	eax
	call	_Delta_FindStructByEncoder
	add	esp, 4
	mov	DWORD PTR _dt$[ebp], eax

; 1855 : 
; 1856 : 	if( !dt || !dt->bInitialized )

	cmp	DWORD PTR _dt$[ebp], 0
	je	SHORT $LN3@Delta_AddE
	mov	ecx, DWORD PTR _dt$[ebp]
	cmp	DWORD PTR [ecx+60], 0
	jne	SHORT $LN2@Delta_AddE
$LN3@Delta_AddE:

; 1857 : 	{
; 1858 : 		Con_DPrintf( S_ERROR "Delta_AddEncoder: couldn't find delta with specified custom encode %s\n", name );

	mov	edx, DWORD PTR _name$[ebp]
	push	edx
	push	OFFSET $SG140572
	call	_Con_DPrintf
	add	esp, 8

; 1859 : 		return;

	jmp	SHORT $LN1@Delta_AddE
$LN2@Delta_AddE:

; 1860 : 	}
; 1861 : 
; 1862 : 	if( dt->customEncode == CUSTOM_NONE )

	mov	eax, DWORD PTR _dt$[ebp]
	cmp	DWORD PTR [eax+20], 0
	jne	SHORT $LN4@Delta_AddE

; 1863 : 	{
; 1864 : 		Con_DPrintf( S_ERROR "Delta_AddEncoder: %s not supposed for custom encoding\n", dt->pName );

	mov	ecx, DWORD PTR _dt$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	push	OFFSET $SG140574
	call	_Con_DPrintf
	add	esp, 8

; 1865 : 		return;

	jmp	SHORT $LN1@Delta_AddE
$LN4@Delta_AddE:

; 1866 : 	}
; 1867 : 
; 1868 : 	// register new encode func
; 1869 : 	dt->userCallback = encodeFunc;	

	mov	eax, DWORD PTR _dt$[ebp]
	mov	ecx, DWORD PTR _encodeFunc$[ebp]
	mov	DWORD PTR [eax+56], ecx
$LN1@Delta_AddE:

; 1870 : }

	mov	esp, ebp
	pop	ebp
	ret	0
_Delta_AddEncoder ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\documents\github\xashtasks\xash_build4529_src\engine\common\net_encode.c
_TEXT	SEGMENT
_index$ = 8						; size = 4
_Delta_FindStructByIndex PROC

; 332  : {

	push	ebp
	mov	ebp, esp

; 333  : 	if( index < 0 || index >= NUM_FIELDS( dt_info ))

	cmp	DWORD PTR _index$[ebp], 0
	jl	SHORT $LN3@Delta_Find
	cmp	DWORD PTR _index$[ebp], 8
	jb	SHORT $LN2@Delta_Find
$LN3@Delta_Find:

; 334  : 		return NULL;

	xor	eax, eax
	jmp	SHORT $LN1@Delta_Find
$LN2@Delta_Find:

; 335  : 
; 336  : 	return &dt_info[index];

	mov	eax, DWORD PTR _index$[ebp]
	shl	eax, 6
	add	eax, OFFSET _dt_info
$LN1@Delta_Find:

; 337  : }

	pop	ebp
	ret	0
_Delta_FindStructByIndex ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\documents\github\xashtasks\xash_build4529_src\engine\common\net_encode.c
_TEXT	SEGMENT
_Delta_NumTables PROC

; 327  : {

	push	ebp
	mov	ebp, esp

; 328  : 	return NUM_FIELDS( dt_info );

	mov	eax, 8

; 329  : }

	pop	ebp
	ret	0
_Delta_NumTables ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\documents\github\xashtasks\xash_build4529_src\engine\common\net_encode.c
_TEXT	SEGMENT
_afile$ = -784						; size = 4
_dt$ = -780						; size = 4
_pfile$ = -776						; size = 4
_encodeDll$ = -772					; size = 256
_encodeFunc$ = -516					; size = 256
_token$ = -260						; size = 256
__$ArrayPad$ = -4					; size = 4
_Delta_InitFields PROC

; 736  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 784				; 00000310H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 737  : 	char		*afile, *pfile;
; 738  : 	string		encodeDll, encodeFunc, token;	
; 739  : 	delta_info_t	*dt;
; 740  : 
; 741  : 	afile = FS_LoadFile( DELTA_PATH, NULL, false );

	push	0
	push	0
	push	OFFSET $SG139778
	call	_FS_LoadFile
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _afile$[ebp], eax

; 742  : 	if( !afile ) Sys_Error( "DELTA_Load: couldn't load file %s\n", DELTA_PATH );

	cmp	DWORD PTR _afile$[ebp], 0
	jne	SHORT $LN4@Delta_Init
	push	OFFSET $SG139780
	push	OFFSET $SG139781
	call	_Sys_Error
	add	esp, 8
$LN4@Delta_Init:

; 743  : 
; 744  : 	pfile = afile;

	mov	eax, DWORD PTR _afile$[ebp]
	mov	DWORD PTR _pfile$[ebp], eax
$LN2@Delta_Init:

; 745  : 
; 746  : 	while(( pfile = COM_ParseFile( pfile, token )) != NULL )

	lea	ecx, DWORD PTR _token$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pfile$[ebp]
	push	edx
	call	_COM_ParseFile
	add	esp, 8
	mov	DWORD PTR _pfile$[ebp], eax
	cmp	DWORD PTR _pfile$[ebp], 0
	je	$LN3@Delta_Init

; 747  : 	{
; 748  : 		dt = Delta_FindStruct( token );

	lea	eax, DWORD PTR _token$[ebp]
	push	eax
	call	_Delta_FindStruct
	add	esp, 4
	mov	DWORD PTR _dt$[ebp], eax

; 749  : 
; 750  : 		if( dt == NULL )

	cmp	DWORD PTR _dt$[ebp], 0
	jne	SHORT $LN5@Delta_Init

; 751  : 		{
; 752  : 			Sys_Error( "%s: unknown struct %s\n", DELTA_PATH, token );

	lea	ecx, DWORD PTR _token$[ebp]
	push	ecx
	push	OFFSET $SG139783
	push	OFFSET $SG139784
	call	_Sys_Error
	add	esp, 12					; 0000000cH
$LN5@Delta_Init:

; 753  : 		}
; 754  : 
; 755  : 		pfile = COM_ParseFile( pfile, encodeDll );

	lea	edx, DWORD PTR _encodeDll$[ebp]
	push	edx
	mov	eax, DWORD PTR _pfile$[ebp]
	push	eax
	call	_COM_ParseFile
	add	esp, 8
	mov	DWORD PTR _pfile$[ebp], eax

; 756  : 
; 757  : 		if( !Q_stricmp( encodeDll, "none" ))

	push	99999					; 0001869fH
	push	OFFSET $SG139787
	lea	ecx, DWORD PTR _encodeDll$[ebp]
	push	ecx
	call	_Q_strnicmp
	add	esp, 12					; 0000000cH
	test	eax, eax
	jne	SHORT $LN6@Delta_Init

; 758  : 			Q_strcpy( encodeFunc, "null" );

	push	99999					; 0001869fH
	push	OFFSET $SG139788
	lea	edx, DWORD PTR _encodeFunc$[ebp]
	push	edx
	call	_Q_strncpy
	add	esp, 12					; 0000000cH
	jmp	SHORT $LN7@Delta_Init
$LN6@Delta_Init:

; 759  : 		else pfile = COM_ParseFile( pfile, encodeFunc );

	lea	eax, DWORD PTR _encodeFunc$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pfile$[ebp]
	push	ecx
	call	_COM_ParseFile
	add	esp, 8
	mov	DWORD PTR _pfile$[ebp], eax
$LN7@Delta_Init:

; 760  : 
; 761  : 		// jump to '{'
; 762  : 		pfile = COM_ParseFile( pfile, token );

	lea	edx, DWORD PTR _token$[ebp]
	push	edx
	mov	eax, DWORD PTR _pfile$[ebp]
	push	eax
	call	_COM_ParseFile
	add	esp, 8
	mov	DWORD PTR _pfile$[ebp], eax

; 763  : 	
; 764  : 		if( token[0] != '{' )

	mov	ecx, 1
	imul	edx, ecx, 0
	movsx	eax, BYTE PTR _token$[ebp+edx]
	cmp	eax, 123				; 0000007bH
	je	SHORT $LN8@Delta_Init

; 765  : 		{
; 766  : 			Sys_Error( "%s: missing '{' in section %s\n", DELTA_PATH, dt->pName );

	mov	ecx, DWORD PTR _dt$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	push	OFFSET $SG139790
	push	OFFSET $SG139791
	call	_Sys_Error
	add	esp, 12					; 0000000cH
$LN8@Delta_Init:

; 767  : 		}
; 768  : 
; 769  : 		Delta_ParseTable( &pfile, dt, encodeDll, encodeFunc );

	lea	eax, DWORD PTR _encodeFunc$[ebp]
	push	eax
	lea	ecx, DWORD PTR _encodeDll$[ebp]
	push	ecx
	mov	edx, DWORD PTR _dt$[ebp]
	push	edx
	lea	eax, DWORD PTR _pfile$[ebp]
	push	eax
	call	_Delta_ParseTable
	add	esp, 16					; 00000010H

; 770  : 	}

	jmp	$LN2@Delta_Init
$LN3@Delta_Init:

; 771  : 
; 772  : 	Mem_Free( afile );

	push	772					; 00000304H
	push	OFFSET $SG139792
	mov	ecx, DWORD PTR _afile$[ebp]
	push	ecx
	call	__Mem_Free
	add	esp, 12					; 0000000cH

; 773  : }

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_Delta_InitFields ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\documents\github\xashtasks\xash_build4529_src\engine\common\net_encode.c
_TEXT	SEGMENT
_i$ = -4						; size = 4
_Delta_Shutdown PROC

; 847  : {

	push	ebp
	mov	ebp, esp
	push	ecx

; 848  : 	int	i;
; 849  : 
; 850  : 	if( !delta_init ) return;

	cmp	DWORD PTR _delta_init, 0
	jne	SHORT $LN5@Delta_Shut
	jmp	$LN1@Delta_Shut
$LN5@Delta_Shut:

; 851  : 
; 852  : 	for( i = 0; i < NUM_FIELDS( dt_info ); i++ )

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN4@Delta_Shut
$LN2@Delta_Shut:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN4@Delta_Shut:
	cmp	DWORD PTR _i$[ebp], 8
	jae	$LN3@Delta_Shut

; 853  : 	{
; 854  : 		dt_info[i].numFields = 0;

	mov	ecx, DWORD PTR _i$[ebp]
	shl	ecx, 6
	mov	DWORD PTR _dt_info[ecx+12], 0

; 855  : 		dt_info[i].customEncode = CUSTOM_NONE;

	mov	edx, DWORD PTR _i$[ebp]
	shl	edx, 6
	mov	DWORD PTR _dt_info[edx+20], 0

; 856  : 		dt_info[i].userCallback = NULL;

	mov	eax, DWORD PTR _i$[ebp]
	shl	eax, 6
	mov	DWORD PTR _dt_info[eax+56], 0

; 857  : 		dt_info[i].funcName[0] = '\0';

	mov	ecx, DWORD PTR _i$[ebp]
	shl	ecx, 6
	mov	edx, 1
	imul	eax, edx, 0
	mov	BYTE PTR _dt_info[ecx+eax+24], 0

; 858  : 
; 859  : 		if( dt_info[i].pFields )

	mov	ecx, DWORD PTR _i$[ebp]
	shl	ecx, 6
	cmp	DWORD PTR _dt_info[ecx+16], 0
	je	SHORT $LN6@Delta_Shut

; 860  : 		{
; 861  : 			Z_Free( dt_info[i].pFields );

	mov	edx, DWORD PTR _i$[ebp]
	shl	edx, 6
	cmp	DWORD PTR _dt_info[edx+16], 0
	je	SHORT $LN7@Delta_Shut
	push	861					; 0000035dH
	push	OFFSET $SG139883
	mov	eax, DWORD PTR _i$[ebp]
	shl	eax, 6
	mov	ecx, DWORD PTR _dt_info[eax+16]
	push	ecx
	call	__Mem_Free
	add	esp, 12					; 0000000cH
$LN7@Delta_Shut:

; 862  : 			dt_info[i].pFields = NULL;

	mov	edx, DWORD PTR _i$[ebp]
	shl	edx, 6
	mov	DWORD PTR _dt_info[edx+16], 0
$LN6@Delta_Shut:

; 863  : 		}
; 864  : 
; 865  : 		dt_info[i].bInitialized = false;

	mov	eax, DWORD PTR _i$[ebp]
	shl	eax, 6
	mov	DWORD PTR _dt_info[eax+60], 0

; 866  : 	}

	jmp	$LN2@Delta_Shut
$LN3@Delta_Shut:

; 867  : 
; 868  : 	delta_init = false;

	mov	DWORD PTR _delta_init, 0
$LN1@Delta_Shut:

; 869  : }

	mov	esp, ebp
	pop	ebp
	ret	0
_Delta_Shutdown ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\documents\github\xashtasks\xash_build4529_src\engine\common\net_encode.c
_TEXT	SEGMENT
_numActive$ = -8					; size = 4
_i$ = -4						; size = 4
_Delta_InitClient PROC

; 828  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 829  : 	int	i, numActive = 0;

	mov	DWORD PTR _numActive$[ebp], 0

; 830  : 
; 831  : 	// already initalized
; 832  : 	if( delta_init ) return;

	cmp	DWORD PTR _delta_init, 0
	je	SHORT $LN5@Delta_Init
	jmp	SHORT $LN1@Delta_Init
$LN5@Delta_Init:

; 833  : 
; 834  : 	for( i = 0; i < NUM_FIELDS( dt_info ); i++ )

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN4@Delta_Init
$LN2@Delta_Init:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN4@Delta_Init:
	cmp	DWORD PTR _i$[ebp], 8
	jae	SHORT $LN3@Delta_Init

; 835  : 	{
; 836  : 		if( dt_info[i].numFields > 0 )

	mov	ecx, DWORD PTR _i$[ebp]
	shl	ecx, 6
	cmp	DWORD PTR _dt_info[ecx+12], 0
	jle	SHORT $LN6@Delta_Init

; 837  : 		{
; 838  : 			dt_info[i].bInitialized = true;

	mov	edx, DWORD PTR _i$[ebp]
	shl	edx, 6
	mov	DWORD PTR _dt_info[edx+60], 1

; 839  : 			numActive++;

	mov	eax, DWORD PTR _numActive$[ebp]
	add	eax, 1
	mov	DWORD PTR _numActive$[ebp], eax
$LN6@Delta_Init:

; 840  : 		}
; 841  : 	}

	jmp	SHORT $LN2@Delta_Init
$LN3@Delta_Init:

; 842  : 
; 843  : 	if( numActive ) delta_init = true;

	cmp	DWORD PTR _numActive$[ebp], 0
	je	SHORT $LN1@Delta_Init
	mov	DWORD PTR _delta_init, 1
$LN1@Delta_Init:

; 844  : }

	mov	esp, ebp
	pop	ebp
	ret	0
_Delta_InitClient ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\documents\github\xashtasks\xash_build4529_src\engine\common\net_encode.c
_TEXT	SEGMENT
tv72 = -8						; size = 4
_dt$ = -4						; size = 4
_Delta_Init PROC

; 776  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 777  : 	delta_info_t	*dt;
; 778  : 
; 779  : 	// shutdown it first
; 780  : 	if( delta_init ) Delta_Shutdown ();

	cmp	DWORD PTR _delta_init, 0
	je	SHORT $LN2@Delta_Init
	call	_Delta_Shutdown
$LN2@Delta_Init:

; 781  : 
; 782  : 	Delta_InitFields ();	// initialize fields

	call	_Delta_InitFields

; 783  : 	delta_init = true;

	mov	DWORD PTR _delta_init, 1

; 784  : 
; 785  : 	dt = Delta_FindStruct( "movevars_t" );

	push	OFFSET $SG139799
	call	_Delta_FindStruct
	add	esp, 4
	mov	DWORD PTR _dt$[ebp], eax

; 786  : 
; 787  : 	Assert( dt != NULL );

	cmp	DWORD PTR _dt$[ebp], 0
	je	SHORT $LN7@Delta_Init
	mov	DWORD PTR tv72[ebp], 1
	jmp	SHORT $LN8@Delta_Init
$LN7@Delta_Init:
	mov	DWORD PTR tv72[ebp], 0
$LN8@Delta_Init:
	push	0
	push	787					; 00000313H
	push	OFFSET $SG139800
	push	OFFSET $SG139801
	mov	eax, DWORD PTR tv72[ebp]
	push	eax
	call	_DBG_AssertFunction
	add	esp, 20					; 00000014H

; 788  : 	if( dt->bInitialized ) return;	// "movevars_t" already specified by user

	mov	ecx, DWORD PTR _dt$[ebp]
	cmp	DWORD PTR [ecx+60], 0
	je	SHORT $LN3@Delta_Init
	jmp	$LN1@Delta_Init
$LN3@Delta_Init:

; 789  : 
; 790  : 	// create movevars_t delta internal
; 791  : 	Delta_AddField( "movevars_t", "gravity", DT_FLOAT|DT_SIGNED, 16, 8.0f, 1.0f );

	push	ecx
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@41000000
	movss	DWORD PTR [esp], xmm0
	push	16					; 00000010H
	push	260					; 00000104H
	push	OFFSET $SG139803
	push	OFFSET $SG139804
	call	_Delta_AddField

; 792  : 	Delta_AddField( "movevars_t", "stopspeed", DT_FLOAT|DT_SIGNED, 16, 8.0f, 1.0f );

	add	esp, 20					; 00000014H
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@41000000
	movss	DWORD PTR [esp], xmm0
	push	16					; 00000010H
	push	260					; 00000104H
	push	OFFSET $SG139805
	push	OFFSET $SG139806
	call	_Delta_AddField

; 793  : 	Delta_AddField( "movevars_t", "maxspeed", DT_FLOAT|DT_SIGNED, 16, 8.0f, 1.0f );

	add	esp, 20					; 00000014H
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@41000000
	movss	DWORD PTR [esp], xmm0
	push	16					; 00000010H
	push	260					; 00000104H
	push	OFFSET $SG139807
	push	OFFSET $SG139808
	call	_Delta_AddField

; 794  : 	Delta_AddField( "movevars_t", "spectatormaxspeed", DT_FLOAT|DT_SIGNED, 16, 8.0f, 1.0f );

	add	esp, 20					; 00000014H
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@41000000
	movss	DWORD PTR [esp], xmm0
	push	16					; 00000010H
	push	260					; 00000104H
	push	OFFSET $SG139809
	push	OFFSET $SG139810
	call	_Delta_AddField

; 795  : 	Delta_AddField( "movevars_t", "accelerate", DT_FLOAT|DT_SIGNED, 16, 8.0f, 1.0f );

	add	esp, 20					; 00000014H
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@41000000
	movss	DWORD PTR [esp], xmm0
	push	16					; 00000010H
	push	260					; 00000104H
	push	OFFSET $SG139811
	push	OFFSET $SG139812
	call	_Delta_AddField

; 796  : 	Delta_AddField( "movevars_t", "airaccelerate", DT_FLOAT|DT_SIGNED, 16, 8.0f, 1.0f );

	add	esp, 20					; 00000014H
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@41000000
	movss	DWORD PTR [esp], xmm0
	push	16					; 00000010H
	push	260					; 00000104H
	push	OFFSET $SG139813
	push	OFFSET $SG139814
	call	_Delta_AddField

; 797  : 	Delta_AddField( "movevars_t", "wateraccelerate", DT_FLOAT|DT_SIGNED, 16, 8.0f, 1.0f );

	add	esp, 20					; 00000014H
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@41000000
	movss	DWORD PTR [esp], xmm0
	push	16					; 00000010H
	push	260					; 00000104H
	push	OFFSET $SG139815
	push	OFFSET $SG139816
	call	_Delta_AddField

; 798  : 	Delta_AddField( "movevars_t", "friction", DT_FLOAT|DT_SIGNED, 16, 8.0f, 1.0f );

	add	esp, 20					; 00000014H
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@41000000
	movss	DWORD PTR [esp], xmm0
	push	16					; 00000010H
	push	260					; 00000104H
	push	OFFSET $SG139817
	push	OFFSET $SG139818
	call	_Delta_AddField

; 799  : 	Delta_AddField( "movevars_t", "edgefriction", DT_FLOAT|DT_SIGNED, 16, 8.0f, 1.0f );

	add	esp, 20					; 00000014H
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@41000000
	movss	DWORD PTR [esp], xmm0
	push	16					; 00000010H
	push	260					; 00000104H
	push	OFFSET $SG139819
	push	OFFSET $SG139820
	call	_Delta_AddField

; 800  : 	Delta_AddField( "movevars_t", "waterfriction", DT_FLOAT|DT_SIGNED, 16, 8.0f, 1.0f );

	add	esp, 20					; 00000014H
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@41000000
	movss	DWORD PTR [esp], xmm0
	push	16					; 00000010H
	push	260					; 00000104H
	push	OFFSET $SG139821
	push	OFFSET $SG139822
	call	_Delta_AddField

; 801  : 	Delta_AddField( "movevars_t", "bounce", DT_FLOAT|DT_SIGNED, 16, 8.0f, 1.0f );

	add	esp, 20					; 00000014H
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@41000000
	movss	DWORD PTR [esp], xmm0
	push	16					; 00000010H
	push	260					; 00000104H
	push	OFFSET $SG139823
	push	OFFSET $SG139824
	call	_Delta_AddField

; 802  : 	Delta_AddField( "movevars_t", "stepsize", DT_FLOAT|DT_SIGNED, 16, 16.0f, 1.0f );

	add	esp, 20					; 00000014H
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@41800000
	movss	DWORD PTR [esp], xmm0
	push	16					; 00000010H
	push	260					; 00000104H
	push	OFFSET $SG139825
	push	OFFSET $SG139826
	call	_Delta_AddField

; 803  : 	Delta_AddField( "movevars_t", "maxvelocity", DT_FLOAT|DT_SIGNED, 16, 8.0f, 1.0f );

	add	esp, 20					; 00000014H
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@41000000
	movss	DWORD PTR [esp], xmm0
	push	16					; 00000010H
	push	260					; 00000104H
	push	OFFSET $SG139827
	push	OFFSET $SG139828
	call	_Delta_AddField
	add	esp, 24					; 00000018H

; 804  : 
; 805  : 	if( FBitSet( host.features, ENGINE_WRITE_LARGE_COORD ))

	mov	edx, DWORD PTR _host+34748
	and	edx, 1
	je	SHORT $LN4@Delta_Init

; 806  : 		Delta_AddField( "movevars_t", "zmax", DT_FLOAT|DT_SIGNED, 18, 1.0f, 1.0f );

	push	ecx
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [esp], xmm0
	push	18					; 00000012H
	push	260					; 00000104H
	push	OFFSET $SG139831
	push	OFFSET $SG139832
	call	_Delta_AddField
	add	esp, 24					; 00000018H
	jmp	SHORT $LN5@Delta_Init
$LN4@Delta_Init:

; 807  : 	else Delta_AddField( "movevars_t", "zmax", DT_FLOAT|DT_SIGNED, 16, 1.0f, 1.0f );

	push	ecx
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [esp], xmm0
	push	16					; 00000010H
	push	260					; 00000104H
	push	OFFSET $SG139833
	push	OFFSET $SG139834
	call	_Delta_AddField
	add	esp, 24					; 00000018H
$LN5@Delta_Init:

; 808  : 
; 809  : 	Delta_AddField( "movevars_t", "waveHeight", DT_FLOAT|DT_SIGNED, 16, 16.0f, 1.0f );

	push	ecx
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@41800000
	movss	DWORD PTR [esp], xmm0
	push	16					; 00000010H
	push	260					; 00000104H
	push	OFFSET $SG139835
	push	OFFSET $SG139836
	call	_Delta_AddField

; 810  : 	Delta_AddField( "movevars_t", "skyName", DT_STRING, 1, 1.0f, 1.0f ); 

	add	esp, 20					; 00000014H
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [esp], xmm0
	push	1
	push	128					; 00000080H
	push	OFFSET $SG139837
	push	OFFSET $SG139838
	call	_Delta_AddField

; 811  : 	Delta_AddField( "movevars_t", "footsteps", DT_INTEGER, 1, 1.0f, 1.0f );

	add	esp, 20					; 00000014H
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [esp], xmm0
	push	1
	push	8
	push	OFFSET $SG139839
	push	OFFSET $SG139840
	call	_Delta_AddField

; 812  : 	Delta_AddField( "movevars_t", "rollangle", DT_FLOAT|DT_SIGNED, 16, 32.0f, 1.0f );

	add	esp, 20					; 00000014H
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@42000000
	movss	DWORD PTR [esp], xmm0
	push	16					; 00000010H
	push	260					; 00000104H
	push	OFFSET $SG139841
	push	OFFSET $SG139842
	call	_Delta_AddField

; 813  : 	Delta_AddField( "movevars_t", "rollspeed", DT_FLOAT|DT_SIGNED, 16, 8.0f, 1.0f );

	add	esp, 20					; 00000014H
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@41000000
	movss	DWORD PTR [esp], xmm0
	push	16					; 00000010H
	push	260					; 00000104H
	push	OFFSET $SG139843
	push	OFFSET $SG139844
	call	_Delta_AddField

; 814  : 	Delta_AddField( "movevars_t", "skycolor_r", DT_FLOAT|DT_SIGNED, 16, 1.0f, 1.0f ); // 0 - 264

	add	esp, 20					; 00000014H
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [esp], xmm0
	push	16					; 00000010H
	push	260					; 00000104H
	push	OFFSET $SG139845
	push	OFFSET $SG139846
	call	_Delta_AddField

; 815  : 	Delta_AddField( "movevars_t", "skycolor_g", DT_FLOAT|DT_SIGNED, 16, 1.0f, 1.0f );

	add	esp, 20					; 00000014H
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [esp], xmm0
	push	16					; 00000010H
	push	260					; 00000104H
	push	OFFSET $SG139847
	push	OFFSET $SG139848
	call	_Delta_AddField

; 816  : 	Delta_AddField( "movevars_t", "skycolor_b", DT_FLOAT|DT_SIGNED, 16, 1.0f, 1.0f );

	add	esp, 20					; 00000014H
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [esp], xmm0
	push	16					; 00000010H
	push	260					; 00000104H
	push	OFFSET $SG139849
	push	OFFSET $SG139850
	call	_Delta_AddField

; 817  : 	Delta_AddField( "movevars_t", "skyvec_x", DT_FLOAT|DT_SIGNED, 16, 32.0f, 1.0f ); // 0 - 1

	add	esp, 20					; 00000014H
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@42000000
	movss	DWORD PTR [esp], xmm0
	push	16					; 00000010H
	push	260					; 00000104H
	push	OFFSET $SG139851
	push	OFFSET $SG139852
	call	_Delta_AddField

; 818  : 	Delta_AddField( "movevars_t", "skyvec_y", DT_FLOAT|DT_SIGNED, 16, 32.0f, 1.0f );

	add	esp, 20					; 00000014H
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@42000000
	movss	DWORD PTR [esp], xmm0
	push	16					; 00000010H
	push	260					; 00000104H
	push	OFFSET $SG139853
	push	OFFSET $SG139854
	call	_Delta_AddField

; 819  : 	Delta_AddField( "movevars_t", "skyvec_z", DT_FLOAT|DT_SIGNED, 16, 32.0f, 1.0f );

	add	esp, 20					; 00000014H
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@42000000
	movss	DWORD PTR [esp], xmm0
	push	16					; 00000010H
	push	260					; 00000104H
	push	OFFSET $SG139855
	push	OFFSET $SG139856
	call	_Delta_AddField

; 820  : 	Delta_AddField( "movevars_t", "wateralpha", DT_FLOAT|DT_SIGNED, 16, 32.0f, 1.0f );

	add	esp, 20					; 00000014H
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@42000000
	movss	DWORD PTR [esp], xmm0
	push	16					; 00000010H
	push	260					; 00000104H
	push	OFFSET $SG139857
	push	OFFSET $SG139858
	call	_Delta_AddField

; 821  : 	Delta_AddField( "movevars_t", "fog_settings", DT_INTEGER, 32, 1.0f, 1.0f );

	add	esp, 20					; 00000014H
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [esp], xmm0
	push	32					; 00000020H
	push	8
	push	OFFSET $SG139859
	push	OFFSET $SG139860
	call	_Delta_AddField
	add	esp, 24					; 00000018H

; 822  : 
; 823  : 	// now done
; 824  : 	dt->bInitialized = true;

	mov	eax, DWORD PTR _dt$[ebp]
	mov	DWORD PTR [eax+60], 1
$LN1@Delta_Init:

; 825  : }

	mov	esp, ebp
	pop	ebp
	ret	0
_Delta_Init ENDP
_TEXT	ENDS
END
