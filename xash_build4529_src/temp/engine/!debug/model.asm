; Listing generated by Microsoft (R) Optimizing Compiler Version 19.16.27045.0 

	TITLE	C:\Users\USER\Documents\GitHub\XashTasks\xash_build4529_src\engine\common\model.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

_DATA	SEGMENT
COMM	_com_studiocache:DWORD
COMM	_loadmodel:DWORD
COMM	_mod_studiocache:DWORD
COMM	_r_wadtextures:DWORD
COMM	_r_showhull:DWORD
COMM	_pglGetError:DWORD
COMM	_pglGetString:DWORD
COMM	_pglAccum:DWORD
COMM	_pglAlphaFunc:DWORD
COMM	_pglArrayElement:DWORD
COMM	_pglBegin:DWORD
COMM	_pglBindTexture:DWORD
COMM	_pglBitmap:DWORD
COMM	_pglBlendFunc:DWORD
COMM	_pglCallList:DWORD
COMM	_pglCallLists:DWORD
COMM	_pglClear:DWORD
COMM	_pglClearAccum:DWORD
COMM	_pglClearColor:DWORD
COMM	_pglClearDepth:DWORD
COMM	_pglClearIndex:DWORD
COMM	_pglClearStencil:DWORD
COMM	_pglIsEnabled:DWORD
COMM	_pglIsList:DWORD
COMM	_pglIsTexture:DWORD
COMM	_pglClipPlane:DWORD
COMM	_pglColor3b:DWORD
COMM	_pglColor3bv:DWORD
COMM	_pglColor3d:DWORD
COMM	_pglColor3dv:DWORD
COMM	_pglColor3f:DWORD
COMM	_pglColor3fv:DWORD
COMM	_pglColor3i:DWORD
COMM	_pglColor3iv:DWORD
COMM	_pglColor3s:DWORD
COMM	_pglColor3sv:DWORD
COMM	_pglColor3ub:DWORD
COMM	_pglColor3ubv:DWORD
COMM	_pglColor3ui:DWORD
COMM	_pglColor3uiv:DWORD
COMM	_pglColor3us:DWORD
COMM	_pglColor3usv:DWORD
COMM	_pglColor4b:DWORD
COMM	_pglColor4bv:DWORD
COMM	_pglColor4d:DWORD
COMM	_pglColor4dv:DWORD
COMM	_pglColor4f:DWORD
COMM	_pglColor4fv:DWORD
COMM	_pglColor4i:DWORD
COMM	_pglColor4iv:DWORD
COMM	_pglColor4s:DWORD
COMM	_pglColor4sv:DWORD
COMM	_pglColor4ub:DWORD
COMM	_pglColor4ubv:DWORD
COMM	_pglColor4ui:DWORD
COMM	_pglColor4uiv:DWORD
COMM	_pglColor4us:DWORD
COMM	_pglColor4usv:DWORD
COMM	_pglColorMask:DWORD
COMM	_pglColorMaterial:DWORD
COMM	_pglColorPointer:DWORD
COMM	_pglCopyPixels:DWORD
COMM	_pglCopyTexImage1D:DWORD
COMM	_pglCopyTexImage2D:DWORD
COMM	_pglCopyTexSubImage1D:DWORD
COMM	_pglCopyTexSubImage2D:DWORD
COMM	_pglCullFace:DWORD
COMM	_pglDeleteLists:DWORD
COMM	_pglDeleteTextures:DWORD
COMM	_pglDepthFunc:DWORD
COMM	_pglDepthMask:DWORD
COMM	_pglDepthRange:DWORD
COMM	_pglDisable:DWORD
COMM	_pglDisableClientState:DWORD
COMM	_pglDrawArrays:DWORD
COMM	_pglDrawBuffer:DWORD
COMM	_pglDrawElements:DWORD
COMM	_pglDrawPixels:DWORD
COMM	_pglEdgeFlag:DWORD
COMM	_pglEdgeFlagPointer:DWORD
COMM	_pglEdgeFlagv:DWORD
COMM	_pglEnable:DWORD
COMM	_pglEnableClientState:DWORD
COMM	_pglEnd:DWORD
COMM	_pglEndList:DWORD
COMM	_pglEvalCoord1d:DWORD
COMM	_pglEvalCoord1dv:DWORD
COMM	_pglEvalCoord1f:DWORD
COMM	_pglEvalCoord1fv:DWORD
COMM	_pglEvalCoord2d:DWORD
COMM	_pglEvalCoord2dv:DWORD
COMM	_pglEvalCoord2f:DWORD
COMM	_pglEvalCoord2fv:DWORD
COMM	_pglEvalMesh1:DWORD
COMM	_pglEvalMesh2:DWORD
COMM	_pglEvalPoint1:DWORD
COMM	_pglEvalPoint2:DWORD
COMM	_pglFeedbackBuffer:DWORD
COMM	_pglFinish:DWORD
COMM	_pglFlush:DWORD
COMM	_pglFogf:DWORD
COMM	_pglFogfv:DWORD
COMM	_pglFogi:DWORD
COMM	_pglFogiv:DWORD
COMM	_pglFrontFace:DWORD
COMM	_pglFrustum:DWORD
COMM	_pglGenTextures:DWORD
COMM	_pglGetBooleanv:DWORD
COMM	_pglGetClipPlane:DWORD
COMM	_pglGetDoublev:DWORD
COMM	_pglGetFloatv:DWORD
COMM	_pglGetIntegerv:DWORD
COMM	_pglGetLightfv:DWORD
COMM	_pglGetLightiv:DWORD
COMM	_pglGetMapdv:DWORD
COMM	_pglGetMapfv:DWORD
COMM	_pglGetMapiv:DWORD
COMM	_pglGetMaterialfv:DWORD
COMM	_pglGetMaterialiv:DWORD
COMM	_pglGetPixelMapfv:DWORD
COMM	_pglGetPixelMapuiv:DWORD
COMM	_pglGetPixelMapusv:DWORD
COMM	_pglGetPointerv:DWORD
COMM	_pglGetPolygonStipple:DWORD
COMM	_pglGetTexEnvfv:DWORD
COMM	_pglGetTexEnviv:DWORD
COMM	_pglGetTexGendv:DWORD
COMM	_pglGetTexGenfv:DWORD
COMM	_pglGetTexGeniv:DWORD
COMM	_pglGetTexImage:DWORD
COMM	_pglGetTexLevelParameterfv:DWORD
COMM	_pglGetTexLevelParameteriv:DWORD
COMM	_pglGetTexParameterfv:DWORD
COMM	_pglGetTexParameteriv:DWORD
COMM	_pglHint:DWORD
COMM	_pglIndexMask:DWORD
COMM	_pglIndexPointer:DWORD
COMM	_pglIndexd:DWORD
COMM	_pglIndexdv:DWORD
COMM	_pglIndexf:DWORD
COMM	_pglIndexfv:DWORD
COMM	_pglIndexi:DWORD
COMM	_pglIndexiv:DWORD
COMM	_pglIndexs:DWORD
COMM	_pglIndexsv:DWORD
COMM	_pglIndexub:DWORD
COMM	_pglIndexubv:DWORD
COMM	_pglInitNames:DWORD
COMM	_pglInterleavedArrays:DWORD
COMM	_pglLightModelf:DWORD
COMM	_pglLightModelfv:DWORD
COMM	_pglLightModeli:DWORD
COMM	_pglLightModeliv:DWORD
COMM	_pglLightf:DWORD
COMM	_pglLightfv:DWORD
COMM	_pglLighti:DWORD
COMM	_pglLightiv:DWORD
COMM	_pglLineStipple:DWORD
COMM	_pglLineWidth:DWORD
COMM	_pglListBase:DWORD
COMM	_pglLoadIdentity:DWORD
COMM	_pglLoadMatrixd:DWORD
COMM	_pglLoadMatrixf:DWORD
COMM	_pglLoadName:DWORD
COMM	_pglLogicOp:DWORD
COMM	_pglMap1d:DWORD
COMM	_pglMap1f:DWORD
COMM	_pglMap2d:DWORD
COMM	_pglMap2f:DWORD
COMM	_pglMapGrid1d:DWORD
COMM	_pglMapGrid1f:DWORD
COMM	_pglMapGrid2d:DWORD
COMM	_pglMapGrid2f:DWORD
COMM	_pglMaterialf:DWORD
COMM	_pglMaterialfv:DWORD
COMM	_pglMateriali:DWORD
COMM	_pglMaterialiv:DWORD
COMM	_pglMatrixMode:DWORD
COMM	_pglMultMatrixd:DWORD
COMM	_pglMultMatrixf:DWORD
COMM	_pglNewList:DWORD
COMM	_pglNormal3b:DWORD
COMM	_pglNormal3bv:DWORD
COMM	_pglNormal3d:DWORD
COMM	_pglNormal3dv:DWORD
COMM	_pglNormal3f:DWORD
COMM	_pglNormal3fv:DWORD
COMM	_pglNormal3i:DWORD
COMM	_pglNormal3iv:DWORD
COMM	_pglNormal3s:DWORD
COMM	_pglNormal3sv:DWORD
COMM	_pglNormalPointer:DWORD
COMM	_pglOrtho:DWORD
COMM	_pglPassThrough:DWORD
COMM	_pglPixelMapfv:DWORD
COMM	_pglPixelMapuiv:DWORD
COMM	_pglPixelMapusv:DWORD
COMM	_pglPixelStoref:DWORD
COMM	_pglPixelStorei:DWORD
COMM	_pglPixelTransferf:DWORD
COMM	_pglPixelTransferi:DWORD
COMM	_pglPixelZoom:DWORD
COMM	_pglPointSize:DWORD
COMM	_pglPolygonMode:DWORD
COMM	_pglPolygonOffset:DWORD
COMM	_pglPolygonStipple:DWORD
COMM	_pglPopAttrib:DWORD
COMM	_pglPopClientAttrib:DWORD
COMM	_pglPopMatrix:DWORD
COMM	_pglPopName:DWORD
COMM	_pglPushAttrib:DWORD
COMM	_pglPushClientAttrib:DWORD
COMM	_pglPushMatrix:DWORD
COMM	_pglPushName:DWORD
COMM	_pglRasterPos2d:DWORD
COMM	_pglRasterPos2dv:DWORD
COMM	_pglRasterPos2f:DWORD
COMM	_pglRasterPos2fv:DWORD
COMM	_pglRasterPos2i:DWORD
COMM	_pglRasterPos2iv:DWORD
COMM	_pglRasterPos2s:DWORD
COMM	_pglRasterPos2sv:DWORD
COMM	_pglRasterPos3d:DWORD
COMM	_pglRasterPos3dv:DWORD
COMM	_pglRasterPos3f:DWORD
COMM	_pglRasterPos3fv:DWORD
COMM	_pglRasterPos3i:DWORD
COMM	_pglRasterPos3iv:DWORD
COMM	_pglRasterPos3s:DWORD
COMM	_pglRasterPos3sv:DWORD
COMM	_pglRasterPos4d:DWORD
COMM	_pglRasterPos4dv:DWORD
COMM	_pglRasterPos4f:DWORD
COMM	_pglRasterPos4fv:DWORD
COMM	_pglRasterPos4i:DWORD
COMM	_pglRasterPos4iv:DWORD
COMM	_pglRasterPos4s:DWORD
COMM	_pglRasterPos4sv:DWORD
COMM	_pglReadBuffer:DWORD
COMM	_pglReadPixels:DWORD
COMM	_pglRectd:DWORD
COMM	_pglRectdv:DWORD
COMM	_pglRectf:DWORD
COMM	_pglRectfv:DWORD
COMM	_pglRecti:DWORD
COMM	_pglRectiv:DWORD
COMM	_pglRects:DWORD
COMM	_pglRectsv:DWORD
COMM	_pglRotated:DWORD
COMM	_pglRotatef:DWORD
COMM	_pglScaled:DWORD
COMM	_pglScalef:DWORD
COMM	_pglScissor:DWORD
COMM	_pglSelectBuffer:DWORD
COMM	_pglShadeModel:DWORD
COMM	_pglStencilFunc:DWORD
COMM	_pglStencilMask:DWORD
COMM	_pglStencilOp:DWORD
COMM	_pglTexCoord1d:DWORD
COMM	_pglTexCoord1dv:DWORD
COMM	_pglTexCoord1f:DWORD
COMM	_pglTexCoord1fv:DWORD
COMM	_pglTexCoord1i:DWORD
COMM	_pglTexCoord1iv:DWORD
COMM	_pglTexCoord1s:DWORD
COMM	_pglTexCoord1sv:DWORD
COMM	_pglTexCoord2d:DWORD
COMM	_pglTexCoord2dv:DWORD
COMM	_pglTexCoord2f:DWORD
COMM	_pglTexCoord2fv:DWORD
COMM	_pglTexCoord2i:DWORD
COMM	_pglTexCoord2iv:DWORD
COMM	_pglTexCoord2s:DWORD
COMM	_pglTexCoord2sv:DWORD
COMM	_pglTexCoord3d:DWORD
COMM	_pglTexCoord3dv:DWORD
COMM	_pglTexCoord3f:DWORD
COMM	_pglTexCoord3fv:DWORD
COMM	_pglTexCoord3i:DWORD
COMM	_pglTexCoord3iv:DWORD
COMM	_pglTexCoord3s:DWORD
COMM	_pglTexCoord3sv:DWORD
COMM	_pglTexCoord4d:DWORD
COMM	_pglTexCoord4dv:DWORD
COMM	_pglTexCoord4f:DWORD
COMM	_pglTexCoord4fv:DWORD
COMM	_pglTexCoord4i:DWORD
COMM	_pglTexCoord4iv:DWORD
COMM	_pglTexCoord4s:DWORD
COMM	_pglTexCoord4sv:DWORD
COMM	_pglTexCoordPointer:DWORD
COMM	_pglTexEnvf:DWORD
COMM	_pglTexEnvfv:DWORD
COMM	_pglTexEnvi:DWORD
COMM	_pglTexEnviv:DWORD
COMM	_pglTexGend:DWORD
COMM	_pglTexGendv:DWORD
COMM	_pglTexGenf:DWORD
COMM	_pglTexGenfv:DWORD
COMM	_pglTexGeni:DWORD
COMM	_pglTexGeniv:DWORD
COMM	_pglTexImage1D:DWORD
COMM	_pglTexImage2D:DWORD
COMM	_pglTexParameterf:DWORD
COMM	_pglTexParameterfv:DWORD
COMM	_pglTexParameteri:DWORD
COMM	_pglTexParameteriv:DWORD
COMM	_pglTexSubImage1D:DWORD
COMM	_pglTexSubImage2D:DWORD
COMM	_pglTranslated:DWORD
COMM	_pglTranslatef:DWORD
COMM	_pglVertex2d:DWORD
COMM	_pglVertex2dv:DWORD
COMM	_pglVertex2f:DWORD
COMM	_pglVertex2fv:DWORD
COMM	_pglVertex2i:DWORD
COMM	_pglVertex2iv:DWORD
COMM	_pglVertex2s:DWORD
COMM	_pglVertex2sv:DWORD
COMM	_pglVertex3d:DWORD
COMM	_pglVertex3dv:DWORD
COMM	_pglVertex3f:DWORD
COMM	_pglVertex3fv:DWORD
COMM	_pglVertex3i:DWORD
COMM	_pglVertex3iv:DWORD
COMM	_pglVertex3s:DWORD
COMM	_pglVertex3sv:DWORD
COMM	_pglVertex4d:DWORD
COMM	_pglVertex4dv:DWORD
COMM	_pglVertex4f:DWORD
COMM	_pglVertex4fv:DWORD
COMM	_pglVertex4i:DWORD
COMM	_pglVertex4iv:DWORD
COMM	_pglVertex4s:DWORD
COMM	_pglVertex4sv:DWORD
COMM	_pglVertexPointer:DWORD
COMM	_pglViewport:DWORD
COMM	_pglPointParameterfEXT:DWORD
COMM	_pglPointParameterfvEXT:DWORD
COMM	_pglLockArraysEXT:DWORD
COMM	_pglUnlockArraysEXT:DWORD
COMM	_pglActiveTextureARB:DWORD
COMM	_pglClientActiveTextureARB:DWORD
COMM	_pglGetCompressedTexImage:DWORD
COMM	_pglDrawRangeElements:DWORD
COMM	_pglDrawRangeElementsEXT:DWORD
COMM	_pglMultiTexCoord1f:DWORD
COMM	_pglMultiTexCoord2f:DWORD
COMM	_pglMultiTexCoord3f:DWORD
COMM	_pglMultiTexCoord4f:DWORD
COMM	_pglActiveTexture:DWORD
COMM	_pglClientActiveTexture:DWORD
COMM	_pglCompressedTexImage3DARB:DWORD
COMM	_pglCompressedTexImage2DARB:DWORD
COMM	_pglCompressedTexImage1DARB:DWORD
COMM	_pglCompressedTexSubImage3DARB:DWORD
COMM	_pglCompressedTexSubImage2DARB:DWORD
COMM	_pglCompressedTexSubImage1DARB:DWORD
COMM	_pglDeleteObjectARB:DWORD
COMM	_pglGetHandleARB:DWORD
COMM	_pglDetachObjectARB:DWORD
COMM	_pglCreateShaderObjectARB:DWORD
COMM	_pglShaderSourceARB:DWORD
COMM	_pglCompileShaderARB:DWORD
COMM	_pglCreateProgramObjectARB:DWORD
COMM	_pglAttachObjectARB:DWORD
COMM	_pglLinkProgramARB:DWORD
COMM	_pglUseProgramObjectARB:DWORD
COMM	_pglValidateProgramARB:DWORD
COMM	_pglBindProgramARB:DWORD
COMM	_pglDeleteProgramsARB:DWORD
COMM	_pglGenProgramsARB:DWORD
COMM	_pglProgramStringARB:DWORD
COMM	_pglProgramEnvParameter4fARB:DWORD
COMM	_pglProgramLocalParameter4fARB:DWORD
COMM	_pglUniform1fARB:DWORD
COMM	_pglUniform2fARB:DWORD
COMM	_pglUniform3fARB:DWORD
COMM	_pglUniform4fARB:DWORD
COMM	_pglUniform1iARB:DWORD
COMM	_pglUniform2iARB:DWORD
COMM	_pglUniform3iARB:DWORD
COMM	_pglUniform4iARB:DWORD
COMM	_pglUniform1fvARB:DWORD
COMM	_pglUniform2fvARB:DWORD
COMM	_pglUniform3fvARB:DWORD
COMM	_pglUniform4fvARB:DWORD
COMM	_pglUniform1ivARB:DWORD
COMM	_pglUniform2ivARB:DWORD
COMM	_pglUniform3ivARB:DWORD
COMM	_pglUniform4ivARB:DWORD
COMM	_pglUniformMatrix2fvARB:DWORD
COMM	_pglUniformMatrix3fvARB:DWORD
COMM	_pglUniformMatrix4fvARB:DWORD
COMM	_pglGetObjectParameterfvARB:DWORD
COMM	_pglGetObjectParameterivARB:DWORD
COMM	_pglGetInfoLogARB:DWORD
COMM	_pglGetAttachedObjectsARB:DWORD
COMM	_pglGetUniformLocationARB:DWORD
COMM	_pglGetActiveUniformARB:DWORD
COMM	_pglGetUniformfvARB:DWORD
COMM	_pglGetUniformivARB:DWORD
COMM	_pglGetShaderSourceARB:DWORD
COMM	_pglTexImage3D:DWORD
COMM	_pglTexSubImage3D:DWORD
COMM	_pglCopyTexSubImage3D:DWORD
COMM	_pglBlendEquationEXT:DWORD
COMM	_pglStencilOpSeparate:DWORD
COMM	_pglStencilFuncSeparate:DWORD
COMM	_pglActiveStencilFaceEXT:DWORD
COMM	_pglVertexAttribPointerARB:DWORD
COMM	_pglEnableVertexAttribArrayARB:DWORD
COMM	_pglDisableVertexAttribArrayARB:DWORD
COMM	_pglBindAttribLocationARB:DWORD
COMM	_pglGetActiveAttribARB:DWORD
COMM	_pglGetAttribLocationARB:DWORD
COMM	_pglBindFragDataLocation:DWORD
COMM	_pglVertexAttrib2fARB:DWORD
COMM	_pglVertexAttrib2fvARB:DWORD
COMM	_pglVertexAttrib3fvARB:DWORD
COMM	_pglBindBufferARB:DWORD
COMM	_pglDeleteBuffersARB:DWORD
COMM	_pglGenBuffersARB:DWORD
COMM	_pglIsBufferARB:DWORD
COMM	_pglMapBufferARB:DWORD
COMM	_pglUnmapBufferARB:DWORD
COMM	_pglBufferDataARB:DWORD
COMM	_pglBufferSubDataARB:DWORD
COMM	_pglGenQueriesARB:DWORD
COMM	_pglDeleteQueriesARB:DWORD
COMM	_pglIsQueryARB:DWORD
COMM	_pglBeginQueryARB:DWORD
COMM	_pglEndQueryARB:DWORD
COMM	_pglGetQueryivARB:DWORD
COMM	_pglGetQueryObjectivARB:DWORD
COMM	_pglGetQueryObjectuivARB:DWORD
COMM	_pglDebugMessageControlARB:DWORD
COMM	_pglDebugMessageInsertARB:DWORD
COMM	_pglDebugMessageCallbackARB:DWORD
COMM	_pglGetDebugMessageLogARB:DWORD
COMM	_pglIsRenderbuffer:DWORD
COMM	_pglBindRenderbuffer:DWORD
COMM	_pglDeleteRenderbuffers:DWORD
COMM	_pglGenRenderbuffers:DWORD
COMM	_pglRenderbufferStorage:DWORD
COMM	_pglRenderbufferStorageMultisample:DWORD
COMM	_pglGetRenderbufferParameteriv:DWORD
COMM	_pglIsFramebuffer:DWORD
COMM	_pglBindFramebuffer:DWORD
COMM	_pglDeleteFramebuffers:DWORD
COMM	_pglGenFramebuffers:DWORD
COMM	_pglCheckFramebufferStatus:DWORD
COMM	_pglFramebufferTexture1D:DWORD
COMM	_pglFramebufferTexture2D:DWORD
COMM	_pglFramebufferTexture3D:DWORD
COMM	_pglFramebufferTextureLayer:DWORD
COMM	_pglFramebufferRenderbuffer:DWORD
COMM	_pglGetFramebufferAttachmentParameteriv:DWORD
COMM	_pglBlitFramebuffer:DWORD
COMM	_pglDrawBuffersARB:DWORD
COMM	_pglGenerateMipmap:DWORD
COMM	_pglBindVertexArray:DWORD
COMM	_pglDeleteVertexArrays:DWORD
COMM	_pglGenVertexArrays:DWORD
COMM	_pglIsVertexArray:DWORD
COMM	_pglSwapInterval:DWORD
COMM	_pwglSwapBuffers:DWORD
COMM	_pwglCopyContext:DWORD
COMM	_pwglCreateContext:DWORD
COMM	_pwglCreateLayerContext:DWORD
COMM	_pwglDeleteContext:DWORD
COMM	_pwglGetCurrentContext:DWORD
COMM	_pwglGetProcAddress:DWORD
COMM	_pwglMakeCurrent:DWORD
COMM	_pwglShareLists:DWORD
COMM	_pwglUseFontBitmaps:DWORD
COMM	_pwglUseFontOutlines:DWORD
COMM	_pwglDescribeLayerPlane:DWORD
COMM	_pwglSetLayerPaletteEntries:DWORD
COMM	_pwglGetLayerPaletteEntries:DWORD
COMM	_pwglRealizeLayerPalette:DWORD
COMM	_pwglSwapLayerBuffers:DWORD
COMM	_pwglSwapIntervalEXT:DWORD
COMM	_pwglCreateContextAttribsARB:DWORD
COMM	_pwglGetPixelFormatAttribiv:DWORD
COMM	_pwglChoosePixelFormat:DWORD
COMM	_pwglGetExtensionsStringEXT:DWORD
_DATA	ENDS
PUBLIC	_Mod_Init
PUBLIC	_Mod_FreeAll
PUBLIC	_Mod_Shutdown
PUBLIC	_Mod_ClearUserData
PUBLIC	_Mod_LoadWorld
PUBLIC	_Mod_Calloc
PUBLIC	_Mod_CacheCheck
PUBLIC	_Mod_LoadCacheFile
PUBLIC	_Mod_AliasExtradata
PUBLIC	_Mod_StudioExtradata
PUBLIC	_Mod_FindName
PUBLIC	_Mod_LoadModel
PUBLIC	_Mod_ForName
PUBLIC	_Mod_ValidateCRC
PUBLIC	_Mod_NeedCRC
PUBLIC	_Mod_FreeUnused
EXTRN	_memcpy:PROC
EXTRN	_memset:PROC
EXTRN	_Sys_Error:PROC
EXTRN	_Cmd_AddCommand:PROC
EXTRN	_Q_strncpy:PROC
EXTRN	_Q_strnicmp:PROC
EXTRN	__Mem_Alloc:PROC
EXTRN	__Mem_AllocPool:PROC
EXTRN	__Mem_FreePool:PROC
EXTRN	__Mem_EmptyPool:PROC
EXTRN	__Mem_Free:PROC
EXTRN	_Cvar_Get:PROC
EXTRN	_DBG_AssertFunction:PROC
EXTRN	_FS_LoadFile:PROC
EXTRN	_COM_FixSlashes:PROC
EXTRN	_COM_CheckString:PROC
EXTRN	_Host_Error:PROC
EXTRN	_Cache_Check:PROC
EXTRN	_Con_Reportf:PROC
EXTRN	_Con_Printf:PROC
EXTRN	_CRC32_Init:PROC
EXTRN	_CRC32_ProcessBuffer:PROC
EXTRN	_CRC32_Final:PROC
EXTRN	_Mod_LoadBrushModel:PROC
EXTRN	_Mod_UnloadBrushModel:PROC
EXTRN	_Mod_PrintWorldStats_f:PROC
EXTRN	_Mod_ReleaseHullPolygons:PROC
EXTRN	_Mod_InitStudioHull:PROC
EXTRN	_Mod_ResetStudioAPI:PROC
EXTRN	_Mod_ClearStudioCache:PROC
EXTRN	_Mod_LoadSpriteModel:PROC
EXTRN	_Mod_LoadStudioModel:PROC
EXTRN	_Mod_LoadAliasModel:PROC
EXTRN	_Mod_UnloadSpriteModel:PROC
EXTRN	_Mod_UnloadStudioModel:PROC
EXTRN	_Mod_UnloadAliasModel:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	_host:BYTE
EXTRN	_world:BYTE
EXTRN	_clgame:BYTE
EXTRN	_svgame:BYTE
EXTRN	___security_cookie:DWORD
_BSS	SEGMENT
_mod_crcinfo DQ	0404H DUP (?)
_mod_known DB	062020H DUP (?)
_mod_numknown DD 01H DUP (?)
_BSS	ENDS
_DATA	SEGMENT
$SG145110 DB	0aH, 00H
	ORG $+2
$SG145111 DB	'-----------------------------------', 0aH, 00H
	ORG $+3
$SG145113 DB	'%s', 0aH, 00H
$SG145114 DB	'-----------------------------------', 0aH, 00H
	ORG $+3
$SG145115 DB	'%i total models', 0aH, 00H
	ORG $+3
$SG145116 DB	0aH, 00H
	ORG $+2
$SG145146 DB	'c:\users\user\documents\github\xashtasks\xash_build4529_'
	DB	'src\engine\common\model.c', 00H
	ORG $+2
$SG145147 DB	'Studio Cache', 00H
	ORG $+3
$SG145148 DB	'enables studio cache for speedup tracing hitboxes', 00H
	ORG $+2
$SG145149 DB	'1', 00H
	ORG $+2
$SG145150 DB	'r_studiocache', 00H
	ORG $+2
$SG145151 DB	'completely ignore textures in the bsp-file if enabled', 00H
	ORG $+2
$SG145152 DB	'0', 00H
	ORG $+2
$SG145153 DB	'r_wadtextures', 00H
	ORG $+2
$SG145154 DB	'draw collision hulls 1-3', 00H
	ORG $+3
$SG145155 DB	'0', 00H
	ORG $+2
$SG145156 DB	'r_showhull', 00H
	ORG $+1
$SG145157 DB	'show stats for currently loaded map', 00H
$SG145158 DB	'mapstats', 00H
	ORG $+3
$SG145159 DB	'display loaded models list', 00H
	ORG $+1
$SG145160 DB	'modellist', 00H
	ORG $+2
$SG145197 DB	'MAX_MODELS limit exceeded (%d)', 0aH, 00H
$SG145232 DB	'%s couldn''t load', 0aH, 00H
	ORG $+2
$SG145175 DB	'c:\users\user\documents\github\xashtasks\xash_build4529_'
	DB	'src\engine\common\model.c', 00H
	ORG $+2
$SG145223 DB	'assert failed at %s:%i', 0aH, 00H
$SG145234 DB	'loading %s', 0aH, 00H
$SG145222 DB	'c:\users\user\documents\github\xashtasks\xash_build4529_'
	DB	'src\engine\common\model.c', 00H
	ORG $+2
$SG145228 DB	'assert failed at %s:%i', 0aH, 00H
$SG145244 DB	'^1Error:^7 %s has unknown format', 0aH, 00H
	ORG $+2
$SG145227 DB	'c:\users\user\documents\github\xashtasks\xash_build4529_'
	DB	'src\engine\common\model.c', 00H
	ORG $+2
$SG145233 DB	'^1Error:^7 %s couldn''t load', 0aH, 00H
	ORG $+3
$SG145243 DB	'%s has unknown format', 0aH, 00H
	ORG $+1
$SG145250 DB	'%s couldn''t load', 0aH, 00H
	ORG $+2
$SG145240 DB	'c:\users\user\documents\github\xashtasks\xash_build4529_'
	DB	'src\engine\common\model.c', 00H
	ORG $+2
$SG145261 DB	'%s has a bad checksum', 0aH, 00H
	ORG $+1
$SG145294 DB	'assert failed at %s:%i', 0aH, 00H
$SG145330 DB	'cu != NULL', 00H
	ORG $+1
$SG145247 DB	'c:\users\user\documents\github\xashtasks\xash_build4529_'
	DB	'src\engine\common\model.c', 00H
	ORG $+2
$SG145251 DB	'^1Error:^7 %s couldn''t load', 0aH, 00H
	ORG $+3
$SG145334 DB	'LoadCacheFile: ^1can''t load %s^7', 0aH, 00H
	ORG $+2
$SG145262 DB	'c:\users\user\documents\github\xashtasks\xash_build4529_'
	DB	'src\engine\common\model.c', 00H
	ORG $+6
$SG145283 DB	'c:\users\user\documents\github\xashtasks\xash_build4529_'
	DB	'src\engine\common\model.c', 00H
	ORG $+6
$SG145293 DB	'c:\users\user\documents\github\xashtasks\xash_build4529_'
	DB	'src\engine\common\model.c', 00H
	ORG $+6
$SG145315 DB	'c:\users\user\documents\github\xashtasks\xash_build4529_'
	DB	'src\engine\common\model.c', 00H
	ORG $+6
$SG145329 DB	'c:\users\user\documents\github\xashtasks\xash_build4529_'
	DB	'src\engine\common\model.c', 00H
	ORG $+6
$SG145335 DB	'c:\users\user\documents\github\xashtasks\xash_build4529_'
	DB	'src\engine\common\model.c', 00H
	ORG $+6
$SG145336 DB	'c:\users\user\documents\github\xashtasks\xash_build4529_'
	DB	'src\engine\common\model.c', 00H
_DATA	ENDS
; Function compile flags: /Odtp
; File c:\users\user\documents\github\xashtasks\xash_build4529_src\engine\common\model.c
_TEXT	SEGMENT
_i$ = -4						; size = 4
_Mod_PurgeStudioCache PROC

; 411  : {

	push	ebp
	mov	ebp, esp
	push	ecx

; 412  : 	int	i;
; 413  : 
; 414  : 	// refresh hull data
; 415  : 	SetBits( r_showhull->flags, FCVAR_CHANGED );

	mov	eax, DWORD PTR _r_showhull
	mov	ecx, DWORD PTR [eax+8]
	or	ecx, 8192				; 00002000H
	mov	edx, DWORD PTR _r_showhull
	mov	DWORD PTR [edx+8], ecx

; 416  : 	Mod_ReleaseHullPolygons();

	call	_Mod_ReleaseHullPolygons

; 417  : 
; 418  : 	// release previois map
; 419  : 	Mod_FreeModel( mod_known );	// world is stuck on slot #0 always

	push	OFFSET _mod_known
	call	_Mod_FreeModel
	add	esp, 4

; 420  : 
; 421  : 	// we should release all the world submodels
; 422  : 	// and clear studio sequences
; 423  : 	for( i = 1; i < mod_numknown; i++ )

	mov	DWORD PTR _i$[ebp], 1
	jmp	SHORT $LN4@Mod_PurgeS
$LN2@Mod_PurgeS:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN4@Mod_PurgeS:
	mov	ecx, DWORD PTR _i$[ebp]
	cmp	ecx, DWORD PTR _mod_numknown
	jge	SHORT $LN3@Mod_PurgeS

; 424  : 	{
; 425  : 		if( mod_known[i].type == mod_studio )

	imul	edx, DWORD PTR _i$[ebp], 392
	cmp	DWORD PTR _mod_known[edx+68], 3
	jne	SHORT $LN5@Mod_PurgeS

; 426  : 			mod_known[i].submodels = NULL;

	imul	eax, DWORD PTR _i$[ebp], 392
	mov	DWORD PTR _mod_known[eax+124], 0
$LN5@Mod_PurgeS:

; 427  : 		if( mod_known[i].name[0] == '*' )

	imul	ecx, DWORD PTR _i$[ebp], 392
	mov	edx, 1
	imul	eax, edx, 0
	movsx	ecx, BYTE PTR _mod_known[ecx+eax]
	cmp	ecx, 42					; 0000002aH
	jne	SHORT $LN6@Mod_PurgeS

; 428  : 			Mod_FreeModel( &mod_known[i] );

	imul	edx, DWORD PTR _i$[ebp], 392
	add	edx, OFFSET _mod_known
	push	edx
	call	_Mod_FreeModel
	add	esp, 4
$LN6@Mod_PurgeS:

; 429  : 		mod_known[i].needload = NL_UNREFERENCED;

	imul	eax, DWORD PTR _i$[ebp], 392
	mov	DWORD PTR _mod_known[eax+64], 0

; 430  : 	}

	jmp	SHORT $LN2@Mod_PurgeS
$LN3@Mod_PurgeS:

; 431  : 
; 432  : 	Mem_EmptyPool( com_studiocache );

	push	432					; 000001b0H
	push	OFFSET $SG145283
	mov	ecx, DWORD PTR _com_studiocache
	push	ecx
	call	__Mem_EmptyPool
	add	esp, 12					; 0000000cH

; 433  : 	Mod_ClearStudioCache();

	call	_Mod_ClearStudioCache

; 434  : }

	mov	esp, ebp
	pop	ebp
	ret	0
_Mod_PurgeStudioCache ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\documents\github\xashtasks\xash_build4529_src\engine\common\model.c
_TEXT	SEGMENT
tv77 = -4						; size = 4
_mod$ = 8						; size = 4
_Mod_FreeModel PROC

; 105  : {

	push	ebp
	mov	ebp, esp
	push	ecx

; 106  : 	// already freed?
; 107  : 	if( !mod || !mod->name[0] )

	cmp	DWORD PTR _mod$[ebp], 0
	je	SHORT $LN5@Mod_FreeMo
	mov	eax, 1
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _mod$[ebp]
	movsx	eax, BYTE PTR [edx+ecx]
	test	eax, eax
	jne	SHORT $LN4@Mod_FreeMo
$LN5@Mod_FreeMo:

; 108  : 		return;

	jmp	$LN1@Mod_FreeMo
$LN4@Mod_FreeMo:

; 109  : 
; 110  : 	if( mod->name[0] != '*' )

	mov	ecx, 1
	imul	edx, ecx, 0
	mov	eax, DWORD PTR _mod$[ebp]
	movsx	ecx, BYTE PTR [eax+edx]
	cmp	ecx, 42					; 0000002aH
	je	SHORT $LN6@Mod_FreeMo

; 111  : 		Mod_FreeUserData( mod );

	mov	edx, DWORD PTR _mod$[ebp]
	push	edx
	call	_Mod_FreeUserData
	add	esp, 4
$LN6@Mod_FreeMo:

; 112  : 
; 113  : 	// select the properly unloader
; 114  : 	switch( mod->type )

	mov	eax, DWORD PTR _mod$[ebp]
	mov	ecx, DWORD PTR [eax+68]
	mov	DWORD PTR tv77[ebp], ecx
	cmp	DWORD PTR tv77[ebp], 3
	ja	SHORT $LN2@Mod_FreeMo
	mov	edx, DWORD PTR tv77[ebp]
	jmp	DWORD PTR $LN12@Mod_FreeMo[edx*4]
$LN7@Mod_FreeMo:

; 115  : 	{
; 116  : 	case mod_sprite:
; 117  : 		Mod_UnloadSpriteModel( mod );

	mov	eax, DWORD PTR _mod$[ebp]
	push	eax
	call	_Mod_UnloadSpriteModel
	add	esp, 4

; 118  : 		break;

	jmp	SHORT $LN2@Mod_FreeMo
$LN8@Mod_FreeMo:

; 119  : 	case mod_studio:
; 120  : 		Mod_UnloadStudioModel( mod );

	mov	ecx, DWORD PTR _mod$[ebp]
	push	ecx
	call	_Mod_UnloadStudioModel
	add	esp, 4

; 121  : 		break;

	jmp	SHORT $LN2@Mod_FreeMo
$LN9@Mod_FreeMo:

; 122  : 	case mod_brush:
; 123  : 		Mod_UnloadBrushModel( mod );

	mov	edx, DWORD PTR _mod$[ebp]
	push	edx
	call	_Mod_UnloadBrushModel
	add	esp, 4

; 124  : 		break;

	jmp	SHORT $LN2@Mod_FreeMo
$LN10@Mod_FreeMo:

; 125  : 	case mod_alias:
; 126  : 		Mod_UnloadAliasModel( mod );

	mov	eax, DWORD PTR _mod$[ebp]
	push	eax
	call	_Mod_UnloadAliasModel
	add	esp, 4
$LN2@Mod_FreeMo:

; 127  : 		break;
; 128  : 	}
; 129  : 
; 130  : 	memset( mod, 0, sizeof( *mod ));

	push	392					; 00000188H
	push	0
	mov	ecx, DWORD PTR _mod$[ebp]
	push	ecx
	call	_memset
	add	esp, 12					; 0000000cH
$LN1@Mod_FreeMo:

; 131  : }

	mov	esp, ebp
	pop	ebp
	ret	0
$LN12@Mod_FreeMo:
	DD	$LN9@Mod_FreeMo
	DD	$LN7@Mod_FreeMo
	DD	$LN10@Mod_FreeMo
	DD	$LN8@Mod_FreeMo
_Mod_FreeModel ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\documents\github\xashtasks\xash_build4529_src\engine\common\model.c
_TEXT	SEGMENT
_mod$ = 8						; size = 4
_Mod_FreeUserData PROC

; 76   : {

	push	ebp
	mov	ebp, esp

; 77   : 	// ignore submodels and freed models
; 78   : 	if( !mod->name[0] || mod->name[0] == '*' )

	mov	eax, 1
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _mod$[ebp]
	movsx	eax, BYTE PTR [edx+ecx]
	test	eax, eax
	je	SHORT $LN3@Mod_FreeUs
	mov	ecx, 1
	imul	edx, ecx, 0
	mov	eax, DWORD PTR _mod$[ebp]
	movsx	ecx, BYTE PTR [eax+edx]
	cmp	ecx, 42					; 0000002aH
	jne	SHORT $LN2@Mod_FreeUs
$LN3@Mod_FreeUs:

; 79   : 		return;

	jmp	SHORT $LN1@Mod_FreeUs
$LN2@Mod_FreeUs:

; 80   : 
; 81   : 	if( host.type == HOST_DEDICATED )

	cmp	DWORD PTR _host+164, 1
	jne	SHORT $LN4@Mod_FreeUs

; 82   : 	{
; 83   : 		if( svgame.physFuncs.Mod_ProcessUserData != NULL )

	cmp	DWORD PTR _svgame+19544, 0
	je	SHORT $LN6@Mod_FreeUs

; 84   : 		{
; 85   : 			// let the server.dll free custom data
; 86   : 			svgame.physFuncs.Mod_ProcessUserData( mod, false, NULL );

	push	0
	push	0
	mov	edx, DWORD PTR _mod$[ebp]
	push	edx
	call	DWORD PTR _svgame+19544
	add	esp, 12					; 0000000cH
$LN6@Mod_FreeUs:

; 87   : 		}
; 88   : 	}

	jmp	SHORT $LN1@Mod_FreeUs
$LN4@Mod_FreeUs:

; 89   : 	else
; 90   : 	{
; 91   : 		if( clgame.drawFuncs.Mod_ProcessUserData != NULL )

	cmp	DWORD PTR _clgame+204, 0
	je	SHORT $LN1@Mod_FreeUs

; 92   : 		{
; 93   : 			// let the client.dll free custom data
; 94   : 			clgame.drawFuncs.Mod_ProcessUserData( mod, false, NULL );

	push	0
	push	0
	mov	eax, DWORD PTR _mod$[ebp]
	push	eax
	call	DWORD PTR _clgame+204
	add	esp, 12					; 0000000cH
$LN1@Mod_FreeUs:

; 95   : 		}
; 96   : 	}
; 97   : }

	pop	ebp
	ret	0
_Mod_FreeUserData ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\documents\github\xashtasks\xash_build4529_src\engine\common\model.c
_TEXT	SEGMENT
_i$ = -12						; size = 4
_nummodels$ = -8					; size = 4
_mod$ = -4						; size = 4
_Mod_Modellist_f PROC

; 50   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH

; 51   : 	int	i, nummodels;
; 52   : 	model_t	*mod;
; 53   : 
; 54   : 	Con_Printf( "\n" );

	push	OFFSET $SG145110
	call	_Con_Printf
	add	esp, 4

; 55   : 	Con_Printf( "-----------------------------------\n" );

	push	OFFSET $SG145111
	call	_Con_Printf
	add	esp, 4

; 56   : 
; 57   : 	for( i = nummodels = 0, mod = mod_known; i < mod_numknown; i++, mod++ )

	mov	DWORD PTR _nummodels$[ebp], 0
	mov	eax, DWORD PTR _nummodels$[ebp]
	mov	DWORD PTR _i$[ebp], eax
	mov	DWORD PTR _mod$[ebp], OFFSET _mod_known
	jmp	SHORT $LN4@Mod_Modell
$LN2@Mod_Modell:
	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
	mov	edx, DWORD PTR _mod$[ebp]
	add	edx, 392				; 00000188H
	mov	DWORD PTR _mod$[ebp], edx
$LN4@Mod_Modell:
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR _mod_numknown
	jge	SHORT $LN3@Mod_Modell

; 58   : 	{
; 59   : 		if( !mod->name[0] )

	mov	ecx, 1
	imul	edx, ecx, 0
	mov	eax, DWORD PTR _mod$[ebp]
	movsx	ecx, BYTE PTR [eax+edx]
	test	ecx, ecx
	jne	SHORT $LN5@Mod_Modell

; 60   : 			continue; // free slot

	jmp	SHORT $LN2@Mod_Modell
$LN5@Mod_Modell:

; 61   : 		Con_Printf( "%s\n", mod->name );

	mov	edx, DWORD PTR _mod$[ebp]
	push	edx
	push	OFFSET $SG145113
	call	_Con_Printf
	add	esp, 8

; 62   : 		nummodels++;

	mov	eax, DWORD PTR _nummodels$[ebp]
	add	eax, 1
	mov	DWORD PTR _nummodels$[ebp], eax

; 63   : 	}

	jmp	SHORT $LN2@Mod_Modell
$LN3@Mod_Modell:

; 64   : 
; 65   : 	Con_Printf( "-----------------------------------\n" );

	push	OFFSET $SG145114
	call	_Con_Printf
	add	esp, 4

; 66   : 	Con_Printf( "%i total models\n", nummodels );

	mov	ecx, DWORD PTR _nummodels$[ebp]
	push	ecx
	push	OFFSET $SG145115
	call	_Con_Printf
	add	esp, 8

; 67   : 	Con_Printf( "\n" );

	push	OFFSET $SG145116
	call	_Con_Printf
	add	esp, 4

; 68   : }

	mov	esp, ebp
	pop	ebp
	ret	0
_Mod_Modellist_f ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\documents\github\xashtasks\xash_build4529_src\engine\common\model.c
_TEXT	SEGMENT
_i$ = -8						; size = 4
_mod$ = -4						; size = 4
_Mod_FreeUnused PROC

; 473  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 474  : 	model_t	*mod;
; 475  : 	int	i;
; 476  : 
; 477  : 	// never tries to release worldmodel
; 478  : 	for( i = 1, mod = &mod_known[1]; i < mod_numknown; i++, mod++ )

	mov	DWORD PTR _i$[ebp], 1
	mov	eax, 392				; 00000188H
	shl	eax, 0
	add	eax, OFFSET _mod_known
	mov	DWORD PTR _mod$[ebp], eax
	jmp	SHORT $LN4@Mod_FreeUn
$LN2@Mod_FreeUn:
	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
	mov	edx, DWORD PTR _mod$[ebp]
	add	edx, 392				; 00000188H
	mov	DWORD PTR _mod$[ebp], edx
$LN4@Mod_FreeUn:
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR _mod_numknown
	jge	SHORT $LN1@Mod_FreeUn

; 479  : 	{
; 480  : 		if( mod->needload == NL_UNREFERENCED && COM_CheckString( mod->name ))

	mov	ecx, DWORD PTR _mod$[ebp]
	cmp	DWORD PTR [ecx+64], 0
	jne	SHORT $LN5@Mod_FreeUn
	mov	edx, DWORD PTR _mod$[ebp]
	push	edx
	call	_COM_CheckString
	add	esp, 4
	test	eax, eax
	je	SHORT $LN5@Mod_FreeUn

; 481  : 			Mod_FreeModel( mod );

	mov	eax, DWORD PTR _mod$[ebp]
	push	eax
	call	_Mod_FreeModel
	add	esp, 4
$LN5@Mod_FreeUn:

; 482  : 	}

	jmp	SHORT $LN2@Mod_FreeUn
$LN1@Mod_FreeUn:

; 483  : }

	mov	esp, ebp
	pop	ebp
	ret	0
_Mod_FreeUnused ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\documents\github\xashtasks\xash_build4529_src\engine\common\model.c
_TEXT	SEGMENT
_mod$ = -8						; size = 4
_p$ = -4						; size = 4
_name$ = 8						; size = 4
_needCRC$ = 12						; size = 4
_Mod_NeedCRC PROC

; 601  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 602  : 	model_t		*mod;
; 603  : 	model_info_t	*p;
; 604  : 
; 605  : 	mod = Mod_FindName( name, true );

	push	1
	mov	eax, DWORD PTR _name$[ebp]
	push	eax
	call	_Mod_FindName
	add	esp, 8
	mov	DWORD PTR _mod$[ebp], eax

; 606  : 	p = &mod_crcinfo[mod - mod_known];

	mov	eax, DWORD PTR _mod$[ebp]
	sub	eax, OFFSET _mod_known
	cdq
	mov	ecx, 392				; 00000188H
	idiv	ecx
	lea	edx, DWORD PTR _mod_crcinfo[eax*8]
	mov	DWORD PTR _p$[ebp], edx

; 607  : 
; 608  : 	if( needCRC ) SetBits( p->flags, FCRC_SHOULD_CHECKSUM );

	cmp	DWORD PTR _needCRC$[ebp], 0
	je	SHORT $LN2@Mod_NeedCR
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax]
	or	ecx, 1
	mov	edx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [edx], ecx
	jmp	SHORT $LN1@Mod_NeedCR
$LN2@Mod_NeedCR:

; 609  : 	else ClearBits( p->flags, FCRC_SHOULD_CHECKSUM );

	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax]
	and	ecx, -2					; fffffffeH
	mov	edx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [edx], ecx
$LN1@Mod_NeedCR:

; 610  : }

	mov	esp, ebp
	pop	ebp
	ret	0
_Mod_NeedCRC ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\documents\github\xashtasks\xash_build4529_src\engine\common\model.c
_TEXT	SEGMENT
_mod$ = -8						; size = 4
_p$ = -4						; size = 4
_name$ = 8						; size = 4
_crc$ = 12						; size = 4
_Mod_ValidateCRC PROC

; 580  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 581  : 	model_info_t	*p;
; 582  : 	model_t		*mod;
; 583  : 
; 584  : 	mod = Mod_FindName( name, true );

	push	1
	mov	eax, DWORD PTR _name$[ebp]
	push	eax
	call	_Mod_FindName
	add	esp, 8
	mov	DWORD PTR _mod$[ebp], eax

; 585  : 	p = &mod_crcinfo[mod - mod_known];

	mov	eax, DWORD PTR _mod$[ebp]
	sub	eax, OFFSET _mod_known
	cdq
	mov	ecx, 392				; 00000188H
	idiv	ecx
	lea	edx, DWORD PTR _mod_crcinfo[eax*8]
	mov	DWORD PTR _p$[ebp], edx

; 586  : 
; 587  : 	if( !FBitSet( p->flags, FCRC_CHECKSUM_DONE ))

	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax]
	and	ecx, 2
	jne	SHORT $LN2@Mod_Valida

; 588  : 		return true;

	mov	eax, 1
	jmp	SHORT $LN1@Mod_Valida
$LN2@Mod_Valida:

; 589  : 	if( p->initialCRC == crc )

	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [edx+4]
	cmp	eax, DWORD PTR _crc$[ebp]
	jne	SHORT $LN3@Mod_Valida

; 590  : 		return true;

	mov	eax, 1
	jmp	SHORT $LN1@Mod_Valida
$LN3@Mod_Valida:

; 591  : 	return false;

	xor	eax, eax
$LN1@Mod_Valida:

; 592  : }

	mov	esp, ebp
	pop	ebp
	ret	0
_Mod_ValidateCRC ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\documents\github\xashtasks\xash_build4529_src\engine\common\model.c
_TEXT	SEGMENT
_mod$ = -4						; size = 4
_name$ = 8						; size = 4
_crash$ = 12						; size = 4
_trackCRC$ = 16						; size = 4
_Mod_ForName PROC

; 393  : {

	push	ebp
	mov	ebp, esp
	push	ecx

; 394  : 	model_t	*mod;
; 395  : 
; 396  : 	if( !COM_CheckString( name ))

	mov	eax, DWORD PTR _name$[ebp]
	push	eax
	call	_COM_CheckString
	add	esp, 4
	test	eax, eax
	jne	SHORT $LN2@Mod_ForNam

; 397  : 		return NULL;

	xor	eax, eax
	jmp	SHORT $LN1@Mod_ForNam
$LN2@Mod_ForNam:

; 398  : 
; 399  : 	mod = Mod_FindName( name, trackCRC );

	mov	ecx, DWORD PTR _trackCRC$[ebp]
	push	ecx
	mov	edx, DWORD PTR _name$[ebp]
	push	edx
	call	_Mod_FindName
	add	esp, 8
	mov	DWORD PTR _mod$[ebp], eax

; 400  : 	return Mod_LoadModel( mod, crash );

	mov	eax, DWORD PTR _crash$[ebp]
	push	eax
	mov	ecx, DWORD PTR _mod$[ebp]
	push	ecx
	call	_Mod_LoadModel
	add	esp, 8
$LN1@Mod_ForNam:

; 401  : }

	mov	esp, ebp
	pop	ebp
	ret	0
_Mod_ForName ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\documents\github\xashtasks\xash_build4529_src\engine\common\model.c
_TEXT	SEGMENT
_length$ = -92						; size = 4
_loaded$ = -88						; size = 4
_currentCRC$1 = -84					; size = 4
_p$ = -80						; size = 4
tv136 = -76						; size = 4
_buf$ = -72						; size = 4
_tempname$ = -68					; size = 64
__$ArrayPad$ = -4					; size = 4
_mod$ = 8						; size = 4
_crash$ = 12						; size = 4
_Mod_LoadModel PROC

; 262  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 92					; 0000005cH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 263  : 	char		tempname[MAX_QPATH];
; 264  : 	long		length = 0;

	mov	DWORD PTR _length$[ebp], 0

; 265  : 	qboolean		loaded;
; 266  : 	byte		*buf;
; 267  : 	model_info_t	*p;
; 268  : 
; 269  : 	ASSERT( mod != NULL );

	cmp	DWORD PTR _mod$[ebp], 0
	jne	SHORT $LN4@Mod_LoadMo
	push	269					; 0000010dH
	push	OFFSET $SG145222
	push	OFFSET $SG145223
	call	_Sys_Error
	add	esp, 12					; 0000000cH
$LN4@Mod_LoadMo:

; 270  : 
; 271  : 	// check if already loaded (or inline bmodel)
; 272  : 	if( mod->mempool || mod->name[0] == '*' )

	mov	eax, DWORD PTR _mod$[ebp]
	cmp	DWORD PTR [eax+76], 0
	jne	SHORT $LN6@Mod_LoadMo
	mov	ecx, 1
	imul	edx, ecx, 0
	mov	eax, DWORD PTR _mod$[ebp]
	movsx	ecx, BYTE PTR [eax+edx]
	cmp	ecx, 42					; 0000002aH
	jne	SHORT $LN5@Mod_LoadMo
$LN6@Mod_LoadMo:

; 273  : 	{
; 274  : 		mod->needload = NL_PRESENT;

	mov	edx, DWORD PTR _mod$[ebp]
	mov	DWORD PTR [edx+64], 2

; 275  : 		return mod;

	mov	eax, DWORD PTR _mod$[ebp]
	jmp	$LN1@Mod_LoadMo
$LN5@Mod_LoadMo:

; 276  : 	}
; 277  : 
; 278  : 	ASSERT( mod->needload == NL_NEEDS_LOADED );

	mov	eax, DWORD PTR _mod$[ebp]
	cmp	DWORD PTR [eax+64], 1
	je	SHORT $LN7@Mod_LoadMo
	push	278					; 00000116H
	push	OFFSET $SG145227
	push	OFFSET $SG145228
	call	_Sys_Error
	add	esp, 12					; 0000000cH
$LN7@Mod_LoadMo:

; 279  : 
; 280  : 	// store modelname to show error
; 281  : 	Q_strncpy( tempname, mod->name, sizeof( tempname ));

	push	64					; 00000040H
	mov	ecx, DWORD PTR _mod$[ebp]
	push	ecx
	lea	edx, DWORD PTR _tempname$[ebp]
	push	edx
	call	_Q_strncpy
	add	esp, 12					; 0000000cH

; 282  : 	COM_FixSlashes( tempname );

	lea	eax, DWORD PTR _tempname$[ebp]
	push	eax
	call	_COM_FixSlashes
	add	esp, 4

; 283  : 
; 284  : 	buf = FS_LoadFile( tempname, &length, false );

	push	0
	lea	ecx, DWORD PTR _length$[ebp]
	push	ecx
	lea	edx, DWORD PTR _tempname$[ebp]
	push	edx
	call	_FS_LoadFile
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _buf$[ebp], eax

; 285  : 
; 286  : 	if( !buf )

	cmp	DWORD PTR _buf$[ebp], 0
	jne	SHORT $LN8@Mod_LoadMo

; 287  : 	{
; 288  : 		memset( mod, 0, sizeof( model_t ));

	push	392					; 00000188H
	push	0
	mov	eax, DWORD PTR _mod$[ebp]
	push	eax
	call	_memset
	add	esp, 12					; 0000000cH

; 289  : 
; 290  : 		if( crash ) Host_Error( "%s couldn't load\n", tempname );

	cmp	DWORD PTR _crash$[ebp], 0
	je	SHORT $LN9@Mod_LoadMo
	lea	ecx, DWORD PTR _tempname$[ebp]
	push	ecx
	push	OFFSET $SG145232
	call	_Host_Error
	add	esp, 8
	jmp	SHORT $LN10@Mod_LoadMo
$LN9@Mod_LoadMo:

; 291  : 		else Con_Printf( S_ERROR "%s couldn't load\n", tempname );

	lea	edx, DWORD PTR _tempname$[ebp]
	push	edx
	push	OFFSET $SG145233
	call	_Con_Printf
	add	esp, 8
$LN10@Mod_LoadMo:

; 292  : 
; 293  : 		return NULL;

	xor	eax, eax
	jmp	$LN1@Mod_LoadMo
$LN8@Mod_LoadMo:

; 294  : 	}
; 295  : 
; 296  : 	Con_Reportf( "loading %s\n", mod->name );

	mov	eax, DWORD PTR _mod$[ebp]
	push	eax
	push	OFFSET $SG145234
	call	_Con_Reportf
	add	esp, 8

; 297  : 	mod->needload = NL_PRESENT;

	mov	ecx, DWORD PTR _mod$[ebp]
	mov	DWORD PTR [ecx+64], 2

; 298  : 	mod->type = mod_bad;

	mov	edx, DWORD PTR _mod$[ebp]
	mov	DWORD PTR [edx+68], -1

; 299  : 	loadmodel = mod;

	mov	eax, DWORD PTR _mod$[ebp]
	mov	DWORD PTR _loadmodel, eax

; 300  : 
; 301  : 	// call the apropriate loader
; 302  : 	switch( *(uint *)buf )

	mov	ecx, DWORD PTR _buf$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR tv136[ebp], edx
	cmp	DWORD PTR tv136[ebp], 1330660425	; 4f504449H
	ja	SHORT $LN32@Mod_LoadMo
	cmp	DWORD PTR tv136[ebp], 1330660425	; 4f504449H
	je	SHORT $LN13@Mod_LoadMo
	cmp	DWORD PTR tv136[ebp], 29		; 0000001dH
	jb	$LN15@Mod_LoadMo
	cmp	DWORD PTR tv136[ebp], 30		; 0000001eH
	jbe	SHORT $LN14@Mod_LoadMo
	cmp	DWORD PTR tv136[ebp], 844124994		; 32505342H
	je	SHORT $LN14@Mod_LoadMo
	jmp	SHORT $LN15@Mod_LoadMo
$LN32@Mod_LoadMo:
	cmp	DWORD PTR tv136[ebp], 1347634249	; 50534449H
	je	SHORT $LN12@Mod_LoadMo
	cmp	DWORD PTR tv136[ebp], 1414743113	; 54534449H
	je	SHORT $LN11@Mod_LoadMo
	jmp	SHORT $LN15@Mod_LoadMo
$LN11@Mod_LoadMo:

; 303  : 	{
; 304  : 	case IDSTUDIOHEADER:
; 305  : 		Mod_LoadStudioModel( mod, buf, &loaded );

	lea	eax, DWORD PTR _loaded$[ebp]
	push	eax
	mov	ecx, DWORD PTR _buf$[ebp]
	push	ecx
	mov	edx, DWORD PTR _mod$[ebp]
	push	edx
	call	_Mod_LoadStudioModel
	add	esp, 12					; 0000000cH

; 306  : 		break;

	jmp	$LN2@Mod_LoadMo
$LN12@Mod_LoadMo:

; 307  : 	case IDSPRITEHEADER:
; 308  : 		Mod_LoadSpriteModel( mod, buf, &loaded, 0 );

	push	0
	lea	eax, DWORD PTR _loaded$[ebp]
	push	eax
	mov	ecx, DWORD PTR _buf$[ebp]
	push	ecx
	mov	edx, DWORD PTR _mod$[ebp]
	push	edx
	call	_Mod_LoadSpriteModel
	add	esp, 16					; 00000010H

; 309  : 		break;

	jmp	SHORT $LN2@Mod_LoadMo
$LN13@Mod_LoadMo:

; 310  : 	case IDALIASHEADER:
; 311  : 		Mod_LoadAliasModel( mod, buf, &loaded );

	lea	eax, DWORD PTR _loaded$[ebp]
	push	eax
	mov	ecx, DWORD PTR _buf$[ebp]
	push	ecx
	mov	edx, DWORD PTR _mod$[ebp]
	push	edx
	call	_Mod_LoadAliasModel
	add	esp, 12					; 0000000cH

; 312  : 		break;

	jmp	SHORT $LN2@Mod_LoadMo
$LN14@Mod_LoadMo:

; 313  : 	case Q1BSP_VERSION:
; 314  : 	case HLBSP_VERSION:
; 315  : 	case QBSP2_VERSION:
; 316  : 		Mod_LoadBrushModel( mod, buf, &loaded );

	lea	eax, DWORD PTR _loaded$[ebp]
	push	eax
	mov	ecx, DWORD PTR _buf$[ebp]
	push	ecx
	mov	edx, DWORD PTR _mod$[ebp]
	push	edx
	call	_Mod_LoadBrushModel
	add	esp, 12					; 0000000cH

; 317  : 		break;

	jmp	SHORT $LN2@Mod_LoadMo
$LN15@Mod_LoadMo:

; 318  : 	default:
; 319  : 		Mem_Free( buf );

	push	319					; 0000013fH
	push	OFFSET $SG145240
	mov	eax, DWORD PTR _buf$[ebp]
	push	eax
	call	__Mem_Free
	add	esp, 12					; 0000000cH

; 320  : 		if( crash ) Host_Error( "%s has unknown format\n", tempname );

	cmp	DWORD PTR _crash$[ebp], 0
	je	SHORT $LN16@Mod_LoadMo
	lea	ecx, DWORD PTR _tempname$[ebp]
	push	ecx
	push	OFFSET $SG145243
	call	_Host_Error
	add	esp, 8
	jmp	SHORT $LN17@Mod_LoadMo
$LN16@Mod_LoadMo:

; 321  : 		else Con_Printf( S_ERROR "%s has unknown format\n", tempname );

	lea	edx, DWORD PTR _tempname$[ebp]
	push	edx
	push	OFFSET $SG145244
	call	_Con_Printf
	add	esp, 8
$LN17@Mod_LoadMo:

; 322  : 		return NULL;

	xor	eax, eax
	jmp	$LN1@Mod_LoadMo
$LN2@Mod_LoadMo:

; 323  : 	}
; 324  : 
; 325  : 	if( !loaded )

	cmp	DWORD PTR _loaded$[ebp], 0
	jne	SHORT $LN18@Mod_LoadMo

; 326  : 	{
; 327  : 		Mod_FreeModel( mod );

	mov	eax, DWORD PTR _mod$[ebp]
	push	eax
	call	_Mod_FreeModel
	add	esp, 4

; 328  : 		Mem_Free( buf );

	push	328					; 00000148H
	push	OFFSET $SG145247
	mov	ecx, DWORD PTR _buf$[ebp]
	push	ecx
	call	__Mem_Free
	add	esp, 12					; 0000000cH

; 329  : 
; 330  : 		if( crash ) Host_Error( "%s couldn't load\n", tempname );

	cmp	DWORD PTR _crash$[ebp], 0
	je	SHORT $LN20@Mod_LoadMo
	lea	edx, DWORD PTR _tempname$[ebp]
	push	edx
	push	OFFSET $SG145250
	call	_Host_Error
	add	esp, 8
	jmp	SHORT $LN21@Mod_LoadMo
$LN20@Mod_LoadMo:

; 331  : 		else Con_Printf( S_ERROR "%s couldn't load\n", tempname );

	lea	eax, DWORD PTR _tempname$[ebp]
	push	eax
	push	OFFSET $SG145251
	call	_Con_Printf
	add	esp, 8
$LN21@Mod_LoadMo:

; 332  : 
; 333  : 		return NULL;

	xor	eax, eax
	jmp	$LN1@Mod_LoadMo

; 334  : 	}

	jmp	SHORT $LN19@Mod_LoadMo
$LN18@Mod_LoadMo:

; 335  : 	else
; 336  : 	{
; 337  : 		if( world.loading )

	cmp	DWORD PTR _world, 0
	je	SHORT $LN22@Mod_LoadMo

; 338  : 			SetBits( mod->flags, MODEL_WORLD ); // mark worldmodel

	mov	ecx, DWORD PTR _mod$[ebp]
	mov	edx, DWORD PTR [ecx+80]
	or	edx, 536870912				; 20000000H
	mov	eax, DWORD PTR _mod$[ebp]
	mov	DWORD PTR [eax+80], edx
$LN22@Mod_LoadMo:

; 339  : 
; 340  : 		if( host.type == HOST_DEDICATED )

	cmp	DWORD PTR _host+164, 1
	jne	SHORT $LN23@Mod_LoadMo

; 341  : 		{
; 342  : 			if( svgame.physFuncs.Mod_ProcessUserData != NULL )

	cmp	DWORD PTR _svgame+19544, 0
	je	SHORT $LN25@Mod_LoadMo

; 343  : 			{
; 344  : 				// let the server.dll load custom data
; 345  : 				svgame.physFuncs.Mod_ProcessUserData( mod, true, buf );

	mov	ecx, DWORD PTR _buf$[ebp]
	push	ecx
	push	1
	mov	edx, DWORD PTR _mod$[ebp]
	push	edx
	call	DWORD PTR _svgame+19544
	add	esp, 12					; 0000000cH
$LN25@Mod_LoadMo:

; 346  : 			}
; 347  : 		}

	jmp	SHORT $LN19@Mod_LoadMo
$LN23@Mod_LoadMo:

; 348  : 		else
; 349  : 		{
; 350  : 			if( clgame.drawFuncs.Mod_ProcessUserData != NULL )

	cmp	DWORD PTR _clgame+204, 0
	je	SHORT $LN19@Mod_LoadMo

; 351  : 			{
; 352  : 				// let the client.dll load custom data
; 353  : 				clgame.drawFuncs.Mod_ProcessUserData( mod, true, buf );

	mov	eax, DWORD PTR _buf$[ebp]
	push	eax
	push	1
	mov	ecx, DWORD PTR _mod$[ebp]
	push	ecx
	call	DWORD PTR _clgame+204
	add	esp, 12					; 0000000cH
$LN19@Mod_LoadMo:

; 354  : 			}
; 355  : 		}
; 356  : 	}
; 357  : 
; 358  : 	p = &mod_crcinfo[mod - mod_known];

	mov	eax, DWORD PTR _mod$[ebp]
	sub	eax, OFFSET _mod_known
	cdq
	mov	ecx, 392				; 00000188H
	idiv	ecx
	lea	edx, DWORD PTR _mod_crcinfo[eax*8]
	mov	DWORD PTR _p$[ebp], edx

; 359  : 	mod->needload = NL_PRESENT;

	mov	eax, DWORD PTR _mod$[ebp]
	mov	DWORD PTR [eax+64], 2

; 360  : 
; 361  : 	if( FBitSet( p->flags, FCRC_SHOULD_CHECKSUM ))

	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR [ecx]
	and	edx, 1
	je	SHORT $LN27@Mod_LoadMo

; 362  : 	{
; 363  : 		CRC32_t	currentCRC;
; 364  : 
; 365  : 		CRC32_Init( &currentCRC );

	lea	eax, DWORD PTR _currentCRC$1[ebp]
	push	eax
	call	_CRC32_Init
	add	esp, 4

; 366  : 		CRC32_ProcessBuffer( &currentCRC, buf, length );

	mov	ecx, DWORD PTR _length$[ebp]
	push	ecx
	mov	edx, DWORD PTR _buf$[ebp]
	push	edx
	lea	eax, DWORD PTR _currentCRC$1[ebp]
	push	eax
	call	_CRC32_ProcessBuffer
	add	esp, 12					; 0000000cH

; 367  : 		currentCRC = CRC32_Final( currentCRC );

	mov	ecx, DWORD PTR _currentCRC$1[ebp]
	push	ecx
	call	_CRC32_Final
	add	esp, 4
	mov	DWORD PTR _currentCRC$1[ebp], eax

; 368  : 
; 369  : 		if( FBitSet( p->flags, FCRC_CHECKSUM_DONE ))

	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [edx]
	and	eax, 2
	je	SHORT $LN28@Mod_LoadMo

; 370  : 		{
; 371  : 			if( currentCRC != p->initialCRC )

	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR _currentCRC$1[ebp]
	cmp	edx, DWORD PTR [ecx+4]
	je	SHORT $LN30@Mod_LoadMo

; 372  : 				Host_Error( "%s has a bad checksum\n", tempname );

	lea	eax, DWORD PTR _tempname$[ebp]
	push	eax
	push	OFFSET $SG145261
	call	_Host_Error
	add	esp, 8
$LN30@Mod_LoadMo:

; 373  : 		}

	jmp	SHORT $LN27@Mod_LoadMo
$LN28@Mod_LoadMo:

; 374  : 		else
; 375  : 		{
; 376  : 			SetBits( p->flags, FCRC_CHECKSUM_DONE );

	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR [ecx]
	or	edx, 2
	mov	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR [eax], edx

; 377  : 			p->initialCRC = currentCRC;

	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR _currentCRC$1[ebp]
	mov	DWORD PTR [ecx+4], edx
$LN27@Mod_LoadMo:

; 378  : 		}
; 379  : 	}
; 380  : 	Mem_Free( buf );

	push	380					; 0000017cH
	push	OFFSET $SG145262
	mov	eax, DWORD PTR _buf$[ebp]
	push	eax
	call	__Mem_Free
	add	esp, 12					; 0000000cH

; 381  : 
; 382  : 	return mod;

	mov	eax, DWORD PTR _mod$[ebp]
$LN1@Mod_LoadMo:

; 383  : }

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_Mod_LoadModel ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\documents\github\xashtasks\xash_build4529_src\engine\common\model.c
_TEXT	SEGMENT
_i$ = -76						; size = 4
_mod$ = -72						; size = 4
_modname$ = -68						; size = 64
__$ArrayPad$ = -4					; size = 4
_filename$ = 8						; size = 4
_trackCRC$ = 12						; size = 4
_Mod_FindName PROC

; 213  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 76					; 0000004cH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 214  : 	char	modname[MAX_QPATH];
; 215  : 	model_t	*mod;
; 216  : 	int	i;
; 217  : 
; 218  : 	Q_strncpy( modname, filename, sizeof( modname ));

	push	64					; 00000040H
	mov	eax, DWORD PTR _filename$[ebp]
	push	eax
	lea	ecx, DWORD PTR _modname$[ebp]
	push	ecx
	call	_Q_strncpy
	add	esp, 12					; 0000000cH

; 219  : 
; 220  : 	// search the currently loaded models
; 221  : 	for( i = 0, mod = mod_known; i < mod_numknown; i++, mod++ )

	mov	DWORD PTR _i$[ebp], 0
	mov	DWORD PTR _mod$[ebp], OFFSET _mod_known
	jmp	SHORT $LN4@Mod_FindNa
$LN2@Mod_FindNa:
	mov	edx, DWORD PTR _i$[ebp]
	add	edx, 1
	mov	DWORD PTR _i$[ebp], edx
	mov	eax, DWORD PTR _mod$[ebp]
	add	eax, 392				; 00000188H
	mov	DWORD PTR _mod$[ebp], eax
$LN4@Mod_FindNa:
	mov	ecx, DWORD PTR _i$[ebp]
	cmp	ecx, DWORD PTR _mod_numknown
	jge	SHORT $LN3@Mod_FindNa

; 222  : 	{
; 223  : 		if( !Q_stricmp( mod->name, modname ))

	push	99999					; 0001869fH
	lea	edx, DWORD PTR _modname$[ebp]
	push	edx
	mov	eax, DWORD PTR _mod$[ebp]
	push	eax
	call	_Q_strnicmp
	add	esp, 12					; 0000000cH
	test	eax, eax
	jne	SHORT $LN8@Mod_FindNa

; 224  : 		{
; 225  : 			if( mod->mempool || mod->name[0] == '*' )

	mov	ecx, DWORD PTR _mod$[ebp]
	cmp	DWORD PTR [ecx+76], 0
	jne	SHORT $LN11@Mod_FindNa
	mov	edx, 1
	imul	eax, edx, 0
	mov	ecx, DWORD PTR _mod$[ebp]
	movsx	edx, BYTE PTR [ecx+eax]
	cmp	edx, 42					; 0000002aH
	jne	SHORT $LN9@Mod_FindNa
$LN11@Mod_FindNa:

; 226  : 				mod->needload = NL_PRESENT;

	mov	eax, DWORD PTR _mod$[ebp]
	mov	DWORD PTR [eax+64], 2
	jmp	SHORT $LN10@Mod_FindNa
$LN9@Mod_FindNa:

; 227  : 			else mod->needload = NL_NEEDS_LOADED;

	mov	ecx, DWORD PTR _mod$[ebp]
	mov	DWORD PTR [ecx+64], 1
$LN10@Mod_FindNa:

; 228  : 
; 229  : 			return mod;

	mov	eax, DWORD PTR _mod$[ebp]
	jmp	$LN1@Mod_FindNa
$LN8@Mod_FindNa:

; 230  : 		}
; 231  : 	}

	jmp	SHORT $LN2@Mod_FindNa
$LN3@Mod_FindNa:

; 232  : 
; 233  : 	// find a free model slot spot
; 234  : 	for( i = 0, mod = mod_known; i < mod_numknown; i++, mod++ )

	mov	DWORD PTR _i$[ebp], 0
	mov	DWORD PTR _mod$[ebp], OFFSET _mod_known
	jmp	SHORT $LN7@Mod_FindNa
$LN5@Mod_FindNa:
	mov	edx, DWORD PTR _i$[ebp]
	add	edx, 1
	mov	DWORD PTR _i$[ebp], edx
	mov	eax, DWORD PTR _mod$[ebp]
	add	eax, 392				; 00000188H
	mov	DWORD PTR _mod$[ebp], eax
$LN7@Mod_FindNa:
	mov	ecx, DWORD PTR _i$[ebp]
	cmp	ecx, DWORD PTR _mod_numknown
	jge	SHORT $LN6@Mod_FindNa

; 235  : 		if( !mod->name[0] ) break; // this is a valid spot

	mov	edx, 1
	imul	eax, edx, 0
	mov	ecx, DWORD PTR _mod$[ebp]
	movsx	edx, BYTE PTR [ecx+eax]
	test	edx, edx
	jne	SHORT $LN12@Mod_FindNa
	jmp	SHORT $LN6@Mod_FindNa
$LN12@Mod_FindNa:
	jmp	SHORT $LN5@Mod_FindNa
$LN6@Mod_FindNa:

; 236  : 
; 237  : 	if( i == mod_numknown )

	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR _mod_numknown
	jne	SHORT $LN13@Mod_FindNa

; 238  : 	{
; 239  : 		if( mod_numknown == MAX_MODELS )

	cmp	DWORD PTR _mod_numknown, 1024		; 00000400H
	jne	SHORT $LN14@Mod_FindNa

; 240  : 			Host_Error( "MAX_MODELS limit exceeded (%d)\n", MAX_MODELS );

	push	1024					; 00000400H
	push	OFFSET $SG145197
	call	_Host_Error
	add	esp, 8
$LN14@Mod_FindNa:

; 241  : 		mod_numknown++;

	mov	ecx, DWORD PTR _mod_numknown
	add	ecx, 1
	mov	DWORD PTR _mod_numknown, ecx
$LN13@Mod_FindNa:

; 242  : 	}
; 243  : 
; 244  : 	// copy name, so model loader can find model file
; 245  : 	Q_strncpy( mod->name, modname, sizeof( mod->name ));

	push	64					; 00000040H
	lea	edx, DWORD PTR _modname$[ebp]
	push	edx
	mov	eax, DWORD PTR _mod$[ebp]
	push	eax
	call	_Q_strncpy
	add	esp, 12					; 0000000cH

; 246  : 	if( trackCRC ) mod_crcinfo[i].flags = FCRC_SHOULD_CHECKSUM;

	cmp	DWORD PTR _trackCRC$[ebp], 0
	je	SHORT $LN15@Mod_FindNa
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR _mod_crcinfo[ecx*8], 1
	jmp	SHORT $LN16@Mod_FindNa
$LN15@Mod_FindNa:

; 247  : 	else mod_crcinfo[i].flags = 0;

	mov	edx, DWORD PTR _i$[ebp]
	mov	DWORD PTR _mod_crcinfo[edx*8], 0
$LN16@Mod_FindNa:

; 248  : 	mod->needload = NL_NEEDS_LOADED;

	mov	eax, DWORD PTR _mod$[ebp]
	mov	DWORD PTR [eax+64], 1

; 249  : 	mod_crcinfo[i].initialCRC = 0;

	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR _mod_crcinfo[ecx*8+4], 0

; 250  : 
; 251  : 	return mod;

	mov	eax, DWORD PTR _mod$[ebp]
$LN1@Mod_FindNa:

; 252  : }

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_Mod_FindName ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\documents\github\xashtasks\xash_build4529_src\engine\common\model.c
_TEXT	SEGMENT
_mod$ = 8						; size = 4
_Mod_StudioExtradata PROC

; 567  : {

	push	ebp
	mov	ebp, esp

; 568  : 	if( mod && mod->type == mod_studio )

	cmp	DWORD PTR _mod$[ebp], 0
	je	SHORT $LN2@Mod_Studio
	mov	eax, DWORD PTR _mod$[ebp]
	cmp	DWORD PTR [eax+68], 3
	jne	SHORT $LN2@Mod_Studio

; 569  : 		return mod->cache.data;

	mov	ecx, DWORD PTR _mod$[ebp]
	mov	eax, DWORD PTR [ecx+388]
	jmp	SHORT $LN1@Mod_Studio
$LN2@Mod_Studio:

; 570  : 	return NULL;

	xor	eax, eax
$LN1@Mod_Studio:

; 571  : }

	pop	ebp
	ret	0
_Mod_StudioExtradata ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\documents\github\xashtasks\xash_build4529_src\engine\common\model.c
_TEXT	SEGMENT
_mod$ = 8						; size = 4
_Mod_AliasExtradata PROC

; 554  : {

	push	ebp
	mov	ebp, esp

; 555  : 	if( mod && mod->type == mod_alias )

	cmp	DWORD PTR _mod$[ebp], 0
	je	SHORT $LN2@Mod_AliasE
	mov	eax, DWORD PTR _mod$[ebp]
	cmp	DWORD PTR [eax+68], 2
	jne	SHORT $LN2@Mod_AliasE

; 556  : 		return mod->cache.data;

	mov	ecx, DWORD PTR _mod$[ebp]
	mov	eax, DWORD PTR [ecx+388]
	jmp	SHORT $LN1@Mod_AliasE
$LN2@Mod_AliasE:

; 557  : 	return NULL;

	xor	eax, eax
$LN1@Mod_AliasE:

; 558  : }

	pop	ebp
	ret	0
_Mod_AliasExtradata ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\documents\github\xashtasks\xash_build4529_src\engine\common\model.c
_TEXT	SEGMENT
tv69 = -80						; size = 4
_buf$ = -76						; size = 4
_size$ = -72						; size = 4
_modname$ = -68						; size = 64
__$ArrayPad$ = -4					; size = 4
_filename$ = 8						; size = 4
_cu$ = 12						; size = 4
_Mod_LoadCacheFile PROC

; 527  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 80					; 00000050H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 528  : 	char	modname[MAX_QPATH];
; 529  : 	size_t	size;
; 530  : 	byte	*buf;
; 531  : 
; 532  : 	Assert( cu != NULL );

	cmp	DWORD PTR _cu$[ebp], 0
	je	SHORT $LN6@Mod_LoadCa
	mov	DWORD PTR tv69[ebp], 1
	jmp	SHORT $LN7@Mod_LoadCa
$LN6@Mod_LoadCa:
	mov	DWORD PTR tv69[ebp], 0
$LN7@Mod_LoadCa:
	push	0
	push	532					; 00000214H
	push	OFFSET $SG145329
	push	OFFSET $SG145330
	mov	eax, DWORD PTR tv69[ebp]
	push	eax
	call	_DBG_AssertFunction
	add	esp, 20					; 00000014H

; 533  : 
; 534  : 	if( !COM_CheckString( filename ))

	mov	ecx, DWORD PTR _filename$[ebp]
	push	ecx
	call	_COM_CheckString
	add	esp, 4
	test	eax, eax
	jne	SHORT $LN2@Mod_LoadCa

; 535  : 		return;

	jmp	$LN1@Mod_LoadCa
$LN2@Mod_LoadCa:

; 536  : 
; 537  : 	Q_strncpy( modname, filename, sizeof( modname ));

	push	64					; 00000040H
	mov	edx, DWORD PTR _filename$[ebp]
	push	edx
	lea	eax, DWORD PTR _modname$[ebp]
	push	eax
	call	_Q_strncpy
	add	esp, 12					; 0000000cH

; 538  : 	COM_FixSlashes( modname );

	lea	ecx, DWORD PTR _modname$[ebp]
	push	ecx
	call	_COM_FixSlashes
	add	esp, 4

; 539  : 
; 540  : 	buf = FS_LoadFile( modname, &size, false );

	push	0
	lea	edx, DWORD PTR _size$[ebp]
	push	edx
	lea	eax, DWORD PTR _modname$[ebp]
	push	eax
	call	_FS_LoadFile
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _buf$[ebp], eax

; 541  : 	if( !buf || !size ) Host_Error( "LoadCacheFile: ^1can't load %s^7\n", filename );

	cmp	DWORD PTR _buf$[ebp], 0
	je	SHORT $LN4@Mod_LoadCa
	cmp	DWORD PTR _size$[ebp], 0
	jne	SHORT $LN3@Mod_LoadCa
$LN4@Mod_LoadCa:
	mov	ecx, DWORD PTR _filename$[ebp]
	push	ecx
	push	OFFSET $SG145334
	call	_Host_Error
	add	esp, 8
$LN3@Mod_LoadCa:

; 542  : 	cu->data = Mem_Malloc( com_studiocache, size );

	push	542					; 0000021eH
	push	OFFSET $SG145335
	push	0
	mov	edx, DWORD PTR _size$[ebp]
	push	edx
	mov	eax, DWORD PTR _com_studiocache
	push	eax
	call	__Mem_Alloc
	add	esp, 20					; 00000014H
	mov	ecx, DWORD PTR _cu$[ebp]
	mov	DWORD PTR [ecx], eax

; 543  : 	memcpy( cu->data, buf, size );

	mov	edx, DWORD PTR _size$[ebp]
	push	edx
	mov	eax, DWORD PTR _buf$[ebp]
	push	eax
	mov	ecx, DWORD PTR _cu$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	_memcpy
	add	esp, 12					; 0000000cH

; 544  : 	Mem_Free( buf );

	push	544					; 00000220H
	push	OFFSET $SG145336
	mov	eax, DWORD PTR _buf$[ebp]
	push	eax
	call	__Mem_Free
	add	esp, 12					; 0000000cH
$LN1@Mod_LoadCa:

; 545  : }

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_Mod_LoadCacheFile ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\documents\github\xashtasks\xash_build4529_src\engine\common\model.c
_TEXT	SEGMENT
_c$ = 8							; size = 4
_Mod_CacheCheck PROC

; 516  : {

	push	ebp
	mov	ebp, esp

; 517  : 	return Cache_Check( com_studiocache, c );

	mov	eax, DWORD PTR _c$[ebp]
	push	eax
	mov	ecx, DWORD PTR _com_studiocache
	push	ecx
	call	_Cache_Check
	add	esp, 8

; 518  : }

	pop	ebp
	ret	0
_Mod_CacheCheck ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\documents\github\xashtasks\xash_build4529_src\engine\common\model.c
_TEXT	SEGMENT
_cu$ = -4						; size = 4
_number$ = 8						; size = 4
_size$ = 12						; size = 4
_Mod_Calloc PROC

; 499  : {

	push	ebp
	mov	ebp, esp
	push	ecx

; 500  : 	cache_user_t	*cu;
; 501  : 
; 502  : 	if( number <= 0 || size <= 0 ) return NULL;

	cmp	DWORD PTR _number$[ebp], 0
	jle	SHORT $LN3@Mod_Calloc
	cmp	DWORD PTR _size$[ebp], 0
	ja	SHORT $LN2@Mod_Calloc
$LN3@Mod_Calloc:
	xor	eax, eax
	jmp	SHORT $LN1@Mod_Calloc
$LN2@Mod_Calloc:

; 503  : 	cu = (cache_user_t *)Mem_Calloc( com_studiocache, sizeof( cache_user_t ) + number * size );

	push	503					; 000001f7H
	push	OFFSET $SG145315
	push	1
	mov	eax, DWORD PTR _number$[ebp]
	imul	eax, DWORD PTR _size$[ebp]
	add	eax, 4
	push	eax
	mov	ecx, DWORD PTR _com_studiocache
	push	ecx
	call	__Mem_Alloc
	add	esp, 20					; 00000014H
	mov	DWORD PTR _cu$[ebp], eax

; 504  : 	cu->data = (void *)cu; // make sure what cu->data is not NULL

	mov	edx, DWORD PTR _cu$[ebp]
	mov	eax, DWORD PTR _cu$[ebp]
	mov	DWORD PTR [edx], eax

; 505  : 
; 506  : 	return cu;

	mov	eax, DWORD PTR _cu$[ebp]
$LN1@Mod_Calloc:

; 507  : }

	mov	esp, ebp
	pop	ebp
	ret	0
_Mod_Calloc ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\documents\github\xashtasks\xash_build4529_src\engine\common\model.c
_TEXT	SEGMENT
_pworld$ = -4						; size = 4
_name$ = 8						; size = 4
_preload$ = 12						; size = 4
_Mod_LoadWorld PROC

; 444  : {

	push	ebp
	mov	ebp, esp
	push	ecx

; 445  : 	model_t	*pworld;
; 446  : 
; 447  : 	// already loaded?
; 448  : 	if( !Q_stricmp( mod_known->name, name ))

	push	99999					; 0001869fH
	mov	eax, DWORD PTR _name$[ebp]
	push	eax
	push	OFFSET _mod_known
	call	_Q_strnicmp
	add	esp, 12					; 0000000cH
	test	eax, eax
	jne	SHORT $LN2@Mod_LoadWo

; 449  : 		return mod_known;

	mov	eax, OFFSET _mod_known
	jmp	SHORT $LN1@Mod_LoadWo
$LN2@Mod_LoadWo:

; 450  : 
; 451  : 	// free sequence files on studiomodels
; 452  : 	Mod_PurgeStudioCache();

	call	_Mod_PurgeStudioCache

; 453  : 
; 454  : 	// load the newmap
; 455  : 	world.loading = true;

	mov	DWORD PTR _world, 1

; 456  : 	pworld = Mod_FindName( name, false );

	push	0
	mov	ecx, DWORD PTR _name$[ebp]
	push	ecx
	call	_Mod_FindName
	add	esp, 8
	mov	DWORD PTR _pworld$[ebp], eax

; 457  : 	if( preload ) Mod_LoadModel( pworld, true );

	cmp	DWORD PTR _preload$[ebp], 0
	je	SHORT $LN3@Mod_LoadWo
	push	1
	mov	edx, DWORD PTR _pworld$[ebp]
	push	edx
	call	_Mod_LoadModel
	add	esp, 8
$LN3@Mod_LoadWo:

; 458  : 	world.loading = false;

	mov	DWORD PTR _world, 0

; 459  : 
; 460  : 	ASSERT( pworld == mod_known );

	cmp	DWORD PTR _pworld$[ebp], OFFSET _mod_known
	je	SHORT $LN4@Mod_LoadWo
	push	460					; 000001ccH
	push	OFFSET $SG145293
	push	OFFSET $SG145294
	call	_Sys_Error
	add	esp, 12					; 0000000cH
$LN4@Mod_LoadWo:

; 461  : 
; 462  : 	return pworld;

	mov	eax, DWORD PTR _pworld$[ebp]
$LN1@Mod_LoadWo:

; 463  : }

	mov	esp, ebp
	pop	ebp
	ret	0
_Mod_LoadWorld ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\documents\github\xashtasks\xash_build4529_src\engine\common\model.c
_TEXT	SEGMENT
_i$ = -4						; size = 4
_Mod_ClearUserData PROC

; 180  : {

	push	ebp
	mov	ebp, esp
	push	ecx

; 181  : 	int	i;
; 182  : 
; 183  : 	for( i = 0; i < mod_numknown; i++ )

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN4@Mod_ClearU
$LN2@Mod_ClearU:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN4@Mod_ClearU:
	mov	ecx, DWORD PTR _i$[ebp]
	cmp	ecx, DWORD PTR _mod_numknown
	jge	SHORT $LN1@Mod_ClearU

; 184  : 		Mod_FreeUserData( &mod_known[i] );

	imul	edx, DWORD PTR _i$[ebp], 392
	add	edx, OFFSET _mod_known
	push	edx
	call	_Mod_FreeUserData
	add	esp, 4
	jmp	SHORT $LN2@Mod_ClearU
$LN1@Mod_ClearU:

; 185  : }

	mov	esp, ebp
	pop	ebp
	ret	0
_Mod_ClearUserData ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\documents\github\xashtasks\xash_build4529_src\engine\common\model.c
_TEXT	SEGMENT
_Mod_Shutdown PROC

; 193  : {

	push	ebp
	mov	ebp, esp

; 194  : 	Mod_FreeAll();

	call	_Mod_FreeAll

; 195  : 	Mem_FreePool( &com_studiocache );

	push	195					; 000000c3H
	push	OFFSET $SG145175
	push	OFFSET _com_studiocache
	call	__Mem_FreePool
	add	esp, 12					; 0000000cH

; 196  : }

	pop	ebp
	ret	0
_Mod_Shutdown ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\documents\github\xashtasks\xash_build4529_src\engine\common\model.c
_TEXT	SEGMENT
_i$ = -4						; size = 4
_Mod_FreeAll PROC

; 165  : {

	push	ebp
	mov	ebp, esp
	push	ecx

; 166  : 	int	i;
; 167  : 
; 168  : 	Mod_ReleaseHullPolygons();

	call	_Mod_ReleaseHullPolygons

; 169  : 	for( i = 0; i < mod_numknown; i++ )

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN4@Mod_FreeAl
$LN2@Mod_FreeAl:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN4@Mod_FreeAl:
	mov	ecx, DWORD PTR _i$[ebp]
	cmp	ecx, DWORD PTR _mod_numknown
	jge	SHORT $LN3@Mod_FreeAl

; 170  : 		Mod_FreeModel( &mod_known[i] );

	imul	edx, DWORD PTR _i$[ebp], 392
	add	edx, OFFSET _mod_known
	push	edx
	call	_Mod_FreeModel
	add	esp, 4
	jmp	SHORT $LN2@Mod_FreeAl
$LN3@Mod_FreeAl:

; 171  : 	mod_numknown = 0;

	mov	DWORD PTR _mod_numknown, 0

; 172  : }

	mov	esp, ebp
	pop	ebp
	ret	0
_Mod_FreeAll ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\documents\github\xashtasks\xash_build4529_src\engine\common\model.c
_TEXT	SEGMENT
_Mod_Init PROC

; 146  : {

	push	ebp
	mov	ebp, esp

; 147  : 	com_studiocache = Mem_AllocPool( "Studio Cache" );

	push	147					; 00000093H
	push	OFFSET $SG145146
	push	OFFSET $SG145147
	call	__Mem_AllocPool
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _com_studiocache, eax

; 148  : 	mod_studiocache = Cvar_Get( "r_studiocache", "1", FCVAR_ARCHIVE, "enables studio cache for speedup tracing hitboxes" );

	push	OFFSET $SG145148
	push	1
	push	OFFSET $SG145149
	push	OFFSET $SG145150
	call	_Cvar_Get
	add	esp, 16					; 00000010H
	mov	DWORD PTR _mod_studiocache, eax

; 149  : 	r_wadtextures = Cvar_Get( "r_wadtextures", "0", 0, "completely ignore textures in the bsp-file if enabled" );

	push	OFFSET $SG145151
	push	0
	push	OFFSET $SG145152
	push	OFFSET $SG145153
	call	_Cvar_Get
	add	esp, 16					; 00000010H
	mov	DWORD PTR _r_wadtextures, eax

; 150  : 	r_showhull = Cvar_Get( "r_showhull", "0", 0, "draw collision hulls 1-3" );

	push	OFFSET $SG145154
	push	0
	push	OFFSET $SG145155
	push	OFFSET $SG145156
	call	_Cvar_Get
	add	esp, 16					; 00000010H
	mov	DWORD PTR _r_showhull, eax

; 151  : 
; 152  : 	Cmd_AddCommand( "mapstats", Mod_PrintWorldStats_f, "show stats for currently loaded map" );

	push	OFFSET $SG145157
	push	OFFSET _Mod_PrintWorldStats_f
	push	OFFSET $SG145158
	call	_Cmd_AddCommand
	add	esp, 12					; 0000000cH

; 153  : 	Cmd_AddCommand( "modellist", Mod_Modellist_f, "display loaded models list" );

	push	OFFSET $SG145159
	push	OFFSET _Mod_Modellist_f
	push	OFFSET $SG145160
	call	_Cmd_AddCommand
	add	esp, 12					; 0000000cH

; 154  : 
; 155  : 	Mod_ResetStudioAPI ();

	call	_Mod_ResetStudioAPI

; 156  : 	Mod_InitStudioHull ();

	call	_Mod_InitStudioHull

; 157  : }

	pop	ebp
	ret	0
_Mod_Init ENDP
_TEXT	ENDS
END
