; Listing generated by Microsoft (R) Optimizing Compiler Version 19.16.27045.0 

	TITLE	C:\Users\USER\Documents\GitHub\XashTasks\xash_build4529_src\engine\common\host_state.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	_COM_InitHostState
PUBLIC	_COM_NewGame
PUBLIC	_COM_LoadLevel
PUBLIC	_COM_LoadGame
PUBLIC	_COM_ChangeLevel
PUBLIC	_COM_Frame
PUBLIC	_Host_ShutdownGame
PUBLIC	_Host_RunFrame
EXTRN	_memset:PROC
EXTRN	_Sys_Error:PROC
EXTRN	_Q_strncpy:PROC
EXTRN	_COM_CheckString:PROC
EXTRN	_Host_Frame:PROC
EXTRN	_UI_CreditsActive:PROC
EXTRN	_SV_ShutdownGame:PROC
EXTRN	_SV_ExecLoadLevel:PROC
EXTRN	_SV_ExecLoadGame:PROC
EXTRN	_SV_ExecChangeLevel:PROC
EXTRN	_SCR_BeginLoadingPlaque:PROC
EXTRN	__setjmp3:PROC
EXTRN	_host:BYTE
EXTRN	__fltused:DWORD
_DATA	SEGMENT
$SG129763 DB	'c:\users\user\documents\github\xashtasks\xash_build4529_'
	DB	'src\engine\common\host_state.c', 00H
	ORG $+1
$SG129764 DB	'assert failed at %s:%i', 0aH, 00H
$SG129829 DB	'state infinity loop!', 0aH, 00H
_DATA	ENDS
; Function compile flags: /Odtp
; File c:\users\user\documents\github\xashtasks\xash_build4529_src\engine\common\host_state.c
_TEXT	SEGMENT
tv65 = -4						; size = 4
_time$ = 8						; size = 4
_Host_RunFrame PROC

; 136  : {

	push	ebp
	mov	ebp, esp
	push	ecx

; 137  : 	// engine main frame
; 138  : 	Host_Frame( time );

	push	ecx
	movss	xmm0, DWORD PTR _time$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	_Host_Frame
	add	esp, 4

; 139  : 
; 140  : 	switch( GameState->nextstate )

	mov	eax, DWORD PTR _host+20
	mov	DWORD PTR tv65[ebp], eax
	cmp	DWORD PTR tv65[ebp], 4
	ja	SHORT $LN8@Host_RunFr
	mov	ecx, DWORD PTR tv65[ebp]
	jmp	DWORD PTR $LN10@Host_RunFr[ecx*4]
$LN4@Host_RunFr:

; 141  : 	{
; 142  : 	case STATE_RUNFRAME:
; 143  : 		break;

	jmp	SHORT $LN2@Host_RunFr
$LN5@Host_RunFr:

; 144  : 	case STATE_LOAD_GAME:
; 145  : 	case STATE_LOAD_LEVEL:
; 146  : 		SCR_BeginLoadingPlaque( GameState->backgroundMap );

	mov	edx, DWORD PTR _host+152
	push	edx
	call	_SCR_BeginLoadingPlaque
	add	esp, 4
$LN6@Host_RunFr:

; 147  : 		// intentionally fallthrough
; 148  : 	case STATE_GAME_SHUTDOWN:
; 149  : 		Host_SetState( STATE_GAME_SHUTDOWN, false );

	push	0
	push	4
	call	_Host_SetState
	add	esp, 8

; 150  : 		break;

	jmp	SHORT $LN2@Host_RunFr
$LN7@Host_RunFr:

; 151  : 	case STATE_CHANGELEVEL:
; 152  : 		SCR_BeginLoadingPlaque( GameState->backgroundMap );

	mov	eax, DWORD PTR _host+152
	push	eax
	call	_SCR_BeginLoadingPlaque
	add	esp, 4

; 153  : 		Host_SetState( GameState->nextstate, true );

	push	1
	mov	ecx, DWORD PTR _host+20
	push	ecx
	call	_Host_SetState
	add	esp, 8

; 154  : 		break;

	jmp	SHORT $LN2@Host_RunFr
$LN8@Host_RunFr:

; 155  : 	default:
; 156  : 		Host_SetState( STATE_RUNFRAME, true );

	push	1
	push	0
	call	_Host_SetState
	add	esp, 8
$LN2@Host_RunFr:

; 157  : 		break;
; 158  : 	}
; 159  : }

	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN10@Host_RunFr:
	DD	$LN4@Host_RunFr
	DD	$LN5@Host_RunFr
	DD	$LN5@Host_RunFr
	DD	$LN7@Host_RunFr
	DD	$LN6@Host_RunFr
_Host_RunFrame ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\documents\github\xashtasks\xash_build4529_src\engine\common\host_state.c
_TEXT	SEGMENT
tv64 = -4						; size = 4
_Host_ShutdownGame PROC

; 120  : {

	push	ebp
	mov	ebp, esp
	push	ecx

; 121  : 	SV_ShutdownGame();

	call	_SV_ShutdownGame

; 122  : 
; 123  : 	switch( GameState->nextstate )

	mov	eax, DWORD PTR _host+20
	mov	DWORD PTR tv64[ebp], eax
	cmp	DWORD PTR tv64[ebp], 0
	jle	SHORT $LN5@Host_Shutd
	cmp	DWORD PTR tv64[ebp], 2
	jle	SHORT $LN4@Host_Shutd
	jmp	SHORT $LN5@Host_Shutd
$LN4@Host_Shutd:

; 124  : 	{
; 125  : 	case STATE_LOAD_GAME:
; 126  : 	case STATE_LOAD_LEVEL:
; 127  : 		Host_SetState( GameState->nextstate, true );

	push	1
	mov	ecx, DWORD PTR _host+20
	push	ecx
	call	_Host_SetState
	add	esp, 8

; 128  : 		break;

	jmp	SHORT $LN1@Host_Shutd
$LN5@Host_Shutd:

; 129  : 	default:
; 130  : 		Host_SetState( STATE_RUNFRAME, true );

	push	1
	push	0
	call	_Host_SetState
	add	esp, 8
$LN1@Host_Shutd:

; 131  : 		break;
; 132  : 	}
; 133  : }

	mov	esp, ebp
	pop	ebp
	ret	0
_Host_ShutdownGame ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\documents\github\xashtasks\xash_build4529_src\engine\common\host_state.c
_TEXT	SEGMENT
_nextState$ = 8						; size = 4
_Host_SetNextState PROC

; 39   : {

	push	ebp
	mov	ebp, esp

; 40   : 	ASSERT( GameState->curstate == STATE_RUNFRAME );

	cmp	DWORD PTR _host+16, 0
	je	SHORT $LN2@Host_SetNe
	push	40					; 00000028H
	push	OFFSET $SG129763
	push	OFFSET $SG129764
	call	_Sys_Error
	add	esp, 12					; 0000000cH
$LN2@Host_SetNe:

; 41   : 	GameState->nextstate = nextState;

	mov	eax, DWORD PTR _nextState$[ebp]
	mov	DWORD PTR _host+20, eax

; 42   : }

	pop	ebp
	ret	0
_Host_SetNextState ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\documents\github\xashtasks\xash_build4529_src\engine\common\host_state.c
_TEXT	SEGMENT
_newState$ = 8						; size = 4
_clearNext$ = 12					; size = 4
_Host_SetState PROC

; 24   : {

	push	ebp
	mov	ebp, esp

; 25   : 	if( clearNext )

	cmp	DWORD PTR _clearNext$[ebp], 0
	je	SHORT $LN2@Host_SetSt

; 26   : 		GameState->nextstate = newState;

	mov	eax, DWORD PTR _newState$[ebp]
	mov	DWORD PTR _host+20, eax
$LN2@Host_SetSt:

; 27   : 	GameState->curstate = newState;

	mov	ecx, DWORD PTR _newState$[ebp]
	mov	DWORD PTR _host+16, ecx

; 28   : 
; 29   : 	if( clearNext && newState == STATE_RUNFRAME )

	cmp	DWORD PTR _clearNext$[ebp], 0
	je	SHORT $LN1@Host_SetSt
	cmp	DWORD PTR _newState$[ebp], 0
	jne	SHORT $LN1@Host_SetSt

; 30   : 	{
; 31   : 		// states finished here
; 32   : 		GameState->backgroundMap = false;

	mov	DWORD PTR _host+152, 0

; 33   : 		GameState->loadGame = false;

	mov	DWORD PTR _host+156, 0

; 34   : 		GameState->newGame = false;

	mov	DWORD PTR _host+160, 0
$LN1@Host_SetSt:

; 35   : 	}
; 36   : }

	pop	ebp
	ret	0
_Host_SetState ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\documents\github\xashtasks\xash_build4529_src\engine\common\host_state.c
_TEXT	SEGMENT
_oldState$1 = -12					; size = 4
tv68 = -8						; size = 4
_loopCount$ = -4					; size = 4
_time$ = 8						; size = 4
_COM_Frame PROC

; 162  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH

; 163  : 	int	loopCount = 0;

	mov	DWORD PTR _loopCount$[ebp], 0

; 164  : 
; 165  : 	if( setjmp( host.abortframe ))

	push	0
	push	OFFSET _host+168
	call	__setjmp3
	add	esp, 8
	test	eax, eax
	je	SHORT $LN6@COM_Frame

; 166  : 		return;

	jmp	$LN3@COM_Frame
$LN6@COM_Frame:

; 167  : 
; 168  : 	while( 1 )

	mov	eax, 1
	test	eax, eax
	je	$LN3@COM_Frame

; 169  : 	{
; 170  : 		int	oldState = GameState->curstate;

	mov	ecx, DWORD PTR _host+16
	mov	DWORD PTR _oldState$1[ebp], ecx

; 171  : 
; 172  : 		// execute the current state (and transition to the next state if not in STATE_RUNFRAME)
; 173  : 		switch( GameState->curstate )

	mov	edx, DWORD PTR _host+16
	mov	DWORD PTR tv68[ebp], edx
	cmp	DWORD PTR tv68[ebp], 4
	ja	SHORT $LN4@COM_Frame
	mov	eax, DWORD PTR tv68[ebp]
	jmp	DWORD PTR $LN16@COM_Frame[eax*4]
$LN7@COM_Frame:

; 174  : 		{
; 175  : 		case STATE_LOAD_LEVEL:
; 176  : 			SV_ExecLoadLevel();

	call	_SV_ExecLoadLevel

; 177  : 			Host_SetState( STATE_RUNFRAME, true );

	push	1
	push	0
	call	_Host_SetState
	add	esp, 8

; 178  : 			break;

	jmp	SHORT $LN4@COM_Frame
$LN8@COM_Frame:

; 179  : 		case STATE_LOAD_GAME:
; 180  : 			SV_ExecLoadGame();

	call	_SV_ExecLoadGame

; 181  : 			Host_SetState( STATE_RUNFRAME, true );

	push	1
	push	0
	call	_Host_SetState
	add	esp, 8

; 182  : 			break;

	jmp	SHORT $LN4@COM_Frame
$LN9@COM_Frame:

; 183  : 		case STATE_CHANGELEVEL:
; 184  : 			SV_ExecChangeLevel();

	call	_SV_ExecChangeLevel

; 185  : 			Host_SetState( STATE_RUNFRAME, true );

	push	1
	push	0
	call	_Host_SetState
	add	esp, 8

; 186  : 			break;

	jmp	SHORT $LN4@COM_Frame
$LN10@COM_Frame:

; 187  : 		case STATE_RUNFRAME:
; 188  : 			Host_RunFrame( time );

	push	ecx
	movss	xmm0, DWORD PTR _time$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	_Host_RunFrame
	add	esp, 4

; 189  : 			break;

	jmp	SHORT $LN4@COM_Frame
$LN11@COM_Frame:

; 190  : 		case STATE_GAME_SHUTDOWN:
; 191  : 			Host_ShutdownGame();

	call	_Host_ShutdownGame
$LN4@COM_Frame:

; 192  : 			break;
; 193  : 		}
; 194  : 
; 195  : 		if( oldState == STATE_RUNFRAME )

	cmp	DWORD PTR _oldState$1[ebp], 0
	jne	SHORT $LN12@COM_Frame

; 196  : 			break;

	jmp	SHORT $LN3@COM_Frame
$LN12@COM_Frame:

; 197  : 
; 198  : 		if(( GameState->curstate == oldState ) || ( ++loopCount > 8 ))

	mov	ecx, DWORD PTR _host+16
	cmp	ecx, DWORD PTR _oldState$1[ebp]
	je	SHORT $LN14@COM_Frame
	mov	edx, DWORD PTR _loopCount$[ebp]
	add	edx, 1
	mov	DWORD PTR _loopCount$[ebp], edx
	cmp	DWORD PTR _loopCount$[ebp], 8
	jle	SHORT $LN13@COM_Frame
$LN14@COM_Frame:

; 199  : 			Sys_Error( "state infinity loop!\n" );

	push	OFFSET $SG129829
	call	_Sys_Error
	add	esp, 4
$LN13@COM_Frame:

; 200  : 	}

	jmp	$LN6@COM_Frame
$LN3@COM_Frame:

; 201  : }

	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN16@COM_Frame:
	DD	$LN10@COM_Frame
	DD	$LN7@COM_Frame
	DD	$LN8@COM_Frame
	DD	$LN9@COM_Frame
	DD	$LN11@COM_Frame
_COM_Frame ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\documents\github\xashtasks\xash_build4529_src\engine\common\host_state.c
_TEXT	SEGMENT
_pNewLevel$ = 8						; size = 4
_pLandmarkName$ = 12					; size = 4
_background$ = 16					; size = 4
_COM_ChangeLevel PROC

; 94   : {

	push	ebp
	mov	ebp, esp

; 95   : 	if( GameState->nextstate != STATE_RUNFRAME )

	cmp	DWORD PTR _host+20, 0
	je	SHORT $LN2@COM_Change

; 96   : 		return;

	jmp	$LN1@COM_Change
$LN2@COM_Change:

; 97   : 
; 98   : 	if( UI_CreditsActive( ))

	call	_UI_CreditsActive
	test	eax, eax
	je	SHORT $LN3@COM_Change

; 99   : 		return;

	jmp	SHORT $LN1@COM_Change
$LN3@COM_Change:

; 100  : 
; 101  : 	Q_strncpy( GameState->levelName, pNewLevel, sizeof( GameState->levelName ));

	push	64					; 00000040H
	mov	eax, DWORD PTR _pNewLevel$[ebp]
	push	eax
	push	OFFSET _host+24
	call	_Q_strncpy
	add	esp, 12					; 0000000cH

; 102  : 	GameState->backgroundMap = background;

	mov	ecx, DWORD PTR _background$[ebp]
	mov	DWORD PTR _host+152, ecx

; 103  : 
; 104  : 	if( COM_CheckString( pLandmarkName ))

	mov	edx, DWORD PTR _pLandmarkName$[ebp]
	push	edx
	call	_COM_CheckString
	add	esp, 4
	test	eax, eax
	je	SHORT $LN4@COM_Change

; 105  : 	{
; 106  : 		Q_strncpy( GameState->landmarkName, pLandmarkName, sizeof( GameState->landmarkName ));

	push	64					; 00000040H
	mov	eax, DWORD PTR _pLandmarkName$[ebp]
	push	eax
	push	OFFSET _host+88
	call	_Q_strncpy
	add	esp, 12					; 0000000cH

; 107  : 		GameState->loadGame = true;

	mov	DWORD PTR _host+156, 1

; 108  : 	}

	jmp	SHORT $LN5@COM_Change
$LN4@COM_Change:

; 109  : 	else
; 110  : 	{
; 111  : 		GameState->landmarkName[0] = 0;

	mov	ecx, 1
	imul	edx, ecx, 0
	mov	BYTE PTR _host[edx+88], 0

; 112  : 		GameState->loadGame = false;

	mov	DWORD PTR _host+156, 0
$LN5@COM_Change:

; 113  : 	}
; 114  : 
; 115  : 	Host_SetNextState( STATE_CHANGELEVEL );

	push	3
	call	_Host_SetNextState
	add	esp, 4

; 116  : 	GameState->newGame = false;

	mov	DWORD PTR _host+160, 0
$LN1@COM_Change:

; 117  : }

	pop	ebp
	ret	0
_COM_ChangeLevel ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\documents\github\xashtasks\xash_build4529_src\engine\common\host_state.c
_TEXT	SEGMENT
_pMapName$ = 8						; size = 4
_COM_LoadGame PROC

; 79   : {

	push	ebp
	mov	ebp, esp

; 80   : 	if( GameState->nextstate != STATE_RUNFRAME )

	cmp	DWORD PTR _host+20, 0
	je	SHORT $LN2@COM_LoadGa

; 81   : 		return;

	jmp	SHORT $LN1@COM_LoadGa
$LN2@COM_LoadGa:

; 82   : 
; 83   : 	if( UI_CreditsActive( ))

	call	_UI_CreditsActive
	test	eax, eax
	je	SHORT $LN3@COM_LoadGa

; 84   : 		return;

	jmp	SHORT $LN1@COM_LoadGa
$LN3@COM_LoadGa:

; 85   : 
; 86   : 	Q_strncpy( GameState->levelName, pMapName, sizeof( GameState->levelName ));

	push	64					; 00000040H
	mov	eax, DWORD PTR _pMapName$[ebp]
	push	eax
	push	OFFSET _host+24
	call	_Q_strncpy
	add	esp, 12					; 0000000cH

; 87   : 	Host_SetNextState( STATE_LOAD_GAME );

	push	2
	call	_Host_SetNextState
	add	esp, 4

; 88   : 	GameState->backgroundMap = false;

	mov	DWORD PTR _host+152, 0

; 89   : 	GameState->newGame = false;

	mov	DWORD PTR _host+160, 0

; 90   : 	GameState->loadGame = true;

	mov	DWORD PTR _host+156, 1
$LN1@COM_LoadGa:

; 91   : }

	pop	ebp
	ret	0
_COM_LoadGame ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\documents\github\xashtasks\xash_build4529_src\engine\common\host_state.c
_TEXT	SEGMENT
_pMapName$ = 8						; size = 4
_background$ = 12					; size = 4
_COM_LoadLevel PROC

; 62   : {

	push	ebp
	mov	ebp, esp

; 63   : 	if( GameState->nextstate != STATE_RUNFRAME )

	cmp	DWORD PTR _host+20, 0
	je	SHORT $LN2@COM_LoadLe

; 64   : 		return;

	jmp	SHORT $LN1@COM_LoadLe
$LN2@COM_LoadLe:

; 65   : 
; 66   : 	if( UI_CreditsActive( ))

	call	_UI_CreditsActive
	test	eax, eax
	je	SHORT $LN3@COM_LoadLe

; 67   : 		return;

	jmp	SHORT $LN1@COM_LoadLe
$LN3@COM_LoadLe:

; 68   : 
; 69   : 	Q_strncpy( GameState->levelName, pMapName, sizeof( GameState->levelName ));

	push	64					; 00000040H
	mov	eax, DWORD PTR _pMapName$[ebp]
	push	eax
	push	OFFSET _host+24
	call	_Q_strncpy
	add	esp, 12					; 0000000cH

; 70   : 	Host_SetNextState( STATE_LOAD_LEVEL );

	push	1
	call	_Host_SetNextState
	add	esp, 4

; 71   : 
; 72   : 	GameState->backgroundMap = background;

	mov	ecx, DWORD PTR _background$[ebp]
	mov	DWORD PTR _host+152, ecx

; 73   : 	GameState->landmarkName[0] = 0;

	mov	edx, 1
	imul	eax, edx, 0
	mov	BYTE PTR _host[eax+88], 0

; 74   : 	GameState->loadGame = false;

	mov	DWORD PTR _host+156, 0

; 75   : 	GameState->newGame = false;

	mov	DWORD PTR _host+160, 0
$LN1@COM_LoadLe:

; 76   : }

	pop	ebp
	ret	0
_COM_LoadLevel ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\documents\github\xashtasks\xash_build4529_src\engine\common\host_state.c
_TEXT	SEGMENT
_pMapName$ = 8						; size = 4
_COM_NewGame PROC

; 45   : {

	push	ebp
	mov	ebp, esp

; 46   : 	if( GameState->nextstate != STATE_RUNFRAME )

	cmp	DWORD PTR _host+20, 0
	je	SHORT $LN2@COM_NewGam

; 47   : 		return;

	jmp	SHORT $LN1@COM_NewGam
$LN2@COM_NewGam:

; 48   : 
; 49   : 	if( UI_CreditsActive( ))

	call	_UI_CreditsActive
	test	eax, eax
	je	SHORT $LN3@COM_NewGam

; 50   : 		return;

	jmp	SHORT $LN1@COM_NewGam
$LN3@COM_NewGam:

; 51   : 
; 52   : 	Q_strncpy( GameState->levelName, pMapName, sizeof( GameState->levelName ));

	push	64					; 00000040H
	mov	eax, DWORD PTR _pMapName$[ebp]
	push	eax
	push	OFFSET _host+24
	call	_Q_strncpy
	add	esp, 12					; 0000000cH

; 53   : 	Host_SetNextState( STATE_LOAD_LEVEL );

	push	1
	call	_Host_SetNextState
	add	esp, 4

; 54   : 
; 55   : 	GameState->backgroundMap = false;

	mov	DWORD PTR _host+152, 0

; 56   : 	GameState->landmarkName[0] = 0;

	mov	ecx, 1
	imul	edx, ecx, 0
	mov	BYTE PTR _host[edx+88], 0

; 57   : 	GameState->loadGame = false;

	mov	DWORD PTR _host+156, 0

; 58   : 	GameState->newGame = true;

	mov	DWORD PTR _host+160, 1
$LN1@COM_NewGam:

; 59   : }

	pop	ebp
	ret	0
_COM_NewGame ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\documents\github\xashtasks\xash_build4529_src\engine\common\host_state.c
_TEXT	SEGMENT
_COM_InitHostState PROC

; 19   : {

	push	ebp
	mov	ebp, esp

; 20   : 	memset( GameState, 0, sizeof( game_status_t ));

	push	148					; 00000094H
	push	0
	push	OFFSET _host+16
	call	_memset
	add	esp, 12					; 0000000cH

; 21   : }

	pop	ebp
	ret	0
_COM_InitHostState ENDP
_TEXT	ENDS
END
