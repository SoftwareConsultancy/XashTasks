; Listing generated by Microsoft (R) Optimizing Compiler Version 19.16.27045.0 

	TITLE	C:\Users\USER\Downloads\xash_build4529_src\engine\client\cl_view.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

_DATA	SEGMENT
COMM	_pglColor4d:DWORD
COMM	_pglColor4dv:DWORD
COMM	_pglColor4f:DWORD
COMM	_pglColor4fv:DWORD
COMM	_pglColor4i:DWORD
COMM	_pglColor4iv:DWORD
COMM	_pglColor4s:DWORD
COMM	_pglColor4sv:DWORD
COMM	_pglColor4ub:DWORD
COMM	_pglColor4ubv:DWORD
COMM	_pglColor4ui:DWORD
COMM	_pglColor4uiv:DWORD
COMM	_pglColor4us:DWORD
COMM	_pglColor4usv:DWORD
COMM	_pglColorMask:DWORD
COMM	_pglColorMaterial:DWORD
COMM	_pglColorPointer:DWORD
COMM	_pglCopyPixels:DWORD
COMM	_pglCopyTexImage1D:DWORD
COMM	_pglCopyTexImage2D:DWORD
COMM	_pglCopyTexSubImage1D:DWORD
COMM	_pglCopyTexSubImage2D:DWORD
COMM	_pglCullFace:DWORD
COMM	_pglDeleteLists:DWORD
COMM	_pglDeleteTextures:DWORD
COMM	_pglDepthFunc:DWORD
COMM	_pglDepthMask:DWORD
COMM	_pglDepthRange:DWORD
COMM	_pglDisable:DWORD
COMM	_pglDisableClientState:DWORD
COMM	_pglDrawArrays:DWORD
COMM	_pglDrawBuffer:DWORD
COMM	_pglDrawElements:DWORD
COMM	_pglDrawPixels:DWORD
COMM	_pglEdgeFlag:DWORD
COMM	_pglEdgeFlagPointer:DWORD
COMM	_pglEdgeFlagv:DWORD
COMM	_pglEnable:DWORD
COMM	_pglEnableClientState:DWORD
COMM	_pglEnd:DWORD
COMM	_pglEndList:DWORD
COMM	_pglEvalCoord1d:DWORD
COMM	_pglEvalCoord1dv:DWORD
COMM	_pglEvalCoord1f:DWORD
COMM	_pglEvalCoord1fv:DWORD
COMM	_pglEvalCoord2d:DWORD
COMM	_pglEvalCoord2dv:DWORD
COMM	_pglEvalCoord2f:DWORD
COMM	_pglEvalCoord2fv:DWORD
COMM	_pglEvalMesh1:DWORD
COMM	_pglEvalMesh2:DWORD
COMM	_pglEvalPoint1:DWORD
COMM	_pglEvalPoint2:DWORD
COMM	_pglFeedbackBuffer:DWORD
COMM	_pglFinish:DWORD
COMM	_pglFlush:DWORD
COMM	_pglFogf:DWORD
COMM	_pglFogfv:DWORD
COMM	_pglFogi:DWORD
COMM	_pglFogiv:DWORD
COMM	_pglFrontFace:DWORD
COMM	_pglFrustum:DWORD
COMM	_pglGenTextures:DWORD
COMM	_pglGetBooleanv:DWORD
COMM	_pglGetClipPlane:DWORD
COMM	_pglGetDoublev:DWORD
COMM	_pglGetFloatv:DWORD
COMM	_pglGetIntegerv:DWORD
COMM	_pglGetLightfv:DWORD
COMM	_pglGetLightiv:DWORD
COMM	_pglGetMapdv:DWORD
COMM	_pglGetMapfv:DWORD
COMM	_pglGetMapiv:DWORD
COMM	_pglGetMaterialfv:DWORD
COMM	_pglGetMaterialiv:DWORD
COMM	_pglGetPixelMapfv:DWORD
COMM	_pglGetPixelMapuiv:DWORD
COMM	_pglGetPixelMapusv:DWORD
COMM	_pglGetPointerv:DWORD
COMM	_pglGetPolygonStipple:DWORD
COMM	_pglGetTexEnvfv:DWORD
COMM	_pglGetTexEnviv:DWORD
COMM	_pglGetTexGendv:DWORD
COMM	_pglGetTexGenfv:DWORD
COMM	_pglGetTexGeniv:DWORD
COMM	_pglGetTexImage:DWORD
COMM	_pglGetTexLevelParameterfv:DWORD
COMM	_pglGetTexLevelParameteriv:DWORD
COMM	_pglGetTexParameterfv:DWORD
COMM	_pglGetTexParameteriv:DWORD
COMM	_pglHint:DWORD
COMM	_pglIndexMask:DWORD
COMM	_pglIndexPointer:DWORD
COMM	_pglIndexd:DWORD
COMM	_pglIndexdv:DWORD
COMM	_pglIndexf:DWORD
COMM	_pglIndexfv:DWORD
COMM	_pglIndexi:DWORD
COMM	_pglIndexiv:DWORD
COMM	_pglIndexs:DWORD
COMM	_pglIndexsv:DWORD
COMM	_pglIndexub:DWORD
COMM	_pglIndexubv:DWORD
COMM	_pglInitNames:DWORD
COMM	_pglInterleavedArrays:DWORD
COMM	_pglLightModelf:DWORD
COMM	_pglLightModelfv:DWORD
COMM	_pglLightModeli:DWORD
COMM	_pglLightModeliv:DWORD
COMM	_pglLightf:DWORD
COMM	_pglLightfv:DWORD
COMM	_pglLighti:DWORD
COMM	_pglLightiv:DWORD
COMM	_pglLineStipple:DWORD
COMM	_pglLineWidth:DWORD
COMM	_pglListBase:DWORD
COMM	_pglLoadIdentity:DWORD
COMM	_pglLoadMatrixd:DWORD
COMM	_pglLoadMatrixf:DWORD
COMM	_pglLoadName:DWORD
COMM	_pglLogicOp:DWORD
COMM	_pglMap1d:DWORD
COMM	_pglMap1f:DWORD
COMM	_pglMap2d:DWORD
COMM	_pglMap2f:DWORD
COMM	_pglMapGrid1d:DWORD
COMM	_pglMapGrid1f:DWORD
COMM	_pglMapGrid2d:DWORD
COMM	_pglMapGrid2f:DWORD
COMM	_pglMaterialf:DWORD
COMM	_pglMaterialfv:DWORD
COMM	_pglMateriali:DWORD
COMM	_pglMaterialiv:DWORD
COMM	_pglMatrixMode:DWORD
COMM	_pglMultMatrixd:DWORD
COMM	_pglMultMatrixf:DWORD
COMM	_pglNewList:DWORD
COMM	_pglNormal3b:DWORD
COMM	_pglNormal3bv:DWORD
COMM	_pglNormal3d:DWORD
COMM	_pglNormal3dv:DWORD
COMM	_pglNormal3f:DWORD
COMM	_pglNormal3fv:DWORD
COMM	_pglNormal3i:DWORD
COMM	_pglNormal3iv:DWORD
COMM	_pglNormal3s:DWORD
COMM	_pglNormal3sv:DWORD
COMM	_pglNormalPointer:DWORD
COMM	_pglOrtho:DWORD
COMM	_pglPassThrough:DWORD
COMM	_pglPixelMapfv:DWORD
COMM	_pglPixelMapuiv:DWORD
COMM	_pglPixelMapusv:DWORD
COMM	_pglPixelStoref:DWORD
COMM	_pglPixelStorei:DWORD
COMM	_pglPixelTransferf:DWORD
COMM	_pglPixelTransferi:DWORD
COMM	_pglPixelZoom:DWORD
COMM	_pglPointSize:DWORD
COMM	_pglPolygonMode:DWORD
COMM	_pglPolygonOffset:DWORD
COMM	_pglPolygonStipple:DWORD
COMM	_pglPopAttrib:DWORD
COMM	_pglPopClientAttrib:DWORD
COMM	_pglPopMatrix:DWORD
COMM	_pglPopName:DWORD
COMM	_pglPushAttrib:DWORD
COMM	_pglPushClientAttrib:DWORD
COMM	_pglPushMatrix:DWORD
COMM	_pglPushName:DWORD
COMM	_pglRasterPos2d:DWORD
COMM	_pglRasterPos2dv:DWORD
COMM	_pglRasterPos2f:DWORD
COMM	_pglRasterPos2fv:DWORD
COMM	_pglRasterPos2i:DWORD
COMM	_pglRasterPos2iv:DWORD
COMM	_pglRasterPos2s:DWORD
COMM	_pglRasterPos2sv:DWORD
COMM	_pglRasterPos3d:DWORD
COMM	_pglRasterPos3dv:DWORD
COMM	_pglRasterPos3f:DWORD
COMM	_pglRasterPos3fv:DWORD
COMM	_pglRasterPos3i:DWORD
COMM	_pglRasterPos3iv:DWORD
COMM	_pglRasterPos3s:DWORD
COMM	_pglRasterPos3sv:DWORD
COMM	_pglRasterPos4d:DWORD
COMM	_pglRasterPos4dv:DWORD
COMM	_pglRasterPos4f:DWORD
COMM	_pglRasterPos4fv:DWORD
COMM	_pglRasterPos4i:DWORD
COMM	_pglRasterPos4iv:DWORD
COMM	_pglRasterPos4s:DWORD
COMM	_pglRasterPos4sv:DWORD
COMM	_pglReadBuffer:DWORD
COMM	_pglReadPixels:DWORD
COMM	_pglRectd:DWORD
COMM	_pglRectdv:DWORD
COMM	_pglRectf:DWORD
COMM	_pglRectfv:DWORD
COMM	_pglRecti:DWORD
COMM	_pglRectiv:DWORD
COMM	_pglRects:DWORD
COMM	_pglRectsv:DWORD
COMM	_pglRotated:DWORD
COMM	_pglRotatef:DWORD
COMM	_pglScaled:DWORD
COMM	_pglScalef:DWORD
COMM	_pglScissor:DWORD
COMM	_pglSelectBuffer:DWORD
COMM	_pglShadeModel:DWORD
COMM	_pglStencilFunc:DWORD
COMM	_pglStencilMask:DWORD
COMM	_pglStencilOp:DWORD
COMM	_pglTexCoord1d:DWORD
COMM	_pglTexCoord1dv:DWORD
COMM	_pglTexCoord1f:DWORD
COMM	_pglTexCoord1fv:DWORD
COMM	_pglTexCoord1i:DWORD
COMM	_pglTexCoord1iv:DWORD
COMM	_pglTexCoord1s:DWORD
COMM	_pglTexCoord1sv:DWORD
COMM	_pglTexCoord2d:DWORD
COMM	_pglTexCoord2dv:DWORD
COMM	_pglTexCoord2f:DWORD
COMM	_pglTexCoord2fv:DWORD
COMM	_pglTexCoord2i:DWORD
COMM	_pglTexCoord2iv:DWORD
COMM	_pglTexCoord2s:DWORD
COMM	_pglTexCoord2sv:DWORD
COMM	_pglTexCoord3d:DWORD
COMM	_pglTexCoord3dv:DWORD
COMM	_pglTexCoord3f:DWORD
COMM	_pglTexCoord3fv:DWORD
COMM	_pglTexCoord3i:DWORD
COMM	_pglTexCoord3iv:DWORD
COMM	_pglTexCoord3s:DWORD
COMM	_pglTexCoord3sv:DWORD
COMM	_pglTexCoord4d:DWORD
COMM	_pglTexCoord4dv:DWORD
COMM	_pglTexCoord4f:DWORD
COMM	_pglTexCoord4fv:DWORD
COMM	_pglTexCoord4i:DWORD
COMM	_pglTexCoord4iv:DWORD
COMM	_pglTexCoord4s:DWORD
COMM	_pglTexCoord4sv:DWORD
COMM	_pglTexCoordPointer:DWORD
COMM	_pglTexEnvf:DWORD
COMM	_pglTexEnvfv:DWORD
COMM	_pglTexEnvi:DWORD
COMM	_pglTexEnviv:DWORD
COMM	_pglTexGend:DWORD
COMM	_pglTexGendv:DWORD
COMM	_pglTexGenf:DWORD
COMM	_pglTexGenfv:DWORD
COMM	_pglTexGeni:DWORD
COMM	_pglTexGeniv:DWORD
COMM	_pglTexImage1D:DWORD
COMM	_pglTexImage2D:DWORD
COMM	_pglTexParameterf:DWORD
COMM	_pglTexParameterfv:DWORD
COMM	_pglTexParameteri:DWORD
COMM	_pglTexParameteriv:DWORD
COMM	_pglTexSubImage1D:DWORD
COMM	_pglTexSubImage2D:DWORD
COMM	_pglTranslated:DWORD
COMM	_pglTranslatef:DWORD
COMM	_pglVertex2d:DWORD
COMM	_pglVertex2dv:DWORD
COMM	_pglVertex2f:DWORD
COMM	_pglVertex2fv:DWORD
COMM	_pglVertex2i:DWORD
COMM	_pglVertex2iv:DWORD
COMM	_pglVertex2s:DWORD
COMM	_pglVertex2sv:DWORD
COMM	_pglVertex3d:DWORD
COMM	_pglVertex3dv:DWORD
COMM	_pglVertex3f:DWORD
COMM	_pglVertex3fv:DWORD
COMM	_pglVertex3i:DWORD
COMM	_pglVertex3iv:DWORD
COMM	_pglVertex3s:DWORD
COMM	_pglVertex3sv:DWORD
COMM	_pglVertex4d:DWORD
COMM	_pglVertex4dv:DWORD
COMM	_pglVertex4f:DWORD
COMM	_pglVertex4fv:DWORD
COMM	_pglVertex4i:DWORD
COMM	_pglVertex4iv:DWORD
COMM	_pglVertex4s:DWORD
COMM	_pglVertex4sv:DWORD
COMM	_pglVertexPointer:DWORD
COMM	_pglViewport:DWORD
COMM	_pglPointParameterfEXT:DWORD
COMM	_pglPointParameterfvEXT:DWORD
COMM	_pglLockArraysEXT:DWORD
COMM	_pglUnlockArraysEXT:DWORD
COMM	_pglActiveTextureARB:DWORD
COMM	_pglClientActiveTextureARB:DWORD
COMM	_pglGetCompressedTexImage:DWORD
COMM	_pglDrawRangeElements:DWORD
COMM	_pglDrawRangeElementsEXT:DWORD
COMM	_pglMultiTexCoord1f:DWORD
COMM	_pglMultiTexCoord2f:DWORD
COMM	_pglMultiTexCoord3f:DWORD
COMM	_pglMultiTexCoord4f:DWORD
COMM	_pglActiveTexture:DWORD
COMM	_pglClientActiveTexture:DWORD
COMM	_pglCompressedTexImage3DARB:DWORD
COMM	_pglCompressedTexImage2DARB:DWORD
COMM	_pglCompressedTexImage1DARB:DWORD
COMM	_pglCompressedTexSubImage3DARB:DWORD
COMM	_pglCompressedTexSubImage2DARB:DWORD
COMM	_pglCompressedTexSubImage1DARB:DWORD
COMM	_pglDeleteObjectARB:DWORD
COMM	_pglGetHandleARB:DWORD
COMM	_pglDetachObjectARB:DWORD
COMM	_pglCreateShaderObjectARB:DWORD
COMM	_pglShaderSourceARB:DWORD
COMM	_pglCompileShaderARB:DWORD
COMM	_pglCreateProgramObjectARB:DWORD
COMM	_pglAttachObjectARB:DWORD
COMM	_pglLinkProgramARB:DWORD
COMM	_pglUseProgramObjectARB:DWORD
COMM	_pglValidateProgramARB:DWORD
COMM	_pglBindProgramARB:DWORD
COMM	_pglDeleteProgramsARB:DWORD
COMM	_pglGenProgramsARB:DWORD
COMM	_pglProgramStringARB:DWORD
COMM	_pglProgramEnvParameter4fARB:DWORD
COMM	_pglProgramLocalParameter4fARB:DWORD
COMM	_pglUniform1fARB:DWORD
COMM	_pglUniform2fARB:DWORD
COMM	_pglUniform3fARB:DWORD
COMM	_pglUniform4fARB:DWORD
COMM	_pglUniform1iARB:DWORD
COMM	_pglUniform2iARB:DWORD
COMM	_pglUniform3iARB:DWORD
COMM	_pglUniform4iARB:DWORD
COMM	_pglUniform1fvARB:DWORD
COMM	_pglUniform2fvARB:DWORD
COMM	_pglUniform3fvARB:DWORD
COMM	_pglUniform4fvARB:DWORD
COMM	_pglUniform1ivARB:DWORD
COMM	_pglUniform2ivARB:DWORD
COMM	_pglUniform3ivARB:DWORD
COMM	_pglUniform4ivARB:DWORD
COMM	_pglUniformMatrix2fvARB:DWORD
COMM	_pglUniformMatrix3fvARB:DWORD
COMM	_pglUniformMatrix4fvARB:DWORD
COMM	_pglGetObjectParameterfvARB:DWORD
COMM	_pglGetObjectParameterivARB:DWORD
COMM	_pglGetInfoLogARB:DWORD
COMM	_pglGetAttachedObjectsARB:DWORD
COMM	_pglGetUniformLocationARB:DWORD
COMM	_pglGetActiveUniformARB:DWORD
COMM	_pglGetUniformfvARB:DWORD
COMM	_pglGetUniformivARB:DWORD
COMM	_pglGetShaderSourceARB:DWORD
COMM	_pglTexImage3D:DWORD
COMM	_pglTexSubImage3D:DWORD
COMM	_pglCopyTexSubImage3D:DWORD
COMM	_pglBlendEquationEXT:DWORD
COMM	_pglStencilOpSeparate:DWORD
COMM	_pglStencilFuncSeparate:DWORD
COMM	_pglActiveStencilFaceEXT:DWORD
COMM	_pglVertexAttribPointerARB:DWORD
COMM	_pglEnableVertexAttribArrayARB:DWORD
COMM	_pglDisableVertexAttribArrayARB:DWORD
COMM	_pglBindAttribLocationARB:DWORD
COMM	_pglGetActiveAttribARB:DWORD
COMM	_pglGetAttribLocationARB:DWORD
COMM	_pglBindFragDataLocation:DWORD
COMM	_pglVertexAttrib2fARB:DWORD
COMM	_pglVertexAttrib2fvARB:DWORD
COMM	_pglVertexAttrib3fvARB:DWORD
COMM	_pglBindBufferARB:DWORD
COMM	_pglDeleteBuffersARB:DWORD
COMM	_pglGenBuffersARB:DWORD
COMM	_pglIsBufferARB:DWORD
COMM	_pglMapBufferARB:DWORD
COMM	_pglUnmapBufferARB:DWORD
COMM	_pglBufferDataARB:DWORD
COMM	_pglBufferSubDataARB:DWORD
COMM	_pglGenQueriesARB:DWORD
COMM	_pglDeleteQueriesARB:DWORD
COMM	_pglIsQueryARB:DWORD
COMM	_pglBeginQueryARB:DWORD
COMM	_pglEndQueryARB:DWORD
COMM	_pglGetQueryivARB:DWORD
COMM	_pglGetQueryObjectivARB:DWORD
COMM	_pglGetQueryObjectuivARB:DWORD
COMM	_pglDebugMessageControlARB:DWORD
COMM	_pglDebugMessageInsertARB:DWORD
COMM	_pglDebugMessageCallbackARB:DWORD
COMM	_pglGetDebugMessageLogARB:DWORD
COMM	_pglIsRenderbuffer:DWORD
COMM	_pglBindRenderbuffer:DWORD
COMM	_pglDeleteRenderbuffers:DWORD
COMM	_pglGenRenderbuffers:DWORD
COMM	_pglRenderbufferStorage:DWORD
COMM	_pglRenderbufferStorageMultisample:DWORD
COMM	_pglGetRenderbufferParameteriv:DWORD
COMM	_pglIsFramebuffer:DWORD
COMM	_pglBindFramebuffer:DWORD
COMM	_pglDeleteFramebuffers:DWORD
COMM	_pglGenFramebuffers:DWORD
COMM	_pglCheckFramebufferStatus:DWORD
COMM	_pglFramebufferTexture1D:DWORD
COMM	_pglFramebufferTexture2D:DWORD
COMM	_pglFramebufferTexture3D:DWORD
COMM	_pglFramebufferTextureLayer:DWORD
COMM	_pglFramebufferRenderbuffer:DWORD
COMM	_pglGetFramebufferAttachmentParameteriv:DWORD
COMM	_pglBlitFramebuffer:DWORD
COMM	_pglDrawBuffersARB:DWORD
COMM	_pglGenerateMipmap:DWORD
COMM	_pglBindVertexArray:DWORD
COMM	_pglDeleteVertexArrays:DWORD
COMM	_pglGenVertexArrays:DWORD
COMM	_pglIsVertexArray:DWORD
COMM	_pglSwapInterval:DWORD
COMM	_pwglSwapBuffers:DWORD
COMM	_pwglCopyContext:DWORD
COMM	_pwglCreateContext:DWORD
COMM	_pwglCreateLayerContext:DWORD
COMM	_pwglDeleteContext:DWORD
COMM	_pwglGetCurrentContext:DWORD
COMM	_pwglGetProcAddress:DWORD
COMM	_pwglMakeCurrent:DWORD
COMM	_pwglShareLists:DWORD
COMM	_pwglUseFontBitmaps:DWORD
COMM	_pwglUseFontOutlines:DWORD
COMM	_pwglDescribeLayerPlane:DWORD
COMM	_pwglSetLayerPaletteEntries:DWORD
COMM	_pwglGetLayerPaletteEntries:DWORD
COMM	_pwglRealizeLayerPalette:DWORD
COMM	_pwglSwapLayerBuffers:DWORD
COMM	_pwglSwapIntervalEXT:DWORD
COMM	_pwglCreateContextAttribsARB:DWORD
COMM	_pwglGetPixelFormatAttribiv:DWORD
COMM	_pwglChoosePixelFormat:DWORD
COMM	_pwglGetExtensionsStringEXT:DWORD
COMM	_pglGetError:DWORD
COMM	_pglGetString:DWORD
COMM	_pglAccum:DWORD
COMM	_pglAlphaFunc:DWORD
COMM	_pglArrayElement:DWORD
COMM	_pglBegin:DWORD
COMM	_pglBindTexture:DWORD
COMM	_pglBitmap:DWORD
COMM	_pglBlendFunc:DWORD
COMM	_pglCallList:DWORD
COMM	_pglCallLists:DWORD
COMM	_pglClear:DWORD
COMM	_pglClearAccum:DWORD
COMM	_pglClearColor:DWORD
COMM	_pglClearDepth:DWORD
COMM	_pglClearIndex:DWORD
COMM	_pglClearStencil:DWORD
COMM	_pglIsEnabled:DWORD
COMM	_pglIsList:DWORD
COMM	_pglIsTexture:DWORD
COMM	_pglClipPlane:DWORD
COMM	_pglColor3b:DWORD
COMM	_pglColor3bv:DWORD
COMM	_pglColor3d:DWORD
COMM	_pglColor3dv:DWORD
COMM	_pglColor3f:DWORD
COMM	_pglColor3fv:DWORD
COMM	_pglColor3i:DWORD
COMM	_pglColor3iv:DWORD
COMM	_pglColor3s:DWORD
COMM	_pglColor3sv:DWORD
COMM	_pglColor3ub:DWORD
COMM	_pglColor3ubv:DWORD
COMM	_pglColor3ui:DWORD
COMM	_pglColor3uiv:DWORD
COMM	_pglColor3us:DWORD
COMM	_pglColor3usv:DWORD
COMM	_pglColor4b:DWORD
COMM	_pglColor4bv:DWORD
_DATA	ENDS
PUBLIC	_V_PreRender
PUBLIC	_V_PostRender
PUBLIC	_V_RenderView
PUBLIC	_V_CalcViewRect
PUBLIC	_V_SetupViewModel
PUBLIC	_V_SetRefParams
PUBLIC	_V_RefApplyOverview
PUBLIC	_V_GetRefParams
PUBLIC	__real@00000000
PUBLIC	__real@40000000
PUBLIC	__real@4059000000000000
PUBLIC	__real@41200000
PUBLIC	__real@42b40000
PUBLIC	__real@42c80000
PUBLIC	__real@42dc0000
PUBLIC	__real@42f00000
PUBLIC	__real@43160000
PUBLIC	__real@43340000
PUBLIC	__real@46000000
PUBLIC	__real@c2b40000
PUBLIC	__xmm@80000000800000008000000080000000
EXTRN	_memset:PROC
EXTRN	_Con_Reportf:PROC
EXTRN	_SV_DrawDebugTriangles:PROC
EXTRN	_SV_DrawOrthoTriangles:PROC
EXTRN	_Con_NPrintf:PROC
EXTRN	_fabs:PROC
EXTRN	_CL_IsDevOverviewMode:PROC
EXTRN	_CL_DrawDemoRecording:PROC
EXTRN	_CL_DrawHUD:PROC
EXTRN	_CL_ModelHandle:PROC
EXTRN	_SCR_TileClear:PROC
EXTRN	_SCR_DirtyScreen:PROC
EXTRN	_SCR_MakeScreenShot:PROC
EXTRN	_SCR_NetSpeeds:PROC
EXTRN	_SCR_RSpeeds:PROC
EXTRN	_SCR_DrawNetGraph:PROC
EXTRN	_Con_DrawDebug:PROC
EXTRN	_Con_DrawConsole:PROC
EXTRN	_Con_DrawVersion:PROC
EXTRN	_S_ExtraUpdate:PROC
EXTRN	_UI_UpdateMenu:PROC
EXTRN	_UI_IsVisible:PROC
EXTRN	_GL_BackendStartFrame:PROC
EXTRN	_GL_BackendEndFrame:PROC
EXTRN	_R_ShowTextures:PROC
EXTRN	_R_ShowTree:PROC
EXTRN	_R_Set2DMode:PROC
EXTRN	_R_AllowFog:PROC
EXTRN	_V_CalcFov:PROC
EXTRN	_V_AdjustFov:PROC
EXTRN	_R_BeginFrame:PROC
EXTRN	_R_RenderFrame:PROC
EXTRN	_R_EndFrame:PROC
EXTRN	_Mod_SetOrthoBounds:PROC
EXTRN	_VGui_Paint:PROC
EXTRN	_S_UpdateFrame:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	_host:BYTE
EXTRN	_cl:BYTE
EXTRN	_cls:BYTE
EXTRN	_clgame:BYTE
EXTRN	_cl_timeout:DWORD
EXTRN	_scr_viewsize:DWORD
EXTRN	_RI:BYTE
EXTRN	_glState:BYTE
EXTRN	_glw_state:BYTE
EXTRN	_r_adjust_fov:DWORD
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
;	COMDAT __xmm@80000000800000008000000080000000
CONST	SEGMENT
__xmm@80000000800000008000000080000000 DB 00H, 00H, 00H, 080H, 00H, 00H, 00H
	DB	080H, 00H, 00H, 00H, 080H, 00H, 00H, 00H, 080H
CONST	ENDS
;	COMDAT __real@c2b40000
CONST	SEGMENT
__real@c2b40000 DD 0c2b40000r			; -90
CONST	ENDS
;	COMDAT __real@46000000
CONST	SEGMENT
__real@46000000 DD 046000000r			; 8192
CONST	ENDS
;	COMDAT __real@43340000
CONST	SEGMENT
__real@43340000 DD 043340000r			; 180
CONST	ENDS
;	COMDAT __real@43160000
CONST	SEGMENT
__real@43160000 DD 043160000r			; 150
CONST	ENDS
;	COMDAT __real@42f00000
CONST	SEGMENT
__real@42f00000 DD 042f00000r			; 120
CONST	ENDS
;	COMDAT __real@42dc0000
CONST	SEGMENT
__real@42dc0000 DD 042dc0000r			; 110
CONST	ENDS
;	COMDAT __real@42c80000
CONST	SEGMENT
__real@42c80000 DD 042c80000r			; 100
CONST	ENDS
;	COMDAT __real@42b40000
CONST	SEGMENT
__real@42b40000 DD 042b40000r			; 90
CONST	ENDS
;	COMDAT __real@41200000
CONST	SEGMENT
__real@41200000 DD 041200000r			; 10
CONST	ENDS
;	COMDAT __real@4059000000000000
CONST	SEGMENT
__real@4059000000000000 DQ 04059000000000000r	; 100
CONST	ENDS
;	COMDAT __real@40000000
CONST	SEGMENT
__real@40000000 DD 040000000r			; 2
CONST	ENDS
;	COMDAT __real@00000000
CONST	SEGMENT
__real@00000000 DD 000000000r			; 0
CONST	ENDS
_DATA	SEGMENT
$SG143895 DB	' Overview: Zoom %.2f, Map Origin (%.2f, %.2f, %.2f), Z M'
	DB	'in %.2f, Z Max %.2f, Rotated %i', 0aH, 00H
	ORG $+3
$SG143911 DB	'V_PreRender: loading plaque timed out', 0aH, 00H
_DATA	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xash_build4529_src\engine\client\cl_view.c
_TEXT	SEGMENT
tv252 = -8						; size = 4
tv251 = -4						; size = 4
_fd$ = 8						; size = 4
_rvp$ = 12						; size = 4
_V_GetRefParams PROC

; 228  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	push	esi

; 229  : 	// part1: deniable updates
; 230  : 	VectorCopy( fd->simvel, cl.simvel );

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, 4
	imul	eax, edx, 0
	mov	edx, DWORD PTR _fd$[ebp]
	mov	ecx, DWORD PTR [edx+ecx+88]
	mov	DWORD PTR _cl[eax+1568816], ecx
	mov	edx, 4
	shl	edx, 0
	mov	eax, 4
	shl	eax, 0
	mov	ecx, DWORD PTR _fd$[ebp]
	mov	edx, DWORD PTR [ecx+edx+88]
	mov	DWORD PTR _cl[eax+1568816], edx
	mov	eax, 4
	shl	eax, 1
	mov	ecx, 4
	shl	ecx, 1
	mov	edx, DWORD PTR _fd$[ebp]
	mov	eax, DWORD PTR [edx+eax+88]
	mov	DWORD PTR _cl[ecx+1568816], eax

; 231  : 	VectorCopy( fd->simorg, cl.simorg );

	mov	ecx, 4
	imul	edx, ecx, 0
	mov	eax, 4
	imul	ecx, eax, 0
	mov	eax, DWORD PTR _fd$[ebp]
	mov	edx, DWORD PTR [eax+edx+100]
	mov	DWORD PTR _cl[ecx+1568804], edx
	mov	eax, 4
	shl	eax, 0
	mov	ecx, 4
	shl	ecx, 0
	mov	edx, DWORD PTR _fd$[ebp]
	mov	eax, DWORD PTR [edx+eax+100]
	mov	DWORD PTR _cl[ecx+1568804], eax
	mov	ecx, 4
	shl	ecx, 1
	mov	edx, 4
	shl	edx, 1
	mov	eax, DWORD PTR _fd$[ebp]
	mov	ecx, DWORD PTR [eax+ecx+100]
	mov	DWORD PTR _cl[edx+1568804], ecx

; 232  : 	VectorCopy( fd->punchangle, cl.punchangle );

	mov	edx, 4
	imul	eax, edx, 0
	mov	ecx, 4
	imul	edx, ecx, 0
	mov	ecx, DWORD PTR _fd$[ebp]
	mov	eax, DWORD PTR [ecx+eax+160]
	mov	DWORD PTR _cl[edx+1568636], eax
	mov	ecx, 4
	shl	ecx, 0
	mov	edx, 4
	shl	edx, 0
	mov	eax, DWORD PTR _fd$[ebp]
	mov	ecx, DWORD PTR [eax+ecx+160]
	mov	DWORD PTR _cl[edx+1568636], ecx
	mov	edx, 4
	shl	edx, 1
	mov	eax, 4
	shl	eax, 1
	mov	ecx, DWORD PTR _fd$[ebp]
	mov	edx, DWORD PTR [ecx+edx+160]
	mov	DWORD PTR _cl[eax+1568636], edx

; 233  : 	VectorCopy( fd->viewheight, cl.viewheight );

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, 4
	imul	eax, edx, 0
	mov	edx, DWORD PTR _fd$[ebp]
	mov	ecx, DWORD PTR [edx+ecx+112]
	mov	DWORD PTR _cl[eax+1568624], ecx
	mov	edx, 4
	shl	edx, 0
	mov	eax, 4
	shl	eax, 0
	mov	ecx, DWORD PTR _fd$[ebp]
	mov	edx, DWORD PTR [ecx+edx+112]
	mov	DWORD PTR _cl[eax+1568624], edx
	mov	eax, 4
	shl	eax, 1
	mov	ecx, 4
	shl	ecx, 1
	mov	edx, DWORD PTR _fd$[ebp]
	mov	eax, DWORD PTR [edx+eax+112]
	mov	DWORD PTR _cl[ecx+1568624], eax

; 234  : 
; 235  : 	// part2: really used updates
; 236  : 	VectorCopy( fd->crosshairangle, cl.crosshairangle );

	mov	ecx, 4
	imul	edx, ecx, 0
	mov	eax, 4
	imul	ecx, eax, 0
	mov	eax, DWORD PTR _fd$[ebp]
	mov	edx, DWORD PTR [eax+edx+144]
	mov	DWORD PTR _cl[ecx+1568652], edx
	mov	eax, 4
	shl	eax, 0
	mov	ecx, 4
	shl	ecx, 0
	mov	edx, DWORD PTR _fd$[ebp]
	mov	eax, DWORD PTR [edx+eax+144]
	mov	DWORD PTR _cl[ecx+1568652], eax
	mov	ecx, 4
	shl	ecx, 1
	mov	edx, 4
	shl	edx, 1
	mov	eax, DWORD PTR _fd$[ebp]
	mov	ecx, DWORD PTR [eax+ecx+144]
	mov	DWORD PTR _cl[edx+1568652], ecx

; 237  : 	VectorCopy( fd->cl_viewangles, cl.viewangles );

	mov	edx, 4
	imul	eax, edx, 0
	mov	ecx, 4
	imul	edx, ecx, 0
	mov	ecx, DWORD PTR _fd$[ebp]
	mov	eax, DWORD PTR [ecx+eax+128]
	mov	DWORD PTR _cl[edx+1568612], eax
	mov	ecx, 4
	shl	ecx, 0
	mov	edx, 4
	shl	edx, 0
	mov	eax, DWORD PTR _fd$[ebp]
	mov	ecx, DWORD PTR [eax+ecx+128]
	mov	DWORD PTR _cl[edx+1568612], ecx
	mov	edx, 4
	shl	edx, 1
	mov	eax, 4
	shl	eax, 1
	mov	ecx, DWORD PTR _fd$[ebp]
	mov	edx, DWORD PTR [ecx+edx+128]
	mov	DWORD PTR _cl[eax+1568612], edx

; 238  : 
; 239  : 	// setup ref_viewpass
; 240  : 	rvp->viewport[0] = fd->viewport[0];

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, 4
	imul	eax, edx, 0
	mov	edx, DWORD PTR _rvp$[ebp]
	mov	esi, DWORD PTR _fd$[ebp]
	mov	ecx, DWORD PTR [esi+ecx+208]
	mov	DWORD PTR [edx+eax], ecx

; 241  : 	rvp->viewport[1] = fd->viewport[1];

	mov	edx, 4
	shl	edx, 0
	mov	eax, 4
	shl	eax, 0
	mov	ecx, DWORD PTR _rvp$[ebp]
	mov	esi, DWORD PTR _fd$[ebp]
	mov	edx, DWORD PTR [esi+edx+208]
	mov	DWORD PTR [ecx+eax], edx

; 242  : 	rvp->viewport[2] = fd->viewport[2];

	mov	eax, 4
	shl	eax, 1
	mov	ecx, 4
	shl	ecx, 1
	mov	edx, DWORD PTR _rvp$[ebp]
	mov	esi, DWORD PTR _fd$[ebp]
	mov	eax, DWORD PTR [esi+eax+208]
	mov	DWORD PTR [edx+ecx], eax

; 243  : 	rvp->viewport[3] = fd->viewport[3];

	mov	ecx, 4
	imul	edx, ecx, 3
	mov	eax, 4
	imul	ecx, eax, 3
	mov	eax, DWORD PTR _rvp$[ebp]
	mov	esi, DWORD PTR _fd$[ebp]
	mov	edx, DWORD PTR [esi+edx+208]
	mov	DWORD PTR [eax+ecx], edx

; 244  : 
; 245  : 	VectorCopy( fd->vieworg, rvp->vieworigin );

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, 4
	imul	eax, edx, 0
	mov	edx, DWORD PTR _rvp$[ebp]
	mov	esi, DWORD PTR _fd$[ebp]
	mov	ecx, DWORD PTR [esi+ecx]
	mov	DWORD PTR [edx+eax+16], ecx
	mov	edx, 4
	shl	edx, 0
	mov	eax, 4
	shl	eax, 0
	mov	ecx, DWORD PTR _rvp$[ebp]
	mov	esi, DWORD PTR _fd$[ebp]
	mov	edx, DWORD PTR [esi+edx]
	mov	DWORD PTR [ecx+eax+16], edx
	mov	eax, 4
	shl	eax, 1
	mov	ecx, 4
	shl	ecx, 1
	mov	edx, DWORD PTR _rvp$[ebp]
	mov	esi, DWORD PTR _fd$[ebp]
	mov	eax, DWORD PTR [esi+eax]
	mov	DWORD PTR [edx+ecx+16], eax

; 246  : 	VectorCopy( fd->viewangles, rvp->viewangles );

	mov	ecx, 4
	imul	edx, ecx, 0
	mov	eax, 4
	imul	ecx, eax, 0
	mov	eax, DWORD PTR _rvp$[ebp]
	mov	esi, DWORD PTR _fd$[ebp]
	mov	edx, DWORD PTR [esi+edx+12]
	mov	DWORD PTR [eax+ecx+28], edx
	mov	eax, 4
	shl	eax, 0
	mov	ecx, 4
	shl	ecx, 0
	mov	edx, DWORD PTR _rvp$[ebp]
	mov	esi, DWORD PTR _fd$[ebp]
	mov	eax, DWORD PTR [esi+eax+12]
	mov	DWORD PTR [edx+ecx+28], eax
	mov	ecx, 4
	shl	ecx, 1
	mov	edx, 4
	shl	edx, 1
	mov	eax, DWORD PTR _rvp$[ebp]
	mov	esi, DWORD PTR _fd$[ebp]
	mov	ecx, DWORD PTR [esi+ecx+12]
	mov	DWORD PTR [eax+edx+28], ecx

; 247  : 
; 248  : 	rvp->viewentity = fd->viewentity;

	mov	edx, DWORD PTR _rvp$[ebp]
	mov	eax, DWORD PTR _fd$[ebp]
	mov	ecx, DWORD PTR [eax+176]
	mov	DWORD PTR [edx+40], ecx

; 249  : 
; 250  : 	// calc FOV
; 251  : 	rvp->fov_x = bound( 10.0f, cl.local.scr_fov, 150.0f ); // this is a final fov value

	movss	xmm0, DWORD PTR _cl+1568592
	comiss	xmm0, DWORD PTR __real@41200000
	jb	SHORT $LN7@V_GetRefPa
	movss	xmm0, DWORD PTR __real@43160000
	comiss	xmm0, DWORD PTR _cl+1568592
	jbe	SHORT $LN5@V_GetRefPa
	movss	xmm0, DWORD PTR _cl+1568592
	movss	DWORD PTR tv251[ebp], xmm0
	jmp	SHORT $LN6@V_GetRefPa
$LN5@V_GetRefPa:
	movss	xmm0, DWORD PTR __real@43160000
	movss	DWORD PTR tv251[ebp], xmm0
$LN6@V_GetRefPa:
	movss	xmm0, DWORD PTR tv251[ebp]
	movss	DWORD PTR tv252[ebp], xmm0
	jmp	SHORT $LN8@V_GetRefPa
$LN7@V_GetRefPa:
	movss	xmm0, DWORD PTR __real@41200000
	movss	DWORD PTR tv252[ebp], xmm0
$LN8@V_GetRefPa:
	mov	edx, DWORD PTR _rvp$[ebp]
	movss	xmm0, DWORD PTR tv252[ebp]
	movss	DWORD PTR [edx+44], xmm0

; 252  : 
; 253  : 	// first we need to compute FOV and other things that needs for frustum properly work
; 254  : 	rvp->fov_y = V_CalcFov( &rvp->fov_x, clgame.viewport[2], clgame.viewport[3] );

	mov	eax, 4
	imul	ecx, eax, 3
	cvtsi2ss xmm0, DWORD PTR _clgame[ecx+122640]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	edx, 4
	shl	edx, 1
	cvtsi2ss xmm0, DWORD PTR _clgame[edx+122640]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _rvp$[ebp]
	add	eax, 44					; 0000002cH
	push	eax
	call	_V_CalcFov
	add	esp, 12					; 0000000cH
	mov	ecx, DWORD PTR _rvp$[ebp]
	fstp	DWORD PTR [ecx+48]

; 255  : 
; 256  : 	// adjust FOV for widescreen
; 257  : 	if( glState.wideScreen && r_adjust_fov->value )

	cmp	DWORD PTR _glState+12, 0
	je	SHORT $LN2@V_GetRefPa
	mov	edx, DWORD PTR _r_adjust_fov
	movss	xmm0, DWORD PTR [edx+12]
	ucomiss	xmm0, DWORD PTR __real@00000000
	lahf
	test	ah, 68					; 00000044H
	jnp	SHORT $LN2@V_GetRefPa

; 258  : 		V_AdjustFov( &rvp->fov_x, &rvp->fov_y, clgame.viewport[2], clgame.viewport[3], false );

	push	0
	mov	eax, 4
	imul	ecx, eax, 3
	cvtsi2ss xmm0, DWORD PTR _clgame[ecx+122640]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	edx, 4
	shl	edx, 1
	cvtsi2ss xmm0, DWORD PTR _clgame[edx+122640]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _rvp$[ebp]
	add	eax, 48					; 00000030H
	push	eax
	mov	ecx, DWORD PTR _rvp$[ebp]
	add	ecx, 44					; 0000002cH
	push	ecx
	call	_V_AdjustFov
	add	esp, 20					; 00000014H
$LN2@V_GetRefPa:

; 259  : 
; 260  : 	rvp->flags = 0;

	mov	edx, DWORD PTR _rvp$[ebp]
	mov	DWORD PTR [edx+52], 0

; 261  : 
; 262  : 	if( fd->onlyClientDraw )

	mov	eax, DWORD PTR _fd$[ebp]
	cmp	DWORD PTR [eax+228], 0
	je	SHORT $LN3@V_GetRefPa

; 263  : 		SetBits( rvp->flags, RF_ONLY_CLIENTDRAW );

	mov	ecx, DWORD PTR _rvp$[ebp]
	mov	edx, DWORD PTR [ecx+52]
	or	edx, 8
	mov	eax, DWORD PTR _rvp$[ebp]
	mov	DWORD PTR [eax+52], edx
$LN3@V_GetRefPa:

; 264  : 	SetBits( rvp->flags, RF_DRAW_WORLD );

	mov	ecx, DWORD PTR _rvp$[ebp]
	mov	edx, DWORD PTR [ecx+52]
	or	edx, 1
	mov	eax, DWORD PTR _rvp$[ebp]
	mov	DWORD PTR [eax+52], edx

; 265  : }

	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	0
_V_GetRefParams ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xash_build4529_src\engine\client\cl_view.c
_TEXT	SEGMENT
_mins$ = -52						; size = 8
_maxs$ = -44						; size = 8
_aspect$ = -36						; size = 4
tv254 = -32						; size = 4
tv252 = -28						; size = 4
tv249 = -24						; size = 4
_size_y$ = -20						; size = 4
_size_x$ = -16						; size = 4
tv214 = -12						; size = 4
tv205 = -8						; size = 4
_ov$ = -4						; size = 4
_rvp$ = 8						; size = 4
_V_RefApplyOverview PROC

; 176  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 52					; 00000034H
	push	esi

; 177  : 	ref_overview_t	*ov = &clgame.overView;

	mov	DWORD PTR _ov$[ebp], OFFSET _clgame+125416

; 178  : 	float		aspect;
; 179  : 	float		size_x, size_y;
; 180  : 	vec2_t		mins, maxs;
; 181  : 
; 182  : 	if( !CL_IsDevOverviewMode( ))

	call	_CL_IsDevOverviewMode
	test	eax, eax
	jne	SHORT $LN2@V_RefApply

; 183  : 		return;

	jmp	$LN1@V_RefApply
$LN2@V_RefApply:

; 184  : 
; 185  : 	// NOTE: Xash3D may use 16:9 or 16:10 aspects
; 186  : 	aspect = (float)glState.width / (float)glState.height;

	cvtsi2ss xmm0, DWORD PTR _glState
	cvtsi2ss xmm1, DWORD PTR _glState+4
	divss	xmm0, xmm1
	movss	DWORD PTR _aspect$[ebp], xmm0

; 187  : 
; 188  : 	size_x = fabs( 8192.0f / ov->flZoom );

	mov	eax, DWORD PTR _ov$[ebp]
	movss	xmm0, DWORD PTR __real@46000000
	divss	xmm0, DWORD PTR [eax+40]
	cvtss2sd xmm0, xmm0
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	call	_fabs
	add	esp, 8
	fstp	DWORD PTR _size_x$[ebp]

; 189  : 	size_y = fabs( 8192.0f / (ov->flZoom * aspect ));

	mov	ecx, DWORD PTR _ov$[ebp]
	movss	xmm0, DWORD PTR [ecx+40]
	mulss	xmm0, DWORD PTR _aspect$[ebp]
	movss	xmm1, DWORD PTR __real@46000000
	divss	xmm1, xmm0
	cvtss2sd xmm0, xmm1
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	call	_fabs
	add	esp, 8
	fstp	DWORD PTR _size_y$[ebp]

; 190  : 
; 191  : 	// compute rectangle
; 192  : 	ov->xLeft = -(size_x / 2);

	movss	xmm0, DWORD PTR _size_x$[ebp]
	divss	xmm0, DWORD PTR __real@40000000
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mov	edx, DWORD PTR _ov$[ebp]
	movss	DWORD PTR [edx+16], xmm0

; 193  : 	ov->xRight = (size_x / 2);

	movss	xmm0, DWORD PTR _size_x$[ebp]
	divss	xmm0, DWORD PTR __real@40000000
	mov	eax, DWORD PTR _ov$[ebp]
	movss	DWORD PTR [eax+20], xmm0

; 194  : 	ov->yTop = -(size_y / 2);

	movss	xmm0, DWORD PTR _size_y$[ebp]
	divss	xmm0, DWORD PTR __real@40000000
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mov	ecx, DWORD PTR _ov$[ebp]
	movss	DWORD PTR [ecx+24], xmm0

; 195  : 	ov->yBottom = (size_y / 2);

	movss	xmm0, DWORD PTR _size_y$[ebp]
	divss	xmm0, DWORD PTR __real@40000000
	mov	edx, DWORD PTR _ov$[ebp]
	movss	DWORD PTR [edx+28], xmm0

; 196  : 
; 197  : 	if( CL_IsDevOverviewMode() == 1 )

	call	_CL_IsDevOverviewMode
	cmp	eax, 1
	jne	$LN3@V_RefApply

; 198  : 	{
; 199  : 		Con_NPrintf( 0, " Overview: Zoom %.2f, Map Origin (%.2f, %.2f, %.2f), Z Min %.2f, Z Max %.2f, Rotated %i\n",

	mov	eax, DWORD PTR _ov$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	mov	edx, DWORD PTR _ov$[ebp]
	cvtss2sd xmm0, DWORD PTR [edx+32]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _ov$[ebp]
	cvtss2sd xmm0, DWORD PTR [eax+36]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	mov	ecx, 4
	shl	ecx, 1
	mov	edx, DWORD PTR _ov$[ebp]
	cvtss2sd xmm0, DWORD PTR [edx+ecx]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	mov	eax, 4
	shl	eax, 0
	mov	ecx, DWORD PTR _ov$[ebp]
	cvtss2sd xmm0, DWORD PTR [ecx+eax]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	mov	edx, 4
	imul	eax, edx, 0
	mov	ecx, DWORD PTR _ov$[ebp]
	cvtss2sd xmm0, DWORD PTR [ecx+eax]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _ov$[ebp]
	cvtss2sd xmm0, DWORD PTR [edx+40]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	push	OFFSET $SG143895
	push	0
	call	_Con_NPrintf
	add	esp, 60					; 0000003cH
$LN3@V_RefApply:

; 200  : 		ov->flZoom, ov->origin[0], ov->origin[1], ov->origin[2], ov->zNear, ov->zFar, ov->rotated );
; 201  : 	}
; 202  : 
; 203  : 	VectorCopy( ov->origin, rvp->vieworigin );

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, 4
	imul	eax, edx, 0
	mov	edx, DWORD PTR _rvp$[ebp]
	mov	esi, DWORD PTR _ov$[ebp]
	mov	ecx, DWORD PTR [esi+ecx]
	mov	DWORD PTR [edx+eax+16], ecx
	mov	edx, 4
	shl	edx, 0
	mov	eax, 4
	shl	eax, 0
	mov	ecx, DWORD PTR _rvp$[ebp]
	mov	esi, DWORD PTR _ov$[ebp]
	mov	edx, DWORD PTR [esi+edx]
	mov	DWORD PTR [ecx+eax+16], edx
	mov	eax, 4
	shl	eax, 1
	mov	ecx, 4
	shl	ecx, 1
	mov	edx, DWORD PTR _rvp$[ebp]
	mov	esi, DWORD PTR _ov$[ebp]
	mov	eax, DWORD PTR [esi+eax]
	mov	DWORD PTR [edx+ecx+16], eax

; 204  : 	rvp->vieworigin[2] = ov->zFar + ov->zNear;

	mov	ecx, DWORD PTR _ov$[ebp]
	mov	edx, DWORD PTR _ov$[ebp]
	movss	xmm0, DWORD PTR [ecx+32]
	addss	xmm0, DWORD PTR [edx+36]
	mov	eax, 4
	shl	eax, 1
	mov	ecx, DWORD PTR _rvp$[ebp]
	movss	DWORD PTR [ecx+eax+16], xmm0

; 205  : 	Vector2Copy( rvp->vieworigin, mins );

	mov	edx, 4
	imul	eax, edx, 0
	mov	ecx, 4
	imul	edx, ecx, 0
	mov	ecx, DWORD PTR _rvp$[ebp]
	mov	eax, DWORD PTR [ecx+eax+16]
	mov	DWORD PTR _mins$[ebp+edx], eax
	mov	ecx, 4
	shl	ecx, 0
	mov	edx, 4
	shl	edx, 0
	mov	eax, DWORD PTR _rvp$[ebp]
	mov	ecx, DWORD PTR [eax+ecx+16]
	mov	DWORD PTR _mins$[ebp+edx], ecx

; 206  : 	Vector2Copy( rvp->vieworigin, maxs );

	mov	edx, 4
	imul	eax, edx, 0
	mov	ecx, 4
	imul	edx, ecx, 0
	mov	ecx, DWORD PTR _rvp$[ebp]
	mov	eax, DWORD PTR [ecx+eax+16]
	mov	DWORD PTR _maxs$[ebp+edx], eax
	mov	ecx, 4
	shl	ecx, 0
	mov	edx, 4
	shl	edx, 0
	mov	eax, DWORD PTR _rvp$[ebp]
	mov	ecx, DWORD PTR [eax+ecx+16]
	mov	DWORD PTR _maxs$[ebp+edx], ecx

; 207  : 
; 208  : 	mins[!ov->rotated] += ov->xLeft;

	mov	edx, DWORD PTR _ov$[ebp]
	cmp	DWORD PTR [edx+12], 0
	jne	SHORT $LN5@V_RefApply
	mov	DWORD PTR tv205[ebp], 1
	jmp	SHORT $LN6@V_RefApply
$LN5@V_RefApply:
	mov	DWORD PTR tv205[ebp], 0
$LN6@V_RefApply:
	mov	eax, DWORD PTR tv205[ebp]
	mov	ecx, DWORD PTR _ov$[ebp]
	movss	xmm0, DWORD PTR _mins$[ebp+eax*4]
	addss	xmm0, DWORD PTR [ecx+16]
	mov	edx, DWORD PTR tv205[ebp]
	movss	DWORD PTR _mins$[ebp+edx*4], xmm0

; 209  : 	maxs[!ov->rotated] += ov->xRight;

	mov	eax, DWORD PTR _ov$[ebp]
	cmp	DWORD PTR [eax+12], 0
	jne	SHORT $LN7@V_RefApply
	mov	DWORD PTR tv214[ebp], 1
	jmp	SHORT $LN8@V_RefApply
$LN7@V_RefApply:
	mov	DWORD PTR tv214[ebp], 0
$LN8@V_RefApply:
	mov	ecx, DWORD PTR tv214[ebp]
	mov	edx, DWORD PTR _ov$[ebp]
	movss	xmm0, DWORD PTR _maxs$[ebp+ecx*4]
	addss	xmm0, DWORD PTR [edx+20]
	mov	eax, DWORD PTR tv214[ebp]
	movss	DWORD PTR _maxs$[ebp+eax*4], xmm0

; 210  : 	mins[ov->rotated] += ov->yTop;

	mov	ecx, DWORD PTR _ov$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	eax, DWORD PTR _ov$[ebp]
	movss	xmm0, DWORD PTR _mins$[ebp+edx*4]
	addss	xmm0, DWORD PTR [eax+24]
	mov	ecx, DWORD PTR _ov$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	movss	DWORD PTR _mins$[ebp+edx*4], xmm0

; 211  : 	maxs[ov->rotated] += ov->yBottom;

	mov	eax, DWORD PTR _ov$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR _ov$[ebp]
	movss	xmm0, DWORD PTR _maxs$[ebp+ecx*4]
	addss	xmm0, DWORD PTR [edx+28]
	mov	eax, DWORD PTR _ov$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	movss	DWORD PTR _maxs$[ebp+ecx*4], xmm0

; 212  : 
; 213  : 	rvp->viewangles[0] = 90.0f;

	mov	edx, 4
	imul	eax, edx, 0
	mov	ecx, DWORD PTR _rvp$[ebp]
	movss	xmm0, DWORD PTR __real@42b40000
	movss	DWORD PTR [ecx+eax+28], xmm0

; 214  : 	rvp->viewangles[1] = 90.0f;

	mov	edx, 4
	shl	edx, 0
	mov	eax, DWORD PTR _rvp$[ebp]
	movss	xmm0, DWORD PTR __real@42b40000
	movss	DWORD PTR [eax+edx+28], xmm0

; 215  : 	rvp->viewangles[2] = (ov->rotated) ? (ov->flZoom < 0.0f) ? 180.0f : 0.0f : (ov->flZoom < 0.0f) ? -90.0f : 90.0f;

	mov	ecx, DWORD PTR _ov$[ebp]
	cmp	DWORD PTR [ecx+12], 0
	je	SHORT $LN13@V_RefApply
	mov	edx, DWORD PTR _ov$[ebp]
	xorps	xmm0, xmm0
	comiss	xmm0, DWORD PTR [edx+40]
	jbe	SHORT $LN9@V_RefApply
	movss	xmm0, DWORD PTR __real@43340000
	movss	DWORD PTR tv249[ebp], xmm0
	jmp	SHORT $LN10@V_RefApply
$LN9@V_RefApply:
	xorps	xmm0, xmm0
	movss	DWORD PTR tv249[ebp], xmm0
$LN10@V_RefApply:
	movss	xmm0, DWORD PTR tv249[ebp]
	movss	DWORD PTR tv254[ebp], xmm0
	jmp	SHORT $LN14@V_RefApply
$LN13@V_RefApply:
	mov	eax, DWORD PTR _ov$[ebp]
	xorps	xmm0, xmm0
	comiss	xmm0, DWORD PTR [eax+40]
	jbe	SHORT $LN11@V_RefApply
	movss	xmm0, DWORD PTR __real@c2b40000
	movss	DWORD PTR tv252[ebp], xmm0
	jmp	SHORT $LN12@V_RefApply
$LN11@V_RefApply:
	movss	xmm0, DWORD PTR __real@42b40000
	movss	DWORD PTR tv252[ebp], xmm0
$LN12@V_RefApply:
	movss	xmm0, DWORD PTR tv252[ebp]
	movss	DWORD PTR tv254[ebp], xmm0
$LN14@V_RefApply:
	mov	ecx, 4
	shl	ecx, 1
	mov	edx, DWORD PTR _rvp$[ebp]
	movss	xmm0, DWORD PTR tv254[ebp]
	movss	DWORD PTR [edx+ecx+28], xmm0

; 216  : 
; 217  : 	SetBits( rvp->flags, RF_DRAW_OVERVIEW );

	mov	eax, DWORD PTR _rvp$[ebp]
	mov	ecx, DWORD PTR [eax+52]
	or	ecx, 4
	mov	edx, DWORD PTR _rvp$[ebp]
	mov	DWORD PTR [edx+52], ecx

; 218  : 
; 219  : 	Mod_SetOrthoBounds( mins, maxs );

	lea	eax, DWORD PTR _maxs$[ebp]
	push	eax
	lea	ecx, DWORD PTR _mins$[ebp]
	push	ecx
	call	_Mod_SetOrthoBounds
	add	esp, 8
$LN1@V_RefApply:

; 220  : }

	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	0
_V_RefApplyOverview ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xash_build4529_src\engine\client\cl_view.c
_TEXT	SEGMENT
tv142 = -12						; size = 4
tv139 = -8						; size = 4
tv136 = -4						; size = 4
_fd$ = 8						; size = 4
_V_SetRefParams PROC

; 112  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH

; 113  : 	memset( fd, 0, sizeof( ref_params_t ));

	push	232					; 000000e8H
	push	0
	mov	eax, DWORD PTR _fd$[ebp]
	push	eax
	call	_memset
	add	esp, 12					; 0000000cH

; 114  : 
; 115  : 	// probably this is not needs
; 116  : 	VectorCopy( RI.vieworg, fd->vieworg );

	mov	ecx, 4
	imul	edx, ecx, 0
	mov	eax, 4
	imul	ecx, eax, 0
	mov	eax, DWORD PTR _fd$[ebp]
	mov	edx, DWORD PTR _RI[edx+200]
	mov	DWORD PTR [eax+ecx], edx
	mov	eax, 4
	shl	eax, 0
	mov	ecx, 4
	shl	ecx, 0
	mov	edx, DWORD PTR _fd$[ebp]
	mov	eax, DWORD PTR _RI[eax+200]
	mov	DWORD PTR [edx+ecx], eax
	mov	ecx, 4
	shl	ecx, 1
	mov	edx, 4
	shl	edx, 1
	mov	eax, DWORD PTR _fd$[ebp]
	mov	ecx, DWORD PTR _RI[ecx+200]
	mov	DWORD PTR [eax+edx], ecx

; 117  : 	VectorCopy( RI.viewangles, fd->viewangles );

	mov	edx, 4
	imul	eax, edx, 0
	mov	ecx, 4
	imul	edx, ecx, 0
	mov	ecx, DWORD PTR _fd$[ebp]
	mov	eax, DWORD PTR _RI[eax+212]
	mov	DWORD PTR [ecx+edx+12], eax
	mov	ecx, 4
	shl	ecx, 0
	mov	edx, 4
	shl	edx, 0
	mov	eax, DWORD PTR _fd$[ebp]
	mov	ecx, DWORD PTR _RI[ecx+212]
	mov	DWORD PTR [eax+edx+12], ecx
	mov	edx, 4
	shl	edx, 1
	mov	eax, 4
	shl	eax, 1
	mov	ecx, DWORD PTR _fd$[ebp]
	mov	edx, DWORD PTR _RI[edx+212]
	mov	DWORD PTR [ecx+eax+12], edx

; 118  : 
; 119  : 	fd->frametime = host.frametime;

	cvtsd2ss xmm0, QWORD PTR _host+1448
	mov	eax, DWORD PTR _fd$[ebp]
	movss	DWORD PTR [eax+60], xmm0

; 120  : 	fd->time = cl.time;

	cvtsd2ss xmm0, QWORD PTR _cl+1525848
	mov	ecx, DWORD PTR _fd$[ebp]
	movss	DWORD PTR [ecx+64], xmm0

; 121  : 
; 122  : 	fd->intermission = cl.intermission;

	mov	edx, DWORD PTR _fd$[ebp]
	mov	eax, DWORD PTR _cl+1568648
	mov	DWORD PTR [edx+68], eax

; 123  : 	fd->paused = (cl.paused != 0);

	cmp	DWORD PTR _cl+24, 0
	je	SHORT $LN6@V_SetRefPa
	mov	DWORD PTR tv136[ebp], 1
	jmp	SHORT $LN7@V_SetRefPa
$LN6@V_SetRefPa:
	mov	DWORD PTR tv136[ebp], 0
$LN7@V_SetRefPa:
	mov	ecx, DWORD PTR _fd$[ebp]
	mov	edx, DWORD PTR tv136[ebp]
	mov	DWORD PTR [ecx+72], edx

; 124  : 	fd->spectator = (cls.spectator != 0);

	cmp	DWORD PTR _cls+152, 0
	je	SHORT $LN8@V_SetRefPa
	mov	DWORD PTR tv139[ebp], 1
	jmp	SHORT $LN9@V_SetRefPa
$LN8@V_SetRefPa:
	mov	DWORD PTR tv139[ebp], 0
$LN9@V_SetRefPa:
	mov	eax, DWORD PTR _fd$[ebp]
	mov	ecx, DWORD PTR tv139[ebp]
	mov	DWORD PTR [eax+76], ecx

; 125  : 	fd->onground = (cl.local.onground != -1);

	cmp	DWORD PTR _cl+1568560, -1
	je	SHORT $LN10@V_SetRefPa
	mov	DWORD PTR tv142[ebp], 1
	jmp	SHORT $LN11@V_SetRefPa
$LN10@V_SetRefPa:
	mov	DWORD PTR tv142[ebp], 0
$LN11@V_SetRefPa:
	mov	edx, DWORD PTR _fd$[ebp]
	mov	eax, DWORD PTR tv142[ebp]
	mov	DWORD PTR [edx+80], eax

; 126  : 	fd->waterlevel = cl.local.waterlevel;

	mov	ecx, DWORD PTR _fd$[ebp]
	mov	edx, DWORD PTR _cl+1568568
	mov	DWORD PTR [ecx+84], edx

; 127  : 
; 128  : 	VectorCopy( cl.simvel, fd->simvel );

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, 4
	imul	eax, edx, 0
	mov	edx, DWORD PTR _fd$[ebp]
	mov	ecx, DWORD PTR _cl[ecx+1568816]
	mov	DWORD PTR [edx+eax+88], ecx
	mov	edx, 4
	shl	edx, 0
	mov	eax, 4
	shl	eax, 0
	mov	ecx, DWORD PTR _fd$[ebp]
	mov	edx, DWORD PTR _cl[edx+1568816]
	mov	DWORD PTR [ecx+eax+88], edx
	mov	eax, 4
	shl	eax, 1
	mov	ecx, 4
	shl	ecx, 1
	mov	edx, DWORD PTR _fd$[ebp]
	mov	eax, DWORD PTR _cl[eax+1568816]
	mov	DWORD PTR [edx+ecx+88], eax

; 129  : 	VectorCopy( cl.simorg, fd->simorg );

	mov	ecx, 4
	imul	edx, ecx, 0
	mov	eax, 4
	imul	ecx, eax, 0
	mov	eax, DWORD PTR _fd$[ebp]
	mov	edx, DWORD PTR _cl[edx+1568804]
	mov	DWORD PTR [eax+ecx+100], edx
	mov	eax, 4
	shl	eax, 0
	mov	ecx, 4
	shl	ecx, 0
	mov	edx, DWORD PTR _fd$[ebp]
	mov	eax, DWORD PTR _cl[eax+1568804]
	mov	DWORD PTR [edx+ecx+100], eax
	mov	ecx, 4
	shl	ecx, 1
	mov	edx, 4
	shl	edx, 1
	mov	eax, DWORD PTR _fd$[ebp]
	mov	ecx, DWORD PTR _cl[ecx+1568804]
	mov	DWORD PTR [eax+edx+100], ecx

; 130  : 
; 131  : 	VectorCopy( cl.viewheight, fd->viewheight );

	mov	edx, 4
	imul	eax, edx, 0
	mov	ecx, 4
	imul	edx, ecx, 0
	mov	ecx, DWORD PTR _fd$[ebp]
	mov	eax, DWORD PTR _cl[eax+1568624]
	mov	DWORD PTR [ecx+edx+112], eax
	mov	ecx, 4
	shl	ecx, 0
	mov	edx, 4
	shl	edx, 0
	mov	eax, DWORD PTR _fd$[ebp]
	mov	ecx, DWORD PTR _cl[ecx+1568624]
	mov	DWORD PTR [eax+edx+112], ecx
	mov	edx, 4
	shl	edx, 1
	mov	eax, 4
	shl	eax, 1
	mov	ecx, DWORD PTR _fd$[ebp]
	mov	edx, DWORD PTR _cl[edx+1568624]
	mov	DWORD PTR [ecx+eax+112], edx

; 132  : 	fd->idealpitch = cl.local.idealpitch;

	mov	eax, DWORD PTR _fd$[ebp]
	movss	xmm0, DWORD PTR _cl+1568548
	movss	DWORD PTR [eax+124], xmm0

; 133  : 
; 134  : 	VectorCopy( cl.viewangles, fd->cl_viewangles );

	mov	ecx, 4
	imul	edx, ecx, 0
	mov	eax, 4
	imul	ecx, eax, 0
	mov	eax, DWORD PTR _fd$[ebp]
	mov	edx, DWORD PTR _cl[edx+1568612]
	mov	DWORD PTR [eax+ecx+128], edx
	mov	eax, 4
	shl	eax, 0
	mov	ecx, 4
	shl	ecx, 0
	mov	edx, DWORD PTR _fd$[ebp]
	mov	eax, DWORD PTR _cl[eax+1568612]
	mov	DWORD PTR [edx+ecx+128], eax
	mov	ecx, 4
	shl	ecx, 1
	mov	edx, 4
	shl	edx, 1
	mov	eax, DWORD PTR _fd$[ebp]
	mov	ecx, DWORD PTR _cl[ecx+1568612]
	mov	DWORD PTR [eax+edx+128], ecx

; 135  : 	fd->health = cl.local.health;

	mov	edx, DWORD PTR _fd$[ebp]
	mov	eax, DWORD PTR _cl+1568556
	mov	DWORD PTR [edx+140], eax

; 136  : 	VectorCopy( cl.crosshairangle, fd->crosshairangle );

	mov	ecx, 4
	imul	edx, ecx, 0
	mov	eax, 4
	imul	ecx, eax, 0
	mov	eax, DWORD PTR _fd$[ebp]
	mov	edx, DWORD PTR _cl[edx+1568652]
	mov	DWORD PTR [eax+ecx+144], edx
	mov	eax, 4
	shl	eax, 0
	mov	ecx, 4
	shl	ecx, 0
	mov	edx, DWORD PTR _fd$[ebp]
	mov	eax, DWORD PTR _cl[eax+1568652]
	mov	DWORD PTR [edx+ecx+144], eax
	mov	ecx, 4
	shl	ecx, 1
	mov	edx, 4
	shl	edx, 1
	mov	eax, DWORD PTR _fd$[ebp]
	mov	ecx, DWORD PTR _cl[ecx+1568652]
	mov	DWORD PTR [eax+edx+144], ecx

; 137  : 	fd->viewsize = scr_viewsize->value;

	mov	edx, DWORD PTR _fd$[ebp]
	mov	eax, DWORD PTR _scr_viewsize
	mov	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR [edx+156], ecx

; 138  : 
; 139  : 	VectorCopy( cl.punchangle, fd->punchangle );

	mov	edx, 4
	imul	eax, edx, 0
	mov	ecx, 4
	imul	edx, ecx, 0
	mov	ecx, DWORD PTR _fd$[ebp]
	mov	eax, DWORD PTR _cl[eax+1568636]
	mov	DWORD PTR [ecx+edx+160], eax
	mov	ecx, 4
	shl	ecx, 0
	mov	edx, 4
	shl	edx, 0
	mov	eax, DWORD PTR _fd$[ebp]
	mov	ecx, DWORD PTR _cl[ecx+1568636]
	mov	DWORD PTR [eax+edx+160], ecx
	mov	edx, 4
	shl	edx, 1
	mov	eax, 4
	shl	eax, 1
	mov	ecx, DWORD PTR _fd$[ebp]
	mov	edx, DWORD PTR _cl[edx+1568636]
	mov	DWORD PTR [ecx+eax+160], edx

; 140  : 	fd->maxclients = cl.maxclients;

	mov	eax, DWORD PTR _fd$[ebp]
	mov	ecx, DWORD PTR _cl+1568832
	mov	DWORD PTR [eax+172], ecx

; 141  : 	fd->viewentity = cl.viewentity;

	mov	edx, DWORD PTR _fd$[ebp]
	mov	eax, DWORD PTR _cl+1568608
	mov	DWORD PTR [edx+176], eax

; 142  : 	fd->playernum = cl.playernum;

	mov	ecx, DWORD PTR _fd$[ebp]
	mov	edx, DWORD PTR _cl+1568828
	mov	DWORD PTR [ecx+180], edx

; 143  : 	fd->max_entities = clgame.maxEntities;

	mov	eax, DWORD PTR _fd$[ebp]
	mov	ecx, DWORD PTR _clgame+1012
	mov	DWORD PTR [eax+184], ecx

; 144  : 	fd->demoplayback = cls.demoplayback;

	mov	edx, DWORD PTR _fd$[ebp]
	mov	eax, DWORD PTR _cls+297580
	mov	DWORD PTR [edx+188], eax

; 145  : 	fd->hardware = 1; // OpenGL

	mov	ecx, DWORD PTR _fd$[ebp]
	mov	DWORD PTR [ecx+192], 1

; 146  : 
; 147  : 	if( cl.first_frame || cl.skip_interp )

	cmp	DWORD PTR _cl+68, 0
	jne	SHORT $LN4@V_SetRefPa
	cmp	DWORD PTR _cl+76, 0
	je	SHORT $LN2@V_SetRefPa
$LN4@V_SetRefPa:

; 148  : 	{
; 149  : 		cl.first_frame = false;		// now can be unlocked

	mov	DWORD PTR _cl+68, 0

; 150  : 		fd->smoothing = true;		// NOTE: currently this used to prevent ugly un-duck effect while level is changed

	mov	edx, DWORD PTR _fd$[ebp]
	mov	DWORD PTR [edx+196], 1

; 151  : 	}

	jmp	SHORT $LN3@V_SetRefPa
$LN2@V_SetRefPa:

; 152  : 	else fd->smoothing = cl.local.pushmsec;		// enable smoothing in multiplayer by server request (AMX uses)

	mov	eax, DWORD PTR _fd$[ebp]
	mov	ecx, DWORD PTR _cl+1568580
	mov	DWORD PTR [eax+196], ecx
$LN3@V_SetRefPa:

; 153  : 
; 154  : 	// get pointers to movement vars and user cmd
; 155  : 	fd->movevars = &clgame.movevars;

	mov	edx, DWORD PTR _fd$[ebp]
	mov	DWORD PTR [edx+204], OFFSET _clgame+1028

; 156  : 	fd->cmd = cl.cmd;

	mov	eax, DWORD PTR _fd$[ebp]
	mov	ecx, DWORD PTR _cl+1568604
	mov	DWORD PTR [eax+200], ecx

; 157  : 
; 158  : 	// setup viewport
; 159  : 	fd->viewport[0] = clgame.viewport[0];

	mov	edx, 4
	imul	eax, edx, 0
	mov	ecx, 4
	imul	edx, ecx, 0
	mov	ecx, DWORD PTR _fd$[ebp]
	mov	eax, DWORD PTR _clgame[eax+122640]
	mov	DWORD PTR [ecx+edx+208], eax

; 160  : 	fd->viewport[1] = clgame.viewport[1];

	mov	ecx, 4
	shl	ecx, 0
	mov	edx, 4
	shl	edx, 0
	mov	eax, DWORD PTR _fd$[ebp]
	mov	ecx, DWORD PTR _clgame[ecx+122640]
	mov	DWORD PTR [eax+edx+208], ecx

; 161  : 	fd->viewport[2] = clgame.viewport[2];

	mov	edx, 4
	shl	edx, 1
	mov	eax, 4
	shl	eax, 1
	mov	ecx, DWORD PTR _fd$[ebp]
	mov	edx, DWORD PTR _clgame[edx+122640]
	mov	DWORD PTR [ecx+eax+208], edx

; 162  : 	fd->viewport[3] = clgame.viewport[3];

	mov	eax, 4
	imul	ecx, eax, 3
	mov	edx, 4
	imul	eax, edx, 3
	mov	edx, DWORD PTR _fd$[ebp]
	mov	ecx, DWORD PTR _clgame[ecx+122640]
	mov	DWORD PTR [edx+eax+208], ecx

; 163  : 
; 164  : 	fd->onlyClientDraw = 0;	// reset clientdraw

	mov	edx, DWORD PTR _fd$[ebp]
	mov	DWORD PTR [edx+228], 0

; 165  : 	fd->nextView = 0;		// reset nextview

	mov	eax, DWORD PTR _fd$[ebp]
	mov	DWORD PTR [eax+224], 0

; 166  : }

	mov	esp, ebp
	pop	ebp
	ret	0
_V_SetRefParams ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xash_build4529_src\engine\client\cl_view.c
_TEXT	SEGMENT
_info$ = -8						; size = 4
_view$ = -4						; size = 4
_V_SetupViewModel PROC

; 82   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 83   : 	cl_entity_t	*view = &clgame.viewent;

	mov	DWORD PTR _view$[ebp], OFFSET _clgame+149800

; 84   : 	player_info_t	*info = &cl.players[cl.playernum];

	imul	eax, DWORD PTR _cl+1568828, 584
	add	eax, OFFSET _cl+1543148
	mov	DWORD PTR _info$[ebp], eax

; 85   : 
; 86   : 	if( !cl.local.weaponstarttime )

	movss	xmm0, DWORD PTR _cl+1568600
	ucomiss	xmm0, DWORD PTR __real@00000000
	lahf
	test	ah, 68					; 00000044H
	jp	SHORT $LN2@V_SetupVie

; 87   : 		cl.local.weaponstarttime = cl.time;

	cvtsd2ss xmm0, QWORD PTR _cl+1525848
	movss	DWORD PTR _cl+1568600, xmm0
$LN2@V_SetupVie:

; 88   : 
; 89   : 	// setup the viewent variables
; 90   : 	view->curstate.colormap = (info->topcolor & 0xFFFF)|((info->bottomcolor << 8) & 0xFFFF);

	mov	ecx, DWORD PTR _info$[ebp]
	mov	edx, DWORD PTR [ecx+368]
	and	edx, 65535				; 0000ffffH
	mov	eax, DWORD PTR _info$[ebp]
	mov	ecx, DWORD PTR [eax+372]
	shl	ecx, 8
	and	ecx, 65535				; 0000ffffH
	or	edx, ecx
	mov	eax, DWORD PTR _view$[ebp]
	mov	DWORD PTR [eax+740], edx

; 91   : 	view->curstate.number = cl.playernum + 1;

	mov	ecx, DWORD PTR _cl+1568828
	add	ecx, 1
	mov	edx, DWORD PTR _view$[ebp]
	mov	DWORD PTR [edx+692], ecx

; 92   : 	view->index = cl.playernum + 1;

	mov	eax, DWORD PTR _cl+1568828
	add	eax, 1
	mov	ecx, DWORD PTR _view$[ebp]
	mov	DWORD PTR [ecx], eax

; 93   : 	view->model = CL_ModelHandle( cl.local.viewmodel );

	mov	edx, DWORD PTR _cl+1568552
	push	edx
	call	_CL_ModelHandle
	add	esp, 4
	mov	ecx, DWORD PTR _view$[ebp]
	mov	DWORD PTR [ecx+2964], eax

; 94   : 	view->curstate.modelindex = cl.local.viewmodel;

	mov	edx, DWORD PTR _view$[ebp]
	mov	eax, DWORD PTR _cl+1568552
	mov	DWORD PTR [edx+728], eax

; 95   : 	view->curstate.sequence = cl.local.weaponsequence;

	mov	ecx, DWORD PTR _view$[ebp]
	mov	edx, DWORD PTR _cl+1568596
	mov	DWORD PTR [ecx+732], edx

; 96   : 	view->curstate.rendermode = kRenderNormal;

	mov	eax, DWORD PTR _view$[ebp]
	mov	DWORD PTR [eax+760], 0

; 97   : 
; 98   : 	// alias models has another animation methods
; 99   : 	if( view->model && view->model->type == mod_studio )

	mov	ecx, DWORD PTR _view$[ebp]
	cmp	DWORD PTR [ecx+2964], 0
	je	SHORT $LN3@V_SetupVie
	mov	edx, DWORD PTR _view$[ebp]
	mov	eax, DWORD PTR [edx+2964]
	cmp	DWORD PTR [eax+68], 3
	jne	SHORT $LN3@V_SetupVie

; 100  : 	{
; 101  : 		view->curstate.animtime = cl.local.weaponstarttime;

	mov	ecx, DWORD PTR _view$[ebp]
	movss	xmm0, DWORD PTR _cl+1568600
	movss	DWORD PTR [ecx+780], xmm0

; 102  : 		view->curstate.frame = 0.0f;

	mov	edx, DWORD PTR _view$[ebp]
	xorps	xmm0, xmm0
	movss	DWORD PTR [edx+736], xmm0
$LN3@V_SetupVie:

; 103  : 	}
; 104  : }

	mov	esp, ebp
	pop	ebp
	ret	0
_V_SetupViewModel ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xash_build4529_src\engine\client\cl_view.c
_TEXT	SEGMENT
_full$ = -12						; size = 4
_sb_lines$ = -8						; size = 4
_size$ = -4						; size = 4
_V_CalcViewRect PROC

; 32   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH

; 33   : 	qboolean	full = false;

	mov	DWORD PTR _full$[ebp], 0

; 34   : 	int	sb_lines;
; 35   : 	float	size;
; 36   : 
; 37   : 	// intermission is always full screen	
; 38   : 	if( cl.intermission ) size = 120.0f;

	cmp	DWORD PTR _cl+1568648, 0
	je	SHORT $LN2@V_CalcView
	movss	xmm0, DWORD PTR __real@42f00000
	movss	DWORD PTR _size$[ebp], xmm0
	jmp	SHORT $LN3@V_CalcView
$LN2@V_CalcView:

; 39   : 	else size = scr_viewsize->value;

	mov	eax, DWORD PTR _scr_viewsize
	movss	xmm0, DWORD PTR [eax+12]
	movss	DWORD PTR _size$[ebp], xmm0
$LN3@V_CalcView:

; 40   : 
; 41   : 	if( size >= 120.0f )

	movss	xmm0, DWORD PTR _size$[ebp]
	comiss	xmm0, DWORD PTR __real@42f00000
	jb	SHORT $LN4@V_CalcView

; 42   : 		sb_lines = 0;		// no status bar at all

	mov	DWORD PTR _sb_lines$[ebp], 0
	jmp	SHORT $LN7@V_CalcView
$LN4@V_CalcView:

; 43   : 	else if( size >= 110.0f )

	movss	xmm0, DWORD PTR _size$[ebp]
	comiss	xmm0, DWORD PTR __real@42dc0000
	jb	SHORT $LN6@V_CalcView

; 44   : 		sb_lines = 24;		// no inventory

	mov	DWORD PTR _sb_lines$[ebp], 24		; 00000018H
	jmp	SHORT $LN7@V_CalcView
$LN6@V_CalcView:

; 45   : 	else sb_lines = 48;

	mov	DWORD PTR _sb_lines$[ebp], 48		; 00000030H
$LN7@V_CalcView:

; 46   : 
; 47   : 	if( scr_viewsize->value >= 100.0 )

	mov	ecx, DWORD PTR _scr_viewsize
	cvtss2sd xmm0, DWORD PTR [ecx+12]
	comisd	xmm0, QWORD PTR __real@4059000000000000
	jb	SHORT $LN8@V_CalcView

; 48   : 	{
; 49   : 		full = true;

	mov	DWORD PTR _full$[ebp], 1

; 50   : 		size = 100.0f;

	movss	xmm0, DWORD PTR __real@42c80000
	movss	DWORD PTR _size$[ebp], xmm0

; 51   : 	}

	jmp	SHORT $LN9@V_CalcView
$LN8@V_CalcView:

; 52   : 	else size = scr_viewsize->value;

	mov	edx, DWORD PTR _scr_viewsize
	movss	xmm0, DWORD PTR [edx+12]
	movss	DWORD PTR _size$[ebp], xmm0
$LN9@V_CalcView:

; 53   : 
; 54   : 	if( cl.intermission )

	cmp	DWORD PTR _cl+1568648, 0
	je	SHORT $LN10@V_CalcView

; 55   : 	{
; 56   : 		size = 100.0f;

	movss	xmm0, DWORD PTR __real@42c80000
	movss	DWORD PTR _size$[ebp], xmm0

; 57   : 		sb_lines = 0;

	mov	DWORD PTR _sb_lines$[ebp], 0

; 58   : 		full = true;

	mov	DWORD PTR _full$[ebp], 1
$LN10@V_CalcView:

; 59   : 	}
; 60   : 	size /= 100.0;

	cvtss2sd xmm0, DWORD PTR _size$[ebp]
	divsd	xmm0, QWORD PTR __real@4059000000000000
	cvtsd2ss xmm0, xmm0
	movss	DWORD PTR _size$[ebp], xmm0

; 61   : 
; 62   : 	clgame.viewport[2] = glState.width * size;

	cvtsi2ss xmm0, DWORD PTR _glState
	mulss	xmm0, DWORD PTR _size$[ebp]
	mov	eax, 4
	shl	eax, 1
	cvttss2si ecx, xmm0
	mov	DWORD PTR _clgame[eax+122640], ecx

; 63   : 	clgame.viewport[3] = glState.height * size;

	cvtsi2ss xmm0, DWORD PTR _glState+4
	mulss	xmm0, DWORD PTR _size$[ebp]
	mov	edx, 4
	imul	eax, edx, 3
	cvttss2si ecx, xmm0
	mov	DWORD PTR _clgame[eax+122640], ecx

; 64   : 
; 65   : 	if( clgame.viewport[3] > glState.height - sb_lines )

	mov	edx, 4
	imul	eax, edx, 3
	mov	ecx, DWORD PTR _glState+4
	sub	ecx, DWORD PTR _sb_lines$[ebp]
	cmp	DWORD PTR _clgame[eax+122640], ecx
	jle	SHORT $LN11@V_CalcView

; 66   : 		clgame.viewport[3] = glState.height - sb_lines;

	mov	edx, DWORD PTR _glState+4
	sub	edx, DWORD PTR _sb_lines$[ebp]
	mov	eax, 4
	imul	ecx, eax, 3
	mov	DWORD PTR _clgame[ecx+122640], edx
$LN11@V_CalcView:

; 67   : 	if( clgame.viewport[3] > glState.height )

	mov	edx, 4
	imul	eax, edx, 3
	mov	ecx, DWORD PTR _clgame[eax+122640]
	cmp	ecx, DWORD PTR _glState+4
	jle	SHORT $LN12@V_CalcView

; 68   : 		clgame.viewport[3] = glState.height;

	mov	edx, 4
	imul	eax, edx, 3
	mov	ecx, DWORD PTR _glState+4
	mov	DWORD PTR _clgame[eax+122640], ecx
$LN12@V_CalcView:

; 69   : 
; 70   : 	clgame.viewport[0] = ( glState.width - clgame.viewport[2] ) / 2;

	mov	edx, 4
	shl	edx, 1
	mov	eax, DWORD PTR _glState
	sub	eax, DWORD PTR _clgame[edx+122640]
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	ecx, 4
	imul	edx, ecx, 0
	mov	DWORD PTR _clgame[edx+122640], eax

; 71   : 	if( full ) clgame.viewport[1] = 0;

	cmp	DWORD PTR _full$[ebp], 0
	je	SHORT $LN13@V_CalcView
	mov	eax, 4
	shl	eax, 0
	mov	DWORD PTR _clgame[eax+122640], 0
	jmp	SHORT $LN14@V_CalcView
$LN13@V_CalcView:

; 72   : 	else clgame.viewport[1] = ( glState.height - sb_lines - clgame.viewport[3] ) / 2;

	mov	eax, DWORD PTR _glState+4
	sub	eax, DWORD PTR _sb_lines$[ebp]
	mov	ecx, 4
	imul	edx, ecx, 3
	sub	eax, DWORD PTR _clgame[edx+122640]
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	ecx, 4
	shl	ecx, 0
	mov	DWORD PTR _clgame[ecx+122640], eax
$LN14@V_CalcView:

; 73   : 
; 74   : }

	mov	esp, ebp
	pop	ebp
	ret	0
_V_CalcViewRect ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xash_build4529_src\engine\client\cl_view.c
_TEXT	SEGMENT
_viewnum$ = -296					; size = 4
_rp$ = -292						; size = 232
_rvp$ = -60						; size = 56
__$ArrayPad$ = -4					; size = 4
_V_RenderView PROC

; 310  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 296				; 00000128H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 311  : 	ref_params_t	rp;
; 312  : 	ref_viewpass_t	rvp;
; 313  : 	int		viewnum = 0;

	mov	DWORD PTR _viewnum$[ebp], 0

; 314  : 
; 315  : 	if( !cl.video_prepped || ( UI_IsVisible() && !cl.background ))

	cmp	DWORD PTR _cl+16, 0
	je	SHORT $LN6@V_RenderVi
	call	_UI_IsVisible
	test	eax, eax
	je	SHORT $LN5@V_RenderVi
	cmp	DWORD PTR _cl+64, 0
	jne	SHORT $LN5@V_RenderVi
$LN6@V_RenderVi:

; 316  : 		return; // still loading

	jmp	$LN1@V_RenderVi
$LN5@V_RenderVi:

; 317  : 
; 318  : 	V_CalcViewRect ();	// compute viewport rectangle

	call	_V_CalcViewRect

; 319  : 	V_SetRefParams( &rp );

	lea	eax, DWORD PTR _rp$[ebp]
	push	eax
	call	_V_SetRefParams
	add	esp, 4

; 320  : 	V_SetupViewModel ();

	call	_V_SetupViewModel

; 321  : 	R_Set2DMode( false );

	push	0
	call	_R_Set2DMode
	add	esp, 4

; 322  : 	SCR_DirtyScreen();

	call	_SCR_DirtyScreen

; 323  : 	GL_BackendStartFrame ();

	call	_GL_BackendStartFrame
$LN4@V_RenderVi:

; 324  : 
; 325  : 	do
; 326  : 	{
; 327  : 		clgame.dllFuncs.pfnCalcRefdef( &rp );

	lea	ecx, DWORD PTR _rp$[ebp]
	push	ecx
	call	DWORD PTR _clgame+80
	add	esp, 4

; 328  : 		V_GetRefParams( &rp, &rvp );

	lea	edx, DWORD PTR _rvp$[ebp]
	push	edx
	lea	eax, DWORD PTR _rp$[ebp]
	push	eax
	call	_V_GetRefParams
	add	esp, 8

; 329  : 		V_RefApplyOverview( &rvp );

	lea	ecx, DWORD PTR _rvp$[ebp]
	push	ecx
	call	_V_RefApplyOverview
	add	esp, 4

; 330  : 
; 331  : 		if( viewnum == 0 && FBitSet( rvp.flags, RF_ONLY_CLIENTDRAW ))

	cmp	DWORD PTR _viewnum$[ebp], 0
	jne	SHORT $LN7@V_RenderVi
	mov	edx, DWORD PTR _rvp$[ebp+52]
	and	edx, 8
	je	SHORT $LN7@V_RenderVi

; 332  : 		{
; 333  : 			pglClearColor( 0.0f, 0.0f, 0.0f, 0.0f );

	push	ecx
	xorps	xmm0, xmm0
	movss	DWORD PTR [esp], xmm0
	push	ecx
	xorps	xmm0, xmm0
	movss	DWORD PTR [esp], xmm0
	push	ecx
	xorps	xmm0, xmm0
	movss	DWORD PTR [esp], xmm0
	push	ecx
	xorps	xmm0, xmm0
	movss	DWORD PTR [esp], xmm0
	call	DWORD PTR _pglClearColor

; 334  : 			pglClear( GL_COLOR_BUFFER_BIT );

	push	16384					; 00004000H
	call	DWORD PTR _pglClear
$LN7@V_RenderVi:

; 335  : 		}
; 336  : 
; 337  : 		R_RenderFrame( &rvp );

	lea	eax, DWORD PTR _rvp$[ebp]
	push	eax
	call	_R_RenderFrame
	add	esp, 4

; 338  : 		S_UpdateFrame( &rvp );

	lea	ecx, DWORD PTR _rvp$[ebp]
	push	ecx
	call	_S_UpdateFrame
	add	esp, 4

; 339  : 		viewnum++;

	mov	edx, DWORD PTR _viewnum$[ebp]
	add	edx, 1
	mov	DWORD PTR _viewnum$[ebp], edx

; 340  : 
; 341  : 	} while( rp.nextView );

	cmp	DWORD PTR _rp$[ebp+224], 0
	jne	$LN4@V_RenderVi

; 342  : 
; 343  : 	// draw debug triangles on a server
; 344  : 	SV_DrawDebugTriangles ();

	call	_SV_DrawDebugTriangles

; 345  : 	GL_BackendEndFrame ();

	call	_GL_BackendEndFrame
$LN1@V_RenderVi:

; 346  : }

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_V_RenderView ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xash_build4529_src\engine\client\cl_view.c
_TEXT	SEGMENT
_draw_2d$ = -8						; size = 4
tv71 = -4						; size = 4
_V_PostRender PROC

; 355  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 356  : 	static double	oldtime;
; 357  : 	qboolean		draw_2d = false;

	mov	DWORD PTR _draw_2d$[ebp], 0

; 358  : 
; 359  : 	R_AllowFog( false );

	push	0
	call	_R_AllowFog
	add	esp, 4

; 360  : 	R_Set2DMode( true );

	push	1
	call	_R_Set2DMode
	add	esp, 4

; 361  : 
; 362  : 	if( cls.state == ca_active && cls.signon == SIGNONS && cls.scrshot_action != scrshot_mapshot )

	cmp	DWORD PTR _cls, 4
	jne	SHORT $LN4@V_PostRend
	cmp	DWORD PTR _cls+64, 2
	jne	SHORT $LN4@V_PostRend
	cmp	DWORD PTR _cls+293060, 7
	je	SHORT $LN4@V_PostRend

; 363  : 	{
; 364  : 		SCR_TileClear();

	call	_SCR_TileClear

; 365  : 		CL_DrawHUD( CL_ACTIVE );

	push	2
	call	_CL_DrawHUD
	add	esp, 4

; 366  : 		VGui_Paint( true );

	push	1
	call	_VGui_Paint
	add	esp, 4
$LN4@V_PostRend:

; 367  : 	}
; 368  : 
; 369  : 	switch( cls.scrshot_action )

	mov	eax, DWORD PTR _cls+293060
	mov	DWORD PTR tv71[ebp], eax
	cmp	DWORD PTR tv71[ebp], 0
	jl	SHORT $LN2@V_PostRend
	cmp	DWORD PTR tv71[ebp], 2
	jle	SHORT $LN5@V_PostRend
	jmp	SHORT $LN2@V_PostRend
$LN5@V_PostRend:

; 370  : 	{
; 371  : 	case scrshot_inactive:
; 372  : 	case scrshot_normal:
; 373  : 	case scrshot_snapshot:
; 374  : 		draw_2d = true;

	mov	DWORD PTR _draw_2d$[ebp], 1
$LN2@V_PostRend:

; 375  : 		break;
; 376  : 	}
; 377  : 
; 378  : 	if( draw_2d )

	cmp	DWORD PTR _draw_2d$[ebp], 0
	je	SHORT $LN6@V_PostRend

; 379  : 	{
; 380  : 		SCR_RSpeeds();

	call	_SCR_RSpeeds

; 381  : 		SCR_NetSpeeds();

	call	_SCR_NetSpeeds

; 382  : 		SCR_DrawNetGraph();

	call	_SCR_DrawNetGraph

; 383  : 		SV_DrawOrthoTriangles();

	call	_SV_DrawOrthoTriangles

; 384  : 		CL_DrawDemoRecording();

	call	_CL_DrawDemoRecording

; 385  : 		CL_DrawHUD( CL_CHANGELEVEL );

	push	4
	call	_CL_DrawHUD
	add	esp, 4

; 386  : 		R_ShowTextures();

	call	_R_ShowTextures

; 387  : 		R_ShowTree();

	call	_R_ShowTree

; 388  : 		Con_DrawConsole();

	call	_Con_DrawConsole

; 389  : 		UI_UpdateMenu( host.realtime );

	cvtsd2ss xmm0, QWORD PTR _host+1440
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	_UI_UpdateMenu
	add	esp, 4

; 390  : 		Con_DrawVersion();

	call	_Con_DrawVersion

; 391  : 		Con_DrawDebug(); // must be last

	call	_Con_DrawDebug

; 392  : 
; 393  : 		S_ExtraUpdate();

	call	_S_ExtraUpdate
$LN6@V_PostRend:

; 394  : 	}
; 395  : 
; 396  : 	SCR_MakeScreenShot();

	call	_SCR_MakeScreenShot

; 397  : 	R_AllowFog( true );

	push	1
	call	_R_AllowFog
	add	esp, 4

; 398  : 	R_EndFrame();

	call	_R_EndFrame

; 399  : }

	mov	esp, ebp
	pop	ebp
	ret	0
_V_PostRender ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xash_build4529_src\engine\client\cl_view.c
_TEXT	SEGMENT
tv77 = -4						; size = 4
_V_PreRender PROC

; 274  : {

	push	ebp
	mov	ebp, esp
	push	ecx

; 275  : 	// too early
; 276  : 	if( !glw_state.initialized )

	cmp	DWORD PTR _glw_state+20, 0
	jne	SHORT $LN2@V_PreRende

; 277  : 		return false;

	xor	eax, eax
	jmp	$LN1@V_PreRende
$LN2@V_PreRende:

; 278  : 
; 279  : 	if( host.status == HOST_NOFOCUS )

	cmp	DWORD PTR _host+12, 5
	jne	SHORT $LN3@V_PreRende

; 280  : 		return false;

	xor	eax, eax
	jmp	$LN1@V_PreRende
$LN3@V_PreRende:

; 281  : 
; 282  : 	if( host.status == HOST_SLEEP )

	cmp	DWORD PTR _host+12, 4
	jne	SHORT $LN4@V_PreRende

; 283  : 		return false;

	xor	eax, eax
	jmp	$LN1@V_PreRende
$LN4@V_PreRende:

; 284  : 
; 285  : 	// if the screen is disabled (loading plaque is up)
; 286  : 	if( cls.disable_screen )

	movss	xmm0, DWORD PTR _cls+24
	ucomiss	xmm0, DWORD PTR __real@00000000
	lahf
	test	ah, 68					; 00000044H
	jnp	SHORT $LN5@V_PreRende

; 287  : 	{
; 288  : 		if(( host.realtime - cls.disable_screen ) > cl_timeout->value )

	cvtss2sd xmm0, DWORD PTR _cls+24
	movsd	xmm1, QWORD PTR _host+1440
	subsd	xmm1, xmm0
	mov	eax, DWORD PTR _cl_timeout
	cvtss2sd xmm0, DWORD PTR [eax+12]
	comisd	xmm1, xmm0
	jbe	SHORT $LN6@V_PreRende

; 289  : 		{
; 290  : 			Con_Reportf( "V_PreRender: loading plaque timed out\n" );

	push	OFFSET $SG143911
	call	_Con_Reportf
	add	esp, 4

; 291  : 			cls.disable_screen = 0.0f;

	xorps	xmm0, xmm0
	movss	DWORD PTR _cls+24, xmm0
$LN6@V_PreRende:

; 292  : 		}
; 293  : 		return false;

	xor	eax, eax
	jmp	SHORT $LN1@V_PreRende
$LN5@V_PreRende:

; 294  : 	}
; 295  : 	
; 296  : 	R_BeginFrame( !cl.paused && ( cls.state == ca_active ));

	cmp	DWORD PTR _cl+24, 0
	jne	SHORT $LN8@V_PreRende
	cmp	DWORD PTR _cls, 4
	jne	SHORT $LN8@V_PreRende
	mov	DWORD PTR tv77[ebp], 1
	jmp	SHORT $LN9@V_PreRende
$LN8@V_PreRende:
	mov	DWORD PTR tv77[ebp], 0
$LN9@V_PreRende:
	mov	ecx, DWORD PTR tv77[ebp]
	push	ecx
	call	_R_BeginFrame
	add	esp, 4

; 297  : 
; 298  : 	return true;

	mov	eax, 1
$LN1@V_PreRende:

; 299  : }

	mov	esp, ebp
	pop	ebp
	ret	0
_V_PreRender ENDP
_TEXT	ENDS
END
