; Listing generated by Microsoft (R) Optimizing Compiler Version 19.16.27045.0 

	TITLE	C:\Users\USER\Downloads\xash_build4529_src\engine\common\cvar.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	_cvar_vars
_DATA	SEGMENT
COMM	_cmd_scripting:DWORD
_DATA	ENDS
_BSS	SEGMENT
_cvar_vars DD	01H DUP (?)
_BSS	ENDS
PUBLIC	_Cvar_FindVarExt
PUBLIC	_Cvar_RegisterVariable
PUBLIC	_Cvar_Get
PUBLIC	_Cvar_LookupVars
PUBLIC	_Cvar_FullSet
PUBLIC	_Cvar_DirectSet
PUBLIC	_Cvar_Set
PUBLIC	_Cvar_SetValue
PUBLIC	_Cvar_BuildAutoDescription
PUBLIC	_Cvar_VariableValue
PUBLIC	_Cvar_VariableInteger
PUBLIC	_Cvar_VariableString
PUBLIC	_Cvar_WriteVariables
PUBLIC	_Cvar_Exists
PUBLIC	_Cvar_Reset
PUBLIC	_Cvar_SetCheatState
PUBLIC	_Cvar_Command
PUBLIC	_Cvar_Init
PUBLIC	_Cvar_Unlink
PUBLIC	_Cvar_ValidateString
PUBLIC	_Cvar_UnlinkVar
PUBLIC	_Cvar_Toggle_f
PUBLIC	_Cvar_SetGL_f
PUBLIC	_Cvar_Reset_f
PUBLIC	_Cvar_List_f
PUBLIC	__real@00000000
PUBLIC	__real@3eb0c6f7a0b5ed8d
EXTRN	___report_rangecheckfailure:PROC
EXTRN	_Sys_Error:PROC
EXTRN	_Cmd_Argc:PROC
EXTRN	_Cmd_Argv:PROC
EXTRN	_Cmd_AddCommand:PROC
EXTRN	_Cmd_Exists:PROC
EXTRN	_Q_strlen:PROC
EXTRN	_Q_colorstr:PROC
EXTRN	_Q_strncat:PROC
EXTRN	_Q_strncpy:PROC
EXTRN	__copystring:PROC
EXTRN	_Q_atoi:PROC
EXTRN	_Q_atof:PROC
EXTRN	_Q_strnicmp:PROC
EXTRN	_Q_strncmp:PROC
EXTRN	_Q_stricmpext:PROC
EXTRN	_Q_snprintf:PROC
EXTRN	_va:PROC
EXTRN	__Mem_Alloc:PROC
EXTRN	__Mem_Free:PROC
EXTRN	_DBG_AssertFunction:PROC
EXTRN	_FS_Printf:PROC
EXTRN	_CL_Active:PROC
EXTRN	_SV_Active:PROC
EXTRN	_Con_Reportf:PROC
EXTRN	_Con_DPrintf:PROC
EXTRN	_Con_Printf:PROC
EXTRN	_CL_Userinfo:PROC
EXTRN	_Log_Printf:PROC
EXTRN	_SV_BroadcastCommand:PROC
EXTRN	_SV_BroadcastPrintf:PROC
EXTRN	_CL_ServerCommand:PROC
EXTRN	_CL_GetMaxClients:PROC
EXTRN	_SV_Serverinfo:PROC
EXTRN	_Info_SetValueForKey:PROC
EXTRN	_fabs:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	_host_developer:BYTE
EXTRN	_host:BYTE
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
_BSS	SEGMENT
?desc@?1??Cvar_BuildAutoDescription@@9@9 DB 080H DUP (?) ; `Cvar_BuildAutoDescription'::`2'::desc
?szNew@?1??Cvar_ValidateString@@9@9 DB 0100H DUP (?)	; `Cvar_ValidateString'::`2'::szNew
$SG131067 DB	01H DUP (?)
	ALIGN	4

$SG131099 DB	01H DUP (?)
	ALIGN	4

$SG131181 DB	01H DUP (?)
	ALIGN	4

$SG131224 DB	01H DUP (?)
_BSS	ENDS
;	COMDAT __real@3eb0c6f7a0b5ed8d
CONST	SEGMENT
__real@3eb0c6f7a0b5ed8d DQ 03eb0c6f7a0b5ed8dr	; 1e-06
CONST	ENDS
;	COMDAT __real@00000000
CONST	SEGMENT
__real@00000000 DD 000000000r			; 0
CONST	ENDS
_DATA	SEGMENT
$SG130939 DB	'game ', 00H
	ORG $+2
$SG130942 DB	'client ', 00H
$SG130944 DB	'GameUI ', 00H
$SG130946 DB	'server ', 00H
$SG130948 DB	'user ', 00H
	ORG $+2
$SG130950 DB	'archived ', 00H
	ORG $+2
$SG130951 DB	'cvar', 00H
	ORG $+3
$SG130965 DB	'fullserverinfo "%s"', 0aH, 00H
	ORG $+3
$SG130967 DB	'setinfo "%s" "%s"', 0aH, 00H
	ORG $+1
$SG130972 DB	'***PROTECTED***', 00H
$SG130973 DB	'Server cvar "%s" = "%s"', 0aH, 00H
	ORG $+3
$SG130974 DB	'***PROTECTED***', 00H
$SG130975 DB	'"%s" changed to "%s"', 0aH, 00H
	ORG $+2
$SG130976 DB	'Server cvar "%s" = "%s"', 0aH, 00H
	ORG $+3
$SG130977 DB	'"%s" changed to "%s"', 0aH, 00H
	ORG $+2
$SG131000 DB	'empty', 00H
	ORG $+2
$SG131026 DB	'c:\users\user\downloads\xash_build4529_src\engine\common'
	DB	'\cvar.c', 00H
$SG131029 DB	'c:\users\user\downloads\xash_build4529_src\engine\common'
	DB	'\cvar.c', 00H
$SG131031 DB	'c:\users\user\downloads\xash_build4529_src\engine\common'
	DB	'\cvar.c', 00H
$SG131033 DB	'c:\users\user\downloads\xash_build4529_src\engine\common'
	DB	'\cvar.c', 00H
$SG131034 DB	'c:\users\user\downloads\xash_build4529_src\engine\common'
	DB	'\cvar.c', 00H
$SG131041 DB	'c:\users\user\downloads\xash_build4529_src\engine\common'
	DB	'\cvar.c', 00H
$SG131042 DB	'var != NULL', 00H
$SG131047 DB	'sv_cheats', 00H
	ORG $+2
$SG131091 DB	'c:\users\user\downloads\xash_build4529_src\engine\common'
	DB	'\cvar.c', 00H
$SG131092 DB	'assert failed at %s:%i', 0aH, 00H
$SG131094 DB	'^1Error:^7 can''t register variable ''%s'', is already d'
	DB	'efined as command', 0aH, 00H
$SG131101 DB	'c:\users\user\downloads\xash_build4529_src\engine\common'
	DB	'\cvar.c', 00H
$SG131102 DB	'c:\users\user\downloads\xash_build4529_src\engine\common'
	DB	'\cvar.c', 00H
$SG131105 DB	'%s change description from %s to %s', 0aH, 00H
	ORG $+3
$SG131107 DB	'c:\users\user\downloads\xash_build4529_src\engine\common'
	DB	'\cvar.c', 00H
$SG131108 DB	'c:\users\user\downloads\xash_build4529_src\engine\common'
	DB	'\cvar.c', 00H
$SG131109 DB	'c:\users\user\downloads\xash_build4529_src\engine\common'
	DB	'\cvar.c', 00H
$SG131110 DB	'c:\users\user\downloads\xash_build4529_src\engine\common'
	DB	'\cvar.c', 00H
$SG131111 DB	'c:\users\user\downloads\xash_build4529_src\engine\common'
	DB	'\cvar.c', 00H
$SG131112 DB	'c:\users\user\downloads\xash_build4529_src\engine\common'
	DB	'\cvar.c', 00H
$SG131113 DB	'c:\users\user\downloads\xash_build4529_src\engine\common'
	DB	'\cvar.c', 00H
$SG131129 DB	'c:\users\user\downloads\xash_build4529_src\engine\common'
	DB	'\cvar.c', 00H
$SG131130 DB	'assert failed at %s:%i', 0aH, 00H
$SG131133 DB	'^1Error:^7 can''t register variable ''%s'', is already d'
	DB	'efined', 0aH, 00H
	ORG $+3
$SG131135 DB	'^1Error:^7 can''t register variable ''%s'', is already d'
	DB	'efined as command', 0aH, 00H
$SG131138 DB	'c:\users\user\downloads\xash_build4529_src\engine\common'
	DB	'\cvar.c', 00H
$SG131156 DB	'%s is read-only.', 0aH, 00H
	ORG $+2
$SG131158 DB	'%s is cheat protected.', 0aH, 00H
$SG131161 DB	'%s will be changed upon restarting.', 0aH, 00H
	ORG $+3
$SG131164 DB	'%s has no default value and can''t be reset.', 0aH, 00H
	ORG $+3
$SG131192 DB	'Cvar_Set: variable ''%s'' not found', 0aH, 00H
	ORG $+1
$SG131168 DB	'c:\users\user\downloads\xash_build4529_src\engine\common'
	DB	'\cvar.c', 00H
$SG131169 DB	'c:\users\user\downloads\xash_build4529_src\engine\common'
	DB	'\cvar.c', 00H
$SG131183 DB	'c:\users\user\downloads\xash_build4529_src\engine\common'
	DB	'\cvar.c', 00H
$SG131184 DB	'c:\users\user\downloads\xash_build4529_src\engine\common'
	DB	'\cvar.c', 00H
$SG131203 DB	'%d', 00H
	ORG $+1
$SG131204 DB	'%f', 00H
	ORG $+1
$SG131246 DB	'"%s" is "%s" ( ^3"%s"^7 )', 0aH, 00H
	ORG $+1
$SG131247 DB	'"%s" is "%s"', 0aH, 00H
	ORG $+2
$SG131252 DB	'can''t set "%s" in multiplayer', 0aH, 00H
	ORG $+1
$SG131264 DB	'%s "%s"', 0aH, 00H
	ORG $+3
$SG131270 DB	'Usage: toggle <variable>', 0aH, 00H
	ORG $+2
$SG131271 DB	'%i', 00H
	ORG $+1
$SG131276 DB	'Usage: setgl <variable> <value>', 0aH, 00H
	ORG $+3
$SG131281 DB	'Usage: reset <variable>', 0aH, 00H
	ORG $+3
$SG131298 DB	'"%s"', 00H
	ORG $+3
$SG131299 DB	'"^2%s^7"', 00H
	ORG $+3
$SG131302 DB	' %-*s %s ^3%s^7', 0aH, 00H
	ORG $+3
$SG131303 DB	' %-*s %s ^3%s^7', 0aH, 00H
	ORG $+3
$SG131304 DB	0aH, '%i cvars', 0aH, 00H
	ORG $+1
$SG131311 DB	'host_gameloaded', 00H
$SG131313 DB	'host_clientloaded', 00H
	ORG $+2
$SG131315 DB	'host_gameuiloaded', 00H
	ORG $+2
$SG131316 DB	'unlink %i cvars', 0aH, 00H
	ORG $+3
$SG131320 DB	'enable simple condition checking and variable operations'
	DB	00H
	ORG $+3
$SG131321 DB	'0', 00H
	ORG $+2
$SG131322 DB	'cmd_scripting', 00H
	ORG $+2
$SG131323 DB	'create or change the value of a opengl variable', 00H
$SG131324 DB	'setgl', 00H
	ORG $+2
$SG131325 DB	'toggles a console variable''s values (use for more info)'
	DB	00H
$SG131326 DB	'toggle', 00H
	ORG $+1
$SG131327 DB	'reset any type variable to initial value', 00H
	ORG $+3
$SG131328 DB	'reset', 00H
	ORG $+2
$SG131329 DB	'display all console variables beginning with the specifi'
	DB	'ed prefix', 00H
	ORG $+2
$SG131330 DB	'cvarlist', 00H
_DATA	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xash_build4529_src\engine\common\cvar.c
_TEXT	SEGMENT
_count$ = -16						; size = 4
_value$ = -12						; size = 4
_match$ = -8						; size = 4
_var$ = -4						; size = 4
_Cvar_List_f PROC

; 813  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H

; 814  : 	convar_t	*var;
; 815  : 	char	*match = NULL;

	mov	DWORD PTR _match$[ebp], 0

; 816  : 	char	*value;
; 817  : 	int	count = 0;

	mov	DWORD PTR _count$[ebp], 0

; 818  : 
; 819  : 	if( Cmd_Argc() > 1 )

	call	_Cmd_Argc
	cmp	eax, 1
	jbe	SHORT $LN5@Cvar_List_

; 820  : 		match = Cmd_Argv( 1 );

	push	1
	call	_Cmd_Argv
	add	esp, 4
	mov	DWORD PTR _match$[ebp], eax
$LN5@Cvar_List_:

; 821  : 
; 822  : 	for( var = cvar_vars; var; var = var->next )

	mov	eax, DWORD PTR _cvar_vars
	mov	DWORD PTR _var$[ebp], eax
	jmp	SHORT $LN4@Cvar_List_
$LN2@Cvar_List_:
	mov	ecx, DWORD PTR _var$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	DWORD PTR _var$[ebp], edx
$LN4@Cvar_List_:
	cmp	DWORD PTR _var$[ebp], 0
	je	$LN3@Cvar_List_

; 823  : 	{
; 824  : 		if( var->name[0] == '@' )

	mov	eax, 1
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _var$[ebp]
	mov	eax, DWORD PTR [edx]
	movsx	ecx, BYTE PTR [eax+ecx]
	cmp	ecx, 64					; 00000040H
	jne	SHORT $LN6@Cvar_List_

; 825  : 			continue;	// never shows system cvars

	jmp	SHORT $LN2@Cvar_List_
$LN6@Cvar_List_:

; 826  : 
; 827  : 		if( match && !Q_stricmpext( match, var->name ))

	cmp	DWORD PTR _match$[ebp], 0
	je	SHORT $LN7@Cvar_List_
	mov	edx, DWORD PTR _var$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	mov	ecx, DWORD PTR _match$[ebp]
	push	ecx
	call	_Q_stricmpext
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN7@Cvar_List_

; 828  : 			continue;

	jmp	SHORT $LN2@Cvar_List_
$LN7@Cvar_List_:

; 829  : 
; 830  : 		if( Q_colorstr( var->string ))

	mov	edx, DWORD PTR _var$[ebp]
	mov	eax, DWORD PTR [edx+4]
	push	eax
	call	_Q_colorstr
	add	esp, 4
	test	eax, eax
	je	SHORT $LN8@Cvar_List_

; 831  : 			value = va( "\"%s\"", var->string );

	mov	ecx, DWORD PTR _var$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	push	OFFSET $SG131298
	call	_va
	add	esp, 8
	mov	DWORD PTR _value$[ebp], eax
	jmp	SHORT $LN9@Cvar_List_
$LN8@Cvar_List_:

; 832  : 		else value = va( "\"^2%s^7\"", var->string );

	mov	eax, DWORD PTR _var$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	push	OFFSET $SG131299
	call	_va
	add	esp, 8
	mov	DWORD PTR _value$[ebp], eax
$LN9@Cvar_List_:

; 833  : 
; 834  : 		if( FBitSet( var->flags, FCVAR_EXTENDED|FCVAR_ALLOCATED ))

	mov	edx, DWORD PTR _var$[ebp]
	mov	eax, DWORD PTR [edx+8]
	and	eax, 786432				; 000c0000H
	je	SHORT $LN10@Cvar_List_

; 835  : 			Con_Printf( " %-*s %s ^3%s^7\n", 32, var->name, value, var->desc );

	mov	ecx, DWORD PTR _var$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	push	edx
	mov	eax, DWORD PTR _value$[ebp]
	push	eax
	mov	ecx, DWORD PTR _var$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	push	32					; 00000020H
	push	OFFSET $SG131302
	call	_Con_Printf
	add	esp, 20					; 00000014H
	jmp	SHORT $LN11@Cvar_List_
$LN10@Cvar_List_:

; 836  : 		else Con_Printf( " %-*s %s ^3%s^7\n", 32, var->name, value, Cvar_BuildAutoDescription( var->flags ));

	mov	eax, DWORD PTR _var$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	call	_Cvar_BuildAutoDescription
	add	esp, 4
	push	eax
	mov	edx, DWORD PTR _value$[ebp]
	push	edx
	mov	eax, DWORD PTR _var$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	push	32					; 00000020H
	push	OFFSET $SG131303
	call	_Con_Printf
	add	esp, 20					; 00000014H
$LN11@Cvar_List_:

; 837  : 
; 838  : 		count++;

	mov	edx, DWORD PTR _count$[ebp]
	add	edx, 1
	mov	DWORD PTR _count$[ebp], edx

; 839  : 	}

	jmp	$LN2@Cvar_List_
$LN3@Cvar_List_:

; 840  : 
; 841  : 	Con_Printf( "\n%i cvars\n", count );

	mov	eax, DWORD PTR _count$[ebp]
	push	eax
	push	OFFSET $SG131304
	call	_Con_Printf
	add	esp, 8

; 842  : }

	mov	esp, ebp
	pop	ebp
	ret	0
_Cvar_List_f ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xash_build4529_src\engine\common\cvar.c
_TEXT	SEGMENT
_Cvar_Reset_f PROC

; 797  : {

	push	ebp
	mov	ebp, esp

; 798  : 	if( Cmd_Argc() != 2 )

	call	_Cmd_Argc
	cmp	eax, 2
	je	SHORT $LN2@Cvar_Reset

; 799  : 	{
; 800  : 		Con_Printf( S_USAGE "reset <variable>\n" );

	push	OFFSET $SG131281
	call	_Con_Printf
	add	esp, 4

; 801  : 		return;

	jmp	SHORT $LN1@Cvar_Reset
$LN2@Cvar_Reset:

; 802  : 	}
; 803  : 
; 804  : 	Cvar_Reset( Cmd_Argv( 1 ));

	push	1
	call	_Cmd_Argv
	add	esp, 4
	push	eax
	call	_Cvar_Reset
	add	esp, 4
$LN1@Cvar_Reset:

; 805  : }

	pop	ebp
	ret	0
_Cvar_Reset_f ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xash_build4529_src\engine\common\cvar.c
_TEXT	SEGMENT
_Cvar_SetGL_f PROC

; 781  : {

	push	ebp
	mov	ebp, esp

; 782  : 	if( Cmd_Argc() != 3 )

	call	_Cmd_Argc
	cmp	eax, 3
	je	SHORT $LN2@Cvar_SetGL

; 783  : 	{
; 784  : 		Con_Printf( S_USAGE "setgl <variable> <value>\n" );

	push	OFFSET $SG131276
	call	_Con_Printf
	add	esp, 4

; 785  : 		return;

	jmp	SHORT $LN1@Cvar_SetGL
$LN2@Cvar_SetGL:

; 786  : 	}
; 787  : 
; 788  : 	Cvar_FullSet( Cmd_Argv( 1 ), Cmd_Argv( 2 ), FCVAR_GLCONFIG );

	push	4096					; 00001000H
	push	2
	call	_Cmd_Argv
	add	esp, 4
	push	eax
	push	1
	call	_Cmd_Argv
	add	esp, 4
	push	eax
	call	_Cvar_FullSet
	add	esp, 12					; 0000000cH
$LN1@Cvar_SetGL:

; 789  : }

	pop	ebp
	ret	0
_Cvar_SetGL_f ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xash_build4529_src\engine\common\cvar.c
_TEXT	SEGMENT
_v$ = -8						; size = 4
tv72 = -4						; size = 4
_Cvar_Toggle_f PROC

; 759  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 760  : 	int	v;
; 761  : 
; 762  : 	if( Cmd_Argc() != 2 )

	call	_Cmd_Argc
	cmp	eax, 2
	je	SHORT $LN2@Cvar_Toggl

; 763  : 	{
; 764  : 		Con_Printf( S_USAGE "toggle <variable>\n" );

	push	OFFSET $SG131270
	call	_Con_Printf
	add	esp, 4

; 765  : 		return;

	jmp	SHORT $LN1@Cvar_Toggl
$LN2@Cvar_Toggl:

; 766  : 	}
; 767  : 
; 768  : 	v = !Cvar_VariableInteger( Cmd_Argv( 1 ));

	push	1
	call	_Cmd_Argv
	add	esp, 4
	push	eax
	call	_Cvar_VariableInteger
	add	esp, 4
	test	eax, eax
	jne	SHORT $LN4@Cvar_Toggl
	mov	DWORD PTR tv72[ebp], 1
	jmp	SHORT $LN5@Cvar_Toggl
$LN4@Cvar_Toggl:
	mov	DWORD PTR tv72[ebp], 0
$LN5@Cvar_Toggl:
	mov	eax, DWORD PTR tv72[ebp]
	mov	DWORD PTR _v$[ebp], eax

; 769  : 
; 770  : 	Cvar_Set( Cmd_Argv( 1 ), va( "%i", v ));

	mov	ecx, DWORD PTR _v$[ebp]
	push	ecx
	push	OFFSET $SG131271
	call	_va
	add	esp, 8
	push	eax
	push	1
	call	_Cmd_Argv
	add	esp, 4
	push	eax
	call	_Cvar_Set
	add	esp, 8
$LN1@Cvar_Toggl:

; 771  : }

	mov	esp, ebp
	pop	ebp
	ret	0
_Cvar_Toggle_f ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xash_build4529_src\engine\common\cvar.c
_TEXT	SEGMENT
tv69 = -4						; size = 4
_var$ = 8						; size = 4
_Cvar_Changed PROC

; 254  : {

	push	ebp
	mov	ebp, esp
	push	ecx

; 255  : 	Assert( var != NULL );

	cmp	DWORD PTR _var$[ebp], 0
	je	SHORT $LN7@Cvar_Chang
	mov	DWORD PTR tv69[ebp], 1
	jmp	SHORT $LN8@Cvar_Chang
$LN7@Cvar_Chang:
	mov	DWORD PTR tv69[ebp], 0
$LN8@Cvar_Chang:
	push	0
	push	255					; 000000ffH
	push	OFFSET $SG131041
	push	OFFSET $SG131042
	mov	eax, DWORD PTR tv69[ebp]
	push	eax
	call	_DBG_AssertFunction
	add	esp, 20					; 00000014H

; 256  : 
; 257  : 	// tell about changes
; 258  : 	SetBits( var->flags, FCVAR_CHANGED );

	mov	ecx, DWORD PTR _var$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	or	edx, 8192				; 00002000H
	mov	eax, DWORD PTR _var$[ebp]
	mov	DWORD PTR [eax+8], edx

; 259  : 
; 260  : 	// tell the engine parts with global state
; 261  : 	if( FBitSet( var->flags, FCVAR_USERINFO ))

	mov	ecx, DWORD PTR _var$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	and	edx, 2
	je	SHORT $LN2@Cvar_Chang

; 262  : 		host.userinfo_changed = true;

	mov	DWORD PTR _host+34408, 1
$LN2@Cvar_Chang:

; 263  : 
; 264  : 	if( FBitSet( var->flags, FCVAR_MOVEVARS ))

	mov	eax, DWORD PTR _var$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	and	ecx, 1024				; 00000400H
	je	SHORT $LN3@Cvar_Chang

; 265  : 		host.movevars_changed = true;

	mov	DWORD PTR _host+34412, 1
$LN3@Cvar_Chang:

; 266  : 
; 267  : 	if( FBitSet( var->flags, FCVAR_VIDRESTART ))

	mov	edx, DWORD PTR _var$[ebp]
	mov	eax, DWORD PTR [edx+8]
	and	eax, 1048576				; 00100000H
	je	SHORT $LN4@Cvar_Chang

; 268  : 		host.renderinfo_changed = true;

	mov	DWORD PTR _host+34416, 1
$LN4@Cvar_Chang:

; 269  : 
; 270  : 	if( !Q_strcmp( var->name, "sv_cheats" ))

	push	99999					; 0001869fH
	push	OFFSET $SG131047
	mov	ecx, DWORD PTR _var$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	_Q_strncmp
	add	esp, 12					; 0000000cH
	test	eax, eax
	jne	SHORT $LN1@Cvar_Chang

; 271  : 		host.allow_cheats = Q_atoi( var->string );

	mov	eax, DWORD PTR _var$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	call	_Q_atoi
	add	esp, 4
	mov	DWORD PTR _host+34352, eax
$LN1@Cvar_Chang:

; 272  : }

	mov	esp, ebp
	pop	ebp
	ret	0
_Cvar_Changed ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xash_build4529_src\engine\common\cvar.c
_TEXT	SEGMENT
_count$ = -12						; size = 4
_prev$ = -8						; size = 4
_var$ = -4						; size = 4
_var_name$ = 8						; size = 4
_group$ = 12						; size = 4
_Cvar_UnlinkVar PROC

; 202  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH

; 203  : 	int	count = 0;

	mov	DWORD PTR _count$[ebp], 0

; 204  : 	convar_t	**prev;
; 205  : 	convar_t	*var;
; 206  : 
; 207  : 	prev = &cvar_vars;

	mov	DWORD PTR _prev$[ebp], OFFSET _cvar_vars
$LN2@Cvar_Unlin:

; 208  : 
; 209  : 	while( 1 )

	mov	eax, 1
	test	eax, eax
	je	$LN3@Cvar_Unlin

; 210  : 	{
; 211  : 		var = *prev;

	mov	ecx, DWORD PTR _prev$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR _var$[ebp], edx

; 212  : 		if( !var ) break;

	cmp	DWORD PTR _var$[ebp], 0
	jne	SHORT $LN4@Cvar_Unlin
	jmp	$LN3@Cvar_Unlin
$LN4@Cvar_Unlin:

; 213  : 
; 214  : 		// do filter by name
; 215  : 		if( var_name && Q_strcmp( var->name, var_name ))

	cmp	DWORD PTR _var_name$[ebp], 0
	je	SHORT $LN5@Cvar_Unlin
	push	99999					; 0001869fH
	mov	eax, DWORD PTR _var_name$[ebp]
	push	eax
	mov	ecx, DWORD PTR _var$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	_Q_strncmp
	add	esp, 12					; 0000000cH
	test	eax, eax
	je	SHORT $LN5@Cvar_Unlin

; 216  : 		{
; 217  : 			prev = &var->next;

	mov	eax, DWORD PTR _var$[ebp]
	add	eax, 16					; 00000010H
	mov	DWORD PTR _prev$[ebp], eax

; 218  : 			continue;

	jmp	SHORT $LN2@Cvar_Unlin
$LN5@Cvar_Unlin:

; 219  : 		}
; 220  : 
; 221  : 		// do filter by specified group
; 222  : 		if( group && !FBitSet( var->flags, group ))

	cmp	DWORD PTR _group$[ebp], 0
	je	SHORT $LN6@Cvar_Unlin
	mov	ecx, DWORD PTR _var$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	and	edx, DWORD PTR _group$[ebp]
	jne	SHORT $LN6@Cvar_Unlin

; 223  : 		{
; 224  : 			prev = &var->next;

	mov	eax, DWORD PTR _var$[ebp]
	add	eax, 16					; 00000010H
	mov	DWORD PTR _prev$[ebp], eax

; 225  : 			continue;

	jmp	SHORT $LN2@Cvar_Unlin
$LN6@Cvar_Unlin:

; 226  : 		}
; 227  : 
; 228  : 		// unlink variable from list
; 229  : 		freestring( var->string );

	mov	ecx, DWORD PTR _var$[ebp]
	cmp	DWORD PTR [ecx+4], 0
	je	SHORT $LN7@Cvar_Unlin
	push	229					; 000000e5H
	push	OFFSET $SG131026
	mov	edx, DWORD PTR _var$[ebp]
	mov	eax, DWORD PTR [edx+4]
	push	eax
	call	__Mem_Free
	add	esp, 12					; 0000000cH
	mov	ecx, DWORD PTR _var$[ebp]
	mov	DWORD PTR [ecx+4], 0
$LN7@Cvar_Unlin:

; 230  : 		*prev = var->next;

	mov	edx, DWORD PTR _prev$[ebp]
	mov	eax, DWORD PTR _var$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR [edx], ecx

; 231  : 
; 232  : 		// only allocated cvars can throw these fields
; 233  : 		if( FBitSet( var->flags, FCVAR_ALLOCATED ))

	mov	edx, DWORD PTR _var$[ebp]
	mov	eax, DWORD PTR [edx+8]
	and	eax, 524288				; 00080000H
	je	$LN8@Cvar_Unlin

; 234  : 		{
; 235  : 			freestring( var->name );

	mov	ecx, DWORD PTR _var$[ebp]
	cmp	DWORD PTR [ecx], 0
	je	SHORT $LN9@Cvar_Unlin
	push	235					; 000000ebH
	push	OFFSET $SG131029
	mov	edx, DWORD PTR _var$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	call	__Mem_Free
	add	esp, 12					; 0000000cH
	mov	ecx, DWORD PTR _var$[ebp]
	mov	DWORD PTR [ecx], 0
$LN9@Cvar_Unlin:

; 236  : 			freestring( var->def_string );

	mov	edx, DWORD PTR _var$[ebp]
	cmp	DWORD PTR [edx+24], 0
	je	SHORT $LN10@Cvar_Unlin
	push	236					; 000000ecH
	push	OFFSET $SG131031
	mov	eax, DWORD PTR _var$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	push	ecx
	call	__Mem_Free
	add	esp, 12					; 0000000cH
	mov	edx, DWORD PTR _var$[ebp]
	mov	DWORD PTR [edx+24], 0
$LN10@Cvar_Unlin:

; 237  : 			freestring( var->desc );

	mov	eax, DWORD PTR _var$[ebp]
	cmp	DWORD PTR [eax+20], 0
	je	SHORT $LN11@Cvar_Unlin
	push	237					; 000000edH
	push	OFFSET $SG131033
	mov	ecx, DWORD PTR _var$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	push	edx
	call	__Mem_Free
	add	esp, 12					; 0000000cH
	mov	eax, DWORD PTR _var$[ebp]
	mov	DWORD PTR [eax+20], 0
$LN11@Cvar_Unlin:

; 238  : 			Mem_Free( var );

	push	238					; 000000eeH
	push	OFFSET $SG131034
	mov	ecx, DWORD PTR _var$[ebp]
	push	ecx
	call	__Mem_Free
	add	esp, 12					; 0000000cH
$LN8@Cvar_Unlin:

; 239  : 		}
; 240  : 		count++;

	mov	edx, DWORD PTR _count$[ebp]
	add	edx, 1
	mov	DWORD PTR _count$[ebp], edx

; 241  : 	}

	jmp	$LN2@Cvar_Unlin
$LN3@Cvar_Unlin:

; 242  : 
; 243  : 	return count;

	mov	eax, DWORD PTR _count$[ebp]

; 244  : }

	mov	esp, ebp
	pop	ebp
	ret	0
_Cvar_UnlinkVar ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xash_build4529_src\engine\common\cvar.c
_TEXT	SEGMENT
$T1 = -24						; size = 4
_len$2 = -20						; size = 4
_len$3 = -16						; size = 4
_szVal$4 = -12						; size = 4
_szVal$5 = -8						; size = 4
_pszValue$ = -4						; size = 4
_var$ = 8						; size = 4
_value$ = 12						; size = 4
_Cvar_ValidateString PROC

; 137  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H

; 138  : 	const char	*pszValue;
; 139  : 	static char	szNew[MAX_STRING];
; 140  : 
; 141  : 	pszValue = value;

	mov	eax, DWORD PTR _value$[ebp]
	mov	DWORD PTR _pszValue$[ebp], eax

; 142  : 	szNew[0] = 0;

	mov	ecx, 1
	imul	edx, ecx, 0
	mov	DWORD PTR $T1[ebp], edx
	cmp	DWORD PTR $T1[ebp], 256			; 00000100H
	jae	SHORT $LN12@Cvar_Valid
	jmp	SHORT $LN13@Cvar_Valid
$LN12@Cvar_Valid:
	call	___report_rangecheckfailure
$LN13@Cvar_Valid:
	mov	eax, DWORD PTR $T1[ebp]
	mov	BYTE PTR ?szNew@?1??Cvar_ValidateString@@9@9[eax], 0

; 143  : 
; 144  : 	// this cvar's string must only contain printable characters.
; 145  : 	// strip out any other crap. we'll fill in "empty" if nothing is left
; 146  : 	if( FBitSet( var->flags, FCVAR_PRINTABLEONLY ))

	mov	ecx, DWORD PTR _var$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	and	edx, 128				; 00000080H
	je	$LN6@Cvar_Valid

; 147  : 	{
; 148  : 		char	*szVal = szNew;

	mov	DWORD PTR _szVal$5[ebp], OFFSET ?szNew@?1??Cvar_ValidateString@@9@9

; 149  : 		int	len = 0;

	mov	DWORD PTR _len$3[ebp], 0
$LN2@Cvar_Valid:

; 150  : 
; 151  : 		// step through the string, only copying back in characters that are printable
; 152  : 		while( *pszValue && len < MAX_STRING )

	mov	eax, DWORD PTR _pszValue$[ebp]
	movsx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	je	SHORT $LN3@Cvar_Valid
	cmp	DWORD PTR _len$3[ebp], 256		; 00000100H
	jge	SHORT $LN3@Cvar_Valid

; 153  : 		{
; 154  : 			if( ((byte)*pszValue) < 32 )

	mov	edx, DWORD PTR _pszValue$[ebp]
	movzx	eax, BYTE PTR [edx]
	cmp	eax, 32					; 00000020H
	jge	SHORT $LN7@Cvar_Valid

; 155  : 			{
; 156  : 				pszValue++;

	mov	ecx, DWORD PTR _pszValue$[ebp]
	add	ecx, 1
	mov	DWORD PTR _pszValue$[ebp], ecx

; 157  : 				continue;

	jmp	SHORT $LN2@Cvar_Valid
$LN7@Cvar_Valid:

; 158  : 			}
; 159  : 			*szVal++ = *pszValue++;

	mov	edx, DWORD PTR _szVal$5[ebp]
	mov	eax, DWORD PTR _pszValue$[ebp]
	mov	cl, BYTE PTR [eax]
	mov	BYTE PTR [edx], cl
	mov	edx, DWORD PTR _szVal$5[ebp]
	add	edx, 1
	mov	DWORD PTR _szVal$5[ebp], edx
	mov	eax, DWORD PTR _pszValue$[ebp]
	add	eax, 1
	mov	DWORD PTR _pszValue$[ebp], eax

; 160  : 			len++;

	mov	ecx, DWORD PTR _len$3[ebp]
	add	ecx, 1
	mov	DWORD PTR _len$3[ebp], ecx

; 161  : 		}

	jmp	SHORT $LN2@Cvar_Valid
$LN3@Cvar_Valid:

; 162  : 
; 163  : 		*szVal = '\0';

	mov	edx, DWORD PTR _szVal$5[ebp]
	mov	BYTE PTR [edx], 0

; 164  : 		pszValue = szNew;

	mov	DWORD PTR _pszValue$[ebp], OFFSET ?szNew@?1??Cvar_ValidateString@@9@9

; 165  : 
; 166  : 		// g-cont. is this even need?
; 167  : 		if( !Q_strlen( szNew )) Q_strncpy( szNew, "empty", sizeof( szNew ));

	push	OFFSET ?szNew@?1??Cvar_ValidateString@@9@9
	call	_Q_strlen
	add	esp, 4
	test	eax, eax
	jne	SHORT $LN6@Cvar_Valid
	push	256					; 00000100H
	push	OFFSET $SG131000
	push	OFFSET ?szNew@?1??Cvar_ValidateString@@9@9
	call	_Q_strncpy
	add	esp, 12					; 0000000cH
$LN6@Cvar_Valid:

; 168  : 	}
; 169  : 
; 170  : 	if( FBitSet( var->flags, FCVAR_NOEXTRAWHITEPACE ))

	mov	eax, DWORD PTR _var$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	and	ecx, 512				; 00000200H
	je	SHORT $LN9@Cvar_Valid

; 171  : 	{
; 172  : 		char	*szVal = szNew;

	mov	DWORD PTR _szVal$4[ebp], OFFSET ?szNew@?1??Cvar_ValidateString@@9@9

; 173  : 		int	len = 0;

	mov	DWORD PTR _len$2[ebp], 0
$LN4@Cvar_Valid:

; 174  : 
; 175  : 		// step through the string, only copying back in characters that are printable
; 176  : 		while( *pszValue && len < MAX_STRING )

	mov	edx, DWORD PTR _pszValue$[ebp]
	movsx	eax, BYTE PTR [edx]
	test	eax, eax
	je	SHORT $LN5@Cvar_Valid
	cmp	DWORD PTR _len$2[ebp], 256		; 00000100H
	jge	SHORT $LN5@Cvar_Valid

; 177  : 		{
; 178  : 			if( *pszValue == ' ' )

	mov	ecx, DWORD PTR _pszValue$[ebp]
	movsx	edx, BYTE PTR [ecx]
	cmp	edx, 32					; 00000020H
	jne	SHORT $LN10@Cvar_Valid

; 179  : 			{
; 180  : 				pszValue++;

	mov	eax, DWORD PTR _pszValue$[ebp]
	add	eax, 1
	mov	DWORD PTR _pszValue$[ebp], eax

; 181  : 				continue;

	jmp	SHORT $LN4@Cvar_Valid
$LN10@Cvar_Valid:

; 182  : 			}
; 183  : 			*szVal++ = *pszValue++;

	mov	ecx, DWORD PTR _szVal$4[ebp]
	mov	edx, DWORD PTR _pszValue$[ebp]
	mov	al, BYTE PTR [edx]
	mov	BYTE PTR [ecx], al
	mov	ecx, DWORD PTR _szVal$4[ebp]
	add	ecx, 1
	mov	DWORD PTR _szVal$4[ebp], ecx
	mov	edx, DWORD PTR _pszValue$[ebp]
	add	edx, 1
	mov	DWORD PTR _pszValue$[ebp], edx

; 184  : 			len++;

	mov	eax, DWORD PTR _len$2[ebp]
	add	eax, 1
	mov	DWORD PTR _len$2[ebp], eax

; 185  : 		}

	jmp	SHORT $LN4@Cvar_Valid
$LN5@Cvar_Valid:

; 186  : 
; 187  : 		*szVal = '\0';

	mov	ecx, DWORD PTR _szVal$4[ebp]
	mov	BYTE PTR [ecx], 0

; 188  : 		pszValue = szNew;

	mov	DWORD PTR _pszValue$[ebp], OFFSET ?szNew@?1??Cvar_ValidateString@@9@9
$LN9@Cvar_Valid:

; 189  : 	}
; 190  : 
; 191  : 	return pszValue;

	mov	eax, DWORD PTR _pszValue$[ebp]
$LN11@Cvar_Valid:

; 192  : }

	mov	esp, ebp
	pop	ebp
	ret	0
_Cvar_ValidateString ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xash_build4529_src\engine\common\cvar.c
_TEXT	SEGMENT
_var$ = 8						; size = 4
_value$ = 12						; size = 4
_notify$ = 16						; size = 4
_Cvar_UpdateInfo PROC

; 90   : {

	push	ebp
	mov	ebp, esp

; 91   : 	if( FBitSet( var->flags, FCVAR_USERINFO ))

	mov	eax, DWORD PTR _var$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	and	ecx, 2
	je	SHORT $LN2@Cvar_Updat

; 92   : 	{
; 93   : 		if ( host.type == HOST_DEDICATED )

	cmp	DWORD PTR _host+164, 1
	jne	SHORT $LN3@Cvar_Updat

; 94   : 		{
; 95   : 			// g-cont. this is a very strange behavior...
; 96   : 			Info_SetValueForKey( SV_Serverinfo(), var->name, value, MAX_SERVERINFO_STRING ),

	push	512					; 00000200H
	mov	edx, DWORD PTR _value$[ebp]
	push	edx
	mov	eax, DWORD PTR _var$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	_SV_Serverinfo
	push	eax
	call	_Info_SetValueForKey
	add	esp, 16					; 00000010H
	call	_SV_Serverinfo
	push	eax
	push	OFFSET $SG130965
	call	_SV_BroadcastCommand
	add	esp, 8

; 97   : 			SV_BroadcastCommand( "fullserverinfo \"%s\"\n", SV_Serverinfo( ));
; 98   : 		}

	jmp	SHORT $LN2@Cvar_Updat
$LN3@Cvar_Updat:

; 99   : 		else
; 100  : 		{
; 101  : 			if( !Info_SetValueForKey( CL_Userinfo(), var->name, value, MAX_INFO_STRING ))

	push	256					; 00000100H
	mov	edx, DWORD PTR _value$[ebp]
	push	edx
	mov	eax, DWORD PTR _var$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	_CL_Userinfo
	push	eax
	call	_Info_SetValueForKey
	add	esp, 16					; 00000010H
	test	eax, eax
	jne	SHORT $LN5@Cvar_Updat

; 102  : 				return false; // failed to change value

	xor	eax, eax
	jmp	$LN1@Cvar_Updat
$LN5@Cvar_Updat:

; 103  : 
; 104  : 			// time to update server copy of userinfo
; 105  : 			CL_ServerCommand( true, "setinfo \"%s\" \"%s\"\n", var->name, value );

	mov	edx, DWORD PTR _value$[ebp]
	push	edx
	mov	eax, DWORD PTR _var$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	push	OFFSET $SG130967
	push	1
	call	_CL_ServerCommand
	add	esp, 16					; 00000010H
$LN2@Cvar_Updat:

; 106  : 		}
; 107  : 	}
; 108  : 
; 109  : 	if( FBitSet( var->flags, FCVAR_SERVER ) && notify )

	mov	edx, DWORD PTR _var$[ebp]
	mov	eax, DWORD PTR [edx+8]
	and	eax, 4
	je	$LN6@Cvar_Updat
	cmp	DWORD PTR _notify$[ebp], 0
	je	SHORT $LN6@Cvar_Updat

; 110  : 	{
; 111  : 		if( !FBitSet( var->flags, FCVAR_UNLOGGED ))

	mov	ecx, DWORD PTR _var$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	and	edx, 256				; 00000100H
	jne	SHORT $LN6@Cvar_Updat

; 112  : 		{
; 113  : 			if( FBitSet( var->flags, FCVAR_PROTECTED ))

	mov	eax, DWORD PTR _var$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	and	ecx, 32					; 00000020H
	je	SHORT $LN8@Cvar_Updat

; 114  : 			{
; 115  : 				Log_Printf( "Server cvar \"%s\" = \"%s\"\n", var->name, "***PROTECTED***" );

	push	OFFSET $SG130972
	mov	edx, DWORD PTR _var$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	push	OFFSET $SG130973
	call	_Log_Printf
	add	esp, 12					; 0000000cH

; 116  : 				SV_BroadcastPrintf( NULL, "\"%s\" changed to \"%s\"\n", var->name, "***PROTECTED***" );

	push	OFFSET $SG130974
	mov	ecx, DWORD PTR _var$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	push	OFFSET $SG130975
	push	0
	call	_SV_BroadcastPrintf
	add	esp, 16					; 00000010H

; 117  : 			}

	jmp	SHORT $LN6@Cvar_Updat
$LN8@Cvar_Updat:

; 118  : 			else
; 119  : 			{
; 120  : 				Log_Printf( "Server cvar \"%s\" = \"%s\"\n", var->name, value );

	mov	eax, DWORD PTR _value$[ebp]
	push	eax
	mov	ecx, DWORD PTR _var$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	push	OFFSET $SG130976
	call	_Log_Printf
	add	esp, 12					; 0000000cH

; 121  : 				SV_BroadcastPrintf( NULL, "\"%s\" changed to \"%s\"\n", var->name, value );

	mov	eax, DWORD PTR _value$[ebp]
	push	eax
	mov	ecx, DWORD PTR _var$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	push	OFFSET $SG130977
	push	0
	call	_SV_BroadcastPrintf
	add	esp, 16					; 00000010H
$LN6@Cvar_Updat:

; 122  : 			}
; 123  : 		}
; 124  : 	}
; 125  : 
; 126  : 	return true;

	mov	eax, 1
$LN1@Cvar_Updat:

; 127  : }

	pop	ebp
	ret	0
_Cvar_UpdateInfo ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xash_build4529_src\engine\common\cvar.c
_TEXT	SEGMENT
_count$ = -4						; size = 4
_group$ = 8						; size = 4
_Cvar_Unlink PROC

; 852  : {

	push	ebp
	mov	ebp, esp
	push	ecx

; 853  : 	int	count;
; 854  : 
; 855  : 	if( Cvar_VariableInteger( "host_gameloaded" ) && FBitSet( group, FCVAR_EXTDLL ))

	push	OFFSET $SG131311
	call	_Cvar_VariableInteger
	add	esp, 4
	test	eax, eax
	je	SHORT $LN2@Cvar_Unlin
	mov	eax, DWORD PTR _group$[ebp]
	and	eax, 8
	je	SHORT $LN2@Cvar_Unlin

; 856  : 		return;

	jmp	SHORT $LN1@Cvar_Unlin
$LN2@Cvar_Unlin:

; 857  : 
; 858  : 	if( Cvar_VariableInteger( "host_clientloaded" ) && FBitSet( group, FCVAR_CLIENTDLL ))

	push	OFFSET $SG131313
	call	_Cvar_VariableInteger
	add	esp, 4
	test	eax, eax
	je	SHORT $LN3@Cvar_Unlin
	mov	ecx, DWORD PTR _group$[ebp]
	and	ecx, 16					; 00000010H
	je	SHORT $LN3@Cvar_Unlin

; 859  : 		return;

	jmp	SHORT $LN1@Cvar_Unlin
$LN3@Cvar_Unlin:

; 860  : 
; 861  : 	if( Cvar_VariableInteger( "host_gameuiloaded" ) && FBitSet( group, FCVAR_GAMEUIDLL ))

	push	OFFSET $SG131315
	call	_Cvar_VariableInteger
	add	esp, 4
	test	eax, eax
	je	SHORT $LN4@Cvar_Unlin
	mov	edx, DWORD PTR _group$[ebp]
	and	edx, 16384				; 00004000H
	je	SHORT $LN4@Cvar_Unlin

; 862  : 		return;

	jmp	SHORT $LN1@Cvar_Unlin
$LN4@Cvar_Unlin:

; 863  : 
; 864  : 	count = Cvar_UnlinkVar( NULL, group );

	mov	eax, DWORD PTR _group$[ebp]
	push	eax
	push	0
	call	_Cvar_UnlinkVar
	add	esp, 8
	mov	DWORD PTR _count$[ebp], eax

; 865  : 	Con_Reportf( "unlink %i cvars\n", count );

	mov	ecx, DWORD PTR _count$[ebp]
	push	ecx
	push	OFFSET $SG131316
	call	_Con_Reportf
	add	esp, 8
$LN1@Cvar_Unlin:

; 866  : }

	mov	esp, ebp
	pop	ebp
	ret	0
_Cvar_Unlink ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xash_build4529_src\engine\common\cvar.c
_TEXT	SEGMENT
_Cvar_Init PROC

; 876  : {

	push	ebp
	mov	ebp, esp

; 877  : 	cvar_vars = NULL;

	mov	DWORD PTR _cvar_vars, 0

; 878  : 	cmd_scripting = Cvar_Get( "cmd_scripting", "0", FCVAR_ARCHIVE, "enable simple condition checking and variable operations" );

	push	OFFSET $SG131320
	push	1
	push	OFFSET $SG131321
	push	OFFSET $SG131322
	call	_Cvar_Get
	add	esp, 16					; 00000010H
	mov	DWORD PTR _cmd_scripting, eax

; 879  : 	Cvar_RegisterVariable (&host_developer); // early registering for dev 

	push	OFFSET _host_developer
	call	_Cvar_RegisterVariable
	add	esp, 4

; 880  : 
; 881  : 	Cmd_AddCommand( "setgl", Cvar_SetGL_f, "create or change the value of a opengl variable" );	// OBSOLETE

	push	OFFSET $SG131323
	push	OFFSET _Cvar_SetGL_f
	push	OFFSET $SG131324
	call	_Cmd_AddCommand
	add	esp, 12					; 0000000cH

; 882  : 	Cmd_AddCommand( "toggle", Cvar_Toggle_f, "toggles a console variable's values (use for more info)" );

	push	OFFSET $SG131325
	push	OFFSET _Cvar_Toggle_f
	push	OFFSET $SG131326
	call	_Cmd_AddCommand
	add	esp, 12					; 0000000cH

; 883  : 	Cmd_AddCommand( "reset", Cvar_Reset_f, "reset any type variable to initial value" );

	push	OFFSET $SG131327
	push	OFFSET _Cvar_Reset_f
	push	OFFSET $SG131328
	call	_Cmd_AddCommand
	add	esp, 12					; 0000000cH

; 884  : 	Cmd_AddCommand( "cvarlist", Cvar_List_f, "display all console variables beginning with the specified prefix" );

	push	OFFSET $SG131329
	push	OFFSET _Cvar_List_f
	push	OFFSET $SG131330
	call	_Cmd_AddCommand
	add	esp, 12					; 0000000cH

; 885  : }

	pop	ebp
	ret	0
_Cvar_Init ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xash_build4529_src\engine\common\cvar.c
_TEXT	SEGMENT
_v$ = -4						; size = 4
_Cvar_Command PROC

; 688  : {

	push	ebp
	mov	ebp, esp
	push	ecx

; 689  : 	convar_t	*v;
; 690  : 
; 691  : 	// special case for setup opengl configuration
; 692  : 	if( host.apply_opengl_config )

	cmp	DWORD PTR _host+34392, 0
	je	SHORT $LN2@Cvar_Comma

; 693  : 	{
; 694  : 		Cvar_FullSet( Cmd_Argv( 0 ), Cmd_Argv( 1 ), FCVAR_GLCONFIG );

	push	4096					; 00001000H
	push	1
	call	_Cmd_Argv
	add	esp, 4
	push	eax
	push	0
	call	_Cmd_Argv
	add	esp, 4
	push	eax
	call	_Cvar_FullSet
	add	esp, 12					; 0000000cH

; 695  : 		return true;

	mov	eax, 1
	jmp	$LN1@Cvar_Comma
$LN2@Cvar_Comma:

; 696  : 	}
; 697  : 
; 698  : 	// check variables
; 699  : 	v = Cvar_FindVar( Cmd_Argv( 0 ));

	push	0
	push	0
	call	_Cmd_Argv
	add	esp, 4
	push	eax
	call	_Cvar_FindVarExt
	add	esp, 8
	mov	DWORD PTR _v$[ebp], eax

; 700  : 	if( !v ) return false;

	cmp	DWORD PTR _v$[ebp], 0
	jne	SHORT $LN3@Cvar_Comma
	xor	eax, eax
	jmp	$LN1@Cvar_Comma
$LN3@Cvar_Comma:

; 701  : 
; 702  : 	// perform a variable print or set
; 703  : 	if( Cmd_Argc() == 1 )

	call	_Cmd_Argc
	cmp	eax, 1
	jne	SHORT $LN4@Cvar_Comma

; 704  : 	{
; 705  : 		if( FBitSet( v->flags, FCVAR_ALLOCATED|FCVAR_EXTENDED ))

	mov	eax, DWORD PTR _v$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	and	ecx, 786432				; 000c0000H
	je	SHORT $LN5@Cvar_Comma

; 706  : 			Con_Printf( "\"%s\" is \"%s\" ( ^3\"%s\"^7 )\n", v->name, v->string, v->def_string );

	mov	edx, DWORD PTR _v$[ebp]
	mov	eax, DWORD PTR [edx+24]
	push	eax
	mov	ecx, DWORD PTR _v$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	mov	eax, DWORD PTR _v$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	push	OFFSET $SG131246
	call	_Con_Printf
	add	esp, 16					; 00000010H
	jmp	SHORT $LN6@Cvar_Comma
$LN5@Cvar_Comma:

; 707  : 		else Con_Printf( "\"%s\" is \"%s\"\n", v->name, v->string );

	mov	edx, DWORD PTR _v$[ebp]
	mov	eax, DWORD PTR [edx+4]
	push	eax
	mov	ecx, DWORD PTR _v$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	push	OFFSET $SG131247
	call	_Con_Printf
	add	esp, 12					; 0000000cH
$LN6@Cvar_Comma:

; 708  : 
; 709  : 		return true;

	mov	eax, 1
	jmp	SHORT $LN1@Cvar_Comma
$LN4@Cvar_Comma:

; 710  : 	}
; 711  : 
; 712  : 	if( host.apply_game_config )

	cmp	DWORD PTR _host+34388, 0
	je	SHORT $LN7@Cvar_Comma

; 713  : 	{
; 714  : 		if( !FBitSet( v->flags, FCVAR_EXTDLL ))

	mov	eax, DWORD PTR _v$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	and	ecx, 8
	jne	SHORT $LN7@Cvar_Comma

; 715  : 			return true; // only game.dll cvars passed

	mov	eax, 1
	jmp	SHORT $LN1@Cvar_Comma
$LN7@Cvar_Comma:

; 716  : 	}
; 717  : 
; 718  : 	if( FBitSet( v->flags, FCVAR_SPONLY ) && CL_GetMaxClients() > 1 )

	mov	edx, DWORD PTR _v$[ebp]
	mov	eax, DWORD PTR [edx+8]
	and	eax, 64					; 00000040H
	je	SHORT $LN9@Cvar_Comma
	call	_CL_GetMaxClients
	cmp	eax, 1
	jle	SHORT $LN9@Cvar_Comma

; 719  : 	{
; 720  : 		Con_Printf( "can't set \"%s\" in multiplayer\n", v->name );

	mov	ecx, DWORD PTR _v$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	push	OFFSET $SG131252
	call	_Con_Printf
	add	esp, 8

; 721  : 		return false;

	xor	eax, eax
	jmp	SHORT $LN1@Cvar_Comma

; 722  : 	}

	jmp	SHORT $LN1@Cvar_Comma
$LN9@Cvar_Comma:

; 723  : 	else
; 724  : 	{
; 725  : 		Cvar_DirectSet( v, Cmd_Argv( 1 ));

	push	1
	call	_Cmd_Argv
	add	esp, 4
	push	eax
	mov	eax, DWORD PTR _v$[ebp]
	push	eax
	call	_Cvar_DirectSet
	add	esp, 8

; 726  : 		if( host.apply_game_config )

	cmp	DWORD PTR _host+34388, 0
	je	SHORT $LN11@Cvar_Comma

; 727  : 			host.sv_cvars_restored++;

	mov	ecx, DWORD PTR _host+34400
	add	ecx, 1
	mov	DWORD PTR _host+34400, ecx
$LN11@Cvar_Comma:

; 728  : 		return true;

	mov	eax, 1
$LN1@Cvar_Comma:

; 729  : 	}
; 730  : }

	mov	esp, ebp
	pop	ebp
	ret	0
_Cvar_Command ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xash_build4529_src\engine\common\cvar.c
_TEXT	SEGMENT
_var$ = -4						; size = 4
_Cvar_SetCheatState PROC

; 662  : {

	push	ebp
	mov	ebp, esp
	push	ecx

; 663  : 	convar_t	*var;
; 664  : 
; 665  : 	// set all default vars to the safe value
; 666  : 	for( var = cvar_vars; var; var = var->next )

	mov	eax, DWORD PTR _cvar_vars
	mov	DWORD PTR _var$[ebp], eax
	jmp	SHORT $LN4@Cvar_SetCh
$LN2@Cvar_SetCh:
	mov	ecx, DWORD PTR _var$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	DWORD PTR _var$[ebp], edx
$LN4@Cvar_SetCh:
	cmp	DWORD PTR _var$[ebp], 0
	je	SHORT $LN1@Cvar_SetCh

; 667  : 	{
; 668  : 		// can't process dll cvars - missed def_string
; 669  : 		if( !FBitSet( var->flags, FCVAR_ALLOCATED|FCVAR_EXTENDED ))

	mov	eax, DWORD PTR _var$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	and	ecx, 786432				; 000c0000H
	jne	SHORT $LN5@Cvar_SetCh

; 670  : 			continue;

	jmp	SHORT $LN2@Cvar_SetCh
$LN5@Cvar_SetCh:

; 671  : 
; 672  : 		if( FBitSet( var->flags, FCVAR_CHEAT ))

	mov	edx, DWORD PTR _var$[ebp]
	mov	eax, DWORD PTR [edx+8]
	and	eax, 32768				; 00008000H
	je	SHORT $LN6@Cvar_SetCh

; 673  : 		{
; 674  : 			if( Q_strcmp( var->def_string, var->string ))

	push	99999					; 0001869fH
	mov	ecx, DWORD PTR _var$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	mov	eax, DWORD PTR _var$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	push	ecx
	call	_Q_strncmp
	add	esp, 12					; 0000000cH
	test	eax, eax
	je	SHORT $LN6@Cvar_SetCh

; 675  : 				Cvar_DirectSet( var, var->def_string );

	mov	edx, DWORD PTR _var$[ebp]
	mov	eax, DWORD PTR [edx+24]
	push	eax
	mov	ecx, DWORD PTR _var$[ebp]
	push	ecx
	call	_Cvar_DirectSet
	add	esp, 8
$LN6@Cvar_SetCh:

; 676  : 		}
; 677  : 	}

	jmp	SHORT $LN2@Cvar_SetCh
$LN1@Cvar_SetCh:

; 678  : }

	mov	esp, ebp
	pop	ebp
	ret	0
_Cvar_SetCheatState ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xash_build4529_src\engine\common\cvar.c
_TEXT	SEGMENT
_var_name$ = 8						; size = 4
_Cvar_Reset PROC

; 593  : {

	push	ebp
	mov	ebp, esp

; 594  : 	Cvar_Set( var_name, NULL );

	push	0
	mov	eax, DWORD PTR _var_name$[ebp]
	push	eax
	call	_Cvar_Set
	add	esp, 8

; 595  : }

	pop	ebp
	ret	0
_Cvar_Reset ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xash_build4529_src\engine\common\cvar.c
_TEXT	SEGMENT
_var_name$ = 8						; size = 4
_Cvar_Exists PROC

; 648  : {

	push	ebp
	mov	ebp, esp

; 649  : 	if( Cvar_FindVar( var_name ))

	push	0
	mov	eax, DWORD PTR _var_name$[ebp]
	push	eax
	call	_Cvar_FindVarExt
	add	esp, 8
	test	eax, eax
	je	SHORT $LN2@Cvar_Exist

; 650  : 		return true;

	mov	eax, 1
	jmp	SHORT $LN1@Cvar_Exist
$LN2@Cvar_Exist:

; 651  : 	return false;

	xor	eax, eax
$LN1@Cvar_Exist:

; 652  : }

	pop	ebp
	ret	0
_Cvar_Exists ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xash_build4529_src\engine\common\cvar.c
_TEXT	SEGMENT
_var$ = -4						; size = 4
_f$ = 8							; size = 4
_group$ = 12						; size = 4
_Cvar_WriteVariables PROC

; 741  : {

	push	ebp
	mov	ebp, esp
	push	ecx

; 742  : 	convar_t	*var;
; 743  : 	
; 744  : 	for( var = cvar_vars; var; var = var->next )

	mov	eax, DWORD PTR _cvar_vars
	mov	DWORD PTR _var$[ebp], eax
	jmp	SHORT $LN4@Cvar_Write
$LN2@Cvar_Write:
	mov	ecx, DWORD PTR _var$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	DWORD PTR _var$[ebp], edx
$LN4@Cvar_Write:
	cmp	DWORD PTR _var$[ebp], 0
	je	SHORT $LN1@Cvar_Write

; 745  : 	{
; 746  : 		if( FBitSet( var->flags, group ))

	mov	eax, DWORD PTR _var$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	and	ecx, DWORD PTR _group$[ebp]
	je	SHORT $LN5@Cvar_Write

; 747  : 			FS_Printf( f, "%s \"%s\"\n", var->name, var->string );

	mov	edx, DWORD PTR _var$[ebp]
	mov	eax, DWORD PTR [edx+4]
	push	eax
	mov	ecx, DWORD PTR _var$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	push	OFFSET $SG131264
	mov	eax, DWORD PTR _f$[ebp]
	push	eax
	call	_FS_Printf
	add	esp, 16					; 00000010H
$LN5@Cvar_Write:

; 748  : 	}

	jmp	SHORT $LN2@Cvar_Write
$LN1@Cvar_Write:

; 749  : }

	mov	esp, ebp
	pop	ebp
	ret	0
_Cvar_WriteVariables ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xash_build4529_src\engine\common\cvar.c
_TEXT	SEGMENT
_var$ = -4						; size = 4
_var_name$ = 8						; size = 4
_Cvar_VariableString PROC

; 633  : {

	push	ebp
	mov	ebp, esp
	push	ecx

; 634  : 	convar_t	*var;
; 635  : 
; 636  : 	var = Cvar_FindVar( var_name );

	push	0
	mov	eax, DWORD PTR _var_name$[ebp]
	push	eax
	call	_Cvar_FindVarExt
	add	esp, 8
	mov	DWORD PTR _var$[ebp], eax

; 637  : 	if( !var ) return "";

	cmp	DWORD PTR _var$[ebp], 0
	jne	SHORT $LN2@Cvar_Varia
	mov	eax, OFFSET $SG131224
	jmp	SHORT $LN1@Cvar_Varia
$LN2@Cvar_Varia:

; 638  : 
; 639  : 	return var->string;

	mov	ecx, DWORD PTR _var$[ebp]
	mov	eax, DWORD PTR [ecx+4]
$LN1@Cvar_Varia:

; 640  : }

	mov	esp, ebp
	pop	ebp
	ret	0
_Cvar_VariableString ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xash_build4529_src\engine\common\cvar.c
_TEXT	SEGMENT
_var$ = -4						; size = 4
_var_name$ = 8						; size = 4
_Cvar_VariableInteger PROC

; 618  : {

	push	ebp
	mov	ebp, esp
	push	ecx

; 619  : 	convar_t	*var;
; 620  : 
; 621  : 	var = Cvar_FindVar( var_name );

	push	0
	mov	eax, DWORD PTR _var_name$[ebp]
	push	eax
	call	_Cvar_FindVarExt
	add	esp, 8
	mov	DWORD PTR _var$[ebp], eax

; 622  : 	if( !var ) return 0;

	cmp	DWORD PTR _var$[ebp], 0
	jne	SHORT $LN2@Cvar_Varia
	xor	eax, eax
	jmp	SHORT $LN1@Cvar_Varia
$LN2@Cvar_Varia:

; 623  : 
; 624  : 	return Q_atoi( var->string );

	mov	ecx, DWORD PTR _var$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	call	_Q_atoi
	add	esp, 4
$LN1@Cvar_Varia:

; 625  : }

	mov	esp, ebp
	pop	ebp
	ret	0
_Cvar_VariableInteger ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xash_build4529_src\engine\common\cvar.c
_TEXT	SEGMENT
_var$ = -4						; size = 4
_var_name$ = 8						; size = 4
_Cvar_VariableValue PROC

; 603  : {

	push	ebp
	mov	ebp, esp
	push	ecx

; 604  : 	convar_t	*var;
; 605  : 
; 606  : 	var = Cvar_FindVar( var_name );

	push	0
	mov	eax, DWORD PTR _var_name$[ebp]
	push	eax
	call	_Cvar_FindVarExt
	add	esp, 8
	mov	DWORD PTR _var$[ebp], eax

; 607  : 	if( !var ) return 0.0f;

	cmp	DWORD PTR _var$[ebp], 0
	jne	SHORT $LN2@Cvar_Varia
	fldz
	jmp	SHORT $LN1@Cvar_Varia
$LN2@Cvar_Varia:

; 608  : 
; 609  : 	return Q_atof( var->string );

	mov	ecx, DWORD PTR _var$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	call	_Q_atof
	add	esp, 4
$LN1@Cvar_Varia:

; 610  : }

	mov	esp, ebp
	pop	ebp
	ret	0
_Cvar_VariableValue ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xash_build4529_src\engine\common\cvar.c
_TEXT	SEGMENT
$T1 = -4						; size = 4
_flags$ = 8						; size = 4
_Cvar_BuildAutoDescription PROC

; 56   : {

	push	ebp
	mov	ebp, esp
	push	ecx

; 57   : 	static char	desc[128];
; 58   : 
; 59   : 	desc[0] = '\0';

	mov	eax, 1
	imul	ecx, eax, 0
	mov	DWORD PTR $T1[ebp], ecx
	cmp	DWORD PTR $T1[ebp], 128			; 00000080H
	jae	SHORT $LN11@Cvar_Build
	jmp	SHORT $LN12@Cvar_Build
$LN11@Cvar_Build:
	call	___report_rangecheckfailure
$LN12@Cvar_Build:
	mov	edx, DWORD PTR $T1[ebp]
	mov	BYTE PTR ?desc@?1??Cvar_BuildAutoDescription@@9@9[edx], 0

; 60   : 
; 61   : 	if( FBitSet( flags, FCVAR_EXTDLL ))

	mov	eax, DWORD PTR _flags$[ebp]
	and	eax, 8
	je	SHORT $LN2@Cvar_Build

; 62   : 		Q_strncpy( desc, "game ", sizeof( desc ));

	push	128					; 00000080H
	push	OFFSET $SG130939
	push	OFFSET ?desc@?1??Cvar_BuildAutoDescription@@9@9
	call	_Q_strncpy
	add	esp, 12					; 0000000cH
	jmp	SHORT $LN3@Cvar_Build
$LN2@Cvar_Build:

; 63   : 	else if( FBitSet( flags, FCVAR_CLIENTDLL ))

	mov	ecx, DWORD PTR _flags$[ebp]
	and	ecx, 16					; 00000010H
	je	SHORT $LN4@Cvar_Build

; 64   : 		Q_strncpy( desc, "client ", sizeof( desc ));

	push	128					; 00000080H
	push	OFFSET $SG130942
	push	OFFSET ?desc@?1??Cvar_BuildAutoDescription@@9@9
	call	_Q_strncpy
	add	esp, 12					; 0000000cH
	jmp	SHORT $LN3@Cvar_Build
$LN4@Cvar_Build:

; 65   : 	else if( FBitSet( flags, FCVAR_GAMEUIDLL ))

	mov	edx, DWORD PTR _flags$[ebp]
	and	edx, 16384				; 00004000H
	je	SHORT $LN3@Cvar_Build

; 66   : 		Q_strncpy( desc, "GameUI ", sizeof( desc ));

	push	128					; 00000080H
	push	OFFSET $SG130944
	push	OFFSET ?desc@?1??Cvar_BuildAutoDescription@@9@9
	call	_Q_strncpy
	add	esp, 12					; 0000000cH
$LN3@Cvar_Build:

; 67   : 
; 68   : 	if( FBitSet( flags, FCVAR_SERVER ))

	mov	eax, DWORD PTR _flags$[ebp]
	and	eax, 4
	je	SHORT $LN7@Cvar_Build

; 69   : 		Q_strncat( desc, "server ", sizeof( desc ));

	push	128					; 00000080H
	push	OFFSET $SG130946
	push	OFFSET ?desc@?1??Cvar_BuildAutoDescription@@9@9
	call	_Q_strncat
	add	esp, 12					; 0000000cH
$LN7@Cvar_Build:

; 70   : 
; 71   : 	if( FBitSet( flags, FCVAR_USERINFO ))

	mov	ecx, DWORD PTR _flags$[ebp]
	and	ecx, 2
	je	SHORT $LN8@Cvar_Build

; 72   : 		Q_strncat( desc, "user ", sizeof( desc ));

	push	128					; 00000080H
	push	OFFSET $SG130948
	push	OFFSET ?desc@?1??Cvar_BuildAutoDescription@@9@9
	call	_Q_strncat
	add	esp, 12					; 0000000cH
$LN8@Cvar_Build:

; 73   : 
; 74   : 	if( FBitSet( flags, FCVAR_ARCHIVE ))

	mov	edx, DWORD PTR _flags$[ebp]
	and	edx, 1
	je	SHORT $LN9@Cvar_Build

; 75   : 		Q_strncat( desc, "archived ", sizeof( desc ));

	push	128					; 00000080H
	push	OFFSET $SG130950
	push	OFFSET ?desc@?1??Cvar_BuildAutoDescription@@9@9
	call	_Q_strncat
	add	esp, 12					; 0000000cH
$LN9@Cvar_Build:

; 76   : 
; 77   : 	Q_strncat( desc, "cvar", sizeof( desc ));

	push	128					; 00000080H
	push	OFFSET $SG130951
	push	OFFSET ?desc@?1??Cvar_BuildAutoDescription@@9@9
	call	_Q_strncat
	add	esp, 12					; 0000000cH

; 78   : 
; 79   : 	return desc;

	mov	eax, OFFSET ?desc@?1??Cvar_BuildAutoDescription@@9@9
$LN10@Cvar_Build:

; 80   : }

	mov	esp, ebp
	pop	ebp
	ret	0
_Cvar_BuildAutoDescription ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xash_build4529_src\engine\common\cvar.c
_TEXT	SEGMENT
tv88 = -44						; size = 8
_val$ = -36						; size = 32
__$ArrayPad$ = -4					; size = 4
_var_name$ = 8						; size = 4
_value$ = 12						; size = 4
_Cvar_SetValue PROC

; 577  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 44					; 0000002cH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 578  : 	char	val[32];
; 579  : 	
; 580  : 	if( fabs( value - (int)value ) < 0.000001 )

	cvttss2si eax, DWORD PTR _value$[ebp]
	cvtsi2ss xmm0, eax
	movss	xmm1, DWORD PTR _value$[ebp]
	subss	xmm1, xmm0
	cvtss2sd xmm0, xmm1
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	call	_fabs
	add	esp, 8
	fstp	QWORD PTR tv88[ebp]
	movsd	xmm0, QWORD PTR __real@3eb0c6f7a0b5ed8d
	comisd	xmm0, QWORD PTR tv88[ebp]
	jbe	SHORT $LN2@Cvar_SetVa

; 581  : 		Q_snprintf( val, sizeof( val ), "%d", (int)value );

	cvttss2si ecx, DWORD PTR _value$[ebp]
	push	ecx
	push	OFFSET $SG131203
	push	32					; 00000020H
	lea	edx, DWORD PTR _val$[ebp]
	push	edx
	call	_Q_snprintf
	add	esp, 16					; 00000010H
	jmp	SHORT $LN3@Cvar_SetVa
$LN2@Cvar_SetVa:

; 582  : 	else Q_snprintf( val, sizeof( val ), "%f", value );

	cvtss2sd xmm0, DWORD PTR _value$[ebp]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	push	OFFSET $SG131204
	push	32					; 00000020H
	lea	eax, DWORD PTR _val$[ebp]
	push	eax
	call	_Q_snprintf
	add	esp, 20					; 00000014H
$LN3@Cvar_SetVa:

; 583  : 
; 584  : 	Cvar_Set( var_name, val );

	lea	ecx, DWORD PTR _val$[ebp]
	push	ecx
	mov	edx, DWORD PTR _var_name$[ebp]
	push	edx
	call	_Cvar_Set
	add	esp, 8

; 585  : }

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_Cvar_SetValue ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xash_build4529_src\engine\common\cvar.c
_TEXT	SEGMENT
_var$ = -4						; size = 4
_var_name$ = 8						; size = 4
_value$ = 12						; size = 4
_Cvar_Set PROC

; 558  : {

	push	ebp
	mov	ebp, esp
	push	ecx

; 559  : 	convar_t	*var = Cvar_FindVar( var_name );

	push	0
	mov	eax, DWORD PTR _var_name$[ebp]
	push	eax
	call	_Cvar_FindVarExt
	add	esp, 8
	mov	DWORD PTR _var$[ebp], eax

; 560  : 
; 561  : 	if( !var )

	cmp	DWORD PTR _var$[ebp], 0
	jne	SHORT $LN2@Cvar_Set

; 562  : 	{
; 563  : 		// there is an error in C code if this happens
; 564  : 		Con_Printf( "Cvar_Set: variable '%s' not found\n", var_name );

	mov	ecx, DWORD PTR _var_name$[ebp]
	push	ecx
	push	OFFSET $SG131192
	call	_Con_Printf
	add	esp, 8

; 565  : 		return;

	jmp	SHORT $LN1@Cvar_Set
$LN2@Cvar_Set:

; 566  : 	}
; 567  : 
; 568  : 	Cvar_DirectSet( var, value );

	mov	edx, DWORD PTR _value$[ebp]
	push	edx
	mov	eax, DWORD PTR _var$[ebp]
	push	eax
	call	_Cvar_DirectSet
	add	esp, 8
$LN1@Cvar_Set:

; 569  : }

	mov	esp, ebp
	pop	ebp
	ret	0
_Cvar_Set ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xash_build4529_src\engine\common\cvar.c
_TEXT	SEGMENT
_pszValue$ = -4						; size = 4
_var$ = 8						; size = 4
_value$ = 12						; size = 4
_Cvar_DirectSet PROC

; 463  : {

	push	ebp
	mov	ebp, esp
	push	ecx

; 464  : 	const char	*pszValue;
; 465  : 	
; 466  : 	if( !var ) return;	// ???

	cmp	DWORD PTR _var$[ebp], 0
	jne	SHORT $LN2@Cvar_Direc
	jmp	$LN1@Cvar_Direc
$LN2@Cvar_Direc:

; 467  : 
; 468  : 	// lookup for registration
; 469  : 	if( CVAR_CHECK_SENTINEL( var ) || ( var->next == NULL && !FBitSet( var->flags, FCVAR_EXTENDED|FCVAR_ALLOCATED )))

	mov	eax, DWORD PTR _var$[ebp]
	cmp	DWORD PTR [eax+16], -559038737		; deadbeefH
	je	SHORT $LN4@Cvar_Direc
	mov	ecx, DWORD PTR _var$[ebp]
	cmp	DWORD PTR [ecx+16], 0
	jne	SHORT $LN3@Cvar_Direc
	mov	edx, DWORD PTR _var$[ebp]
	mov	eax, DWORD PTR [edx+8]
	and	eax, 786432				; 000c0000H
	jne	SHORT $LN3@Cvar_Direc
$LN4@Cvar_Direc:

; 470  : 	{
; 471  : 		// need to registering cvar fisrt
; 472  : 		Cvar_RegisterVariable( var );	// ok, register it

	mov	ecx, DWORD PTR _var$[ebp]
	push	ecx
	call	_Cvar_RegisterVariable
	add	esp, 4
$LN3@Cvar_Direc:

; 473  : 	}
; 474  : 
; 475  : 	// lookup for registration again
; 476  : 	if( var != Cvar_FindVar( var->name ))

	push	0
	mov	edx, DWORD PTR _var$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	call	_Cvar_FindVarExt
	add	esp, 8
	cmp	DWORD PTR _var$[ebp], eax
	je	SHORT $LN5@Cvar_Direc

; 477  : 		return; // how this possible?

	jmp	$LN1@Cvar_Direc
$LN5@Cvar_Direc:

; 478  : 
; 479  : 	if( FBitSet( var->flags, FCVAR_READ_ONLY|FCVAR_GLCONFIG ))

	mov	ecx, DWORD PTR _var$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	and	edx, 135168				; 00021000H
	je	SHORT $LN6@Cvar_Direc

; 480  : 	{
; 481  : 		Con_Printf( "%s is read-only.\n", var->name );

	mov	eax, DWORD PTR _var$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	push	OFFSET $SG131156
	call	_Con_Printf
	add	esp, 8

; 482  : 		return;

	jmp	$LN1@Cvar_Direc
$LN6@Cvar_Direc:

; 483  : 	}
; 484  : 	
; 485  : 	if( FBitSet( var->flags, FCVAR_CHEAT ) && !host.allow_cheats )

	mov	edx, DWORD PTR _var$[ebp]
	mov	eax, DWORD PTR [edx+8]
	and	eax, 32768				; 00008000H
	je	SHORT $LN7@Cvar_Direc
	cmp	DWORD PTR _host+34352, 0
	jne	SHORT $LN7@Cvar_Direc

; 486  : 	{
; 487  : 		Con_Printf( "%s is cheat protected.\n", var->name );

	mov	ecx, DWORD PTR _var$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	push	OFFSET $SG131158
	call	_Con_Printf
	add	esp, 8

; 488  : 		return;

	jmp	$LN1@Cvar_Direc
$LN7@Cvar_Direc:

; 489  : 	}
; 490  : 
; 491  : 	// just tell user about deferred changes
; 492  : 	if( FBitSet( var->flags, FCVAR_LATCH ) && ( SV_Active() || CL_Active( )))

	mov	eax, DWORD PTR _var$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	and	ecx, 2048				; 00000800H
	je	SHORT $LN8@Cvar_Direc
	call	_SV_Active
	test	eax, eax
	jne	SHORT $LN9@Cvar_Direc
	call	_CL_Active
	test	eax, eax
	je	SHORT $LN8@Cvar_Direc
$LN9@Cvar_Direc:

; 493  : 		Con_Printf( "%s will be changed upon restarting.\n", var->name );

	mov	edx, DWORD PTR _var$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	push	OFFSET $SG131161
	call	_Con_Printf
	add	esp, 8
$LN8@Cvar_Direc:

; 494  : 
; 495  : 	// check value
; 496  : 	if( !value )

	cmp	DWORD PTR _value$[ebp], 0
	jne	SHORT $LN10@Cvar_Direc

; 497  : 	{
; 498  : 		if( !FBitSet( var->flags, FCVAR_EXTENDED|FCVAR_ALLOCATED ))

	mov	ecx, DWORD PTR _var$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	and	edx, 786432				; 000c0000H
	jne	SHORT $LN11@Cvar_Direc

; 499  : 		{
; 500  : 			Con_Printf( "%s has no default value and can't be reset.\n", var->name );

	mov	eax, DWORD PTR _var$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	push	OFFSET $SG131164
	call	_Con_Printf
	add	esp, 8

; 501  : 			return;

	jmp	$LN1@Cvar_Direc
$LN11@Cvar_Direc:

; 502  : 		}
; 503  : 
; 504  : 		value = var->def_string; // reset to default value

	mov	edx, DWORD PTR _var$[ebp]
	mov	eax, DWORD PTR [edx+24]
	mov	DWORD PTR _value$[ebp], eax
$LN10@Cvar_Direc:

; 505  : 	}
; 506  : 
; 507  : 	pszValue = Cvar_ValidateString( var, value );

	mov	ecx, DWORD PTR _value$[ebp]
	push	ecx
	mov	edx, DWORD PTR _var$[ebp]
	push	edx
	call	_Cvar_ValidateString
	add	esp, 8
	mov	DWORD PTR _pszValue$[ebp], eax

; 508  : 
; 509  : 	// nothing to change
; 510  : 	if( !Q_strcmp( pszValue, var->string ))

	push	99999					; 0001869fH
	mov	eax, DWORD PTR _var$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR _pszValue$[ebp]
	push	edx
	call	_Q_strncmp
	add	esp, 12					; 0000000cH
	test	eax, eax
	jne	SHORT $LN12@Cvar_Direc

; 511  : 		return;

	jmp	$LN1@Cvar_Direc
$LN12@Cvar_Direc:

; 512  : 
; 513  : 	// fill it cls.userinfo, svs.serverinfo
; 514  : 	if( !Cvar_UpdateInfo( var, pszValue, true ))

	push	1
	mov	eax, DWORD PTR _pszValue$[ebp]
	push	eax
	mov	ecx, DWORD PTR _var$[ebp]
	push	ecx
	call	_Cvar_UpdateInfo
	add	esp, 12					; 0000000cH
	test	eax, eax
	jne	SHORT $LN13@Cvar_Direc

; 515  : 		return;

	jmp	SHORT $LN1@Cvar_Direc
$LN13@Cvar_Direc:

; 516  : 
; 517  : 	// and finally changed the cvar itself
; 518  : 	freestring( var->string );

	mov	edx, DWORD PTR _var$[ebp]
	cmp	DWORD PTR [edx+4], 0
	je	SHORT $LN14@Cvar_Direc
	push	518					; 00000206H
	push	OFFSET $SG131168
	mov	eax, DWORD PTR _var$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	call	__Mem_Free
	add	esp, 12					; 0000000cH
	mov	edx, DWORD PTR _var$[ebp]
	mov	DWORD PTR [edx+4], 0
$LN14@Cvar_Direc:

; 519  : 	var->string = copystring( pszValue );

	push	519					; 00000207H
	push	OFFSET $SG131169
	mov	eax, DWORD PTR _pszValue$[ebp]
	push	eax
	mov	ecx, DWORD PTR _host+236
	push	ecx
	call	__copystring
	add	esp, 16					; 00000010H
	mov	edx, DWORD PTR _var$[ebp]
	mov	DWORD PTR [edx+4], eax

; 520  : 	var->value = Q_atof( var->string );

	mov	eax, DWORD PTR _var$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	call	_Q_atof
	add	esp, 4
	mov	edx, DWORD PTR _var$[ebp]
	fstp	DWORD PTR [edx+12]

; 521  : 
; 522  : 	// tell engine about changes
; 523  : 	Cvar_Changed( var );

	mov	eax, DWORD PTR _var$[ebp]
	push	eax
	call	_Cvar_Changed
	add	esp, 4
$LN1@Cvar_Direc:

; 524  : }

	mov	esp, ebp
	pop	ebp
	ret	0
_Cvar_DirectSet ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xash_build4529_src\engine\common\cvar.c
_TEXT	SEGMENT
_var$ = -4						; size = 4
_var_name$ = 8						; size = 4
_value$ = 12						; size = 4
_flags$ = 16						; size = 4
_Cvar_FullSet PROC

; 534  : {

	push	ebp
	mov	ebp, esp
	push	ecx

; 535  : 	convar_t	*var = Cvar_FindVar( var_name );

	push	0
	mov	eax, DWORD PTR _var_name$[ebp]
	push	eax
	call	_Cvar_FindVarExt
	add	esp, 8
	mov	DWORD PTR _var$[ebp], eax

; 536  : 
; 537  : 	if( !var )

	cmp	DWORD PTR _var$[ebp], 0
	jne	SHORT $LN2@Cvar_FullS

; 538  : 	{
; 539  : 		Cvar_Get( var_name, value, flags, "" );

	push	OFFSET $SG131181
	mov	ecx, DWORD PTR _flags$[ebp]
	push	ecx
	mov	edx, DWORD PTR _value$[ebp]
	push	edx
	mov	eax, DWORD PTR _var_name$[ebp]
	push	eax
	call	_Cvar_Get
	add	esp, 16					; 00000010H

; 540  : 		return;

	jmp	SHORT $LN1@Cvar_FullS
$LN2@Cvar_FullS:

; 541  : 	}
; 542  : 
; 543  : 	freestring( var->string );

	mov	ecx, DWORD PTR _var$[ebp]
	cmp	DWORD PTR [ecx+4], 0
	je	SHORT $LN3@Cvar_FullS
	push	543					; 0000021fH
	push	OFFSET $SG131183
	mov	edx, DWORD PTR _var$[ebp]
	mov	eax, DWORD PTR [edx+4]
	push	eax
	call	__Mem_Free
	add	esp, 12					; 0000000cH
	mov	ecx, DWORD PTR _var$[ebp]
	mov	DWORD PTR [ecx+4], 0
$LN3@Cvar_FullS:

; 544  : 	var->string = copystring( value );

	push	544					; 00000220H
	push	OFFSET $SG131184
	mov	edx, DWORD PTR _value$[ebp]
	push	edx
	mov	eax, DWORD PTR _host+236
	push	eax
	call	__copystring
	add	esp, 16					; 00000010H
	mov	ecx, DWORD PTR _var$[ebp]
	mov	DWORD PTR [ecx+4], eax

; 545  : 	var->value = Q_atof( var->string );

	mov	edx, DWORD PTR _var$[ebp]
	mov	eax, DWORD PTR [edx+4]
	push	eax
	call	_Q_atof
	add	esp, 4
	mov	ecx, DWORD PTR _var$[ebp]
	fstp	DWORD PTR [ecx+12]

; 546  : 	SetBits( var->flags, flags );

	mov	edx, DWORD PTR _var$[ebp]
	mov	eax, DWORD PTR [edx+8]
	or	eax, DWORD PTR _flags$[ebp]
	mov	ecx, DWORD PTR _var$[ebp]
	mov	DWORD PTR [ecx+8], eax

; 547  : 
; 548  : 	// tell engine about changes
; 549  : 	Cvar_Changed( var );

	mov	edx, DWORD PTR _var$[ebp]
	push	edx
	call	_Cvar_Changed
	add	esp, 4
$LN1@Cvar_FullS:

; 550  : }

	mov	esp, ebp
	pop	ebp
	ret	0
_Cvar_FullSet ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xash_build4529_src\engine\common\cvar.c
_TEXT	SEGMENT
_var$ = -4						; size = 4
_checkbit$ = 8						; size = 4
_buffer$ = 12						; size = 4
_ptr$ = 16						; size = 4
_callback$ = 20						; size = 4
_Cvar_LookupVars PROC

; 280  : {

	push	ebp
	mov	ebp, esp
	push	ecx

; 281  : 	convar_t	*var;
; 282  : 
; 283  : 	// nothing to process ?
; 284  : 	if( !callback ) return;

	cmp	DWORD PTR _callback$[ebp], 0
	jne	SHORT $LN5@Cvar_Looku
	jmp	$LN1@Cvar_Looku
$LN5@Cvar_Looku:

; 285  : 
; 286  : 	// force checkbit to 0 for lookup all cvars
; 287  : 	for( var = cvar_vars; var; var = var->next )

	mov	eax, DWORD PTR _cvar_vars
	mov	DWORD PTR _var$[ebp], eax
	jmp	SHORT $LN4@Cvar_Looku
$LN2@Cvar_Looku:
	mov	ecx, DWORD PTR _var$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	DWORD PTR _var$[ebp], edx
$LN4@Cvar_Looku:
	cmp	DWORD PTR _var$[ebp], 0
	je	$LN1@Cvar_Looku

; 288  : 	{
; 289  : 		if( checkbit && !FBitSet( var->flags, checkbit ))

	cmp	DWORD PTR _checkbit$[ebp], 0
	je	SHORT $LN6@Cvar_Looku
	mov	eax, DWORD PTR _var$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	and	ecx, DWORD PTR _checkbit$[ebp]
	jne	SHORT $LN6@Cvar_Looku

; 290  : 			continue;

	jmp	SHORT $LN2@Cvar_Looku
$LN6@Cvar_Looku:

; 291  : 
; 292  : 		if( buffer )

	cmp	DWORD PTR _buffer$[ebp], 0
	je	SHORT $LN7@Cvar_Looku

; 293  : 		{
; 294  : 			callback( var->name, var->string, buffer, ptr );

	mov	edx, DWORD PTR _ptr$[ebp]
	push	edx
	mov	eax, DWORD PTR _buffer$[ebp]
	push	eax
	mov	ecx, DWORD PTR _var$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	mov	eax, DWORD PTR _var$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	DWORD PTR _callback$[ebp]
	add	esp, 16					; 00000010H

; 295  : 		}

	jmp	SHORT $LN8@Cvar_Looku
$LN7@Cvar_Looku:

; 296  : 		else
; 297  : 		{
; 298  : 			// NOTE: dlls cvars doesn't have description
; 299  : 			if( FBitSet( var->flags, FCVAR_ALLOCATED|FCVAR_EXTENDED ))

	mov	edx, DWORD PTR _var$[ebp]
	mov	eax, DWORD PTR [edx+8]
	and	eax, 786432				; 000c0000H
	je	SHORT $LN9@Cvar_Looku

; 300  : 				callback( var->name, var->string, var->desc, ptr );

	mov	ecx, DWORD PTR _ptr$[ebp]
	push	ecx
	mov	edx, DWORD PTR _var$[ebp]
	mov	eax, DWORD PTR [edx+20]
	push	eax
	mov	ecx, DWORD PTR _var$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	mov	eax, DWORD PTR _var$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	DWORD PTR _callback$[ebp]
	add	esp, 16					; 00000010H
	jmp	SHORT $LN8@Cvar_Looku
$LN9@Cvar_Looku:

; 301  : 			else callback( var->name, var->string, "", ptr );

	mov	edx, DWORD PTR _ptr$[ebp]
	push	edx
	push	OFFSET $SG131067
	mov	eax, DWORD PTR _var$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR _var$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	call	DWORD PTR _callback$[ebp]
	add	esp, 16					; 00000010H
$LN8@Cvar_Looku:

; 302  : 		}
; 303  : 	}

	jmp	$LN2@Cvar_Looku
$LN1@Cvar_Looku:

; 304  : }

	mov	esp, ebp
	pop	ebp
	ret	0
_Cvar_LookupVars ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xash_build4529_src\engine\common\cvar.c
_TEXT	SEGMENT
_cur$ = -12						; size = 4
_find$ = -8						; size = 4
_var$ = -4						; size = 4
_name$ = 8						; size = 4
_value$ = 12						; size = 4
_flags$ = 16						; size = 4
_var_desc$ = 20						; size = 4
_Cvar_Get PROC

; 315  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH

; 316  : 	convar_t	*cur, *find, *var;
; 317  : 	
; 318  : 	ASSERT( name && *name );

	cmp	DWORD PTR _name$[ebp], 0
	je	SHORT $LN6@Cvar_Get
	mov	eax, DWORD PTR _name$[ebp]
	movsx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	jne	SHORT $LN5@Cvar_Get
$LN6@Cvar_Get:
	push	318					; 0000013eH
	push	OFFSET $SG131091
	push	OFFSET $SG131092
	call	_Sys_Error
	add	esp, 12					; 0000000cH
$LN5@Cvar_Get:

; 319  : 
; 320  : 	// check for command coexisting
; 321  : 	if( Cmd_Exists( name ))

	mov	edx, DWORD PTR _name$[ebp]
	push	edx
	call	_Cmd_Exists
	add	esp, 4
	test	eax, eax
	je	SHORT $LN7@Cvar_Get

; 322  : 	{
; 323  : 		Con_DPrintf( S_ERROR "can't register variable '%s', is already defined as command\n", name );

	mov	eax, DWORD PTR _name$[ebp]
	push	eax
	push	OFFSET $SG131094
	call	_Con_DPrintf
	add	esp, 8

; 324  : 		return NULL;

	xor	eax, eax
	jmp	$LN1@Cvar_Get
$LN7@Cvar_Get:

; 325  : 	}
; 326  : 
; 327  : 	var = Cvar_FindVar( name );

	push	0
	mov	ecx, DWORD PTR _name$[ebp]
	push	ecx
	call	_Cvar_FindVarExt
	add	esp, 8
	mov	DWORD PTR _var$[ebp], eax

; 328  : 
; 329  : 	if( var )

	cmp	DWORD PTR _var$[ebp], 0
	je	$LN8@Cvar_Get

; 330  : 	{
; 331  : 		// already existed?
; 332  : 		if( FBitSet( flags, FCVAR_GLCONFIG ))

	mov	edx, DWORD PTR _flags$[ebp]
	and	edx, 4096				; 00001000H
	je	$LN9@Cvar_Get

; 333  : 		{
; 334  : 			// NOTE: cvars without description produced by Cvar_FullSet
; 335  : 			// which executed from the config file. So we don't need to
; 336  : 			// change value here: we *already* have actual value from config.
; 337  : 			// in other cases we need to rewrite them
; 338  : 			if( Q_strcmp( var->desc, "" ))

	push	99999					; 0001869fH
	push	OFFSET $SG131099
	mov	eax, DWORD PTR _var$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	push	ecx
	call	_Q_strncmp
	add	esp, 12					; 0000000cH
	test	eax, eax
	je	SHORT $LN11@Cvar_Get

; 339  : 			{
; 340  : 				// directly set value
; 341  : 				freestring( var->string );

	mov	edx, DWORD PTR _var$[ebp]
	cmp	DWORD PTR [edx+4], 0
	je	SHORT $LN12@Cvar_Get
	push	341					; 00000155H
	push	OFFSET $SG131101
	mov	eax, DWORD PTR _var$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	call	__Mem_Free
	add	esp, 12					; 0000000cH
	mov	edx, DWORD PTR _var$[ebp]
	mov	DWORD PTR [edx+4], 0
$LN12@Cvar_Get:

; 342  : 				var->string = copystring( value );

	push	342					; 00000156H
	push	OFFSET $SG131102
	mov	eax, DWORD PTR _value$[ebp]
	push	eax
	mov	ecx, DWORD PTR _host+236
	push	ecx
	call	__copystring
	add	esp, 16					; 00000010H
	mov	edx, DWORD PTR _var$[ebp]
	mov	DWORD PTR [edx+4], eax

; 343  : 				var->value = Q_atof( var->string );

	mov	eax, DWORD PTR _var$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	call	_Q_atof
	add	esp, 4
	mov	edx, DWORD PTR _var$[ebp]
	fstp	DWORD PTR [edx+12]

; 344  : 				SetBits( var->flags, flags );

	mov	eax, DWORD PTR _var$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	or	ecx, DWORD PTR _flags$[ebp]
	mov	edx, DWORD PTR _var$[ebp]
	mov	DWORD PTR [edx+8], ecx

; 345  : 
; 346  : 				// tell engine about changes
; 347  : 				Cvar_Changed( var );

	mov	eax, DWORD PTR _var$[ebp]
	push	eax
	call	_Cvar_Changed
	add	esp, 4
$LN11@Cvar_Get:

; 348  : 			}
; 349  : 		}

	jmp	SHORT $LN10@Cvar_Get
$LN9@Cvar_Get:

; 350  : 		else
; 351  : 		{
; 352  : 			SetBits( var->flags, flags );

	mov	ecx, DWORD PTR _var$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	or	edx, DWORD PTR _flags$[ebp]
	mov	eax, DWORD PTR _var$[ebp]
	mov	DWORD PTR [eax+8], edx

; 353  : 			Cvar_DirectSet( var, value );

	mov	ecx, DWORD PTR _value$[ebp]
	push	ecx
	mov	edx, DWORD PTR _var$[ebp]
	push	edx
	call	_Cvar_DirectSet
	add	esp, 8
$LN10@Cvar_Get:

; 354  : 		}
; 355  : 
; 356  : 		if( FBitSet( var->flags, FCVAR_ALLOCATED ) && Q_strcmp( var_desc, var->desc ))

	mov	eax, DWORD PTR _var$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	and	ecx, 524288				; 00080000H
	je	$LN13@Cvar_Get
	push	99999					; 0001869fH
	mov	edx, DWORD PTR _var$[ebp]
	mov	eax, DWORD PTR [edx+20]
	push	eax
	mov	ecx, DWORD PTR _var_desc$[ebp]
	push	ecx
	call	_Q_strncmp
	add	esp, 12					; 0000000cH
	test	eax, eax
	je	SHORT $LN13@Cvar_Get

; 357  : 		{
; 358  : 			if( !FBitSet( flags, FCVAR_GLCONFIG ))

	mov	edx, DWORD PTR _flags$[ebp]
	and	edx, 4096				; 00001000H
	jne	SHORT $LN14@Cvar_Get

; 359  : 				Con_Reportf( "%s change description from %s to %s\n", var->name, var->desc, var_desc );

	mov	eax, DWORD PTR _var_desc$[ebp]
	push	eax
	mov	ecx, DWORD PTR _var$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	push	edx
	mov	eax, DWORD PTR _var$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	push	OFFSET $SG131105
	call	_Con_Reportf
	add	esp, 16					; 00000010H
$LN14@Cvar_Get:

; 360  : 			// update description if needs
; 361  : 			freestring( var->desc );

	mov	edx, DWORD PTR _var$[ebp]
	cmp	DWORD PTR [edx+20], 0
	je	SHORT $LN15@Cvar_Get
	push	361					; 00000169H
	push	OFFSET $SG131107
	mov	eax, DWORD PTR _var$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	push	ecx
	call	__Mem_Free
	add	esp, 12					; 0000000cH
	mov	edx, DWORD PTR _var$[ebp]
	mov	DWORD PTR [edx+20], 0
$LN15@Cvar_Get:

; 362  : 			var->desc = copystring( var_desc );

	push	362					; 0000016aH
	push	OFFSET $SG131108
	mov	eax, DWORD PTR _var_desc$[ebp]
	push	eax
	mov	ecx, DWORD PTR _host+236
	push	ecx
	call	__copystring
	add	esp, 16					; 00000010H
	mov	edx, DWORD PTR _var$[ebp]
	mov	DWORD PTR [edx+20], eax
$LN13@Cvar_Get:

; 363  : 		}
; 364  : 
; 365  : 		return var;

	mov	eax, DWORD PTR _var$[ebp]
	jmp	$LN1@Cvar_Get
$LN8@Cvar_Get:

; 366  : 	}
; 367  : 
; 368  : 	// allocate a new cvar
; 369  : 	var = Z_Malloc( sizeof( *var ));

	push	369					; 00000171H
	push	OFFSET $SG131109
	push	0
	push	28					; 0000001cH
	mov	eax, DWORD PTR _host+236
	push	eax
	call	__Mem_Alloc
	add	esp, 20					; 00000014H
	mov	DWORD PTR _var$[ebp], eax

; 370  : 	var->name = copystring( name );

	push	370					; 00000172H
	push	OFFSET $SG131110
	mov	ecx, DWORD PTR _name$[ebp]
	push	ecx
	mov	edx, DWORD PTR _host+236
	push	edx
	call	__copystring
	add	esp, 16					; 00000010H
	mov	ecx, DWORD PTR _var$[ebp]
	mov	DWORD PTR [ecx], eax

; 371  : 	var->string = copystring( value );

	push	371					; 00000173H
	push	OFFSET $SG131111
	mov	edx, DWORD PTR _value$[ebp]
	push	edx
	mov	eax, DWORD PTR _host+236
	push	eax
	call	__copystring
	add	esp, 16					; 00000010H
	mov	ecx, DWORD PTR _var$[ebp]
	mov	DWORD PTR [ecx+4], eax

; 372  : 	var->def_string = copystring( value );

	push	372					; 00000174H
	push	OFFSET $SG131112
	mov	edx, DWORD PTR _value$[ebp]
	push	edx
	mov	eax, DWORD PTR _host+236
	push	eax
	call	__copystring
	add	esp, 16					; 00000010H
	mov	ecx, DWORD PTR _var$[ebp]
	mov	DWORD PTR [ecx+24], eax

; 373  : 	var->desc = copystring( var_desc );

	push	373					; 00000175H
	push	OFFSET $SG131113
	mov	edx, DWORD PTR _var_desc$[ebp]
	push	edx
	mov	eax, DWORD PTR _host+236
	push	eax
	call	__copystring
	add	esp, 16					; 00000010H
	mov	ecx, DWORD PTR _var$[ebp]
	mov	DWORD PTR [ecx+20], eax

; 374  : 	var->value = Q_atof( var->string );

	mov	edx, DWORD PTR _var$[ebp]
	mov	eax, DWORD PTR [edx+4]
	push	eax
	call	_Q_atof
	add	esp, 4
	mov	ecx, DWORD PTR _var$[ebp]
	fstp	DWORD PTR [ecx+12]

; 375  : 	var->flags = flags|FCVAR_ALLOCATED;

	mov	edx, DWORD PTR _flags$[ebp]
	or	edx, 524288				; 00080000H
	mov	eax, DWORD PTR _var$[ebp]
	mov	DWORD PTR [eax+8], edx

; 376  : 
; 377  : 	// link the variable in alphanumerical order
; 378  : 	for( cur = NULL, find = cvar_vars; find && Q_strcmp( find->name, var->name ) < 0; cur = find, find = find->next );

	mov	DWORD PTR _cur$[ebp], 0
	mov	ecx, DWORD PTR _cvar_vars
	mov	DWORD PTR _find$[ebp], ecx
	jmp	SHORT $LN4@Cvar_Get
$LN2@Cvar_Get:
	mov	edx, DWORD PTR _find$[ebp]
	mov	DWORD PTR _cur$[ebp], edx
	mov	eax, DWORD PTR _find$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR _find$[ebp], ecx
$LN4@Cvar_Get:
	cmp	DWORD PTR _find$[ebp], 0
	je	SHORT $LN3@Cvar_Get
	push	99999					; 0001869fH
	mov	edx, DWORD PTR _var$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	mov	ecx, DWORD PTR _find$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	_Q_strncmp
	add	esp, 12					; 0000000cH
	test	eax, eax
	jge	SHORT $LN3@Cvar_Get
	jmp	SHORT $LN2@Cvar_Get
$LN3@Cvar_Get:

; 379  : 
; 380  : 	if( cur ) cur->next = var;

	cmp	DWORD PTR _cur$[ebp], 0
	je	SHORT $LN16@Cvar_Get
	mov	eax, DWORD PTR _cur$[ebp]
	mov	ecx, DWORD PTR _var$[ebp]
	mov	DWORD PTR [eax+16], ecx
	jmp	SHORT $LN17@Cvar_Get
$LN16@Cvar_Get:

; 381  : 	else cvar_vars = var;

	mov	edx, DWORD PTR _var$[ebp]
	mov	DWORD PTR _cvar_vars, edx
$LN17@Cvar_Get:

; 382  : 	var->next = find;

	mov	eax, DWORD PTR _var$[ebp]
	mov	ecx, DWORD PTR _find$[ebp]
	mov	DWORD PTR [eax+16], ecx

; 383  : 
; 384  : 	// fill it cls.userinfo, svs.serverinfo
; 385  : 	Cvar_UpdateInfo( var, var->string, false );

	push	0
	mov	edx, DWORD PTR _var$[ebp]
	mov	eax, DWORD PTR [edx+4]
	push	eax
	mov	ecx, DWORD PTR _var$[ebp]
	push	ecx
	call	_Cvar_UpdateInfo
	add	esp, 12					; 0000000cH

; 386  : 
; 387  : 	// tell engine about changes
; 388  : 	Cvar_Changed( var );

	mov	edx, DWORD PTR _var$[ebp]
	push	edx
	call	_Cvar_Changed
	add	esp, 4

; 389  : 
; 390  : 	return var;

	mov	eax, DWORD PTR _var$[ebp]
$LN1@Cvar_Get:

; 391  : }

	mov	esp, ebp
	pop	ebp
	ret	0
_Cvar_Get ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xash_build4529_src\engine\common\cvar.c
_TEXT	SEGMENT
_dup$ = -12						; size = 4
_cur$ = -8						; size = 4
_find$ = -4						; size = 4
_var$ = 8						; size = 4
_Cvar_RegisterVariable PROC

; 401  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH

; 402  : 	convar_t	*cur, *find, *dup;
; 403  : 
; 404  : 	ASSERT( var != NULL );

	cmp	DWORD PTR _var$[ebp], 0
	jne	SHORT $LN5@Cvar_Regis
	push	404					; 00000194H
	push	OFFSET $SG131129
	push	OFFSET $SG131130
	call	_Sys_Error
	add	esp, 12					; 0000000cH
$LN5@Cvar_Regis:

; 405  : 
; 406  : 	// first check to see if it has allready been defined
; 407  : 	dup = Cvar_FindVar( var->name );

	push	0
	mov	eax, DWORD PTR _var$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	_Cvar_FindVarExt
	add	esp, 8
	mov	DWORD PTR _dup$[ebp], eax

; 408  : 
; 409  : 	if( dup )

	cmp	DWORD PTR _dup$[ebp], 0
	je	SHORT $LN6@Cvar_Regis

; 410  : 	{
; 411  : 		if( !FBitSet( dup->flags, FCVAR_TEMPORARY ))

	mov	edx, DWORD PTR _dup$[ebp]
	mov	eax, DWORD PTR [edx+8]
	and	eax, 2097152				; 00200000H
	jne	SHORT $LN7@Cvar_Regis

; 412  : 		{
; 413  : 			Con_DPrintf( S_ERROR "can't register variable '%s', is already defined\n", var->name );

	mov	ecx, DWORD PTR _var$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	push	OFFSET $SG131133
	call	_Con_DPrintf
	add	esp, 8

; 414  : 			return;

	jmp	$LN1@Cvar_Regis
$LN7@Cvar_Regis:

; 415  : 		}
; 416  : 
; 417  : 		// time to replace temp variable with real
; 418  : 		Cvar_UnlinkVar( var->name, FCVAR_TEMPORARY );

	push	2097152					; 00200000H
	mov	eax, DWORD PTR _var$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	_Cvar_UnlinkVar
	add	esp, 8
$LN6@Cvar_Regis:

; 419  : 	}
; 420  : 
; 421  : 	// check for overlap with a command
; 422  : 	if( Cmd_Exists( var->name ))

	mov	edx, DWORD PTR _var$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	call	_Cmd_Exists
	add	esp, 4
	test	eax, eax
	je	SHORT $LN8@Cvar_Regis

; 423  : 	{
; 424  : 		Con_DPrintf( S_ERROR "can't register variable '%s', is already defined as command\n", var->name );

	mov	ecx, DWORD PTR _var$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	push	OFFSET $SG131135
	call	_Con_DPrintf
	add	esp, 8

; 425  : 		return;

	jmp	$LN1@Cvar_Regis
$LN8@Cvar_Regis:

; 426  : 	}
; 427  : 
; 428  : 	// NOTE: all the 'long' engine cvars have an special setntinel on static declaration
; 429  : 	// (all the engine cvars should be declared through CVAR_DEFINE macros or they shouldn't working properly anyway)
; 430  : 	// so we can determine long version 'convar_t' and short version 'cvar_t' more reliable than by FCVAR_EXTDLL flag
; 431  : 	if( CVAR_CHECK_SENTINEL( var )) SetBits( var->flags, FCVAR_EXTENDED );

	mov	eax, DWORD PTR _var$[ebp]
	cmp	DWORD PTR [eax+16], -559038737		; deadbeefH
	jne	SHORT $LN9@Cvar_Regis
	mov	ecx, DWORD PTR _var$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	or	edx, 262144				; 00040000H
	mov	eax, DWORD PTR _var$[ebp]
	mov	DWORD PTR [eax+8], edx
$LN9@Cvar_Regis:

; 432  : 
; 433  : 	// copy the value off, because future sets will free it
; 434  : 	if( FBitSet( var->flags, FCVAR_EXTENDED ))

	mov	ecx, DWORD PTR _var$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	and	edx, 262144				; 00040000H
	je	SHORT $LN10@Cvar_Regis

; 435  : 		var->def_string = var->string; // just swap pointers

	mov	eax, DWORD PTR _var$[ebp]
	mov	ecx, DWORD PTR _var$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+24], edx
$LN10@Cvar_Regis:

; 436  : 
; 437  : 	var->string = copystring( var->string );	

	push	437					; 000001b5H
	push	OFFSET $SG131138
	mov	eax, DWORD PTR _var$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR _host+236
	push	edx
	call	__copystring
	add	esp, 16					; 00000010H
	mov	ecx, DWORD PTR _var$[ebp]
	mov	DWORD PTR [ecx+4], eax

; 438  : 	var->value = Q_atof( var->string );

	mov	edx, DWORD PTR _var$[ebp]
	mov	eax, DWORD PTR [edx+4]
	push	eax
	call	_Q_atof
	add	esp, 4
	mov	ecx, DWORD PTR _var$[ebp]
	fstp	DWORD PTR [ecx+12]

; 439  : 
; 440  : 	// find the supposed position in chain (alphanumerical order)
; 441  : 	for( cur = NULL, find = cvar_vars; find && Q_strcmp( find->name, var->name ) < 0; cur = find, find = find->next );

	mov	DWORD PTR _cur$[ebp], 0
	mov	edx, DWORD PTR _cvar_vars
	mov	DWORD PTR _find$[ebp], edx
	jmp	SHORT $LN4@Cvar_Regis
$LN2@Cvar_Regis:
	mov	eax, DWORD PTR _find$[ebp]
	mov	DWORD PTR _cur$[ebp], eax
	mov	ecx, DWORD PTR _find$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	DWORD PTR _find$[ebp], edx
$LN4@Cvar_Regis:
	cmp	DWORD PTR _find$[ebp], 0
	je	SHORT $LN3@Cvar_Regis
	push	99999					; 0001869fH
	mov	eax, DWORD PTR _var$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	edx, DWORD PTR _find$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	call	_Q_strncmp
	add	esp, 12					; 0000000cH
	test	eax, eax
	jge	SHORT $LN3@Cvar_Regis
	jmp	SHORT $LN2@Cvar_Regis
$LN3@Cvar_Regis:

; 442  : 
; 443  : 	// now link variable	
; 444  : 	if( cur ) cur->next = var;

	cmp	DWORD PTR _cur$[ebp], 0
	je	SHORT $LN11@Cvar_Regis
	mov	ecx, DWORD PTR _cur$[ebp]
	mov	edx, DWORD PTR _var$[ebp]
	mov	DWORD PTR [ecx+16], edx
	jmp	SHORT $LN12@Cvar_Regis
$LN11@Cvar_Regis:

; 445  : 	else cvar_vars = var;

	mov	eax, DWORD PTR _var$[ebp]
	mov	DWORD PTR _cvar_vars, eax
$LN12@Cvar_Regis:

; 446  : 	var->next = find;

	mov	ecx, DWORD PTR _var$[ebp]
	mov	edx, DWORD PTR _find$[ebp]
	mov	DWORD PTR [ecx+16], edx

; 447  : 
; 448  : 	// fill it cls.userinfo, svs.serverinfo
; 449  : 	Cvar_UpdateInfo( var, var->string, false );

	push	0
	mov	eax, DWORD PTR _var$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR _var$[ebp]
	push	edx
	call	_Cvar_UpdateInfo
	add	esp, 12					; 0000000cH

; 450  : 
; 451  : 	// tell engine about changes
; 452  : 	Cvar_Changed( var );

	mov	eax, DWORD PTR _var$[ebp]
	push	eax
	call	_Cvar_Changed
	add	esp, 4
$LN1@Cvar_Regis:

; 453  : }

	mov	esp, ebp
	pop	ebp
	ret	0
_Cvar_RegisterVariable ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xash_build4529_src\engine\common\cvar.c
_TEXT	SEGMENT
_var$ = -4						; size = 4
_var_name$ = 8						; size = 4
_ignore_group$ = 12					; size = 4
_Cvar_FindVarExt PROC

; 30   : {

	push	ebp
	mov	ebp, esp
	push	ecx

; 31   : 	convar_t	*var;
; 32   : 
; 33   : 	if( !var_name )

	cmp	DWORD PTR _var_name$[ebp], 0
	jne	SHORT $LN5@Cvar_FindV

; 34   : 		return NULL;

	xor	eax, eax
	jmp	SHORT $LN1@Cvar_FindV
$LN5@Cvar_FindV:

; 35   : 
; 36   : 	for( var = cvar_vars; var; var = var->next )

	mov	eax, DWORD PTR _cvar_vars
	mov	DWORD PTR _var$[ebp], eax
	jmp	SHORT $LN4@Cvar_FindV
$LN2@Cvar_FindV:
	mov	ecx, DWORD PTR _var$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	DWORD PTR _var$[ebp], edx
$LN4@Cvar_FindV:
	cmp	DWORD PTR _var$[ebp], 0
	je	SHORT $LN3@Cvar_FindV

; 37   : 	{
; 38   : 		if( ignore_group && FBitSet( ignore_group, var->flags ))

	cmp	DWORD PTR _ignore_group$[ebp], 0
	je	SHORT $LN6@Cvar_FindV
	mov	eax, DWORD PTR _var$[ebp]
	mov	ecx, DWORD PTR _ignore_group$[ebp]
	and	ecx, DWORD PTR [eax+8]
	je	SHORT $LN6@Cvar_FindV

; 39   : 			continue;

	jmp	SHORT $LN2@Cvar_FindV
$LN6@Cvar_FindV:

; 40   : 
; 41   : 		if( !Q_stricmp( var_name, var->name ))

	push	99999					; 0001869fH
	mov	edx, DWORD PTR _var$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	mov	ecx, DWORD PTR _var_name$[ebp]
	push	ecx
	call	_Q_strnicmp
	add	esp, 12					; 0000000cH
	test	eax, eax
	jne	SHORT $LN7@Cvar_FindV

; 42   : 			return var;

	mov	eax, DWORD PTR _var$[ebp]
	jmp	SHORT $LN1@Cvar_FindV
$LN7@Cvar_FindV:

; 43   : 	}

	jmp	SHORT $LN2@Cvar_FindV
$LN3@Cvar_FindV:

; 44   : 
; 45   : 	return NULL;

	xor	eax, eax
$LN1@Cvar_FindV:

; 46   : }

	mov	esp, ebp
	pop	ebp
	ret	0
_Cvar_FindVarExt ENDP
_TEXT	ENDS
END
