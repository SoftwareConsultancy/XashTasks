; Listing generated by Microsoft (R) Optimizing Compiler Version 19.16.27045.0 

	TITLE	C:\Users\USER\Downloads\xash_build4529_src\engine\client\gl_beams.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	_cl_viewbeams
_DATA	SEGMENT
COMM	_pglGetError:DWORD
COMM	_pglGetString:DWORD
COMM	_pglAccum:DWORD
COMM	_pglAlphaFunc:DWORD
COMM	_pglArrayElement:DWORD
COMM	_pglBegin:DWORD
COMM	_pglBindTexture:DWORD
COMM	_pglBitmap:DWORD
COMM	_pglBlendFunc:DWORD
COMM	_pglCallList:DWORD
COMM	_pglCallLists:DWORD
COMM	_pglClear:DWORD
COMM	_pglClearAccum:DWORD
COMM	_pglClearColor:DWORD
COMM	_pglClearDepth:DWORD
COMM	_pglClearIndex:DWORD
COMM	_pglClearStencil:DWORD
COMM	_pglIsEnabled:DWORD
COMM	_pglIsList:DWORD
COMM	_pglIsTexture:DWORD
COMM	_pglClipPlane:DWORD
COMM	_pglColor3b:DWORD
COMM	_pglColor3bv:DWORD
COMM	_pglColor3d:DWORD
COMM	_pglColor3dv:DWORD
COMM	_pglColor3f:DWORD
COMM	_pglColor3fv:DWORD
COMM	_pglColor3i:DWORD
COMM	_pglColor3iv:DWORD
COMM	_pglColor3s:DWORD
COMM	_pglColor3sv:DWORD
COMM	_pglColor3ub:DWORD
COMM	_pglColor3ubv:DWORD
COMM	_pglColor3ui:DWORD
COMM	_pglColor3uiv:DWORD
COMM	_pglColor3us:DWORD
COMM	_pglColor3usv:DWORD
COMM	_pglColor4b:DWORD
COMM	_pglColor4bv:DWORD
COMM	_pglColor4d:DWORD
COMM	_pglColor4dv:DWORD
COMM	_pglColor4f:DWORD
COMM	_pglColor4fv:DWORD
COMM	_pglColor4i:DWORD
COMM	_pglColor4iv:DWORD
COMM	_pglColor4s:DWORD
COMM	_pglColor4sv:DWORD
COMM	_pglColor4ub:DWORD
COMM	_pglColor4ubv:DWORD
COMM	_pglColor4ui:DWORD
COMM	_pglColor4uiv:DWORD
COMM	_pglColor4us:DWORD
COMM	_pglColor4usv:DWORD
COMM	_pglColorMask:DWORD
COMM	_pglColorMaterial:DWORD
COMM	_pglColorPointer:DWORD
COMM	_pglCopyPixels:DWORD
COMM	_pglCopyTexImage1D:DWORD
COMM	_pglCopyTexImage2D:DWORD
COMM	_pglCopyTexSubImage1D:DWORD
COMM	_pglCopyTexSubImage2D:DWORD
COMM	_pglCullFace:DWORD
COMM	_pglDeleteLists:DWORD
COMM	_pglDeleteTextures:DWORD
COMM	_pglDepthFunc:DWORD
COMM	_pglDepthMask:DWORD
COMM	_pglDepthRange:DWORD
COMM	_pglDisable:DWORD
COMM	_pglDisableClientState:DWORD
COMM	_pglDrawArrays:DWORD
COMM	_pglDrawBuffer:DWORD
COMM	_pglDrawElements:DWORD
COMM	_pglDrawPixels:DWORD
COMM	_pglEdgeFlag:DWORD
COMM	_pglEdgeFlagPointer:DWORD
COMM	_pglEdgeFlagv:DWORD
COMM	_pglEnable:DWORD
COMM	_pglEnableClientState:DWORD
COMM	_pglEnd:DWORD
COMM	_pglEndList:DWORD
COMM	_pglEvalCoord1d:DWORD
COMM	_pglEvalCoord1dv:DWORD
COMM	_pglEvalCoord1f:DWORD
COMM	_pglEvalCoord1fv:DWORD
COMM	_pglEvalCoord2d:DWORD
COMM	_pglEvalCoord2dv:DWORD
COMM	_pglEvalCoord2f:DWORD
COMM	_pglEvalCoord2fv:DWORD
COMM	_pglEvalMesh1:DWORD
COMM	_pglEvalMesh2:DWORD
COMM	_pglEvalPoint1:DWORD
COMM	_pglEvalPoint2:DWORD
COMM	_pglFeedbackBuffer:DWORD
COMM	_pglFinish:DWORD
COMM	_pglFlush:DWORD
COMM	_pglFogf:DWORD
COMM	_pglFogfv:DWORD
COMM	_pglFogi:DWORD
COMM	_pglFogiv:DWORD
COMM	_pglFrontFace:DWORD
COMM	_pglFrustum:DWORD
COMM	_pglGenTextures:DWORD
COMM	_pglGetBooleanv:DWORD
COMM	_pglGetClipPlane:DWORD
COMM	_pglGetDoublev:DWORD
COMM	_pglGetFloatv:DWORD
COMM	_pglGetIntegerv:DWORD
COMM	_pglGetLightfv:DWORD
COMM	_pglGetLightiv:DWORD
COMM	_pglGetMapdv:DWORD
COMM	_pglGetMapfv:DWORD
COMM	_pglGetMapiv:DWORD
COMM	_pglGetMaterialfv:DWORD
COMM	_pglGetMaterialiv:DWORD
COMM	_pglGetPixelMapfv:DWORD
COMM	_pglGetPixelMapuiv:DWORD
COMM	_pglGetPixelMapusv:DWORD
COMM	_pglGetPointerv:DWORD
COMM	_pglGetPolygonStipple:DWORD
COMM	_pglGetTexEnvfv:DWORD
COMM	_pglGetTexEnviv:DWORD
COMM	_pglGetTexGendv:DWORD
COMM	_pglGetTexGenfv:DWORD
COMM	_pglGetTexGeniv:DWORD
COMM	_pglGetTexImage:DWORD
COMM	_pglGetTexLevelParameterfv:DWORD
COMM	_pglGetTexLevelParameteriv:DWORD
COMM	_pglGetTexParameterfv:DWORD
COMM	_pglGetTexParameteriv:DWORD
COMM	_pglHint:DWORD
COMM	_pglIndexMask:DWORD
COMM	_pglIndexPointer:DWORD
COMM	_pglIndexd:DWORD
COMM	_pglIndexdv:DWORD
COMM	_pglIndexf:DWORD
COMM	_pglIndexfv:DWORD
COMM	_pglIndexi:DWORD
COMM	_pglIndexiv:DWORD
COMM	_pglIndexs:DWORD
COMM	_pglIndexsv:DWORD
COMM	_pglIndexub:DWORD
COMM	_pglIndexubv:DWORD
COMM	_pglInitNames:DWORD
COMM	_pglInterleavedArrays:DWORD
COMM	_pglLightModelf:DWORD
COMM	_pglLightModelfv:DWORD
COMM	_pglLightModeli:DWORD
COMM	_pglLightModeliv:DWORD
COMM	_pglLightf:DWORD
COMM	_pglLightfv:DWORD
COMM	_pglLighti:DWORD
COMM	_pglLightiv:DWORD
COMM	_pglLineStipple:DWORD
COMM	_pglLineWidth:DWORD
COMM	_pglListBase:DWORD
COMM	_pglLoadIdentity:DWORD
COMM	_pglLoadMatrixd:DWORD
COMM	_pglLoadMatrixf:DWORD
COMM	_pglLoadName:DWORD
COMM	_pglLogicOp:DWORD
COMM	_pglMap1d:DWORD
COMM	_pglMap1f:DWORD
COMM	_pglMap2d:DWORD
COMM	_pglMap2f:DWORD
COMM	_pglMapGrid1d:DWORD
COMM	_pglMapGrid1f:DWORD
COMM	_pglMapGrid2d:DWORD
COMM	_pglMapGrid2f:DWORD
COMM	_pglMaterialf:DWORD
COMM	_pglMaterialfv:DWORD
COMM	_pglMateriali:DWORD
COMM	_pglMaterialiv:DWORD
COMM	_pglMatrixMode:DWORD
COMM	_pglMultMatrixd:DWORD
COMM	_pglMultMatrixf:DWORD
COMM	_pglNewList:DWORD
COMM	_pglNormal3b:DWORD
COMM	_pglNormal3bv:DWORD
COMM	_pglNormal3d:DWORD
COMM	_pglNormal3dv:DWORD
COMM	_pglNormal3f:DWORD
COMM	_pglNormal3fv:DWORD
COMM	_pglNormal3i:DWORD
COMM	_pglNormal3iv:DWORD
COMM	_pglNormal3s:DWORD
COMM	_pglNormal3sv:DWORD
COMM	_pglNormalPointer:DWORD
COMM	_pglOrtho:DWORD
COMM	_pglPassThrough:DWORD
COMM	_pglPixelMapfv:DWORD
COMM	_pglPixelMapuiv:DWORD
COMM	_pglPixelMapusv:DWORD
COMM	_pglPixelStoref:DWORD
COMM	_pglPixelStorei:DWORD
COMM	_pglPixelTransferf:DWORD
COMM	_pglPixelTransferi:DWORD
COMM	_pglPixelZoom:DWORD
COMM	_pglPointSize:DWORD
COMM	_pglPolygonMode:DWORD
COMM	_pglPolygonOffset:DWORD
COMM	_pglPolygonStipple:DWORD
COMM	_pglPopAttrib:DWORD
COMM	_pglPopClientAttrib:DWORD
COMM	_pglPopMatrix:DWORD
COMM	_pglPopName:DWORD
COMM	_pglPushAttrib:DWORD
COMM	_pglPushClientAttrib:DWORD
COMM	_pglPushMatrix:DWORD
COMM	_pglPushName:DWORD
COMM	_pglRasterPos2d:DWORD
COMM	_pglRasterPos2dv:DWORD
COMM	_pglRasterPos2f:DWORD
COMM	_pglRasterPos2fv:DWORD
COMM	_pglRasterPos2i:DWORD
COMM	_pglRasterPos2iv:DWORD
COMM	_pglRasterPos2s:DWORD
COMM	_pglRasterPos2sv:DWORD
COMM	_pglRasterPos3d:DWORD
COMM	_pglRasterPos3dv:DWORD
COMM	_pglRasterPos3f:DWORD
COMM	_pglRasterPos3fv:DWORD
COMM	_pglRasterPos3i:DWORD
COMM	_pglRasterPos3iv:DWORD
COMM	_pglRasterPos3s:DWORD
COMM	_pglRasterPos3sv:DWORD
COMM	_pglRasterPos4d:DWORD
COMM	_pglRasterPos4dv:DWORD
COMM	_pglRasterPos4f:DWORD
COMM	_pglRasterPos4fv:DWORD
COMM	_pglRasterPos4i:DWORD
COMM	_pglRasterPos4iv:DWORD
COMM	_pglRasterPos4s:DWORD
COMM	_pglRasterPos4sv:DWORD
COMM	_pglReadBuffer:DWORD
COMM	_pglReadPixels:DWORD
COMM	_pglRectd:DWORD
COMM	_pglRectdv:DWORD
COMM	_pglRectf:DWORD
COMM	_pglRectfv:DWORD
COMM	_pglRecti:DWORD
COMM	_pglRectiv:DWORD
COMM	_pglRects:DWORD
COMM	_pglRectsv:DWORD
COMM	_pglRotated:DWORD
COMM	_pglRotatef:DWORD
COMM	_pglScaled:DWORD
COMM	_pglScalef:DWORD
COMM	_pglScissor:DWORD
COMM	_pglSelectBuffer:DWORD
COMM	_pglShadeModel:DWORD
COMM	_pglStencilFunc:DWORD
COMM	_pglStencilMask:DWORD
COMM	_pglStencilOp:DWORD
COMM	_pglTexCoord1d:DWORD
COMM	_pglTexCoord1dv:DWORD
COMM	_pglTexCoord1f:DWORD
COMM	_pglTexCoord1fv:DWORD
COMM	_pglTexCoord1i:DWORD
COMM	_pglTexCoord1iv:DWORD
COMM	_pglTexCoord1s:DWORD
COMM	_pglTexCoord1sv:DWORD
COMM	_pglTexCoord2d:DWORD
COMM	_pglTexCoord2dv:DWORD
COMM	_pglTexCoord2f:DWORD
COMM	_pglTexCoord2fv:DWORD
COMM	_pglTexCoord2i:DWORD
COMM	_pglTexCoord2iv:DWORD
COMM	_pglTexCoord2s:DWORD
COMM	_pglTexCoord2sv:DWORD
COMM	_pglTexCoord3d:DWORD
COMM	_pglTexCoord3dv:DWORD
COMM	_pglTexCoord3f:DWORD
COMM	_pglTexCoord3fv:DWORD
COMM	_pglTexCoord3i:DWORD
COMM	_pglTexCoord3iv:DWORD
COMM	_pglTexCoord3s:DWORD
COMM	_pglTexCoord3sv:DWORD
COMM	_pglTexCoord4d:DWORD
COMM	_pglTexCoord4dv:DWORD
COMM	_pglTexCoord4f:DWORD
COMM	_pglTexCoord4fv:DWORD
COMM	_pglTexCoord4i:DWORD
COMM	_pglTexCoord4iv:DWORD
COMM	_pglTexCoord4s:DWORD
COMM	_pglTexCoord4sv:DWORD
COMM	_pglTexCoordPointer:DWORD
COMM	_pglTexEnvf:DWORD
COMM	_pglTexEnvfv:DWORD
COMM	_pglTexEnvi:DWORD
COMM	_pglTexEnviv:DWORD
COMM	_pglTexGend:DWORD
COMM	_pglTexGendv:DWORD
COMM	_pglTexGenf:DWORD
COMM	_pglTexGenfv:DWORD
COMM	_pglTexGeni:DWORD
COMM	_pglTexGeniv:DWORD
COMM	_pglTexImage1D:DWORD
COMM	_pglTexImage2D:DWORD
COMM	_pglTexParameterf:DWORD
COMM	_pglTexParameterfv:DWORD
COMM	_pglTexParameteri:DWORD
COMM	_pglTexParameteriv:DWORD
COMM	_pglTexSubImage1D:DWORD
COMM	_pglTexSubImage2D:DWORD
COMM	_pglTranslated:DWORD
COMM	_pglTranslatef:DWORD
COMM	_pglVertex2d:DWORD
COMM	_pglVertex2dv:DWORD
COMM	_pglVertex2f:DWORD
COMM	_pglVertex2fv:DWORD
COMM	_pglVertex2i:DWORD
COMM	_pglVertex2iv:DWORD
COMM	_pglVertex2s:DWORD
COMM	_pglVertex2sv:DWORD
COMM	_pglVertex3d:DWORD
COMM	_pglVertex3dv:DWORD
COMM	_pglVertex3f:DWORD
COMM	_pglVertex3fv:DWORD
COMM	_pglVertex3i:DWORD
COMM	_pglVertex3iv:DWORD
COMM	_pglVertex3s:DWORD
COMM	_pglVertex3sv:DWORD
COMM	_pglVertex4d:DWORD
COMM	_pglVertex4dv:DWORD
COMM	_pglVertex4f:DWORD
COMM	_pglVertex4fv:DWORD
COMM	_pglVertex4i:DWORD
COMM	_pglVertex4iv:DWORD
COMM	_pglVertex4s:DWORD
COMM	_pglVertex4sv:DWORD
COMM	_pglVertexPointer:DWORD
COMM	_pglViewport:DWORD
COMM	_pglPointParameterfEXT:DWORD
COMM	_pglPointParameterfvEXT:DWORD
COMM	_pglLockArraysEXT:DWORD
COMM	_pglUnlockArraysEXT:DWORD
COMM	_pglActiveTextureARB:DWORD
COMM	_pglClientActiveTextureARB:DWORD
COMM	_pglGetCompressedTexImage:DWORD
COMM	_pglDrawRangeElements:DWORD
COMM	_pglDrawRangeElementsEXT:DWORD
COMM	_pglMultiTexCoord1f:DWORD
COMM	_pglMultiTexCoord2f:DWORD
COMM	_pglMultiTexCoord3f:DWORD
COMM	_pglMultiTexCoord4f:DWORD
COMM	_pglActiveTexture:DWORD
COMM	_pglClientActiveTexture:DWORD
COMM	_pglCompressedTexImage3DARB:DWORD
COMM	_pglCompressedTexImage2DARB:DWORD
COMM	_pglCompressedTexImage1DARB:DWORD
COMM	_pglCompressedTexSubImage3DARB:DWORD
COMM	_pglCompressedTexSubImage2DARB:DWORD
COMM	_pglCompressedTexSubImage1DARB:DWORD
COMM	_pglDeleteObjectARB:DWORD
COMM	_pglGetHandleARB:DWORD
COMM	_pglDetachObjectARB:DWORD
COMM	_pglCreateShaderObjectARB:DWORD
COMM	_pglShaderSourceARB:DWORD
COMM	_pglCompileShaderARB:DWORD
COMM	_pglCreateProgramObjectARB:DWORD
COMM	_pglAttachObjectARB:DWORD
COMM	_pglLinkProgramARB:DWORD
COMM	_pglUseProgramObjectARB:DWORD
COMM	_pglValidateProgramARB:DWORD
COMM	_pglBindProgramARB:DWORD
COMM	_pglDeleteProgramsARB:DWORD
COMM	_pglGenProgramsARB:DWORD
COMM	_pglProgramStringARB:DWORD
COMM	_pglProgramEnvParameter4fARB:DWORD
COMM	_pglProgramLocalParameter4fARB:DWORD
COMM	_pglUniform1fARB:DWORD
COMM	_pglUniform2fARB:DWORD
COMM	_pglUniform3fARB:DWORD
COMM	_pglUniform4fARB:DWORD
COMM	_pglUniform1iARB:DWORD
COMM	_pglUniform2iARB:DWORD
COMM	_pglUniform3iARB:DWORD
COMM	_pglUniform4iARB:DWORD
COMM	_pglUniform1fvARB:DWORD
COMM	_pglUniform2fvARB:DWORD
COMM	_pglUniform3fvARB:DWORD
COMM	_pglUniform4fvARB:DWORD
COMM	_pglUniform1ivARB:DWORD
COMM	_pglUniform2ivARB:DWORD
COMM	_pglUniform3ivARB:DWORD
COMM	_pglUniform4ivARB:DWORD
COMM	_pglUniformMatrix2fvARB:DWORD
COMM	_pglUniformMatrix3fvARB:DWORD
COMM	_pglUniformMatrix4fvARB:DWORD
COMM	_pglGetObjectParameterfvARB:DWORD
COMM	_pglGetObjectParameterivARB:DWORD
COMM	_pglGetInfoLogARB:DWORD
COMM	_pglGetAttachedObjectsARB:DWORD
COMM	_pglGetUniformLocationARB:DWORD
COMM	_pglGetActiveUniformARB:DWORD
COMM	_pglGetUniformfvARB:DWORD
COMM	_pglGetUniformivARB:DWORD
COMM	_pglGetShaderSourceARB:DWORD
COMM	_pglTexImage3D:DWORD
COMM	_pglTexSubImage3D:DWORD
COMM	_pglCopyTexSubImage3D:DWORD
COMM	_pglBlendEquationEXT:DWORD
COMM	_pglStencilOpSeparate:DWORD
COMM	_pglStencilFuncSeparate:DWORD
COMM	_pglActiveStencilFaceEXT:DWORD
COMM	_pglVertexAttribPointerARB:DWORD
COMM	_pglEnableVertexAttribArrayARB:DWORD
COMM	_pglDisableVertexAttribArrayARB:DWORD
COMM	_pglBindAttribLocationARB:DWORD
COMM	_pglGetActiveAttribARB:DWORD
COMM	_pglGetAttribLocationARB:DWORD
COMM	_pglBindFragDataLocation:DWORD
COMM	_pglVertexAttrib2fARB:DWORD
COMM	_pglVertexAttrib2fvARB:DWORD
COMM	_pglVertexAttrib3fvARB:DWORD
COMM	_pglBindBufferARB:DWORD
COMM	_pglDeleteBuffersARB:DWORD
COMM	_pglGenBuffersARB:DWORD
COMM	_pglIsBufferARB:DWORD
COMM	_pglMapBufferARB:DWORD
COMM	_pglUnmapBufferARB:DWORD
COMM	_pglBufferDataARB:DWORD
COMM	_pglBufferSubDataARB:DWORD
COMM	_pglGenQueriesARB:DWORD
COMM	_pglDeleteQueriesARB:DWORD
COMM	_pglIsQueryARB:DWORD
COMM	_pglBeginQueryARB:DWORD
COMM	_pglEndQueryARB:DWORD
COMM	_pglGetQueryivARB:DWORD
COMM	_pglGetQueryObjectivARB:DWORD
COMM	_pglGetQueryObjectuivARB:DWORD
COMM	_pglDebugMessageControlARB:DWORD
COMM	_pglDebugMessageInsertARB:DWORD
COMM	_pglDebugMessageCallbackARB:DWORD
COMM	_pglGetDebugMessageLogARB:DWORD
COMM	_pglIsRenderbuffer:DWORD
COMM	_pglBindRenderbuffer:DWORD
COMM	_pglDeleteRenderbuffers:DWORD
COMM	_pglGenRenderbuffers:DWORD
COMM	_pglRenderbufferStorage:DWORD
COMM	_pglRenderbufferStorageMultisample:DWORD
COMM	_pglGetRenderbufferParameteriv:DWORD
COMM	_pglIsFramebuffer:DWORD
COMM	_pglBindFramebuffer:DWORD
COMM	_pglDeleteFramebuffers:DWORD
COMM	_pglGenFramebuffers:DWORD
COMM	_pglCheckFramebufferStatus:DWORD
COMM	_pglFramebufferTexture1D:DWORD
COMM	_pglFramebufferTexture2D:DWORD
COMM	_pglFramebufferTexture3D:DWORD
COMM	_pglFramebufferTextureLayer:DWORD
COMM	_pglFramebufferRenderbuffer:DWORD
COMM	_pglGetFramebufferAttachmentParameteriv:DWORD
COMM	_pglBlitFramebuffer:DWORD
COMM	_pglDrawBuffersARB:DWORD
COMM	_pglGenerateMipmap:DWORD
COMM	_pglBindVertexArray:DWORD
COMM	_pglDeleteVertexArrays:DWORD
COMM	_pglGenVertexArrays:DWORD
COMM	_pglIsVertexArray:DWORD
COMM	_pglSwapInterval:DWORD
COMM	_pwglSwapBuffers:DWORD
COMM	_pwglCopyContext:DWORD
COMM	_pwglCreateContext:DWORD
COMM	_pwglCreateLayerContext:DWORD
COMM	_pwglDeleteContext:DWORD
COMM	_pwglGetCurrentContext:DWORD
COMM	_pwglGetProcAddress:DWORD
COMM	_pwglMakeCurrent:DWORD
COMM	_pwglShareLists:DWORD
COMM	_pwglUseFontBitmaps:DWORD
COMM	_pwglUseFontOutlines:DWORD
COMM	_pwglDescribeLayerPlane:DWORD
COMM	_pwglSetLayerPaletteEntries:DWORD
COMM	_pwglGetLayerPaletteEntries:DWORD
COMM	_pwglRealizeLayerPalette:DWORD
COMM	_pwglSwapLayerBuffers:DWORD
COMM	_pwglSwapIntervalEXT:DWORD
COMM	_pwglCreateContextAttribsARB:DWORD
COMM	_pwglGetPixelFormatAttribiv:DWORD
COMM	_pwglChoosePixelFormat:DWORD
COMM	_pwglGetExtensionsStringEXT:DWORD
COMM	_cl_active_beams:DWORD
COMM	_cl_free_beams:DWORD
_DATA	ENDS
_BSS	SEGMENT
_cl_viewbeams DD 01H DUP (?)
_BSS	ENDS
PUBLIC	_CL_InitViewBeams
PUBLIC	_CL_ClearViewBeams
PUBLIC	_CL_FreeViewBeams
PUBLIC	_CL_DrawBeams
PUBLIC	_CL_AddCustomBeam
PUBLIC	_CL_KillDeadBeams
PUBLIC	_CL_ParseViewBeam
PUBLIC	_CL_ReadLineFile_f
PUBLIC	_R_BeamLightning
PUBLIC	_R_BeamEnts
PUBLIC	_R_BeamPoints
PUBLIC	_R_BeamCirclePoints
PUBLIC	_R_BeamEntPoint
PUBLIC	_R_BeamRing
PUBLIC	_R_BeamFollow
PUBLIC	_R_BeamKill
PUBLIC	_R_BeamAlloc
PUBLIC	_R_BeamFree
PUBLIC	_R_BeamSetup
PUBLIC	_R_BeamSetAttributes
PUBLIC	_R_BeamRecomputeEndpoints
PUBLIC	_R_BeamCull
PUBLIC	_R_DrawTorus
PUBLIC	_R_DrawDisk
PUBLIC	_R_DrawCylinder
PUBLIC	_R_DrawBeamFollow
PUBLIC	_R_DrawRing
PUBLIC	_R_BeamDraw
PUBLIC	_R_BeamDrawCustomEntity
PUBLIC	_CL_BeamAttemptToDie
PUBLIC	_R_BeamSprite
PUBLIC	__real@00000000
PUBLIC	__real@3b808081
PUBLIC	__real@3c23d70a
PUBLIC	__real@3dcccccd
PUBLIC	__real@3e000000
PUBLIC	__real@3e7ad7f2a0000000
PUBLIC	__real@3eb33333
PUBLIC	__real@3ecccccd
PUBLIC	__real@3f000000
PUBLIC	__real@3f19999a
PUBLIC	__real@3f27ae14
PUBLIC	__real@3f800000
PUBLIC	__real@3f847ae140000000
PUBLIC	__real@3f847ae147ae147b
PUBLIC	__real@3fb3333340000000
PUBLIC	__real@3fb4fdf4
PUBLIC	__real@3fb99999a0000000
PUBLIC	__real@3fd0000000000000
PUBLIC	__real@3fe0000000000000
PUBLIC	__real@3ff0000000000000
PUBLIC	__real@40000000
PUBLIC	__real@4000000000000000
PUBLIC	__real@4008000000000000
PUBLIC	__real@400921fb60000000
PUBLIC	__real@4024000000000000
PUBLIC	__real@40400000
PUBLIC	__real@40490fdb
PUBLIC	__real@40600000
PUBLIC	__real@40a00000
PUBLIC	__real@40c90fdb
PUBLIC	__real@41000000
PUBLIC	__real@41c00000
PUBLIC	__real@41f00000
PUBLIC	__real@42000000
PUBLIC	__real@427c0000
PUBLIC	__real@42800000
PUBLIC	__real@42c80000
PUBLIC	__real@437f0000
PUBLIC	__real@47800000
PUBLIC	__real@be000000
PUBLIC	__xmm@80000000800000008000000080000000
EXTRN	_memset:PROC
EXTRN	_Q_atof:PROC
EXTRN	_Q_snprintf:PROC
EXTRN	__Mem_Alloc:PROC
EXTRN	__Mem_Free:PROC
EXTRN	_DBG_AssertFunction:PROC
EXTRN	_FS_LoadFile:PROC
EXTRN	_Con_DPrintf:PROC
EXTRN	_Con_Printf:PROC
EXTRN	_COM_ParseFile:PROC
EXTRN	_CL_GetEntityByIndex:PROC
EXTRN	_COM_RandomFloat:PROC
EXTRN	_cos:PROC
EXTRN	_fmod:PROC
EXTRN	_pow:PROC
EXTRN	_sin:PROC
EXTRN	_sqrt:PROC
EXTRN	_rsqrt:PROC
EXTRN	_SinCos:PROC
EXTRN	_Mod_BoxVisible:PROC
EXTRN	_MSG_ReadByte:PROC
EXTRN	_MSG_ReadShort:PROC
EXTRN	_MSG_ReadCoord:PROC
EXTRN	_CL_ModelHandle:PROC
EXTRN	_CL_LoadModel:PROC
EXTRN	_R_FreeDeadParticles:PROC
EXTRN	_CL_FxBlend:PROC
EXTRN	_R_TempSprite:PROC
EXTRN	_TriBegin:PROC
EXTRN	_TriTexCoord2f:PROC
EXTRN	_TriVertex3fv:PROC
EXTRN	_TriColor4f:PROC
EXTRN	_TriSpriteTexture:PROC
EXTRN	_TriWorldToScreen:PROC
EXTRN	_TriBrightness:PROC
EXTRN	_TriRenderMode:PROC
EXTRN	_TriEnd:PROC
EXTRN	_GL_Cull:PROC
EXTRN	_R_CullBox:PROC
EXTRN	_Mod_GetCurrentVis:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	_SI:BYTE
EXTRN	_vec3_origin:BYTE
EXTRN	_cl:BYTE
EXTRN	_cls:BYTE
EXTRN	_clgame:BYTE
EXTRN	_cl_draw_beams:DWORD
EXTRN	_r_stats:BYTE
EXTRN	_RI:BYTE
EXTRN	_tr:BYTE
EXTRN	_cl_free_particles:DWORD
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
_BSS	SEGMENT
_rgNoise DD	041H DUP (?)
_BSS	ENDS
;	COMDAT __xmm@80000000800000008000000080000000
CONST	SEGMENT
__xmm@80000000800000008000000080000000 DB 00H, 00H, 00H, 080H, 00H, 00H, 00H
	DB	080H, 00H, 00H, 00H, 080H, 00H, 00H, 00H, 080H
CONST	ENDS
;	COMDAT __real@be000000
CONST	SEGMENT
__real@be000000 DD 0be000000r			; -0.125
CONST	ENDS
;	COMDAT __real@47800000
CONST	SEGMENT
__real@47800000 DD 047800000r			; 65536
CONST	ENDS
;	COMDAT __real@437f0000
CONST	SEGMENT
__real@437f0000 DD 0437f0000r			; 255
CONST	ENDS
;	COMDAT __real@42c80000
CONST	SEGMENT
__real@42c80000 DD 042c80000r			; 100
CONST	ENDS
;	COMDAT __real@42800000
CONST	SEGMENT
__real@42800000 DD 042800000r			; 64
CONST	ENDS
;	COMDAT __real@427c0000
CONST	SEGMENT
__real@427c0000 DD 0427c0000r			; 63
CONST	ENDS
;	COMDAT __real@42000000
CONST	SEGMENT
__real@42000000 DD 042000000r			; 32
CONST	ENDS
;	COMDAT __real@41f00000
CONST	SEGMENT
__real@41f00000 DD 041f00000r			; 30
CONST	ENDS
;	COMDAT __real@41c00000
CONST	SEGMENT
__real@41c00000 DD 041c00000r			; 24
CONST	ENDS
;	COMDAT __real@41000000
CONST	SEGMENT
__real@41000000 DD 041000000r			; 8
CONST	ENDS
;	COMDAT __real@40c90fdb
CONST	SEGMENT
__real@40c90fdb DD 040c90fdbr			; 6.28319
CONST	ENDS
;	COMDAT __real@40a00000
CONST	SEGMENT
__real@40a00000 DD 040a00000r			; 5
CONST	ENDS
;	COMDAT __real@40600000
CONST	SEGMENT
__real@40600000 DD 040600000r			; 3.5
CONST	ENDS
;	COMDAT __real@40490fdb
CONST	SEGMENT
__real@40490fdb DD 040490fdbr			; 3.14159
CONST	ENDS
;	COMDAT __real@40400000
CONST	SEGMENT
__real@40400000 DD 040400000r			; 3
CONST	ENDS
;	COMDAT __real@4024000000000000
CONST	SEGMENT
__real@4024000000000000 DQ 04024000000000000r	; 10
CONST	ENDS
;	COMDAT __real@400921fb60000000
CONST	SEGMENT
__real@400921fb60000000 DQ 0400921fb60000000r	; 3.14159
CONST	ENDS
;	COMDAT __real@4008000000000000
CONST	SEGMENT
__real@4008000000000000 DQ 04008000000000000r	; 3
CONST	ENDS
;	COMDAT __real@4000000000000000
CONST	SEGMENT
__real@4000000000000000 DQ 04000000000000000r	; 2
CONST	ENDS
;	COMDAT __real@40000000
CONST	SEGMENT
__real@40000000 DD 040000000r			; 2
CONST	ENDS
;	COMDAT __real@3ff0000000000000
CONST	SEGMENT
__real@3ff0000000000000 DQ 03ff0000000000000r	; 1
CONST	ENDS
;	COMDAT __real@3fe0000000000000
CONST	SEGMENT
__real@3fe0000000000000 DQ 03fe0000000000000r	; 0.5
CONST	ENDS
;	COMDAT __real@3fd0000000000000
CONST	SEGMENT
__real@3fd0000000000000 DQ 03fd0000000000000r	; 0.25
CONST	ENDS
;	COMDAT __real@3fb99999a0000000
CONST	SEGMENT
__real@3fb99999a0000000 DQ 03fb99999a0000000r	; 0.1
CONST	ENDS
;	COMDAT __real@3fb4fdf4
CONST	SEGMENT
__real@3fb4fdf4 DD 03fb4fdf4r			; 1.414
CONST	ENDS
;	COMDAT __real@3fb3333340000000
CONST	SEGMENT
__real@3fb3333340000000 DQ 03fb3333340000000r	; 0.075
CONST	ENDS
;	COMDAT __real@3f847ae147ae147b
CONST	SEGMENT
__real@3f847ae147ae147b DQ 03f847ae147ae147br	; 0.01
CONST	ENDS
;	COMDAT __real@3f847ae140000000
CONST	SEGMENT
__real@3f847ae140000000 DQ 03f847ae140000000r	; 0.01
CONST	ENDS
;	COMDAT __real@3f800000
CONST	SEGMENT
__real@3f800000 DD 03f800000r			; 1
CONST	ENDS
;	COMDAT __real@3f27ae14
CONST	SEGMENT
__real@3f27ae14 DD 03f27ae14r			; 0.655
CONST	ENDS
;	COMDAT __real@3f19999a
CONST	SEGMENT
__real@3f19999a DD 03f19999ar			; 0.6
CONST	ENDS
;	COMDAT __real@3f000000
CONST	SEGMENT
__real@3f000000 DD 03f000000r			; 0.5
CONST	ENDS
;	COMDAT __real@3ecccccd
CONST	SEGMENT
__real@3ecccccd DD 03ecccccdr			; 0.4
CONST	ENDS
;	COMDAT __real@3eb33333
CONST	SEGMENT
__real@3eb33333 DD 03eb33333r			; 0.35
CONST	ENDS
;	COMDAT __real@3e7ad7f2a0000000
CONST	SEGMENT
__real@3e7ad7f2a0000000 DQ 03e7ad7f2a0000000r	; 1e-07
CONST	ENDS
;	COMDAT __real@3e000000
CONST	SEGMENT
__real@3e000000 DD 03e000000r			; 0.125
CONST	ENDS
;	COMDAT __real@3dcccccd
CONST	SEGMENT
__real@3dcccccd DD 03dcccccdr			; 0.1
CONST	ENDS
;	COMDAT __real@3c23d70a
CONST	SEGMENT
__real@3c23d70a DD 03c23d70ar			; 0.01
CONST	ENDS
;	COMDAT __real@3b808081
CONST	SEGMENT
__real@3b808081 DD 03b808081r			; 0.00392157
CONST	ENDS
;	COMDAT __real@00000000
CONST	SEGMENT
__real@00000000 DD 000000000r			; 0
CONST	ENDS
_DATA	SEGMENT
$SG145637 DB	'^1Error:^7 R_BeamComputePoint: invalid entity %i', 0aH, 00H
	ORG $+6
$SG145739 DB	'c:\users\user\downloads\xash_build4529_src\engine\client'
	DB	'\gl_beams.c', 00H
$SG145740 DB	'noiseIndex < ( NOISE_DIVISIONS << 16 )', 00H
	ORG $+5
$SG146063 DB	'c:\users\user\downloads\xash_build4529_src\engine\client'
	DB	'\gl_beams.c', 00H
	ORG $+4
$SG146077 DB	'c:\users\user\downloads\xash_build4529_src\engine\client'
	DB	'\gl_beams.c', 00H
$SG146082 DB	'^1Error:^7 Too many beams %d!', 0aH, 00H
	ORG $+5
$SG146105 DB	'c:\users\user\downloads\xash_build4529_src\engine\client'
	DB	'\gl_beams.c', 00H
$SG146106 DB	'pBeam != NULL', 00H
	ORG $+2
$SG146461 DB	'maps/%s.lin', 00H
$SG146463 DB	'^1Error:^7 couldn''t open %s', 0aH, 00H
	ORG $+3
$SG146464 DB	'Reading %s...', 0aH, 00H
	ORG $+1
$SG146465 DB	'sprites/laserbeam.spr', 00H
	ORG $+2
$SG146471 DB	'^1Error:^7 %s is corrupted', 0aH, 00H
$SG146479 DB	'sprites/laserbeam.spr', 00H
	ORG $+2
$SG146480 DB	'^1Error:^7 failed to load "%s"!', 0aH, 00H
	ORG $+3
$SG146481 DB	'^1Error:^7 not enough free beams!', 0aH, 00H
	ORG $+5
$SG146482 DB	'c:\users\user\downloads\xash_build4529_src\engine\client'
	DB	'\gl_beams.c', 00H
$SG146485 DB	'%i lines read', 0aH, 00H
	ORG $+1
$SG146486 DB	'map %s has no leaks!', 0aH, 00H
_DATA	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xash_build4529_src\engine\client\gl_beams.c
_TEXT	SEGMENT
_start$ = 8						; size = 4
_end$ = 12						; size = 4
_beamIndex$ = 16					; size = 4
_spriteIndex$ = 20					; size = 4
_R_BeamSprite PROC

; 1777 : {

	push	ebp
	mov	ebp, esp

; 1778 : 	R_BeamPoints( start, end, beamIndex, 0.01f, 0.4f, 0, COM_RandomFloat( 0.5f, 0.655f ), 5.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f );

	push	ecx
	xorps	xmm0, xmm0
	movss	DWORD PTR [esp], xmm0
	push	ecx
	xorps	xmm0, xmm0
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	xorps	xmm0, xmm0
	movss	DWORD PTR [esp], xmm0
	push	0
	push	ecx
	movss	xmm0, DWORD PTR __real@40a00000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@3f27ae14
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@3f000000
	movss	DWORD PTR [esp], xmm0
	call	_COM_RandomFloat
	add	esp, 4
	fstp	DWORD PTR [esp]
	push	ecx
	xorps	xmm0, xmm0
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@3ecccccd
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@3c23d70a
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _beamIndex$[ebp]
	push	eax
	mov	ecx, DWORD PTR _end$[ebp]
	push	ecx
	mov	edx, DWORD PTR _start$[ebp]
	push	edx
	call	_R_BeamPoints
	add	esp, 52					; 00000034H

; 1779 : 	R_TempSprite( end, vec3_origin, 0.1f, spriteIndex, kRenderTransAdd, kRenderFxNone, 0.35f, 0.01f, 0.0f );

	push	0
	push	ecx
	movss	xmm0, DWORD PTR __real@3c23d70a
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@3eb33333
	movss	DWORD PTR [esp], xmm0
	push	0
	push	5
	mov	eax, DWORD PTR _spriteIndex$[ebp]
	push	eax
	push	ecx
	movss	xmm0, DWORD PTR __real@3dcccccd
	movss	DWORD PTR [esp], xmm0
	push	OFFSET _vec3_origin
	mov	ecx, DWORD PTR _end$[ebp]
	push	ecx
	call	_R_TempSprite
	add	esp, 36					; 00000024H

; 1780 : }

	pop	ebp
	ret	0
_R_BeamSprite ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xash_build4529_src\engine\client\gl_beams.c
_TEXT	SEGMENT
tv69 = -4						; size = 4
_pBeam$ = 8						; size = 4
_CL_BeamAttemptToDie PROC

; 1456 : {

	push	ebp
	mov	ebp, esp
	push	ecx

; 1457 : 	Assert( pBeam != NULL );

	cmp	DWORD PTR _pBeam$[ebp], 0
	je	SHORT $LN6@CL_BeamAtt
	mov	DWORD PTR tv69[ebp], 1
	jmp	SHORT $LN7@CL_BeamAtt
$LN6@CL_BeamAtt:
	mov	DWORD PTR tv69[ebp], 0
$LN7@CL_BeamAtt:
	push	0
	push	1457					; 000005b1H
	push	OFFSET $SG146105
	push	OFFSET $SG146106
	mov	eax, DWORD PTR tv69[ebp]
	push	eax
	call	_DBG_AssertFunction
	add	esp, 20					; 00000014H

; 1458 : 
; 1459 : 	// premanent beams never die automatically
; 1460 : 	if( FBitSet( pBeam->flags, FBEAM_FOREVER ))

	mov	ecx, DWORD PTR _pBeam$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	and	edx, -2147483648			; 80000000H
	je	SHORT $LN2@CL_BeamAtt

; 1461 : 		return false;

	xor	eax, eax
	jmp	SHORT $LN1@CL_BeamAtt
$LN2@CL_BeamAtt:

; 1462 : 
; 1463 : 	if( pBeam->type == TE_BEAMFOLLOW && pBeam->particles )

	mov	eax, DWORD PTR _pBeam$[ebp]
	cmp	DWORD PTR [eax+4], 22			; 00000016H
	jne	SHORT $LN3@CL_BeamAtt
	mov	ecx, DWORD PTR _pBeam$[ebp]
	cmp	DWORD PTR [ecx+120], 0
	je	SHORT $LN3@CL_BeamAtt

; 1464 : 	{
; 1465 : 		// wait for all trails are dead
; 1466 : 		return false;

	xor	eax, eax
	jmp	SHORT $LN1@CL_BeamAtt
$LN3@CL_BeamAtt:

; 1467 : 	}
; 1468 : 
; 1469 : 	// other beams
; 1470 : 	if( pBeam->die > cl.time )

	mov	edx, DWORD PTR _pBeam$[ebp]
	cvtss2sd xmm0, DWORD PTR [edx+56]
	comisd	xmm0, QWORD PTR _cl+1525848
	jbe	SHORT $LN4@CL_BeamAtt

; 1471 : 		return false;

	xor	eax, eax
	jmp	SHORT $LN1@CL_BeamAtt
$LN4@CL_BeamAtt:

; 1472 : 
; 1473 : 	return true;

	mov	eax, 1
$LN1@CL_BeamAtt:

; 1474 : }

	mov	esp, ebp
	pop	ebp
	ret	0
_CL_BeamAttemptToDie ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xash_build4529_src\engine\client\gl_beams.c
_TEXT	SEGMENT
_r$ = -156						; size = 4
_g$ = -152						; size = 4
_b$ = -148						; size = 4
_amp$ = -144						; size = 4
_blend$ = -140						; size = 4
tv140 = -136						; size = 4
_beamFlags$ = -132					; size = 4
_beam$ = -128						; size = 124
__$ArrayPad$ = -4					; size = 4
_ent$ = 8						; size = 4
_R_BeamDrawCustomEntity PROC

; 1244 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 156				; 0000009cH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 1245 : 	BEAM	beam;
; 1246 : 	float	amp = ent->curstate.body / 100.0f;

	mov	eax, DWORD PTR _ent$[ebp]
	cvtsi2ss xmm0, DWORD PTR [eax+788]
	divss	xmm0, DWORD PTR __real@42c80000
	movss	DWORD PTR _amp$[ebp], xmm0

; 1247 : 	float	blend = CL_FxBlend( ent ) / 255.0f;

	mov	ecx, DWORD PTR _ent$[ebp]
	push	ecx
	call	_CL_FxBlend
	add	esp, 4
	cvtsi2ss xmm0, eax
	divss	xmm0, DWORD PTR __real@437f0000
	movss	DWORD PTR _blend$[ebp], xmm0

; 1248 : 	float	r, g, b;
; 1249 : 	int	beamFlags;
; 1250 : 
; 1251 : 	r = ent->curstate.rendercolor.r / 255.0f;

	mov	edx, DWORD PTR _ent$[ebp]
	movzx	eax, BYTE PTR [edx+768]
	cvtsi2ss xmm0, eax
	divss	xmm0, DWORD PTR __real@437f0000
	movss	DWORD PTR _r$[ebp], xmm0

; 1252 : 	g = ent->curstate.rendercolor.g / 255.0f;

	mov	ecx, DWORD PTR _ent$[ebp]
	movzx	edx, BYTE PTR [ecx+769]
	cvtsi2ss xmm0, edx
	divss	xmm0, DWORD PTR __real@437f0000
	movss	DWORD PTR _g$[ebp], xmm0

; 1253 : 	b = ent->curstate.rendercolor.b / 255.0f;

	mov	eax, DWORD PTR _ent$[ebp]
	movzx	ecx, BYTE PTR [eax+770]
	cvtsi2ss xmm0, ecx
	divss	xmm0, DWORD PTR __real@437f0000
	movss	DWORD PTR _b$[ebp], xmm0

; 1254 : 
; 1255 : 	R_BeamSetup( &beam, ent->origin, ent->angles, ent->curstate.modelindex, 0, ent->curstate.scale, amp, blend, ent->curstate.animtime );

	mov	edx, DWORD PTR _ent$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [edx+780]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _blend$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _amp$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _ent$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [eax+752]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	xorps	xmm0, xmm0
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _ent$[ebp]
	mov	edx, DWORD PTR [ecx+728]
	push	edx
	mov	eax, DWORD PTR _ent$[ebp]
	add	eax, 2900				; 00000b54H
	push	eax
	mov	ecx, DWORD PTR _ent$[ebp]
	add	ecx, 2888				; 00000b48H
	push	ecx
	lea	edx, DWORD PTR _beam$[ebp]
	push	edx
	call	_R_BeamSetup
	add	esp, 36					; 00000024H

; 1256 : 	R_BeamSetAttributes( &beam, r, g, b, ent->curstate.framerate, ent->curstate.frame );

	mov	eax, DWORD PTR _ent$[ebp]
	cvttss2si ecx, DWORD PTR [eax+736]
	push	ecx
	mov	edx, DWORD PTR _ent$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [edx+784]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _b$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _g$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _r$[ebp]
	movss	DWORD PTR [esp], xmm0
	lea	eax, DWORD PTR _beam$[ebp]
	push	eax
	call	_R_BeamSetAttributes
	add	esp, 24					; 00000018H

; 1257 : 	beam.pFollowModel = NULL;

	mov	DWORD PTR _beam$[ebp+116], 0

; 1258 : 
; 1259 : 	switch( ent->curstate.rendermode & 0x0F )

	mov	ecx, DWORD PTR _ent$[ebp]
	mov	edx, DWORD PTR [ecx+760]
	and	edx, 15					; 0000000fH
	mov	DWORD PTR tv140[ebp], edx
	cmp	DWORD PTR tv140[ebp], 1
	je	SHORT $LN4@R_BeamDraw
	cmp	DWORD PTR tv140[ebp], 2
	je	SHORT $LN7@R_BeamDraw
	cmp	DWORD PTR tv140[ebp], 3
	je	SHORT $LN8@R_BeamDraw
	jmp	$LN2@R_BeamDraw
$LN4@R_BeamDraw:

; 1260 : 	{
; 1261 : 	case BEAM_ENTPOINT:
; 1262 : 		beam.type	= TE_BEAMPOINTS;

	mov	DWORD PTR _beam$[ebp+4], 0

; 1263 : 		if( ent->curstate.sequence )

	mov	eax, DWORD PTR _ent$[ebp]
	cmp	DWORD PTR [eax+732], 0
	je	SHORT $LN5@R_BeamDraw

; 1264 : 		{
; 1265 : 			SetBits( beam.flags, FBEAM_STARTENTITY );

	mov	ecx, DWORD PTR _beam$[ebp+8]
	or	ecx, 1
	mov	DWORD PTR _beam$[ebp+8], ecx

; 1266 : 			beam.startEntity = ent->curstate.sequence;

	mov	edx, DWORD PTR _ent$[ebp]
	mov	eax, DWORD PTR [edx+732]
	mov	DWORD PTR _beam$[ebp+100], eax
$LN5@R_BeamDraw:

; 1267 : 		}
; 1268 : 		if( ent->curstate.skin )

	mov	ecx, DWORD PTR _ent$[ebp]
	movsx	edx, WORD PTR [ecx+744]
	test	edx, edx
	je	SHORT $LN6@R_BeamDraw

; 1269 : 		{
; 1270 : 			SetBits( beam.flags, FBEAM_ENDENTITY );

	mov	eax, DWORD PTR _beam$[ebp+8]
	or	eax, 2
	mov	DWORD PTR _beam$[ebp+8], eax

; 1271 : 			beam.endEntity = ent->curstate.skin;

	mov	ecx, DWORD PTR _ent$[ebp]
	movsx	edx, WORD PTR [ecx+744]
	mov	DWORD PTR _beam$[ebp+104], edx
$LN6@R_BeamDraw:

; 1272 : 		}
; 1273 : 		break;

	jmp	SHORT $LN2@R_BeamDraw
$LN7@R_BeamDraw:

; 1274 : 	case BEAM_ENTS:
; 1275 : 		beam.type	= TE_BEAMPOINTS;

	mov	DWORD PTR _beam$[ebp+4], 0

; 1276 : 		SetBits( beam.flags, FBEAM_STARTENTITY | FBEAM_ENDENTITY );

	mov	eax, DWORD PTR _beam$[ebp+8]
	or	eax, 3
	mov	DWORD PTR _beam$[ebp+8], eax

; 1277 : 		beam.startEntity = ent->curstate.sequence;

	mov	ecx, DWORD PTR _ent$[ebp]
	mov	edx, DWORD PTR [ecx+732]
	mov	DWORD PTR _beam$[ebp+100], edx

; 1278 : 		beam.endEntity = ent->curstate.skin;

	mov	eax, DWORD PTR _ent$[ebp]
	movsx	ecx, WORD PTR [eax+744]
	mov	DWORD PTR _beam$[ebp+104], ecx

; 1279 : 		break;

	jmp	SHORT $LN2@R_BeamDraw
$LN8@R_BeamDraw:

; 1280 : 	case BEAM_HOSE:
; 1281 : 		beam.type	= TE_BEAMHOSE;

	mov	DWORD PTR _beam$[ebp+4], 26		; 0000001aH
$LN2@R_BeamDraw:

; 1282 : 		break;
; 1283 : 	case BEAM_POINTS:
; 1284 : 		// already set up
; 1285 : 		break;
; 1286 : 	}
; 1287 : 
; 1288 : 	beamFlags = ( ent->curstate.rendermode & 0xF0 );

	mov	edx, DWORD PTR _ent$[ebp]
	mov	eax, DWORD PTR [edx+760]
	and	eax, 240				; 000000f0H
	mov	DWORD PTR _beamFlags$[ebp], eax

; 1289 : 
; 1290 : 	if( FBitSet( beamFlags, BEAM_FSINE ))

	mov	ecx, DWORD PTR _beamFlags$[ebp]
	and	ecx, 16					; 00000010H
	je	SHORT $LN10@R_BeamDraw

; 1291 : 		SetBits( beam.flags, FBEAM_SINENOISE );

	mov	edx, DWORD PTR _beam$[ebp+8]
	or	edx, 16					; 00000010H
	mov	DWORD PTR _beam$[ebp+8], edx
$LN10@R_BeamDraw:

; 1292 : 
; 1293 : 	if( FBitSet( beamFlags, BEAM_FSOLID ))

	mov	eax, DWORD PTR _beamFlags$[ebp]
	and	eax, 32					; 00000020H
	je	SHORT $LN11@R_BeamDraw

; 1294 : 		SetBits( beam.flags, FBEAM_SOLID );

	mov	ecx, DWORD PTR _beam$[ebp+8]
	or	ecx, 32					; 00000020H
	mov	DWORD PTR _beam$[ebp+8], ecx
$LN11@R_BeamDraw:

; 1295 : 
; 1296 : 	if( FBitSet( beamFlags, BEAM_FSHADEIN ))

	mov	edx, DWORD PTR _beamFlags$[ebp]
	and	edx, 64					; 00000040H
	je	SHORT $LN12@R_BeamDraw

; 1297 : 		SetBits( beam.flags, FBEAM_SHADEIN );

	mov	eax, DWORD PTR _beam$[ebp+8]
	or	eax, 64					; 00000040H
	mov	DWORD PTR _beam$[ebp+8], eax
$LN12@R_BeamDraw:

; 1298 : 
; 1299 : 	if( FBitSet( beamFlags, BEAM_FSHADEOUT ))

	mov	ecx, DWORD PTR _beamFlags$[ebp]
	and	ecx, 128				; 00000080H
	je	SHORT $LN13@R_BeamDraw

; 1300 : 		SetBits( beam.flags, FBEAM_SHADEOUT );

	mov	edx, DWORD PTR _beam$[ebp+8]
	or	edx, 128				; 00000080H
	mov	DWORD PTR _beam$[ebp+8], edx
$LN13@R_BeamDraw:

; 1301 : 
; 1302 : 	// draw it
; 1303 : 	R_BeamDraw( &beam, tr.frametime );

	cvtsd2ss xmm0, QWORD PTR _tr+66968
	push	ecx
	movss	DWORD PTR [esp], xmm0
	lea	eax, DWORD PTR _beam$[ebp]
	push	eax
	call	_R_BeamDraw
	add	esp, 8

; 1304 : }

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_R_BeamDrawCustomEntity ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xash_build4529_src\engine\client\gl_beams.c
_TEXT	SEGMENT
tv1047 = -144						; size = 8
tv888 = -136						; size = 8
tv857 = -128						; size = 8
tv835 = -120						; size = 8
tv800 = -112						; size = 8
tv509 = -104						; size = 4
tv488 = -100						; size = 4
tv455 = -96						; size = 4
tv368 = -92						; size = 4
tv163 = -88						; size = 4
tv623 = -84						; size = 4
tv554 = -80						; size = 4
_pStart$1 = -76						; size = 4
_model$ = -72						; size = 4
_flFade$2 = -68						; size = 4
_flDistance$3 = -64					; size = 4
_flDot$4 = -60						; size = 4
_ilength$5 = -56					; size = 4
_vecProjection$6 = -52					; size = 12
_tmp$7 = -40						; size = 12
_localDir$8 = -28					; size = 12
_delta$ = -16						; size = 12
__$ArrayPad$ = -4					; size = 4
_pbeam$ = 8						; size = 4
_frametime$ = 12					; size = 4
_R_BeamDraw PROC

; 1056 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 144				; 00000090H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	esi

; 1057 : 	model_t	*model;
; 1058 : 	vec3_t	delta;
; 1059 : 
; 1060 : 	model = CL_ModelHandle( pbeam->modelIndex );

	mov	eax, DWORD PTR _pbeam$[ebp]
	mov	ecx, DWORD PTR [eax+108]
	push	ecx
	call	_CL_ModelHandle
	add	esp, 4
	mov	DWORD PTR _model$[ebp], eax

; 1061 : 	SetBits( pbeam->flags, FBEAM_ISACTIVE );

	mov	edx, DWORD PTR _pbeam$[ebp]
	mov	eax, DWORD PTR [edx+8]
	or	eax, 1073741824				; 40000000H
	mov	ecx, DWORD PTR _pbeam$[ebp]
	mov	DWORD PTR [ecx+8], eax

; 1062 : 
; 1063 : 	if( !model || model->type != mod_sprite )

	cmp	DWORD PTR _model$[ebp], 0
	je	SHORT $LN5@R_BeamDraw
	mov	edx, DWORD PTR _model$[ebp]
	cmp	DWORD PTR [edx+68], 1
	je	SHORT $LN4@R_BeamDraw
$LN5@R_BeamDraw:

; 1064 : 	{
; 1065 : 		pbeam->flags &= ~FBEAM_ISACTIVE; // force to ignore

	mov	eax, DWORD PTR _pbeam$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	and	ecx, -1073741825			; bfffffffH
	mov	edx, DWORD PTR _pbeam$[ebp]
	mov	DWORD PTR [edx+8], ecx

; 1066 : 		pbeam->die = cl.time;

	cvtsd2ss xmm0, QWORD PTR _cl+1525848
	mov	eax, DWORD PTR _pbeam$[ebp]
	movss	DWORD PTR [eax+56], xmm0

; 1067 : 		return;

	jmp	$LN1@R_BeamDraw
$LN4@R_BeamDraw:

; 1068 : 	}
; 1069 : 
; 1070 : 	// update frequency
; 1071 : 	pbeam->freq += frametime;

	mov	ecx, DWORD PTR _pbeam$[ebp]
	movss	xmm0, DWORD PTR [ecx+52]
	addss	xmm0, DWORD PTR _frametime$[ebp]
	mov	edx, DWORD PTR _pbeam$[ebp]
	movss	DWORD PTR [edx+52], xmm0

; 1072 : 
; 1073 : 	// generate fractal noise
; 1074 : 	if( frametime != 0.0f )

	movss	xmm0, DWORD PTR _frametime$[ebp]
	ucomiss	xmm0, DWORD PTR __real@00000000
	lahf
	test	ah, 68					; 00000044H
	jnp	SHORT $LN6@R_BeamDraw

; 1075 : 	{
; 1076 : 		rgNoise[0] = 0;

	mov	eax, 4
	imul	ecx, eax, 0
	xorps	xmm0, xmm0
	movss	DWORD PTR _rgNoise[ecx], xmm0

; 1077 : 		rgNoise[NOISE_DIVISIONS] = 0;

	mov	edx, 4
	shl	edx, 6
	xorps	xmm0, xmm0
	movss	DWORD PTR _rgNoise[edx], xmm0
$LN6@R_BeamDraw:

; 1078 : 	}
; 1079 : 
; 1080 : 	if( pbeam->amplitude != 0 && frametime != 0.0f )

	mov	eax, DWORD PTR _pbeam$[ebp]
	movss	xmm0, DWORD PTR [eax+64]
	ucomiss	xmm0, DWORD PTR __real@00000000
	lahf
	test	ah, 68					; 00000044H
	jnp	SHORT $LN9@R_BeamDraw
	movss	xmm0, DWORD PTR _frametime$[ebp]
	ucomiss	xmm0, DWORD PTR __real@00000000
	lahf
	test	ah, 68					; 00000044H
	jnp	SHORT $LN9@R_BeamDraw

; 1081 : 	{
; 1082 : 		if( FBitSet( pbeam->flags, FBEAM_SINENOISE ))

	mov	ecx, DWORD PTR _pbeam$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	and	edx, 16					; 00000010H
	je	SHORT $LN8@R_BeamDraw

; 1083 : 			SineNoise( rgNoise, NOISE_DIVISIONS );

	push	64					; 00000040H
	push	OFFSET _rgNoise
	call	_SineNoise
	add	esp, 8
	jmp	SHORT $LN9@R_BeamDraw
$LN8@R_BeamDraw:

; 1084 : 		else FracNoise( rgNoise, NOISE_DIVISIONS );

	push	64					; 00000040H
	push	OFFSET _rgNoise
	call	_FracNoise
	add	esp, 8
$LN9@R_BeamDraw:

; 1085 : 	}
; 1086 : 
; 1087 : 	// update end points
; 1088 : 	if( FBitSet( pbeam->flags, FBEAM_STARTENTITY|FBEAM_ENDENTITY ))

	mov	eax, DWORD PTR _pbeam$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	and	ecx, 3
	je	$LN14@R_BeamDraw

; 1089 : 	{
; 1090 : 		// makes sure attachment[0] + attachment[1] are valid
; 1091 : 		if( !R_BeamRecomputeEndpoints( pbeam ))

	mov	edx, DWORD PTR _pbeam$[ebp]
	push	edx
	call	_R_BeamRecomputeEndpoints
	add	esp, 4
	test	eax, eax
	jne	SHORT $LN11@R_BeamDraw

; 1092 : 		{
; 1093 : 			ClearBits( pbeam->flags, FBEAM_ISACTIVE ); // force to ignore

	mov	eax, DWORD PTR _pbeam$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	and	ecx, -1073741825			; bfffffffH
	mov	edx, DWORD PTR _pbeam$[ebp]
	mov	DWORD PTR [edx+8], ecx

; 1094 : 			return;

	jmp	$LN1@R_BeamDraw
$LN11@R_BeamDraw:

; 1095 : 		}
; 1096 : 
; 1097 : 		// compute segments from the new endpoints
; 1098 : 		VectorSubtract( pbeam->target, pbeam->source, delta );

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, 4
	imul	eax, edx, 0
	mov	edx, DWORD PTR _pbeam$[ebp]
	mov	esi, DWORD PTR _pbeam$[ebp]
	movss	xmm0, DWORD PTR [edx+ecx+24]
	subss	xmm0, DWORD PTR [esi+eax+12]
	mov	eax, 4
	imul	ecx, eax, 0
	movss	DWORD PTR _delta$[ebp+ecx], xmm0
	mov	edx, 4
	shl	edx, 0
	mov	eax, 4
	shl	eax, 0
	mov	ecx, DWORD PTR _pbeam$[ebp]
	mov	esi, DWORD PTR _pbeam$[ebp]
	movss	xmm0, DWORD PTR [ecx+edx+24]
	subss	xmm0, DWORD PTR [esi+eax+12]
	mov	edx, 4
	shl	edx, 0
	movss	DWORD PTR _delta$[ebp+edx], xmm0
	mov	eax, 4
	shl	eax, 1
	mov	ecx, 4
	shl	ecx, 1
	mov	edx, DWORD PTR _pbeam$[ebp]
	mov	esi, DWORD PTR _pbeam$[ebp]
	movss	xmm0, DWORD PTR [edx+eax+24]
	subss	xmm0, DWORD PTR [esi+ecx+12]
	movss	DWORD PTR tv163[ebp], xmm0
	mov	eax, 4
	shl	eax, 1
	movss	xmm0, DWORD PTR tv163[ebp]
	movss	DWORD PTR _delta$[ebp+eax], xmm0

; 1099 : 		VectorClear( pbeam->delta );

	mov	ecx, 4
	shl	ecx, 1
	mov	edx, DWORD PTR _pbeam$[ebp]
	xorps	xmm0, xmm0
	movss	DWORD PTR [edx+ecx+36], xmm0
	mov	eax, 4
	shl	eax, 0
	mov	ecx, DWORD PTR _pbeam$[ebp]
	xorps	xmm0, xmm0
	movss	DWORD PTR [ecx+eax+36], xmm0
	mov	edx, 4
	imul	eax, edx, 0
	mov	ecx, DWORD PTR _pbeam$[ebp]
	xorps	xmm0, xmm0
	movss	DWORD PTR [ecx+eax+36], xmm0

; 1100 : 
; 1101 : 		if( VectorLength( delta ) > 0.0000001f )

	mov	edx, 4
	imul	eax, edx, 0
	mov	ecx, 4
	imul	edx, ecx, 0
	movss	xmm0, DWORD PTR _delta$[ebp+eax]
	mulss	xmm0, DWORD PTR _delta$[ebp+edx]
	mov	eax, 4
	shl	eax, 0
	mov	ecx, 4
	shl	ecx, 0
	movss	xmm1, DWORD PTR _delta$[ebp+eax]
	mulss	xmm1, DWORD PTR _delta$[ebp+ecx]
	addss	xmm0, xmm1
	mov	edx, 4
	shl	edx, 1
	mov	eax, 4
	shl	eax, 1
	movss	xmm1, DWORD PTR _delta$[ebp+edx]
	mulss	xmm1, DWORD PTR _delta$[ebp+eax]
	addss	xmm0, xmm1
	cvtss2sd xmm0, xmm0
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	call	_sqrt
	add	esp, 8
	fstp	QWORD PTR tv800[ebp]
	movsd	xmm0, QWORD PTR tv800[ebp]
	comisd	xmm0, QWORD PTR __real@3e7ad7f2a0000000
	jbe	SHORT $LN12@R_BeamDraw

; 1102 : 			VectorCopy( delta, pbeam->delta );

	mov	ecx, 4
	imul	edx, ecx, 0
	mov	eax, 4
	imul	ecx, eax, 0
	mov	eax, DWORD PTR _pbeam$[ebp]
	mov	edx, DWORD PTR _delta$[ebp+edx]
	mov	DWORD PTR [eax+ecx+36], edx
	mov	eax, 4
	shl	eax, 0
	mov	ecx, 4
	shl	ecx, 0
	mov	edx, DWORD PTR _pbeam$[ebp]
	mov	eax, DWORD PTR _delta$[ebp+eax]
	mov	DWORD PTR [edx+ecx+36], eax
	mov	ecx, 4
	shl	ecx, 1
	mov	edx, 4
	shl	edx, 1
	mov	eax, DWORD PTR _pbeam$[ebp]
	mov	ecx, DWORD PTR _delta$[ebp+ecx]
	mov	DWORD PTR [eax+edx+36], ecx
$LN12@R_BeamDraw:

; 1103 : 
; 1104 : 		if( pbeam->amplitude >= 0.50f )

	mov	edx, DWORD PTR _pbeam$[ebp]
	movss	xmm0, DWORD PTR [edx+64]
	comiss	xmm0, DWORD PTR __real@3f000000
	jb	$LN13@R_BeamDraw

; 1105 : 			pbeam->segments = VectorLength( pbeam->delta ) * 0.25f + 3.0f; // one per 4 pixels

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, 4
	imul	eax, edx, 0
	mov	edx, DWORD PTR _pbeam$[ebp]
	mov	esi, DWORD PTR _pbeam$[ebp]
	movss	xmm0, DWORD PTR [edx+ecx+36]
	mulss	xmm0, DWORD PTR [esi+eax+36]
	mov	eax, 4
	shl	eax, 0
	mov	ecx, 4
	shl	ecx, 0
	mov	edx, DWORD PTR _pbeam$[ebp]
	mov	esi, DWORD PTR _pbeam$[ebp]
	movss	xmm1, DWORD PTR [edx+eax+36]
	mulss	xmm1, DWORD PTR [esi+ecx+36]
	addss	xmm0, xmm1
	mov	eax, 4
	shl	eax, 1
	mov	ecx, 4
	shl	ecx, 1
	mov	edx, DWORD PTR _pbeam$[ebp]
	mov	esi, DWORD PTR _pbeam$[ebp]
	movss	xmm1, DWORD PTR [edx+eax+36]
	mulss	xmm1, DWORD PTR [esi+ecx+36]
	addss	xmm0, xmm1
	cvtss2sd xmm0, xmm0
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	call	_sqrt
	add	esp, 8
	fstp	QWORD PTR tv835[ebp]
	movsd	xmm0, QWORD PTR tv835[ebp]
	mulsd	xmm0, QWORD PTR __real@3fd0000000000000
	addsd	xmm0, QWORD PTR __real@4008000000000000
	cvttsd2si eax, xmm0
	mov	ecx, DWORD PTR _pbeam$[ebp]
	mov	DWORD PTR [ecx+96], eax
	jmp	$LN14@R_BeamDraw
$LN13@R_BeamDraw:

; 1106 : 		else pbeam->segments = VectorLength( pbeam->delta ) * 0.075f + 3.0f; // one per 16 pixels

	mov	edx, 4
	imul	eax, edx, 0
	mov	ecx, 4
	imul	edx, ecx, 0
	mov	ecx, DWORD PTR _pbeam$[ebp]
	mov	esi, DWORD PTR _pbeam$[ebp]
	movss	xmm0, DWORD PTR [ecx+eax+36]
	mulss	xmm0, DWORD PTR [esi+edx+36]
	mov	edx, 4
	shl	edx, 0
	mov	eax, 4
	shl	eax, 0
	mov	ecx, DWORD PTR _pbeam$[ebp]
	mov	esi, DWORD PTR _pbeam$[ebp]
	movss	xmm1, DWORD PTR [ecx+edx+36]
	mulss	xmm1, DWORD PTR [esi+eax+36]
	addss	xmm0, xmm1
	mov	edx, 4
	shl	edx, 1
	mov	eax, 4
	shl	eax, 1
	mov	ecx, DWORD PTR _pbeam$[ebp]
	mov	esi, DWORD PTR _pbeam$[ebp]
	movss	xmm1, DWORD PTR [ecx+edx+36]
	mulss	xmm1, DWORD PTR [esi+eax+36]
	addss	xmm0, xmm1
	cvtss2sd xmm0, xmm0
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	call	_sqrt
	add	esp, 8
	fstp	QWORD PTR tv857[ebp]
	movsd	xmm0, QWORD PTR tv857[ebp]
	mulsd	xmm0, QWORD PTR __real@3fb3333340000000
	addsd	xmm0, QWORD PTR __real@4008000000000000
	cvttsd2si edx, xmm0
	mov	eax, DWORD PTR _pbeam$[ebp]
	mov	DWORD PTR [eax+96], edx
$LN14@R_BeamDraw:

; 1107 : 	}
; 1108 : 
; 1109 : 	if( pbeam->type == TE_BEAMPOINTS && R_BeamCull( pbeam->source, pbeam->target, 0 ))

	mov	ecx, DWORD PTR _pbeam$[ebp]
	cmp	DWORD PTR [ecx+4], 0
	jne	SHORT $LN15@R_BeamDraw
	push	0
	mov	edx, DWORD PTR _pbeam$[ebp]
	add	edx, 24					; 00000018H
	push	edx
	mov	eax, DWORD PTR _pbeam$[ebp]
	add	eax, 12					; 0000000cH
	push	eax
	call	_R_BeamCull
	add	esp, 12					; 0000000cH
	test	eax, eax
	je	SHORT $LN15@R_BeamDraw

; 1110 : 	{
; 1111 : 		ClearBits( pbeam->flags, FBEAM_ISACTIVE );

	mov	ecx, DWORD PTR _pbeam$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	and	edx, -1073741825			; bfffffffH
	mov	eax, DWORD PTR _pbeam$[ebp]
	mov	DWORD PTR [eax+8], edx

; 1112 : 		return;

	jmp	$LN1@R_BeamDraw
$LN15@R_BeamDraw:

; 1113 : 	}
; 1114 : 
; 1115 : 	// don't draw really short or inactive beams
; 1116 : 	if( !FBitSet( pbeam->flags, FBEAM_ISACTIVE ) || VectorLength( pbeam->delta ) < 0.1f )

	mov	ecx, DWORD PTR _pbeam$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	and	edx, 1073741824				; 40000000H
	je	$LN17@R_BeamDraw
	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, 4
	imul	eax, edx, 0
	mov	edx, DWORD PTR _pbeam$[ebp]
	mov	esi, DWORD PTR _pbeam$[ebp]
	movss	xmm0, DWORD PTR [edx+ecx+36]
	mulss	xmm0, DWORD PTR [esi+eax+36]
	mov	eax, 4
	shl	eax, 0
	mov	ecx, 4
	shl	ecx, 0
	mov	edx, DWORD PTR _pbeam$[ebp]
	mov	esi, DWORD PTR _pbeam$[ebp]
	movss	xmm1, DWORD PTR [edx+eax+36]
	mulss	xmm1, DWORD PTR [esi+ecx+36]
	addss	xmm0, xmm1
	mov	eax, 4
	shl	eax, 1
	mov	ecx, 4
	shl	ecx, 1
	mov	edx, DWORD PTR _pbeam$[ebp]
	mov	esi, DWORD PTR _pbeam$[ebp]
	movss	xmm1, DWORD PTR [edx+eax+36]
	mulss	xmm1, DWORD PTR [esi+ecx+36]
	addss	xmm0, xmm1
	cvtss2sd xmm0, xmm0
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	call	_sqrt
	add	esp, 8
	fstp	QWORD PTR tv888[ebp]
	movsd	xmm0, QWORD PTR __real@3fb99999a0000000
	comisd	xmm0, QWORD PTR tv888[ebp]
	jbe	SHORT $LN16@R_BeamDraw
$LN17@R_BeamDraw:

; 1117 : 	{
; 1118 : 		return;

	jmp	$LN1@R_BeamDraw
$LN16@R_BeamDraw:

; 1119 : 	}
; 1120 : 
; 1121 : 	if( pbeam->flags & ( FBEAM_FADEIN|FBEAM_FADEOUT ))

	mov	eax, DWORD PTR _pbeam$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	and	ecx, 12					; 0000000cH
	je	SHORT $LN19@R_BeamDraw

; 1122 : 	{
; 1123 : 		// update life cycle
; 1124 : 		pbeam->t = pbeam->freq + ( pbeam->die - cl.time );

	mov	edx, DWORD PTR _pbeam$[ebp]
	cvtss2sd xmm0, DWORD PTR [edx+52]
	mov	eax, DWORD PTR _pbeam$[ebp]
	cvtss2sd xmm1, DWORD PTR [eax+56]
	subsd	xmm1, QWORD PTR _cl+1525848
	addsd	xmm0, xmm1
	cvtsd2ss xmm0, xmm0
	mov	ecx, DWORD PTR _pbeam$[ebp]
	movss	DWORD PTR [ecx+48], xmm0

; 1125 : 		if( pbeam->t != 0.0f ) pbeam->t = 1.0f - pbeam->freq / pbeam->t;

	mov	edx, DWORD PTR _pbeam$[ebp]
	movss	xmm0, DWORD PTR [edx+48]
	ucomiss	xmm0, DWORD PTR __real@00000000
	lahf
	test	ah, 68					; 00000044H
	jnp	SHORT $LN19@R_BeamDraw
	mov	eax, DWORD PTR _pbeam$[ebp]
	mov	ecx, DWORD PTR _pbeam$[ebp]
	movss	xmm0, DWORD PTR [eax+52]
	divss	xmm0, DWORD PTR [ecx+48]
	movss	xmm1, DWORD PTR __real@3f800000
	subss	xmm1, xmm0
	mov	edx, DWORD PTR _pbeam$[ebp]
	movss	DWORD PTR [edx+48], xmm1
$LN19@R_BeamDraw:

; 1126 : 	}
; 1127 : 
; 1128 : 	if( pbeam->type == TE_BEAMHOSE )

	mov	eax, DWORD PTR _pbeam$[ebp]
	cmp	DWORD PTR [eax+4], 26			; 0000001aH
	jne	$LN23@R_BeamDraw

; 1129 : 	{
; 1130 : 		float	flDot;
; 1131 : 
; 1132 : 		VectorSubtract( pbeam->target, pbeam->source, delta );

	mov	ecx, 4
	imul	edx, ecx, 0
	mov	eax, 4
	imul	ecx, eax, 0
	mov	eax, DWORD PTR _pbeam$[ebp]
	mov	esi, DWORD PTR _pbeam$[ebp]
	movss	xmm0, DWORD PTR [eax+edx+24]
	subss	xmm0, DWORD PTR [esi+ecx+12]
	mov	ecx, 4
	imul	edx, ecx, 0
	movss	DWORD PTR _delta$[ebp+edx], xmm0
	mov	eax, 4
	shl	eax, 0
	mov	ecx, 4
	shl	ecx, 0
	mov	edx, DWORD PTR _pbeam$[ebp]
	mov	esi, DWORD PTR _pbeam$[ebp]
	movss	xmm0, DWORD PTR [edx+eax+24]
	subss	xmm0, DWORD PTR [esi+ecx+12]
	mov	eax, 4
	shl	eax, 0
	movss	DWORD PTR _delta$[ebp+eax], xmm0
	mov	ecx, 4
	shl	ecx, 1
	mov	edx, 4
	shl	edx, 1
	mov	eax, DWORD PTR _pbeam$[ebp]
	mov	esi, DWORD PTR _pbeam$[ebp]
	movss	xmm0, DWORD PTR [eax+ecx+24]
	subss	xmm0, DWORD PTR [esi+edx+12]
	movss	DWORD PTR tv368[ebp], xmm0
	mov	ecx, 4
	shl	ecx, 1
	movss	xmm0, DWORD PTR tv368[ebp]
	movss	DWORD PTR _delta$[ebp+ecx], xmm0

; 1133 : 		VectorNormalize( delta );

	mov	edx, 4
	imul	eax, edx, 0
	mov	ecx, 4
	imul	edx, ecx, 0
	movss	xmm0, DWORD PTR _delta$[ebp+eax]
	mulss	xmm0, DWORD PTR _delta$[ebp+edx]
	mov	eax, 4
	shl	eax, 0
	mov	ecx, 4
	shl	ecx, 0
	movss	xmm1, DWORD PTR _delta$[ebp+eax]
	mulss	xmm1, DWORD PTR _delta$[ebp+ecx]
	addss	xmm0, xmm1
	mov	edx, 4
	shl	edx, 1
	mov	eax, 4
	shl	eax, 1
	movss	xmm1, DWORD PTR _delta$[ebp+edx]
	mulss	xmm1, DWORD PTR _delta$[ebp+eax]
	addss	xmm0, xmm1
	cvtss2sd xmm0, xmm0
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	call	_sqrt
	add	esp, 8
	fstp	DWORD PTR _ilength$5[ebp]
	movss	xmm0, DWORD PTR _ilength$5[ebp]
	ucomiss	xmm0, DWORD PTR __real@00000000
	lahf
	test	ah, 68					; 00000044H
	jnp	SHORT $LN21@R_BeamDraw
	movss	xmm0, DWORD PTR __real@3f800000
	divss	xmm0, DWORD PTR _ilength$5[ebp]
	movss	DWORD PTR _ilength$5[ebp], xmm0
$LN21@R_BeamDraw:
	mov	ecx, 4
	imul	edx, ecx, 0
	movss	xmm0, DWORD PTR _delta$[ebp+edx]
	mulss	xmm0, DWORD PTR _ilength$5[ebp]
	mov	eax, 4
	imul	ecx, eax, 0
	movss	DWORD PTR _delta$[ebp+ecx], xmm0
	mov	edx, 4
	shl	edx, 0
	movss	xmm0, DWORD PTR _delta$[ebp+edx]
	mulss	xmm0, DWORD PTR _ilength$5[ebp]
	mov	eax, 4
	shl	eax, 0
	movss	DWORD PTR _delta$[ebp+eax], xmm0
	mov	ecx, 4
	shl	ecx, 1
	movss	xmm0, DWORD PTR _delta$[ebp+ecx]
	mulss	xmm0, DWORD PTR _ilength$5[ebp]
	mov	edx, 4
	shl	edx, 1
	movss	DWORD PTR _delta$[ebp+edx], xmm0

; 1134 : 
; 1135 : 		flDot = DotProduct( delta, RI.vforward );

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, 4
	imul	eax, edx, 0
	movss	xmm0, DWORD PTR _delta$[ebp+ecx]
	mulss	xmm0, DWORD PTR _RI[eax+224]
	mov	ecx, 4
	shl	ecx, 0
	mov	edx, 4
	shl	edx, 0
	movss	xmm1, DWORD PTR _delta$[ebp+ecx]
	mulss	xmm1, DWORD PTR _RI[edx+224]
	addss	xmm0, xmm1
	mov	eax, 4
	shl	eax, 1
	mov	ecx, 4
	shl	ecx, 1
	movss	xmm1, DWORD PTR _delta$[ebp+eax]
	mulss	xmm1, DWORD PTR _RI[ecx+224]
	addss	xmm0, xmm1
	movss	DWORD PTR _flDot$4[ebp], xmm0

; 1136 : 
; 1137 : 		// abort if the player's looking along it away from the source
; 1138 : 		if( flDot > 0 )

	movss	xmm0, DWORD PTR _flDot$4[ebp]
	comiss	xmm0, DWORD PTR __real@00000000
	jbe	SHORT $LN22@R_BeamDraw

; 1139 : 		{
; 1140 : 			return;

	jmp	$LN1@R_BeamDraw

; 1141 : 		}

	jmp	$LN23@R_BeamDraw
$LN22@R_BeamDraw:

; 1142 : 		else
; 1143 : 		{
; 1144 : 			float	flFade = pow( flDot, 10 );

	sub	esp, 8
	movsd	xmm0, QWORD PTR __real@4024000000000000
	movsd	QWORD PTR [esp], xmm0
	cvtss2sd xmm0, DWORD PTR _flDot$4[ebp]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	call	_pow
	add	esp, 16					; 00000010H
	fstp	DWORD PTR _flFade$2[ebp]

; 1145 : 			vec3_t	localDir, vecProjection, tmp;
; 1146 : 			float	flDistance;
; 1147 : 
; 1148 : 			// fade the beam if the player's not looking at the source
; 1149 : 			VectorSubtract( RI.vieworg, pbeam->source, localDir );

	mov	edx, 4
	imul	eax, edx, 0
	mov	ecx, 4
	imul	edx, ecx, 0
	mov	ecx, DWORD PTR _pbeam$[ebp]
	movss	xmm0, DWORD PTR _RI[eax+200]
	subss	xmm0, DWORD PTR [ecx+edx+12]
	mov	edx, 4
	imul	eax, edx, 0
	movss	DWORD PTR _localDir$8[ebp+eax], xmm0
	mov	ecx, 4
	shl	ecx, 0
	mov	edx, 4
	shl	edx, 0
	mov	eax, DWORD PTR _pbeam$[ebp]
	movss	xmm0, DWORD PTR _RI[ecx+200]
	subss	xmm0, DWORD PTR [eax+edx+12]
	mov	ecx, 4
	shl	ecx, 0
	movss	DWORD PTR _localDir$8[ebp+ecx], xmm0
	mov	edx, 4
	shl	edx, 1
	mov	eax, 4
	shl	eax, 1
	mov	ecx, DWORD PTR _pbeam$[ebp]
	movss	xmm0, DWORD PTR _RI[edx+200]
	subss	xmm0, DWORD PTR [ecx+eax+12]
	movss	DWORD PTR tv455[ebp], xmm0
	mov	edx, 4
	shl	edx, 1
	movss	xmm0, DWORD PTR tv455[ebp]
	movss	DWORD PTR _localDir$8[ebp+edx], xmm0

; 1150 : 			flDot = DotProduct( delta, localDir );

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, 4
	imul	eax, edx, 0
	movss	xmm0, DWORD PTR _delta$[ebp+ecx]
	mulss	xmm0, DWORD PTR _localDir$8[ebp+eax]
	mov	ecx, 4
	shl	ecx, 0
	mov	edx, 4
	shl	edx, 0
	movss	xmm1, DWORD PTR _delta$[ebp+ecx]
	mulss	xmm1, DWORD PTR _localDir$8[ebp+edx]
	addss	xmm0, xmm1
	mov	eax, 4
	shl	eax, 1
	mov	ecx, 4
	shl	ecx, 1
	movss	xmm1, DWORD PTR _delta$[ebp+eax]
	mulss	xmm1, DWORD PTR _localDir$8[ebp+ecx]
	addss	xmm0, xmm1
	movss	DWORD PTR _flDot$4[ebp], xmm0

; 1151 : 			VectorScale( delta, flDot, vecProjection );

	mov	edx, 4
	imul	eax, edx, 0
	movss	xmm0, DWORD PTR _delta$[ebp+eax]
	mulss	xmm0, DWORD PTR _flDot$4[ebp]
	mov	ecx, 4
	imul	edx, ecx, 0
	movss	DWORD PTR _vecProjection$6[ebp+edx], xmm0
	mov	eax, 4
	shl	eax, 0
	movss	xmm0, DWORD PTR _delta$[ebp+eax]
	mulss	xmm0, DWORD PTR _flDot$4[ebp]
	mov	ecx, 4
	shl	ecx, 0
	movss	DWORD PTR _vecProjection$6[ebp+ecx], xmm0
	mov	edx, 4
	shl	edx, 1
	movss	xmm0, DWORD PTR _delta$[ebp+edx]
	mulss	xmm0, DWORD PTR _flDot$4[ebp]
	movss	DWORD PTR tv488[ebp], xmm0
	mov	eax, 4
	shl	eax, 1
	movss	xmm0, DWORD PTR tv488[ebp]
	movss	DWORD PTR _vecProjection$6[ebp+eax], xmm0

; 1152 : 			VectorSubtract( localDir, vecProjection, tmp );

	mov	ecx, 4
	imul	edx, ecx, 0
	mov	eax, 4
	imul	ecx, eax, 0
	movss	xmm0, DWORD PTR _localDir$8[ebp+edx]
	subss	xmm0, DWORD PTR _vecProjection$6[ebp+ecx]
	mov	edx, 4
	imul	eax, edx, 0
	movss	DWORD PTR _tmp$7[ebp+eax], xmm0
	mov	ecx, 4
	shl	ecx, 0
	mov	edx, 4
	shl	edx, 0
	movss	xmm0, DWORD PTR _localDir$8[ebp+ecx]
	subss	xmm0, DWORD PTR _vecProjection$6[ebp+edx]
	mov	eax, 4
	shl	eax, 0
	movss	DWORD PTR _tmp$7[ebp+eax], xmm0
	mov	ecx, 4
	shl	ecx, 1
	mov	edx, 4
	shl	edx, 1
	movss	xmm0, DWORD PTR _localDir$8[ebp+ecx]
	subss	xmm0, DWORD PTR _vecProjection$6[ebp+edx]
	movss	DWORD PTR tv509[ebp], xmm0
	mov	eax, 4
	shl	eax, 1
	movss	xmm0, DWORD PTR tv509[ebp]
	movss	DWORD PTR _tmp$7[ebp+eax], xmm0

; 1153 : 			flDistance = VectorLength( tmp );

	mov	ecx, 4
	imul	edx, ecx, 0
	mov	eax, 4
	imul	ecx, eax, 0
	movss	xmm0, DWORD PTR _tmp$7[ebp+edx]
	mulss	xmm0, DWORD PTR _tmp$7[ebp+ecx]
	mov	edx, 4
	shl	edx, 0
	mov	eax, 4
	shl	eax, 0
	movss	xmm1, DWORD PTR _tmp$7[ebp+edx]
	mulss	xmm1, DWORD PTR _tmp$7[ebp+eax]
	addss	xmm0, xmm1
	mov	ecx, 4
	shl	ecx, 1
	mov	edx, 4
	shl	edx, 1
	movss	xmm1, DWORD PTR _tmp$7[ebp+ecx]
	mulss	xmm1, DWORD PTR _tmp$7[ebp+edx]
	addss	xmm0, xmm1
	cvtss2sd xmm0, xmm0
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	call	_sqrt
	add	esp, 8
	fstp	DWORD PTR _flDistance$3[ebp]

; 1154 : 
; 1155 : 			if( flDistance > 30 )

	movss	xmm0, DWORD PTR _flDistance$3[ebp]
	comiss	xmm0, DWORD PTR __real@41f00000
	jbe	SHORT $LN26@R_BeamDraw

; 1156 : 			{
; 1157 : 				flDistance = 1.0f - (( flDistance - 30.0f ) / 64.0f );

	movss	xmm0, DWORD PTR _flDistance$3[ebp]
	subss	xmm0, DWORD PTR __real@41f00000
	divss	xmm0, DWORD PTR __real@42800000
	movss	xmm1, DWORD PTR __real@3f800000
	subss	xmm1, xmm0
	movss	DWORD PTR _flDistance$3[ebp], xmm1

; 1158 : 				if( flDistance <= 0 ) flFade = 0;

	xorps	xmm0, xmm0
	comiss	xmm0, DWORD PTR _flDistance$3[ebp]
	jb	SHORT $LN25@R_BeamDraw
	xorps	xmm0, xmm0
	movss	DWORD PTR _flFade$2[ebp], xmm0
	jmp	SHORT $LN26@R_BeamDraw
$LN25@R_BeamDraw:

; 1159 : 				else flFade *= pow( flDistance, 3 );

	sub	esp, 8
	movsd	xmm0, QWORD PTR __real@4008000000000000
	movsd	QWORD PTR [esp], xmm0
	cvtss2sd xmm0, DWORD PTR _flDistance$3[ebp]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	call	_pow
	add	esp, 16					; 00000010H
	fstp	QWORD PTR tv1047[ebp]
	cvtss2sd xmm0, DWORD PTR _flFade$2[ebp]
	mulsd	xmm0, QWORD PTR tv1047[ebp]
	cvtsd2ss xmm0, xmm0
	movss	DWORD PTR _flFade$2[ebp], xmm0
$LN26@R_BeamDraw:

; 1160 : 			}
; 1161 : 
; 1162 : 			if( flFade < ( 1.0f / 255.0f ))

	movss	xmm0, DWORD PTR __real@3b808081
	comiss	xmm0, DWORD PTR _flFade$2[ebp]
	jbe	SHORT $LN27@R_BeamDraw

; 1163 : 				return;

	jmp	$LN1@R_BeamDraw
$LN27@R_BeamDraw:

; 1164 : 
; 1165 : 			// FIXME: needs to be testing
; 1166 : 			pbeam->brightness *= flFade;

	mov	eax, DWORD PTR _pbeam$[ebp]
	movss	xmm0, DWORD PTR [eax+80]
	mulss	xmm0, DWORD PTR _flFade$2[ebp]
	mov	ecx, DWORD PTR _pbeam$[ebp]
	movss	DWORD PTR [ecx+80], xmm0
$LN23@R_BeamDraw:

; 1167 : 		}
; 1168 : 	}
; 1169 : 
; 1170 : 	TriRenderMode( FBitSet( pbeam->flags, FBEAM_SOLID ) ? kRenderNormal : kRenderTransAdd );

	mov	edx, DWORD PTR _pbeam$[ebp]
	mov	eax, DWORD PTR [edx+8]
	and	eax, 32					; 00000020H
	je	SHORT $LN42@R_BeamDraw
	mov	DWORD PTR tv554[ebp], 0
	jmp	SHORT $LN43@R_BeamDraw
$LN42@R_BeamDraw:
	mov	DWORD PTR tv554[ebp], 5
$LN43@R_BeamDraw:
	mov	ecx, DWORD PTR tv554[ebp]
	push	ecx
	call	_TriRenderMode
	add	esp, 4

; 1171 : 
; 1172 : 	if( !TriSpriteTexture( model, (int)(pbeam->frame + pbeam->frameRate * cl.time) % pbeam->frameCount ))

	mov	edx, DWORD PTR _pbeam$[ebp]
	cvtss2sd xmm0, DWORD PTR [edx+92]
	mov	eax, DWORD PTR _pbeam$[ebp]
	cvtss2sd xmm1, DWORD PTR [eax+88]
	mulsd	xmm1, QWORD PTR _cl+1525848
	addsd	xmm0, xmm1
	cvttsd2si eax, xmm0
	mov	ecx, DWORD PTR _pbeam$[ebp]
	cdq
	idiv	DWORD PTR [ecx+112]
	push	edx
	mov	edx, DWORD PTR _model$[ebp]
	push	edx
	call	_TriSpriteTexture
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN28@R_BeamDraw

; 1173 : 	{
; 1174 : 		ClearBits( pbeam->flags, FBEAM_ISACTIVE );

	mov	eax, DWORD PTR _pbeam$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	and	ecx, -1073741825			; bfffffffH
	mov	edx, DWORD PTR _pbeam$[ebp]
	mov	DWORD PTR [edx+8], ecx

; 1175 : 		return;

	jmp	$LN1@R_BeamDraw
$LN28@R_BeamDraw:

; 1176 : 	}
; 1177 : 
; 1178 : 	if( pbeam->type == TE_BEAMFOLLOW )

	mov	eax, DWORD PTR _pbeam$[ebp]
	cmp	DWORD PTR [eax+4], 22			; 00000016H
	jne	SHORT $LN30@R_BeamDraw

; 1179 : 	{
; 1180 : 		cl_entity_t	*pStart;
; 1181 : 
; 1182 : 		// XASH SPECIFIC: get brightness from head entity
; 1183 : 		pStart = R_BeamGetEntity( pbeam->startEntity ); 

	mov	ecx, DWORD PTR _pbeam$[ebp]
	mov	edx, DWORD PTR [ecx+100]
	push	edx
	call	_R_BeamGetEntity
	add	esp, 4
	mov	DWORD PTR _pStart$1[ebp], eax

; 1184 : 		if( pStart && pStart->curstate.rendermode != kRenderNormal )

	cmp	DWORD PTR _pStart$1[ebp], 0
	je	SHORT $LN30@R_BeamDraw
	mov	eax, DWORD PTR _pStart$1[ebp]
	cmp	DWORD PTR [eax+760], 0
	je	SHORT $LN30@R_BeamDraw

; 1185 : 			pbeam->brightness = CL_FxBlend( pStart ) / 255.0f;

	mov	ecx, DWORD PTR _pStart$1[ebp]
	push	ecx
	call	_CL_FxBlend
	add	esp, 4
	cvtsi2ss xmm0, eax
	divss	xmm0, DWORD PTR __real@437f0000
	mov	edx, DWORD PTR _pbeam$[ebp]
	movss	DWORD PTR [edx+80], xmm0
$LN30@R_BeamDraw:

; 1186 : 	}
; 1187 : 
; 1188 : 	if( FBitSet( pbeam->flags, FBEAM_FADEIN ))

	mov	eax, DWORD PTR _pbeam$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	and	ecx, 4
	je	SHORT $LN31@R_BeamDraw

; 1189 : 		TriColor4f( pbeam->r, pbeam->g, pbeam->b, pbeam->t * pbeam->brightness );

	mov	edx, DWORD PTR _pbeam$[ebp]
	mov	eax, DWORD PTR _pbeam$[ebp]
	movss	xmm0, DWORD PTR [edx+48]
	mulss	xmm0, DWORD PTR [eax+80]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _pbeam$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [ecx+76]
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _pbeam$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [edx+72]
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _pbeam$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [eax+68]
	movss	DWORD PTR [esp], xmm0
	call	_TriColor4f
	add	esp, 16					; 00000010H
	jmp	$LN34@R_BeamDraw
$LN31@R_BeamDraw:

; 1190 : 	else if( FBitSet( pbeam->flags, FBEAM_FADEOUT ))

	mov	ecx, DWORD PTR _pbeam$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	and	edx, 8
	je	SHORT $LN33@R_BeamDraw

; 1191 : 		TriColor4f( pbeam->r, pbeam->g, pbeam->b, ( 1.0f - pbeam->t ) * pbeam->brightness );

	mov	eax, DWORD PTR _pbeam$[ebp]
	movss	xmm0, DWORD PTR __real@3f800000
	subss	xmm0, DWORD PTR [eax+48]
	mov	ecx, DWORD PTR _pbeam$[ebp]
	mulss	xmm0, DWORD PTR [ecx+80]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _pbeam$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [edx+76]
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _pbeam$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [eax+72]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _pbeam$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [ecx+68]
	movss	DWORD PTR [esp], xmm0
	call	_TriColor4f
	add	esp, 16					; 00000010H
	jmp	SHORT $LN34@R_BeamDraw
$LN33@R_BeamDraw:

; 1192 : 	else TriColor4f( pbeam->r, pbeam->g, pbeam->b, pbeam->brightness );

	mov	edx, DWORD PTR _pbeam$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [edx+80]
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _pbeam$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [eax+76]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _pbeam$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [ecx+72]
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _pbeam$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [edx+68]
	movss	DWORD PTR [esp], xmm0
	call	_TriColor4f
	add	esp, 16					; 00000010H
$LN34@R_BeamDraw:

; 1193 : 
; 1194 : 	switch( pbeam->type )

	mov	eax, DWORD PTR _pbeam$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR tv623[ebp], ecx
	cmp	DWORD PTR tv623[ebp], 26		; 0000001aH
	ja	$LN2@R_BeamDraw
	mov	edx, DWORD PTR tv623[ebp]
	movzx	eax, BYTE PTR $LN44@R_BeamDraw[edx]
	jmp	DWORD PTR $LN45@R_BeamDraw[eax*4]
$LN35@R_BeamDraw:

; 1195 : 	{
; 1196 : 	case TE_BEAMTORUS:
; 1197 : 		GL_Cull( GL_NONE );

	push	0
	call	_GL_Cull
	add	esp, 4

; 1198 : 		TriBegin( TRI_TRIANGLE_STRIP );

	push	5
	call	_TriBegin
	add	esp, 4

; 1199 : 		R_DrawTorus( pbeam->source, pbeam->delta, pbeam->width, pbeam->amplitude, pbeam->freq, pbeam->speed, pbeam->segments );

	mov	ecx, DWORD PTR _pbeam$[ebp]
	mov	edx, DWORD PTR [ecx+96]
	push	edx
	mov	eax, DWORD PTR _pbeam$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [eax+84]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _pbeam$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [ecx+52]
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _pbeam$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [edx+64]
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _pbeam$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [eax+60]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _pbeam$[ebp]
	add	ecx, 36					; 00000024H
	push	ecx
	mov	edx, DWORD PTR _pbeam$[ebp]
	add	edx, 12					; 0000000cH
	push	edx
	call	_R_DrawTorus
	add	esp, 28					; 0000001cH

; 1200 : 		TriEnd();

	call	_TriEnd

; 1201 : 		break;

	jmp	$LN2@R_BeamDraw
$LN36@R_BeamDraw:

; 1202 : 	case TE_BEAMDISK:
; 1203 : 		GL_Cull( GL_NONE );

	push	0
	call	_GL_Cull
	add	esp, 4

; 1204 : 		TriBegin( TRI_TRIANGLE_STRIP );

	push	5
	call	_TriBegin
	add	esp, 4

; 1205 : 		R_DrawDisk( pbeam->source, pbeam->delta, pbeam->width, pbeam->amplitude, pbeam->freq, pbeam->speed, pbeam->segments );

	mov	eax, DWORD PTR _pbeam$[ebp]
	mov	ecx, DWORD PTR [eax+96]
	push	ecx
	mov	edx, DWORD PTR _pbeam$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [edx+84]
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _pbeam$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [eax+52]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _pbeam$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [ecx+64]
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _pbeam$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [edx+60]
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _pbeam$[ebp]
	add	eax, 36					; 00000024H
	push	eax
	mov	ecx, DWORD PTR _pbeam$[ebp]
	add	ecx, 12					; 0000000cH
	push	ecx
	call	_R_DrawDisk
	add	esp, 28					; 0000001cH

; 1206 : 		TriEnd();

	call	_TriEnd

; 1207 : 		break;

	jmp	$LN2@R_BeamDraw
$LN37@R_BeamDraw:

; 1208 : 	case TE_BEAMCYLINDER:
; 1209 : 		GL_Cull( GL_NONE );

	push	0
	call	_GL_Cull
	add	esp, 4

; 1210 : 		TriBegin( TRI_TRIANGLE_STRIP );

	push	5
	call	_TriBegin
	add	esp, 4

; 1211 : 		R_DrawCylinder( pbeam->source, pbeam->delta, pbeam->width, pbeam->amplitude, pbeam->freq, pbeam->speed, pbeam->segments );

	mov	edx, DWORD PTR _pbeam$[ebp]
	mov	eax, DWORD PTR [edx+96]
	push	eax
	mov	ecx, DWORD PTR _pbeam$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [ecx+84]
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _pbeam$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [edx+52]
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _pbeam$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [eax+64]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _pbeam$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [ecx+60]
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _pbeam$[ebp]
	add	edx, 36					; 00000024H
	push	edx
	mov	eax, DWORD PTR _pbeam$[ebp]
	add	eax, 12					; 0000000cH
	push	eax
	call	_R_DrawCylinder
	add	esp, 28					; 0000001cH

; 1212 : 		TriEnd();

	call	_TriEnd

; 1213 : 		break;

	jmp	$LN2@R_BeamDraw
$LN38@R_BeamDraw:

; 1214 : 	case TE_BEAMPOINTS:
; 1215 : 	case TE_BEAMHOSE:
; 1216 : 		TriBegin( TRI_TRIANGLE_STRIP );

	push	5
	call	_TriBegin
	add	esp, 4

; 1217 : 		R_DrawSegs( pbeam->source, pbeam->delta, pbeam->width, pbeam->amplitude, pbeam->freq, pbeam->speed, pbeam->segments, pbeam->flags );

	mov	ecx, DWORD PTR _pbeam$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	mov	eax, DWORD PTR _pbeam$[ebp]
	mov	ecx, DWORD PTR [eax+96]
	push	ecx
	mov	edx, DWORD PTR _pbeam$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [edx+84]
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _pbeam$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [eax+52]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _pbeam$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [ecx+64]
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _pbeam$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [edx+60]
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _pbeam$[ebp]
	add	eax, 36					; 00000024H
	push	eax
	mov	ecx, DWORD PTR _pbeam$[ebp]
	add	ecx, 12					; 0000000cH
	push	ecx
	call	_R_DrawSegs
	add	esp, 32					; 00000020H

; 1218 : 		TriEnd();

	call	_TriEnd

; 1219 : 		break;

	jmp	$LN2@R_BeamDraw
$LN39@R_BeamDraw:

; 1220 : 	case TE_BEAMFOLLOW:
; 1221 : 		TriBegin( TRI_QUADS );

	push	2
	call	_TriBegin

; 1222 : 		R_DrawBeamFollow( pbeam, frametime );

	movss	xmm0, DWORD PTR _frametime$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _pbeam$[ebp]
	push	edx
	call	_R_DrawBeamFollow
	add	esp, 8

; 1223 : 		TriEnd();

	call	_TriEnd

; 1224 : 		break;

	jmp	SHORT $LN2@R_BeamDraw
$LN40@R_BeamDraw:

; 1225 : 	case TE_BEAMRING:
; 1226 : 		GL_Cull( GL_NONE );

	push	0
	call	_GL_Cull
	add	esp, 4

; 1227 : 		TriBegin( TRI_TRIANGLE_STRIP );

	push	5
	call	_TriBegin
	add	esp, 4

; 1228 : 		R_DrawRing( pbeam->source, pbeam->delta, pbeam->width, pbeam->amplitude, pbeam->freq, pbeam->speed, pbeam->segments );

	mov	eax, DWORD PTR _pbeam$[ebp]
	mov	ecx, DWORD PTR [eax+96]
	push	ecx
	mov	edx, DWORD PTR _pbeam$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [edx+84]
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _pbeam$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [eax+52]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _pbeam$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [ecx+64]
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _pbeam$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [edx+60]
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _pbeam$[ebp]
	add	eax, 36					; 00000024H
	push	eax
	mov	ecx, DWORD PTR _pbeam$[ebp]
	add	ecx, 12					; 0000000cH
	push	ecx
	call	_R_DrawRing
	add	esp, 28					; 0000001cH

; 1229 : 		TriEnd();

	call	_TriEnd
$LN2@R_BeamDraw:

; 1230 : 		break;
; 1231 : 	}
; 1232 : 
; 1233 : 	GL_Cull( GL_FRONT );

	push	1028					; 00000404H
	call	_GL_Cull
	add	esp, 4
$LN1@R_BeamDraw:

; 1234 : }

	pop	esi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN45@R_BeamDraw:
	DD	$LN38@R_BeamDraw
	DD	$LN35@R_BeamDraw
	DD	$LN36@R_BeamDraw
	DD	$LN37@R_BeamDraw
	DD	$LN39@R_BeamDraw
	DD	$LN40@R_BeamDraw
	DD	$LN2@R_BeamDraw
$LN44@R_BeamDraw:
	DB	0
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	1
	DB	2
	DB	3
	DB	4
	DB	6
	DB	5
	DB	6
	DB	0
_R_BeamDraw ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xash_build4529_src\engine\client\gl_beams.c
_TEXT	SEGMENT
tv970 = -256						; size = 8
tv738 = -248						; size = 8
tv425 = -240						; size = 4
tv165 = -236						; size = 4
tv186 = -232						; size = 4
tv248 = -228						; size = 4
tv269 = -224						; size = 4
tv347 = -220						; size = 4
tv396 = -216						; size = 4
_noiseStep$ = -212					; size = 4
_vStep$ = -208						; size = 4
tv671 = -204						; size = 4
tv641 = -200						; size = 4
tv617 = -196						; size = 4
tv584 = -192						; size = 4
tv487 = -188						; size = 4
tv463 = -184						; size = 4
_fraction$ = -180					; size = 4
_y$ = -176						; size = 4
_scale$ = -172						; size = 4
_x$ = -168						; size = 4
_div$ = -164						; size = 4
_j$ = -160						; size = 4
_noiseIndex$ = -156					; size = 4
_vLast$ = -152						; size = 4
_length$ = -148						; size = 4
_i$ = -144						; size = 4
_radius$ = -140						; size = 4
_ilength$1 = -136					; size = 4
_ilength$2 = -132					; size = 4
_factor$ = -128						; size = 4
_last2$ = -124						; size = 12
_screenLast$ = -112					; size = 12
_center$ = -100						; size = 12
_screen$ = -88						; size = 12
_last1$ = -76						; size = 12
_xaxis$ = -64						; size = 12
_normal$ = -52						; size = 12
_point$ = -40						; size = 12
_yaxis$ = -28						; size = 12
_tmp$ = -16						; size = 12
__$ArrayPad$ = -4					; size = 4
_source$ = 8						; size = 4
_delta$ = 12						; size = 4
_width$ = 16						; size = 4
_amplitude$ = 20					; size = 4
_freq$ = 24						; size = 4
_speed$ = 28						; size = 4
_segments$ = 32						; size = 4
_R_DrawRing PROC

; 934  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 256				; 00000100H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	esi

; 935  : 	int	i, j, noiseIndex, noiseStep;
; 936  : 	float	div, length, fraction, factor, vLast, vStep;
; 937  : 	vec3_t	last1, last2, point, screen, screenLast;
; 938  : 	vec3_t	tmp, normal, center, xaxis, yaxis;
; 939  : 	float	radius, x, y, scale;
; 940  : 
; 941  : 	if( segments < 2 )

	cmp	DWORD PTR _segments$[ebp], 2
	jge	SHORT $LN5@R_DrawRing

; 942  : 		return;

	jmp	$LN3@R_DrawRing
$LN5@R_DrawRing:

; 943  : 
; 944  : 	VectorClear( screenLast );

	mov	eax, 4
	shl	eax, 1
	xorps	xmm0, xmm0
	movss	DWORD PTR _screenLast$[ebp+eax], xmm0
	mov	ecx, 4
	shl	ecx, 0
	xorps	xmm0, xmm0
	movss	DWORD PTR _screenLast$[ebp+ecx], xmm0
	mov	edx, 4
	imul	eax, edx, 0
	xorps	xmm0, xmm0
	movss	DWORD PTR _screenLast$[ebp+eax], xmm0

; 945  : 	segments = segments * M_PI;

	cvtsi2ss xmm0, DWORD PTR _segments$[ebp]
	mulss	xmm0, DWORD PTR __real@40490fdb
	cvttss2si ecx, xmm0
	mov	DWORD PTR _segments$[ebp], ecx

; 946  : 	
; 947  : 	if( segments > NOISE_DIVISIONS * 8 )

	cmp	DWORD PTR _segments$[ebp], 512		; 00000200H
	jle	SHORT $LN6@R_DrawRing

; 948  : 		segments = NOISE_DIVISIONS * 8;

	mov	DWORD PTR _segments$[ebp], 512		; 00000200H
$LN6@R_DrawRing:

; 949  : 
; 950  : 	length = VectorLength( delta ) * 0.01f * M_PI;

	mov	edx, 4
	imul	eax, edx, 0
	mov	ecx, 4
	imul	edx, ecx, 0
	mov	ecx, DWORD PTR _delta$[ebp]
	mov	esi, DWORD PTR _delta$[ebp]
	movss	xmm0, DWORD PTR [ecx+eax]
	mulss	xmm0, DWORD PTR [esi+edx]
	mov	edx, 4
	shl	edx, 0
	mov	eax, 4
	shl	eax, 0
	mov	ecx, DWORD PTR _delta$[ebp]
	mov	esi, DWORD PTR _delta$[ebp]
	movss	xmm1, DWORD PTR [ecx+edx]
	mulss	xmm1, DWORD PTR [esi+eax]
	addss	xmm0, xmm1
	mov	edx, 4
	shl	edx, 1
	mov	eax, 4
	shl	eax, 1
	mov	ecx, DWORD PTR _delta$[ebp]
	mov	esi, DWORD PTR _delta$[ebp]
	movss	xmm1, DWORD PTR [ecx+edx]
	mulss	xmm1, DWORD PTR [esi+eax]
	addss	xmm0, xmm1
	cvtss2sd xmm0, xmm0
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	call	_sqrt
	add	esp, 8
	fstp	QWORD PTR tv738[ebp]
	movsd	xmm0, QWORD PTR tv738[ebp]
	mulsd	xmm0, QWORD PTR __real@3f847ae140000000
	mulsd	xmm0, QWORD PTR __real@400921fb60000000
	cvtsd2ss xmm0, xmm0
	movss	DWORD PTR _length$[ebp], xmm0

; 951  : 	if( length < 0.5f ) length = 0.5f;		// Don't lose all of the noise/texture on short beams

	movss	xmm0, DWORD PTR __real@3f000000
	comiss	xmm0, DWORD PTR _length$[ebp]
	jbe	SHORT $LN7@R_DrawRing
	movss	xmm0, DWORD PTR __real@3f000000
	movss	DWORD PTR _length$[ebp], xmm0
$LN7@R_DrawRing:

; 952  : 		
; 953  : 	div = 1.0f / ( segments - 1 );

	mov	edx, DWORD PTR _segments$[ebp]
	sub	edx, 1
	cvtsi2ss xmm0, edx
	movss	xmm1, DWORD PTR __real@3f800000
	divss	xmm1, xmm0
	movss	DWORD PTR _div$[ebp], xmm1

; 954  : 
; 955  : 	vStep = length * div / 8.0f;			// texture length texels per space pixel

	movss	xmm0, DWORD PTR _length$[ebp]
	mulss	xmm0, DWORD PTR _div$[ebp]
	divss	xmm0, DWORD PTR __real@41000000
	movss	DWORD PTR _vStep$[ebp], xmm0

; 956  : 
; 957  : 	// Scroll speed 3.5 -- initial texture position, scrolls 3.5/sec (1.0 is entire texture)
; 958  : 	vLast = fmod( freq * speed, 1.0f );

	sub	esp, 8
	movsd	xmm0, QWORD PTR __real@3ff0000000000000
	movsd	QWORD PTR [esp], xmm0
	movss	xmm0, DWORD PTR _freq$[ebp]
	mulss	xmm0, DWORD PTR _speed$[ebp]
	cvtss2sd xmm0, xmm0
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	call	_fmod
	add	esp, 16					; 00000010H
	fstp	DWORD PTR _vLast$[ebp]

; 959  : 	scale = amplitude * length / 8.0f;

	movss	xmm0, DWORD PTR _amplitude$[ebp]
	mulss	xmm0, DWORD PTR _length$[ebp]
	divss	xmm0, DWORD PTR __real@41000000
	movss	DWORD PTR _scale$[ebp], xmm0

; 960  : 
; 961  : 	// Iterator to resample noise waveform (it needs to be generated in powers of 2)
; 962  : 	noiseStep = (int)((float)( NOISE_DIVISIONS - 1 ) * div * 65536.0f ) * 8;

	movss	xmm0, DWORD PTR __real@427c0000
	mulss	xmm0, DWORD PTR _div$[ebp]
	mulss	xmm0, DWORD PTR __real@47800000
	cvttss2si eax, xmm0
	shl	eax, 3
	mov	DWORD PTR _noiseStep$[ebp], eax

; 963  : 	noiseIndex = 0;

	mov	DWORD PTR _noiseIndex$[ebp], 0

; 964  : 
; 965  : 	VectorScale( delta, 0.5f, delta );

	mov	ecx, 4
	imul	edx, ecx, 0
	mov	eax, DWORD PTR _delta$[ebp]
	movss	xmm0, DWORD PTR [eax+edx]
	mulss	xmm0, DWORD PTR __real@3f000000
	mov	ecx, 4
	imul	edx, ecx, 0
	mov	eax, DWORD PTR _delta$[ebp]
	movss	DWORD PTR [eax+edx], xmm0
	mov	ecx, 4
	shl	ecx, 0
	mov	edx, DWORD PTR _delta$[ebp]
	movss	xmm0, DWORD PTR [edx+ecx]
	mulss	xmm0, DWORD PTR __real@3f000000
	mov	eax, 4
	shl	eax, 0
	mov	ecx, DWORD PTR _delta$[ebp]
	movss	DWORD PTR [ecx+eax], xmm0
	mov	edx, 4
	shl	edx, 1
	mov	eax, DWORD PTR _delta$[ebp]
	movss	xmm0, DWORD PTR [eax+edx]
	mulss	xmm0, DWORD PTR __real@3f000000
	movss	DWORD PTR tv165[ebp], xmm0
	mov	ecx, 4
	shl	ecx, 1
	mov	edx, DWORD PTR _delta$[ebp]
	movss	xmm0, DWORD PTR tv165[ebp]
	movss	DWORD PTR [edx+ecx], xmm0

; 966  : 	VectorAdd( source, delta, center );

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, 4
	imul	eax, edx, 0
	mov	edx, DWORD PTR _source$[ebp]
	mov	esi, DWORD PTR _delta$[ebp]
	movss	xmm0, DWORD PTR [edx+ecx]
	addss	xmm0, DWORD PTR [esi+eax]
	mov	eax, 4
	imul	ecx, eax, 0
	movss	DWORD PTR _center$[ebp+ecx], xmm0
	mov	edx, 4
	shl	edx, 0
	mov	eax, 4
	shl	eax, 0
	mov	ecx, DWORD PTR _source$[ebp]
	mov	esi, DWORD PTR _delta$[ebp]
	movss	xmm0, DWORD PTR [ecx+edx]
	addss	xmm0, DWORD PTR [esi+eax]
	mov	edx, 4
	shl	edx, 0
	movss	DWORD PTR _center$[ebp+edx], xmm0
	mov	eax, 4
	shl	eax, 1
	mov	ecx, 4
	shl	ecx, 1
	mov	edx, DWORD PTR _source$[ebp]
	mov	esi, DWORD PTR _delta$[ebp]
	movss	xmm0, DWORD PTR [edx+eax]
	addss	xmm0, DWORD PTR [esi+ecx]
	movss	DWORD PTR tv186[ebp], xmm0
	mov	eax, 4
	shl	eax, 1
	movss	xmm0, DWORD PTR tv186[ebp]
	movss	DWORD PTR _center$[ebp+eax], xmm0

; 967  : 
; 968  : 	VectorCopy( delta, xaxis );

	mov	ecx, 4
	imul	edx, ecx, 0
	mov	eax, 4
	imul	ecx, eax, 0
	mov	eax, DWORD PTR _delta$[ebp]
	mov	edx, DWORD PTR [eax+edx]
	mov	DWORD PTR _xaxis$[ebp+ecx], edx
	mov	eax, 4
	shl	eax, 0
	mov	ecx, 4
	shl	ecx, 0
	mov	edx, DWORD PTR _delta$[ebp]
	mov	eax, DWORD PTR [edx+eax]
	mov	DWORD PTR _xaxis$[ebp+ecx], eax
	mov	ecx, 4
	shl	ecx, 1
	mov	edx, 4
	shl	edx, 1
	mov	eax, DWORD PTR _delta$[ebp]
	mov	ecx, DWORD PTR [eax+ecx]
	mov	DWORD PTR _xaxis$[ebp+edx], ecx

; 969  : 	radius = VectorLength( xaxis );

	mov	edx, 4
	imul	eax, edx, 0
	mov	ecx, 4
	imul	edx, ecx, 0
	movss	xmm0, DWORD PTR _xaxis$[ebp+eax]
	mulss	xmm0, DWORD PTR _xaxis$[ebp+edx]
	mov	eax, 4
	shl	eax, 0
	mov	ecx, 4
	shl	ecx, 0
	movss	xmm1, DWORD PTR _xaxis$[ebp+eax]
	mulss	xmm1, DWORD PTR _xaxis$[ebp+ecx]
	addss	xmm0, xmm1
	mov	edx, 4
	shl	edx, 1
	mov	eax, 4
	shl	eax, 1
	movss	xmm1, DWORD PTR _xaxis$[ebp+edx]
	mulss	xmm1, DWORD PTR _xaxis$[ebp+eax]
	addss	xmm0, xmm1
	cvtss2sd xmm0, xmm0
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	call	_sqrt
	add	esp, 8
	fstp	DWORD PTR _radius$[ebp]

; 970  : 	
; 971  : 	// cull beamring
; 972  : 	// --------------------------------
; 973  : 	// Compute box center +/- radius
; 974  : 	VectorSet( last1, radius, radius, scale );

	mov	ecx, 4
	imul	edx, ecx, 0
	movss	xmm0, DWORD PTR _radius$[ebp]
	movss	DWORD PTR _last1$[ebp+edx], xmm0
	mov	eax, 4
	shl	eax, 0
	movss	xmm0, DWORD PTR _radius$[ebp]
	movss	DWORD PTR _last1$[ebp+eax], xmm0
	mov	ecx, 4
	shl	ecx, 1
	movss	xmm0, DWORD PTR _scale$[ebp]
	movss	DWORD PTR _last1$[ebp+ecx], xmm0

; 975  : 	VectorAdd( center, last1, tmp );		// maxs

	mov	edx, 4
	imul	eax, edx, 0
	mov	ecx, 4
	imul	edx, ecx, 0
	movss	xmm0, DWORD PTR _center$[ebp+eax]
	addss	xmm0, DWORD PTR _last1$[ebp+edx]
	mov	eax, 4
	imul	ecx, eax, 0
	movss	DWORD PTR _tmp$[ebp+ecx], xmm0
	mov	edx, 4
	shl	edx, 0
	mov	eax, 4
	shl	eax, 0
	movss	xmm0, DWORD PTR _center$[ebp+edx]
	addss	xmm0, DWORD PTR _last1$[ebp+eax]
	mov	ecx, 4
	shl	ecx, 0
	movss	DWORD PTR _tmp$[ebp+ecx], xmm0
	mov	edx, 4
	shl	edx, 1
	mov	eax, 4
	shl	eax, 1
	movss	xmm0, DWORD PTR _center$[ebp+edx]
	addss	xmm0, DWORD PTR _last1$[ebp+eax]
	movss	DWORD PTR tv248[ebp], xmm0
	mov	ecx, 4
	shl	ecx, 1
	movss	xmm0, DWORD PTR tv248[ebp]
	movss	DWORD PTR _tmp$[ebp+ecx], xmm0

; 976  : 	VectorSubtract( center, last1, screen );	// mins

	mov	edx, 4
	imul	eax, edx, 0
	mov	ecx, 4
	imul	edx, ecx, 0
	movss	xmm0, DWORD PTR _center$[ebp+eax]
	subss	xmm0, DWORD PTR _last1$[ebp+edx]
	mov	eax, 4
	imul	ecx, eax, 0
	movss	DWORD PTR _screen$[ebp+ecx], xmm0
	mov	edx, 4
	shl	edx, 0
	mov	eax, 4
	shl	eax, 0
	movss	xmm0, DWORD PTR _center$[ebp+edx]
	subss	xmm0, DWORD PTR _last1$[ebp+eax]
	mov	ecx, 4
	shl	ecx, 0
	movss	DWORD PTR _screen$[ebp+ecx], xmm0
	mov	edx, 4
	shl	edx, 1
	mov	eax, 4
	shl	eax, 1
	movss	xmm0, DWORD PTR _center$[ebp+edx]
	subss	xmm0, DWORD PTR _last1$[ebp+eax]
	movss	DWORD PTR tv269[ebp], xmm0
	mov	ecx, 4
	shl	ecx, 1
	movss	xmm0, DWORD PTR tv269[ebp]
	movss	DWORD PTR _screen$[ebp+ecx], xmm0

; 977  : 
; 978  : 	if( !cl.worldmodel )

	cmp	DWORD PTR _cl+2686576, 0
	jne	SHORT $LN8@R_DrawRing

; 979  : 		return;

	jmp	$LN3@R_DrawRing
$LN8@R_DrawRing:

; 980  : 
; 981  : 	// is that box in PVS && frustum?
; 982  : 	if( !Mod_BoxVisible( screen, tmp, Mod_GetCurrentVis( )) || R_CullBox( screen, tmp ))

	call	_Mod_GetCurrentVis
	push	eax
	lea	edx, DWORD PTR _tmp$[ebp]
	push	edx
	lea	eax, DWORD PTR _screen$[ebp]
	push	eax
	call	_Mod_BoxVisible
	add	esp, 12					; 0000000cH
	test	eax, eax
	je	SHORT $LN10@R_DrawRing
	lea	ecx, DWORD PTR _tmp$[ebp]
	push	ecx
	lea	edx, DWORD PTR _screen$[ebp]
	push	edx
	call	_R_CullBox
	add	esp, 8
	test	eax, eax
	je	SHORT $LN9@R_DrawRing
$LN10@R_DrawRing:

; 983  : 	{
; 984  : 		return;

	jmp	$LN3@R_DrawRing
$LN9@R_DrawRing:

; 985  : 	}
; 986  : 
; 987  : 	VectorSet( yaxis, xaxis[1], -xaxis[0], 0.0f ); 

	mov	eax, 4
	shl	eax, 0
	movss	xmm0, DWORD PTR _xaxis$[ebp+eax]
	mov	ecx, 4
	imul	edx, ecx, 0
	movss	DWORD PTR _yaxis$[ebp+edx], xmm0
	mov	eax, 4
	imul	ecx, eax, 0
	movss	xmm0, DWORD PTR _xaxis$[ebp+ecx]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mov	edx, 4
	shl	edx, 0
	movss	DWORD PTR _yaxis$[ebp+edx], xmm0
	mov	eax, 4
	shl	eax, 1
	xorps	xmm0, xmm0
	movss	DWORD PTR _yaxis$[ebp+eax], xmm0

; 988  : 	VectorNormalize( yaxis );

	mov	ecx, 4
	imul	edx, ecx, 0
	mov	eax, 4
	imul	ecx, eax, 0
	movss	xmm0, DWORD PTR _yaxis$[ebp+edx]
	mulss	xmm0, DWORD PTR _yaxis$[ebp+ecx]
	mov	edx, 4
	shl	edx, 0
	mov	eax, 4
	shl	eax, 0
	movss	xmm1, DWORD PTR _yaxis$[ebp+edx]
	mulss	xmm1, DWORD PTR _yaxis$[ebp+eax]
	addss	xmm0, xmm1
	mov	ecx, 4
	shl	ecx, 1
	mov	edx, 4
	shl	edx, 1
	movss	xmm1, DWORD PTR _yaxis$[ebp+ecx]
	mulss	xmm1, DWORD PTR _yaxis$[ebp+edx]
	addss	xmm0, xmm1
	cvtss2sd xmm0, xmm0
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	call	_sqrt
	add	esp, 8
	fstp	DWORD PTR _ilength$2[ebp]
	movss	xmm0, DWORD PTR _ilength$2[ebp]
	ucomiss	xmm0, DWORD PTR __real@00000000
	lahf
	test	ah, 68					; 00000044H
	jnp	SHORT $LN11@R_DrawRing
	movss	xmm0, DWORD PTR __real@3f800000
	divss	xmm0, DWORD PTR _ilength$2[ebp]
	movss	DWORD PTR _ilength$2[ebp], xmm0
$LN11@R_DrawRing:
	mov	eax, 4
	imul	ecx, eax, 0
	movss	xmm0, DWORD PTR _yaxis$[ebp+ecx]
	mulss	xmm0, DWORD PTR _ilength$2[ebp]
	mov	edx, 4
	imul	eax, edx, 0
	movss	DWORD PTR _yaxis$[ebp+eax], xmm0
	mov	ecx, 4
	shl	ecx, 0
	movss	xmm0, DWORD PTR _yaxis$[ebp+ecx]
	mulss	xmm0, DWORD PTR _ilength$2[ebp]
	mov	edx, 4
	shl	edx, 0
	movss	DWORD PTR _yaxis$[ebp+edx], xmm0
	mov	eax, 4
	shl	eax, 1
	movss	xmm0, DWORD PTR _yaxis$[ebp+eax]
	mulss	xmm0, DWORD PTR _ilength$2[ebp]
	mov	ecx, 4
	shl	ecx, 1
	movss	DWORD PTR _yaxis$[ebp+ecx], xmm0

; 989  : 	VectorScale( yaxis, radius, yaxis );

	mov	edx, 4
	imul	eax, edx, 0
	movss	xmm0, DWORD PTR _yaxis$[ebp+eax]
	mulss	xmm0, DWORD PTR _radius$[ebp]
	mov	ecx, 4
	imul	edx, ecx, 0
	movss	DWORD PTR _yaxis$[ebp+edx], xmm0
	mov	eax, 4
	shl	eax, 0
	movss	xmm0, DWORD PTR _yaxis$[ebp+eax]
	mulss	xmm0, DWORD PTR _radius$[ebp]
	mov	ecx, 4
	shl	ecx, 0
	movss	DWORD PTR _yaxis$[ebp+ecx], xmm0
	mov	edx, 4
	shl	edx, 1
	movss	xmm0, DWORD PTR _yaxis$[ebp+edx]
	mulss	xmm0, DWORD PTR _radius$[ebp]
	movss	DWORD PTR tv347[ebp], xmm0
	mov	eax, 4
	shl	eax, 1
	movss	xmm0, DWORD PTR tv347[ebp]
	movss	DWORD PTR _yaxis$[ebp+eax], xmm0

; 990  : 
; 991  : 	j = segments / 8;

	mov	eax, DWORD PTR _segments$[ebp]
	cdq
	and	edx, 7
	add	eax, edx
	sar	eax, 3
	mov	DWORD PTR _j$[ebp], eax

; 992  : 
; 993  : 	for( i = 0; i < segments + 1; i++ )

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN4@R_DrawRing
$LN2@R_DrawRing:
	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
$LN4@R_DrawRing:
	mov	edx, DWORD PTR _segments$[ebp]
	add	edx, 1
	cmp	DWORD PTR _i$[ebp], edx
	jge	$LN3@R_DrawRing

; 994  : 	{
; 995  : 		fraction = i * div;

	cvtsi2ss xmm0, DWORD PTR _i$[ebp]
	mulss	xmm0, DWORD PTR _div$[ebp]
	movss	DWORD PTR _fraction$[ebp], xmm0

; 996  : 		SinCos( fraction * M_PI2, &x, &y );

	lea	eax, DWORD PTR _y$[ebp]
	push	eax
	lea	ecx, DWORD PTR _x$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR _fraction$[ebp]
	mulss	xmm0, DWORD PTR __real@40c90fdb
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	_SinCos
	add	esp, 12					; 0000000cH

; 997  : 
; 998  : 		VectorMAMAM( x, xaxis, y, yaxis, 1.0f, center, point ); 

	mov	edx, 4
	imul	eax, edx, 0
	movss	xmm0, DWORD PTR _x$[ebp]
	mulss	xmm0, DWORD PTR _xaxis$[ebp+eax]
	mov	ecx, 4
	imul	edx, ecx, 0
	movss	xmm1, DWORD PTR _y$[ebp]
	mulss	xmm1, DWORD PTR _yaxis$[ebp+edx]
	addss	xmm0, xmm1
	mov	eax, 4
	imul	ecx, eax, 0
	movss	xmm1, DWORD PTR __real@3f800000
	mulss	xmm1, DWORD PTR _center$[ebp+ecx]
	addss	xmm0, xmm1
	mov	edx, 4
	imul	eax, edx, 0
	movss	DWORD PTR _point$[ebp+eax], xmm0
	mov	ecx, 4
	shl	ecx, 0
	movss	xmm0, DWORD PTR _x$[ebp]
	mulss	xmm0, DWORD PTR _xaxis$[ebp+ecx]
	mov	edx, 4
	shl	edx, 0
	movss	xmm1, DWORD PTR _y$[ebp]
	mulss	xmm1, DWORD PTR _yaxis$[ebp+edx]
	addss	xmm0, xmm1
	mov	eax, 4
	shl	eax, 0
	movss	xmm1, DWORD PTR __real@3f800000
	mulss	xmm1, DWORD PTR _center$[ebp+eax]
	addss	xmm0, xmm1
	mov	ecx, 4
	shl	ecx, 0
	movss	DWORD PTR _point$[ebp+ecx], xmm0
	mov	edx, 4
	shl	edx, 1
	movss	xmm0, DWORD PTR _x$[ebp]
	mulss	xmm0, DWORD PTR _xaxis$[ebp+edx]
	mov	eax, 4
	shl	eax, 1
	movss	xmm1, DWORD PTR _y$[ebp]
	mulss	xmm1, DWORD PTR _yaxis$[ebp+eax]
	addss	xmm0, xmm1
	mov	ecx, 4
	shl	ecx, 1
	movss	xmm1, DWORD PTR __real@3f800000
	mulss	xmm1, DWORD PTR _center$[ebp+ecx]
	addss	xmm0, xmm1
	movss	DWORD PTR tv396[ebp], xmm0
	mov	edx, 4
	shl	edx, 1
	movss	xmm0, DWORD PTR tv396[ebp]
	movss	DWORD PTR _point$[ebp+edx], xmm0

; 999  : 
; 1000 : 		// distort using noise
; 1001 : 		factor = rgNoise[(noiseIndex >> 16) & (NOISE_DIVISIONS - 1)] * scale;

	mov	eax, DWORD PTR _noiseIndex$[ebp]
	sar	eax, 16					; 00000010H
	and	eax, 63					; 0000003fH
	movss	xmm0, DWORD PTR _rgNoise[eax*4]
	mulss	xmm0, DWORD PTR _scale$[ebp]
	movss	DWORD PTR _factor$[ebp], xmm0

; 1002 : 		VectorMA( point, factor, RI.vup, point );

	mov	ecx, 4
	imul	edx, ecx, 0
	mov	eax, 4
	imul	ecx, eax, 0
	movss	xmm0, DWORD PTR _factor$[ebp]
	mulss	xmm0, DWORD PTR _RI[ecx+248]
	addss	xmm0, DWORD PTR _point$[ebp+edx]
	mov	edx, 4
	imul	eax, edx, 0
	movss	DWORD PTR _point$[ebp+eax], xmm0
	mov	ecx, 4
	shl	ecx, 0
	mov	edx, 4
	shl	edx, 0
	movss	xmm0, DWORD PTR _factor$[ebp]
	mulss	xmm0, DWORD PTR _RI[edx+248]
	addss	xmm0, DWORD PTR _point$[ebp+ecx]
	mov	eax, 4
	shl	eax, 0
	movss	DWORD PTR _point$[ebp+eax], xmm0
	mov	ecx, 4
	shl	ecx, 1
	mov	edx, 4
	shl	edx, 1
	movss	xmm0, DWORD PTR _factor$[ebp]
	mulss	xmm0, DWORD PTR _RI[edx+248]
	movss	xmm1, DWORD PTR _point$[ebp+ecx]
	addss	xmm1, xmm0
	movss	DWORD PTR tv425[ebp], xmm1
	mov	eax, 4
	shl	eax, 1
	movss	xmm0, DWORD PTR tv425[ebp]
	movss	DWORD PTR _point$[ebp+eax], xmm0

; 1003 : 
; 1004 : 		// Rotate the noise along the perpendicluar axis a bit to keep the bolt from looking diagonal
; 1005 : 		factor = rgNoise[(noiseIndex >> 16) & (NOISE_DIVISIONS - 1)] * scale;

	mov	ecx, DWORD PTR _noiseIndex$[ebp]
	sar	ecx, 16					; 00000010H
	and	ecx, 63					; 0000003fH
	movss	xmm0, DWORD PTR _rgNoise[ecx*4]
	mulss	xmm0, DWORD PTR _scale$[ebp]
	movss	DWORD PTR _factor$[ebp], xmm0

; 1006 : 		factor *= cos( fraction * M_PI * 24 + freq );

	movss	xmm0, DWORD PTR _fraction$[ebp]
	mulss	xmm0, DWORD PTR __real@40490fdb
	mulss	xmm0, DWORD PTR __real@41c00000
	addss	xmm0, DWORD PTR _freq$[ebp]
	cvtss2sd xmm0, xmm0
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	call	_cos
	add	esp, 8
	fstp	QWORD PTR tv970[ebp]
	cvtss2sd xmm0, DWORD PTR _factor$[ebp]
	mulsd	xmm0, QWORD PTR tv970[ebp]
	cvtsd2ss xmm0, xmm0
	movss	DWORD PTR _factor$[ebp], xmm0

; 1007 : 		VectorMA( point, factor, RI.vright, point );

	mov	edx, 4
	imul	eax, edx, 0
	mov	ecx, 4
	imul	edx, ecx, 0
	movss	xmm0, DWORD PTR _factor$[ebp]
	mulss	xmm0, DWORD PTR _RI[edx+236]
	addss	xmm0, DWORD PTR _point$[ebp+eax]
	mov	eax, 4
	imul	ecx, eax, 0
	movss	DWORD PTR _point$[ebp+ecx], xmm0
	mov	edx, 4
	shl	edx, 0
	mov	eax, 4
	shl	eax, 0
	movss	xmm0, DWORD PTR _factor$[ebp]
	mulss	xmm0, DWORD PTR _RI[eax+236]
	addss	xmm0, DWORD PTR _point$[ebp+edx]
	mov	ecx, 4
	shl	ecx, 0
	movss	DWORD PTR _point$[ebp+ecx], xmm0
	mov	edx, 4
	shl	edx, 1
	mov	eax, 4
	shl	eax, 1
	movss	xmm0, DWORD PTR _factor$[ebp]
	mulss	xmm0, DWORD PTR _RI[eax+236]
	movss	xmm1, DWORD PTR _point$[ebp+edx]
	addss	xmm1, xmm0
	movss	DWORD PTR tv463[ebp], xmm1
	mov	ecx, 4
	shl	ecx, 1
	movss	xmm0, DWORD PTR tv463[ebp]
	movss	DWORD PTR _point$[ebp+ecx], xmm0

; 1008 : 		
; 1009 : 		// Transform point into screen space
; 1010 : 		TriWorldToScreen( point, screen );

	lea	edx, DWORD PTR _screen$[ebp]
	push	edx
	lea	eax, DWORD PTR _point$[ebp]
	push	eax
	call	_TriWorldToScreen
	add	esp, 8

; 1011 : 
; 1012 : 		if( i != 0 )

	cmp	DWORD PTR _i$[ebp], 0
	je	$LN12@R_DrawRing

; 1013 : 		{
; 1014 : 			// build world-space normal to screen-space direction vector
; 1015 : 			VectorSubtract( screen, screenLast, tmp );

	mov	ecx, 4
	imul	edx, ecx, 0
	mov	eax, 4
	imul	ecx, eax, 0
	movss	xmm0, DWORD PTR _screen$[ebp+edx]
	subss	xmm0, DWORD PTR _screenLast$[ebp+ecx]
	mov	edx, 4
	imul	eax, edx, 0
	movss	DWORD PTR _tmp$[ebp+eax], xmm0
	mov	ecx, 4
	shl	ecx, 0
	mov	edx, 4
	shl	edx, 0
	movss	xmm0, DWORD PTR _screen$[ebp+ecx]
	subss	xmm0, DWORD PTR _screenLast$[ebp+edx]
	mov	eax, 4
	shl	eax, 0
	movss	DWORD PTR _tmp$[ebp+eax], xmm0
	mov	ecx, 4
	shl	ecx, 1
	mov	edx, 4
	shl	edx, 1
	movss	xmm0, DWORD PTR _screen$[ebp+ecx]
	subss	xmm0, DWORD PTR _screenLast$[ebp+edx]
	movss	DWORD PTR tv487[ebp], xmm0
	mov	eax, 4
	shl	eax, 1
	movss	xmm0, DWORD PTR tv487[ebp]
	movss	DWORD PTR _tmp$[ebp+eax], xmm0

; 1016 : 
; 1017 : 			// we don't need Z, we're in screen space
; 1018 : 			tmp[2] = 0;

	mov	ecx, 4
	shl	ecx, 1
	xorps	xmm0, xmm0
	movss	DWORD PTR _tmp$[ebp+ecx], xmm0

; 1019 : 			VectorNormalize( tmp );

	mov	edx, 4
	imul	eax, edx, 0
	mov	ecx, 4
	imul	edx, ecx, 0
	movss	xmm0, DWORD PTR _tmp$[ebp+eax]
	mulss	xmm0, DWORD PTR _tmp$[ebp+edx]
	mov	eax, 4
	shl	eax, 0
	mov	ecx, 4
	shl	ecx, 0
	movss	xmm1, DWORD PTR _tmp$[ebp+eax]
	mulss	xmm1, DWORD PTR _tmp$[ebp+ecx]
	addss	xmm0, xmm1
	mov	edx, 4
	shl	edx, 1
	mov	eax, 4
	shl	eax, 1
	movss	xmm1, DWORD PTR _tmp$[ebp+edx]
	mulss	xmm1, DWORD PTR _tmp$[ebp+eax]
	addss	xmm0, xmm1
	cvtss2sd xmm0, xmm0
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	call	_sqrt
	add	esp, 8
	fstp	DWORD PTR _ilength$1[ebp]
	movss	xmm0, DWORD PTR _ilength$1[ebp]
	ucomiss	xmm0, DWORD PTR __real@00000000
	lahf
	test	ah, 68					; 00000044H
	jnp	SHORT $LN13@R_DrawRing
	movss	xmm0, DWORD PTR __real@3f800000
	divss	xmm0, DWORD PTR _ilength$1[ebp]
	movss	DWORD PTR _ilength$1[ebp], xmm0
$LN13@R_DrawRing:
	mov	ecx, 4
	imul	edx, ecx, 0
	movss	xmm0, DWORD PTR _tmp$[ebp+edx]
	mulss	xmm0, DWORD PTR _ilength$1[ebp]
	mov	eax, 4
	imul	ecx, eax, 0
	movss	DWORD PTR _tmp$[ebp+ecx], xmm0
	mov	edx, 4
	shl	edx, 0
	movss	xmm0, DWORD PTR _tmp$[ebp+edx]
	mulss	xmm0, DWORD PTR _ilength$1[ebp]
	mov	eax, 4
	shl	eax, 0
	movss	DWORD PTR _tmp$[ebp+eax], xmm0
	mov	ecx, 4
	shl	ecx, 1
	movss	xmm0, DWORD PTR _tmp$[ebp+ecx]
	mulss	xmm0, DWORD PTR _ilength$1[ebp]
	mov	edx, 4
	shl	edx, 1
	movss	DWORD PTR _tmp$[ebp+edx], xmm0

; 1020 : 
; 1021 : 			// Build point along normal line (normal is -y, x)
; 1022 : 			VectorScale( RI.vup, tmp[0], normal );

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, 4
	imul	eax, edx, 0
	movss	xmm0, DWORD PTR _tmp$[ebp+eax]
	mulss	xmm0, DWORD PTR _RI[ecx+248]
	mov	ecx, 4
	imul	edx, ecx, 0
	movss	DWORD PTR _normal$[ebp+edx], xmm0
	mov	eax, 4
	shl	eax, 0
	mov	ecx, 4
	imul	edx, ecx, 0
	movss	xmm0, DWORD PTR _tmp$[ebp+edx]
	mulss	xmm0, DWORD PTR _RI[eax+248]
	mov	eax, 4
	shl	eax, 0
	movss	DWORD PTR _normal$[ebp+eax], xmm0
	mov	ecx, 4
	shl	ecx, 1
	mov	edx, 4
	imul	eax, edx, 0
	movss	xmm0, DWORD PTR _RI[ecx+248]
	mulss	xmm0, DWORD PTR _tmp$[ebp+eax]
	movss	DWORD PTR tv584[ebp], xmm0
	mov	ecx, 4
	shl	ecx, 1
	movss	xmm0, DWORD PTR tv584[ebp]
	movss	DWORD PTR _normal$[ebp+ecx], xmm0

; 1023 : 			VectorMA( normal, tmp[1], RI.vright, normal );

	mov	edx, 4
	imul	eax, edx, 0
	mov	ecx, 4
	shl	ecx, 0
	movss	xmm0, DWORD PTR _tmp$[ebp+ecx]
	mov	edx, 4
	imul	ecx, edx, 0
	mulss	xmm0, DWORD PTR _RI[ecx+236]
	addss	xmm0, DWORD PTR _normal$[ebp+eax]
	mov	edx, 4
	imul	eax, edx, 0
	movss	DWORD PTR _normal$[ebp+eax], xmm0
	mov	ecx, 4
	shl	ecx, 0
	mov	edx, 4
	shl	edx, 0
	movss	xmm0, DWORD PTR _tmp$[ebp+edx]
	mov	eax, 4
	shl	eax, 0
	mulss	xmm0, DWORD PTR _RI[eax+236]
	addss	xmm0, DWORD PTR _normal$[ebp+ecx]
	mov	ecx, 4
	shl	ecx, 0
	movss	DWORD PTR _normal$[ebp+ecx], xmm0
	mov	edx, 4
	shl	edx, 1
	mov	eax, 4
	shl	eax, 0
	movss	xmm0, DWORD PTR _tmp$[ebp+eax]
	mov	ecx, 4
	shl	ecx, 1
	mulss	xmm0, DWORD PTR _RI[ecx+236]
	movss	xmm1, DWORD PTR _normal$[ebp+edx]
	addss	xmm1, xmm0
	movss	DWORD PTR tv617[ebp], xmm1
	mov	edx, 4
	shl	edx, 1
	movss	xmm0, DWORD PTR tv617[ebp]
	movss	DWORD PTR _normal$[ebp+edx], xmm0

; 1024 : 			
; 1025 : 			// Make a wide line
; 1026 : 			VectorMA( point, width, normal, last1 );

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, 4
	imul	eax, edx, 0
	movss	xmm0, DWORD PTR _width$[ebp]
	mulss	xmm0, DWORD PTR _normal$[ebp+eax]
	addss	xmm0, DWORD PTR _point$[ebp+ecx]
	mov	ecx, 4
	imul	edx, ecx, 0
	movss	DWORD PTR _last1$[ebp+edx], xmm0
	mov	eax, 4
	shl	eax, 0
	mov	ecx, 4
	shl	ecx, 0
	movss	xmm0, DWORD PTR _width$[ebp]
	mulss	xmm0, DWORD PTR _normal$[ebp+ecx]
	addss	xmm0, DWORD PTR _point$[ebp+eax]
	mov	edx, 4
	shl	edx, 0
	movss	DWORD PTR _last1$[ebp+edx], xmm0
	mov	eax, 4
	shl	eax, 1
	mov	ecx, 4
	shl	ecx, 1
	movss	xmm0, DWORD PTR _width$[ebp]
	mulss	xmm0, DWORD PTR _normal$[ebp+ecx]
	movss	xmm1, DWORD PTR _point$[ebp+eax]
	addss	xmm1, xmm0
	movss	DWORD PTR tv641[ebp], xmm1
	mov	edx, 4
	shl	edx, 1
	movss	xmm0, DWORD PTR tv641[ebp]
	movss	DWORD PTR _last1$[ebp+edx], xmm0

; 1027 : 			VectorMA( point, -width, normal, last2 );

	mov	eax, 4
	imul	ecx, eax, 0
	movss	xmm0, DWORD PTR _width$[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mov	edx, 4
	imul	eax, edx, 0
	mulss	xmm0, DWORD PTR _normal$[ebp+eax]
	addss	xmm0, DWORD PTR _point$[ebp+ecx]
	mov	ecx, 4
	imul	edx, ecx, 0
	movss	DWORD PTR _last2$[ebp+edx], xmm0
	mov	eax, 4
	shl	eax, 0
	movss	xmm0, DWORD PTR _width$[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mov	ecx, 4
	shl	ecx, 0
	mulss	xmm0, DWORD PTR _normal$[ebp+ecx]
	addss	xmm0, DWORD PTR _point$[ebp+eax]
	mov	edx, 4
	shl	edx, 0
	movss	DWORD PTR _last2$[ebp+edx], xmm0
	mov	eax, 4
	shl	eax, 1
	movss	xmm0, DWORD PTR _width$[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mov	ecx, 4
	shl	ecx, 1
	mulss	xmm0, DWORD PTR _normal$[ebp+ecx]
	movss	xmm1, DWORD PTR _point$[ebp+eax]
	addss	xmm1, xmm0
	movss	DWORD PTR tv671[ebp], xmm1
	mov	edx, 4
	shl	edx, 1
	movss	xmm0, DWORD PTR tv671[ebp]
	movss	DWORD PTR _last2$[ebp+edx], xmm0

; 1028 : 
; 1029 : 			vLast += vStep;	// Advance texture scroll (v axis only)

	movss	xmm0, DWORD PTR _vLast$[ebp]
	addss	xmm0, DWORD PTR _vStep$[ebp]
	movss	DWORD PTR _vLast$[ebp], xmm0

; 1030 : 			TriTexCoord2f( 1.0f, vLast );

	push	ecx
	movss	xmm0, DWORD PTR _vLast$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [esp], xmm0
	call	_TriTexCoord2f
	add	esp, 8

; 1031 : 			TriVertex3fv( last2 );

	lea	eax, DWORD PTR _last2$[ebp]
	push	eax
	call	_TriVertex3fv

; 1032 : 			TriTexCoord2f( 0.0f, vLast );

	movss	xmm0, DWORD PTR _vLast$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	xorps	xmm0, xmm0
	movss	DWORD PTR [esp], xmm0
	call	_TriTexCoord2f
	add	esp, 8

; 1033 : 			TriVertex3fv( last1 );

	lea	ecx, DWORD PTR _last1$[ebp]
	push	ecx
	call	_TriVertex3fv
	add	esp, 4
$LN12@R_DrawRing:

; 1034 : 		}
; 1035 : 
; 1036 : 		VectorCopy( screen, screenLast );

	mov	edx, 4
	imul	eax, edx, 0
	mov	ecx, 4
	imul	edx, ecx, 0
	mov	eax, DWORD PTR _screen$[ebp+eax]
	mov	DWORD PTR _screenLast$[ebp+edx], eax
	mov	ecx, 4
	shl	ecx, 0
	mov	edx, 4
	shl	edx, 0
	mov	eax, DWORD PTR _screen$[ebp+ecx]
	mov	DWORD PTR _screenLast$[ebp+edx], eax
	mov	ecx, 4
	shl	ecx, 1
	mov	edx, 4
	shl	edx, 1
	mov	eax, DWORD PTR _screen$[ebp+ecx]
	mov	DWORD PTR _screenLast$[ebp+edx], eax

; 1037 : 		noiseIndex += noiseStep;

	mov	ecx, DWORD PTR _noiseIndex$[ebp]
	add	ecx, DWORD PTR _noiseStep$[ebp]
	mov	DWORD PTR _noiseIndex$[ebp], ecx

; 1038 : 		j--;

	mov	edx, DWORD PTR _j$[ebp]
	sub	edx, 1
	mov	DWORD PTR _j$[ebp], edx

; 1039 : 
; 1040 : 		if( j == 0 && amplitude != 0 )

	jne	SHORT $LN14@R_DrawRing
	movss	xmm0, DWORD PTR _amplitude$[ebp]
	ucomiss	xmm0, DWORD PTR __real@00000000
	lahf
	test	ah, 68					; 00000044H
	jnp	SHORT $LN14@R_DrawRing

; 1041 : 		{
; 1042 : 			j = segments / 8;

	mov	eax, DWORD PTR _segments$[ebp]
	cdq
	and	edx, 7
	add	eax, edx
	sar	eax, 3
	mov	DWORD PTR _j$[ebp], eax

; 1043 : 			FracNoise( rgNoise, NOISE_DIVISIONS );

	push	64					; 00000040H
	push	OFFSET _rgNoise
	call	_FracNoise
	add	esp, 8
$LN14@R_DrawRing:

; 1044 : 		}
; 1045 : 	}

	jmp	$LN2@R_DrawRing
$LN3@R_DrawRing:

; 1046 : }

	pop	esi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_R_DrawRing ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xash_build4529_src\engine\client\gl_beams.c
_TEXT	SEGMENT
tv701 = -168						; size = 4
_vStep$ = -164						; size = 4
tv635 = -160						; size = 4
tv599 = -156						; size = 4
tv566 = -152						; size = 4
tv533 = -148						; size = 4
tv468 = -144						; size = 4
tv424 = -140						; size = 4
tv391 = -136						; size = 4
tv361 = -132						; size = 4
tv328 = -128						; size = 4
tv263 = -124						; size = 4
tv129 = -120						; size = 4
_vLast$ = -116						; size = 4
_fraction$ = -112					; size = 4
_ilength$1 = -108					; size = 4
_ilength$2 = -104					; size = 4
_div$ = -100						; size = 4
_pnew$ = -96						; size = 4
_particles$ = -92					; size = 4
_last2$ = -88						; size = 12
_last1$ = -76						; size = 12
_screenLast$ = -64					; size = 12
_screen$ = -52						; size = 12
_delta$ = -40						; size = 12
_normal$ = -28						; size = 12
_tmp$ = -16						; size = 12
__$ArrayPad$ = -4					; size = 4
_pbeam$ = 8						; size = 4
_frametime$ = 12					; size = 4
_R_DrawBeamFollow PROC

; 781  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 168				; 000000a8H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	esi

; 782  : 	particle_t	*pnew, *particles;
; 783  : 	float		fraction, div, vLast, vStep;
; 784  : 	vec3_t		last1, last2, tmp, screen;
; 785  : 	vec3_t		delta, screenLast, normal;
; 786  : 
; 787  : 	R_FreeDeadParticles( &pbeam->particles );

	mov	eax, DWORD PTR _pbeam$[ebp]
	add	eax, 120				; 00000078H
	push	eax
	call	_R_FreeDeadParticles
	add	esp, 4

; 788  : 
; 789  : 	particles = pbeam->particles;

	mov	ecx, DWORD PTR _pbeam$[ebp]
	mov	edx, DWORD PTR [ecx+120]
	mov	DWORD PTR _particles$[ebp], edx

; 790  : 	pnew = NULL;

	mov	DWORD PTR _pnew$[ebp], 0

; 791  : 
; 792  : 	div = 0;

	xorps	xmm0, xmm0
	movss	DWORD PTR _div$[ebp], xmm0

; 793  : 	if( FBitSet( pbeam->flags, FBEAM_STARTENTITY ))

	mov	eax, DWORD PTR _pbeam$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	and	ecx, 1
	je	$LN10@R_DrawBeam

; 794  : 	{
; 795  : 		if( particles )

	cmp	DWORD PTR _particles$[ebp], 0
	je	$LN7@R_DrawBeam

; 796  : 		{
; 797  : 			VectorSubtract( particles->org, pbeam->source, delta );

	mov	edx, 4
	imul	eax, edx, 0
	mov	ecx, 4
	imul	edx, ecx, 0
	mov	ecx, DWORD PTR _particles$[ebp]
	mov	esi, DWORD PTR _pbeam$[ebp]
	movss	xmm0, DWORD PTR [ecx+eax]
	subss	xmm0, DWORD PTR [esi+edx+12]
	mov	edx, 4
	imul	eax, edx, 0
	movss	DWORD PTR _delta$[ebp+eax], xmm0
	mov	ecx, 4
	shl	ecx, 0
	mov	edx, 4
	shl	edx, 0
	mov	eax, DWORD PTR _particles$[ebp]
	mov	esi, DWORD PTR _pbeam$[ebp]
	movss	xmm0, DWORD PTR [eax+ecx]
	subss	xmm0, DWORD PTR [esi+edx+12]
	mov	ecx, 4
	shl	ecx, 0
	movss	DWORD PTR _delta$[ebp+ecx], xmm0
	mov	edx, 4
	shl	edx, 1
	mov	eax, 4
	shl	eax, 1
	mov	ecx, DWORD PTR _particles$[ebp]
	mov	esi, DWORD PTR _pbeam$[ebp]
	movss	xmm0, DWORD PTR [ecx+edx]
	subss	xmm0, DWORD PTR [esi+eax+12]
	movss	DWORD PTR tv129[ebp], xmm0
	mov	edx, 4
	shl	edx, 1
	movss	xmm0, DWORD PTR tv129[ebp]
	movss	DWORD PTR _delta$[ebp+edx], xmm0

; 798  : 			div = VectorLength( delta );

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, 4
	imul	eax, edx, 0
	movss	xmm0, DWORD PTR _delta$[ebp+ecx]
	mulss	xmm0, DWORD PTR _delta$[ebp+eax]
	mov	ecx, 4
	shl	ecx, 0
	mov	edx, 4
	shl	edx, 0
	movss	xmm1, DWORD PTR _delta$[ebp+ecx]
	mulss	xmm1, DWORD PTR _delta$[ebp+edx]
	addss	xmm0, xmm1
	mov	eax, 4
	shl	eax, 1
	mov	ecx, 4
	shl	ecx, 1
	movss	xmm1, DWORD PTR _delta$[ebp+eax]
	mulss	xmm1, DWORD PTR _delta$[ebp+ecx]
	addss	xmm0, xmm1
	cvtss2sd xmm0, xmm0
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	call	_sqrt
	add	esp, 8
	fstp	DWORD PTR _div$[ebp]

; 799  : 
; 800  : 			if( div >= 32 && cl_free_particles )

	movss	xmm0, DWORD PTR _div$[ebp]
	comiss	xmm0, DWORD PTR __real@42000000
	jb	SHORT $LN9@R_DrawBeam
	cmp	DWORD PTR _cl_free_particles, 0
	je	SHORT $LN9@R_DrawBeam

; 801  : 			{
; 802  : 				pnew = cl_free_particles;

	mov	edx, DWORD PTR _cl_free_particles
	mov	DWORD PTR _pnew$[ebp], edx

; 803  : 				cl_free_particles = pnew->next;

	mov	eax, DWORD PTR _pnew$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR _cl_free_particles, ecx
$LN9@R_DrawBeam:

; 804  : 			}
; 805  : 		}

	jmp	SHORT $LN10@R_DrawBeam
$LN7@R_DrawBeam:

; 806  : 		else if( cl_free_particles )

	cmp	DWORD PTR _cl_free_particles, 0
	je	SHORT $LN10@R_DrawBeam

; 807  : 		{
; 808  : 			pnew = cl_free_particles;

	mov	edx, DWORD PTR _cl_free_particles
	mov	DWORD PTR _pnew$[ebp], edx

; 809  : 			cl_free_particles = pnew->next;

	mov	eax, DWORD PTR _pnew$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR _cl_free_particles, ecx

; 810  : 			div = 0;

	xorps	xmm0, xmm0
	movss	DWORD PTR _div$[ebp], xmm0
$LN10@R_DrawBeam:

; 811  : 		}
; 812  : 	}
; 813  : 
; 814  : 	if( pnew )

	cmp	DWORD PTR _pnew$[ebp], 0
	je	$LN11@R_DrawBeam

; 815  : 	{
; 816  : 		VectorCopy( pbeam->source, pnew->org );

	mov	edx, 4
	imul	eax, edx, 0
	mov	ecx, 4
	imul	edx, ecx, 0
	mov	ecx, DWORD PTR _pnew$[ebp]
	mov	esi, DWORD PTR _pbeam$[ebp]
	mov	eax, DWORD PTR [esi+eax+12]
	mov	DWORD PTR [ecx+edx], eax
	mov	ecx, 4
	shl	ecx, 0
	mov	edx, 4
	shl	edx, 0
	mov	eax, DWORD PTR _pnew$[ebp]
	mov	esi, DWORD PTR _pbeam$[ebp]
	mov	ecx, DWORD PTR [esi+ecx+12]
	mov	DWORD PTR [eax+edx], ecx
	mov	edx, 4
	shl	edx, 1
	mov	eax, 4
	shl	eax, 1
	mov	ecx, DWORD PTR _pnew$[ebp]
	mov	esi, DWORD PTR _pbeam$[ebp]
	mov	edx, DWORD PTR [esi+edx+12]
	mov	DWORD PTR [ecx+eax], edx

; 817  : 		pnew->die = cl.time + pbeam->amplitude;

	mov	eax, DWORD PTR _pbeam$[ebp]
	cvtss2sd xmm0, DWORD PTR [eax+64]
	addsd	xmm0, QWORD PTR _cl+1525848
	cvtsd2ss xmm0, xmm0
	mov	ecx, DWORD PTR _pnew$[ebp]
	movss	DWORD PTR [ecx+36], xmm0

; 818  : 		VectorClear( pnew->vel );

	mov	edx, 4
	shl	edx, 1
	mov	eax, DWORD PTR _pnew$[ebp]
	xorps	xmm0, xmm0
	movss	DWORD PTR [eax+edx+20], xmm0
	mov	ecx, 4
	shl	ecx, 0
	mov	edx, DWORD PTR _pnew$[ebp]
	xorps	xmm0, xmm0
	movss	DWORD PTR [edx+ecx+20], xmm0
	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _pnew$[ebp]
	xorps	xmm0, xmm0
	movss	DWORD PTR [edx+ecx+20], xmm0

; 819  : 
; 820  : 		pnew->next = particles;

	mov	eax, DWORD PTR _pnew$[ebp]
	mov	ecx, DWORD PTR _particles$[ebp]
	mov	DWORD PTR [eax+16], ecx

; 821  : 		pbeam->particles = pnew;

	mov	edx, DWORD PTR _pbeam$[ebp]
	mov	eax, DWORD PTR _pnew$[ebp]
	mov	DWORD PTR [edx+120], eax

; 822  : 		particles = pnew;

	mov	ecx, DWORD PTR _pnew$[ebp]
	mov	DWORD PTR _particles$[ebp], ecx
$LN11@R_DrawBeam:

; 823  : 	}
; 824  : 
; 825  : 	// nothing to draw
; 826  : 	if( !particles ) return;

	cmp	DWORD PTR _particles$[ebp], 0
	jne	SHORT $LN12@R_DrawBeam
	jmp	$LN5@R_DrawBeam
$LN12@R_DrawBeam:

; 827  : 
; 828  : 	if( !pnew && div != 0 )

	cmp	DWORD PTR _pnew$[ebp], 0
	jne	$LN13@R_DrawBeam
	movss	xmm0, DWORD PTR _div$[ebp]
	ucomiss	xmm0, DWORD PTR __real@00000000
	lahf
	test	ah, 68					; 00000044H
	jnp	SHORT $LN13@R_DrawBeam

; 829  : 	{
; 830  : 		VectorCopy( pbeam->source, delta );

	mov	edx, 4
	imul	eax, edx, 0
	mov	ecx, 4
	imul	edx, ecx, 0
	mov	ecx, DWORD PTR _pbeam$[ebp]
	mov	eax, DWORD PTR [ecx+eax+12]
	mov	DWORD PTR _delta$[ebp+edx], eax
	mov	ecx, 4
	shl	ecx, 0
	mov	edx, 4
	shl	edx, 0
	mov	eax, DWORD PTR _pbeam$[ebp]
	mov	ecx, DWORD PTR [eax+ecx+12]
	mov	DWORD PTR _delta$[ebp+edx], ecx
	mov	edx, 4
	shl	edx, 1
	mov	eax, 4
	shl	eax, 1
	mov	ecx, DWORD PTR _pbeam$[ebp]
	mov	edx, DWORD PTR [ecx+edx+12]
	mov	DWORD PTR _delta$[ebp+eax], edx

; 831  : 		TriWorldToScreen( pbeam->source, screenLast );

	lea	eax, DWORD PTR _screenLast$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pbeam$[ebp]
	add	ecx, 12					; 0000000cH
	push	ecx
	call	_TriWorldToScreen
	add	esp, 8

; 832  : 		TriWorldToScreen( particles->org, screen );

	lea	edx, DWORD PTR _screen$[ebp]
	push	edx
	mov	eax, DWORD PTR _particles$[ebp]
	push	eax
	call	_TriWorldToScreen
	add	esp, 8

; 833  : 	}

	jmp	$LN16@R_DrawBeam
$LN13@R_DrawBeam:

; 834  : 	else if( particles && particles->next )

	cmp	DWORD PTR _particles$[ebp], 0
	je	$LN15@R_DrawBeam
	mov	ecx, DWORD PTR _particles$[ebp]
	cmp	DWORD PTR [ecx+16], 0
	je	SHORT $LN15@R_DrawBeam

; 835  : 	{
; 836  : 		VectorCopy( particles->org, delta );

	mov	edx, 4
	imul	eax, edx, 0
	mov	ecx, 4
	imul	edx, ecx, 0
	mov	ecx, DWORD PTR _particles$[ebp]
	mov	eax, DWORD PTR [ecx+eax]
	mov	DWORD PTR _delta$[ebp+edx], eax
	mov	ecx, 4
	shl	ecx, 0
	mov	edx, 4
	shl	edx, 0
	mov	eax, DWORD PTR _particles$[ebp]
	mov	ecx, DWORD PTR [eax+ecx]
	mov	DWORD PTR _delta$[ebp+edx], ecx
	mov	edx, 4
	shl	edx, 1
	mov	eax, 4
	shl	eax, 1
	mov	ecx, DWORD PTR _particles$[ebp]
	mov	edx, DWORD PTR [ecx+edx]
	mov	DWORD PTR _delta$[ebp+eax], edx

; 837  : 		TriWorldToScreen( particles->org, screenLast );

	lea	eax, DWORD PTR _screenLast$[ebp]
	push	eax
	mov	ecx, DWORD PTR _particles$[ebp]
	push	ecx
	call	_TriWorldToScreen
	add	esp, 8

; 838  : 		TriWorldToScreen( particles->next->org, screen );

	lea	edx, DWORD PTR _screen$[ebp]
	push	edx
	mov	eax, DWORD PTR _particles$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	push	ecx
	call	_TriWorldToScreen
	add	esp, 8

; 839  : 		particles = particles->next;

	mov	edx, DWORD PTR _particles$[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	DWORD PTR _particles$[ebp], eax

; 840  : 	}

	jmp	SHORT $LN16@R_DrawBeam
$LN15@R_DrawBeam:

; 841  : 	else
; 842  : 	{
; 843  : 		return;

	jmp	$LN5@R_DrawBeam
$LN16@R_DrawBeam:

; 844  : 	}
; 845  : 
; 846  : 	// UNDONE: This won't work, screen and screenLast must be extrapolated here to fix the
; 847  : 	// first beam segment for this trail
; 848  : 
; 849  : 	// build world-space normal to screen-space direction vector
; 850  : 	VectorSubtract( screen, screenLast, tmp );

	mov	ecx, 4
	imul	edx, ecx, 0
	mov	eax, 4
	imul	ecx, eax, 0
	movss	xmm0, DWORD PTR _screen$[ebp+edx]
	subss	xmm0, DWORD PTR _screenLast$[ebp+ecx]
	mov	edx, 4
	imul	eax, edx, 0
	movss	DWORD PTR _tmp$[ebp+eax], xmm0
	mov	ecx, 4
	shl	ecx, 0
	mov	edx, 4
	shl	edx, 0
	movss	xmm0, DWORD PTR _screen$[ebp+ecx]
	subss	xmm0, DWORD PTR _screenLast$[ebp+edx]
	mov	eax, 4
	shl	eax, 0
	movss	DWORD PTR _tmp$[ebp+eax], xmm0
	mov	ecx, 4
	shl	ecx, 1
	mov	edx, 4
	shl	edx, 1
	movss	xmm0, DWORD PTR _screen$[ebp+ecx]
	subss	xmm0, DWORD PTR _screenLast$[ebp+edx]
	movss	DWORD PTR tv263[ebp], xmm0
	mov	eax, 4
	shl	eax, 1
	movss	xmm0, DWORD PTR tv263[ebp]
	movss	DWORD PTR _tmp$[ebp+eax], xmm0

; 851  : 	// we don't need Z, we're in screen space
; 852  : 	tmp[2] = 0;

	mov	ecx, 4
	shl	ecx, 1
	xorps	xmm0, xmm0
	movss	DWORD PTR _tmp$[ebp+ecx], xmm0

; 853  : 	VectorNormalize( tmp );

	mov	edx, 4
	imul	eax, edx, 0
	mov	ecx, 4
	imul	edx, ecx, 0
	movss	xmm0, DWORD PTR _tmp$[ebp+eax]
	mulss	xmm0, DWORD PTR _tmp$[ebp+edx]
	mov	eax, 4
	shl	eax, 0
	mov	ecx, 4
	shl	ecx, 0
	movss	xmm1, DWORD PTR _tmp$[ebp+eax]
	mulss	xmm1, DWORD PTR _tmp$[ebp+ecx]
	addss	xmm0, xmm1
	mov	edx, 4
	shl	edx, 1
	mov	eax, 4
	shl	eax, 1
	movss	xmm1, DWORD PTR _tmp$[ebp+edx]
	mulss	xmm1, DWORD PTR _tmp$[ebp+eax]
	addss	xmm0, xmm1
	cvtss2sd xmm0, xmm0
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	call	_sqrt
	add	esp, 8
	fstp	DWORD PTR _ilength$2[ebp]
	movss	xmm0, DWORD PTR _ilength$2[ebp]
	ucomiss	xmm0, DWORD PTR __real@00000000
	lahf
	test	ah, 68					; 00000044H
	jnp	SHORT $LN17@R_DrawBeam
	movss	xmm0, DWORD PTR __real@3f800000
	divss	xmm0, DWORD PTR _ilength$2[ebp]
	movss	DWORD PTR _ilength$2[ebp], xmm0
$LN17@R_DrawBeam:
	mov	ecx, 4
	imul	edx, ecx, 0
	movss	xmm0, DWORD PTR _tmp$[ebp+edx]
	mulss	xmm0, DWORD PTR _ilength$2[ebp]
	mov	eax, 4
	imul	ecx, eax, 0
	movss	DWORD PTR _tmp$[ebp+ecx], xmm0
	mov	edx, 4
	shl	edx, 0
	movss	xmm0, DWORD PTR _tmp$[ebp+edx]
	mulss	xmm0, DWORD PTR _ilength$2[ebp]
	mov	eax, 4
	shl	eax, 0
	movss	DWORD PTR _tmp$[ebp+eax], xmm0
	mov	ecx, 4
	shl	ecx, 1
	movss	xmm0, DWORD PTR _tmp$[ebp+ecx]
	mulss	xmm0, DWORD PTR _ilength$2[ebp]
	mov	edx, 4
	shl	edx, 1
	movss	DWORD PTR _tmp$[ebp+edx], xmm0

; 854  : 
; 855  : 	// Build point along noraml line (normal is -y, x)
; 856  : 	VectorScale( RI.vup, tmp[0], normal );	// Build point along normal line (normal is -y, x)

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, 4
	imul	eax, edx, 0
	movss	xmm0, DWORD PTR _tmp$[ebp+eax]
	mulss	xmm0, DWORD PTR _RI[ecx+248]
	mov	ecx, 4
	imul	edx, ecx, 0
	movss	DWORD PTR _normal$[ebp+edx], xmm0
	mov	eax, 4
	shl	eax, 0
	mov	ecx, 4
	imul	edx, ecx, 0
	movss	xmm0, DWORD PTR _tmp$[ebp+edx]
	mulss	xmm0, DWORD PTR _RI[eax+248]
	mov	eax, 4
	shl	eax, 0
	movss	DWORD PTR _normal$[ebp+eax], xmm0
	mov	ecx, 4
	shl	ecx, 1
	mov	edx, 4
	imul	eax, edx, 0
	movss	xmm0, DWORD PTR _RI[ecx+248]
	mulss	xmm0, DWORD PTR _tmp$[ebp+eax]
	movss	DWORD PTR tv328[ebp], xmm0
	mov	ecx, 4
	shl	ecx, 1
	movss	xmm0, DWORD PTR tv328[ebp]
	movss	DWORD PTR _normal$[ebp+ecx], xmm0

; 857  : 	VectorMA( normal, tmp[1], RI.vright, normal );

	mov	edx, 4
	imul	eax, edx, 0
	mov	ecx, 4
	shl	ecx, 0
	movss	xmm0, DWORD PTR _tmp$[ebp+ecx]
	mov	edx, 4
	imul	ecx, edx, 0
	mulss	xmm0, DWORD PTR _RI[ecx+236]
	addss	xmm0, DWORD PTR _normal$[ebp+eax]
	mov	edx, 4
	imul	eax, edx, 0
	movss	DWORD PTR _normal$[ebp+eax], xmm0
	mov	ecx, 4
	shl	ecx, 0
	mov	edx, 4
	shl	edx, 0
	movss	xmm0, DWORD PTR _tmp$[ebp+edx]
	mov	eax, 4
	shl	eax, 0
	mulss	xmm0, DWORD PTR _RI[eax+236]
	addss	xmm0, DWORD PTR _normal$[ebp+ecx]
	mov	ecx, 4
	shl	ecx, 0
	movss	DWORD PTR _normal$[ebp+ecx], xmm0
	mov	edx, 4
	shl	edx, 1
	mov	eax, 4
	shl	eax, 0
	movss	xmm0, DWORD PTR _tmp$[ebp+eax]
	mov	ecx, 4
	shl	ecx, 1
	mulss	xmm0, DWORD PTR _RI[ecx+236]
	movss	xmm1, DWORD PTR _normal$[ebp+edx]
	addss	xmm1, xmm0
	movss	DWORD PTR tv361[ebp], xmm1
	mov	edx, 4
	shl	edx, 1
	movss	xmm0, DWORD PTR tv361[ebp]
	movss	DWORD PTR _normal$[ebp+edx], xmm0

; 858  : 	
; 859  : 	// Make a wide line
; 860  : 	VectorMA( delta, pbeam->width, normal, last1 );

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _pbeam$[ebp]
	movss	xmm0, DWORD PTR [edx+60]
	mov	eax, 4
	imul	edx, eax, 0
	mulss	xmm0, DWORD PTR _normal$[ebp+edx]
	addss	xmm0, DWORD PTR _delta$[ebp+ecx]
	mov	eax, 4
	imul	ecx, eax, 0
	movss	DWORD PTR _last1$[ebp+ecx], xmm0
	mov	edx, 4
	shl	edx, 0
	mov	eax, DWORD PTR _pbeam$[ebp]
	movss	xmm0, DWORD PTR [eax+60]
	mov	ecx, 4
	shl	ecx, 0
	mulss	xmm0, DWORD PTR _normal$[ebp+ecx]
	addss	xmm0, DWORD PTR _delta$[ebp+edx]
	mov	edx, 4
	shl	edx, 0
	movss	DWORD PTR _last1$[ebp+edx], xmm0
	mov	eax, 4
	shl	eax, 1
	mov	ecx, DWORD PTR _pbeam$[ebp]
	movss	xmm0, DWORD PTR [ecx+60]
	mov	edx, 4
	shl	edx, 1
	mulss	xmm0, DWORD PTR _normal$[ebp+edx]
	movss	xmm1, DWORD PTR _delta$[ebp+eax]
	addss	xmm1, xmm0
	movss	DWORD PTR tv391[ebp], xmm1
	mov	eax, 4
	shl	eax, 1
	movss	xmm0, DWORD PTR tv391[ebp]
	movss	DWORD PTR _last1$[ebp+eax], xmm0

; 861  : 	VectorMA( delta, -pbeam->width, normal, last2 );

	mov	ecx, 4
	imul	edx, ecx, 0
	mov	eax, DWORD PTR _pbeam$[ebp]
	movss	xmm0, DWORD PTR [eax+60]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mov	ecx, 4
	imul	eax, ecx, 0
	mulss	xmm0, DWORD PTR _normal$[ebp+eax]
	addss	xmm0, DWORD PTR _delta$[ebp+edx]
	mov	ecx, 4
	imul	edx, ecx, 0
	movss	DWORD PTR _last2$[ebp+edx], xmm0
	mov	eax, 4
	shl	eax, 0
	mov	ecx, DWORD PTR _pbeam$[ebp]
	movss	xmm0, DWORD PTR [ecx+60]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mov	edx, 4
	shl	edx, 0
	mulss	xmm0, DWORD PTR _normal$[ebp+edx]
	addss	xmm0, DWORD PTR _delta$[ebp+eax]
	mov	eax, 4
	shl	eax, 0
	movss	DWORD PTR _last2$[ebp+eax], xmm0
	mov	ecx, 4
	shl	ecx, 1
	mov	edx, DWORD PTR _pbeam$[ebp]
	movss	xmm0, DWORD PTR [edx+60]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mov	eax, 4
	shl	eax, 1
	mulss	xmm0, DWORD PTR _normal$[ebp+eax]
	movss	xmm1, DWORD PTR _delta$[ebp+ecx]
	addss	xmm1, xmm0
	movss	DWORD PTR tv424[ebp], xmm1
	mov	ecx, 4
	shl	ecx, 1
	movss	xmm0, DWORD PTR tv424[ebp]
	movss	DWORD PTR _last2$[ebp+ecx], xmm0

; 862  : 
; 863  : 	div = 1.0 / pbeam->amplitude;

	mov	edx, DWORD PTR _pbeam$[ebp]
	cvtss2sd xmm0, DWORD PTR [edx+64]
	movsd	xmm1, QWORD PTR __real@3ff0000000000000
	divsd	xmm1, xmm0
	cvtsd2ss xmm0, xmm1
	movss	DWORD PTR _div$[ebp], xmm0

; 864  : 	fraction = ( pbeam->die - cl.time ) * div;

	mov	eax, DWORD PTR _pbeam$[ebp]
	cvtss2sd xmm0, DWORD PTR [eax+56]
	subsd	xmm0, QWORD PTR _cl+1525848
	cvtss2sd xmm1, DWORD PTR _div$[ebp]
	mulsd	xmm0, xmm1
	cvtsd2ss xmm0, xmm0
	movss	DWORD PTR _fraction$[ebp], xmm0

; 865  : 
; 866  : 	vLast = 0.0;

	xorps	xmm0, xmm0
	movss	DWORD PTR _vLast$[ebp], xmm0

; 867  : 	vStep = 1.0;

	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR _vStep$[ebp], xmm0
$LN2@R_DrawBeam:

; 868  : 
; 869  : 	while( particles )

	cmp	DWORD PTR _particles$[ebp], 0
	je	$LN3@R_DrawBeam

; 870  : 	{
; 871  : 		TriBrightness( fraction );

	push	ecx
	movss	xmm0, DWORD PTR _fraction$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	_TriBrightness

; 872  : 		TriTexCoord2f( 1, 1 );

	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [esp], xmm0
	call	_TriTexCoord2f
	add	esp, 8

; 873  : 		TriVertex3fv( last2 );

	lea	ecx, DWORD PTR _last2$[ebp]
	push	ecx
	call	_TriVertex3fv

; 874  : 		TriBrightness( fraction );

	movss	xmm0, DWORD PTR _fraction$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	_TriBrightness

; 875  : 		TriTexCoord2f( 0, 1 );

	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	xorps	xmm0, xmm0
	movss	DWORD PTR [esp], xmm0
	call	_TriTexCoord2f
	add	esp, 8

; 876  : 		TriVertex3fv( last1 );

	lea	edx, DWORD PTR _last1$[ebp]
	push	edx
	call	_TriVertex3fv
	add	esp, 4

; 877  : 
; 878  : 		// Transform point into screen space
; 879  : 		TriWorldToScreen( particles->org, screen );

	lea	eax, DWORD PTR _screen$[ebp]
	push	eax
	mov	ecx, DWORD PTR _particles$[ebp]
	push	ecx
	call	_TriWorldToScreen
	add	esp, 8

; 880  : 		// Build world-space normal to screen-space direction vector
; 881  : 		VectorSubtract( screen, screenLast, tmp );

	mov	edx, 4
	imul	eax, edx, 0
	mov	ecx, 4
	imul	edx, ecx, 0
	movss	xmm0, DWORD PTR _screen$[ebp+eax]
	subss	xmm0, DWORD PTR _screenLast$[ebp+edx]
	mov	eax, 4
	imul	ecx, eax, 0
	movss	DWORD PTR _tmp$[ebp+ecx], xmm0
	mov	edx, 4
	shl	edx, 0
	mov	eax, 4
	shl	eax, 0
	movss	xmm0, DWORD PTR _screen$[ebp+edx]
	subss	xmm0, DWORD PTR _screenLast$[ebp+eax]
	mov	ecx, 4
	shl	ecx, 0
	movss	DWORD PTR _tmp$[ebp+ecx], xmm0
	mov	edx, 4
	shl	edx, 1
	mov	eax, 4
	shl	eax, 1
	movss	xmm0, DWORD PTR _screen$[ebp+edx]
	subss	xmm0, DWORD PTR _screenLast$[ebp+eax]
	movss	DWORD PTR tv468[ebp], xmm0
	mov	ecx, 4
	shl	ecx, 1
	movss	xmm0, DWORD PTR tv468[ebp]
	movss	DWORD PTR _tmp$[ebp+ecx], xmm0

; 882  : 
; 883  : 		// we don't need Z, we're in screen space
; 884  : 		tmp[2] = 0;

	mov	edx, 4
	shl	edx, 1
	xorps	xmm0, xmm0
	movss	DWORD PTR _tmp$[ebp+edx], xmm0

; 885  : 		VectorNormalize( tmp );

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, 4
	imul	eax, edx, 0
	movss	xmm0, DWORD PTR _tmp$[ebp+ecx]
	mulss	xmm0, DWORD PTR _tmp$[ebp+eax]
	mov	ecx, 4
	shl	ecx, 0
	mov	edx, 4
	shl	edx, 0
	movss	xmm1, DWORD PTR _tmp$[ebp+ecx]
	mulss	xmm1, DWORD PTR _tmp$[ebp+edx]
	addss	xmm0, xmm1
	mov	eax, 4
	shl	eax, 1
	mov	ecx, 4
	shl	ecx, 1
	movss	xmm1, DWORD PTR _tmp$[ebp+eax]
	mulss	xmm1, DWORD PTR _tmp$[ebp+ecx]
	addss	xmm0, xmm1
	cvtss2sd xmm0, xmm0
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	call	_sqrt
	add	esp, 8
	fstp	DWORD PTR _ilength$1[ebp]
	movss	xmm0, DWORD PTR _ilength$1[ebp]
	ucomiss	xmm0, DWORD PTR __real@00000000
	lahf
	test	ah, 68					; 00000044H
	jnp	SHORT $LN18@R_DrawBeam
	movss	xmm0, DWORD PTR __real@3f800000
	divss	xmm0, DWORD PTR _ilength$1[ebp]
	movss	DWORD PTR _ilength$1[ebp], xmm0
$LN18@R_DrawBeam:
	mov	edx, 4
	imul	eax, edx, 0
	movss	xmm0, DWORD PTR _tmp$[ebp+eax]
	mulss	xmm0, DWORD PTR _ilength$1[ebp]
	mov	ecx, 4
	imul	edx, ecx, 0
	movss	DWORD PTR _tmp$[ebp+edx], xmm0
	mov	eax, 4
	shl	eax, 0
	movss	xmm0, DWORD PTR _tmp$[ebp+eax]
	mulss	xmm0, DWORD PTR _ilength$1[ebp]
	mov	ecx, 4
	shl	ecx, 0
	movss	DWORD PTR _tmp$[ebp+ecx], xmm0
	mov	edx, 4
	shl	edx, 1
	movss	xmm0, DWORD PTR _tmp$[ebp+edx]
	mulss	xmm0, DWORD PTR _ilength$1[ebp]
	mov	eax, 4
	shl	eax, 1
	movss	DWORD PTR _tmp$[ebp+eax], xmm0

; 886  : 		VectorScale( RI.vup, tmp[0], normal );	// Build point along noraml line (normal is -y, x)

	mov	ecx, 4
	imul	edx, ecx, 0
	mov	eax, 4
	imul	ecx, eax, 0
	movss	xmm0, DWORD PTR _tmp$[ebp+ecx]
	mulss	xmm0, DWORD PTR _RI[edx+248]
	mov	edx, 4
	imul	eax, edx, 0
	movss	DWORD PTR _normal$[ebp+eax], xmm0
	mov	ecx, 4
	shl	ecx, 0
	mov	edx, 4
	imul	eax, edx, 0
	movss	xmm0, DWORD PTR _tmp$[ebp+eax]
	mulss	xmm0, DWORD PTR _RI[ecx+248]
	mov	ecx, 4
	shl	ecx, 0
	movss	DWORD PTR _normal$[ebp+ecx], xmm0
	mov	edx, 4
	shl	edx, 1
	mov	eax, 4
	imul	ecx, eax, 0
	movss	xmm0, DWORD PTR _RI[edx+248]
	mulss	xmm0, DWORD PTR _tmp$[ebp+ecx]
	movss	DWORD PTR tv533[ebp], xmm0
	mov	edx, 4
	shl	edx, 1
	movss	xmm0, DWORD PTR tv533[ebp]
	movss	DWORD PTR _normal$[ebp+edx], xmm0

; 887  : 		VectorMA( normal, tmp[1], RI.vright, normal );

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, 4
	shl	edx, 0
	movss	xmm0, DWORD PTR _tmp$[ebp+edx]
	mov	eax, 4
	imul	edx, eax, 0
	mulss	xmm0, DWORD PTR _RI[edx+236]
	addss	xmm0, DWORD PTR _normal$[ebp+ecx]
	mov	eax, 4
	imul	ecx, eax, 0
	movss	DWORD PTR _normal$[ebp+ecx], xmm0
	mov	edx, 4
	shl	edx, 0
	mov	eax, 4
	shl	eax, 0
	movss	xmm0, DWORD PTR _tmp$[ebp+eax]
	mov	ecx, 4
	shl	ecx, 0
	mulss	xmm0, DWORD PTR _RI[ecx+236]
	addss	xmm0, DWORD PTR _normal$[ebp+edx]
	mov	edx, 4
	shl	edx, 0
	movss	DWORD PTR _normal$[ebp+edx], xmm0
	mov	eax, 4
	shl	eax, 1
	mov	ecx, 4
	shl	ecx, 0
	movss	xmm0, DWORD PTR _tmp$[ebp+ecx]
	mov	edx, 4
	shl	edx, 1
	mulss	xmm0, DWORD PTR _RI[edx+236]
	movss	xmm1, DWORD PTR _normal$[ebp+eax]
	addss	xmm1, xmm0
	movss	DWORD PTR tv566[ebp], xmm1
	mov	eax, 4
	shl	eax, 1
	movss	xmm0, DWORD PTR tv566[ebp]
	movss	DWORD PTR _normal$[ebp+eax], xmm0

; 888  : 
; 889  : 		// Make a wide line
; 890  : 		VectorMA( particles->org, pbeam->width, normal, last1 );

	mov	ecx, 4
	imul	edx, ecx, 0
	mov	eax, DWORD PTR _pbeam$[ebp]
	movss	xmm0, DWORD PTR [eax+60]
	mov	ecx, 4
	imul	eax, ecx, 0
	mulss	xmm0, DWORD PTR _normal$[ebp+eax]
	mov	ecx, DWORD PTR _particles$[ebp]
	addss	xmm0, DWORD PTR [ecx+edx]
	mov	edx, 4
	imul	eax, edx, 0
	movss	DWORD PTR _last1$[ebp+eax], xmm0
	mov	ecx, 4
	shl	ecx, 0
	mov	edx, DWORD PTR _pbeam$[ebp]
	movss	xmm0, DWORD PTR [edx+60]
	mov	eax, 4
	shl	eax, 0
	mulss	xmm0, DWORD PTR _normal$[ebp+eax]
	mov	edx, DWORD PTR _particles$[ebp]
	addss	xmm0, DWORD PTR [edx+ecx]
	mov	eax, 4
	shl	eax, 0
	movss	DWORD PTR _last1$[ebp+eax], xmm0
	mov	ecx, 4
	shl	ecx, 1
	mov	edx, DWORD PTR _pbeam$[ebp]
	movss	xmm0, DWORD PTR [edx+60]
	mov	eax, 4
	shl	eax, 1
	mulss	xmm0, DWORD PTR _normal$[ebp+eax]
	mov	edx, DWORD PTR _particles$[ebp]
	movss	xmm1, DWORD PTR [edx+ecx]
	addss	xmm1, xmm0
	movss	DWORD PTR tv599[ebp], xmm1
	mov	eax, 4
	shl	eax, 1
	movss	xmm0, DWORD PTR tv599[ebp]
	movss	DWORD PTR _last1$[ebp+eax], xmm0

; 891  : 		VectorMA( particles->org, -pbeam->width, normal, last2 );

	mov	ecx, 4
	imul	edx, ecx, 0
	mov	eax, DWORD PTR _pbeam$[ebp]
	movss	xmm0, DWORD PTR [eax+60]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mov	ecx, 4
	imul	eax, ecx, 0
	mulss	xmm0, DWORD PTR _normal$[ebp+eax]
	mov	ecx, DWORD PTR _particles$[ebp]
	addss	xmm0, DWORD PTR [ecx+edx]
	mov	edx, 4
	imul	eax, edx, 0
	movss	DWORD PTR _last2$[ebp+eax], xmm0
	mov	ecx, 4
	shl	ecx, 0
	mov	edx, DWORD PTR _pbeam$[ebp]
	movss	xmm0, DWORD PTR [edx+60]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mov	eax, 4
	shl	eax, 0
	mulss	xmm0, DWORD PTR _normal$[ebp+eax]
	mov	edx, DWORD PTR _particles$[ebp]
	addss	xmm0, DWORD PTR [edx+ecx]
	mov	eax, 4
	shl	eax, 0
	movss	DWORD PTR _last2$[ebp+eax], xmm0
	mov	ecx, 4
	shl	ecx, 1
	mov	edx, DWORD PTR _pbeam$[ebp]
	movss	xmm0, DWORD PTR [edx+60]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mov	eax, 4
	shl	eax, 1
	mulss	xmm0, DWORD PTR _normal$[ebp+eax]
	mov	edx, DWORD PTR _particles$[ebp]
	movss	xmm1, DWORD PTR [edx+ecx]
	addss	xmm1, xmm0
	movss	DWORD PTR tv635[ebp], xmm1
	mov	eax, 4
	shl	eax, 1
	movss	xmm0, DWORD PTR tv635[ebp]
	movss	DWORD PTR _last2$[ebp+eax], xmm0

; 892  : 		
; 893  : 		vLast += vStep;	// Advance texture scroll (v axis only)

	movss	xmm0, DWORD PTR _vLast$[ebp]
	addss	xmm0, DWORD PTR _vStep$[ebp]
	movss	DWORD PTR _vLast$[ebp], xmm0

; 894  : 
; 895  : 		if( particles->next != NULL )

	mov	ecx, DWORD PTR _particles$[ebp]
	cmp	DWORD PTR [ecx+16], 0
	je	SHORT $LN19@R_DrawBeam

; 896  : 		{
; 897  : 			fraction = (particles->die - cl.time) * div;

	mov	edx, DWORD PTR _particles$[ebp]
	cvtss2sd xmm0, DWORD PTR [edx+36]
	subsd	xmm0, QWORD PTR _cl+1525848
	cvtss2sd xmm1, DWORD PTR _div$[ebp]
	mulsd	xmm0, xmm1
	cvtsd2ss xmm0, xmm0
	movss	DWORD PTR _fraction$[ebp], xmm0

; 898  : 		}

	jmp	SHORT $LN20@R_DrawBeam
$LN19@R_DrawBeam:

; 899  : 		else
; 900  : 		{
; 901  : 			fraction = 0.0;

	xorps	xmm0, xmm0
	movss	DWORD PTR _fraction$[ebp], xmm0
$LN20@R_DrawBeam:

; 902  : 		}
; 903  : 
; 904  : 		TriBrightness( fraction );

	push	ecx
	movss	xmm0, DWORD PTR _fraction$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	_TriBrightness

; 905  : 		TriTexCoord2f( 0, 0 );

	xorps	xmm0, xmm0
	movss	DWORD PTR [esp], xmm0
	push	ecx
	xorps	xmm0, xmm0
	movss	DWORD PTR [esp], xmm0
	call	_TriTexCoord2f
	add	esp, 8

; 906  : 		TriVertex3fv( last1 );

	lea	eax, DWORD PTR _last1$[ebp]
	push	eax
	call	_TriVertex3fv

; 907  : 		TriBrightness( fraction );

	movss	xmm0, DWORD PTR _fraction$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	_TriBrightness

; 908  : 		TriTexCoord2f( 1, 0 );

	xorps	xmm0, xmm0
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [esp], xmm0
	call	_TriTexCoord2f
	add	esp, 8

; 909  : 		TriVertex3fv( last2 );

	lea	ecx, DWORD PTR _last2$[ebp]
	push	ecx
	call	_TriVertex3fv
	add	esp, 4

; 910  : 
; 911  : 		VectorCopy( screen, screenLast );

	mov	edx, 4
	imul	eax, edx, 0
	mov	ecx, 4
	imul	edx, ecx, 0
	mov	eax, DWORD PTR _screen$[ebp+eax]
	mov	DWORD PTR _screenLast$[ebp+edx], eax
	mov	ecx, 4
	shl	ecx, 0
	mov	edx, 4
	shl	edx, 0
	mov	eax, DWORD PTR _screen$[ebp+ecx]
	mov	DWORD PTR _screenLast$[ebp+edx], eax
	mov	ecx, 4
	shl	ecx, 1
	mov	edx, 4
	shl	edx, 1
	mov	eax, DWORD PTR _screen$[ebp+ecx]
	mov	DWORD PTR _screenLast$[ebp+edx], eax

; 912  : 
; 913  : 		particles = particles->next;

	mov	ecx, DWORD PTR _particles$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	DWORD PTR _particles$[ebp], edx

; 914  : 	}

	jmp	$LN2@R_DrawBeam
$LN3@R_DrawBeam:

; 915  : 
; 916  : 	// drift popcorn trail if there is a velocity
; 917  : 	particles = pbeam->particles;

	mov	eax, DWORD PTR _pbeam$[ebp]
	mov	ecx, DWORD PTR [eax+120]
	mov	DWORD PTR _particles$[ebp], ecx
$LN4@R_DrawBeam:

; 918  : 
; 919  : 	while( particles )

	cmp	DWORD PTR _particles$[ebp], 0
	je	$LN5@R_DrawBeam

; 920  : 	{
; 921  : 		VectorMA( particles->org, frametime, particles->vel, particles->org );

	mov	edx, 4
	imul	eax, edx, 0
	mov	ecx, 4
	imul	edx, ecx, 0
	mov	ecx, DWORD PTR _particles$[ebp]
	movss	xmm0, DWORD PTR _frametime$[ebp]
	mulss	xmm0, DWORD PTR [ecx+edx+20]
	mov	edx, DWORD PTR _particles$[ebp]
	addss	xmm0, DWORD PTR [edx+eax]
	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _particles$[ebp]
	movss	DWORD PTR [edx+ecx], xmm0
	mov	eax, 4
	shl	eax, 0
	mov	ecx, 4
	shl	ecx, 0
	mov	edx, DWORD PTR _particles$[ebp]
	movss	xmm0, DWORD PTR _frametime$[ebp]
	mulss	xmm0, DWORD PTR [edx+ecx+20]
	mov	ecx, DWORD PTR _particles$[ebp]
	addss	xmm0, DWORD PTR [ecx+eax]
	mov	edx, 4
	shl	edx, 0
	mov	eax, DWORD PTR _particles$[ebp]
	movss	DWORD PTR [eax+edx], xmm0
	mov	ecx, 4
	shl	ecx, 1
	mov	edx, 4
	shl	edx, 1
	mov	eax, DWORD PTR _particles$[ebp]
	movss	xmm0, DWORD PTR _frametime$[ebp]
	mulss	xmm0, DWORD PTR [eax+edx+20]
	mov	edx, DWORD PTR _particles$[ebp]
	movss	xmm1, DWORD PTR [edx+ecx]
	addss	xmm1, xmm0
	movss	DWORD PTR tv701[ebp], xmm1
	mov	eax, 4
	shl	eax, 1
	mov	ecx, DWORD PTR _particles$[ebp]
	movss	xmm0, DWORD PTR tv701[ebp]
	movss	DWORD PTR [ecx+eax], xmm0

; 922  : 		particles = particles->next;

	mov	edx, DWORD PTR _particles$[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	DWORD PTR _particles$[ebp], eax

; 923  : 	}

	jmp	$LN4@R_DrawBeam
$LN5@R_DrawBeam:

; 924  : }

	pop	esi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_R_DrawBeamFollow ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xash_build4529_src\engine\client\gl_beams.c
_TEXT	SEGMENT
tv221 = -56						; size = 8
_vStep$ = -48						; size = 4
_fraction$ = -44					; size = 4
_c$1 = -40						; size = 4
_s$2 = -36						; size = 4
_div$ = -32						; size = 4
_vLast$ = -28						; size = 4
_i$ = -24						; size = 4
_length$ = -20						; size = 4
_point$ = -16						; size = 12
__$ArrayPad$ = -4					; size = 4
_source$ = 8						; size = 4
_delta$ = 12						; size = 4
_width$ = 16						; size = 4
_scale$ = 20						; size = 4
_freq$ = 24						; size = 4
_speed$ = 28						; size = 4
_segments$ = 32						; size = 4
_R_DrawCylinder PROC

; 724  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 56					; 00000038H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	esi

; 725  : 	float	div, length, fraction;
; 726  : 	float	vLast, vStep;
; 727  : 	vec3_t	point;
; 728  : 	int	i;
; 729  : 
; 730  : 	if( segments < 2 )

	cmp	DWORD PTR _segments$[ebp], 2
	jge	SHORT $LN5@R_DrawCyli

; 731  : 		return;

	jmp	$LN3@R_DrawCyli
$LN5@R_DrawCyli:

; 732  : 
; 733  : 	if( segments > NOISE_DIVISIONS )

	cmp	DWORD PTR _segments$[ebp], 64		; 00000040H
	jle	SHORT $LN6@R_DrawCyli

; 734  : 		segments = NOISE_DIVISIONS;

	mov	DWORD PTR _segments$[ebp], 64		; 00000040H
$LN6@R_DrawCyli:

; 735  : 
; 736  : 	length = VectorLength( delta ) * 0.01f;

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, 4
	imul	eax, edx, 0
	mov	edx, DWORD PTR _delta$[ebp]
	mov	esi, DWORD PTR _delta$[ebp]
	movss	xmm0, DWORD PTR [edx+ecx]
	mulss	xmm0, DWORD PTR [esi+eax]
	mov	eax, 4
	shl	eax, 0
	mov	ecx, 4
	shl	ecx, 0
	mov	edx, DWORD PTR _delta$[ebp]
	mov	esi, DWORD PTR _delta$[ebp]
	movss	xmm1, DWORD PTR [edx+eax]
	mulss	xmm1, DWORD PTR [esi+ecx]
	addss	xmm0, xmm1
	mov	eax, 4
	shl	eax, 1
	mov	ecx, 4
	shl	ecx, 1
	mov	edx, DWORD PTR _delta$[ebp]
	mov	esi, DWORD PTR _delta$[ebp]
	movss	xmm1, DWORD PTR [edx+eax]
	mulss	xmm1, DWORD PTR [esi+ecx]
	addss	xmm0, xmm1
	cvtss2sd xmm0, xmm0
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	call	_sqrt
	add	esp, 8
	fstp	QWORD PTR tv221[ebp]
	movsd	xmm0, QWORD PTR tv221[ebp]
	mulsd	xmm0, QWORD PTR __real@3f847ae140000000
	cvtsd2ss xmm0, xmm0
	movss	DWORD PTR _length$[ebp], xmm0

; 737  : 	if( length < 0.5f ) length = 0.5f;	// don't lose all of the noise/texture on short beams

	movss	xmm0, DWORD PTR __real@3f000000
	comiss	xmm0, DWORD PTR _length$[ebp]
	jbe	SHORT $LN7@R_DrawCyli
	movss	xmm0, DWORD PTR __real@3f000000
	movss	DWORD PTR _length$[ebp], xmm0
$LN7@R_DrawCyli:

; 738  : 		
; 739  : 	div = 1.0f / (segments - 1);

	mov	eax, DWORD PTR _segments$[ebp]
	sub	eax, 1
	cvtsi2ss xmm0, eax
	movss	xmm1, DWORD PTR __real@3f800000
	divss	xmm1, xmm0
	movss	DWORD PTR _div$[ebp], xmm1

; 740  : 	vStep = length * div;		// texture length texels per space pixel

	movss	xmm0, DWORD PTR _length$[ebp]
	mulss	xmm0, DWORD PTR _div$[ebp]
	movss	DWORD PTR _vStep$[ebp], xmm0

; 741  : 	
; 742  : 	// Scroll speed 3.5 -- initial texture position, scrolls 3.5/sec (1.0 is entire texture)
; 743  : 	vLast = fmod( freq * speed, 1 );

	sub	esp, 8
	movsd	xmm0, QWORD PTR __real@3ff0000000000000
	movsd	QWORD PTR [esp], xmm0
	movss	xmm0, DWORD PTR _freq$[ebp]
	mulss	xmm0, DWORD PTR _speed$[ebp]
	cvtss2sd xmm0, xmm0
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	call	_fmod
	add	esp, 16					; 00000010H
	fstp	DWORD PTR _vLast$[ebp]

; 744  : 	scale = scale * length;

	movss	xmm0, DWORD PTR _scale$[ebp]
	mulss	xmm0, DWORD PTR _length$[ebp]
	movss	DWORD PTR _scale$[ebp], xmm0

; 745  : 	
; 746  : 	for ( i = 0; i < segments; i++ )

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN4@R_DrawCyli
$LN2@R_DrawCyli:
	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
$LN4@R_DrawCyli:
	mov	edx, DWORD PTR _i$[ebp]
	cmp	edx, DWORD PTR _segments$[ebp]
	jge	$LN3@R_DrawCyli

; 747  : 	{
; 748  : 		float	s, c;
; 749  : 
; 750  : 		fraction = i * div;

	cvtsi2ss xmm0, DWORD PTR _i$[ebp]
	mulss	xmm0, DWORD PTR _div$[ebp]
	movss	DWORD PTR _fraction$[ebp], xmm0

; 751  : 		SinCos( fraction * M_PI2, &s, &c );

	lea	eax, DWORD PTR _c$1[ebp]
	push	eax
	lea	ecx, DWORD PTR _s$2[ebp]
	push	ecx
	movss	xmm0, DWORD PTR _fraction$[ebp]
	mulss	xmm0, DWORD PTR __real@40c90fdb
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	_SinCos
	add	esp, 12					; 0000000cH

; 752  : 
; 753  : 		point[0] = s * freq * delta[2] + source[0];

	movss	xmm0, DWORD PTR _s$2[ebp]
	mulss	xmm0, DWORD PTR _freq$[ebp]
	mov	edx, 4
	shl	edx, 1
	mov	eax, DWORD PTR _delta$[ebp]
	mulss	xmm0, DWORD PTR [eax+edx]
	mov	ecx, 4
	imul	edx, ecx, 0
	mov	eax, DWORD PTR _source$[ebp]
	addss	xmm0, DWORD PTR [eax+edx]
	mov	ecx, 4
	imul	edx, ecx, 0
	movss	DWORD PTR _point$[ebp+edx], xmm0

; 754  : 		point[1] = c * freq * delta[2] + source[1];

	movss	xmm0, DWORD PTR _c$1[ebp]
	mulss	xmm0, DWORD PTR _freq$[ebp]
	mov	eax, 4
	shl	eax, 1
	mov	ecx, DWORD PTR _delta$[ebp]
	mulss	xmm0, DWORD PTR [ecx+eax]
	mov	edx, 4
	shl	edx, 0
	mov	eax, DWORD PTR _source$[ebp]
	addss	xmm0, DWORD PTR [eax+edx]
	mov	ecx, 4
	shl	ecx, 0
	movss	DWORD PTR _point$[ebp+ecx], xmm0

; 755  : 		point[2] = source[2] + width;

	mov	edx, 4
	shl	edx, 1
	mov	eax, DWORD PTR _source$[ebp]
	movss	xmm0, DWORD PTR [eax+edx]
	addss	xmm0, DWORD PTR _width$[ebp]
	mov	ecx, 4
	shl	ecx, 1
	movss	DWORD PTR _point$[ebp+ecx], xmm0

; 756  : 
; 757  : 		TriBrightness( 0 );

	push	ecx
	xorps	xmm0, xmm0
	movss	DWORD PTR [esp], xmm0
	call	_TriBrightness

; 758  : 		TriTexCoord2f( 1, vLast );

	movss	xmm0, DWORD PTR _vLast$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [esp], xmm0
	call	_TriTexCoord2f
	add	esp, 8

; 759  : 		TriVertex3fv( point );

	lea	edx, DWORD PTR _point$[ebp]
	push	edx
	call	_TriVertex3fv
	add	esp, 4

; 760  : 
; 761  : 		point[0] = s * freq * ( delta[2] + width ) + source[0];

	movss	xmm0, DWORD PTR _s$2[ebp]
	mulss	xmm0, DWORD PTR _freq$[ebp]
	mov	eax, 4
	shl	eax, 1
	mov	ecx, DWORD PTR _delta$[ebp]
	movss	xmm1, DWORD PTR [ecx+eax]
	addss	xmm1, DWORD PTR _width$[ebp]
	mulss	xmm0, xmm1
	mov	edx, 4
	imul	eax, edx, 0
	mov	ecx, DWORD PTR _source$[ebp]
	addss	xmm0, DWORD PTR [ecx+eax]
	mov	edx, 4
	imul	eax, edx, 0
	movss	DWORD PTR _point$[ebp+eax], xmm0

; 762  : 		point[1] = c * freq * ( delta[2] + width ) + source[1];

	movss	xmm0, DWORD PTR _c$1[ebp]
	mulss	xmm0, DWORD PTR _freq$[ebp]
	mov	ecx, 4
	shl	ecx, 1
	mov	edx, DWORD PTR _delta$[ebp]
	movss	xmm1, DWORD PTR [edx+ecx]
	addss	xmm1, DWORD PTR _width$[ebp]
	mulss	xmm0, xmm1
	mov	eax, 4
	shl	eax, 0
	mov	ecx, DWORD PTR _source$[ebp]
	addss	xmm0, DWORD PTR [ecx+eax]
	mov	edx, 4
	shl	edx, 0
	movss	DWORD PTR _point$[ebp+edx], xmm0

; 763  : 		point[2] = source[2] - width;

	mov	eax, 4
	shl	eax, 1
	mov	ecx, DWORD PTR _source$[ebp]
	movss	xmm0, DWORD PTR [ecx+eax]
	subss	xmm0, DWORD PTR _width$[ebp]
	mov	edx, 4
	shl	edx, 1
	movss	DWORD PTR _point$[ebp+edx], xmm0

; 764  : 
; 765  : 		TriBrightness( 1 );

	push	ecx
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [esp], xmm0
	call	_TriBrightness

; 766  : 		TriTexCoord2f( 0, vLast );

	movss	xmm0, DWORD PTR _vLast$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	xorps	xmm0, xmm0
	movss	DWORD PTR [esp], xmm0
	call	_TriTexCoord2f
	add	esp, 8

; 767  : 		TriVertex3fv( point );

	lea	eax, DWORD PTR _point$[ebp]
	push	eax
	call	_TriVertex3fv
	add	esp, 4

; 768  : 
; 769  : 		vLast += vStep;	// Advance texture scroll (v axis only)

	movss	xmm0, DWORD PTR _vLast$[ebp]
	addss	xmm0, DWORD PTR _vStep$[ebp]
	movss	DWORD PTR _vLast$[ebp], xmm0

; 770  : 	}

	jmp	$LN2@R_DrawCyli
$LN3@R_DrawCyli:

; 771  : }

	pop	esi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_R_DrawCylinder ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xash_build4529_src\engine\client\gl_beams.c
_TEXT	SEGMENT
tv231 = -68						; size = 8
tv211 = -60						; size = 8
_vStep$ = -52						; size = 4
_c$1 = -48						; size = 4
_s$2 = -44						; size = 4
_fraction$ = -40					; size = 4
_w$ = -36						; size = 4
_div$ = -32						; size = 4
_vLast$ = -28						; size = 4
_i$ = -24						; size = 4
_length$ = -20						; size = 4
_point$ = -16						; size = 12
__$ArrayPad$ = -4					; size = 4
_source$ = 8						; size = 4
_delta$ = 12						; size = 4
_width$ = 16						; size = 4
_scale$ = 20						; size = 4
_freq$ = 24						; size = 4
_speed$ = 28						; size = 4
_segments$ = 32						; size = 4
_R_DrawDisk PROC

; 666  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	esi

; 667  : 	float	div, length, fraction;
; 668  : 	float	w, vLast, vStep;
; 669  : 	vec3_t	point;
; 670  : 	int	i;
; 671  : 
; 672  : 	if( segments < 2 )

	cmp	DWORD PTR _segments$[ebp], 2
	jge	SHORT $LN5@R_DrawDisk

; 673  : 		return;

	jmp	$LN3@R_DrawDisk
$LN5@R_DrawDisk:

; 674  : 
; 675  : 	if( segments > NOISE_DIVISIONS )		// UNDONE: Allow more segments?

	cmp	DWORD PTR _segments$[ebp], 64		; 00000040H
	jle	SHORT $LN6@R_DrawDisk

; 676  : 		segments = NOISE_DIVISIONS;

	mov	DWORD PTR _segments$[ebp], 64		; 00000040H
$LN6@R_DrawDisk:

; 677  : 
; 678  : 	length = VectorLength( delta ) * 0.01f;

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, 4
	imul	eax, edx, 0
	mov	edx, DWORD PTR _delta$[ebp]
	mov	esi, DWORD PTR _delta$[ebp]
	movss	xmm0, DWORD PTR [edx+ecx]
	mulss	xmm0, DWORD PTR [esi+eax]
	mov	eax, 4
	shl	eax, 0
	mov	ecx, 4
	shl	ecx, 0
	mov	edx, DWORD PTR _delta$[ebp]
	mov	esi, DWORD PTR _delta$[ebp]
	movss	xmm1, DWORD PTR [edx+eax]
	mulss	xmm1, DWORD PTR [esi+ecx]
	addss	xmm0, xmm1
	mov	eax, 4
	shl	eax, 1
	mov	ecx, 4
	shl	ecx, 1
	mov	edx, DWORD PTR _delta$[ebp]
	mov	esi, DWORD PTR _delta$[ebp]
	movss	xmm1, DWORD PTR [edx+eax]
	mulss	xmm1, DWORD PTR [esi+ecx]
	addss	xmm0, xmm1
	cvtss2sd xmm0, xmm0
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	call	_sqrt
	add	esp, 8
	fstp	QWORD PTR tv211[ebp]
	movsd	xmm0, QWORD PTR tv211[ebp]
	mulsd	xmm0, QWORD PTR __real@3f847ae140000000
	cvtsd2ss xmm0, xmm0
	movss	DWORD PTR _length$[ebp], xmm0

; 679  : 	if( length < 0.5f ) length = 0.5f;	// don't lose all of the noise/texture on short beams

	movss	xmm0, DWORD PTR __real@3f000000
	comiss	xmm0, DWORD PTR _length$[ebp]
	jbe	SHORT $LN7@R_DrawDisk
	movss	xmm0, DWORD PTR __real@3f000000
	movss	DWORD PTR _length$[ebp], xmm0
$LN7@R_DrawDisk:

; 680  : 	
; 681  : 	div = 1.0f / (segments - 1);

	mov	eax, DWORD PTR _segments$[ebp]
	sub	eax, 1
	cvtsi2ss xmm0, eax
	movss	xmm1, DWORD PTR __real@3f800000
	divss	xmm1, xmm0
	movss	DWORD PTR _div$[ebp], xmm1

; 682  : 	vStep = length * div;		// Texture length texels per space pixel

	movss	xmm0, DWORD PTR _length$[ebp]
	mulss	xmm0, DWORD PTR _div$[ebp]
	movss	DWORD PTR _vStep$[ebp], xmm0

; 683  : 	
; 684  : 	// scroll speed 3.5 -- initial texture position, scrolls 3.5/sec (1.0 is entire texture)
; 685  : 	vLast = fmod( freq * speed, 1 );

	sub	esp, 8
	movsd	xmm0, QWORD PTR __real@3ff0000000000000
	movsd	QWORD PTR [esp], xmm0
	movss	xmm0, DWORD PTR _freq$[ebp]
	mulss	xmm0, DWORD PTR _speed$[ebp]
	cvtss2sd xmm0, xmm0
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	call	_fmod
	add	esp, 16					; 00000010H
	fstp	DWORD PTR _vLast$[ebp]

; 686  : 	scale = scale * length;

	movss	xmm0, DWORD PTR _scale$[ebp]
	mulss	xmm0, DWORD PTR _length$[ebp]
	movss	DWORD PTR _scale$[ebp], xmm0

; 687  : 
; 688  : 	// clamp the beam width
; 689  : 	w = fmod( freq, width * 0.1f ) * delta[2];

	movss	xmm0, DWORD PTR _width$[ebp]
	mulss	xmm0, DWORD PTR __real@3dcccccd
	cvtss2sd xmm0, xmm0
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	cvtss2sd xmm0, DWORD PTR _freq$[ebp]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	call	_fmod
	add	esp, 16					; 00000010H
	fstp	QWORD PTR tv231[ebp]
	movsd	xmm0, QWORD PTR tv231[ebp]
	mov	ecx, 4
	shl	ecx, 1
	mov	edx, DWORD PTR _delta$[ebp]
	cvtss2sd xmm1, DWORD PTR [edx+ecx]
	mulsd	xmm0, xmm1
	cvtsd2ss xmm0, xmm0
	movss	DWORD PTR _w$[ebp], xmm0

; 690  : 
; 691  : 	// NOTE: we must force the degenerate triangles to be on the edge
; 692  : 	for( i = 0; i < segments; i++ )

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN4@R_DrawDisk
$LN2@R_DrawDisk:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN4@R_DrawDisk:
	mov	ecx, DWORD PTR _i$[ebp]
	cmp	ecx, DWORD PTR _segments$[ebp]
	jge	$LN3@R_DrawDisk

; 693  : 	{
; 694  : 		float	s, c;
; 695  : 
; 696  : 		fraction = i * div;

	cvtsi2ss xmm0, DWORD PTR _i$[ebp]
	mulss	xmm0, DWORD PTR _div$[ebp]
	movss	DWORD PTR _fraction$[ebp], xmm0

; 697  : 		VectorCopy( source, point );

	mov	edx, 4
	imul	eax, edx, 0
	mov	ecx, 4
	imul	edx, ecx, 0
	mov	ecx, DWORD PTR _source$[ebp]
	mov	eax, DWORD PTR [ecx+eax]
	mov	DWORD PTR _point$[ebp+edx], eax
	mov	ecx, 4
	shl	ecx, 0
	mov	edx, 4
	shl	edx, 0
	mov	eax, DWORD PTR _source$[ebp]
	mov	ecx, DWORD PTR [eax+ecx]
	mov	DWORD PTR _point$[ebp+edx], ecx
	mov	edx, 4
	shl	edx, 1
	mov	eax, 4
	shl	eax, 1
	mov	ecx, DWORD PTR _source$[ebp]
	mov	edx, DWORD PTR [ecx+edx]
	mov	DWORD PTR _point$[ebp+eax], edx

; 698  : 
; 699  : 		TriBrightness( 1.0f );

	push	ecx
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [esp], xmm0
	call	_TriBrightness

; 700  : 		TriTexCoord2f( 1.0f, vLast );

	movss	xmm0, DWORD PTR _vLast$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [esp], xmm0
	call	_TriTexCoord2f
	add	esp, 8

; 701  : 		TriVertex3fv( point );

	lea	eax, DWORD PTR _point$[ebp]
	push	eax
	call	_TriVertex3fv
	add	esp, 4

; 702  : 
; 703  : 		SinCos( fraction * M_PI2, &s, &c );

	lea	ecx, DWORD PTR _c$1[ebp]
	push	ecx
	lea	edx, DWORD PTR _s$2[ebp]
	push	edx
	movss	xmm0, DWORD PTR _fraction$[ebp]
	mulss	xmm0, DWORD PTR __real@40c90fdb
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	_SinCos
	add	esp, 12					; 0000000cH

; 704  : 		point[0] = s * w + source[0];

	movss	xmm0, DWORD PTR _s$2[ebp]
	mulss	xmm0, DWORD PTR _w$[ebp]
	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _source$[ebp]
	addss	xmm0, DWORD PTR [edx+ecx]
	mov	eax, 4
	imul	ecx, eax, 0
	movss	DWORD PTR _point$[ebp+ecx], xmm0

; 705  : 		point[1] = c * w + source[1];

	movss	xmm0, DWORD PTR _c$1[ebp]
	mulss	xmm0, DWORD PTR _w$[ebp]
	mov	edx, 4
	shl	edx, 0
	mov	eax, DWORD PTR _source$[ebp]
	addss	xmm0, DWORD PTR [eax+edx]
	mov	ecx, 4
	shl	ecx, 0
	movss	DWORD PTR _point$[ebp+ecx], xmm0

; 706  : 		point[2] = source[2];

	mov	edx, 4
	shl	edx, 1
	mov	eax, 4
	shl	eax, 1
	mov	ecx, DWORD PTR _source$[ebp]
	mov	edx, DWORD PTR [ecx+edx]
	mov	DWORD PTR _point$[ebp+eax], edx

; 707  : 
; 708  : 		TriBrightness( 1.0f );

	push	ecx
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [esp], xmm0
	call	_TriBrightness

; 709  : 		TriTexCoord2f( 0.0f, vLast );

	movss	xmm0, DWORD PTR _vLast$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	xorps	xmm0, xmm0
	movss	DWORD PTR [esp], xmm0
	call	_TriTexCoord2f
	add	esp, 8

; 710  : 		TriVertex3fv( point );

	lea	eax, DWORD PTR _point$[ebp]
	push	eax
	call	_TriVertex3fv
	add	esp, 4

; 711  : 
; 712  : 		vLast += vStep;	// advance texture scroll (v axis only)

	movss	xmm0, DWORD PTR _vLast$[ebp]
	addss	xmm0, DWORD PTR _vStep$[ebp]
	movss	DWORD PTR _vLast$[ebp], xmm0

; 713  : 	}

	jmp	$LN2@R_DrawDisk
$LN3@R_DrawDisk:

; 714  : }

	pop	esi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_R_DrawDisk ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xash_build4529_src\engine\client\gl_beams.c
_TEXT	SEGMENT
tv564 = -188						; size = 8
tv722 = -180						; size = 8
tv496 = -172						; size = 8
_noiseStep$ = -164					; size = 4
_vStep$ = -160						; size = 4
tv415 = -156						; size = 4
tv385 = -152						; size = 4
tv361 = -148						; size = 4
tv328 = -144						; size = 4
tv260 = -140						; size = 4
tv236 = -136						; size = 4
tv199 = -132						; size = 4
_c$1 = -128						; size = 4
_s$2 = -124						; size = 4
_fraction$ = -120					; size = 4
_div$ = -116						; size = 4
_vLast$ = -112						; size = 4
_length$ = -108						; size = 4
_noiseIndex$ = -104					; size = 4
_i$ = -100						; size = 4
_ilength$3 = -96					; size = 4
_factor$ = -92						; size = 4
_last1$ = -88						; size = 12
_last2$ = -76						; size = 12
_screenLast$ = -64					; size = 12
_screen$ = -52						; size = 12
_normal$ = -40						; size = 12
_point$ = -28						; size = 12
_tmp$ = -16						; size = 12
__$ArrayPad$ = -4					; size = 4
_source$ = 8						; size = 4
_delta$ = 12						; size = 4
_width$ = 16						; size = 4
_scale$ = 20						; size = 4
_freq$ = 24						; size = 4
_speed$ = 28						; size = 4
_segments$ = 32						; size = 4
_R_DrawTorus PROC

; 577  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 188				; 000000bcH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	esi

; 578  : 	int	i, noiseIndex, noiseStep;
; 579  : 	float	div, length, fraction, factor, vLast, vStep;
; 580  : 	vec3_t	last1, last2, point, screen, screenLast, tmp, normal;
; 581  : 
; 582  : 	if( segments < 2 )

	cmp	DWORD PTR _segments$[ebp], 2
	jge	SHORT $LN5@R_DrawToru

; 583  : 		return;

	jmp	$LN3@R_DrawToru
$LN5@R_DrawToru:

; 584  : 
; 585  : 	if( segments > NOISE_DIVISIONS )

	cmp	DWORD PTR _segments$[ebp], 64		; 00000040H
	jle	SHORT $LN6@R_DrawToru

; 586  : 		segments = NOISE_DIVISIONS;

	mov	DWORD PTR _segments$[ebp], 64		; 00000040H
$LN6@R_DrawToru:

; 587  : 
; 588  : 	length = VectorLength( delta ) * 0.01;

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, 4
	imul	eax, edx, 0
	mov	edx, DWORD PTR _delta$[ebp]
	mov	esi, DWORD PTR _delta$[ebp]
	movss	xmm0, DWORD PTR [edx+ecx]
	mulss	xmm0, DWORD PTR [esi+eax]
	mov	eax, 4
	shl	eax, 0
	mov	ecx, 4
	shl	ecx, 0
	mov	edx, DWORD PTR _delta$[ebp]
	mov	esi, DWORD PTR _delta$[ebp]
	movss	xmm1, DWORD PTR [edx+eax]
	mulss	xmm1, DWORD PTR [esi+ecx]
	addss	xmm0, xmm1
	mov	eax, 4
	shl	eax, 1
	mov	ecx, 4
	shl	ecx, 1
	mov	edx, DWORD PTR _delta$[ebp]
	mov	esi, DWORD PTR _delta$[ebp]
	movss	xmm1, DWORD PTR [edx+eax]
	mulss	xmm1, DWORD PTR [esi+ecx]
	addss	xmm0, xmm1
	cvtss2sd xmm0, xmm0
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	call	_sqrt
	add	esp, 8
	fstp	QWORD PTR tv496[ebp]
	movsd	xmm0, QWORD PTR tv496[ebp]
	mulsd	xmm0, QWORD PTR __real@3f847ae147ae147b
	cvtsd2ss xmm0, xmm0
	movss	DWORD PTR _length$[ebp], xmm0

; 589  : 	if( length < 0.5 ) length = 0.5; // don't lose all of the noise/texture on short beams

	cvtss2sd xmm0, DWORD PTR _length$[ebp]
	movsd	xmm1, QWORD PTR __real@3fe0000000000000
	comisd	xmm1, xmm0
	jbe	SHORT $LN7@R_DrawToru
	movss	xmm0, DWORD PTR __real@3f000000
	movss	DWORD PTR _length$[ebp], xmm0
$LN7@R_DrawToru:

; 590  : 
; 591  : 	div = 1.0f / (segments - 1);

	mov	eax, DWORD PTR _segments$[ebp]
	sub	eax, 1
	cvtsi2ss xmm0, eax
	movss	xmm1, DWORD PTR __real@3f800000
	divss	xmm1, xmm0
	movss	DWORD PTR _div$[ebp], xmm1

; 592  : 
; 593  : 	vStep = length * div; // Texture length texels per space pixel

	movss	xmm0, DWORD PTR _length$[ebp]
	mulss	xmm0, DWORD PTR _div$[ebp]
	movss	DWORD PTR _vStep$[ebp], xmm0

; 594  : 
; 595  : 	// Scroll speed 3.5 -- initial texture position, scrolls 3.5/sec (1.0 is entire texture)
; 596  : 	vLast = fmod( freq * speed, 1 );

	sub	esp, 8
	movsd	xmm0, QWORD PTR __real@3ff0000000000000
	movsd	QWORD PTR [esp], xmm0
	movss	xmm0, DWORD PTR _freq$[ebp]
	mulss	xmm0, DWORD PTR _speed$[ebp]
	cvtss2sd xmm0, xmm0
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	call	_fmod
	add	esp, 16					; 00000010H
	fstp	DWORD PTR _vLast$[ebp]

; 597  : 	scale = scale * length;

	movss	xmm0, DWORD PTR _scale$[ebp]
	mulss	xmm0, DWORD PTR _length$[ebp]
	movss	DWORD PTR _scale$[ebp], xmm0

; 598  : 
; 599  : 	// Iterator to resample noise waveform (it needs to be generated in powers of 2)
; 600  : 	noiseStep = (int)((float)( NOISE_DIVISIONS - 1 ) * div * 65536.0f );

	movss	xmm0, DWORD PTR __real@427c0000
	mulss	xmm0, DWORD PTR _div$[ebp]
	mulss	xmm0, DWORD PTR __real@47800000
	cvttss2si ecx, xmm0
	mov	DWORD PTR _noiseStep$[ebp], ecx

; 601  : 	noiseIndex = 0;

	mov	DWORD PTR _noiseIndex$[ebp], 0

; 602  : 
; 603  : 	for( i = 0; i < segments; i++ )

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN4@R_DrawToru
$LN2@R_DrawToru:
	mov	edx, DWORD PTR _i$[ebp]
	add	edx, 1
	mov	DWORD PTR _i$[ebp], edx
$LN4@R_DrawToru:
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR _segments$[ebp]
	jge	$LN3@R_DrawToru

; 604  : 	{
; 605  : 		float	s, c;
; 606  : 
; 607  : 		fraction = i * div;

	cvtsi2ss xmm0, DWORD PTR _i$[ebp]
	mulss	xmm0, DWORD PTR _div$[ebp]
	movss	DWORD PTR _fraction$[ebp], xmm0

; 608  : 		SinCos( fraction * M_PI2, &s, &c );

	lea	ecx, DWORD PTR _c$1[ebp]
	push	ecx
	lea	edx, DWORD PTR _s$2[ebp]
	push	edx
	movss	xmm0, DWORD PTR _fraction$[ebp]
	mulss	xmm0, DWORD PTR __real@40c90fdb
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	_SinCos
	add	esp, 12					; 0000000cH

; 609  : 
; 610  : 		point[0] = s * freq * delta[2] + source[0];

	movss	xmm0, DWORD PTR _s$2[ebp]
	mulss	xmm0, DWORD PTR _freq$[ebp]
	mov	eax, 4
	shl	eax, 1
	mov	ecx, DWORD PTR _delta$[ebp]
	mulss	xmm0, DWORD PTR [ecx+eax]
	mov	edx, 4
	imul	eax, edx, 0
	mov	ecx, DWORD PTR _source$[ebp]
	addss	xmm0, DWORD PTR [ecx+eax]
	mov	edx, 4
	imul	eax, edx, 0
	movss	DWORD PTR _point$[ebp+eax], xmm0

; 611  : 		point[1] = c * freq * delta[2] + source[1];

	movss	xmm0, DWORD PTR _c$1[ebp]
	mulss	xmm0, DWORD PTR _freq$[ebp]
	mov	ecx, 4
	shl	ecx, 1
	mov	edx, DWORD PTR _delta$[ebp]
	mulss	xmm0, DWORD PTR [edx+ecx]
	mov	eax, 4
	shl	eax, 0
	mov	ecx, DWORD PTR _source$[ebp]
	addss	xmm0, DWORD PTR [ecx+eax]
	mov	edx, 4
	shl	edx, 0
	movss	DWORD PTR _point$[ebp+edx], xmm0

; 612  : 		point[2] = source[2];

	mov	eax, 4
	shl	eax, 1
	mov	ecx, 4
	shl	ecx, 1
	mov	edx, DWORD PTR _source$[ebp]
	mov	eax, DWORD PTR [edx+eax]
	mov	DWORD PTR _point$[ebp+ecx], eax

; 613  : 
; 614  : 		// distort using noise
; 615  : 		if( scale != 0 )

	movss	xmm0, DWORD PTR _scale$[ebp]
	ucomiss	xmm0, DWORD PTR __real@00000000
	lahf
	test	ah, 68					; 00000044H
	jnp	$LN9@R_DrawToru

; 616  : 		{
; 617  : 			if(( noiseIndex >> 16 ) < NOISE_DIVISIONS )

	mov	ecx, DWORD PTR _noiseIndex$[ebp]
	sar	ecx, 16					; 00000010H
	cmp	ecx, 64					; 00000040H
	jge	$LN9@R_DrawToru

; 618  : 			{
; 619  : 				factor = rgNoise[noiseIndex>>16] * scale;

	mov	edx, DWORD PTR _noiseIndex$[ebp]
	sar	edx, 16					; 00000010H
	movss	xmm0, DWORD PTR _rgNoise[edx*4]
	mulss	xmm0, DWORD PTR _scale$[ebp]
	movss	DWORD PTR _factor$[ebp], xmm0

; 620  : 				VectorMA( point, factor, RI.vup, point );

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, 4
	imul	eax, edx, 0
	movss	xmm0, DWORD PTR _factor$[ebp]
	mulss	xmm0, DWORD PTR _RI[eax+248]
	addss	xmm0, DWORD PTR _point$[ebp+ecx]
	mov	ecx, 4
	imul	edx, ecx, 0
	movss	DWORD PTR _point$[ebp+edx], xmm0
	mov	eax, 4
	shl	eax, 0
	mov	ecx, 4
	shl	ecx, 0
	movss	xmm0, DWORD PTR _factor$[ebp]
	mulss	xmm0, DWORD PTR _RI[ecx+248]
	addss	xmm0, DWORD PTR _point$[ebp+eax]
	mov	edx, 4
	shl	edx, 0
	movss	DWORD PTR _point$[ebp+edx], xmm0
	mov	eax, 4
	shl	eax, 1
	mov	ecx, 4
	shl	ecx, 1
	movss	xmm0, DWORD PTR _factor$[ebp]
	mulss	xmm0, DWORD PTR _RI[ecx+248]
	movss	xmm1, DWORD PTR _point$[ebp+eax]
	addss	xmm1, xmm0
	movss	DWORD PTR tv199[ebp], xmm1
	mov	edx, 4
	shl	edx, 1
	movss	xmm0, DWORD PTR tv199[ebp]
	movss	DWORD PTR _point$[ebp+edx], xmm0

; 621  : 
; 622  : 				// rotate the noise along the perpendicluar axis a bit to keep the bolt from looking diagonal
; 623  : 				factor = rgNoise[noiseIndex>>16] * scale * cos( fraction * M_PI * 3 + freq );

	mov	eax, DWORD PTR _noiseIndex$[ebp]
	sar	eax, 16					; 00000010H
	movss	xmm0, DWORD PTR _rgNoise[eax*4]
	mulss	xmm0, DWORD PTR _scale$[ebp]
	cvtss2sd xmm0, xmm0
	movss	xmm1, DWORD PTR _fraction$[ebp]
	mulss	xmm1, DWORD PTR __real@40490fdb
	mulss	xmm1, DWORD PTR __real@40400000
	addss	xmm1, DWORD PTR _freq$[ebp]
	cvtss2sd xmm1, xmm1
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm1
	movsd	QWORD PTR tv722[ebp], xmm0
	call	_cos
	add	esp, 8
	fstp	QWORD PTR tv564[ebp]
	movsd	xmm0, QWORD PTR tv722[ebp]
	mulsd	xmm0, QWORD PTR tv564[ebp]
	cvtsd2ss xmm0, xmm0
	movss	DWORD PTR _factor$[ebp], xmm0

; 624  : 				VectorMA( point, factor, RI.vright, point );

	mov	ecx, 4
	imul	edx, ecx, 0
	mov	eax, 4
	imul	ecx, eax, 0
	movss	xmm0, DWORD PTR _factor$[ebp]
	mulss	xmm0, DWORD PTR _RI[ecx+236]
	addss	xmm0, DWORD PTR _point$[ebp+edx]
	mov	edx, 4
	imul	eax, edx, 0
	movss	DWORD PTR _point$[ebp+eax], xmm0
	mov	ecx, 4
	shl	ecx, 0
	mov	edx, 4
	shl	edx, 0
	movss	xmm0, DWORD PTR _factor$[ebp]
	mulss	xmm0, DWORD PTR _RI[edx+236]
	addss	xmm0, DWORD PTR _point$[ebp+ecx]
	mov	eax, 4
	shl	eax, 0
	movss	DWORD PTR _point$[ebp+eax], xmm0
	mov	ecx, 4
	shl	ecx, 1
	mov	edx, 4
	shl	edx, 1
	movss	xmm0, DWORD PTR _factor$[ebp]
	mulss	xmm0, DWORD PTR _RI[edx+236]
	movss	xmm1, DWORD PTR _point$[ebp+ecx]
	addss	xmm1, xmm0
	movss	DWORD PTR tv236[ebp], xmm1
	mov	eax, 4
	shl	eax, 1
	movss	xmm0, DWORD PTR tv236[ebp]
	movss	DWORD PTR _point$[ebp+eax], xmm0
$LN9@R_DrawToru:

; 625  : 			}
; 626  : 		}
; 627  : 		
; 628  : 		// Transform point into screen space
; 629  : 		TriWorldToScreen( point, screen );

	lea	ecx, DWORD PTR _screen$[ebp]
	push	ecx
	lea	edx, DWORD PTR _point$[ebp]
	push	edx
	call	_TriWorldToScreen
	add	esp, 8

; 630  : 
; 631  : 		if( i != 0 )

	cmp	DWORD PTR _i$[ebp], 0
	je	$LN10@R_DrawToru

; 632  : 		{
; 633  : 			// build world-space normal to screen-space direction vector
; 634  : 			VectorSubtract( screen, screenLast, tmp );

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, 4
	imul	eax, edx, 0
	movss	xmm0, DWORD PTR _screen$[ebp+ecx]
	subss	xmm0, DWORD PTR _screenLast$[ebp+eax]
	mov	ecx, 4
	imul	edx, ecx, 0
	movss	DWORD PTR _tmp$[ebp+edx], xmm0
	mov	eax, 4
	shl	eax, 0
	mov	ecx, 4
	shl	ecx, 0
	movss	xmm0, DWORD PTR _screen$[ebp+eax]
	subss	xmm0, DWORD PTR _screenLast$[ebp+ecx]
	mov	edx, 4
	shl	edx, 0
	movss	DWORD PTR _tmp$[ebp+edx], xmm0
	mov	eax, 4
	shl	eax, 1
	mov	ecx, 4
	shl	ecx, 1
	movss	xmm0, DWORD PTR _screen$[ebp+eax]
	subss	xmm0, DWORD PTR _screenLast$[ebp+ecx]
	movss	DWORD PTR tv260[ebp], xmm0
	mov	edx, 4
	shl	edx, 1
	movss	xmm0, DWORD PTR tv260[ebp]
	movss	DWORD PTR _tmp$[ebp+edx], xmm0

; 635  : 
; 636  : 			// we don't need Z, we're in screen space
; 637  : 			tmp[2] = 0;

	mov	eax, 4
	shl	eax, 1
	xorps	xmm0, xmm0
	movss	DWORD PTR _tmp$[ebp+eax], xmm0

; 638  : 			VectorNormalize( tmp );

	mov	ecx, 4
	imul	edx, ecx, 0
	mov	eax, 4
	imul	ecx, eax, 0
	movss	xmm0, DWORD PTR _tmp$[ebp+edx]
	mulss	xmm0, DWORD PTR _tmp$[ebp+ecx]
	mov	edx, 4
	shl	edx, 0
	mov	eax, 4
	shl	eax, 0
	movss	xmm1, DWORD PTR _tmp$[ebp+edx]
	mulss	xmm1, DWORD PTR _tmp$[ebp+eax]
	addss	xmm0, xmm1
	mov	ecx, 4
	shl	ecx, 1
	mov	edx, 4
	shl	edx, 1
	movss	xmm1, DWORD PTR _tmp$[ebp+ecx]
	mulss	xmm1, DWORD PTR _tmp$[ebp+edx]
	addss	xmm0, xmm1
	cvtss2sd xmm0, xmm0
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	call	_sqrt
	add	esp, 8
	fstp	DWORD PTR _ilength$3[ebp]
	movss	xmm0, DWORD PTR _ilength$3[ebp]
	ucomiss	xmm0, DWORD PTR __real@00000000
	lahf
	test	ah, 68					; 00000044H
	jnp	SHORT $LN11@R_DrawToru
	movss	xmm0, DWORD PTR __real@3f800000
	divss	xmm0, DWORD PTR _ilength$3[ebp]
	movss	DWORD PTR _ilength$3[ebp], xmm0
$LN11@R_DrawToru:
	mov	eax, 4
	imul	ecx, eax, 0
	movss	xmm0, DWORD PTR _tmp$[ebp+ecx]
	mulss	xmm0, DWORD PTR _ilength$3[ebp]
	mov	edx, 4
	imul	eax, edx, 0
	movss	DWORD PTR _tmp$[ebp+eax], xmm0
	mov	ecx, 4
	shl	ecx, 0
	movss	xmm0, DWORD PTR _tmp$[ebp+ecx]
	mulss	xmm0, DWORD PTR _ilength$3[ebp]
	mov	edx, 4
	shl	edx, 0
	movss	DWORD PTR _tmp$[ebp+edx], xmm0
	mov	eax, 4
	shl	eax, 1
	movss	xmm0, DWORD PTR _tmp$[ebp+eax]
	mulss	xmm0, DWORD PTR _ilength$3[ebp]
	mov	ecx, 4
	shl	ecx, 1
	movss	DWORD PTR _tmp$[ebp+ecx], xmm0

; 639  : 			VectorScale( RI.vup, -tmp[0], normal );	// Build point along noraml line (normal is -y, x)

	mov	edx, 4
	imul	eax, edx, 0
	mov	ecx, 4
	imul	edx, ecx, 0
	movss	xmm0, DWORD PTR _tmp$[ebp+edx]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mulss	xmm0, DWORD PTR _RI[eax+248]
	mov	eax, 4
	imul	ecx, eax, 0
	movss	DWORD PTR _normal$[ebp+ecx], xmm0
	mov	edx, 4
	shl	edx, 0
	mov	eax, 4
	imul	ecx, eax, 0
	movss	xmm0, DWORD PTR _tmp$[ebp+ecx]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mulss	xmm0, DWORD PTR _RI[edx+248]
	mov	edx, 4
	shl	edx, 0
	movss	DWORD PTR _normal$[ebp+edx], xmm0
	mov	eax, 4
	shl	eax, 1
	mov	ecx, 4
	imul	edx, ecx, 0
	movss	xmm0, DWORD PTR _tmp$[ebp+edx]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	movss	xmm1, DWORD PTR _RI[eax+248]
	mulss	xmm1, xmm0
	movss	DWORD PTR tv328[ebp], xmm1
	mov	eax, 4
	shl	eax, 1
	movss	xmm0, DWORD PTR tv328[ebp]
	movss	DWORD PTR _normal$[ebp+eax], xmm0

; 640  : 			VectorMA( normal, tmp[1], RI.vright, normal );

	mov	ecx, 4
	imul	edx, ecx, 0
	mov	eax, 4
	shl	eax, 0
	movss	xmm0, DWORD PTR _tmp$[ebp+eax]
	mov	ecx, 4
	imul	eax, ecx, 0
	mulss	xmm0, DWORD PTR _RI[eax+236]
	addss	xmm0, DWORD PTR _normal$[ebp+edx]
	mov	ecx, 4
	imul	edx, ecx, 0
	movss	DWORD PTR _normal$[ebp+edx], xmm0
	mov	eax, 4
	shl	eax, 0
	mov	ecx, 4
	shl	ecx, 0
	movss	xmm0, DWORD PTR _tmp$[ebp+ecx]
	mov	edx, 4
	shl	edx, 0
	mulss	xmm0, DWORD PTR _RI[edx+236]
	addss	xmm0, DWORD PTR _normal$[ebp+eax]
	mov	eax, 4
	shl	eax, 0
	movss	DWORD PTR _normal$[ebp+eax], xmm0
	mov	ecx, 4
	shl	ecx, 1
	mov	edx, 4
	shl	edx, 0
	movss	xmm0, DWORD PTR _tmp$[ebp+edx]
	mov	eax, 4
	shl	eax, 1
	mulss	xmm0, DWORD PTR _RI[eax+236]
	movss	xmm1, DWORD PTR _normal$[ebp+ecx]
	addss	xmm1, xmm0
	movss	DWORD PTR tv361[ebp], xmm1
	mov	ecx, 4
	shl	ecx, 1
	movss	xmm0, DWORD PTR tv361[ebp]
	movss	DWORD PTR _normal$[ebp+ecx], xmm0

; 641  : 			
; 642  : 			// Make a wide line
; 643  : 			VectorMA( point, width, normal, last1 );

	mov	edx, 4
	imul	eax, edx, 0
	mov	ecx, 4
	imul	edx, ecx, 0
	movss	xmm0, DWORD PTR _width$[ebp]
	mulss	xmm0, DWORD PTR _normal$[ebp+edx]
	addss	xmm0, DWORD PTR _point$[ebp+eax]
	mov	eax, 4
	imul	ecx, eax, 0
	movss	DWORD PTR _last1$[ebp+ecx], xmm0
	mov	edx, 4
	shl	edx, 0
	mov	eax, 4
	shl	eax, 0
	movss	xmm0, DWORD PTR _width$[ebp]
	mulss	xmm0, DWORD PTR _normal$[ebp+eax]
	addss	xmm0, DWORD PTR _point$[ebp+edx]
	mov	ecx, 4
	shl	ecx, 0
	movss	DWORD PTR _last1$[ebp+ecx], xmm0
	mov	edx, 4
	shl	edx, 1
	mov	eax, 4
	shl	eax, 1
	movss	xmm0, DWORD PTR _width$[ebp]
	mulss	xmm0, DWORD PTR _normal$[ebp+eax]
	movss	xmm1, DWORD PTR _point$[ebp+edx]
	addss	xmm1, xmm0
	movss	DWORD PTR tv385[ebp], xmm1
	mov	ecx, 4
	shl	ecx, 1
	movss	xmm0, DWORD PTR tv385[ebp]
	movss	DWORD PTR _last1$[ebp+ecx], xmm0

; 644  : 			VectorMA( point, -width, normal, last2 );

	mov	edx, 4
	imul	eax, edx, 0
	movss	xmm0, DWORD PTR _width$[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mov	ecx, 4
	imul	edx, ecx, 0
	mulss	xmm0, DWORD PTR _normal$[ebp+edx]
	addss	xmm0, DWORD PTR _point$[ebp+eax]
	mov	eax, 4
	imul	ecx, eax, 0
	movss	DWORD PTR _last2$[ebp+ecx], xmm0
	mov	edx, 4
	shl	edx, 0
	movss	xmm0, DWORD PTR _width$[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mov	eax, 4
	shl	eax, 0
	mulss	xmm0, DWORD PTR _normal$[ebp+eax]
	addss	xmm0, DWORD PTR _point$[ebp+edx]
	mov	ecx, 4
	shl	ecx, 0
	movss	DWORD PTR _last2$[ebp+ecx], xmm0
	mov	edx, 4
	shl	edx, 1
	movss	xmm0, DWORD PTR _width$[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mov	eax, 4
	shl	eax, 1
	mulss	xmm0, DWORD PTR _normal$[ebp+eax]
	movss	xmm1, DWORD PTR _point$[ebp+edx]
	addss	xmm1, xmm0
	movss	DWORD PTR tv415[ebp], xmm1
	mov	ecx, 4
	shl	ecx, 1
	movss	xmm0, DWORD PTR tv415[ebp]
	movss	DWORD PTR _last2$[ebp+ecx], xmm0

; 645  : 
; 646  : 			vLast += vStep; // advance texture scroll (v axis only)

	movss	xmm0, DWORD PTR _vLast$[ebp]
	addss	xmm0, DWORD PTR _vStep$[ebp]
	movss	DWORD PTR _vLast$[ebp], xmm0

; 647  : 			TriTexCoord2f( 1, vLast );

	push	ecx
	movss	xmm0, DWORD PTR _vLast$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [esp], xmm0
	call	_TriTexCoord2f
	add	esp, 8

; 648  : 			TriVertex3fv( last2 );

	lea	edx, DWORD PTR _last2$[ebp]
	push	edx
	call	_TriVertex3fv

; 649  : 			TriTexCoord2f( 0, vLast );

	movss	xmm0, DWORD PTR _vLast$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	xorps	xmm0, xmm0
	movss	DWORD PTR [esp], xmm0
	call	_TriTexCoord2f
	add	esp, 8

; 650  : 			TriVertex3fv( last1 );

	lea	eax, DWORD PTR _last1$[ebp]
	push	eax
	call	_TriVertex3fv
	add	esp, 4
$LN10@R_DrawToru:

; 651  : 		}
; 652  : 
; 653  : 		VectorCopy( screen, screenLast );

	mov	ecx, 4
	imul	edx, ecx, 0
	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _screen$[ebp+edx]
	mov	DWORD PTR _screenLast$[ebp+ecx], edx
	mov	eax, 4
	shl	eax, 0
	mov	ecx, 4
	shl	ecx, 0
	mov	edx, DWORD PTR _screen$[ebp+eax]
	mov	DWORD PTR _screenLast$[ebp+ecx], edx
	mov	eax, 4
	shl	eax, 1
	mov	ecx, 4
	shl	ecx, 1
	mov	edx, DWORD PTR _screen$[ebp+eax]
	mov	DWORD PTR _screenLast$[ebp+ecx], edx

; 654  : 		noiseIndex += noiseStep;

	mov	eax, DWORD PTR _noiseIndex$[ebp]
	add	eax, DWORD PTR _noiseStep$[ebp]
	mov	DWORD PTR _noiseIndex$[ebp], eax

; 655  : 	}

	jmp	$LN2@R_DrawToru
$LN3@R_DrawToru:

; 656  : }

	pop	esi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_R_DrawTorus ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xash_build4529_src\engine\client\gl_beams.c
_TEXT	SEGMENT
tv307 = -224						; size = 4
tv204 = -220						; size = 4
tv250 = -216						; size = 4
tv283 = -212						; size = 4
_noiseStep$ = -208					; size = 4
_vStep$ = -204						; size = 4
tv602 = -200						; size = 4
tv566 = -196						; size = 4
_total_segs$ = -192					; size = 4
tv509 = -188						; size = 4
tv473 = -184						; size = 4
tv381 = -180						; size = 4
tv366 = -176						; size = 4
_flMaxWidth$ = -172					; size = 4
tv177 = -168						; size = 4
_ilength$1 = -164					; size = 4
_vLast$ = -160						; size = 4
_c$2 = -156						; size = 4
_s$3 = -152						; size = 4
_noiseIndex$ = -148					; size = 4
_i$ = -144						; size = 4
_segs_drawn$ = -140					; size = 4
_div$ = -136						; size = 4
_length$ = -132						; size = 4
_factor$ = -128						; size = 4
_brightness$ = -124					; size = 4
_fraction$ = -120					; size = 4
_nextSeg$4 = -116					; size = 20
_curSeg$ = -96						; size = 20
_perp1$ = -76						; size = 12
_vPoint1$5 = -64					; size = 12
_vPoint2$6 = -52					; size = 12
_vNormal$7 = -40					; size = 12
_vLastNormal$ = -28					; size = 12
_vAveNormal$8 = -16					; size = 12
__$ArrayPad$ = -4					; size = 4
_source$ = 8						; size = 4
_delta$ = 12						; size = 4
_width$ = 16						; size = 4
_scale$ = 20						; size = 4
_freq$ = 24						; size = 4
_speed$ = 28						; size = 4
_segments$ = 32						; size = 4
_flags$ = 36						; size = 4
_R_DrawSegs PROC

; 395  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 224				; 000000e0H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	esi

; 396  : 	int	noiseIndex, noiseStep;
; 397  : 	int	i, total_segs, segs_drawn;
; 398  : 	float	div, length, fraction, factor;
; 399  : 	float	flMaxWidth, vLast, vStep, brightness;
; 400  : 	vec3_t	perp1, vLastNormal;
; 401  : 	beamseg_t	curSeg;
; 402  : 	
; 403  : 	if( segments < 2 ) return;

	cmp	DWORD PTR _segments$[ebp], 2
	jge	SHORT $LN5@R_DrawSegs
	jmp	$LN3@R_DrawSegs
$LN5@R_DrawSegs:

; 404  : 
; 405  : 	length = VectorLength( delta );

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, 4
	imul	eax, edx, 0
	mov	edx, DWORD PTR _delta$[ebp]
	mov	esi, DWORD PTR _delta$[ebp]
	movss	xmm0, DWORD PTR [edx+ecx]
	mulss	xmm0, DWORD PTR [esi+eax]
	mov	eax, 4
	shl	eax, 0
	mov	ecx, 4
	shl	ecx, 0
	mov	edx, DWORD PTR _delta$[ebp]
	mov	esi, DWORD PTR _delta$[ebp]
	movss	xmm1, DWORD PTR [edx+eax]
	mulss	xmm1, DWORD PTR [esi+ecx]
	addss	xmm0, xmm1
	mov	eax, 4
	shl	eax, 1
	mov	ecx, 4
	shl	ecx, 1
	mov	edx, DWORD PTR _delta$[ebp]
	mov	esi, DWORD PTR _delta$[ebp]
	movss	xmm1, DWORD PTR [edx+eax]
	mulss	xmm1, DWORD PTR [esi+ecx]
	addss	xmm0, xmm1
	cvtss2sd xmm0, xmm0
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	call	_sqrt
	add	esp, 8
	fstp	DWORD PTR _length$[ebp]

; 406  : 	flMaxWidth = width * 0.5f;

	movss	xmm0, DWORD PTR _width$[ebp]
	mulss	xmm0, DWORD PTR __real@3f000000
	movss	DWORD PTR _flMaxWidth$[ebp], xmm0

; 407  : 	div = 1.0f / ( segments - 1 );

	mov	eax, DWORD PTR _segments$[ebp]
	sub	eax, 1
	cvtsi2ss xmm0, eax
	movss	xmm1, DWORD PTR __real@3f800000
	divss	xmm1, xmm0
	movss	DWORD PTR _div$[ebp], xmm1

; 408  : 
; 409  : 	if( length * div < flMaxWidth * 1.414f )

	movss	xmm0, DWORD PTR _length$[ebp]
	mulss	xmm0, DWORD PTR _div$[ebp]
	movss	xmm1, DWORD PTR _flMaxWidth$[ebp]
	mulss	xmm1, DWORD PTR __real@3fb4fdf4
	comiss	xmm1, xmm0
	jbe	SHORT $LN7@R_DrawSegs

; 410  : 	{
; 411  : 		// here, we have too many segments; we could get overlap... so lets have less segments
; 412  : 		segments = (int)( length / ( flMaxWidth * 1.414f )) + 1.0f;

	movss	xmm0, DWORD PTR _flMaxWidth$[ebp]
	mulss	xmm0, DWORD PTR __real@3fb4fdf4
	movss	xmm1, DWORD PTR _length$[ebp]
	divss	xmm1, xmm0
	cvttss2si ecx, xmm1
	cvtsi2ss xmm0, ecx
	addss	xmm0, DWORD PTR __real@3f800000
	cvttss2si edx, xmm0
	mov	DWORD PTR _segments$[ebp], edx

; 413  : 		if( segments < 2 ) segments = 2;

	cmp	DWORD PTR _segments$[ebp], 2
	jge	SHORT $LN7@R_DrawSegs
	mov	DWORD PTR _segments$[ebp], 2
$LN7@R_DrawSegs:

; 414  : 	}
; 415  : 
; 416  : 	if( segments > NOISE_DIVISIONS )

	cmp	DWORD PTR _segments$[ebp], 64		; 00000040H
	jle	SHORT $LN8@R_DrawSegs

; 417  : 		segments = NOISE_DIVISIONS;

	mov	DWORD PTR _segments$[ebp], 64		; 00000040H
$LN8@R_DrawSegs:

; 418  : 
; 419  : 	div = 1.0f / (segments - 1);

	mov	eax, DWORD PTR _segments$[ebp]
	sub	eax, 1
	cvtsi2ss xmm0, eax
	movss	xmm1, DWORD PTR __real@3f800000
	divss	xmm1, xmm0
	movss	DWORD PTR _div$[ebp], xmm1

; 420  : 	length *= 0.01f;

	movss	xmm0, DWORD PTR _length$[ebp]
	mulss	xmm0, DWORD PTR __real@3c23d70a
	movss	DWORD PTR _length$[ebp], xmm0

; 421  : 	vStep = length * div;	// Texture length texels per space pixel

	movss	xmm0, DWORD PTR _length$[ebp]
	mulss	xmm0, DWORD PTR _div$[ebp]
	movss	DWORD PTR _vStep$[ebp], xmm0

; 422  : 
; 423  : 	// Scroll speed 3.5 -- initial texture position, scrolls 3.5/sec (1.0 is entire texture)
; 424  : 	vLast = fmod( freq * speed, 1 );

	sub	esp, 8
	movsd	xmm0, QWORD PTR __real@3ff0000000000000
	movsd	QWORD PTR [esp], xmm0
	movss	xmm0, DWORD PTR _freq$[ebp]
	mulss	xmm0, DWORD PTR _speed$[ebp]
	cvtss2sd xmm0, xmm0
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	call	_fmod
	add	esp, 16					; 00000010H
	fstp	DWORD PTR _vLast$[ebp]

; 425  : 
; 426  : 	if( flags & FBEAM_SINENOISE )

	mov	ecx, DWORD PTR _flags$[ebp]
	and	ecx, 16					; 00000010H
	je	SHORT $LN9@R_DrawSegs

; 427  : 	{
; 428  : 		if( segments < 16 )

	cmp	DWORD PTR _segments$[ebp], 16		; 00000010H
	jge	SHORT $LN11@R_DrawSegs

; 429  : 		{
; 430  : 			segments = 16;

	mov	DWORD PTR _segments$[ebp], 16		; 00000010H

; 431  : 			div = 1.0f / ( segments - 1 );

	mov	edx, DWORD PTR _segments$[ebp]
	sub	edx, 1
	cvtsi2ss xmm0, edx
	movss	xmm1, DWORD PTR __real@3f800000
	divss	xmm1, xmm0
	movss	DWORD PTR _div$[ebp], xmm1
$LN11@R_DrawSegs:

; 432  : 		}
; 433  : 		scale *= 100.0f;

	movss	xmm0, DWORD PTR _scale$[ebp]
	mulss	xmm0, DWORD PTR __real@42c80000
	movss	DWORD PTR _scale$[ebp], xmm0

; 434  : 		length = segments * 0.1f;

	cvtsi2ss xmm0, DWORD PTR _segments$[ebp]
	mulss	xmm0, DWORD PTR __real@3dcccccd
	movss	DWORD PTR _length$[ebp], xmm0

; 435  : 	}

	jmp	SHORT $LN10@R_DrawSegs
$LN9@R_DrawSegs:

; 436  : 	else
; 437  : 	{
; 438  : 		scale *= length * 2.0;

	cvtss2sd xmm0, DWORD PTR _length$[ebp]
	mulsd	xmm0, QWORD PTR __real@4000000000000000
	cvtss2sd xmm1, DWORD PTR _scale$[ebp]
	mulsd	xmm1, xmm0
	cvtsd2ss xmm0, xmm1
	movss	DWORD PTR _scale$[ebp], xmm0
$LN10@R_DrawSegs:

; 439  : 	}
; 440  : 
; 441  : 	// Iterator to resample noise waveform (it needs to be generated in powers of 2)
; 442  : 	noiseStep = (int)((float)( NOISE_DIVISIONS - 1 ) * div * 65536.0f );

	movss	xmm0, DWORD PTR __real@427c0000
	mulss	xmm0, DWORD PTR _div$[ebp]
	mulss	xmm0, DWORD PTR __real@47800000
	cvttss2si eax, xmm0
	mov	DWORD PTR _noiseStep$[ebp], eax

; 443  : 	brightness = 1.0f;

	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR _brightness$[ebp], xmm0

; 444  : 	noiseIndex = 0;

	mov	DWORD PTR _noiseIndex$[ebp], 0

; 445  : 
; 446  : 	if( FBitSet( flags, FBEAM_SHADEIN ))

	mov	ecx, DWORD PTR _flags$[ebp]
	and	ecx, 64					; 00000040H
	je	SHORT $LN12@R_DrawSegs

; 447  : 		brightness = 0;

	xorps	xmm0, xmm0
	movss	DWORD PTR _brightness$[ebp], xmm0
$LN12@R_DrawSegs:

; 448  : 
; 449  : 	// Choose two vectors that are perpendicular to the beam
; 450  : 	R_BeamComputePerpendicular( delta, perp1 );

	lea	edx, DWORD PTR _perp1$[ebp]
	push	edx
	mov	eax, DWORD PTR _delta$[ebp]
	push	eax
	call	_R_BeamComputePerpendicular
	add	esp, 8

; 451  : 
; 452  : 	total_segs = segments;

	mov	ecx, DWORD PTR _segments$[ebp]
	mov	DWORD PTR _total_segs$[ebp], ecx

; 453  : 	segs_drawn = 0;

	mov	DWORD PTR _segs_drawn$[ebp], 0

; 454  : 
; 455  : 	// specify all the segments.
; 456  : 	for( i = 0; i < segments; i++ )

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN4@R_DrawSegs
$LN2@R_DrawSegs:
	mov	edx, DWORD PTR _i$[ebp]
	add	edx, 1
	mov	DWORD PTR _i$[ebp], edx
$LN4@R_DrawSegs:
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR _segments$[ebp]
	jge	$LN3@R_DrawSegs

; 457  : 	{
; 458  : 		beamseg_t	nextSeg;
; 459  : 		vec3_t	vPoint1, vPoint2;
; 460  : 	
; 461  : 		Assert( noiseIndex < ( NOISE_DIVISIONS << 16 ));

	cmp	DWORD PTR _noiseIndex$[ebp], 4194304	; 00400000H
	jge	SHORT $LN28@R_DrawSegs
	mov	DWORD PTR tv177[ebp], 1
	jmp	SHORT $LN29@R_DrawSegs
$LN28@R_DrawSegs:
	mov	DWORD PTR tv177[ebp], 0
$LN29@R_DrawSegs:
	push	0
	push	461					; 000001cdH
	push	OFFSET $SG145739
	push	OFFSET $SG145740
	mov	ecx, DWORD PTR tv177[ebp]
	push	ecx
	call	_DBG_AssertFunction
	add	esp, 20					; 00000014H

; 462  : 
; 463  : 		fraction = i * div;

	cvtsi2ss xmm0, DWORD PTR _i$[ebp]
	mulss	xmm0, DWORD PTR _div$[ebp]
	movss	DWORD PTR _fraction$[ebp], xmm0

; 464  : 
; 465  : 		VectorMA( source, fraction, delta, nextSeg.pos );

	mov	edx, 4
	imul	eax, edx, 0
	mov	ecx, 4
	imul	edx, ecx, 0
	mov	ecx, DWORD PTR _delta$[ebp]
	movss	xmm0, DWORD PTR _fraction$[ebp]
	mulss	xmm0, DWORD PTR [ecx+edx]
	mov	edx, DWORD PTR _source$[ebp]
	addss	xmm0, DWORD PTR [edx+eax]
	mov	eax, 4
	imul	ecx, eax, 0
	movss	DWORD PTR _nextSeg$4[ebp+ecx], xmm0
	mov	edx, 4
	shl	edx, 0
	mov	eax, 4
	shl	eax, 0
	mov	ecx, DWORD PTR _delta$[ebp]
	movss	xmm0, DWORD PTR _fraction$[ebp]
	mulss	xmm0, DWORD PTR [ecx+eax]
	mov	eax, DWORD PTR _source$[ebp]
	addss	xmm0, DWORD PTR [eax+edx]
	mov	ecx, 4
	shl	ecx, 0
	movss	DWORD PTR _nextSeg$4[ebp+ecx], xmm0
	mov	edx, 4
	shl	edx, 1
	mov	eax, 4
	shl	eax, 1
	mov	ecx, DWORD PTR _delta$[ebp]
	movss	xmm0, DWORD PTR _fraction$[ebp]
	mulss	xmm0, DWORD PTR [ecx+eax]
	mov	eax, DWORD PTR _source$[ebp]
	movss	xmm1, DWORD PTR [eax+edx]
	addss	xmm1, xmm0
	movss	DWORD PTR tv204[ebp], xmm1
	mov	ecx, 4
	shl	ecx, 1
	movss	xmm0, DWORD PTR tv204[ebp]
	movss	DWORD PTR _nextSeg$4[ebp+ecx], xmm0

; 466  : 
; 467  : 		// distort using noise
; 468  : 		if( scale != 0 )

	movss	xmm0, DWORD PTR _scale$[ebp]
	ucomiss	xmm0, DWORD PTR __real@00000000
	lahf
	test	ah, 68					; 00000044H
	jnp	$LN15@R_DrawSegs

; 469  : 		{
; 470  : 			factor = rgNoise[noiseIndex>>16] * scale;

	mov	edx, DWORD PTR _noiseIndex$[ebp]
	sar	edx, 16					; 00000010H
	movss	xmm0, DWORD PTR _rgNoise[edx*4]
	mulss	xmm0, DWORD PTR _scale$[ebp]
	movss	DWORD PTR _factor$[ebp], xmm0

; 471  : 
; 472  : 			if( FBitSet( flags, FBEAM_SINENOISE ))

	mov	eax, DWORD PTR _flags$[ebp]
	and	eax, 16					; 00000010H
	je	$LN14@R_DrawSegs

; 473  : 			{
; 474  : 				float	s, c;
; 475  : 
; 476  : 				SinCos( fraction * M_PI * length + freq, &s, &c );

	lea	ecx, DWORD PTR _c$2[ebp]
	push	ecx
	lea	edx, DWORD PTR _s$3[ebp]
	push	edx
	movss	xmm0, DWORD PTR _fraction$[ebp]
	mulss	xmm0, DWORD PTR __real@40490fdb
	mulss	xmm0, DWORD PTR _length$[ebp]
	addss	xmm0, DWORD PTR _freq$[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	_SinCos
	add	esp, 12					; 0000000cH

; 477  : 				VectorMA( nextSeg.pos, (factor * s), RI.vup, nextSeg.pos );

	mov	eax, 4
	imul	ecx, eax, 0
	movss	xmm0, DWORD PTR _factor$[ebp]
	mulss	xmm0, DWORD PTR _s$3[ebp]
	mov	edx, 4
	imul	eax, edx, 0
	mulss	xmm0, DWORD PTR _RI[eax+248]
	addss	xmm0, DWORD PTR _nextSeg$4[ebp+ecx]
	mov	ecx, 4
	imul	edx, ecx, 0
	movss	DWORD PTR _nextSeg$4[ebp+edx], xmm0
	mov	eax, 4
	shl	eax, 0
	movss	xmm0, DWORD PTR _factor$[ebp]
	mulss	xmm0, DWORD PTR _s$3[ebp]
	mov	ecx, 4
	shl	ecx, 0
	mulss	xmm0, DWORD PTR _RI[ecx+248]
	addss	xmm0, DWORD PTR _nextSeg$4[ebp+eax]
	mov	edx, 4
	shl	edx, 0
	movss	DWORD PTR _nextSeg$4[ebp+edx], xmm0
	mov	eax, 4
	shl	eax, 1
	movss	xmm0, DWORD PTR _factor$[ebp]
	mulss	xmm0, DWORD PTR _s$3[ebp]
	mov	ecx, 4
	shl	ecx, 1
	mulss	xmm0, DWORD PTR _RI[ecx+248]
	movss	xmm1, DWORD PTR _nextSeg$4[ebp+eax]
	addss	xmm1, xmm0
	movss	DWORD PTR tv250[ebp], xmm1
	mov	edx, 4
	shl	edx, 1
	movss	xmm0, DWORD PTR tv250[ebp]
	movss	DWORD PTR _nextSeg$4[ebp+edx], xmm0

; 478  : 
; 479  : 				// rotate the noise along the perpendicluar axis a bit to keep the bolt from looking diagonal
; 480  : 				VectorMA( nextSeg.pos, (factor * c), RI.vright, nextSeg.pos );

	mov	eax, 4
	imul	ecx, eax, 0
	movss	xmm0, DWORD PTR _factor$[ebp]
	mulss	xmm0, DWORD PTR _c$2[ebp]
	mov	edx, 4
	imul	eax, edx, 0
	mulss	xmm0, DWORD PTR _RI[eax+236]
	addss	xmm0, DWORD PTR _nextSeg$4[ebp+ecx]
	mov	ecx, 4
	imul	edx, ecx, 0
	movss	DWORD PTR _nextSeg$4[ebp+edx], xmm0
	mov	eax, 4
	shl	eax, 0
	movss	xmm0, DWORD PTR _factor$[ebp]
	mulss	xmm0, DWORD PTR _c$2[ebp]
	mov	ecx, 4
	shl	ecx, 0
	mulss	xmm0, DWORD PTR _RI[ecx+236]
	addss	xmm0, DWORD PTR _nextSeg$4[ebp+eax]
	mov	edx, 4
	shl	edx, 0
	movss	DWORD PTR _nextSeg$4[ebp+edx], xmm0
	mov	eax, 4
	shl	eax, 1
	movss	xmm0, DWORD PTR _factor$[ebp]
	mulss	xmm0, DWORD PTR _c$2[ebp]
	mov	ecx, 4
	shl	ecx, 1
	mulss	xmm0, DWORD PTR _RI[ecx+236]
	movss	xmm1, DWORD PTR _nextSeg$4[ebp+eax]
	addss	xmm1, xmm0
	movss	DWORD PTR tv283[ebp], xmm1
	mov	edx, 4
	shl	edx, 1
	movss	xmm0, DWORD PTR tv283[ebp]
	movss	DWORD PTR _nextSeg$4[ebp+edx], xmm0

; 481  : 			}

	jmp	$LN15@R_DrawSegs
$LN14@R_DrawSegs:

; 482  : 			else
; 483  : 			{
; 484  : 				VectorMA( nextSeg.pos, factor, perp1, nextSeg.pos );

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, 4
	imul	eax, edx, 0
	movss	xmm0, DWORD PTR _factor$[ebp]
	mulss	xmm0, DWORD PTR _perp1$[ebp+eax]
	addss	xmm0, DWORD PTR _nextSeg$4[ebp+ecx]
	mov	ecx, 4
	imul	edx, ecx, 0
	movss	DWORD PTR _nextSeg$4[ebp+edx], xmm0
	mov	eax, 4
	shl	eax, 0
	mov	ecx, 4
	shl	ecx, 0
	movss	xmm0, DWORD PTR _factor$[ebp]
	mulss	xmm0, DWORD PTR _perp1$[ebp+ecx]
	addss	xmm0, DWORD PTR _nextSeg$4[ebp+eax]
	mov	edx, 4
	shl	edx, 0
	movss	DWORD PTR _nextSeg$4[ebp+edx], xmm0
	mov	eax, 4
	shl	eax, 1
	mov	ecx, 4
	shl	ecx, 1
	movss	xmm0, DWORD PTR _factor$[ebp]
	mulss	xmm0, DWORD PTR _perp1$[ebp+ecx]
	movss	xmm1, DWORD PTR _nextSeg$4[ebp+eax]
	addss	xmm1, xmm0
	movss	DWORD PTR tv307[ebp], xmm1
	mov	edx, 4
	shl	edx, 1
	movss	xmm0, DWORD PTR tv307[ebp]
	movss	DWORD PTR _nextSeg$4[ebp+edx], xmm0
$LN15@R_DrawSegs:

; 485  : 			}
; 486  : 		}
; 487  : 
; 488  : 		// specify the next segment.
; 489  : 		nextSeg.width = width * 2.0f;

	movss	xmm0, DWORD PTR _width$[ebp]
	mulss	xmm0, DWORD PTR __real@40000000
	movss	DWORD PTR _nextSeg$4[ebp+16], xmm0

; 490  : 		nextSeg.texcoord = vLast;

	movss	xmm0, DWORD PTR _vLast$[ebp]
	movss	DWORD PTR _nextSeg$4[ebp+12], xmm0

; 491  : 
; 492  :  		if( segs_drawn > 0 )

	cmp	DWORD PTR _segs_drawn$[ebp], 0
	jle	$LN16@R_DrawSegs

; 493  : 		{
; 494  : 			// Get a vector that is perpendicular to us and perpendicular to the beam.
; 495  : 			// This is used to fatten the beam.
; 496  : 			vec3_t	vNormal, vAveNormal;
; 497  : 
; 498  : 			R_BeamComputeNormal( curSeg.pos, nextSeg.pos, vNormal );

	lea	eax, DWORD PTR _vNormal$7[ebp]
	push	eax
	lea	ecx, DWORD PTR _nextSeg$4[ebp]
	push	ecx
	lea	edx, DWORD PTR _curSeg$[ebp]
	push	edx
	call	_R_BeamComputeNormal
	add	esp, 12					; 0000000cH

; 499  : 
; 500  : 			if( segs_drawn > 1 )

	cmp	DWORD PTR _segs_drawn$[ebp], 1
	jle	$LN17@R_DrawSegs

; 501  : 			{
; 502  : 				// Average this with the previous normal
; 503  : 				VectorAdd( vNormal, vLastNormal, vAveNormal );

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, 4
	imul	eax, edx, 0
	movss	xmm0, DWORD PTR _vNormal$7[ebp+ecx]
	addss	xmm0, DWORD PTR _vLastNormal$[ebp+eax]
	mov	ecx, 4
	imul	edx, ecx, 0
	movss	DWORD PTR _vAveNormal$8[ebp+edx], xmm0
	mov	eax, 4
	shl	eax, 0
	mov	ecx, 4
	shl	ecx, 0
	movss	xmm0, DWORD PTR _vNormal$7[ebp+eax]
	addss	xmm0, DWORD PTR _vLastNormal$[ebp+ecx]
	mov	edx, 4
	shl	edx, 0
	movss	DWORD PTR _vAveNormal$8[ebp+edx], xmm0
	mov	eax, 4
	shl	eax, 1
	mov	ecx, 4
	shl	ecx, 1
	movss	xmm0, DWORD PTR _vNormal$7[ebp+eax]
	addss	xmm0, DWORD PTR _vLastNormal$[ebp+ecx]
	movss	DWORD PTR tv366[ebp], xmm0
	mov	edx, 4
	shl	edx, 1
	movss	xmm0, DWORD PTR tv366[ebp]
	movss	DWORD PTR _vAveNormal$8[ebp+edx], xmm0

; 504  : 				VectorScale( vAveNormal, 0.5f, vAveNormal );

	mov	eax, 4
	imul	ecx, eax, 0
	movss	xmm0, DWORD PTR _vAveNormal$8[ebp+ecx]
	mulss	xmm0, DWORD PTR __real@3f000000
	mov	edx, 4
	imul	eax, edx, 0
	movss	DWORD PTR _vAveNormal$8[ebp+eax], xmm0
	mov	ecx, 4
	shl	ecx, 0
	movss	xmm0, DWORD PTR _vAveNormal$8[ebp+ecx]
	mulss	xmm0, DWORD PTR __real@3f000000
	mov	edx, 4
	shl	edx, 0
	movss	DWORD PTR _vAveNormal$8[ebp+edx], xmm0
	mov	eax, 4
	shl	eax, 1
	movss	xmm0, DWORD PTR _vAveNormal$8[ebp+eax]
	mulss	xmm0, DWORD PTR __real@3f000000
	movss	DWORD PTR tv381[ebp], xmm0
	mov	ecx, 4
	shl	ecx, 1
	movss	xmm0, DWORD PTR tv381[ebp]
	movss	DWORD PTR _vAveNormal$8[ebp+ecx], xmm0

; 505  : 				VectorNormalizeFast( vAveNormal );

	mov	edx, 4
	imul	eax, edx, 0
	mov	ecx, 4
	imul	edx, ecx, 0
	movss	xmm0, DWORD PTR _vAveNormal$8[ebp+eax]
	mulss	xmm0, DWORD PTR _vAveNormal$8[ebp+edx]
	mov	eax, 4
	shl	eax, 0
	mov	ecx, 4
	shl	ecx, 0
	movss	xmm1, DWORD PTR _vAveNormal$8[ebp+eax]
	mulss	xmm1, DWORD PTR _vAveNormal$8[ebp+ecx]
	addss	xmm0, xmm1
	mov	edx, 4
	shl	edx, 1
	mov	eax, 4
	shl	eax, 1
	movss	xmm1, DWORD PTR _vAveNormal$8[ebp+edx]
	mulss	xmm1, DWORD PTR _vAveNormal$8[ebp+eax]
	addss	xmm0, xmm1
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	_rsqrt
	add	esp, 4
	fstp	DWORD PTR _ilength$1[ebp]
	mov	ecx, 4
	imul	edx, ecx, 0
	movss	xmm0, DWORD PTR _vAveNormal$8[ebp+edx]
	mulss	xmm0, DWORD PTR _ilength$1[ebp]
	mov	eax, 4
	imul	ecx, eax, 0
	movss	DWORD PTR _vAveNormal$8[ebp+ecx], xmm0
	mov	edx, 4
	shl	edx, 0
	movss	xmm0, DWORD PTR _vAveNormal$8[ebp+edx]
	mulss	xmm0, DWORD PTR _ilength$1[ebp]
	mov	eax, 4
	shl	eax, 0
	movss	DWORD PTR _vAveNormal$8[ebp+eax], xmm0
	mov	ecx, 4
	shl	ecx, 1
	movss	xmm0, DWORD PTR _vAveNormal$8[ebp+ecx]
	mulss	xmm0, DWORD PTR _ilength$1[ebp]
	mov	edx, 4
	shl	edx, 1
	movss	DWORD PTR _vAveNormal$8[ebp+edx], xmm0

; 506  : 			}

	jmp	SHORT $LN18@R_DrawSegs
$LN17@R_DrawSegs:

; 507  : 			else
; 508  : 			{
; 509  : 				VectorCopy( vNormal, vAveNormal );

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, 4
	imul	eax, edx, 0
	mov	ecx, DWORD PTR _vNormal$7[ebp+ecx]
	mov	DWORD PTR _vAveNormal$8[ebp+eax], ecx
	mov	edx, 4
	shl	edx, 0
	mov	eax, 4
	shl	eax, 0
	mov	ecx, DWORD PTR _vNormal$7[ebp+edx]
	mov	DWORD PTR _vAveNormal$8[ebp+eax], ecx
	mov	edx, 4
	shl	edx, 1
	mov	eax, 4
	shl	eax, 1
	mov	ecx, DWORD PTR _vNormal$7[ebp+edx]
	mov	DWORD PTR _vAveNormal$8[ebp+eax], ecx
$LN18@R_DrawSegs:

; 510  : 			}
; 511  : 
; 512  : 			VectorCopy( vNormal, vLastNormal );

	mov	edx, 4
	imul	eax, edx, 0
	mov	ecx, 4
	imul	edx, ecx, 0
	mov	eax, DWORD PTR _vNormal$7[ebp+eax]
	mov	DWORD PTR _vLastNormal$[ebp+edx], eax
	mov	ecx, 4
	shl	ecx, 0
	mov	edx, 4
	shl	edx, 0
	mov	eax, DWORD PTR _vNormal$7[ebp+ecx]
	mov	DWORD PTR _vLastNormal$[ebp+edx], eax
	mov	ecx, 4
	shl	ecx, 1
	mov	edx, 4
	shl	edx, 1
	mov	eax, DWORD PTR _vNormal$7[ebp+ecx]
	mov	DWORD PTR _vLastNormal$[ebp+edx], eax

; 513  : 
; 514  : 			// draw regular segment
; 515  : 			VectorMA( curSeg.pos, ( curSeg.width * 0.5f ), vAveNormal, vPoint1 );

	mov	ecx, 4
	imul	edx, ecx, 0
	movss	xmm0, DWORD PTR _curSeg$[ebp+16]
	mulss	xmm0, DWORD PTR __real@3f000000
	mov	eax, 4
	imul	ecx, eax, 0
	mulss	xmm0, DWORD PTR _vAveNormal$8[ebp+ecx]
	addss	xmm0, DWORD PTR _curSeg$[ebp+edx]
	mov	edx, 4
	imul	eax, edx, 0
	movss	DWORD PTR _vPoint1$5[ebp+eax], xmm0
	mov	ecx, 4
	shl	ecx, 0
	movss	xmm0, DWORD PTR _curSeg$[ebp+16]
	mulss	xmm0, DWORD PTR __real@3f000000
	mov	edx, 4
	shl	edx, 0
	mulss	xmm0, DWORD PTR _vAveNormal$8[ebp+edx]
	addss	xmm0, DWORD PTR _curSeg$[ebp+ecx]
	mov	eax, 4
	shl	eax, 0
	movss	DWORD PTR _vPoint1$5[ebp+eax], xmm0
	mov	ecx, 4
	shl	ecx, 1
	movss	xmm0, DWORD PTR _curSeg$[ebp+16]
	mulss	xmm0, DWORD PTR __real@3f000000
	mov	edx, 4
	shl	edx, 1
	mulss	xmm0, DWORD PTR _vAveNormal$8[ebp+edx]
	movss	xmm1, DWORD PTR _curSeg$[ebp+ecx]
	addss	xmm1, xmm0
	movss	DWORD PTR tv473[ebp], xmm1
	mov	eax, 4
	shl	eax, 1
	movss	xmm0, DWORD PTR tv473[ebp]
	movss	DWORD PTR _vPoint1$5[ebp+eax], xmm0

; 516  : 			VectorMA( curSeg.pos, (-curSeg.width * 0.5f ), vAveNormal, vPoint2 );

	mov	ecx, 4
	imul	edx, ecx, 0
	movss	xmm0, DWORD PTR _curSeg$[ebp+16]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mulss	xmm0, DWORD PTR __real@3f000000
	mov	eax, 4
	imul	ecx, eax, 0
	mulss	xmm0, DWORD PTR _vAveNormal$8[ebp+ecx]
	addss	xmm0, DWORD PTR _curSeg$[ebp+edx]
	mov	edx, 4
	imul	eax, edx, 0
	movss	DWORD PTR _vPoint2$6[ebp+eax], xmm0
	mov	ecx, 4
	shl	ecx, 0
	movss	xmm0, DWORD PTR _curSeg$[ebp+16]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mulss	xmm0, DWORD PTR __real@3f000000
	mov	edx, 4
	shl	edx, 0
	mulss	xmm0, DWORD PTR _vAveNormal$8[ebp+edx]
	addss	xmm0, DWORD PTR _curSeg$[ebp+ecx]
	mov	eax, 4
	shl	eax, 0
	movss	DWORD PTR _vPoint2$6[ebp+eax], xmm0
	mov	ecx, 4
	shl	ecx, 1
	movss	xmm0, DWORD PTR _curSeg$[ebp+16]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mulss	xmm0, DWORD PTR __real@3f000000
	mov	edx, 4
	shl	edx, 1
	mulss	xmm0, DWORD PTR _vAveNormal$8[ebp+edx]
	movss	xmm1, DWORD PTR _curSeg$[ebp+ecx]
	addss	xmm1, xmm0
	movss	DWORD PTR tv509[ebp], xmm1
	mov	eax, 4
	shl	eax, 1
	movss	xmm0, DWORD PTR tv509[ebp]
	movss	DWORD PTR _vPoint2$6[ebp+eax], xmm0

; 517  : 
; 518  : 			pglTexCoord2f( 0.0f, curSeg.texcoord );

	push	ecx
	movss	xmm0, DWORD PTR _curSeg$[ebp+12]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	xorps	xmm0, xmm0
	movss	DWORD PTR [esp], xmm0
	call	DWORD PTR _pglTexCoord2f

; 519  : 			TriBrightness( brightness );

	push	ecx
	movss	xmm0, DWORD PTR _brightness$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	_TriBrightness
	add	esp, 4

; 520  : 			pglNormal3fv( vAveNormal );

	lea	ecx, DWORD PTR _vAveNormal$8[ebp]
	push	ecx
	call	DWORD PTR _pglNormal3fv

; 521  : 			pglVertex3fv( vPoint1 );

	lea	edx, DWORD PTR _vPoint1$5[ebp]
	push	edx
	call	DWORD PTR _pglVertex3fv

; 522  : 
; 523  : 			pglTexCoord2f( 1.0f, curSeg.texcoord );

	push	ecx
	movss	xmm0, DWORD PTR _curSeg$[ebp+12]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [esp], xmm0
	call	DWORD PTR _pglTexCoord2f

; 524  : 			TriBrightness( brightness );

	push	ecx
	movss	xmm0, DWORD PTR _brightness$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	_TriBrightness
	add	esp, 4

; 525  : 			pglNormal3fv( vAveNormal );

	lea	eax, DWORD PTR _vAveNormal$8[ebp]
	push	eax
	call	DWORD PTR _pglNormal3fv

; 526  : 			pglVertex3fv( vPoint2 );

	lea	ecx, DWORD PTR _vPoint2$6[ebp]
	push	ecx
	call	DWORD PTR _pglVertex3fv
$LN16@R_DrawSegs:

; 527  : 		}
; 528  : 
; 529  : 		curSeg = nextSeg;

	mov	edx, DWORD PTR _nextSeg$4[ebp]
	mov	DWORD PTR _curSeg$[ebp], edx
	mov	eax, DWORD PTR _nextSeg$4[ebp+4]
	mov	DWORD PTR _curSeg$[ebp+4], eax
	mov	ecx, DWORD PTR _nextSeg$4[ebp+8]
	mov	DWORD PTR _curSeg$[ebp+8], ecx
	mov	edx, DWORD PTR _nextSeg$4[ebp+12]
	mov	DWORD PTR _curSeg$[ebp+12], edx
	mov	eax, DWORD PTR _nextSeg$4[ebp+16]
	mov	DWORD PTR _curSeg$[ebp+16], eax

; 530  : 		segs_drawn++;

	mov	ecx, DWORD PTR _segs_drawn$[ebp]
	add	ecx, 1
	mov	DWORD PTR _segs_drawn$[ebp], ecx

; 531  : 
; 532  : 		if( FBitSet( flags, FBEAM_SHADEIN ) && FBitSet( flags, FBEAM_SHADEOUT ))

	mov	edx, DWORD PTR _flags$[ebp]
	and	edx, 64					; 00000040H
	je	SHORT $LN19@R_DrawSegs
	mov	eax, DWORD PTR _flags$[ebp]
	and	eax, 128				; 00000080H
	je	SHORT $LN19@R_DrawSegs

; 533  : 		{
; 534  : 			if( fraction < 0.5f ) brightness = fraction;

	movss	xmm0, DWORD PTR __real@3f000000
	comiss	xmm0, DWORD PTR _fraction$[ebp]
	jbe	SHORT $LN21@R_DrawSegs
	movss	xmm0, DWORD PTR _fraction$[ebp]
	movss	DWORD PTR _brightness$[ebp], xmm0
	jmp	SHORT $LN22@R_DrawSegs
$LN21@R_DrawSegs:

; 535  : 			else brightness = ( 1.0f - fraction );

	movss	xmm0, DWORD PTR __real@3f800000
	subss	xmm0, DWORD PTR _fraction$[ebp]
	movss	DWORD PTR _brightness$[ebp], xmm0
$LN22@R_DrawSegs:

; 536  : 		}

	jmp	SHORT $LN25@R_DrawSegs
$LN19@R_DrawSegs:

; 537  : 		else if( FBitSet( flags, FBEAM_SHADEIN ))

	mov	ecx, DWORD PTR _flags$[ebp]
	and	ecx, 64					; 00000040H
	je	SHORT $LN23@R_DrawSegs

; 538  : 		{
; 539  : 			brightness = fraction;

	movss	xmm0, DWORD PTR _fraction$[ebp]
	movss	DWORD PTR _brightness$[ebp], xmm0

; 540  : 		}

	jmp	SHORT $LN25@R_DrawSegs
$LN23@R_DrawSegs:

; 541  : 		else if( FBitSet( flags, FBEAM_SHADEOUT ))

	mov	edx, DWORD PTR _flags$[ebp]
	and	edx, 128				; 00000080H
	je	SHORT $LN25@R_DrawSegs

; 542  : 		{
; 543  : 			brightness = 1.0f - fraction;

	movss	xmm0, DWORD PTR __real@3f800000
	subss	xmm0, DWORD PTR _fraction$[ebp]
	movss	DWORD PTR _brightness$[ebp], xmm0
$LN25@R_DrawSegs:

; 544  : 		}
; 545  : 
; 546  :  		if( segs_drawn == total_segs )

	mov	eax, DWORD PTR _segs_drawn$[ebp]
	cmp	eax, DWORD PTR _total_segs$[ebp]
	jne	$LN26@R_DrawSegs

; 547  : 		{
; 548  : 			// draw the last segment
; 549  : 			VectorMA( curSeg.pos, ( curSeg.width * 0.5f ), vLastNormal, vPoint1 );

	mov	ecx, 4
	imul	edx, ecx, 0
	movss	xmm0, DWORD PTR _curSeg$[ebp+16]
	mulss	xmm0, DWORD PTR __real@3f000000
	mov	eax, 4
	imul	ecx, eax, 0
	mulss	xmm0, DWORD PTR _vLastNormal$[ebp+ecx]
	addss	xmm0, DWORD PTR _curSeg$[ebp+edx]
	mov	edx, 4
	imul	eax, edx, 0
	movss	DWORD PTR _vPoint1$5[ebp+eax], xmm0
	mov	ecx, 4
	shl	ecx, 0
	movss	xmm0, DWORD PTR _curSeg$[ebp+16]
	mulss	xmm0, DWORD PTR __real@3f000000
	mov	edx, 4
	shl	edx, 0
	mulss	xmm0, DWORD PTR _vLastNormal$[ebp+edx]
	addss	xmm0, DWORD PTR _curSeg$[ebp+ecx]
	mov	eax, 4
	shl	eax, 0
	movss	DWORD PTR _vPoint1$5[ebp+eax], xmm0
	mov	ecx, 4
	shl	ecx, 1
	movss	xmm0, DWORD PTR _curSeg$[ebp+16]
	mulss	xmm0, DWORD PTR __real@3f000000
	mov	edx, 4
	shl	edx, 1
	mulss	xmm0, DWORD PTR _vLastNormal$[ebp+edx]
	movss	xmm1, DWORD PTR _curSeg$[ebp+ecx]
	addss	xmm1, xmm0
	movss	DWORD PTR tv566[ebp], xmm1
	mov	eax, 4
	shl	eax, 1
	movss	xmm0, DWORD PTR tv566[ebp]
	movss	DWORD PTR _vPoint1$5[ebp+eax], xmm0

; 550  : 			VectorMA( curSeg.pos, (-curSeg.width * 0.5f ), vLastNormal, vPoint2 );

	mov	ecx, 4
	imul	edx, ecx, 0
	movss	xmm0, DWORD PTR _curSeg$[ebp+16]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mulss	xmm0, DWORD PTR __real@3f000000
	mov	eax, 4
	imul	ecx, eax, 0
	mulss	xmm0, DWORD PTR _vLastNormal$[ebp+ecx]
	addss	xmm0, DWORD PTR _curSeg$[ebp+edx]
	mov	edx, 4
	imul	eax, edx, 0
	movss	DWORD PTR _vPoint2$6[ebp+eax], xmm0
	mov	ecx, 4
	shl	ecx, 0
	movss	xmm0, DWORD PTR _curSeg$[ebp+16]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mulss	xmm0, DWORD PTR __real@3f000000
	mov	edx, 4
	shl	edx, 0
	mulss	xmm0, DWORD PTR _vLastNormal$[ebp+edx]
	addss	xmm0, DWORD PTR _curSeg$[ebp+ecx]
	mov	eax, 4
	shl	eax, 0
	movss	DWORD PTR _vPoint2$6[ebp+eax], xmm0
	mov	ecx, 4
	shl	ecx, 1
	movss	xmm0, DWORD PTR _curSeg$[ebp+16]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mulss	xmm0, DWORD PTR __real@3f000000
	mov	edx, 4
	shl	edx, 1
	mulss	xmm0, DWORD PTR _vLastNormal$[ebp+edx]
	movss	xmm1, DWORD PTR _curSeg$[ebp+ecx]
	addss	xmm1, xmm0
	movss	DWORD PTR tv602[ebp], xmm1
	mov	eax, 4
	shl	eax, 1
	movss	xmm0, DWORD PTR tv602[ebp]
	movss	DWORD PTR _vPoint2$6[ebp+eax], xmm0

; 551  : 
; 552  : 			// specify the points.
; 553  : 			pglTexCoord2f( 0.0f, curSeg.texcoord );

	push	ecx
	movss	xmm0, DWORD PTR _curSeg$[ebp+12]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	xorps	xmm0, xmm0
	movss	DWORD PTR [esp], xmm0
	call	DWORD PTR _pglTexCoord2f

; 554  : 			TriBrightness( brightness );

	push	ecx
	movss	xmm0, DWORD PTR _brightness$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	_TriBrightness
	add	esp, 4

; 555  : 			pglNormal3fv( vLastNormal );

	lea	ecx, DWORD PTR _vLastNormal$[ebp]
	push	ecx
	call	DWORD PTR _pglNormal3fv

; 556  : 			pglVertex3fv( vPoint1 );

	lea	edx, DWORD PTR _vPoint1$5[ebp]
	push	edx
	call	DWORD PTR _pglVertex3fv

; 557  : 
; 558  : 			pglTexCoord2f( 1.0f, curSeg.texcoord );

	push	ecx
	movss	xmm0, DWORD PTR _curSeg$[ebp+12]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [esp], xmm0
	call	DWORD PTR _pglTexCoord2f

; 559  : 			TriBrightness( brightness );

	push	ecx
	movss	xmm0, DWORD PTR _brightness$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	_TriBrightness
	add	esp, 4

; 560  : 			pglNormal3fv( vLastNormal );

	lea	eax, DWORD PTR _vLastNormal$[ebp]
	push	eax
	call	DWORD PTR _pglNormal3fv

; 561  : 			pglVertex3fv( vPoint2 );

	lea	ecx, DWORD PTR _vPoint2$6[ebp]
	push	ecx
	call	DWORD PTR _pglVertex3fv
$LN26@R_DrawSegs:

; 562  : 		}
; 563  : 
; 564  : 		vLast += vStep; // Advance texture scroll (v axis only)

	movss	xmm0, DWORD PTR _vLast$[ebp]
	addss	xmm0, DWORD PTR _vStep$[ebp]
	movss	DWORD PTR _vLast$[ebp], xmm0

; 565  : 		noiseIndex += noiseStep;

	mov	edx, DWORD PTR _noiseIndex$[ebp]
	add	edx, DWORD PTR _noiseStep$[ebp]
	mov	DWORD PTR _noiseIndex$[ebp], edx

; 566  : 	}

	jmp	$LN2@R_DrawSegs
$LN3@R_DrawSegs:

; 567  : }

	pop	esi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_R_DrawSegs ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xash_build4529_src\engine\client\gl_beams.c
_TEXT	SEGMENT
_i$ = -32						; size = 4
_mins$ = -28						; size = 12
_maxs$ = -16						; size = 12
__$ArrayPad$ = -4					; size = 4
_start$ = 8						; size = 4
_end$ = 12						; size = 4
_pvsOnly$ = 16						; size = 4
_R_BeamCull PROC

; 344  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 32					; 00000020H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	esi

; 345  : 	vec3_t	mins, maxs;
; 346  : 	int	i;
; 347  : 
; 348  : 	for( i = 0; i < 3; i++ )

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN4@R_BeamCull
$LN2@R_BeamCull:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN4@R_BeamCull:
	cmp	DWORD PTR _i$[ebp], 3
	jge	$LN3@R_BeamCull

; 349  : 	{
; 350  : 		if( start[i] < end[i] )

	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR _end$[ebp]
	mov	eax, DWORD PTR _i$[ebp]
	mov	esi, DWORD PTR _start$[ebp]
	movss	xmm0, DWORD PTR [edx+ecx*4]
	comiss	xmm0, DWORD PTR [esi+eax*4]
	jbe	SHORT $LN5@R_BeamCull

; 351  : 		{
; 352  : 			mins[i] = start[i];

	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR _start$[ebp]
	mov	edx, DWORD PTR [eax+edx*4]
	mov	DWORD PTR _mins$[ebp+ecx*4], edx

; 353  : 			maxs[i] = end[i];

	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR _end$[ebp]
	mov	ecx, DWORD PTR [edx+ecx*4]
	mov	DWORD PTR _maxs$[ebp+eax*4], ecx

; 354  : 		}

	jmp	SHORT $LN6@R_BeamCull
$LN5@R_BeamCull:

; 355  : 		else
; 356  : 		{
; 357  : 			mins[i] = end[i];

	mov	edx, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _end$[ebp]
	mov	eax, DWORD PTR [ecx+eax*4]
	mov	DWORD PTR _mins$[ebp+edx*4], eax

; 358  : 			maxs[i] = start[i];

	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR _start$[ebp]
	mov	edx, DWORD PTR [eax+edx*4]
	mov	DWORD PTR _maxs$[ebp+ecx*4], edx
$LN6@R_BeamCull:

; 359  : 		}
; 360  : 		
; 361  : 		// don't let it be zero sized
; 362  : 		if( mins[i] == maxs[i] )

	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	movss	xmm0, DWORD PTR _mins$[ebp+eax*4]
	ucomiss	xmm0, DWORD PTR _maxs$[ebp+ecx*4]
	lahf
	test	ah, 68					; 00000044H
	jp	SHORT $LN7@R_BeamCull

; 363  : 			maxs[i] += 1.0f;

	mov	edx, DWORD PTR _i$[ebp]
	movss	xmm0, DWORD PTR _maxs$[ebp+edx*4]
	addss	xmm0, DWORD PTR __real@3f800000
	mov	eax, DWORD PTR _i$[ebp]
	movss	DWORD PTR _maxs$[ebp+eax*4], xmm0
$LN7@R_BeamCull:

; 364  : 	}

	jmp	$LN2@R_BeamCull
$LN3@R_BeamCull:

; 365  : 
; 366  : 	// check bbox
; 367  : 	if( Mod_BoxVisible( mins, maxs, Mod_GetCurrentVis( )))

	call	_Mod_GetCurrentVis
	push	eax
	lea	ecx, DWORD PTR _maxs$[ebp]
	push	ecx
	lea	edx, DWORD PTR _mins$[ebp]
	push	edx
	call	_Mod_BoxVisible
	add	esp, 12					; 0000000cH
	test	eax, eax
	je	SHORT $LN9@R_BeamCull

; 368  : 	{
; 369  : 		if( pvsOnly || !R_CullBox( mins, maxs ))

	cmp	DWORD PTR _pvsOnly$[ebp], 0
	jne	SHORT $LN10@R_BeamCull
	lea	eax, DWORD PTR _maxs$[ebp]
	push	eax
	lea	ecx, DWORD PTR _mins$[ebp]
	push	ecx
	call	_R_CullBox
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN9@R_BeamCull
$LN10@R_BeamCull:

; 370  : 		{
; 371  : 			// beam is visible
; 372  : 			return false;	

	xor	eax, eax
	jmp	SHORT $LN1@R_BeamCull
$LN9@R_BeamCull:

; 373  : 		}
; 374  : 	}
; 375  : 
; 376  : 	// beam is culled
; 377  : 	return true;

	mov	eax, 1
$LN1@R_BeamCull:

; 378  : }

	pop	esi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_R_BeamCull ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xash_build4529_src\engine\client\gl_beams.c
_TEXT	SEGMENT
_end$1 = -8						; size = 4
_start$2 = -4						; size = 4
_pbeam$ = 8						; size = 4
_R_BeamRecomputeEndpoints PROC

; 292  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 293  : 	if( FBitSet( pbeam->flags, FBEAM_STARTENTITY ))

	mov	eax, DWORD PTR _pbeam$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	and	ecx, 1
	je	SHORT $LN6@R_BeamReco

; 294  : 	{
; 295  : 		cl_entity_t *start = R_BeamGetEntity( pbeam->startEntity );

	mov	edx, DWORD PTR _pbeam$[ebp]
	mov	eax, DWORD PTR [edx+100]
	push	eax
	call	_R_BeamGetEntity
	add	esp, 4
	mov	DWORD PTR _start$2[ebp], eax

; 296  : 
; 297  : 		if( R_BeamComputePoint( pbeam->startEntity, pbeam->source ))

	mov	ecx, DWORD PTR _pbeam$[ebp]
	add	ecx, 12					; 0000000cH
	push	ecx
	mov	edx, DWORD PTR _pbeam$[ebp]
	mov	eax, DWORD PTR [edx+100]
	push	eax
	call	_R_BeamComputePoint
	add	esp, 8
	test	eax, eax
	je	SHORT $LN3@R_BeamReco

; 298  : 		{
; 299  : 			if( !pbeam->pFollowModel )

	mov	ecx, DWORD PTR _pbeam$[ebp]
	cmp	DWORD PTR [ecx+116], 0
	jne	SHORT $LN5@R_BeamReco

; 300  : 				pbeam->pFollowModel = start->model;

	mov	edx, DWORD PTR _pbeam$[ebp]
	mov	eax, DWORD PTR _start$2[ebp]
	mov	ecx, DWORD PTR [eax+2964]
	mov	DWORD PTR [edx+116], ecx
$LN5@R_BeamReco:

; 301  : 			SetBits( pbeam->flags, FBEAM_STARTVISIBLE );

	mov	edx, DWORD PTR _pbeam$[ebp]
	mov	eax, DWORD PTR [edx+8]
	or	eax, 268435456				; 10000000H
	mov	ecx, DWORD PTR _pbeam$[ebp]
	mov	DWORD PTR [ecx+8], eax

; 302  : 		}

	jmp	SHORT $LN6@R_BeamReco
$LN3@R_BeamReco:

; 303  : 		else if( !FBitSet( pbeam->flags, FBEAM_FOREVER ))

	mov	edx, DWORD PTR _pbeam$[ebp]
	mov	eax, DWORD PTR [edx+8]
	and	eax, -2147483648			; 80000000H
	jne	SHORT $LN6@R_BeamReco

; 304  : 		{
; 305  : 			ClearBits( pbeam->flags, FBEAM_STARTENTITY );

	mov	ecx, DWORD PTR _pbeam$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	and	edx, -2					; fffffffeH
	mov	eax, DWORD PTR _pbeam$[ebp]
	mov	DWORD PTR [eax+8], edx
$LN6@R_BeamReco:

; 306  : 		}
; 307  : 	}
; 308  : 
; 309  : 	if( FBitSet( pbeam->flags, FBEAM_ENDENTITY ))

	mov	ecx, DWORD PTR _pbeam$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	and	edx, 2
	je	$LN12@R_BeamReco

; 310  : 	{
; 311  : 		cl_entity_t *end = R_BeamGetEntity( pbeam->endEntity );

	mov	eax, DWORD PTR _pbeam$[ebp]
	mov	ecx, DWORD PTR [eax+104]
	push	ecx
	call	_R_BeamGetEntity
	add	esp, 4
	mov	DWORD PTR _end$1[ebp], eax

; 312  : 
; 313  : 		if( R_BeamComputePoint( pbeam->endEntity, pbeam->target ))

	mov	edx, DWORD PTR _pbeam$[ebp]
	add	edx, 24					; 00000018H
	push	edx
	mov	eax, DWORD PTR _pbeam$[ebp]
	mov	ecx, DWORD PTR [eax+104]
	push	ecx
	call	_R_BeamComputePoint
	add	esp, 8
	test	eax, eax
	je	SHORT $LN8@R_BeamReco

; 314  : 		{
; 315  : 			if( !pbeam->pFollowModel )

	mov	edx, DWORD PTR _pbeam$[ebp]
	cmp	DWORD PTR [edx+116], 0
	jne	SHORT $LN10@R_BeamReco

; 316  : 				pbeam->pFollowModel = end->model;

	mov	eax, DWORD PTR _pbeam$[ebp]
	mov	ecx, DWORD PTR _end$1[ebp]
	mov	edx, DWORD PTR [ecx+2964]
	mov	DWORD PTR [eax+116], edx
$LN10@R_BeamReco:

; 317  : 			SetBits( pbeam->flags, FBEAM_ENDVISIBLE );

	mov	eax, DWORD PTR _pbeam$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	or	ecx, 536870912				; 20000000H
	mov	edx, DWORD PTR _pbeam$[ebp]
	mov	DWORD PTR [edx+8], ecx

; 318  : 		}

	jmp	SHORT $LN12@R_BeamReco
$LN8@R_BeamReco:

; 319  : 		else if( !FBitSet( pbeam->flags, FBEAM_FOREVER ))

	mov	eax, DWORD PTR _pbeam$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	and	ecx, -2147483648			; 80000000H
	jne	SHORT $LN11@R_BeamReco

; 320  : 		{
; 321  : 			ClearBits( pbeam->flags, FBEAM_ENDENTITY );

	mov	edx, DWORD PTR _pbeam$[ebp]
	mov	eax, DWORD PTR [edx+8]
	and	eax, -3					; fffffffdH
	mov	ecx, DWORD PTR _pbeam$[ebp]
	mov	DWORD PTR [ecx+8], eax

; 322  : 			pbeam->die = cl.time;

	cvtsd2ss xmm0, QWORD PTR _cl+1525848
	mov	edx, DWORD PTR _pbeam$[ebp]
	movss	DWORD PTR [edx+56], xmm0

; 323  : 			return false;

	xor	eax, eax
	jmp	SHORT $LN1@R_BeamReco

; 324  : 		}

	jmp	SHORT $LN12@R_BeamReco
$LN11@R_BeamReco:

; 325  : 		else
; 326  : 		{
; 327  : 			return false;

	xor	eax, eax
	jmp	SHORT $LN1@R_BeamReco
$LN12@R_BeamReco:

; 328  : 		}
; 329  : 	}
; 330  : 
; 331  : 	if( FBitSet( pbeam->flags, FBEAM_STARTENTITY ) && !FBitSet( pbeam->flags, FBEAM_STARTVISIBLE ))

	mov	eax, DWORD PTR _pbeam$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	and	ecx, 1
	je	SHORT $LN13@R_BeamReco
	mov	edx, DWORD PTR _pbeam$[ebp]
	mov	eax, DWORD PTR [edx+8]
	and	eax, 268435456				; 10000000H
	jne	SHORT $LN13@R_BeamReco

; 332  : 		return false;

	xor	eax, eax
	jmp	SHORT $LN1@R_BeamReco
$LN13@R_BeamReco:

; 333  : 	return true;

	mov	eax, 1
$LN1@R_BeamReco:

; 334  : }

	mov	esp, ebp
	pop	ebp
	ret	0
_R_BeamRecomputeEndpoints ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xash_build4529_src\engine\client\gl_beams.c
_TEXT	SEGMENT
_attach$ = -8						; size = 4
_ent$ = -4						; size = 4
_beamEnt$ = 8						; size = 4
_pt$ = 12						; size = 4
_R_BeamComputePoint PROC

; 257  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	push	esi

; 258  : 	cl_entity_t	*ent;
; 259  : 	int		attach;
; 260  : 
; 261  : 	ent = R_BeamGetEntity( beamEnt );

	mov	eax, DWORD PTR _beamEnt$[ebp]
	push	eax
	call	_R_BeamGetEntity
	add	esp, 4
	mov	DWORD PTR _ent$[ebp], eax

; 262  : 
; 263  : 	if( beamEnt < 0 )

	cmp	DWORD PTR _beamEnt$[ebp], 0
	jge	SHORT $LN2@R_BeamComp

; 264  : 		attach = BEAMENT_ATTACHMENT( -beamEnt );

	mov	ecx, DWORD PTR _beamEnt$[ebp]
	neg	ecx
	sar	ecx, 12					; 0000000cH
	and	ecx, 15					; 0000000fH
	mov	DWORD PTR _attach$[ebp], ecx
	jmp	SHORT $LN3@R_BeamComp
$LN2@R_BeamComp:

; 265  : 	else attach = BEAMENT_ATTACHMENT( beamEnt );

	mov	edx, DWORD PTR _beamEnt$[ebp]
	sar	edx, 12					; 0000000cH
	and	edx, 15					; 0000000fH
	mov	DWORD PTR _attach$[ebp], edx
$LN3@R_BeamComp:

; 266  : 
; 267  : 	if( !ent )

	cmp	DWORD PTR _ent$[ebp], 0
	jne	SHORT $LN4@R_BeamComp

; 268  : 	{
; 269  : 		Con_DPrintf( S_ERROR "R_BeamComputePoint: invalid entity %i\n", BEAMENT_ENTITY( beamEnt ));

	mov	eax, DWORD PTR _beamEnt$[ebp]
	and	eax, 4095				; 00000fffH
	push	eax
	push	OFFSET $SG145637
	call	_Con_DPrintf
	add	esp, 8

; 270  : 		VectorClear( pt );

	mov	ecx, 4
	shl	ecx, 1
	mov	edx, DWORD PTR _pt$[ebp]
	xorps	xmm0, xmm0
	movss	DWORD PTR [edx+ecx], xmm0
	mov	eax, 4
	shl	eax, 0
	mov	ecx, DWORD PTR _pt$[ebp]
	xorps	xmm0, xmm0
	movss	DWORD PTR [ecx+eax], xmm0
	mov	edx, 4
	imul	eax, edx, 0
	mov	ecx, DWORD PTR _pt$[ebp]
	xorps	xmm0, xmm0
	movss	DWORD PTR [ecx+eax], xmm0

; 271  : 		return false;

	xor	eax, eax
	jmp	$LN1@R_BeamComp
$LN4@R_BeamComp:

; 272  : 	}
; 273  : 
; 274  : 	// get attachment
; 275  : 	if( attach > 0 )

	cmp	DWORD PTR _attach$[ebp], 0
	jle	$LN5@R_BeamComp

; 276  : 		VectorCopy( ent->attachment[attach - 1], pt );

	mov	edx, DWORD PTR _attach$[ebp]
	sub	edx, 1
	imul	eax, edx, 12
	mov	ecx, DWORD PTR _ent$[ebp]
	lea	edx, DWORD PTR [ecx+eax+2912]
	mov	eax, 4
	imul	ecx, eax, 0
	mov	eax, 4
	imul	eax, eax, 0
	mov	esi, DWORD PTR _pt$[ebp]
	mov	ecx, DWORD PTR [edx+ecx]
	mov	DWORD PTR [esi+eax], ecx
	mov	edx, DWORD PTR _attach$[ebp]
	sub	edx, 1
	imul	eax, edx, 12
	mov	ecx, DWORD PTR _ent$[ebp]
	lea	edx, DWORD PTR [ecx+eax+2912]
	mov	eax, 4
	shl	eax, 0
	mov	ecx, 4
	shl	ecx, 0
	mov	esi, DWORD PTR _pt$[ebp]
	mov	edx, DWORD PTR [edx+eax]
	mov	DWORD PTR [esi+ecx], edx
	mov	eax, DWORD PTR _attach$[ebp]
	sub	eax, 1
	imul	ecx, eax, 12
	mov	edx, DWORD PTR _ent$[ebp]
	lea	eax, DWORD PTR [edx+ecx+2912]
	mov	ecx, 4
	shl	ecx, 1
	mov	edx, 4
	shl	edx, 1
	mov	esi, DWORD PTR _pt$[ebp]
	mov	eax, DWORD PTR [eax+ecx]
	mov	DWORD PTR [esi+edx], eax
	jmp	$LN8@R_BeamComp
$LN5@R_BeamComp:

; 277  : 	else if(( ent->index - 1 ) == cl.playernum )

	mov	ecx, DWORD PTR _ent$[ebp]
	mov	edx, DWORD PTR [ecx]
	sub	edx, 1
	cmp	edx, DWORD PTR _cl+1568828
	jne	SHORT $LN7@R_BeamComp

; 278  : 		VectorCopy( cl.simorg, pt );

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, 4
	imul	eax, edx, 0
	mov	edx, DWORD PTR _pt$[ebp]
	mov	ecx, DWORD PTR _cl[ecx+1568804]
	mov	DWORD PTR [edx+eax], ecx
	mov	edx, 4
	shl	edx, 0
	mov	eax, 4
	shl	eax, 0
	mov	ecx, DWORD PTR _pt$[ebp]
	mov	edx, DWORD PTR _cl[edx+1568804]
	mov	DWORD PTR [ecx+eax], edx
	mov	eax, 4
	shl	eax, 1
	mov	ecx, 4
	shl	ecx, 1
	mov	edx, DWORD PTR _pt$[ebp]
	mov	eax, DWORD PTR _cl[eax+1568804]
	mov	DWORD PTR [edx+ecx], eax
	jmp	SHORT $LN8@R_BeamComp
$LN7@R_BeamComp:

; 279  : 	else VectorCopy( ent->origin, pt );

	mov	ecx, 4
	imul	edx, ecx, 0
	mov	eax, 4
	imul	ecx, eax, 0
	mov	eax, DWORD PTR _pt$[ebp]
	mov	esi, DWORD PTR _ent$[ebp]
	mov	edx, DWORD PTR [esi+edx+2888]
	mov	DWORD PTR [eax+ecx], edx
	mov	eax, 4
	shl	eax, 0
	mov	ecx, 4
	shl	ecx, 0
	mov	edx, DWORD PTR _pt$[ebp]
	mov	esi, DWORD PTR _ent$[ebp]
	mov	eax, DWORD PTR [esi+eax+2888]
	mov	DWORD PTR [edx+ecx], eax
	mov	ecx, 4
	shl	ecx, 1
	mov	edx, 4
	shl	edx, 1
	mov	eax, DWORD PTR _pt$[ebp]
	mov	esi, DWORD PTR _ent$[ebp]
	mov	ecx, DWORD PTR [esi+ecx+2888]
	mov	DWORD PTR [eax+edx], ecx
$LN8@R_BeamComp:

; 280  : 
; 281  : 	return true;

	mov	eax, 1
$LN1@R_BeamComp:

; 282  : }

	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	0
_R_BeamComputePoint ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xash_build4529_src\engine\client\gl_beams.c
_TEXT	SEGMENT
_index$ = 8						; size = 4
_R_BeamGetEntity PROC

; 243  : {

	push	ebp
	mov	ebp, esp

; 244  : 	if( index < 0 )

	cmp	DWORD PTR _index$[ebp], 0
	jge	SHORT $LN2@R_BeamGetE

; 245  : 		return clgame.dllFuncs.pfnGetUserEntity( BEAMENT_ENTITY( -index ));

	mov	eax, DWORD PTR _index$[ebp]
	neg	eax
	and	eax, 4095				; 00000fffH
	push	eax
	call	DWORD PTR _clgame+148
	add	esp, 4
	jmp	SHORT $LN1@R_BeamGetE
$LN2@R_BeamGetE:

; 246  : 	return CL_GetEntityByIndex( BEAMENT_ENTITY( index ));

	mov	ecx, DWORD PTR _index$[ebp]
	and	ecx, 4095				; 00000fffH
	push	ecx
	call	_CL_GetEntityByIndex
	add	esp, 4
$LN1@R_BeamGetE:

; 247  : }

	pop	ebp
	ret	0
_R_BeamGetEntity ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xash_build4529_src\engine\client\gl_beams.c
_TEXT	SEGMENT
_pbeam$ = 8						; size = 4
_r$ = 12						; size = 4
_g$ = 16						; size = 4
_b$ = 20						; size = 4
_framerate$ = 24					; size = 4
_startFrame$ = 28					; size = 4
_R_BeamSetAttributes PROC

; 204  : {

	push	ebp
	mov	ebp, esp

; 205  : 	pbeam->frame = (float)startFrame;

	cvtsi2ss xmm0, DWORD PTR _startFrame$[ebp]
	mov	eax, DWORD PTR _pbeam$[ebp]
	movss	DWORD PTR [eax+92], xmm0

; 206  : 	pbeam->frameRate = framerate;

	mov	ecx, DWORD PTR _pbeam$[ebp]
	movss	xmm0, DWORD PTR _framerate$[ebp]
	movss	DWORD PTR [ecx+88], xmm0

; 207  : 	pbeam->r = r;

	mov	edx, DWORD PTR _pbeam$[ebp]
	movss	xmm0, DWORD PTR _r$[ebp]
	movss	DWORD PTR [edx+68], xmm0

; 208  : 	pbeam->g = g;

	mov	eax, DWORD PTR _pbeam$[ebp]
	movss	xmm0, DWORD PTR _g$[ebp]
	movss	DWORD PTR [eax+72], xmm0

; 209  : 	pbeam->b = b;

	mov	ecx, DWORD PTR _pbeam$[ebp]
	movss	xmm0, DWORD PTR _b$[ebp]
	movss	DWORD PTR [ecx+76], xmm0

; 210  : }

	pop	ebp
	ret	0
_R_BeamSetAttributes ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xash_build4529_src\engine\client\gl_beams.c
_TEXT	SEGMENT
tv359 = -24						; size = 8
tv337 = -16						; size = 8
tv158 = -8						; size = 4
_sprite$ = -4						; size = 4
_pbeam$ = 8						; size = 4
_start$ = 12						; size = 4
_end$ = 16						; size = 4
_modelIndex$ = 20					; size = 4
_life$ = 24						; size = 4
_width$ = 28						; size = 4
_amplitude$ = 32					; size = 4
_brightness$ = 36					; size = 4
_speed$ = 40						; size = 4
_R_BeamSetup PROC

; 166  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	push	esi

; 167  : 	model_t	*sprite = CL_ModelHandle( modelIndex );

	mov	eax, DWORD PTR _modelIndex$[ebp]
	push	eax
	call	_CL_ModelHandle
	add	esp, 4
	mov	DWORD PTR _sprite$[ebp], eax

; 168  : 
; 169  : 	if( !sprite ) return;

	cmp	DWORD PTR _sprite$[ebp], 0
	jne	SHORT $LN2@R_BeamSetu
	jmp	$LN1@R_BeamSetu
$LN2@R_BeamSetu:

; 170  : 
; 171  : 	pbeam->type = BEAM_POINTS;

	mov	ecx, DWORD PTR _pbeam$[ebp]
	mov	DWORD PTR [ecx+4], 0

; 172  : 	pbeam->modelIndex = modelIndex;

	mov	edx, DWORD PTR _pbeam$[ebp]
	mov	eax, DWORD PTR _modelIndex$[ebp]
	mov	DWORD PTR [edx+108], eax

; 173  : 	pbeam->frame = 0;

	mov	ecx, DWORD PTR _pbeam$[ebp]
	xorps	xmm0, xmm0
	movss	DWORD PTR [ecx+92], xmm0

; 174  : 	pbeam->frameRate = 0;

	mov	edx, DWORD PTR _pbeam$[ebp]
	xorps	xmm0, xmm0
	movss	DWORD PTR [edx+88], xmm0

; 175  : 	pbeam->frameCount = sprite->numframes;

	mov	eax, DWORD PTR _pbeam$[ebp]
	mov	ecx, DWORD PTR _sprite$[ebp]
	mov	edx, DWORD PTR [ecx+72]
	mov	DWORD PTR [eax+112], edx

; 176  : 
; 177  : 	VectorCopy( start, pbeam->source );

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, 4
	imul	eax, edx, 0
	mov	edx, DWORD PTR _pbeam$[ebp]
	mov	esi, DWORD PTR _start$[ebp]
	mov	ecx, DWORD PTR [esi+ecx]
	mov	DWORD PTR [edx+eax+12], ecx
	mov	edx, 4
	shl	edx, 0
	mov	eax, 4
	shl	eax, 0
	mov	ecx, DWORD PTR _pbeam$[ebp]
	mov	esi, DWORD PTR _start$[ebp]
	mov	edx, DWORD PTR [esi+edx]
	mov	DWORD PTR [ecx+eax+12], edx
	mov	eax, 4
	shl	eax, 1
	mov	ecx, 4
	shl	ecx, 1
	mov	edx, DWORD PTR _pbeam$[ebp]
	mov	esi, DWORD PTR _start$[ebp]
	mov	eax, DWORD PTR [esi+eax]
	mov	DWORD PTR [edx+ecx+12], eax

; 178  : 	VectorCopy( end, pbeam->target );

	mov	ecx, 4
	imul	edx, ecx, 0
	mov	eax, 4
	imul	ecx, eax, 0
	mov	eax, DWORD PTR _pbeam$[ebp]
	mov	esi, DWORD PTR _end$[ebp]
	mov	edx, DWORD PTR [esi+edx]
	mov	DWORD PTR [eax+ecx+24], edx
	mov	eax, 4
	shl	eax, 0
	mov	ecx, 4
	shl	ecx, 0
	mov	edx, DWORD PTR _pbeam$[ebp]
	mov	esi, DWORD PTR _end$[ebp]
	mov	eax, DWORD PTR [esi+eax]
	mov	DWORD PTR [edx+ecx+24], eax
	mov	ecx, 4
	shl	ecx, 1
	mov	edx, 4
	shl	edx, 1
	mov	eax, DWORD PTR _pbeam$[ebp]
	mov	esi, DWORD PTR _end$[ebp]
	mov	ecx, DWORD PTR [esi+ecx]
	mov	DWORD PTR [eax+edx+24], ecx

; 179  : 	VectorSubtract( end, start, pbeam->delta );

	mov	edx, 4
	imul	eax, edx, 0
	mov	ecx, 4
	imul	edx, ecx, 0
	mov	ecx, DWORD PTR _end$[ebp]
	mov	esi, DWORD PTR _start$[ebp]
	movss	xmm0, DWORD PTR [ecx+eax]
	subss	xmm0, DWORD PTR [esi+edx]
	mov	edx, 4
	imul	eax, edx, 0
	mov	ecx, DWORD PTR _pbeam$[ebp]
	movss	DWORD PTR [ecx+eax+36], xmm0
	mov	edx, 4
	shl	edx, 0
	mov	eax, 4
	shl	eax, 0
	mov	ecx, DWORD PTR _end$[ebp]
	mov	esi, DWORD PTR _start$[ebp]
	movss	xmm0, DWORD PTR [ecx+edx]
	subss	xmm0, DWORD PTR [esi+eax]
	mov	edx, 4
	shl	edx, 0
	mov	eax, DWORD PTR _pbeam$[ebp]
	movss	DWORD PTR [eax+edx+36], xmm0
	mov	ecx, 4
	shl	ecx, 1
	mov	edx, 4
	shl	edx, 1
	mov	eax, DWORD PTR _end$[ebp]
	mov	esi, DWORD PTR _start$[ebp]
	movss	xmm0, DWORD PTR [eax+ecx]
	subss	xmm0, DWORD PTR [esi+edx]
	movss	DWORD PTR tv158[ebp], xmm0
	mov	ecx, 4
	shl	ecx, 1
	mov	edx, DWORD PTR _pbeam$[ebp]
	movss	xmm0, DWORD PTR tv158[ebp]
	movss	DWORD PTR [edx+ecx+36], xmm0

; 180  : 
; 181  : 	pbeam->freq = speed * cl.time;

	cvtss2sd xmm0, DWORD PTR _speed$[ebp]
	mulsd	xmm0, QWORD PTR _cl+1525848
	cvtsd2ss xmm0, xmm0
	mov	eax, DWORD PTR _pbeam$[ebp]
	movss	DWORD PTR [eax+52], xmm0

; 182  : 	pbeam->die = life + cl.time;

	cvtss2sd xmm0, DWORD PTR _life$[ebp]
	addsd	xmm0, QWORD PTR _cl+1525848
	cvtsd2ss xmm0, xmm0
	mov	ecx, DWORD PTR _pbeam$[ebp]
	movss	DWORD PTR [ecx+56], xmm0

; 183  : 	pbeam->amplitude = amplitude;

	mov	edx, DWORD PTR _pbeam$[ebp]
	movss	xmm0, DWORD PTR _amplitude$[ebp]
	movss	DWORD PTR [edx+64], xmm0

; 184  : 	pbeam->brightness = brightness;

	mov	eax, DWORD PTR _pbeam$[ebp]
	movss	xmm0, DWORD PTR _brightness$[ebp]
	movss	DWORD PTR [eax+80], xmm0

; 185  : 	pbeam->width = width;

	mov	ecx, DWORD PTR _pbeam$[ebp]
	movss	xmm0, DWORD PTR _width$[ebp]
	movss	DWORD PTR [ecx+60], xmm0

; 186  : 	pbeam->speed = speed;

	mov	edx, DWORD PTR _pbeam$[ebp]
	movss	xmm0, DWORD PTR _speed$[ebp]
	movss	DWORD PTR [edx+84], xmm0

; 187  : 
; 188  : 	if( amplitude >= 0.50f )

	movss	xmm0, DWORD PTR _amplitude$[ebp]
	comiss	xmm0, DWORD PTR __real@3f000000
	jb	$LN3@R_BeamSetu

; 189  : 		pbeam->segments = VectorLength( pbeam->delta ) * 0.25f + 3.0f;	// one per 4 pixels

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, 4
	imul	eax, edx, 0
	mov	edx, DWORD PTR _pbeam$[ebp]
	mov	esi, DWORD PTR _pbeam$[ebp]
	movss	xmm0, DWORD PTR [edx+ecx+36]
	mulss	xmm0, DWORD PTR [esi+eax+36]
	mov	eax, 4
	shl	eax, 0
	mov	ecx, 4
	shl	ecx, 0
	mov	edx, DWORD PTR _pbeam$[ebp]
	mov	esi, DWORD PTR _pbeam$[ebp]
	movss	xmm1, DWORD PTR [edx+eax+36]
	mulss	xmm1, DWORD PTR [esi+ecx+36]
	addss	xmm0, xmm1
	mov	eax, 4
	shl	eax, 1
	mov	ecx, 4
	shl	ecx, 1
	mov	edx, DWORD PTR _pbeam$[ebp]
	mov	esi, DWORD PTR _pbeam$[ebp]
	movss	xmm1, DWORD PTR [edx+eax+36]
	mulss	xmm1, DWORD PTR [esi+ecx+36]
	addss	xmm0, xmm1
	cvtss2sd xmm0, xmm0
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	call	_sqrt
	add	esp, 8
	fstp	QWORD PTR tv337[ebp]
	movsd	xmm0, QWORD PTR tv337[ebp]
	mulsd	xmm0, QWORD PTR __real@3fd0000000000000
	addsd	xmm0, QWORD PTR __real@4008000000000000
	cvttsd2si eax, xmm0
	mov	ecx, DWORD PTR _pbeam$[ebp]
	mov	DWORD PTR [ecx+96], eax
	jmp	$LN4@R_BeamSetu
$LN3@R_BeamSetu:

; 190  : 	else pbeam->segments = VectorLength( pbeam->delta ) * 0.075f + 3.0f;		// one per 16 pixels

	mov	edx, 4
	imul	eax, edx, 0
	mov	ecx, 4
	imul	edx, ecx, 0
	mov	ecx, DWORD PTR _pbeam$[ebp]
	mov	esi, DWORD PTR _pbeam$[ebp]
	movss	xmm0, DWORD PTR [ecx+eax+36]
	mulss	xmm0, DWORD PTR [esi+edx+36]
	mov	edx, 4
	shl	edx, 0
	mov	eax, 4
	shl	eax, 0
	mov	ecx, DWORD PTR _pbeam$[ebp]
	mov	esi, DWORD PTR _pbeam$[ebp]
	movss	xmm1, DWORD PTR [ecx+edx+36]
	mulss	xmm1, DWORD PTR [esi+eax+36]
	addss	xmm0, xmm1
	mov	edx, 4
	shl	edx, 1
	mov	eax, 4
	shl	eax, 1
	mov	ecx, DWORD PTR _pbeam$[ebp]
	mov	esi, DWORD PTR _pbeam$[ebp]
	movss	xmm1, DWORD PTR [ecx+edx+36]
	mulss	xmm1, DWORD PTR [esi+eax+36]
	addss	xmm0, xmm1
	cvtss2sd xmm0, xmm0
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	call	_sqrt
	add	esp, 8
	fstp	QWORD PTR tv359[ebp]
	movsd	xmm0, QWORD PTR tv359[ebp]
	mulsd	xmm0, QWORD PTR __real@3fb3333340000000
	addsd	xmm0, QWORD PTR __real@4008000000000000
	cvttsd2si edx, xmm0
	mov	eax, DWORD PTR _pbeam$[ebp]
	mov	DWORD PTR [eax+96], edx
$LN4@R_BeamSetu:

; 191  : 
; 192  : 	pbeam->pFollowModel = NULL;

	mov	ecx, DWORD PTR _pbeam$[ebp]
	mov	DWORD PTR [ecx+116], 0

; 193  : 	pbeam->flags = 0;

	mov	edx, DWORD PTR _pbeam$[ebp]
	mov	DWORD PTR [edx+8], 0
$LN1@R_BeamSetu:

; 194  : }

	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	0
_R_BeamSetup ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xash_build4529_src\engine\client\gl_beams.c
_TEXT	SEGMENT
_pBeam$ = 8						; size = 4
_R_BeamFree PROC

; 148  : {

	push	ebp
	mov	ebp, esp

; 149  : 	// free particles that have died off.
; 150  : 	R_FreeDeadParticles( &pBeam->particles );

	mov	eax, DWORD PTR _pBeam$[ebp]
	add	eax, 120				; 00000078H
	push	eax
	call	_R_FreeDeadParticles
	add	esp, 4

; 151  : 
; 152  : 	// now link into free list;
; 153  : 	pBeam->next = cl_free_beams;

	mov	ecx, DWORD PTR _pBeam$[ebp]
	mov	edx, DWORD PTR _cl_free_beams
	mov	DWORD PTR [ecx], edx

; 154  : 	cl_free_beams = pBeam;

	mov	eax, DWORD PTR _pBeam$[ebp]
	mov	DWORD PTR _cl_free_beams, eax

; 155  : }

	pop	ebp
	ret	0
_R_BeamFree ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xash_build4529_src\engine\client\gl_beams.c
_TEXT	SEGMENT
_pBeam$ = -4						; size = 4
_R_BeamAlloc PROC

; 125  : {

	push	ebp
	mov	ebp, esp
	push	ecx

; 126  : 	BEAM	*pBeam;
; 127  : 
; 128  : 	if( !cl_free_beams )

	cmp	DWORD PTR _cl_free_beams, 0
	jne	SHORT $LN2@R_BeamAllo

; 129  : 		return NULL;

	xor	eax, eax
	jmp	SHORT $LN1@R_BeamAllo
$LN2@R_BeamAllo:

; 130  : 
; 131  : 	pBeam = cl_free_beams;

	mov	eax, DWORD PTR _cl_free_beams
	mov	DWORD PTR _pBeam$[ebp], eax

; 132  : 	cl_free_beams = pBeam->next;

	mov	ecx, DWORD PTR _pBeam$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR _cl_free_beams, edx

; 133  : 	memset( pBeam, 0, sizeof( *pBeam ));

	push	124					; 0000007cH
	push	0
	mov	eax, DWORD PTR _pBeam$[ebp]
	push	eax
	call	_memset
	add	esp, 12					; 0000000cH

; 134  : 	pBeam->next = cl_active_beams;

	mov	ecx, DWORD PTR _pBeam$[ebp]
	mov	edx, DWORD PTR _cl_active_beams
	mov	DWORD PTR [ecx], edx

; 135  : 	cl_active_beams = pBeam;

	mov	eax, DWORD PTR _pBeam$[ebp]
	mov	DWORD PTR _cl_active_beams, eax

; 136  : 	pBeam->die = cl.time;

	cvtsd2ss xmm0, QWORD PTR _cl+1525848
	mov	ecx, DWORD PTR _pBeam$[ebp]
	movss	DWORD PTR [ecx+56], xmm0

; 137  : 
; 138  : 	return pBeam;

	mov	eax, DWORD PTR _pBeam$[ebp]
$LN1@R_BeamAllo:

; 139  : }

	mov	esp, ebp
	pop	ebp
	ret	0
_R_BeamAlloc ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xash_build4529_src\engine\client\gl_beams.c
_TEXT	SEGMENT
tv176 = -44						; size = 4
tv137 = -40						; size = 4
tv84 = -36						; size = 4
_ilength$1 = -32					; size = 4
_vDirToBeam$ = -28					; size = 12
_vTangentY$ = -16					; size = 12
__$ArrayPad$ = -4					; size = 4
_vStartPos$ = 8						; size = 4
_vNextPos$ = 12						; size = 4
_pNormal$ = 16						; size = 4
_R_BeamComputeNormal PROC

; 96   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 44					; 0000002cH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	esi

; 97   : 	// vTangentY = line vector for beam
; 98   : 	vec3_t	vTangentY, vDirToBeam;
; 99   : 
; 100  : 	VectorSubtract( vStartPos, vNextPos, vTangentY );

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, 4
	imul	eax, edx, 0
	mov	edx, DWORD PTR _vStartPos$[ebp]
	mov	esi, DWORD PTR _vNextPos$[ebp]
	movss	xmm0, DWORD PTR [edx+ecx]
	subss	xmm0, DWORD PTR [esi+eax]
	mov	eax, 4
	imul	ecx, eax, 0
	movss	DWORD PTR _vTangentY$[ebp+ecx], xmm0
	mov	edx, 4
	shl	edx, 0
	mov	eax, 4
	shl	eax, 0
	mov	ecx, DWORD PTR _vStartPos$[ebp]
	mov	esi, DWORD PTR _vNextPos$[ebp]
	movss	xmm0, DWORD PTR [ecx+edx]
	subss	xmm0, DWORD PTR [esi+eax]
	mov	edx, 4
	shl	edx, 0
	movss	DWORD PTR _vTangentY$[ebp+edx], xmm0
	mov	eax, 4
	shl	eax, 1
	mov	ecx, 4
	shl	ecx, 1
	mov	edx, DWORD PTR _vStartPos$[ebp]
	mov	esi, DWORD PTR _vNextPos$[ebp]
	movss	xmm0, DWORD PTR [edx+eax]
	subss	xmm0, DWORD PTR [esi+ecx]
	movss	DWORD PTR tv84[ebp], xmm0
	mov	eax, 4
	shl	eax, 1
	movss	xmm0, DWORD PTR tv84[ebp]
	movss	DWORD PTR _vTangentY$[ebp+eax], xmm0

; 101  : 
; 102  : 	// vDirToBeam = vector from viewer origin to beam
; 103  : 	VectorSubtract( vStartPos, RI.vieworg, vDirToBeam );

	mov	ecx, 4
	imul	edx, ecx, 0
	mov	eax, 4
	imul	ecx, eax, 0
	mov	eax, DWORD PTR _vStartPos$[ebp]
	movss	xmm0, DWORD PTR [eax+edx]
	subss	xmm0, DWORD PTR _RI[ecx+200]
	mov	ecx, 4
	imul	edx, ecx, 0
	movss	DWORD PTR _vDirToBeam$[ebp+edx], xmm0
	mov	eax, 4
	shl	eax, 0
	mov	ecx, 4
	shl	ecx, 0
	mov	edx, DWORD PTR _vStartPos$[ebp]
	movss	xmm0, DWORD PTR [edx+eax]
	subss	xmm0, DWORD PTR _RI[ecx+200]
	mov	eax, 4
	shl	eax, 0
	movss	DWORD PTR _vDirToBeam$[ebp+eax], xmm0
	mov	ecx, 4
	shl	ecx, 1
	mov	edx, 4
	shl	edx, 1
	mov	eax, DWORD PTR _vStartPos$[ebp]
	movss	xmm0, DWORD PTR [eax+ecx]
	subss	xmm0, DWORD PTR _RI[edx+200]
	movss	DWORD PTR tv137[ebp], xmm0
	mov	ecx, 4
	shl	ecx, 1
	movss	xmm0, DWORD PTR tv137[ebp]
	movss	DWORD PTR _vDirToBeam$[ebp+ecx], xmm0

; 104  : 
; 105  : 	// get a vector that is perpendicular to us and perpendicular to the beam.
; 106  : 	// this is used to fatten the beam.
; 107  : 	CrossProduct( vTangentY, vDirToBeam, pNormal );

	mov	edx, 4
	shl	edx, 0
	mov	eax, 4
	shl	eax, 1
	movss	xmm0, DWORD PTR _vTangentY$[ebp+edx]
	mulss	xmm0, DWORD PTR _vDirToBeam$[ebp+eax]
	mov	ecx, 4
	shl	ecx, 1
	mov	edx, 4
	shl	edx, 0
	movss	xmm1, DWORD PTR _vTangentY$[ebp+ecx]
	mulss	xmm1, DWORD PTR _vDirToBeam$[ebp+edx]
	subss	xmm0, xmm1
	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _pNormal$[ebp]
	movss	DWORD PTR [edx+ecx], xmm0
	mov	eax, 4
	shl	eax, 1
	mov	ecx, 4
	imul	edx, ecx, 0
	movss	xmm0, DWORD PTR _vTangentY$[ebp+eax]
	mulss	xmm0, DWORD PTR _vDirToBeam$[ebp+edx]
	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, 4
	shl	edx, 1
	movss	xmm1, DWORD PTR _vTangentY$[ebp+ecx]
	mulss	xmm1, DWORD PTR _vDirToBeam$[ebp+edx]
	subss	xmm0, xmm1
	mov	eax, 4
	shl	eax, 0
	mov	ecx, DWORD PTR _pNormal$[ebp]
	movss	DWORD PTR [ecx+eax], xmm0
	mov	edx, 4
	imul	eax, edx, 0
	mov	ecx, 4
	shl	ecx, 0
	movss	xmm0, DWORD PTR _vTangentY$[ebp+eax]
	mulss	xmm0, DWORD PTR _vDirToBeam$[ebp+ecx]
	mov	edx, 4
	shl	edx, 0
	mov	eax, 4
	imul	ecx, eax, 0
	movss	xmm1, DWORD PTR _vTangentY$[ebp+edx]
	mulss	xmm1, DWORD PTR _vDirToBeam$[ebp+ecx]
	subss	xmm0, xmm1
	movss	DWORD PTR tv176[ebp], xmm0
	mov	edx, 4
	shl	edx, 1
	mov	eax, DWORD PTR _pNormal$[ebp]
	movss	xmm0, DWORD PTR tv176[ebp]
	movss	DWORD PTR [eax+edx], xmm0

; 108  : 	VectorNormalizeFast( pNormal );

	mov	ecx, 4
	imul	edx, ecx, 0
	mov	eax, 4
	imul	ecx, eax, 0
	mov	eax, DWORD PTR _pNormal$[ebp]
	mov	esi, DWORD PTR _pNormal$[ebp]
	movss	xmm0, DWORD PTR [eax+edx]
	mulss	xmm0, DWORD PTR [esi+ecx]
	mov	ecx, 4
	shl	ecx, 0
	mov	edx, 4
	shl	edx, 0
	mov	eax, DWORD PTR _pNormal$[ebp]
	mov	esi, DWORD PTR _pNormal$[ebp]
	movss	xmm1, DWORD PTR [eax+ecx]
	mulss	xmm1, DWORD PTR [esi+edx]
	addss	xmm0, xmm1
	mov	ecx, 4
	shl	ecx, 1
	mov	edx, 4
	shl	edx, 1
	mov	eax, DWORD PTR _pNormal$[ebp]
	mov	esi, DWORD PTR _pNormal$[ebp]
	movss	xmm1, DWORD PTR [eax+ecx]
	mulss	xmm1, DWORD PTR [esi+edx]
	addss	xmm0, xmm1
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	_rsqrt
	add	esp, 4
	fstp	DWORD PTR _ilength$1[ebp]
	mov	ecx, 4
	imul	edx, ecx, 0
	mov	eax, DWORD PTR _pNormal$[ebp]
	movss	xmm0, DWORD PTR [eax+edx]
	mulss	xmm0, DWORD PTR _ilength$1[ebp]
	mov	ecx, 4
	imul	edx, ecx, 0
	mov	eax, DWORD PTR _pNormal$[ebp]
	movss	DWORD PTR [eax+edx], xmm0
	mov	ecx, 4
	shl	ecx, 0
	mov	edx, DWORD PTR _pNormal$[ebp]
	movss	xmm0, DWORD PTR [edx+ecx]
	mulss	xmm0, DWORD PTR _ilength$1[ebp]
	mov	eax, 4
	shl	eax, 0
	mov	ecx, DWORD PTR _pNormal$[ebp]
	movss	DWORD PTR [ecx+eax], xmm0
	mov	edx, 4
	shl	edx, 1
	mov	eax, DWORD PTR _pNormal$[ebp]
	movss	xmm0, DWORD PTR [eax+edx]
	mulss	xmm0, DWORD PTR _ilength$1[ebp]
	mov	ecx, 4
	shl	ecx, 1
	mov	edx, DWORD PTR _pNormal$[ebp]
	movss	DWORD PTR [edx+ecx], xmm0

; 109  : }

	pop	esi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_R_BeamComputeNormal ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xash_build4529_src\engine\client\gl_beams.c
_TEXT	SEGMENT
tv173 = -28						; size = 4
_ilength$1 = -24					; size = 4
_ilength$2 = -20					; size = 4
_vecBeamCenter$ = -16					; size = 12
__$ArrayPad$ = -4					; size = 4
_vecBeamDelta$ = 8					; size = 4
_pPerp$ = 12						; size = 4
_R_BeamComputePerpendicular PROC

; 86   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	esi

; 87   : 	// direction in worldspace of the center of the beam
; 88   : 	vec3_t	vecBeamCenter;
; 89   : 
; 90   : 	VectorNormalize2( vecBeamDelta, vecBeamCenter );

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, 4
	imul	eax, edx, 0
	mov	edx, DWORD PTR _vecBeamDelta$[ebp]
	mov	esi, DWORD PTR _vecBeamDelta$[ebp]
	movss	xmm0, DWORD PTR [edx+ecx]
	mulss	xmm0, DWORD PTR [esi+eax]
	mov	eax, 4
	shl	eax, 0
	mov	ecx, 4
	shl	ecx, 0
	mov	edx, DWORD PTR _vecBeamDelta$[ebp]
	mov	esi, DWORD PTR _vecBeamDelta$[ebp]
	movss	xmm1, DWORD PTR [edx+eax]
	mulss	xmm1, DWORD PTR [esi+ecx]
	addss	xmm0, xmm1
	mov	eax, 4
	shl	eax, 1
	mov	ecx, 4
	shl	ecx, 1
	mov	edx, DWORD PTR _vecBeamDelta$[ebp]
	mov	esi, DWORD PTR _vecBeamDelta$[ebp]
	movss	xmm1, DWORD PTR [edx+eax]
	mulss	xmm1, DWORD PTR [esi+ecx]
	addss	xmm0, xmm1
	cvtss2sd xmm0, xmm0
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	call	_sqrt
	add	esp, 8
	fstp	DWORD PTR _ilength$2[ebp]
	movss	xmm0, DWORD PTR _ilength$2[ebp]
	ucomiss	xmm0, DWORD PTR __real@00000000
	lahf
	test	ah, 68					; 00000044H
	jnp	SHORT $LN2@R_BeamComp
	movss	xmm0, DWORD PTR __real@3f800000
	divss	xmm0, DWORD PTR _ilength$2[ebp]
	movss	DWORD PTR _ilength$2[ebp], xmm0
$LN2@R_BeamComp:
	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _vecBeamDelta$[ebp]
	movss	xmm0, DWORD PTR [edx+ecx]
	mulss	xmm0, DWORD PTR _ilength$2[ebp]
	mov	eax, 4
	imul	ecx, eax, 0
	movss	DWORD PTR _vecBeamCenter$[ebp+ecx], xmm0
	mov	edx, 4
	shl	edx, 0
	mov	eax, DWORD PTR _vecBeamDelta$[ebp]
	movss	xmm0, DWORD PTR [eax+edx]
	mulss	xmm0, DWORD PTR _ilength$2[ebp]
	mov	ecx, 4
	shl	ecx, 0
	movss	DWORD PTR _vecBeamCenter$[ebp+ecx], xmm0
	mov	edx, 4
	shl	edx, 1
	mov	eax, DWORD PTR _vecBeamDelta$[ebp]
	movss	xmm0, DWORD PTR [eax+edx]
	mulss	xmm0, DWORD PTR _ilength$2[ebp]
	mov	ecx, 4
	shl	ecx, 1
	movss	DWORD PTR _vecBeamCenter$[ebp+ecx], xmm0

; 91   : 	CrossProduct( RI.vforward, vecBeamCenter, pPerp );

	mov	edx, 4
	shl	edx, 0
	mov	eax, 4
	shl	eax, 1
	movss	xmm0, DWORD PTR _RI[edx+224]
	mulss	xmm0, DWORD PTR _vecBeamCenter$[ebp+eax]
	mov	ecx, 4
	shl	ecx, 1
	mov	edx, 4
	shl	edx, 0
	movss	xmm1, DWORD PTR _RI[ecx+224]
	mulss	xmm1, DWORD PTR _vecBeamCenter$[ebp+edx]
	subss	xmm0, xmm1
	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _pPerp$[ebp]
	movss	DWORD PTR [edx+ecx], xmm0
	mov	eax, 4
	shl	eax, 1
	mov	ecx, 4
	imul	edx, ecx, 0
	movss	xmm0, DWORD PTR _RI[eax+224]
	mulss	xmm0, DWORD PTR _vecBeamCenter$[ebp+edx]
	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, 4
	shl	edx, 1
	movss	xmm1, DWORD PTR _RI[ecx+224]
	mulss	xmm1, DWORD PTR _vecBeamCenter$[ebp+edx]
	subss	xmm0, xmm1
	mov	eax, 4
	shl	eax, 0
	mov	ecx, DWORD PTR _pPerp$[ebp]
	movss	DWORD PTR [ecx+eax], xmm0
	mov	edx, 4
	imul	eax, edx, 0
	mov	ecx, 4
	shl	ecx, 0
	movss	xmm0, DWORD PTR _RI[eax+224]
	mulss	xmm0, DWORD PTR _vecBeamCenter$[ebp+ecx]
	mov	edx, 4
	shl	edx, 0
	mov	eax, 4
	imul	ecx, eax, 0
	movss	xmm1, DWORD PTR _RI[edx+224]
	mulss	xmm1, DWORD PTR _vecBeamCenter$[ebp+ecx]
	subss	xmm0, xmm1
	movss	DWORD PTR tv173[ebp], xmm0
	mov	edx, 4
	shl	edx, 1
	mov	eax, DWORD PTR _pPerp$[ebp]
	movss	xmm0, DWORD PTR tv173[ebp]
	movss	DWORD PTR [eax+edx], xmm0

; 92   : 	VectorNormalize( pPerp );

	mov	ecx, 4
	imul	edx, ecx, 0
	mov	eax, 4
	imul	ecx, eax, 0
	mov	eax, DWORD PTR _pPerp$[ebp]
	mov	esi, DWORD PTR _pPerp$[ebp]
	movss	xmm0, DWORD PTR [eax+edx]
	mulss	xmm0, DWORD PTR [esi+ecx]
	mov	ecx, 4
	shl	ecx, 0
	mov	edx, 4
	shl	edx, 0
	mov	eax, DWORD PTR _pPerp$[ebp]
	mov	esi, DWORD PTR _pPerp$[ebp]
	movss	xmm1, DWORD PTR [eax+ecx]
	mulss	xmm1, DWORD PTR [esi+edx]
	addss	xmm0, xmm1
	mov	ecx, 4
	shl	ecx, 1
	mov	edx, 4
	shl	edx, 1
	mov	eax, DWORD PTR _pPerp$[ebp]
	mov	esi, DWORD PTR _pPerp$[ebp]
	movss	xmm1, DWORD PTR [eax+ecx]
	mulss	xmm1, DWORD PTR [esi+edx]
	addss	xmm0, xmm1
	cvtss2sd xmm0, xmm0
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	call	_sqrt
	add	esp, 8
	fstp	DWORD PTR _ilength$1[ebp]
	movss	xmm0, DWORD PTR _ilength$1[ebp]
	ucomiss	xmm0, DWORD PTR __real@00000000
	lahf
	test	ah, 68					; 00000044H
	jnp	SHORT $LN3@R_BeamComp
	movss	xmm0, DWORD PTR __real@3f800000
	divss	xmm0, DWORD PTR _ilength$1[ebp]
	movss	DWORD PTR _ilength$1[ebp], xmm0
$LN3@R_BeamComp:
	mov	ecx, 4
	imul	edx, ecx, 0
	mov	eax, DWORD PTR _pPerp$[ebp]
	movss	xmm0, DWORD PTR [eax+edx]
	mulss	xmm0, DWORD PTR _ilength$1[ebp]
	mov	ecx, 4
	imul	edx, ecx, 0
	mov	eax, DWORD PTR _pPerp$[ebp]
	movss	DWORD PTR [eax+edx], xmm0
	mov	ecx, 4
	shl	ecx, 0
	mov	edx, DWORD PTR _pPerp$[ebp]
	movss	xmm0, DWORD PTR [edx+ecx]
	mulss	xmm0, DWORD PTR _ilength$1[ebp]
	mov	eax, 4
	shl	eax, 0
	mov	ecx, DWORD PTR _pPerp$[ebp]
	movss	DWORD PTR [ecx+eax], xmm0
	mov	edx, 4
	shl	edx, 1
	mov	eax, DWORD PTR _pPerp$[ebp]
	movss	xmm0, DWORD PTR [eax+edx]
	mulss	xmm0, DWORD PTR _ilength$1[ebp]
	mov	ecx, 4
	shl	ecx, 1
	mov	edx, DWORD PTR _pPerp$[ebp]
	movss	DWORD PTR [edx+ecx], xmm0

; 93   : }

	pop	esi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_R_BeamComputePerpendicular ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xash_build4529_src\engine\client\gl_beams.c
_TEXT	SEGMENT
_step$ = -12						; size = 4
_freq$ = -8						; size = 4
_i$ = -4						; size = 4
_noise$ = 8						; size = 4
_divs$ = 12						; size = 4
_SineNoise PROC

; 66   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH

; 67   : 	float	freq = 0;

	xorps	xmm0, xmm0
	movss	DWORD PTR _freq$[ebp], xmm0

; 68   : 	float	step = M_PI / (float)divs;

	cvtsi2ss xmm0, DWORD PTR _divs$[ebp]
	movss	xmm1, DWORD PTR __real@40490fdb
	divss	xmm1, xmm0
	movss	DWORD PTR _step$[ebp], xmm1

; 69   : 	int	i;
; 70   : 
; 71   : 	for( i = 0; i < divs; i++ )

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN4@SineNoise
$LN2@SineNoise:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN4@SineNoise:
	mov	ecx, DWORD PTR _i$[ebp]
	cmp	ecx, DWORD PTR _divs$[ebp]
	jge	SHORT $LN3@SineNoise

; 72   : 	{
; 73   : 		noise[i] = sin( freq );

	cvtss2sd xmm0, DWORD PTR _freq$[ebp]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	call	_sin
	add	esp, 8
	mov	edx, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR _noise$[ebp]
	fstp	DWORD PTR [eax+edx*4]

; 74   : 		freq += step;

	movss	xmm0, DWORD PTR _freq$[ebp]
	addss	xmm0, DWORD PTR _step$[ebp]
	movss	DWORD PTR _freq$[ebp], xmm0

; 75   : 	}

	jmp	SHORT $LN2@SineNoise
$LN3@SineNoise:

; 76   : }

	mov	esp, ebp
	pop	ebp
	ret	0
_SineNoise ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xash_build4529_src\engine\client\gl_beams.c
_TEXT	SEGMENT
tv142 = -16						; size = 4
tv133 = -12						; size = 4
tv144 = -8						; size = 4
_div2$ = -4						; size = 4
_noise$ = 8						; size = 4
_divs$ = 12						; size = 4
_FracNoise PROC

; 49   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	push	esi

; 50   : 	int	div2;
; 51   : 	
; 52   : 	div2 = divs >> 1;

	mov	eax, DWORD PTR _divs$[ebp]
	sar	eax, 1
	mov	DWORD PTR _div2$[ebp], eax

; 53   : 	if( divs < 2 ) return;

	cmp	DWORD PTR _divs$[ebp], 2
	jge	SHORT $LN2@FracNoise
	jmp	$LN3@FracNoise
$LN2@FracNoise:

; 54   : 
; 55   : 	// noise is normalized to +/- scale
; 56   : 	noise[div2] = ( noise[0] + noise[divs] ) * 0.5f + divs * COM_RandomFloat( -0.125f, 0.125f );

	mov	ecx, 4
	imul	edx, ecx, 0
	mov	eax, DWORD PTR _noise$[ebp]
	mov	ecx, DWORD PTR _divs$[ebp]
	mov	esi, DWORD PTR _noise$[ebp]
	movss	xmm0, DWORD PTR [eax+edx]
	addss	xmm0, DWORD PTR [esi+ecx*4]
	mulss	xmm0, DWORD PTR __real@3f000000
	cvtsi2ss xmm1, DWORD PTR _divs$[ebp]
	push	ecx
	movss	xmm2, DWORD PTR __real@3e000000
	movss	DWORD PTR [esp], xmm2
	push	ecx
	movss	xmm2, DWORD PTR __real@be000000
	movss	DWORD PTR [esp], xmm2
	movss	DWORD PTR tv142[ebp], xmm0
	movss	DWORD PTR tv144[ebp], xmm1
	call	_COM_RandomFloat
	add	esp, 8
	fstp	DWORD PTR tv133[ebp]
	movss	xmm0, DWORD PTR tv144[ebp]
	mulss	xmm0, DWORD PTR tv133[ebp]
	movss	xmm1, DWORD PTR tv142[ebp]
	addss	xmm1, xmm0
	mov	edx, DWORD PTR _div2$[ebp]
	mov	eax, DWORD PTR _noise$[ebp]
	movss	DWORD PTR [eax+edx*4], xmm1

; 57   : 
; 58   : 	if( div2 > 1 )

	cmp	DWORD PTR _div2$[ebp], 1
	jle	SHORT $LN3@FracNoise

; 59   : 	{
; 60   : 		FracNoise( &noise[div2], div2 );

	mov	ecx, DWORD PTR _div2$[ebp]
	push	ecx
	mov	edx, DWORD PTR _div2$[ebp]
	mov	eax, DWORD PTR _noise$[ebp]
	lea	ecx, DWORD PTR [eax+edx*4]
	push	ecx
	call	_FracNoise
	add	esp, 8

; 61   : 		FracNoise( noise, div2 );

	mov	edx, DWORD PTR _div2$[ebp]
	push	edx
	mov	eax, DWORD PTR _noise$[ebp]
	push	eax
	call	_FracNoise
	add	esp, 8
$LN3@FracNoise:

; 62   : 	}
; 63   : }

	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	0
_FracNoise ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xash_build4529_src\engine\client\gl_beams.c
_TEXT	SEGMENT
_pDeadEntity$ = -4					; size = 4
_deadEntity$ = 8					; size = 4
_R_BeamKill PROC

; 1558 : {

	push	ebp
	mov	ebp, esp
	push	ecx

; 1559 : 	cl_entity_t	*pDeadEntity;
; 1560 : 
; 1561 : 	pDeadEntity = R_BeamGetEntity( deadEntity );

	mov	eax, DWORD PTR _deadEntity$[ebp]
	push	eax
	call	_R_BeamGetEntity
	add	esp, 4
	mov	DWORD PTR _pDeadEntity$[ebp], eax

; 1562 : 	if( !pDeadEntity ) return;

	cmp	DWORD PTR _pDeadEntity$[ebp], 0
	jne	SHORT $LN2@R_BeamKill
	jmp	SHORT $LN1@R_BeamKill
$LN2@R_BeamKill:

; 1563 : 
; 1564 : 	CL_KillDeadBeams( pDeadEntity );

	mov	ecx, DWORD PTR _pDeadEntity$[ebp]
	push	ecx
	call	_CL_KillDeadBeams
	add	esp, 4
$LN1@R_BeamKill:

; 1565 : }

	mov	esp, ebp
	pop	ebp
	ret	0
_R_BeamKill ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xash_build4529_src\engine\client\gl_beams.c
_TEXT	SEGMENT
_pbeam$ = -4						; size = 4
_startEnt$ = 8						; size = 4
_modelIndex$ = 12					; size = 4
_life$ = 16						; size = 4
_width$ = 20						; size = 4
_r$ = 24						; size = 4
_g$ = 28						; size = 4
_b$ = 32						; size = 4
_brightness$ = 36					; size = 4
_R_BeamFollow PROC

; 1748 : {

	push	ebp
	mov	ebp, esp
	push	ecx

; 1749 : 	BEAM	*pbeam = R_BeamAlloc();

	call	_R_BeamAlloc
	mov	DWORD PTR _pbeam$[ebp], eax

; 1750 : 
; 1751 : 	if( !pbeam ) return NULL;

	cmp	DWORD PTR _pbeam$[ebp], 0
	jne	SHORT $LN2@R_BeamFoll
	xor	eax, eax
	jmp	$LN1@R_BeamFoll
$LN2@R_BeamFoll:

; 1752 : 	pbeam->die = cl.time;

	cvtsd2ss xmm0, QWORD PTR _cl+1525848
	mov	eax, DWORD PTR _pbeam$[ebp]
	movss	DWORD PTR [eax+56], xmm0

; 1753 : 
; 1754 : 	if( modelIndex < 0 )

	cmp	DWORD PTR _modelIndex$[ebp], 0
	jge	SHORT $LN3@R_BeamFoll

; 1755 : 		return NULL;

	xor	eax, eax
	jmp	$LN1@R_BeamFoll
$LN3@R_BeamFoll:

; 1756 : 
; 1757 : 	R_BeamSetup( pbeam, vec3_origin, vec3_origin, modelIndex, life, width, life, brightness, 1.0f );

	push	ecx
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _brightness$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _life$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _width$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _life$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _modelIndex$[ebp]
	push	ecx
	push	OFFSET _vec3_origin
	push	OFFSET _vec3_origin
	mov	edx, DWORD PTR _pbeam$[ebp]
	push	edx
	call	_R_BeamSetup
	add	esp, 36					; 00000024H

; 1758 : 
; 1759 : 	pbeam->type = TE_BEAMFOLLOW;

	mov	eax, DWORD PTR _pbeam$[ebp]
	mov	DWORD PTR [eax+4], 22			; 00000016H

; 1760 : 	SetBits( pbeam->flags, FBEAM_STARTENTITY );

	mov	ecx, DWORD PTR _pbeam$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	or	edx, 1
	mov	eax, DWORD PTR _pbeam$[ebp]
	mov	DWORD PTR [eax+8], edx

; 1761 : 	pbeam->startEntity = startEnt;

	mov	ecx, DWORD PTR _pbeam$[ebp]
	mov	edx, DWORD PTR _startEnt$[ebp]
	mov	DWORD PTR [ecx+100], edx

; 1762 : 
; 1763 : 	R_BeamSetAttributes( pbeam, r, g, b, 1.0f, 0 );

	push	0
	push	ecx
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _b$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _g$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _r$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _pbeam$[ebp]
	push	eax
	call	_R_BeamSetAttributes
	add	esp, 24					; 00000018H

; 1764 : 
; 1765 : 	return pbeam;

	mov	eax, DWORD PTR _pbeam$[ebp]
$LN1@R_BeamFoll:

; 1766 : }

	mov	esp, ebp
	pop	ebp
	ret	0
_R_BeamFollow ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xash_build4529_src\engine\client\gl_beams.c
_TEXT	SEGMENT
_end$ = -12						; size = 4
_start$ = -8						; size = 4
_pbeam$ = -4						; size = 4
_startEnt$ = 8						; size = 4
_endEnt$ = 12						; size = 4
_modelIndex$ = 16					; size = 4
_life$ = 20						; size = 4
_width$ = 24						; size = 4
_amplitude$ = 28					; size = 4
_brightness$ = 32					; size = 4
_speed$ = 36						; size = 4
_startFrame$ = 40					; size = 4
_framerate$ = 44					; size = 4
_r$ = 48						; size = 4
_g$ = 52						; size = 4
_b$ = 56						; size = 4
_R_BeamRing PROC

; 1713 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH

; 1714 : 	BEAM		*pbeam;
; 1715 : 	cl_entity_t	*start, *end;
; 1716 : 
; 1717 : 	start = R_BeamGetEntity( startEnt );

	mov	eax, DWORD PTR _startEnt$[ebp]
	push	eax
	call	_R_BeamGetEntity
	add	esp, 4
	mov	DWORD PTR _start$[ebp], eax

; 1718 : 	end = R_BeamGetEntity( endEnt );

	mov	ecx, DWORD PTR _endEnt$[ebp]
	push	ecx
	call	_R_BeamGetEntity
	add	esp, 4
	mov	DWORD PTR _end$[ebp], eax

; 1719 : 
; 1720 : 	if( !start || !end )

	cmp	DWORD PTR _start$[ebp], 0
	je	SHORT $LN3@R_BeamRing
	cmp	DWORD PTR _end$[ebp], 0
	jne	SHORT $LN2@R_BeamRing
$LN3@R_BeamRing:

; 1721 : 		return NULL;

	xor	eax, eax
	jmp	$LN1@R_BeamRing
$LN2@R_BeamRing:

; 1722 : 
; 1723 : 	if( life != 0 && ( !start->model || !end->model ))

	movss	xmm0, DWORD PTR _life$[ebp]
	ucomiss	xmm0, DWORD PTR __real@00000000
	lahf
	test	ah, 68					; 00000044H
	jnp	SHORT $LN4@R_BeamRing
	mov	edx, DWORD PTR _start$[ebp]
	cmp	DWORD PTR [edx+2964], 0
	je	SHORT $LN5@R_BeamRing
	mov	eax, DWORD PTR _end$[ebp]
	cmp	DWORD PTR [eax+2964], 0
	jne	SHORT $LN4@R_BeamRing
$LN5@R_BeamRing:

; 1724 : 		return NULL;

	xor	eax, eax
	jmp	$LN1@R_BeamRing
$LN4@R_BeamRing:

; 1725 : 
; 1726 : 	pbeam = R_BeamLightning( vec3_origin, vec3_origin, modelIndex, life, width, amplitude, brightness, speed );

	push	ecx
	movss	xmm0, DWORD PTR _speed$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _brightness$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _amplitude$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _width$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _life$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _modelIndex$[ebp]
	push	ecx
	push	OFFSET _vec3_origin
	push	OFFSET _vec3_origin
	call	_R_BeamLightning
	add	esp, 32					; 00000020H
	mov	DWORD PTR _pbeam$[ebp], eax

; 1727 : 	if( !pbeam ) return NULL;

	cmp	DWORD PTR _pbeam$[ebp], 0
	jne	SHORT $LN6@R_BeamRing
	xor	eax, eax
	jmp	$LN1@R_BeamRing
$LN6@R_BeamRing:

; 1728 : 
; 1729 : 	pbeam->type = TE_BEAMRING;

	mov	edx, DWORD PTR _pbeam$[ebp]
	mov	DWORD PTR [edx+4], 24			; 00000018H

; 1730 : 	SetBits( pbeam->flags, FBEAM_STARTENTITY | FBEAM_ENDENTITY );

	mov	eax, DWORD PTR _pbeam$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	or	ecx, 3
	mov	edx, DWORD PTR _pbeam$[ebp]
	mov	DWORD PTR [edx+8], ecx

; 1731 : 	if( life == 0 ) SetBits( pbeam->flags, FBEAM_FOREVER );

	movss	xmm0, DWORD PTR _life$[ebp]
	ucomiss	xmm0, DWORD PTR __real@00000000
	lahf
	test	ah, 68					; 00000044H
	jp	SHORT $LN7@R_BeamRing
	mov	eax, DWORD PTR _pbeam$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	or	ecx, -2147483648			; 80000000H
	mov	edx, DWORD PTR _pbeam$[ebp]
	mov	DWORD PTR [edx+8], ecx
$LN7@R_BeamRing:

; 1732 : 	pbeam->startEntity = startEnt;

	mov	eax, DWORD PTR _pbeam$[ebp]
	mov	ecx, DWORD PTR _startEnt$[ebp]
	mov	DWORD PTR [eax+100], ecx

; 1733 : 	pbeam->endEntity = endEnt;

	mov	edx, DWORD PTR _pbeam$[ebp]
	mov	eax, DWORD PTR _endEnt$[ebp]
	mov	DWORD PTR [edx+104], eax

; 1734 : 
; 1735 : 	R_BeamSetAttributes( pbeam, r, g, b, framerate, startFrame );

	mov	ecx, DWORD PTR _startFrame$[ebp]
	push	ecx
	push	ecx
	movss	xmm0, DWORD PTR _framerate$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _b$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _g$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _r$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _pbeam$[ebp]
	push	edx
	call	_R_BeamSetAttributes
	add	esp, 24					; 00000018H

; 1736 : 
; 1737 : 	return pbeam;

	mov	eax, DWORD PTR _pbeam$[ebp]
$LN1@R_BeamRing:

; 1738 : }

	mov	esp, ebp
	pop	ebp
	ret	0
_R_BeamRing ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xash_build4529_src\engine\client\gl_beams.c
_TEXT	SEGMENT
_start$ = -8						; size = 4
_pbeam$ = -4						; size = 4
_startEnt$ = 8						; size = 4
_end$ = 12						; size = 4
_modelIndex$ = 16					; size = 4
_life$ = 20						; size = 4
_width$ = 24						; size = 4
_amplitude$ = 28					; size = 4
_brightness$ = 32					; size = 4
_speed$ = 36						; size = 4
_startFrame$ = 40					; size = 4
_framerate$ = 44					; size = 4
_r$ = 48						; size = 4
_g$ = 52						; size = 4
_b$ = 56						; size = 4
_R_BeamEntPoint PROC

; 1673 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 1674 : 	BEAM		*pbeam;
; 1675 : 	cl_entity_t	*start;
; 1676 : 
; 1677 : 	start = R_BeamGetEntity( startEnt );

	mov	eax, DWORD PTR _startEnt$[ebp]
	push	eax
	call	_R_BeamGetEntity
	add	esp, 4
	mov	DWORD PTR _start$[ebp], eax

; 1678 : 
; 1679 : 	if( !start ) return NULL;

	cmp	DWORD PTR _start$[ebp], 0
	jne	SHORT $LN2@R_BeamEntP
	xor	eax, eax
	jmp	$LN1@R_BeamEntP
$LN2@R_BeamEntP:

; 1680 : 
; 1681 : 	if( life == 0 && !start->model )

	movss	xmm0, DWORD PTR _life$[ebp]
	ucomiss	xmm0, DWORD PTR __real@00000000
	lahf
	test	ah, 68					; 00000044H
	jp	SHORT $LN3@R_BeamEntP
	mov	ecx, DWORD PTR _start$[ebp]
	cmp	DWORD PTR [ecx+2964], 0
	jne	SHORT $LN3@R_BeamEntP

; 1682 : 		return NULL;

	xor	eax, eax
	jmp	$LN1@R_BeamEntP
$LN3@R_BeamEntP:

; 1683 : 
; 1684 : 	pbeam = R_BeamAlloc();

	call	_R_BeamAlloc
	mov	DWORD PTR _pbeam$[ebp], eax

; 1685 : 	if ( !pbeam ) return NULL;

	cmp	DWORD PTR _pbeam$[ebp], 0
	jne	SHORT $LN4@R_BeamEntP
	xor	eax, eax
	jmp	$LN1@R_BeamEntP
$LN4@R_BeamEntP:

; 1686 : 
; 1687 : 	pbeam->die = cl.time;

	cvtsd2ss xmm0, QWORD PTR _cl+1525848
	mov	edx, DWORD PTR _pbeam$[ebp]
	movss	DWORD PTR [edx+56], xmm0

; 1688 : 	if( modelIndex < 0 )

	cmp	DWORD PTR _modelIndex$[ebp], 0
	jge	SHORT $LN5@R_BeamEntP

; 1689 : 		return NULL;

	xor	eax, eax
	jmp	$LN1@R_BeamEntP
$LN5@R_BeamEntP:

; 1690 : 
; 1691 : 	R_BeamSetup( pbeam, vec3_origin, end, modelIndex, life, width, amplitude, brightness, speed );

	push	ecx
	movss	xmm0, DWORD PTR _speed$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _brightness$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _amplitude$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _width$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _life$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _modelIndex$[ebp]
	push	eax
	mov	ecx, DWORD PTR _end$[ebp]
	push	ecx
	push	OFFSET _vec3_origin
	mov	edx, DWORD PTR _pbeam$[ebp]
	push	edx
	call	_R_BeamSetup
	add	esp, 36					; 00000024H

; 1692 : 
; 1693 : 	pbeam->type = TE_BEAMPOINTS;

	mov	eax, DWORD PTR _pbeam$[ebp]
	mov	DWORD PTR [eax+4], 0

; 1694 : 	SetBits( pbeam->flags, FBEAM_STARTENTITY );

	mov	ecx, DWORD PTR _pbeam$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	or	edx, 1
	mov	eax, DWORD PTR _pbeam$[ebp]
	mov	DWORD PTR [eax+8], edx

; 1695 : 	if( life == 0 ) SetBits( pbeam->flags, FBEAM_FOREVER );

	movss	xmm0, DWORD PTR _life$[ebp]
	ucomiss	xmm0, DWORD PTR __real@00000000
	lahf
	test	ah, 68					; 00000044H
	jp	SHORT $LN6@R_BeamEntP
	mov	ecx, DWORD PTR _pbeam$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	or	edx, -2147483648			; 80000000H
	mov	eax, DWORD PTR _pbeam$[ebp]
	mov	DWORD PTR [eax+8], edx
$LN6@R_BeamEntP:

; 1696 : 	pbeam->startEntity = startEnt;

	mov	ecx, DWORD PTR _pbeam$[ebp]
	mov	edx, DWORD PTR _startEnt$[ebp]
	mov	DWORD PTR [ecx+100], edx

; 1697 : 	pbeam->endEntity = 0;

	mov	eax, DWORD PTR _pbeam$[ebp]
	mov	DWORD PTR [eax+104], 0

; 1698 : 
; 1699 : 	R_BeamSetAttributes( pbeam, r, g, b, framerate, startFrame );

	mov	ecx, DWORD PTR _startFrame$[ebp]
	push	ecx
	push	ecx
	movss	xmm0, DWORD PTR _framerate$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _b$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _g$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _r$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _pbeam$[ebp]
	push	edx
	call	_R_BeamSetAttributes
	add	esp, 24					; 00000018H

; 1700 : 
; 1701 : 	return pbeam;

	mov	eax, DWORD PTR _pbeam$[ebp]
$LN1@R_BeamEntP:

; 1702 : }

	mov	esp, ebp
	pop	ebp
	ret	0
_R_BeamEntPoint ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xash_build4529_src\engine\client\gl_beams.c
_TEXT	SEGMENT
_pbeam$ = -4						; size = 4
_type$ = 8						; size = 4
_start$ = 12						; size = 4
_end$ = 16						; size = 4
_modelIndex$ = 20					; size = 4
_life$ = 24						; size = 4
_width$ = 28						; size = 4
_amplitude$ = 32					; size = 4
_brightness$ = 36					; size = 4
_speed$ = 40						; size = 4
_startFrame$ = 44					; size = 4
_framerate$ = 48					; size = 4
_r$ = 52						; size = 4
_g$ = 56						; size = 4
_b$ = 60						; size = 4
_R_BeamCirclePoints PROC

; 1652 : {

	push	ebp
	mov	ebp, esp
	push	ecx

; 1653 : 	BEAM	*pbeam = R_BeamLightning( start, end, modelIndex, life, width, amplitude, brightness, speed );

	push	ecx
	movss	xmm0, DWORD PTR _speed$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _brightness$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _amplitude$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _width$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _life$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _modelIndex$[ebp]
	push	eax
	mov	ecx, DWORD PTR _end$[ebp]
	push	ecx
	mov	edx, DWORD PTR _start$[ebp]
	push	edx
	call	_R_BeamLightning
	add	esp, 32					; 00000020H
	mov	DWORD PTR _pbeam$[ebp], eax

; 1654 : 
; 1655 : 	if( !pbeam ) return NULL;

	cmp	DWORD PTR _pbeam$[ebp], 0
	jne	SHORT $LN2@R_BeamCirc
	xor	eax, eax
	jmp	SHORT $LN1@R_BeamCirc
$LN2@R_BeamCirc:

; 1656 : 	pbeam->type = type;

	mov	eax, DWORD PTR _pbeam$[ebp]
	mov	ecx, DWORD PTR _type$[ebp]
	mov	DWORD PTR [eax+4], ecx

; 1657 : 	if( life == 0 ) SetBits( pbeam->flags, FBEAM_FOREVER );

	movss	xmm0, DWORD PTR _life$[ebp]
	ucomiss	xmm0, DWORD PTR __real@00000000
	lahf
	test	ah, 68					; 00000044H
	jp	SHORT $LN3@R_BeamCirc
	mov	edx, DWORD PTR _pbeam$[ebp]
	mov	eax, DWORD PTR [edx+8]
	or	eax, -2147483648			; 80000000H
	mov	ecx, DWORD PTR _pbeam$[ebp]
	mov	DWORD PTR [ecx+8], eax
$LN3@R_BeamCirc:

; 1658 : 	R_BeamSetAttributes( pbeam, r, g, b, framerate, startFrame );

	mov	edx, DWORD PTR _startFrame$[ebp]
	push	edx
	push	ecx
	movss	xmm0, DWORD PTR _framerate$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _b$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _g$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _r$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _pbeam$[ebp]
	push	eax
	call	_R_BeamSetAttributes
	add	esp, 24					; 00000018H

; 1659 : 
; 1660 : 	return pbeam;

	mov	eax, DWORD PTR _pbeam$[ebp]
$LN1@R_BeamCirc:

; 1661 : }

	mov	esp, ebp
	pop	ebp
	ret	0
_R_BeamCirclePoints ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xash_build4529_src\engine\client\gl_beams.c
_TEXT	SEGMENT
_pbeam$ = -4						; size = 4
_start$ = 8						; size = 4
_end$ = 12						; size = 4
_modelIndex$ = 16					; size = 4
_life$ = 20						; size = 4
_width$ = 24						; size = 4
_amplitude$ = 28					; size = 4
_brightness$ = 32					; size = 4
_speed$ = 36						; size = 4
_startFrame$ = 40					; size = 4
_framerate$ = 44					; size = 4
_r$ = 48						; size = 4
_g$ = 52						; size = 4
_b$ = 56						; size = 4
_R_BeamPoints PROC

; 1621 : {

	push	ebp
	mov	ebp, esp
	push	ecx

; 1622 : 	BEAM	*pbeam;
; 1623 : 
; 1624 : 	if( life != 0 && R_BeamCull( start, end, true ))

	movss	xmm0, DWORD PTR _life$[ebp]
	ucomiss	xmm0, DWORD PTR __real@00000000
	lahf
	test	ah, 68					; 00000044H
	jnp	SHORT $LN2@R_BeamPoin
	push	1
	mov	eax, DWORD PTR _end$[ebp]
	push	eax
	mov	ecx, DWORD PTR _start$[ebp]
	push	ecx
	call	_R_BeamCull
	add	esp, 12					; 0000000cH
	test	eax, eax
	je	SHORT $LN2@R_BeamPoin

; 1625 : 		return NULL;

	xor	eax, eax
	jmp	$LN1@R_BeamPoin
$LN2@R_BeamPoin:

; 1626 : 
; 1627 : 	pbeam = R_BeamAlloc();

	call	_R_BeamAlloc
	mov	DWORD PTR _pbeam$[ebp], eax

; 1628 : 	if( !pbeam ) return NULL;

	cmp	DWORD PTR _pbeam$[ebp], 0
	jne	SHORT $LN3@R_BeamPoin
	xor	eax, eax
	jmp	$LN1@R_BeamPoin
$LN3@R_BeamPoin:

; 1629 : 
; 1630 : 	pbeam->die = cl.time;

	cvtsd2ss xmm0, QWORD PTR _cl+1525848
	mov	edx, DWORD PTR _pbeam$[ebp]
	movss	DWORD PTR [edx+56], xmm0

; 1631 : 
; 1632 : 	if( modelIndex < 0 )

	cmp	DWORD PTR _modelIndex$[ebp], 0
	jge	SHORT $LN4@R_BeamPoin

; 1633 : 		return NULL;

	xor	eax, eax
	jmp	$LN1@R_BeamPoin
$LN4@R_BeamPoin:

; 1634 : 
; 1635 : 	R_BeamSetup( pbeam, start, end, modelIndex, life, width, amplitude, brightness, speed );

	push	ecx
	movss	xmm0, DWORD PTR _speed$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _brightness$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _amplitude$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _width$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _life$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _modelIndex$[ebp]
	push	eax
	mov	ecx, DWORD PTR _end$[ebp]
	push	ecx
	mov	edx, DWORD PTR _start$[ebp]
	push	edx
	mov	eax, DWORD PTR _pbeam$[ebp]
	push	eax
	call	_R_BeamSetup
	add	esp, 36					; 00000024H

; 1636 : 	if( life == 0 ) SetBits( pbeam->flags, FBEAM_FOREVER );

	movss	xmm0, DWORD PTR _life$[ebp]
	ucomiss	xmm0, DWORD PTR __real@00000000
	lahf
	test	ah, 68					; 00000044H
	jp	SHORT $LN5@R_BeamPoin
	mov	ecx, DWORD PTR _pbeam$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	or	edx, -2147483648			; 80000000H
	mov	eax, DWORD PTR _pbeam$[ebp]
	mov	DWORD PTR [eax+8], edx
$LN5@R_BeamPoin:

; 1637 : 
; 1638 : 	R_BeamSetAttributes( pbeam, r, g, b, framerate, startFrame );

	mov	ecx, DWORD PTR _startFrame$[ebp]
	push	ecx
	push	ecx
	movss	xmm0, DWORD PTR _framerate$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _b$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _g$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _r$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _pbeam$[ebp]
	push	edx
	call	_R_BeamSetAttributes
	add	esp, 24					; 00000018H

; 1639 : 
; 1640 : 	return pbeam;

	mov	eax, DWORD PTR _pbeam$[ebp]
$LN1@R_BeamPoin:

; 1641 : }

	mov	esp, ebp
	pop	ebp
	ret	0
_R_BeamPoints ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xash_build4529_src\engine\client\gl_beams.c
_TEXT	SEGMENT
_end$ = -16						; size = 4
_start$ = -12						; size = 4
_mod$ = -8						; size = 4
_pbeam$ = -4						; size = 4
_startEnt$ = 8						; size = 4
_endEnt$ = 12						; size = 4
_modelIndex$ = 16					; size = 4
_life$ = 20						; size = 4
_width$ = 24						; size = 4
_amplitude$ = 28					; size = 4
_brightness$ = 32					; size = 4
_speed$ = 36						; size = 4
_startFrame$ = 40					; size = 4
_framerate$ = 44					; size = 4
_r$ = 48						; size = 4
_g$ = 52						; size = 4
_b$ = 56						; size = 4
_R_BeamEnts PROC

; 1576 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H

; 1577 : 	cl_entity_t	*start, *end;
; 1578 : 	BEAM		*pbeam;
; 1579 : 	model_t		*mod;
; 1580 : 
; 1581 : 	mod = CL_ModelHandle( modelIndex );

	mov	eax, DWORD PTR _modelIndex$[ebp]
	push	eax
	call	_CL_ModelHandle
	add	esp, 4
	mov	DWORD PTR _mod$[ebp], eax

; 1582 : 
; 1583 : 	// need a valid model.
; 1584 : 	if( !mod || mod->type != mod_sprite )

	cmp	DWORD PTR _mod$[ebp], 0
	je	SHORT $LN3@R_BeamEnts
	mov	ecx, DWORD PTR _mod$[ebp]
	cmp	DWORD PTR [ecx+68], 1
	je	SHORT $LN2@R_BeamEnts
$LN3@R_BeamEnts:

; 1585 : 		return NULL;

	xor	eax, eax
	jmp	$LN1@R_BeamEnts
$LN2@R_BeamEnts:

; 1586 : 
; 1587 : 	start = R_BeamGetEntity( startEnt );

	mov	edx, DWORD PTR _startEnt$[ebp]
	push	edx
	call	_R_BeamGetEntity
	add	esp, 4
	mov	DWORD PTR _start$[ebp], eax

; 1588 : 	end = R_BeamGetEntity( endEnt );

	mov	eax, DWORD PTR _endEnt$[ebp]
	push	eax
	call	_R_BeamGetEntity
	add	esp, 4
	mov	DWORD PTR _end$[ebp], eax

; 1589 : 
; 1590 : 	if( !start || !end )

	cmp	DWORD PTR _start$[ebp], 0
	je	SHORT $LN5@R_BeamEnts
	cmp	DWORD PTR _end$[ebp], 0
	jne	SHORT $LN4@R_BeamEnts
$LN5@R_BeamEnts:

; 1591 : 		return NULL;

	xor	eax, eax
	jmp	$LN1@R_BeamEnts
$LN4@R_BeamEnts:

; 1592 : 
; 1593 : 	// don't start temporary beams out of the PVS
; 1594 : 	if( life != 0 && ( !start->model || !end->model ))

	movss	xmm0, DWORD PTR _life$[ebp]
	ucomiss	xmm0, DWORD PTR __real@00000000
	lahf
	test	ah, 68					; 00000044H
	jnp	SHORT $LN6@R_BeamEnts
	mov	ecx, DWORD PTR _start$[ebp]
	cmp	DWORD PTR [ecx+2964], 0
	je	SHORT $LN7@R_BeamEnts
	mov	edx, DWORD PTR _end$[ebp]
	cmp	DWORD PTR [edx+2964], 0
	jne	SHORT $LN6@R_BeamEnts
$LN7@R_BeamEnts:

; 1595 : 		return NULL;

	xor	eax, eax
	jmp	$LN1@R_BeamEnts
$LN6@R_BeamEnts:

; 1596 : 
; 1597 : 	pbeam = R_BeamLightning( vec3_origin, vec3_origin, modelIndex, life, width, amplitude, brightness, speed );

	push	ecx
	movss	xmm0, DWORD PTR _speed$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _brightness$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _amplitude$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _width$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _life$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _modelIndex$[ebp]
	push	eax
	push	OFFSET _vec3_origin
	push	OFFSET _vec3_origin
	call	_R_BeamLightning
	add	esp, 32					; 00000020H
	mov	DWORD PTR _pbeam$[ebp], eax

; 1598 : 	if( !pbeam ) return NULL;

	cmp	DWORD PTR _pbeam$[ebp], 0
	jne	SHORT $LN8@R_BeamEnts
	xor	eax, eax
	jmp	$LN1@R_BeamEnts
$LN8@R_BeamEnts:

; 1599 : 
; 1600 : 	pbeam->type = TE_BEAMPOINTS;

	mov	ecx, DWORD PTR _pbeam$[ebp]
	mov	DWORD PTR [ecx+4], 0

; 1601 : 	SetBits( pbeam->flags, FBEAM_STARTENTITY | FBEAM_ENDENTITY );

	mov	edx, DWORD PTR _pbeam$[ebp]
	mov	eax, DWORD PTR [edx+8]
	or	eax, 3
	mov	ecx, DWORD PTR _pbeam$[ebp]
	mov	DWORD PTR [ecx+8], eax

; 1602 : 	if( life == 0 ) SetBits( pbeam->flags, FBEAM_FOREVER );

	movss	xmm0, DWORD PTR _life$[ebp]
	ucomiss	xmm0, DWORD PTR __real@00000000
	lahf
	test	ah, 68					; 00000044H
	jp	SHORT $LN9@R_BeamEnts
	mov	edx, DWORD PTR _pbeam$[ebp]
	mov	eax, DWORD PTR [edx+8]
	or	eax, -2147483648			; 80000000H
	mov	ecx, DWORD PTR _pbeam$[ebp]
	mov	DWORD PTR [ecx+8], eax
$LN9@R_BeamEnts:

; 1603 : 
; 1604 : 	pbeam->startEntity = startEnt;

	mov	edx, DWORD PTR _pbeam$[ebp]
	mov	eax, DWORD PTR _startEnt$[ebp]
	mov	DWORD PTR [edx+100], eax

; 1605 : 	pbeam->endEntity = endEnt;

	mov	ecx, DWORD PTR _pbeam$[ebp]
	mov	edx, DWORD PTR _endEnt$[ebp]
	mov	DWORD PTR [ecx+104], edx

; 1606 : 
; 1607 : 	R_BeamSetAttributes( pbeam, r, g, b, framerate, startFrame );

	mov	eax, DWORD PTR _startFrame$[ebp]
	push	eax
	push	ecx
	movss	xmm0, DWORD PTR _framerate$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _b$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _g$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _r$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _pbeam$[ebp]
	push	ecx
	call	_R_BeamSetAttributes
	add	esp, 24					; 00000018H

; 1608 : 
; 1609 : 	return pbeam;

	mov	eax, DWORD PTR _pbeam$[ebp]
$LN1@R_BeamEnts:

; 1610 : }

	mov	esp, ebp
	pop	ebp
	ret	0
_R_BeamEnts ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xash_build4529_src\engine\client\gl_beams.c
_TEXT	SEGMENT
_pbeam$ = -4						; size = 4
_start$ = 8						; size = 4
_end$ = 12						; size = 4
_modelIndex$ = 16					; size = 4
_life$ = 20						; size = 4
_width$ = 24						; size = 4
_amplitude$ = 28					; size = 4
_brightness$ = 32					; size = 4
_speed$ = 36						; size = 4
_R_BeamLightning PROC

; 220  : {

	push	ebp
	mov	ebp, esp
	push	ecx

; 221  : 	BEAM	*pbeam = R_BeamAlloc();

	call	_R_BeamAlloc
	mov	DWORD PTR _pbeam$[ebp], eax

; 222  : 
; 223  : 	if( !pbeam ) return NULL;

	cmp	DWORD PTR _pbeam$[ebp], 0
	jne	SHORT $LN2@R_BeamLigh
	xor	eax, eax
	jmp	SHORT $LN1@R_BeamLigh
$LN2@R_BeamLigh:

; 224  : 	pbeam->die = cl.time;

	cvtsd2ss xmm0, QWORD PTR _cl+1525848
	mov	eax, DWORD PTR _pbeam$[ebp]
	movss	DWORD PTR [eax+56], xmm0

; 225  : 
; 226  : 	if( modelIndex < 0 )

	cmp	DWORD PTR _modelIndex$[ebp], 0
	jge	SHORT $LN3@R_BeamLigh

; 227  : 		return NULL;

	xor	eax, eax
	jmp	SHORT $LN1@R_BeamLigh
$LN3@R_BeamLigh:

; 228  : 
; 229  : 	R_BeamSetup( pbeam, start, end, modelIndex, life, width, amplitude, brightness, speed );

	push	ecx
	movss	xmm0, DWORD PTR _speed$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _brightness$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _amplitude$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _width$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _life$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _modelIndex$[ebp]
	push	ecx
	mov	edx, DWORD PTR _end$[ebp]
	push	edx
	mov	eax, DWORD PTR _start$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pbeam$[ebp]
	push	ecx
	call	_R_BeamSetup
	add	esp, 36					; 00000024H

; 230  : 
; 231  : 	return pbeam;

	mov	eax, DWORD PTR _pbeam$[ebp]
$LN1@R_BeamLigh:

; 232  : }

	mov	esp, ebp
	pop	ebp
	ret	0
_R_BeamLightning ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xash_build4529_src\engine\client\gl_beams.c
_TEXT	SEGMENT
_modelIndex$ = -368					; size = 4
_model$ = -364						; size = 4
_afile$ = -360						; size = 4
_count$ = -356						; size = 4
_pfile$ = -352						; size = 4
_p1$ = -348						; size = 12
_p2$ = -336						; size = 12
_token$ = -324						; size = 256
_filename$ = -68					; size = 64
__$ArrayPad$ = -4					; size = 4
_CL_ReadLineFile_f PROC

; 1946 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 368				; 00000170H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 1947 : 	char		*afile, *pfile;
; 1948 : 	vec3_t		p1, p2;
; 1949 : 	int		count, modelIndex;
; 1950 : 	char		filename[MAX_QPATH];
; 1951 : 	model_t		*model;
; 1952 : 	string		token;
; 1953 : 
; 1954 : 	Q_snprintf( filename, sizeof( filename ), "maps/%s.lin", clgame.mapname );

	push	OFFSET _clgame+232
	push	OFFSET $SG146461
	push	64					; 00000040H
	lea	eax, DWORD PTR _filename$[ebp]
	push	eax
	call	_Q_snprintf
	add	esp, 16					; 00000010H

; 1955 : 	afile = FS_LoadFile( filename, NULL, false );

	push	0
	push	0
	lea	ecx, DWORD PTR _filename$[ebp]
	push	ecx
	call	_FS_LoadFile
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _afile$[ebp], eax

; 1956 : 
; 1957 : 	if( !afile )

	cmp	DWORD PTR _afile$[ebp], 0
	jne	SHORT $LN4@CL_ReadLin

; 1958 : 	{
; 1959 : 		Con_Printf( S_ERROR "couldn't open %s\n", filename );

	lea	edx, DWORD PTR _filename$[ebp]
	push	edx
	push	OFFSET $SG146463
	call	_Con_Printf
	add	esp, 8

; 1960 : 		return;

	jmp	$LN18@CL_ReadLin
$LN4@CL_ReadLin:

; 1961 : 	}
; 1962 : 	
; 1963 : 	Con_Printf( "Reading %s...\n", filename );

	lea	eax, DWORD PTR _filename$[ebp]
	push	eax
	push	OFFSET $SG146464
	call	_Con_Printf
	add	esp, 8

; 1964 : 
; 1965 : 	count = 0;

	mov	DWORD PTR _count$[ebp], 0

; 1966 : 	pfile = afile;

	mov	ecx, DWORD PTR _afile$[ebp]
	mov	DWORD PTR _pfile$[ebp], ecx

; 1967 : 	model = CL_LoadModel( DEFAULT_LASERBEAM_PATH, &modelIndex );

	lea	edx, DWORD PTR _modelIndex$[ebp]
	push	edx
	push	OFFSET $SG146465
	call	_CL_LoadModel
	add	esp, 8
	mov	DWORD PTR _model$[ebp], eax
$LN2@CL_ReadLin:

; 1968 : 
; 1969 : 	while( 1 )

	mov	eax, 1
	test	eax, eax
	je	$LN3@CL_ReadLin

; 1970 : 	{
; 1971 : 		pfile = COM_ParseFile( pfile, token );

	lea	ecx, DWORD PTR _token$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pfile$[ebp]
	push	edx
	call	_COM_ParseFile
	add	esp, 8
	mov	DWORD PTR _pfile$[ebp], eax

; 1972 : 		if( !pfile ) break;

	cmp	DWORD PTR _pfile$[ebp], 0
	jne	SHORT $LN5@CL_ReadLin
	jmp	$LN3@CL_ReadLin
$LN5@CL_ReadLin:

; 1973 : 		p1[0] = Q_atof( token );

	lea	eax, DWORD PTR _token$[ebp]
	push	eax
	call	_Q_atof
	add	esp, 4
	mov	ecx, 4
	imul	edx, ecx, 0
	fstp	DWORD PTR _p1$[ebp+edx]

; 1974 : 
; 1975 : 		pfile = COM_ParseFile( pfile, token );

	lea	eax, DWORD PTR _token$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pfile$[ebp]
	push	ecx
	call	_COM_ParseFile
	add	esp, 8
	mov	DWORD PTR _pfile$[ebp], eax

; 1976 : 		if( !pfile ) break;

	cmp	DWORD PTR _pfile$[ebp], 0
	jne	SHORT $LN6@CL_ReadLin
	jmp	$LN3@CL_ReadLin
$LN6@CL_ReadLin:

; 1977 : 		p1[1] = Q_atof( token );

	lea	edx, DWORD PTR _token$[ebp]
	push	edx
	call	_Q_atof
	add	esp, 4
	mov	eax, 4
	shl	eax, 0
	fstp	DWORD PTR _p1$[ebp+eax]

; 1978 : 
; 1979 : 		pfile = COM_ParseFile( pfile, token );

	lea	ecx, DWORD PTR _token$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pfile$[ebp]
	push	edx
	call	_COM_ParseFile
	add	esp, 8
	mov	DWORD PTR _pfile$[ebp], eax

; 1980 : 		if( !pfile ) break;

	cmp	DWORD PTR _pfile$[ebp], 0
	jne	SHORT $LN7@CL_ReadLin
	jmp	$LN3@CL_ReadLin
$LN7@CL_ReadLin:

; 1981 : 		p1[2] = Q_atof( token );

	lea	eax, DWORD PTR _token$[ebp]
	push	eax
	call	_Q_atof
	add	esp, 4
	mov	ecx, 4
	shl	ecx, 1
	fstp	DWORD PTR _p1$[ebp+ecx]

; 1982 : 
; 1983 : 		pfile = COM_ParseFile( pfile, token );

	lea	edx, DWORD PTR _token$[ebp]
	push	edx
	mov	eax, DWORD PTR _pfile$[ebp]
	push	eax
	call	_COM_ParseFile
	add	esp, 8
	mov	DWORD PTR _pfile$[ebp], eax

; 1984 : 		if( !pfile ) break;

	cmp	DWORD PTR _pfile$[ebp], 0
	jne	SHORT $LN8@CL_ReadLin
	jmp	$LN3@CL_ReadLin
$LN8@CL_ReadLin:

; 1985 : 
; 1986 : 		if( token[0] != '-' )

	mov	ecx, 1
	imul	edx, ecx, 0
	movsx	eax, BYTE PTR _token$[ebp+edx]
	cmp	eax, 45					; 0000002dH
	je	SHORT $LN9@CL_ReadLin

; 1987 : 		{
; 1988 : 			Con_Printf( S_ERROR "%s is corrupted\n", filename );

	lea	ecx, DWORD PTR _filename$[ebp]
	push	ecx
	push	OFFSET $SG146471
	call	_Con_Printf
	add	esp, 8

; 1989 : 			break;

	jmp	$LN3@CL_ReadLin
$LN9@CL_ReadLin:

; 1990 : 		}
; 1991 : 
; 1992 : 		pfile = COM_ParseFile( pfile, token );

	lea	edx, DWORD PTR _token$[ebp]
	push	edx
	mov	eax, DWORD PTR _pfile$[ebp]
	push	eax
	call	_COM_ParseFile
	add	esp, 8
	mov	DWORD PTR _pfile$[ebp], eax

; 1993 : 		if( !pfile ) break;

	cmp	DWORD PTR _pfile$[ebp], 0
	jne	SHORT $LN10@CL_ReadLin
	jmp	$LN3@CL_ReadLin
$LN10@CL_ReadLin:

; 1994 : 		p2[0] = Q_atof( token );

	lea	ecx, DWORD PTR _token$[ebp]
	push	ecx
	call	_Q_atof
	add	esp, 4
	mov	edx, 4
	imul	eax, edx, 0
	fstp	DWORD PTR _p2$[ebp+eax]

; 1995 : 
; 1996 : 		pfile = COM_ParseFile( pfile, token );

	lea	ecx, DWORD PTR _token$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pfile$[ebp]
	push	edx
	call	_COM_ParseFile
	add	esp, 8
	mov	DWORD PTR _pfile$[ebp], eax

; 1997 : 		if( !pfile ) break;

	cmp	DWORD PTR _pfile$[ebp], 0
	jne	SHORT $LN11@CL_ReadLin
	jmp	$LN3@CL_ReadLin
$LN11@CL_ReadLin:

; 1998 : 		p2[1] = Q_atof( token );

	lea	eax, DWORD PTR _token$[ebp]
	push	eax
	call	_Q_atof
	add	esp, 4
	mov	ecx, 4
	shl	ecx, 0
	fstp	DWORD PTR _p2$[ebp+ecx]

; 1999 : 
; 2000 : 		pfile = COM_ParseFile( pfile, token );

	lea	edx, DWORD PTR _token$[ebp]
	push	edx
	mov	eax, DWORD PTR _pfile$[ebp]
	push	eax
	call	_COM_ParseFile
	add	esp, 8
	mov	DWORD PTR _pfile$[ebp], eax

; 2001 : 		if( !pfile ) break;

	cmp	DWORD PTR _pfile$[ebp], 0
	jne	SHORT $LN12@CL_ReadLin
	jmp	$LN3@CL_ReadLin
$LN12@CL_ReadLin:

; 2002 : 		p2[2] = Q_atof( token );

	lea	ecx, DWORD PTR _token$[ebp]
	push	ecx
	call	_Q_atof
	add	esp, 4
	mov	edx, 4
	shl	edx, 1
	fstp	DWORD PTR _p2$[ebp+edx]

; 2003 : 
; 2004 : 		count++;

	mov	eax, DWORD PTR _count$[ebp]
	add	eax, 1
	mov	DWORD PTR _count$[ebp], eax

; 2005 : 		
; 2006 : 		if( !R_BeamPoints( p1, p2, modelIndex, 0, 2, 0, 255, 0, 0, 0, 255.0f, 0.0f, 0.0f ))

	push	ecx
	xorps	xmm0, xmm0
	movss	DWORD PTR [esp], xmm0
	push	ecx
	xorps	xmm0, xmm0
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@437f0000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	xorps	xmm0, xmm0
	movss	DWORD PTR [esp], xmm0
	push	0
	push	ecx
	xorps	xmm0, xmm0
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@437f0000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	xorps	xmm0, xmm0
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@40000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	xorps	xmm0, xmm0
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _modelIndex$[ebp]
	push	ecx
	lea	edx, DWORD PTR _p2$[ebp]
	push	edx
	lea	eax, DWORD PTR _p1$[ebp]
	push	eax
	call	_R_BeamPoints
	add	esp, 52					; 00000034H
	test	eax, eax
	jne	SHORT $LN13@CL_ReadLin

; 2007 : 		{
; 2008 : 			if( !model || model->type != mod_sprite )

	cmp	DWORD PTR _model$[ebp], 0
	je	SHORT $LN16@CL_ReadLin
	mov	ecx, DWORD PTR _model$[ebp]
	cmp	DWORD PTR [ecx+68], 1
	je	SHORT $LN14@CL_ReadLin
$LN16@CL_ReadLin:

; 2009 : 				Con_Printf( S_ERROR "failed to load \"%s\"!\n", DEFAULT_LASERBEAM_PATH );

	push	OFFSET $SG146479
	push	OFFSET $SG146480
	call	_Con_Printf
	add	esp, 8
	jmp	SHORT $LN15@CL_ReadLin
$LN14@CL_ReadLin:

; 2010 : 			else Con_Printf( S_ERROR "not enough free beams!\n" );

	push	OFFSET $SG146481
	call	_Con_Printf
	add	esp, 4
$LN15@CL_ReadLin:

; 2011 : 			break;

	jmp	SHORT $LN3@CL_ReadLin
$LN13@CL_ReadLin:

; 2012 : 		}
; 2013 : 	}

	jmp	$LN2@CL_ReadLin
$LN3@CL_ReadLin:

; 2014 : 
; 2015 : 	Mem_Free( afile );

	push	2015					; 000007dfH
	push	OFFSET $SG146482
	mov	edx, DWORD PTR _afile$[ebp]
	push	edx
	call	__Mem_Free
	add	esp, 12					; 0000000cH

; 2016 : 
; 2017 : 	if( count ) Con_Printf( "%i lines read\n", count );

	cmp	DWORD PTR _count$[ebp], 0
	je	SHORT $LN17@CL_ReadLin
	mov	eax, DWORD PTR _count$[ebp]
	push	eax
	push	OFFSET $SG146485
	call	_Con_Printf
	add	esp, 8
	jmp	SHORT $LN18@CL_ReadLin
$LN17@CL_ReadLin:

; 2018 : 	else Con_Printf( "map %s has no leaks!\n", clgame.mapname );

	push	OFFSET _clgame+232
	push	OFFSET $SG146486
	call	_Con_Printf
	add	esp, 8
$LN18@CL_ReadLin:

; 2019 : }

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_CL_ReadLineFile_f ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xash_build4529_src\engine\client\gl_beams.c
_TEXT	SEGMENT
tv64 = -84						; size = 4
_endEnt$ = -80						; size = 4
_startEnt$ = -76					; size = 4
_speed$ = -72						; size = 4
_frameRate$ = -68					; size = 4
_noise$ = -64						; size = 4
_a$ = -60						; size = 4
_startFrame$ = -56					; size = 4
_r$ = -52						; size = 4
_g$ = -48						; size = 4
_b$ = -44						; size = 4
_life$ = -40						; size = 4
_width$ = -36						; size = 4
_modelIndex$ = -32					; size = 4
_start$ = -28						; size = 12
_end$ = -16						; size = 12
__$ArrayPad$ = -4					; size = 4
_msg$ = 8						; size = 4
_beamType$ = 12						; size = 4
_CL_ParseViewBeam PROC

; 1790 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 84					; 00000054H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 1791 : 	vec3_t	start, end;
; 1792 : 	int	modelIndex, startFrame;
; 1793 : 	float	frameRate, life, width;
; 1794 : 	int	startEnt, endEnt;
; 1795 : 	float	noise, speed;
; 1796 : 	float	r, g, b, a;
; 1797 : 
; 1798 : 	switch( beamType )

	mov	eax, DWORD PTR _beamType$[ebp]
	mov	DWORD PTR tv64[ebp], eax
	cmp	DWORD PTR tv64[ebp], 99			; 00000063H
	ja	$LN2@CL_ParseVi
	mov	ecx, DWORD PTR tv64[ebp]
	movzx	edx, BYTE PTR $LN16@CL_ParseVi[ecx]
	jmp	DWORD PTR $LN17@CL_ParseVi[edx*4]
$LN4@CL_ParseVi:

; 1799 : 	{
; 1800 : 	case TE_BEAMPOINTS:
; 1801 : 		start[0] = MSG_ReadCoord( msg );

	mov	eax, DWORD PTR _msg$[ebp]
	push	eax
	call	_MSG_ReadCoord
	add	esp, 4
	mov	ecx, 4
	imul	edx, ecx, 0
	fstp	DWORD PTR _start$[ebp+edx]

; 1802 : 		start[1] = MSG_ReadCoord( msg );

	mov	eax, DWORD PTR _msg$[ebp]
	push	eax
	call	_MSG_ReadCoord
	add	esp, 4
	mov	ecx, 4
	shl	ecx, 0
	fstp	DWORD PTR _start$[ebp+ecx]

; 1803 : 		start[2] = MSG_ReadCoord( msg );

	mov	edx, DWORD PTR _msg$[ebp]
	push	edx
	call	_MSG_ReadCoord
	add	esp, 4
	mov	eax, 4
	shl	eax, 1
	fstp	DWORD PTR _start$[ebp+eax]

; 1804 : 		end[0] = MSG_ReadCoord( msg );

	mov	ecx, DWORD PTR _msg$[ebp]
	push	ecx
	call	_MSG_ReadCoord
	add	esp, 4
	mov	edx, 4
	imul	eax, edx, 0
	fstp	DWORD PTR _end$[ebp+eax]

; 1805 : 		end[1] = MSG_ReadCoord( msg );

	mov	ecx, DWORD PTR _msg$[ebp]
	push	ecx
	call	_MSG_ReadCoord
	add	esp, 4
	mov	edx, 4
	shl	edx, 0
	fstp	DWORD PTR _end$[ebp+edx]

; 1806 : 		end[2] = MSG_ReadCoord( msg );

	mov	eax, DWORD PTR _msg$[ebp]
	push	eax
	call	_MSG_ReadCoord
	add	esp, 4
	mov	ecx, 4
	shl	ecx, 1
	fstp	DWORD PTR _end$[ebp+ecx]

; 1807 : 		modelIndex = MSG_ReadShort( msg );

	mov	edx, DWORD PTR _msg$[ebp]
	push	edx
	call	_MSG_ReadShort
	add	esp, 4
	mov	DWORD PTR _modelIndex$[ebp], eax

; 1808 : 		startFrame = MSG_ReadByte( msg );

	mov	eax, DWORD PTR _msg$[ebp]
	push	eax
	call	_MSG_ReadByte
	add	esp, 4
	mov	DWORD PTR _startFrame$[ebp], eax

; 1809 : 		frameRate = (float)MSG_ReadByte( msg );

	mov	ecx, DWORD PTR _msg$[ebp]
	push	ecx
	call	_MSG_ReadByte
	add	esp, 4
	cvtsi2ss xmm0, eax
	movss	DWORD PTR _frameRate$[ebp], xmm0

; 1810 : 		life = (float)(MSG_ReadByte( msg ) * 0.1f);

	mov	edx, DWORD PTR _msg$[ebp]
	push	edx
	call	_MSG_ReadByte
	add	esp, 4
	cvtsi2ss xmm0, eax
	mulss	xmm0, DWORD PTR __real@3dcccccd
	movss	DWORD PTR _life$[ebp], xmm0

; 1811 : 		width = (float)(MSG_ReadByte( msg ) * 0.1f);

	mov	eax, DWORD PTR _msg$[ebp]
	push	eax
	call	_MSG_ReadByte
	add	esp, 4
	cvtsi2ss xmm0, eax
	mulss	xmm0, DWORD PTR __real@3dcccccd
	movss	DWORD PTR _width$[ebp], xmm0

; 1812 : 		noise = (float)(MSG_ReadByte( msg ) * 0.01f);

	mov	ecx, DWORD PTR _msg$[ebp]
	push	ecx
	call	_MSG_ReadByte
	add	esp, 4
	cvtsi2ss xmm0, eax
	mulss	xmm0, DWORD PTR __real@3c23d70a
	movss	DWORD PTR _noise$[ebp], xmm0

; 1813 : 		r = (float)MSG_ReadByte( msg ) / 255.0f;

	mov	edx, DWORD PTR _msg$[ebp]
	push	edx
	call	_MSG_ReadByte
	add	esp, 4
	cvtsi2ss xmm0, eax
	divss	xmm0, DWORD PTR __real@437f0000
	movss	DWORD PTR _r$[ebp], xmm0

; 1814 : 		g = (float)MSG_ReadByte( msg ) / 255.0f;

	mov	eax, DWORD PTR _msg$[ebp]
	push	eax
	call	_MSG_ReadByte
	add	esp, 4
	cvtsi2ss xmm0, eax
	divss	xmm0, DWORD PTR __real@437f0000
	movss	DWORD PTR _g$[ebp], xmm0

; 1815 : 		b = (float)MSG_ReadByte( msg ) / 255.0f;

	mov	ecx, DWORD PTR _msg$[ebp]
	push	ecx
	call	_MSG_ReadByte
	add	esp, 4
	cvtsi2ss xmm0, eax
	divss	xmm0, DWORD PTR __real@437f0000
	movss	DWORD PTR _b$[ebp], xmm0

; 1816 : 		a = (float)MSG_ReadByte( msg ) / 255.0f;

	mov	edx, DWORD PTR _msg$[ebp]
	push	edx
	call	_MSG_ReadByte
	add	esp, 4
	cvtsi2ss xmm0, eax
	divss	xmm0, DWORD PTR __real@437f0000
	movss	DWORD PTR _a$[ebp], xmm0

; 1817 : 		speed = (float)(MSG_ReadByte( msg ) * 0.1f);

	mov	eax, DWORD PTR _msg$[ebp]
	push	eax
	call	_MSG_ReadByte
	add	esp, 4
	cvtsi2ss xmm0, eax
	mulss	xmm0, DWORD PTR __real@3dcccccd
	movss	DWORD PTR _speed$[ebp], xmm0

; 1818 : 		R_BeamPoints( start, end, modelIndex, life, width, noise, a, speed, startFrame, frameRate, r, g, b );

	push	ecx
	movss	xmm0, DWORD PTR _b$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _g$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _r$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _frameRate$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _startFrame$[ebp]
	push	ecx
	push	ecx
	movss	xmm0, DWORD PTR _speed$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _a$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _noise$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _width$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _life$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _modelIndex$[ebp]
	push	edx
	lea	eax, DWORD PTR _end$[ebp]
	push	eax
	lea	ecx, DWORD PTR _start$[ebp]
	push	ecx
	call	_R_BeamPoints
	add	esp, 52					; 00000034H

; 1819 : 		break;

	jmp	$LN2@CL_ParseVi
$LN5@CL_ParseVi:

; 1820 : 	case TE_BEAMENTPOINT:
; 1821 : 		startEnt = MSG_ReadShort( msg );

	mov	edx, DWORD PTR _msg$[ebp]
	push	edx
	call	_MSG_ReadShort
	add	esp, 4
	mov	DWORD PTR _startEnt$[ebp], eax

; 1822 : 		end[0] = MSG_ReadCoord( msg );

	mov	eax, DWORD PTR _msg$[ebp]
	push	eax
	call	_MSG_ReadCoord
	add	esp, 4
	mov	ecx, 4
	imul	edx, ecx, 0
	fstp	DWORD PTR _end$[ebp+edx]

; 1823 : 		end[1] = MSG_ReadCoord( msg );

	mov	eax, DWORD PTR _msg$[ebp]
	push	eax
	call	_MSG_ReadCoord
	add	esp, 4
	mov	ecx, 4
	shl	ecx, 0
	fstp	DWORD PTR _end$[ebp+ecx]

; 1824 : 		end[2] = MSG_ReadCoord( msg );

	mov	edx, DWORD PTR _msg$[ebp]
	push	edx
	call	_MSG_ReadCoord
	add	esp, 4
	mov	eax, 4
	shl	eax, 1
	fstp	DWORD PTR _end$[ebp+eax]

; 1825 : 		modelIndex = MSG_ReadShort( msg );

	mov	ecx, DWORD PTR _msg$[ebp]
	push	ecx
	call	_MSG_ReadShort
	add	esp, 4
	mov	DWORD PTR _modelIndex$[ebp], eax

; 1826 : 		startFrame = MSG_ReadByte( msg );

	mov	edx, DWORD PTR _msg$[ebp]
	push	edx
	call	_MSG_ReadByte
	add	esp, 4
	mov	DWORD PTR _startFrame$[ebp], eax

; 1827 : 		frameRate = (float)MSG_ReadByte( msg );

	mov	eax, DWORD PTR _msg$[ebp]
	push	eax
	call	_MSG_ReadByte
	add	esp, 4
	cvtsi2ss xmm0, eax
	movss	DWORD PTR _frameRate$[ebp], xmm0

; 1828 : 		life = (float)(MSG_ReadByte( msg ) * 0.1f);

	mov	ecx, DWORD PTR _msg$[ebp]
	push	ecx
	call	_MSG_ReadByte
	add	esp, 4
	cvtsi2ss xmm0, eax
	mulss	xmm0, DWORD PTR __real@3dcccccd
	movss	DWORD PTR _life$[ebp], xmm0

; 1829 : 		width = (float)(MSG_ReadByte( msg ) * 0.1f);

	mov	edx, DWORD PTR _msg$[ebp]
	push	edx
	call	_MSG_ReadByte
	add	esp, 4
	cvtsi2ss xmm0, eax
	mulss	xmm0, DWORD PTR __real@3dcccccd
	movss	DWORD PTR _width$[ebp], xmm0

; 1830 : 		noise = (float)(MSG_ReadByte( msg ) * 0.01f);

	mov	eax, DWORD PTR _msg$[ebp]
	push	eax
	call	_MSG_ReadByte
	add	esp, 4
	cvtsi2ss xmm0, eax
	mulss	xmm0, DWORD PTR __real@3c23d70a
	movss	DWORD PTR _noise$[ebp], xmm0

; 1831 : 		r = (float)MSG_ReadByte( msg ) / 255.0f;

	mov	ecx, DWORD PTR _msg$[ebp]
	push	ecx
	call	_MSG_ReadByte
	add	esp, 4
	cvtsi2ss xmm0, eax
	divss	xmm0, DWORD PTR __real@437f0000
	movss	DWORD PTR _r$[ebp], xmm0

; 1832 : 		g = (float)MSG_ReadByte( msg ) / 255.0f;

	mov	edx, DWORD PTR _msg$[ebp]
	push	edx
	call	_MSG_ReadByte
	add	esp, 4
	cvtsi2ss xmm0, eax
	divss	xmm0, DWORD PTR __real@437f0000
	movss	DWORD PTR _g$[ebp], xmm0

; 1833 : 		b = (float)MSG_ReadByte( msg ) / 255.0f;

	mov	eax, DWORD PTR _msg$[ebp]
	push	eax
	call	_MSG_ReadByte
	add	esp, 4
	cvtsi2ss xmm0, eax
	divss	xmm0, DWORD PTR __real@437f0000
	movss	DWORD PTR _b$[ebp], xmm0

; 1834 : 		a = (float)MSG_ReadByte( msg ) / 255.0f;

	mov	ecx, DWORD PTR _msg$[ebp]
	push	ecx
	call	_MSG_ReadByte
	add	esp, 4
	cvtsi2ss xmm0, eax
	divss	xmm0, DWORD PTR __real@437f0000
	movss	DWORD PTR _a$[ebp], xmm0

; 1835 : 		speed = (float)(MSG_ReadByte( msg ) * 0.1f);

	mov	edx, DWORD PTR _msg$[ebp]
	push	edx
	call	_MSG_ReadByte
	add	esp, 4
	cvtsi2ss xmm0, eax
	mulss	xmm0, DWORD PTR __real@3dcccccd
	movss	DWORD PTR _speed$[ebp], xmm0

; 1836 : 		R_BeamEntPoint( startEnt, end, modelIndex, life, width, noise, a, speed, startFrame, frameRate, r, g, b );

	push	ecx
	movss	xmm0, DWORD PTR _b$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _g$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _r$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _frameRate$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _startFrame$[ebp]
	push	eax
	push	ecx
	movss	xmm0, DWORD PTR _speed$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _a$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _noise$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _width$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _life$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _modelIndex$[ebp]
	push	ecx
	lea	edx, DWORD PTR _end$[ebp]
	push	edx
	mov	eax, DWORD PTR _startEnt$[ebp]
	push	eax
	call	_R_BeamEntPoint
	add	esp, 52					; 00000034H

; 1837 : 		break;

	jmp	$LN2@CL_ParseVi
$LN6@CL_ParseVi:

; 1838 : 	case TE_LIGHTNING:
; 1839 : 		start[0] = MSG_ReadCoord( msg );

	mov	ecx, DWORD PTR _msg$[ebp]
	push	ecx
	call	_MSG_ReadCoord
	add	esp, 4
	mov	edx, 4
	imul	eax, edx, 0
	fstp	DWORD PTR _start$[ebp+eax]

; 1840 : 		start[1] = MSG_ReadCoord( msg );

	mov	ecx, DWORD PTR _msg$[ebp]
	push	ecx
	call	_MSG_ReadCoord
	add	esp, 4
	mov	edx, 4
	shl	edx, 0
	fstp	DWORD PTR _start$[ebp+edx]

; 1841 : 		start[2] = MSG_ReadCoord( msg );

	mov	eax, DWORD PTR _msg$[ebp]
	push	eax
	call	_MSG_ReadCoord
	add	esp, 4
	mov	ecx, 4
	shl	ecx, 1
	fstp	DWORD PTR _start$[ebp+ecx]

; 1842 : 		end[0] = MSG_ReadCoord( msg );

	mov	edx, DWORD PTR _msg$[ebp]
	push	edx
	call	_MSG_ReadCoord
	add	esp, 4
	mov	eax, 4
	imul	ecx, eax, 0
	fstp	DWORD PTR _end$[ebp+ecx]

; 1843 : 		end[1] = MSG_ReadCoord( msg );

	mov	edx, DWORD PTR _msg$[ebp]
	push	edx
	call	_MSG_ReadCoord
	add	esp, 4
	mov	eax, 4
	shl	eax, 0
	fstp	DWORD PTR _end$[ebp+eax]

; 1844 : 		end[2] = MSG_ReadCoord( msg );

	mov	ecx, DWORD PTR _msg$[ebp]
	push	ecx
	call	_MSG_ReadCoord
	add	esp, 4
	mov	edx, 4
	shl	edx, 1
	fstp	DWORD PTR _end$[ebp+edx]

; 1845 : 		life = (float)(MSG_ReadByte( msg ) * 0.1f);

	mov	eax, DWORD PTR _msg$[ebp]
	push	eax
	call	_MSG_ReadByte
	add	esp, 4
	cvtsi2ss xmm0, eax
	mulss	xmm0, DWORD PTR __real@3dcccccd
	movss	DWORD PTR _life$[ebp], xmm0

; 1846 : 		width = (float)(MSG_ReadByte( msg ) * 0.1f);

	mov	ecx, DWORD PTR _msg$[ebp]
	push	ecx
	call	_MSG_ReadByte
	add	esp, 4
	cvtsi2ss xmm0, eax
	mulss	xmm0, DWORD PTR __real@3dcccccd
	movss	DWORD PTR _width$[ebp], xmm0

; 1847 : 		noise = (float)(MSG_ReadByte( msg ) * 0.01f);

	mov	edx, DWORD PTR _msg$[ebp]
	push	edx
	call	_MSG_ReadByte
	add	esp, 4
	cvtsi2ss xmm0, eax
	mulss	xmm0, DWORD PTR __real@3c23d70a
	movss	DWORD PTR _noise$[ebp], xmm0

; 1848 : 		modelIndex = MSG_ReadShort( msg );

	mov	eax, DWORD PTR _msg$[ebp]
	push	eax
	call	_MSG_ReadShort
	add	esp, 4
	mov	DWORD PTR _modelIndex$[ebp], eax

; 1849 : 		R_BeamLightning( start, end, modelIndex, life, width, noise, 0.6F, 3.5f );

	push	ecx
	movss	xmm0, DWORD PTR __real@40600000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@3f19999a
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _noise$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _width$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _life$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _modelIndex$[ebp]
	push	ecx
	lea	edx, DWORD PTR _end$[ebp]
	push	edx
	lea	eax, DWORD PTR _start$[ebp]
	push	eax
	call	_R_BeamLightning
	add	esp, 32					; 00000020H

; 1850 : 		break;

	jmp	$LN2@CL_ParseVi
$LN7@CL_ParseVi:

; 1851 : 	case TE_BEAMENTS:
; 1852 : 		startEnt = MSG_ReadShort( msg );

	mov	ecx, DWORD PTR _msg$[ebp]
	push	ecx
	call	_MSG_ReadShort
	add	esp, 4
	mov	DWORD PTR _startEnt$[ebp], eax

; 1853 : 		endEnt = MSG_ReadShort( msg );

	mov	edx, DWORD PTR _msg$[ebp]
	push	edx
	call	_MSG_ReadShort
	add	esp, 4
	mov	DWORD PTR _endEnt$[ebp], eax

; 1854 : 		modelIndex = MSG_ReadShort( msg );

	mov	eax, DWORD PTR _msg$[ebp]
	push	eax
	call	_MSG_ReadShort
	add	esp, 4
	mov	DWORD PTR _modelIndex$[ebp], eax

; 1855 : 		startFrame = MSG_ReadByte( msg );

	mov	ecx, DWORD PTR _msg$[ebp]
	push	ecx
	call	_MSG_ReadByte
	add	esp, 4
	mov	DWORD PTR _startFrame$[ebp], eax

; 1856 : 		frameRate = (float)(MSG_ReadByte( msg ) * 0.1f);

	mov	edx, DWORD PTR _msg$[ebp]
	push	edx
	call	_MSG_ReadByte
	add	esp, 4
	cvtsi2ss xmm0, eax
	mulss	xmm0, DWORD PTR __real@3dcccccd
	movss	DWORD PTR _frameRate$[ebp], xmm0

; 1857 : 		life = (float)(MSG_ReadByte( msg ) * 0.1f);

	mov	eax, DWORD PTR _msg$[ebp]
	push	eax
	call	_MSG_ReadByte
	add	esp, 4
	cvtsi2ss xmm0, eax
	mulss	xmm0, DWORD PTR __real@3dcccccd
	movss	DWORD PTR _life$[ebp], xmm0

; 1858 : 		width = (float)(MSG_ReadByte( msg ) * 0.1f);

	mov	ecx, DWORD PTR _msg$[ebp]
	push	ecx
	call	_MSG_ReadByte
	add	esp, 4
	cvtsi2ss xmm0, eax
	mulss	xmm0, DWORD PTR __real@3dcccccd
	movss	DWORD PTR _width$[ebp], xmm0

; 1859 : 		noise = (float)(MSG_ReadByte( msg ) * 0.01f);

	mov	edx, DWORD PTR _msg$[ebp]
	push	edx
	call	_MSG_ReadByte
	add	esp, 4
	cvtsi2ss xmm0, eax
	mulss	xmm0, DWORD PTR __real@3c23d70a
	movss	DWORD PTR _noise$[ebp], xmm0

; 1860 : 		r = (float)MSG_ReadByte( msg ) / 255.0f;

	mov	eax, DWORD PTR _msg$[ebp]
	push	eax
	call	_MSG_ReadByte
	add	esp, 4
	cvtsi2ss xmm0, eax
	divss	xmm0, DWORD PTR __real@437f0000
	movss	DWORD PTR _r$[ebp], xmm0

; 1861 : 		g = (float)MSG_ReadByte( msg ) / 255.0f;

	mov	ecx, DWORD PTR _msg$[ebp]
	push	ecx
	call	_MSG_ReadByte
	add	esp, 4
	cvtsi2ss xmm0, eax
	divss	xmm0, DWORD PTR __real@437f0000
	movss	DWORD PTR _g$[ebp], xmm0

; 1862 : 		b = (float)MSG_ReadByte( msg ) / 255.0f;

	mov	edx, DWORD PTR _msg$[ebp]
	push	edx
	call	_MSG_ReadByte
	add	esp, 4
	cvtsi2ss xmm0, eax
	divss	xmm0, DWORD PTR __real@437f0000
	movss	DWORD PTR _b$[ebp], xmm0

; 1863 : 		a = (float)MSG_ReadByte( msg ) / 255.0f;

	mov	eax, DWORD PTR _msg$[ebp]
	push	eax
	call	_MSG_ReadByte
	add	esp, 4
	cvtsi2ss xmm0, eax
	divss	xmm0, DWORD PTR __real@437f0000
	movss	DWORD PTR _a$[ebp], xmm0

; 1864 : 		speed = (float)(MSG_ReadByte( msg ) * 0.1f);

	mov	ecx, DWORD PTR _msg$[ebp]
	push	ecx
	call	_MSG_ReadByte
	add	esp, 4
	cvtsi2ss xmm0, eax
	mulss	xmm0, DWORD PTR __real@3dcccccd
	movss	DWORD PTR _speed$[ebp], xmm0

; 1865 : 		R_BeamEnts( startEnt, endEnt, modelIndex, life, width, noise, a, speed, startFrame, frameRate, r, g, b );

	push	ecx
	movss	xmm0, DWORD PTR _b$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _g$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _r$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _frameRate$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _startFrame$[ebp]
	push	edx
	push	ecx
	movss	xmm0, DWORD PTR _speed$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _a$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _noise$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _width$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _life$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _modelIndex$[ebp]
	push	eax
	mov	ecx, DWORD PTR _endEnt$[ebp]
	push	ecx
	mov	edx, DWORD PTR _startEnt$[ebp]
	push	edx
	call	_R_BeamEnts
	add	esp, 52					; 00000034H

; 1866 : 		break;

	jmp	$LN2@CL_ParseVi

; 1867 : 	case TE_BEAM:
; 1868 : 		break;

	jmp	$LN2@CL_ParseVi
$LN9@CL_ParseVi:

; 1869 : 	case TE_BEAMSPRITE:
; 1870 : 		start[0] = MSG_ReadCoord( msg );

	mov	eax, DWORD PTR _msg$[ebp]
	push	eax
	call	_MSG_ReadCoord
	add	esp, 4
	mov	ecx, 4
	imul	edx, ecx, 0
	fstp	DWORD PTR _start$[ebp+edx]

; 1871 : 		start[1] = MSG_ReadCoord( msg );

	mov	eax, DWORD PTR _msg$[ebp]
	push	eax
	call	_MSG_ReadCoord
	add	esp, 4
	mov	ecx, 4
	shl	ecx, 0
	fstp	DWORD PTR _start$[ebp+ecx]

; 1872 : 		start[2] = MSG_ReadCoord( msg );

	mov	edx, DWORD PTR _msg$[ebp]
	push	edx
	call	_MSG_ReadCoord
	add	esp, 4
	mov	eax, 4
	shl	eax, 1
	fstp	DWORD PTR _start$[ebp+eax]

; 1873 : 		end[0] = MSG_ReadCoord( msg );

	mov	ecx, DWORD PTR _msg$[ebp]
	push	ecx
	call	_MSG_ReadCoord
	add	esp, 4
	mov	edx, 4
	imul	eax, edx, 0
	fstp	DWORD PTR _end$[ebp+eax]

; 1874 : 		end[1] = MSG_ReadCoord( msg );

	mov	ecx, DWORD PTR _msg$[ebp]
	push	ecx
	call	_MSG_ReadCoord
	add	esp, 4
	mov	edx, 4
	shl	edx, 0
	fstp	DWORD PTR _end$[ebp+edx]

; 1875 : 		end[2] = MSG_ReadCoord( msg );

	mov	eax, DWORD PTR _msg$[ebp]
	push	eax
	call	_MSG_ReadCoord
	add	esp, 4
	mov	ecx, 4
	shl	ecx, 1
	fstp	DWORD PTR _end$[ebp+ecx]

; 1876 : 		modelIndex = MSG_ReadShort( msg );	// beam model

	mov	edx, DWORD PTR _msg$[ebp]
	push	edx
	call	_MSG_ReadShort
	add	esp, 4
	mov	DWORD PTR _modelIndex$[ebp], eax

; 1877 : 		startFrame = MSG_ReadShort( msg );	// sprite model

	mov	eax, DWORD PTR _msg$[ebp]
	push	eax
	call	_MSG_ReadShort
	add	esp, 4
	mov	DWORD PTR _startFrame$[ebp], eax

; 1878 : 		R_BeamSprite( start, end, modelIndex, startFrame );

	mov	ecx, DWORD PTR _startFrame$[ebp]
	push	ecx
	mov	edx, DWORD PTR _modelIndex$[ebp]
	push	edx
	lea	eax, DWORD PTR _end$[ebp]
	push	eax
	lea	ecx, DWORD PTR _start$[ebp]
	push	ecx
	call	_R_BeamSprite
	add	esp, 16					; 00000010H

; 1879 : 		break;

	jmp	$LN2@CL_ParseVi
$LN10@CL_ParseVi:

; 1880 : 	case TE_BEAMTORUS:
; 1881 : 	case TE_BEAMDISK:
; 1882 : 	case TE_BEAMCYLINDER:
; 1883 : 		start[0] = MSG_ReadCoord( msg );

	mov	edx, DWORD PTR _msg$[ebp]
	push	edx
	call	_MSG_ReadCoord
	add	esp, 4
	mov	eax, 4
	imul	ecx, eax, 0
	fstp	DWORD PTR _start$[ebp+ecx]

; 1884 : 		start[1] = MSG_ReadCoord( msg );

	mov	edx, DWORD PTR _msg$[ebp]
	push	edx
	call	_MSG_ReadCoord
	add	esp, 4
	mov	eax, 4
	shl	eax, 0
	fstp	DWORD PTR _start$[ebp+eax]

; 1885 : 		start[2] = MSG_ReadCoord( msg );

	mov	ecx, DWORD PTR _msg$[ebp]
	push	ecx
	call	_MSG_ReadCoord
	add	esp, 4
	mov	edx, 4
	shl	edx, 1
	fstp	DWORD PTR _start$[ebp+edx]

; 1886 : 		end[0] = MSG_ReadCoord( msg );

	mov	eax, DWORD PTR _msg$[ebp]
	push	eax
	call	_MSG_ReadCoord
	add	esp, 4
	mov	ecx, 4
	imul	edx, ecx, 0
	fstp	DWORD PTR _end$[ebp+edx]

; 1887 : 		end[1] = MSG_ReadCoord( msg );

	mov	eax, DWORD PTR _msg$[ebp]
	push	eax
	call	_MSG_ReadCoord
	add	esp, 4
	mov	ecx, 4
	shl	ecx, 0
	fstp	DWORD PTR _end$[ebp+ecx]

; 1888 : 		end[2] = MSG_ReadCoord( msg );

	mov	edx, DWORD PTR _msg$[ebp]
	push	edx
	call	_MSG_ReadCoord
	add	esp, 4
	mov	eax, 4
	shl	eax, 1
	fstp	DWORD PTR _end$[ebp+eax]

; 1889 : 		modelIndex = MSG_ReadShort( msg );

	mov	ecx, DWORD PTR _msg$[ebp]
	push	ecx
	call	_MSG_ReadShort
	add	esp, 4
	mov	DWORD PTR _modelIndex$[ebp], eax

; 1890 : 		startFrame = MSG_ReadByte( msg );

	mov	edx, DWORD PTR _msg$[ebp]
	push	edx
	call	_MSG_ReadByte
	add	esp, 4
	mov	DWORD PTR _startFrame$[ebp], eax

; 1891 : 		frameRate = (float)(MSG_ReadByte( msg ));

	mov	eax, DWORD PTR _msg$[ebp]
	push	eax
	call	_MSG_ReadByte
	add	esp, 4
	cvtsi2ss xmm0, eax
	movss	DWORD PTR _frameRate$[ebp], xmm0

; 1892 : 		life = (float)(MSG_ReadByte( msg ) * 0.1f);

	mov	ecx, DWORD PTR _msg$[ebp]
	push	ecx
	call	_MSG_ReadByte
	add	esp, 4
	cvtsi2ss xmm0, eax
	mulss	xmm0, DWORD PTR __real@3dcccccd
	movss	DWORD PTR _life$[ebp], xmm0

; 1893 : 		width = (float)(MSG_ReadByte( msg ));

	mov	edx, DWORD PTR _msg$[ebp]
	push	edx
	call	_MSG_ReadByte
	add	esp, 4
	cvtsi2ss xmm0, eax
	movss	DWORD PTR _width$[ebp], xmm0

; 1894 : 		noise = (float)(MSG_ReadByte( msg ) * 0.1f);

	mov	eax, DWORD PTR _msg$[ebp]
	push	eax
	call	_MSG_ReadByte
	add	esp, 4
	cvtsi2ss xmm0, eax
	mulss	xmm0, DWORD PTR __real@3dcccccd
	movss	DWORD PTR _noise$[ebp], xmm0

; 1895 : 		r = (float)MSG_ReadByte( msg ) / 255.0f;

	mov	ecx, DWORD PTR _msg$[ebp]
	push	ecx
	call	_MSG_ReadByte
	add	esp, 4
	cvtsi2ss xmm0, eax
	divss	xmm0, DWORD PTR __real@437f0000
	movss	DWORD PTR _r$[ebp], xmm0

; 1896 : 		g = (float)MSG_ReadByte( msg ) / 255.0f;

	mov	edx, DWORD PTR _msg$[ebp]
	push	edx
	call	_MSG_ReadByte
	add	esp, 4
	cvtsi2ss xmm0, eax
	divss	xmm0, DWORD PTR __real@437f0000
	movss	DWORD PTR _g$[ebp], xmm0

; 1897 : 		b = (float)MSG_ReadByte( msg ) / 255.0f;

	mov	eax, DWORD PTR _msg$[ebp]
	push	eax
	call	_MSG_ReadByte
	add	esp, 4
	cvtsi2ss xmm0, eax
	divss	xmm0, DWORD PTR __real@437f0000
	movss	DWORD PTR _b$[ebp], xmm0

; 1898 : 		a = (float)MSG_ReadByte( msg ) / 255.0f;

	mov	ecx, DWORD PTR _msg$[ebp]
	push	ecx
	call	_MSG_ReadByte
	add	esp, 4
	cvtsi2ss xmm0, eax
	divss	xmm0, DWORD PTR __real@437f0000
	movss	DWORD PTR _a$[ebp], xmm0

; 1899 : 		speed = (float)(MSG_ReadByte( msg ) / 0.1f);

	mov	edx, DWORD PTR _msg$[ebp]
	push	edx
	call	_MSG_ReadByte
	add	esp, 4
	cvtsi2ss xmm0, eax
	divss	xmm0, DWORD PTR __real@3dcccccd
	movss	DWORD PTR _speed$[ebp], xmm0

; 1900 : 		R_BeamCirclePoints( beamType, start, end, modelIndex, life, width, noise, a, speed, startFrame, frameRate, r, g, b );

	push	ecx
	movss	xmm0, DWORD PTR _b$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _g$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _r$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _frameRate$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _startFrame$[ebp]
	push	eax
	push	ecx
	movss	xmm0, DWORD PTR _speed$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _a$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _noise$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _width$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _life$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _modelIndex$[ebp]
	push	ecx
	lea	edx, DWORD PTR _end$[ebp]
	push	edx
	lea	eax, DWORD PTR _start$[ebp]
	push	eax
	mov	ecx, DWORD PTR _beamType$[ebp]
	push	ecx
	call	_R_BeamCirclePoints
	add	esp, 56					; 00000038H

; 1901 : 		break;

	jmp	$LN2@CL_ParseVi
$LN11@CL_ParseVi:

; 1902 : 	case TE_BEAMFOLLOW:
; 1903 : 		startEnt = MSG_ReadShort( msg );

	mov	edx, DWORD PTR _msg$[ebp]
	push	edx
	call	_MSG_ReadShort
	add	esp, 4
	mov	DWORD PTR _startEnt$[ebp], eax

; 1904 : 		modelIndex = MSG_ReadShort( msg );

	mov	eax, DWORD PTR _msg$[ebp]
	push	eax
	call	_MSG_ReadShort
	add	esp, 4
	mov	DWORD PTR _modelIndex$[ebp], eax

; 1905 : 		life = (float)(MSG_ReadByte( msg ) * 0.1f);

	mov	ecx, DWORD PTR _msg$[ebp]
	push	ecx
	call	_MSG_ReadByte
	add	esp, 4
	cvtsi2ss xmm0, eax
	mulss	xmm0, DWORD PTR __real@3dcccccd
	movss	DWORD PTR _life$[ebp], xmm0

; 1906 : 		width = (float)MSG_ReadByte( msg );

	mov	edx, DWORD PTR _msg$[ebp]
	push	edx
	call	_MSG_ReadByte
	add	esp, 4
	cvtsi2ss xmm0, eax
	movss	DWORD PTR _width$[ebp], xmm0

; 1907 : 		r = (float)MSG_ReadByte( msg ) / 255.0f;

	mov	eax, DWORD PTR _msg$[ebp]
	push	eax
	call	_MSG_ReadByte
	add	esp, 4
	cvtsi2ss xmm0, eax
	divss	xmm0, DWORD PTR __real@437f0000
	movss	DWORD PTR _r$[ebp], xmm0

; 1908 : 		g = (float)MSG_ReadByte( msg ) / 255.0f;

	mov	ecx, DWORD PTR _msg$[ebp]
	push	ecx
	call	_MSG_ReadByte
	add	esp, 4
	cvtsi2ss xmm0, eax
	divss	xmm0, DWORD PTR __real@437f0000
	movss	DWORD PTR _g$[ebp], xmm0

; 1909 : 		b = (float)MSG_ReadByte( msg ) / 255.0f;

	mov	edx, DWORD PTR _msg$[ebp]
	push	edx
	call	_MSG_ReadByte
	add	esp, 4
	cvtsi2ss xmm0, eax
	divss	xmm0, DWORD PTR __real@437f0000
	movss	DWORD PTR _b$[ebp], xmm0

; 1910 : 		a = (float)MSG_ReadByte( msg ) / 255.0f;

	mov	eax, DWORD PTR _msg$[ebp]
	push	eax
	call	_MSG_ReadByte
	add	esp, 4
	cvtsi2ss xmm0, eax
	divss	xmm0, DWORD PTR __real@437f0000
	movss	DWORD PTR _a$[ebp], xmm0

; 1911 : 		R_BeamFollow( startEnt, modelIndex, life, width, r, g, b, a );

	push	ecx
	movss	xmm0, DWORD PTR _a$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _b$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _g$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _r$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _width$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _life$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _modelIndex$[ebp]
	push	ecx
	mov	edx, DWORD PTR _startEnt$[ebp]
	push	edx
	call	_R_BeamFollow
	add	esp, 32					; 00000020H

; 1912 : 		break;

	jmp	$LN2@CL_ParseVi
$LN12@CL_ParseVi:

; 1913 : 	case TE_BEAMRING:
; 1914 : 		startEnt = MSG_ReadShort( msg );

	mov	eax, DWORD PTR _msg$[ebp]
	push	eax
	call	_MSG_ReadShort
	add	esp, 4
	mov	DWORD PTR _startEnt$[ebp], eax

; 1915 : 		endEnt = MSG_ReadShort( msg );

	mov	ecx, DWORD PTR _msg$[ebp]
	push	ecx
	call	_MSG_ReadShort
	add	esp, 4
	mov	DWORD PTR _endEnt$[ebp], eax

; 1916 : 		modelIndex = MSG_ReadShort( msg );

	mov	edx, DWORD PTR _msg$[ebp]
	push	edx
	call	_MSG_ReadShort
	add	esp, 4
	mov	DWORD PTR _modelIndex$[ebp], eax

; 1917 : 		startFrame = MSG_ReadByte( msg );

	mov	eax, DWORD PTR _msg$[ebp]
	push	eax
	call	_MSG_ReadByte
	add	esp, 4
	mov	DWORD PTR _startFrame$[ebp], eax

; 1918 : 		frameRate = (float)MSG_ReadByte( msg );

	mov	ecx, DWORD PTR _msg$[ebp]
	push	ecx
	call	_MSG_ReadByte
	add	esp, 4
	cvtsi2ss xmm0, eax
	movss	DWORD PTR _frameRate$[ebp], xmm0

; 1919 : 		life = (float)(MSG_ReadByte( msg ) * 0.1f);

	mov	edx, DWORD PTR _msg$[ebp]
	push	edx
	call	_MSG_ReadByte
	add	esp, 4
	cvtsi2ss xmm0, eax
	mulss	xmm0, DWORD PTR __real@3dcccccd
	movss	DWORD PTR _life$[ebp], xmm0

; 1920 : 		width = (float)(MSG_ReadByte( msg ) * 0.1f);

	mov	eax, DWORD PTR _msg$[ebp]
	push	eax
	call	_MSG_ReadByte
	add	esp, 4
	cvtsi2ss xmm0, eax
	mulss	xmm0, DWORD PTR __real@3dcccccd
	movss	DWORD PTR _width$[ebp], xmm0

; 1921 : 		noise = (float)(MSG_ReadByte( msg ) * 0.01f);

	mov	ecx, DWORD PTR _msg$[ebp]
	push	ecx
	call	_MSG_ReadByte
	add	esp, 4
	cvtsi2ss xmm0, eax
	mulss	xmm0, DWORD PTR __real@3c23d70a
	movss	DWORD PTR _noise$[ebp], xmm0

; 1922 : 		r = (float)MSG_ReadByte( msg ) / 255.0f;

	mov	edx, DWORD PTR _msg$[ebp]
	push	edx
	call	_MSG_ReadByte
	add	esp, 4
	cvtsi2ss xmm0, eax
	divss	xmm0, DWORD PTR __real@437f0000
	movss	DWORD PTR _r$[ebp], xmm0

; 1923 : 		g = (float)MSG_ReadByte( msg ) / 255.0f;

	mov	eax, DWORD PTR _msg$[ebp]
	push	eax
	call	_MSG_ReadByte
	add	esp, 4
	cvtsi2ss xmm0, eax
	divss	xmm0, DWORD PTR __real@437f0000
	movss	DWORD PTR _g$[ebp], xmm0

; 1924 : 		b = (float)MSG_ReadByte( msg ) / 255.0f;

	mov	ecx, DWORD PTR _msg$[ebp]
	push	ecx
	call	_MSG_ReadByte
	add	esp, 4
	cvtsi2ss xmm0, eax
	divss	xmm0, DWORD PTR __real@437f0000
	movss	DWORD PTR _b$[ebp], xmm0

; 1925 : 		a = (float)MSG_ReadByte( msg ) / 255.0f;

	mov	edx, DWORD PTR _msg$[ebp]
	push	edx
	call	_MSG_ReadByte
	add	esp, 4
	cvtsi2ss xmm0, eax
	divss	xmm0, DWORD PTR __real@437f0000
	movss	DWORD PTR _a$[ebp], xmm0

; 1926 : 		speed = (float)(MSG_ReadByte( msg ) * 0.1f);

	mov	eax, DWORD PTR _msg$[ebp]
	push	eax
	call	_MSG_ReadByte
	add	esp, 4
	cvtsi2ss xmm0, eax
	mulss	xmm0, DWORD PTR __real@3dcccccd
	movss	DWORD PTR _speed$[ebp], xmm0

; 1927 : 		R_BeamRing( startEnt, endEnt, modelIndex, life, width, noise, a, speed, startFrame, frameRate, r, g, b );

	push	ecx
	movss	xmm0, DWORD PTR _b$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _g$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _r$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _frameRate$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _startFrame$[ebp]
	push	ecx
	push	ecx
	movss	xmm0, DWORD PTR _speed$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _a$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _noise$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _width$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _life$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _modelIndex$[ebp]
	push	edx
	mov	eax, DWORD PTR _endEnt$[ebp]
	push	eax
	mov	ecx, DWORD PTR _startEnt$[ebp]
	push	ecx
	call	_R_BeamRing
	add	esp, 52					; 00000034H

; 1928 : 		break;

	jmp	SHORT $LN2@CL_ParseVi

; 1929 : 	case TE_BEAMHOSE:
; 1930 : 		break;

	jmp	SHORT $LN2@CL_ParseVi
$LN14@CL_ParseVi:

; 1931 : 	case TE_KILLBEAM:
; 1932 : 		startEnt = MSG_ReadShort( msg );

	mov	edx, DWORD PTR _msg$[ebp]
	push	edx
	call	_MSG_ReadShort
	add	esp, 4
	mov	DWORD PTR _startEnt$[ebp], eax

; 1933 : 		R_BeamKill( startEnt );

	mov	eax, DWORD PTR _startEnt$[ebp]
	push	eax
	call	_R_BeamKill
	add	esp, 4
$LN2@CL_ParseVi:

; 1934 : 		break;
; 1935 : 	}
; 1936 : }

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN17@CL_ParseVi:
	DD	$LN4@CL_ParseVi
	DD	$LN5@CL_ParseVi
	DD	$LN6@CL_ParseVi
	DD	$LN7@CL_ParseVi
	DD	$LN9@CL_ParseVi
	DD	$LN10@CL_ParseVi
	DD	$LN11@CL_ParseVi
	DD	$LN12@CL_ParseVi
	DD	$LN14@CL_ParseVi
	DD	$LN2@CL_ParseVi
$LN16@CL_ParseVi:
	DB	0
	DB	1
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	2
	DB	3
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	4
	DB	5
	DB	5
	DB	5
	DB	6
	DB	9
	DB	7
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	8
_CL_ParseViewBeam ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xash_build4529_src\engine\client\gl_beams.c
_TEXT	SEGMENT
_pnext$ = -16						; size = 4
_pHead$ = -12						; size = 4
_pnewlist$ = -8						; size = 4
_pbeam$ = -4						; size = 4
_pDeadEntity$ = 8					; size = 4
_CL_KillDeadBeams PROC

; 1393 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H

; 1394 : 	BEAM		*pbeam;
; 1395 : 	BEAM		*pnewlist;
; 1396 : 	BEAM		*pnext;
; 1397 : 	particle_t	*pHead;	// build a new list to replace cl_active_beams.
; 1398 : 
; 1399 : 	pbeam = cl_active_beams;	// old list.

	mov	eax, DWORD PTR _cl_active_beams
	mov	DWORD PTR _pbeam$[ebp], eax

; 1400 : 	pnewlist = NULL;		// new list.

	mov	DWORD PTR _pnewlist$[ebp], 0
$LN10@CL_KillDea:

; 1401 : 	
; 1402 : 	while( pbeam )

	cmp	DWORD PTR _pbeam$[ebp], 0
	je	$LN3@CL_KillDea

; 1403 : 	{
; 1404 : 		pnext = pbeam->next;

	mov	ecx, DWORD PTR _pbeam$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR _pnext$[ebp], edx

; 1405 : 
; 1406 : 		// link into new list.
; 1407 : 		if( R_BeamGetEntity( pbeam->startEntity ) != pDeadEntity )

	mov	eax, DWORD PTR _pbeam$[ebp]
	mov	ecx, DWORD PTR [eax+100]
	push	ecx
	call	_R_BeamGetEntity
	add	esp, 4
	cmp	eax, DWORD PTR _pDeadEntity$[ebp]
	je	SHORT $LN6@CL_KillDea

; 1408 : 		{
; 1409 : 			pbeam->next = pnewlist;

	mov	edx, DWORD PTR _pbeam$[ebp]
	mov	eax, DWORD PTR _pnewlist$[ebp]
	mov	DWORD PTR [edx], eax

; 1410 : 			pnewlist = pbeam;

	mov	ecx, DWORD PTR _pbeam$[ebp]
	mov	DWORD PTR _pnewlist$[ebp], ecx

; 1411 : 
; 1412 : 			pbeam = pnext;

	mov	edx, DWORD PTR _pnext$[ebp]
	mov	DWORD PTR _pbeam$[ebp], edx

; 1413 : 			continue;

	jmp	SHORT $LN10@CL_KillDea
$LN6@CL_KillDea:

; 1414 : 		}
; 1415 : 
; 1416 : 		pbeam->flags &= ~(FBEAM_STARTENTITY | FBEAM_ENDENTITY);

	mov	eax, DWORD PTR _pbeam$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	and	ecx, -4					; fffffffcH
	mov	edx, DWORD PTR _pbeam$[ebp]
	mov	DWORD PTR [edx+8], ecx

; 1417 : 
; 1418 : 		if( pbeam->type != TE_BEAMFOLLOW )

	mov	eax, DWORD PTR _pbeam$[ebp]
	cmp	DWORD PTR [eax+4], 22			; 00000016H
	je	SHORT $LN7@CL_KillDea

; 1419 : 		{
; 1420 : 			// remove beam
; 1421 : 			pbeam->die = cl.time - 0.1f;  

	movsd	xmm0, QWORD PTR _cl+1525848
	subsd	xmm0, QWORD PTR __real@3fb99999a0000000
	cvtsd2ss xmm0, xmm0
	mov	ecx, DWORD PTR _pbeam$[ebp]
	movss	DWORD PTR [ecx+56], xmm0

; 1422 : 
; 1423 : 			// kill off particles
; 1424 : 			pHead = pbeam->particles;

	mov	edx, DWORD PTR _pbeam$[ebp]
	mov	eax, DWORD PTR [edx+120]
	mov	DWORD PTR _pHead$[ebp], eax
$LN4@CL_KillDea:

; 1425 : 			while( pHead )

	cmp	DWORD PTR _pHead$[ebp], 0
	je	SHORT $LN5@CL_KillDea

; 1426 : 			{
; 1427 : 				pHead->die = cl.time - 0.1f;

	movsd	xmm0, QWORD PTR _cl+1525848
	subsd	xmm0, QWORD PTR __real@3fb99999a0000000
	cvtsd2ss xmm0, xmm0
	mov	ecx, DWORD PTR _pHead$[ebp]
	movss	DWORD PTR [ecx+36], xmm0

; 1428 : 				pHead = pHead->next;

	mov	edx, DWORD PTR _pHead$[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	DWORD PTR _pHead$[ebp], eax

; 1429 : 			}

	jmp	SHORT $LN4@CL_KillDea
$LN5@CL_KillDea:

; 1430 : 
; 1431 : 			// free the beam
; 1432 : 			R_BeamFree( pbeam );

	mov	ecx, DWORD PTR _pbeam$[ebp]
	push	ecx
	call	_R_BeamFree
	add	esp, 4

; 1433 : 		}

	jmp	SHORT $LN8@CL_KillDea
$LN7@CL_KillDea:

; 1434 : 		else
; 1435 : 		{
; 1436 : 			// stay active
; 1437 : 			pbeam->next = pnewlist;

	mov	edx, DWORD PTR _pbeam$[ebp]
	mov	eax, DWORD PTR _pnewlist$[ebp]
	mov	DWORD PTR [edx], eax

; 1438 : 			pnewlist = pbeam;

	mov	ecx, DWORD PTR _pbeam$[ebp]
	mov	DWORD PTR _pnewlist$[ebp], ecx
$LN8@CL_KillDea:

; 1439 : 		}
; 1440 : 
; 1441 : 		pbeam = pnext;

	mov	edx, DWORD PTR _pnext$[ebp]
	mov	DWORD PTR _pbeam$[ebp], edx

; 1442 : 	}

	jmp	$LN10@CL_KillDea
$LN3@CL_KillDea:

; 1443 : 
; 1444 : 	// We now have a new list with the bogus stuff released.
; 1445 : 	cl_active_beams = pnewlist;

	mov	eax, DWORD PTR _pnewlist$[ebp]
	mov	DWORD PTR _cl_active_beams, eax

; 1446 : }

	mov	esp, ebp
	pop	ebp
	ret	0
_CL_KillDeadBeams ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xash_build4529_src\engine\client\gl_beams.c
_TEXT	SEGMENT
_pEnvBeam$ = 8						; size = 4
_CL_AddCustomBeam PROC

; 1371 : {

	push	ebp
	mov	ebp, esp

; 1372 : 	if( tr.draw_list->num_beam_entities >= MAX_VISIBLE_PACKET )

	mov	eax, DWORD PTR _tr+50272
	cmp	DWORD PTR [eax+24584], 2048		; 00000800H
	jb	SHORT $LN2@CL_AddCust

; 1373 : 	{
; 1374 : 		Con_Printf( S_ERROR "Too many beams %d!\n", tr.draw_list->num_beam_entities );

	mov	ecx, DWORD PTR _tr+50272
	mov	edx, DWORD PTR [ecx+24584]
	push	edx
	push	OFFSET $SG146082
	call	_Con_Printf
	add	esp, 8

; 1375 : 		return;

	jmp	SHORT $LN1@CL_AddCust
$LN2@CL_AddCust:

; 1376 : 	}
; 1377 : 
; 1378 : 	if( pEnvBeam )

	cmp	DWORD PTR _pEnvBeam$[ebp], 0
	je	SHORT $LN1@CL_AddCust

; 1379 : 	{
; 1380 : 		tr.draw_list->beam_entities[tr.draw_list->num_beam_entities] = pEnvBeam;

	mov	eax, DWORD PTR _tr+50272
	mov	ecx, DWORD PTR [eax+24584]
	mov	edx, DWORD PTR _tr+50272
	mov	eax, DWORD PTR _pEnvBeam$[ebp]
	mov	DWORD PTR [edx+ecx*4+16384], eax

; 1381 : 		tr.draw_list->num_beam_entities++;

	mov	ecx, DWORD PTR _tr+50272
	mov	edx, DWORD PTR [ecx+24584]
	add	edx, 1
	mov	eax, DWORD PTR _tr+50272
	mov	DWORD PTR [eax+24584], edx
$LN1@CL_AddCust:

; 1382 : 	}
; 1383 : }

	pop	ebp
	ret	0
_CL_AddCustomBeam ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xash_build4529_src\engine\client\gl_beams.c
_TEXT	SEGMENT
_flags$ = -28						; size = 4
tv71 = -24						; size = 4
tv67 = -20						; size = 4
_pPrev$ = -16						; size = 4
_pNext$ = -12						; size = 4
_i$ = -8						; size = 4
_pBeam$ = -4						; size = 4
_fTrans$ = 8						; size = 4
_CL_DrawBeams PROC

; 1484 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH

; 1485 : 	BEAM	*pBeam, *pNext;
; 1486 : 	BEAM	*pPrev = NULL;

	mov	DWORD PTR _pPrev$[ebp], 0

; 1487 : 	int	i, flags;
; 1488 : 
; 1489 : 	if( !CVAR_TO_BOOL( cl_draw_beams ))

	cmp	DWORD PTR _cl_draw_beams, 0
	je	SHORT $LN17@CL_DrawBea
	mov	eax, DWORD PTR _cl_draw_beams
	movss	xmm0, DWORD PTR [eax+12]
	ucomiss	xmm0, DWORD PTR __real@00000000
	lahf
	test	ah, 68					; 00000044H
	jnp	SHORT $LN17@CL_DrawBea
	mov	DWORD PTR tv67[ebp], 1
	jmp	SHORT $LN18@CL_DrawBea
$LN17@CL_DrawBea:
	mov	DWORD PTR tv67[ebp], 0
$LN18@CL_DrawBea:
	cmp	DWORD PTR tv67[ebp], 0
	jne	SHORT $LN8@CL_DrawBea

; 1490 : 		return;

	jmp	$LN1@CL_DrawBea
$LN8@CL_DrawBea:

; 1491 : 
; 1492 : 	pglShadeModel( GL_SMOOTH );

	push	7425					; 00001d01H
	call	DWORD PTR _pglShadeModel

; 1493 : 	pglDepthMask( fTrans ? GL_FALSE : GL_TRUE );

	cmp	DWORD PTR _fTrans$[ebp], 0
	je	SHORT $LN19@CL_DrawBea
	mov	DWORD PTR tv71[ebp], 0
	jmp	SHORT $LN20@CL_DrawBea
$LN19@CL_DrawBea:
	mov	DWORD PTR tv71[ebp], 1
$LN20@CL_DrawBea:
	movzx	ecx, BYTE PTR tv71[ebp]
	push	ecx
	call	DWORD PTR _pglDepthMask

; 1494 : 	
; 1495 : 	// server beams don't allocate beam chains
; 1496 : 	// all params are stored in cl_entity_t
; 1497 : 	for( i = 0; i < tr.draw_list->num_beam_entities; i++ )

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN4@CL_DrawBea
$LN2@CL_DrawBea:
	mov	edx, DWORD PTR _i$[ebp]
	add	edx, 1
	mov	DWORD PTR _i$[ebp], edx
$LN4@CL_DrawBea:
	mov	eax, DWORD PTR _tr+50272
	mov	ecx, DWORD PTR _i$[ebp]
	cmp	ecx, DWORD PTR [eax+24584]
	jae	SHORT $LN3@CL_DrawBea

; 1498 : 	{
; 1499 : 		RI.currentbeam = tr.draw_list->beam_entities[i];

	mov	edx, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR _tr+50272
	mov	ecx, DWORD PTR [eax+edx*4+16384]
	mov	DWORD PTR _RI+36, ecx

; 1500 : 		flags = RI.currentbeam->curstate.rendermode & 0xF0;

	mov	edx, DWORD PTR _RI+36
	mov	eax, DWORD PTR [edx+760]
	and	eax, 240				; 000000f0H
	mov	DWORD PTR _flags$[ebp], eax

; 1501 : 
; 1502 : 		if( fTrans && FBitSet( flags, FBEAM_SOLID ))

	cmp	DWORD PTR _fTrans$[ebp], 0
	je	SHORT $LN9@CL_DrawBea
	mov	ecx, DWORD PTR _flags$[ebp]
	and	ecx, 32					; 00000020H
	je	SHORT $LN9@CL_DrawBea

; 1503 : 			continue;

	jmp	SHORT $LN2@CL_DrawBea
$LN9@CL_DrawBea:

; 1504 : 
; 1505 : 		if( !fTrans && !FBitSet( flags, FBEAM_SOLID ))

	cmp	DWORD PTR _fTrans$[ebp], 0
	jne	SHORT $LN10@CL_DrawBea
	mov	edx, DWORD PTR _flags$[ebp]
	and	edx, 32					; 00000020H
	jne	SHORT $LN10@CL_DrawBea

; 1506 : 			continue;

	jmp	SHORT $LN2@CL_DrawBea
$LN10@CL_DrawBea:

; 1507 : 
; 1508 : 		R_BeamDrawCustomEntity( RI.currentbeam );

	mov	eax, DWORD PTR _RI+36
	push	eax
	call	_R_BeamDrawCustomEntity
	add	esp, 4

; 1509 : 		r_stats.c_view_beams_count++;

	mov	ecx, DWORD PTR _r_stats+20
	add	ecx, 1
	mov	DWORD PTR _r_stats+20, ecx

; 1510 : 	}

	jmp	$LN2@CL_DrawBea
$LN3@CL_DrawBea:

; 1511 : 
; 1512 : 	RI.currentbeam = NULL;

	mov	DWORD PTR _RI+36, 0

; 1513 : 
; 1514 : 	// draw temporary entity beams
; 1515 : 	for( pBeam = cl_active_beams; pBeam; pBeam = pNext )

	mov	edx, DWORD PTR _cl_active_beams
	mov	DWORD PTR _pBeam$[ebp], edx
	jmp	SHORT $LN7@CL_DrawBea
$LN5@CL_DrawBea:
	mov	eax, DWORD PTR _pNext$[ebp]
	mov	DWORD PTR _pBeam$[ebp], eax
$LN7@CL_DrawBea:
	cmp	DWORD PTR _pBeam$[ebp], 0
	je	$LN6@CL_DrawBea

; 1516 : 	{
; 1517 : 		// need to store the next one since we may delete this one
; 1518 : 		pNext = pBeam->next;

	mov	ecx, DWORD PTR _pBeam$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR _pNext$[ebp], edx

; 1519 : 
; 1520 : 		if( fTrans && FBitSet( pBeam->flags, FBEAM_SOLID ))

	cmp	DWORD PTR _fTrans$[ebp], 0
	je	SHORT $LN11@CL_DrawBea
	mov	eax, DWORD PTR _pBeam$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	and	ecx, 32					; 00000020H
	je	SHORT $LN11@CL_DrawBea

; 1521 : 			continue;

	jmp	SHORT $LN5@CL_DrawBea
$LN11@CL_DrawBea:

; 1522 : 
; 1523 : 		if( !fTrans && !FBitSet( pBeam->flags, FBEAM_SOLID ))

	cmp	DWORD PTR _fTrans$[ebp], 0
	jne	SHORT $LN12@CL_DrawBea
	mov	edx, DWORD PTR _pBeam$[ebp]
	mov	eax, DWORD PTR [edx+8]
	and	eax, 32					; 00000020H
	jne	SHORT $LN12@CL_DrawBea

; 1524 : 			continue;

	jmp	SHORT $LN5@CL_DrawBea
$LN12@CL_DrawBea:

; 1525 : 
; 1526 : 		// retire old beams
; 1527 : 		if( CL_BeamAttemptToDie( pBeam ))

	mov	ecx, DWORD PTR _pBeam$[ebp]
	push	ecx
	call	_CL_BeamAttemptToDie
	add	esp, 4
	test	eax, eax
	je	SHORT $LN13@CL_DrawBea

; 1528 : 		{
; 1529 : 			// reset links
; 1530 : 			if( pPrev ) pPrev->next = pNext;

	cmp	DWORD PTR _pPrev$[ebp], 0
	je	SHORT $LN14@CL_DrawBea
	mov	edx, DWORD PTR _pPrev$[ebp]
	mov	eax, DWORD PTR _pNext$[ebp]
	mov	DWORD PTR [edx], eax
	jmp	SHORT $LN15@CL_DrawBea
$LN14@CL_DrawBea:

; 1531 : 			else cl_active_beams = pNext;

	mov	ecx, DWORD PTR _pNext$[ebp]
	mov	DWORD PTR _cl_active_beams, ecx
$LN15@CL_DrawBea:

; 1532 : 
; 1533 : 			// free the beam
; 1534 : 			R_BeamFree( pBeam );

	mov	edx, DWORD PTR _pBeam$[ebp]
	push	edx
	call	_R_BeamFree
	add	esp, 4

; 1535 : 
; 1536 : 			pBeam = NULL;

	mov	DWORD PTR _pBeam$[ebp], 0

; 1537 : 			continue;

	jmp	SHORT $LN5@CL_DrawBea
$LN13@CL_DrawBea:

; 1538 : 		}
; 1539 : 
; 1540 : 		R_BeamDraw( pBeam, cl.time - cl.oldtime );

	movsd	xmm0, QWORD PTR _cl+1525848
	subsd	xmm0, QWORD PTR _cl+1525856
	cvtsd2ss xmm0, xmm0
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _pBeam$[ebp]
	push	eax
	call	_R_BeamDraw
	add	esp, 8

; 1541 : 		r_stats.c_view_beams_count++;

	mov	ecx, DWORD PTR _r_stats+20
	add	ecx, 1
	mov	DWORD PTR _r_stats+20, ecx

; 1542 : 		pPrev = pBeam;

	mov	edx, DWORD PTR _pBeam$[ebp]
	mov	DWORD PTR _pPrev$[ebp], edx

; 1543 : 	}

	jmp	$LN5@CL_DrawBea
$LN6@CL_DrawBea:

; 1544 : 
; 1545 : 	pglShadeModel( GL_FLAT );

	push	7424					; 00001d00H
	call	DWORD PTR _pglShadeModel

; 1546 : 	pglDepthMask( GL_TRUE );

	push	1
	call	DWORD PTR _pglDepthMask
$LN1@CL_DrawBea:

; 1547 : }

	mov	esp, ebp
	pop	ebp
	ret	0
_CL_DrawBeams ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xash_build4529_src\engine\client\gl_beams.c
_TEXT	SEGMENT
_CL_FreeViewBeams PROC

; 1357 : {

	push	ebp
	mov	ebp, esp

; 1358 : 	if( cl_viewbeams )

	cmp	DWORD PTR _cl_viewbeams, 0
	je	SHORT $LN2@CL_FreeVie

; 1359 : 		Mem_Free( cl_viewbeams );

	push	1359					; 0000054fH
	push	OFFSET $SG146077
	mov	eax, DWORD PTR _cl_viewbeams
	push	eax
	call	__Mem_Free
	add	esp, 12					; 0000000cH
$LN2@CL_FreeVie:

; 1360 : 	cl_viewbeams = NULL;

	mov	DWORD PTR _cl_viewbeams, 0

; 1361 : }

	pop	ebp
	ret	0
_CL_FreeViewBeams ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xash_build4529_src\engine\client\gl_beams.c
_TEXT	SEGMENT
_i$ = -4						; size = 4
_CL_ClearViewBeams PROC

; 1336 : {

	push	ebp
	mov	ebp, esp
	push	ecx

; 1337 : 	int	i;
; 1338 : 
; 1339 : 	if( !cl_viewbeams ) return;

	cmp	DWORD PTR _cl_viewbeams, 0
	jne	SHORT $LN5@CL_ClearVi
	jmp	SHORT $LN1@CL_ClearVi
$LN5@CL_ClearVi:

; 1340 : 
; 1341 : 	// clear beams
; 1342 : 	cl_free_beams = cl_viewbeams;

	mov	eax, DWORD PTR _cl_viewbeams
	mov	DWORD PTR _cl_free_beams, eax

; 1343 : 	cl_active_beams = NULL;

	mov	DWORD PTR _cl_active_beams, 0

; 1344 : 
; 1345 : 	for( i = 0; i < GI->max_beams - 1; i++ )

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN4@CL_ClearVi
$LN2@CL_ClearVi:
	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
$LN4@CL_ClearVi:
	mov	edx, DWORD PTR _SI+768
	mov	eax, DWORD PTR [edx+1664]
	sub	eax, 1
	cmp	DWORD PTR _i$[ebp], eax
	jge	SHORT $LN3@CL_ClearVi

; 1346 : 		cl_viewbeams[i].next = &cl_viewbeams[i+1];

	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, 1
	imul	edx, ecx, 124
	add	edx, DWORD PTR _cl_viewbeams
	imul	eax, DWORD PTR _i$[ebp], 124
	mov	ecx, DWORD PTR _cl_viewbeams
	mov	DWORD PTR [ecx+eax], edx
	jmp	SHORT $LN2@CL_ClearVi
$LN3@CL_ClearVi:

; 1347 : 	cl_viewbeams[GI->max_beams - 1].next = NULL;

	mov	edx, DWORD PTR _SI+768
	mov	eax, DWORD PTR [edx+1664]
	sub	eax, 1
	imul	ecx, eax, 124
	mov	edx, DWORD PTR _cl_viewbeams
	mov	DWORD PTR [edx+ecx], 0
$LN1@CL_ClearVi:

; 1348 : }

	mov	esp, ebp
	pop	ebp
	ret	0
_CL_ClearViewBeams ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xash_build4529_src\engine\client\gl_beams.c
_TEXT	SEGMENT
_CL_InitViewBeams PROC

; 1324 : {

	push	ebp
	mov	ebp, esp

; 1325 : 	cl_viewbeams = Mem_Calloc( cls.mempool, sizeof( BEAM ) * GI->max_beams );

	push	1325					; 0000052dH
	push	OFFSET $SG146063
	push	1
	mov	eax, DWORD PTR _SI+768
	imul	ecx, DWORD PTR [eax+1664], 124
	push	ecx
	mov	edx, DWORD PTR _cls+40
	push	edx
	call	__Mem_Alloc
	add	esp, 20					; 00000014H
	mov	DWORD PTR _cl_viewbeams, eax

; 1326 : 	CL_ClearViewBeams();

	call	_CL_ClearViewBeams

; 1327 : }

	pop	ebp
	ret	0
_CL_InitViewBeams ENDP
_TEXT	ENDS
END
