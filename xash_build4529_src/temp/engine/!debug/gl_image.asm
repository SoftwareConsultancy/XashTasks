; Listing generated by Microsoft (R) Optimizing Compiler Version 19.16.27045.0 

	TITLE	C:\Users\USER\Downloads\xash_build4529_src\engine\client\gl_image.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

_DATA	SEGMENT
COMM	_pglColor4f:DWORD
COMM	_pglColor4fv:DWORD
COMM	_pglColor4i:DWORD
COMM	_pglColor4iv:DWORD
COMM	_pglColor4s:DWORD
COMM	_pglColor4sv:DWORD
COMM	_pglColor4ub:DWORD
COMM	_pglColor4ubv:DWORD
COMM	_pglColor4ui:DWORD
COMM	_pglColor4uiv:DWORD
COMM	_pglColor4us:DWORD
COMM	_pglColor4usv:DWORD
COMM	_pglColorMask:DWORD
COMM	_pglColorMaterial:DWORD
COMM	_pglColorPointer:DWORD
COMM	_pglCopyPixels:DWORD
COMM	_pglCopyTexImage1D:DWORD
COMM	_pglCopyTexImage2D:DWORD
COMM	_pglCopyTexSubImage1D:DWORD
COMM	_pglCopyTexSubImage2D:DWORD
COMM	_pglCullFace:DWORD
COMM	_pglDeleteLists:DWORD
COMM	_pglDeleteTextures:DWORD
COMM	_pglDepthFunc:DWORD
COMM	_pglDepthMask:DWORD
COMM	_pglDepthRange:DWORD
COMM	_pglDisable:DWORD
COMM	_pglDisableClientState:DWORD
COMM	_pglDrawArrays:DWORD
COMM	_pglDrawBuffer:DWORD
COMM	_pglDrawElements:DWORD
COMM	_pglDrawPixels:DWORD
COMM	_pglEdgeFlag:DWORD
COMM	_pglEdgeFlagPointer:DWORD
COMM	_pglEdgeFlagv:DWORD
COMM	_pglEnable:DWORD
COMM	_pglEnableClientState:DWORD
COMM	_pglEnd:DWORD
COMM	_pglEndList:DWORD
COMM	_pglEvalCoord1d:DWORD
COMM	_pglEvalCoord1dv:DWORD
COMM	_pglEvalCoord1f:DWORD
COMM	_pglEvalCoord1fv:DWORD
COMM	_pglEvalCoord2d:DWORD
COMM	_pglEvalCoord2dv:DWORD
COMM	_pglEvalCoord2f:DWORD
COMM	_pglEvalCoord2fv:DWORD
COMM	_pglEvalMesh1:DWORD
COMM	_pglEvalMesh2:DWORD
COMM	_pglEvalPoint1:DWORD
COMM	_pglEvalPoint2:DWORD
COMM	_pglFeedbackBuffer:DWORD
COMM	_pglFinish:DWORD
COMM	_pglFlush:DWORD
COMM	_pglFogf:DWORD
COMM	_pglFogfv:DWORD
COMM	_pglFogi:DWORD
COMM	_pglFogiv:DWORD
COMM	_pglFrontFace:DWORD
COMM	_pglFrustum:DWORD
COMM	_pglGenTextures:DWORD
COMM	_pglGetBooleanv:DWORD
COMM	_pglGetClipPlane:DWORD
COMM	_pglGetDoublev:DWORD
COMM	_pglGetFloatv:DWORD
COMM	_pglGetIntegerv:DWORD
COMM	_pglGetLightfv:DWORD
COMM	_pglGetLightiv:DWORD
COMM	_pglGetMapdv:DWORD
COMM	_pglGetMapfv:DWORD
COMM	_pglGetMapiv:DWORD
COMM	_pglGetMaterialfv:DWORD
COMM	_pglGetMaterialiv:DWORD
COMM	_pglGetPixelMapfv:DWORD
COMM	_pglGetPixelMapuiv:DWORD
COMM	_pglGetPixelMapusv:DWORD
COMM	_pglGetPointerv:DWORD
COMM	_pglGetPolygonStipple:DWORD
COMM	_pglGetTexEnvfv:DWORD
COMM	_pglGetTexEnviv:DWORD
COMM	_pglGetTexGendv:DWORD
COMM	_pglGetTexGenfv:DWORD
COMM	_pglGetTexGeniv:DWORD
COMM	_pglGetTexImage:DWORD
COMM	_pglGetTexLevelParameterfv:DWORD
COMM	_pglGetTexLevelParameteriv:DWORD
COMM	_pglGetTexParameterfv:DWORD
COMM	_pglGetTexParameteriv:DWORD
COMM	_pglHint:DWORD
COMM	_pglIndexMask:DWORD
COMM	_pglIndexPointer:DWORD
COMM	_pglIndexd:DWORD
COMM	_pglIndexdv:DWORD
COMM	_pglIndexf:DWORD
COMM	_pglIndexfv:DWORD
COMM	_pglIndexi:DWORD
COMM	_pglIndexiv:DWORD
COMM	_pglIndexs:DWORD
COMM	_pglIndexsv:DWORD
COMM	_pglIndexub:DWORD
COMM	_pglIndexubv:DWORD
COMM	_pglInitNames:DWORD
COMM	_pglInterleavedArrays:DWORD
COMM	_pglLightModelf:DWORD
COMM	_pglLightModelfv:DWORD
COMM	_pglLightModeli:DWORD
COMM	_pglLightModeliv:DWORD
COMM	_pglLightf:DWORD
COMM	_pglLightfv:DWORD
COMM	_pglLighti:DWORD
COMM	_pglLightiv:DWORD
COMM	_pglLineStipple:DWORD
COMM	_pglLineWidth:DWORD
COMM	_pglListBase:DWORD
COMM	_pglLoadIdentity:DWORD
COMM	_pglLoadMatrixd:DWORD
COMM	_pglLoadMatrixf:DWORD
COMM	_pglLoadName:DWORD
COMM	_pglLogicOp:DWORD
COMM	_pglMap1d:DWORD
COMM	_pglMap1f:DWORD
COMM	_pglMap2d:DWORD
COMM	_pglMap2f:DWORD
COMM	_pglMapGrid1d:DWORD
COMM	_pglMapGrid1f:DWORD
COMM	_pglMapGrid2d:DWORD
COMM	_pglMapGrid2f:DWORD
COMM	_pglMaterialf:DWORD
COMM	_pglMaterialfv:DWORD
COMM	_pglMateriali:DWORD
COMM	_pglMaterialiv:DWORD
COMM	_pglMatrixMode:DWORD
COMM	_pglMultMatrixd:DWORD
COMM	_pglMultMatrixf:DWORD
COMM	_pglNewList:DWORD
COMM	_pglNormal3b:DWORD
COMM	_pglNormal3bv:DWORD
COMM	_pglNormal3d:DWORD
COMM	_pglNormal3dv:DWORD
COMM	_pglNormal3f:DWORD
COMM	_pglNormal3fv:DWORD
COMM	_pglNormal3i:DWORD
COMM	_pglNormal3iv:DWORD
COMM	_pglNormal3s:DWORD
COMM	_pglNormal3sv:DWORD
COMM	_pglNormalPointer:DWORD
COMM	_pglOrtho:DWORD
COMM	_pglPassThrough:DWORD
COMM	_pglPixelMapfv:DWORD
COMM	_pglPixelMapuiv:DWORD
COMM	_pglPixelMapusv:DWORD
COMM	_pglPixelStoref:DWORD
COMM	_pglPixelStorei:DWORD
COMM	_pglPixelTransferf:DWORD
COMM	_pglPixelTransferi:DWORD
COMM	_pglPixelZoom:DWORD
COMM	_pglPointSize:DWORD
COMM	_pglPolygonMode:DWORD
COMM	_pglPolygonOffset:DWORD
COMM	_pglPolygonStipple:DWORD
COMM	_pglPopAttrib:DWORD
COMM	_pglPopClientAttrib:DWORD
COMM	_pglPopMatrix:DWORD
COMM	_pglPopName:DWORD
COMM	_pglPushAttrib:DWORD
COMM	_pglPushClientAttrib:DWORD
COMM	_pglPushMatrix:DWORD
COMM	_pglPushName:DWORD
COMM	_pglRasterPos2d:DWORD
COMM	_pglRasterPos2dv:DWORD
COMM	_pglRasterPos2f:DWORD
COMM	_pglRasterPos2fv:DWORD
COMM	_pglRasterPos2i:DWORD
COMM	_pglRasterPos2iv:DWORD
COMM	_pglRasterPos2s:DWORD
COMM	_pglRasterPos2sv:DWORD
COMM	_pglRasterPos3d:DWORD
COMM	_pglRasterPos3dv:DWORD
COMM	_pglRasterPos3f:DWORD
COMM	_pglRasterPos3fv:DWORD
COMM	_pglRasterPos3i:DWORD
COMM	_pglRasterPos3iv:DWORD
COMM	_pglRasterPos3s:DWORD
COMM	_pglRasterPos3sv:DWORD
COMM	_pglRasterPos4d:DWORD
COMM	_pglRasterPos4dv:DWORD
COMM	_pglRasterPos4f:DWORD
COMM	_pglRasterPos4fv:DWORD
COMM	_pglRasterPos4i:DWORD
COMM	_pglRasterPos4iv:DWORD
COMM	_pglRasterPos4s:DWORD
COMM	_pglRasterPos4sv:DWORD
COMM	_pglReadBuffer:DWORD
COMM	_pglReadPixels:DWORD
COMM	_pglRectd:DWORD
COMM	_pglRectdv:DWORD
COMM	_pglRectf:DWORD
COMM	_pglRectfv:DWORD
COMM	_pglRecti:DWORD
COMM	_pglRectiv:DWORD
COMM	_pglRects:DWORD
COMM	_pglRectsv:DWORD
COMM	_pglRotated:DWORD
COMM	_pglRotatef:DWORD
COMM	_pglScaled:DWORD
COMM	_pglScalef:DWORD
COMM	_pglScissor:DWORD
COMM	_pglSelectBuffer:DWORD
COMM	_pglShadeModel:DWORD
COMM	_pglStencilFunc:DWORD
COMM	_pglStencilMask:DWORD
COMM	_pglStencilOp:DWORD
COMM	_pglTexCoord1d:DWORD
COMM	_pglTexCoord1dv:DWORD
COMM	_pglTexCoord1f:DWORD
COMM	_pglTexCoord1fv:DWORD
COMM	_pglTexCoord1i:DWORD
COMM	_pglTexCoord1iv:DWORD
COMM	_pglTexCoord1s:DWORD
COMM	_pglTexCoord1sv:DWORD
COMM	_pglTexCoord2d:DWORD
COMM	_pglTexCoord2dv:DWORD
COMM	_pglTexCoord2f:DWORD
COMM	_pglTexCoord2fv:DWORD
COMM	_pglTexCoord2i:DWORD
COMM	_pglTexCoord2iv:DWORD
COMM	_pglTexCoord2s:DWORD
COMM	_pglTexCoord2sv:DWORD
COMM	_pglTexCoord3d:DWORD
COMM	_pglTexCoord3dv:DWORD
COMM	_pglTexCoord3f:DWORD
COMM	_pglTexCoord3fv:DWORD
COMM	_pglTexCoord3i:DWORD
COMM	_pglTexCoord3iv:DWORD
COMM	_pglTexCoord3s:DWORD
COMM	_pglTexCoord3sv:DWORD
COMM	_pglTexCoord4d:DWORD
COMM	_pglTexCoord4dv:DWORD
COMM	_pglTexCoord4f:DWORD
COMM	_pglTexCoord4fv:DWORD
COMM	_pglTexCoord4i:DWORD
COMM	_pglTexCoord4iv:DWORD
COMM	_pglTexCoord4s:DWORD
COMM	_pglTexCoord4sv:DWORD
COMM	_pglTexCoordPointer:DWORD
COMM	_pglTexEnvf:DWORD
COMM	_pglTexEnvfv:DWORD
COMM	_pglTexEnvi:DWORD
COMM	_pglTexEnviv:DWORD
COMM	_pglTexGend:DWORD
COMM	_pglTexGendv:DWORD
COMM	_pglTexGenf:DWORD
COMM	_pglTexGenfv:DWORD
COMM	_pglTexGeni:DWORD
COMM	_pglTexGeniv:DWORD
COMM	_pglTexImage1D:DWORD
COMM	_pglTexImage2D:DWORD
COMM	_pglTexParameterf:DWORD
COMM	_pglTexParameterfv:DWORD
COMM	_pglTexParameteri:DWORD
COMM	_pglTexParameteriv:DWORD
COMM	_pglTexSubImage1D:DWORD
COMM	_pglTexSubImage2D:DWORD
COMM	_pglTranslated:DWORD
COMM	_pglTranslatef:DWORD
COMM	_pglVertex2d:DWORD
COMM	_pglVertex2dv:DWORD
COMM	_pglVertex2f:DWORD
COMM	_pglVertex2fv:DWORD
COMM	_pglVertex2i:DWORD
COMM	_pglVertex2iv:DWORD
COMM	_pglVertex2s:DWORD
COMM	_pglVertex2sv:DWORD
COMM	_pglVertex3d:DWORD
COMM	_pglVertex3dv:DWORD
COMM	_pglVertex3f:DWORD
COMM	_pglVertex3fv:DWORD
COMM	_pglVertex3i:DWORD
COMM	_pglVertex3iv:DWORD
COMM	_pglVertex3s:DWORD
COMM	_pglVertex3sv:DWORD
COMM	_pglVertex4d:DWORD
COMM	_pglVertex4dv:DWORD
COMM	_pglVertex4f:DWORD
COMM	_pglVertex4fv:DWORD
COMM	_pglVertex4i:DWORD
COMM	_pglVertex4iv:DWORD
COMM	_pglVertex4s:DWORD
COMM	_pglVertex4sv:DWORD
COMM	_pglVertexPointer:DWORD
COMM	_pglViewport:DWORD
COMM	_pglPointParameterfEXT:DWORD
COMM	_pglPointParameterfvEXT:DWORD
COMM	_pglLockArraysEXT:DWORD
COMM	_pglUnlockArraysEXT:DWORD
COMM	_pglActiveTextureARB:DWORD
COMM	_pglClientActiveTextureARB:DWORD
COMM	_pglGetCompressedTexImage:DWORD
COMM	_pglDrawRangeElements:DWORD
COMM	_pglDrawRangeElementsEXT:DWORD
COMM	_pglMultiTexCoord1f:DWORD
COMM	_pglMultiTexCoord2f:DWORD
COMM	_pglMultiTexCoord3f:DWORD
COMM	_pglMultiTexCoord4f:DWORD
COMM	_pglActiveTexture:DWORD
COMM	_pglClientActiveTexture:DWORD
COMM	_pglCompressedTexImage3DARB:DWORD
COMM	_pglCompressedTexImage2DARB:DWORD
COMM	_pglCompressedTexImage1DARB:DWORD
COMM	_pglCompressedTexSubImage3DARB:DWORD
COMM	_pglCompressedTexSubImage2DARB:DWORD
COMM	_pglCompressedTexSubImage1DARB:DWORD
COMM	_pglDeleteObjectARB:DWORD
COMM	_pglGetHandleARB:DWORD
COMM	_pglDetachObjectARB:DWORD
COMM	_pglCreateShaderObjectARB:DWORD
COMM	_pglShaderSourceARB:DWORD
COMM	_pglCompileShaderARB:DWORD
COMM	_pglCreateProgramObjectARB:DWORD
COMM	_pglAttachObjectARB:DWORD
COMM	_pglLinkProgramARB:DWORD
COMM	_pglUseProgramObjectARB:DWORD
COMM	_pglValidateProgramARB:DWORD
COMM	_pglBindProgramARB:DWORD
COMM	_pglDeleteProgramsARB:DWORD
COMM	_pglGenProgramsARB:DWORD
COMM	_pglProgramStringARB:DWORD
COMM	_pglProgramEnvParameter4fARB:DWORD
COMM	_pglProgramLocalParameter4fARB:DWORD
COMM	_pglUniform1fARB:DWORD
COMM	_pglUniform2fARB:DWORD
COMM	_pglUniform3fARB:DWORD
COMM	_pglUniform4fARB:DWORD
COMM	_pglUniform1iARB:DWORD
COMM	_pglUniform2iARB:DWORD
COMM	_pglUniform3iARB:DWORD
COMM	_pglUniform4iARB:DWORD
COMM	_pglUniform1fvARB:DWORD
COMM	_pglUniform2fvARB:DWORD
COMM	_pglUniform3fvARB:DWORD
COMM	_pglUniform4fvARB:DWORD
COMM	_pglUniform1ivARB:DWORD
COMM	_pglUniform2ivARB:DWORD
COMM	_pglUniform3ivARB:DWORD
COMM	_pglUniform4ivARB:DWORD
COMM	_pglUniformMatrix2fvARB:DWORD
COMM	_pglUniformMatrix3fvARB:DWORD
COMM	_pglUniformMatrix4fvARB:DWORD
COMM	_pglGetObjectParameterfvARB:DWORD
COMM	_pglGetObjectParameterivARB:DWORD
COMM	_pglGetInfoLogARB:DWORD
COMM	_pglGetAttachedObjectsARB:DWORD
COMM	_pglGetUniformLocationARB:DWORD
COMM	_pglGetActiveUniformARB:DWORD
COMM	_pglGetUniformfvARB:DWORD
COMM	_pglGetUniformivARB:DWORD
COMM	_pglGetShaderSourceARB:DWORD
COMM	_pglTexImage3D:DWORD
COMM	_pglTexSubImage3D:DWORD
COMM	_pglCopyTexSubImage3D:DWORD
COMM	_pglBlendEquationEXT:DWORD
COMM	_pglStencilOpSeparate:DWORD
COMM	_pglStencilFuncSeparate:DWORD
COMM	_pglActiveStencilFaceEXT:DWORD
COMM	_pglVertexAttribPointerARB:DWORD
COMM	_pglEnableVertexAttribArrayARB:DWORD
COMM	_pglDisableVertexAttribArrayARB:DWORD
COMM	_pglBindAttribLocationARB:DWORD
COMM	_pglGetActiveAttribARB:DWORD
COMM	_pglGetAttribLocationARB:DWORD
COMM	_pglBindFragDataLocation:DWORD
COMM	_pglVertexAttrib2fARB:DWORD
COMM	_pglVertexAttrib2fvARB:DWORD
COMM	_pglVertexAttrib3fvARB:DWORD
COMM	_pglBindBufferARB:DWORD
COMM	_pglDeleteBuffersARB:DWORD
COMM	_pglGenBuffersARB:DWORD
COMM	_pglIsBufferARB:DWORD
COMM	_pglMapBufferARB:DWORD
COMM	_pglUnmapBufferARB:DWORD
COMM	_pglBufferDataARB:DWORD
COMM	_pglBufferSubDataARB:DWORD
COMM	_pglGenQueriesARB:DWORD
COMM	_pglDeleteQueriesARB:DWORD
COMM	_pglIsQueryARB:DWORD
COMM	_pglBeginQueryARB:DWORD
COMM	_pglEndQueryARB:DWORD
COMM	_pglGetQueryivARB:DWORD
COMM	_pglGetQueryObjectivARB:DWORD
COMM	_pglGetQueryObjectuivARB:DWORD
COMM	_pglDebugMessageControlARB:DWORD
COMM	_pglDebugMessageInsertARB:DWORD
COMM	_pglDebugMessageCallbackARB:DWORD
COMM	_pglGetDebugMessageLogARB:DWORD
COMM	_pglIsRenderbuffer:DWORD
COMM	_pglBindRenderbuffer:DWORD
COMM	_pglDeleteRenderbuffers:DWORD
COMM	_pglGenRenderbuffers:DWORD
COMM	_pglRenderbufferStorage:DWORD
COMM	_pglRenderbufferStorageMultisample:DWORD
COMM	_pglGetRenderbufferParameteriv:DWORD
COMM	_pglIsFramebuffer:DWORD
COMM	_pglBindFramebuffer:DWORD
COMM	_pglDeleteFramebuffers:DWORD
COMM	_pglGenFramebuffers:DWORD
COMM	_pglCheckFramebufferStatus:DWORD
COMM	_pglFramebufferTexture1D:DWORD
COMM	_pglFramebufferTexture2D:DWORD
COMM	_pglFramebufferTexture3D:DWORD
COMM	_pglFramebufferTextureLayer:DWORD
COMM	_pglFramebufferRenderbuffer:DWORD
COMM	_pglGetFramebufferAttachmentParameteriv:DWORD
COMM	_pglBlitFramebuffer:DWORD
COMM	_pglDrawBuffersARB:DWORD
COMM	_pglGenerateMipmap:DWORD
COMM	_pglBindVertexArray:DWORD
COMM	_pglDeleteVertexArrays:DWORD
COMM	_pglGenVertexArrays:DWORD
COMM	_pglIsVertexArray:DWORD
COMM	_pglSwapInterval:DWORD
COMM	_pwglSwapBuffers:DWORD
COMM	_pwglCopyContext:DWORD
COMM	_pwglCreateContext:DWORD
COMM	_pwglCreateLayerContext:DWORD
COMM	_pwglDeleteContext:DWORD
COMM	_pwglGetCurrentContext:DWORD
COMM	_pwglGetProcAddress:DWORD
COMM	_pwglMakeCurrent:DWORD
COMM	_pwglShareLists:DWORD
COMM	_pwglUseFontBitmaps:DWORD
COMM	_pwglUseFontOutlines:DWORD
COMM	_pwglDescribeLayerPlane:DWORD
COMM	_pwglSetLayerPaletteEntries:DWORD
COMM	_pwglGetLayerPaletteEntries:DWORD
COMM	_pwglRealizeLayerPalette:DWORD
COMM	_pwglSwapLayerBuffers:DWORD
COMM	_pwglSwapIntervalEXT:DWORD
COMM	_pwglCreateContextAttribsARB:DWORD
COMM	_pwglGetPixelFormatAttribiv:DWORD
COMM	_pwglChoosePixelFormat:DWORD
COMM	_pwglGetExtensionsStringEXT:DWORD
COMM	_pglGetError:DWORD
COMM	_pglGetString:DWORD
COMM	_pglAccum:DWORD
COMM	_pglAlphaFunc:DWORD
COMM	_pglArrayElement:DWORD
COMM	_pglBegin:DWORD
COMM	_pglBindTexture:DWORD
COMM	_pglBitmap:DWORD
COMM	_pglBlendFunc:DWORD
COMM	_pglCallList:DWORD
COMM	_pglCallLists:DWORD
COMM	_pglClear:DWORD
COMM	_pglClearAccum:DWORD
COMM	_pglClearColor:DWORD
COMM	_pglClearDepth:DWORD
COMM	_pglClearIndex:DWORD
COMM	_pglClearStencil:DWORD
COMM	_pglIsEnabled:DWORD
COMM	_pglIsList:DWORD
COMM	_pglIsTexture:DWORD
COMM	_pglClipPlane:DWORD
COMM	_pglColor3b:DWORD
COMM	_pglColor3bv:DWORD
COMM	_pglColor3d:DWORD
COMM	_pglColor3dv:DWORD
COMM	_pglColor3f:DWORD
COMM	_pglColor3fv:DWORD
COMM	_pglColor3i:DWORD
COMM	_pglColor3iv:DWORD
COMM	_pglColor3s:DWORD
COMM	_pglColor3sv:DWORD
COMM	_pglColor3ub:DWORD
COMM	_pglColor3ubv:DWORD
COMM	_pglColor3ui:DWORD
COMM	_pglColor3uiv:DWORD
COMM	_pglColor3us:DWORD
COMM	_pglColor3usv:DWORD
COMM	_pglColor4b:DWORD
COMM	_pglColor4bv:DWORD
COMM	_pglColor4d:DWORD
COMM	_pglColor4dv:DWORD
_DATA	ENDS
PUBLIC	_GL_FreeImage
PUBLIC	_GL_Bind
PUBLIC	_R_SetTextureParameters
PUBLIC	_R_GetTexture
PUBLIC	_GL_LoadTexture
PUBLIC	_GL_LoadTextureArray
PUBLIC	_GL_LoadTextureFromBuffer
PUBLIC	_GL_ResampleTexture
PUBLIC	_GL_CreateTexture
PUBLIC	_GL_CreateTextureArray
PUBLIC	_GL_ProcessTexture
PUBLIC	_GL_UpdateTexSize
PUBLIC	_GL_ApplyTextureParams
PUBLIC	_GL_FindTexture
PUBLIC	_GL_FreeTexture
PUBLIC	_R_InitDlightTexture
PUBLIC	_R_TextureList_f
PUBLIC	_R_InitImages
PUBLIC	_R_ShutdownImages
PUBLIC	_GL_TexMemory
PUBLIC	_GL_BoxFilter3x3
PUBLIC	_GL_ApplyFilter
PUBLIC	_GL_CheckTexName
PUBLIC	__real@00000000
PUBLIC	__real@3c010204
PUBLIC	__real@3e800000
PUBLIC	__real@3f000000
PUBLIC	__real@3f400000
PUBLIC	__real@3f800000
PUBLIC	__real@4041800000000000
PUBLIC	__real@406fe00000000000
PUBLIC	__real@42fe0000
PUBLIC	__real@bf800000
PUBLIC	__xmm@41f00000000000000000000000000000
PUBLIC	__xmm@80000000800000008000000080000000
EXTRN	___report_rangecheckfailure:PROC
EXTRN	_memcpy:PROC
EXTRN	_memset:PROC
EXTRN	_Sys_Error:PROC
EXTRN	_Cmd_AddCommand:PROC
EXTRN	_Cmd_RemoveCommand:PROC
EXTRN	_Q_strlen:PROC
EXTRN	_Q_strncat:PROC
EXTRN	_Q_strncpy:PROC
EXTRN	_Q_strnicmp:PROC
EXTRN	_Q_pretifymem:PROC
EXTRN	_va:PROC
EXTRN	__Mem_Realloc:PROC
EXTRN	__Mem_Alloc:PROC
EXTRN	_Cvar_SetValue:PROC
EXTRN	_DBG_AssertFunction:PROC
EXTRN	_COM_FileBase:PROC
EXTRN	_COM_CheckString:PROC
EXTRN	_FS_LoadImage:PROC
EXTRN	_FS_CopyImage:PROC
EXTRN	_FS_FreeImage:PROC
EXTRN	_Image_Process:PROC
EXTRN	_Image_SetForceFlags:PROC
EXTRN	_Host_Error:PROC
EXTRN	_Con_Reportf:PROC
EXTRN	_Con_DPrintf:PROC
EXTRN	_Con_Printf:PROC
EXTRN	_COM_HashKey:PROC
EXTRN	_CL_IsQuakeCompatible:PROC
EXTRN	_sqrt:PROC
EXTRN	_VectorNormalizeLength2:PROC
EXTRN	_GL_SelectTexture:PROC
EXTRN	_GL_CleanupAllTextureUnits:PROC
EXTRN	_GL_ErrorString:PROC
EXTRN	_GL_Support:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__chkstk:PROC
EXTRN	_host:BYTE
EXTRN	_PFDesc:BYTE
EXTRN	_r_temppool:DWORD
EXTRN	_tr:BYTE
EXTRN	_glConfig:BYTE
EXTRN	_glState:BYTE
EXTRN	_glw_state:BYTE
EXTRN	_gl_texture_anisotropy:DWORD
EXTRN	_gl_check_errors:DWORD
EXTRN	_gl_texture_lodbias:DWORD
EXTRN	_gl_texture_nearest:DWORD
EXTRN	_gl_lightmap_nearest:DWORD
EXTRN	_gl_emboss_scale:DWORD
EXTRN	_gl_round_down:DWORD
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
_BSS	SEGMENT
_gl_textures DB	0140000H DUP (?)
_gl_texturesHashTable DD 0400H DUP (?)
_gl_numTextures DD 01H DUP (?)
?scaledImage@?1??GL_ResampleTexture@@9@9 DD 01H DUP (?)	; `GL_ResampleTexture'::`2'::scaledImage
?data2D@?1??GL_FakeImage@@9@9 DB 0400H DUP (?)		; `GL_FakeImage'::`2'::data2D
?r_image@?1??GL_FakeImage@@9@9 DB 024H DUP (?)		; `GL_FakeImage'::`2'::r_image
_BSS	ENDS
;	COMDAT __xmm@80000000800000008000000080000000
CONST	SEGMENT
__xmm@80000000800000008000000080000000 DB 00H, 00H, 00H, 080H, 00H, 00H, 00H
	DB	080H, 00H, 00H, 00H, 080H, 00H, 00H, 00H, 080H
CONST	ENDS
;	COMDAT __xmm@41f00000000000000000000000000000
CONST	SEGMENT
__xmm@41f00000000000000000000000000000 DB 00H, 00H, 00H, 00H, 00H, 00H, 00H
	DB	00H, 00H, 00H, 00H, 00H, 00H, 00H, 0f0H, 'A'
CONST	ENDS
;	COMDAT __real@bf800000
CONST	SEGMENT
__real@bf800000 DD 0bf800000r			; -1
CONST	ENDS
;	COMDAT __real@42fe0000
CONST	SEGMENT
__real@42fe0000 DD 042fe0000r			; 127
CONST	ENDS
;	COMDAT __real@406fe00000000000
CONST	SEGMENT
__real@406fe00000000000 DQ 0406fe00000000000r	; 255
CONST	ENDS
;	COMDAT __real@4041800000000000
CONST	SEGMENT
__real@4041800000000000 DQ 04041800000000000r	; 35
CONST	ENDS
;	COMDAT __real@3f800000
CONST	SEGMENT
__real@3f800000 DD 03f800000r			; 1
CONST	ENDS
;	COMDAT __real@3f400000
CONST	SEGMENT
__real@3f400000 DD 03f400000r			; 0.75
CONST	ENDS
;	COMDAT __real@3f000000
CONST	SEGMENT
__real@3f000000 DD 03f000000r			; 0.5
CONST	ENDS
;	COMDAT __real@3e800000
CONST	SEGMENT
__real@3e800000 DD 03e800000r			; 0.25
CONST	ENDS
;	COMDAT __real@3c010204
CONST	SEGMENT
__real@3c010204 DD 03c010204r			; 0.00787402
CONST	ENDS
;	COMDAT __real@00000000
CONST	SEGMENT
__real@00000000 DD 000000000r			; 0
CONST	ENDS
_DATA	SEGMENT
$SG143313 DB	'c:\users\user\downloads\xash_build4529_src\engine\client'
	DB	'\gl_image.c', 00H
$SG143314 DB	'assert failed at %s:%i', 0aH, 00H
$SG143322 DB	'1D', 00H
	ORG $+1
$SG143324 DB	'2D', 00H
	ORG $+1
$SG143326 DB	'3D', 00H
	ORG $+1
$SG143328 DB	'Cube', 00H
	ORG $+3
$SG143330 DB	'Array', 00H
	ORG $+2
$SG143332 DB	'Rect', 00H
	ORG $+3
$SG143333 DB	'??', 00H
	ORG $+1
$SG143344 DB	'^1Error:^7 GL_Bind: invalid texturenum %d', 0aH, 00H
	ORG $+1
$SG143358 DB	'c:\users\user\downloads\xash_build4529_src\engine\client'
	DB	'\gl_image.c', 00H
$SG143359 DB	'tex != NULL', 00H
$SG143406 DB	'c:\users\user\downloads\xash_build4529_src\engine\client'
	DB	'\gl_image.c', 00H
$SG143407 DB	'tex != NULL', 00H
$SG143427 DB	'gl_anisotropy', 00H
	ORG $+2
$SG143429 DB	'gl_anisotropy', 00H
	ORG $+2
$SG143433 DB	'gl_texture_lodbias', 00H
	ORG $+1
$SG143435 DB	'gl_texture_lodbias', 00H
	ORG $+1
$SG143496 DB	'GL_CalcTextureSize: bad texture internal format (%u)', 0aH
	DB	00H
	ORG $+2
$SG143511 DB	'c:\users\user\downloads\xash_build4529_src\engine\client'
	DB	'\gl_image.c', 00H
$SG143512 DB	'tex != NULL', 00H
$SG143549 DB	'c:\users\user\downloads\xash_build4529_src\engine\client'
	DB	'\gl_image.c', 00H
$SG143550 DB	'tex != NULL', 00H
$SG143580 DB	'c:\users\user\downloads\xash_build4529_src\engine\client'
	DB	'\gl_image.c', 00H
$SG143581 DB	'pic != NULL', 00H
$SG143582 DB	'c:\users\user\downloads\xash_build4529_src\engine\client'
	DB	'\gl_image.c', 00H
$SG143583 DB	'tex != NULL', 00H
$SG143621 DB	'c:\users\user\downloads\xash_build4529_src\engine\client'
	DB	'\gl_image.c', 00H
$SG143622 DB	'tex != NULL', 00H
$SG143751 DB	'c:\users\user\downloads\xash_build4529_src\engine\client'
	DB	'\gl_image.c', 00H
$SG143888 DB	'tex != NULL', 00H
$SG143887 DB	'c:\users\user\downloads\xash_build4529_src\engine\client'
	DB	'\gl_image.c', 00H
$SG143931 DB	'tex != NULL', 00H
$SG143930 DB	'c:\users\user\downloads\xash_build4529_src\engine\client'
	DB	'\gl_image.c', 00H
$SG143955 DB	'tex != NULL', 00H
$SG143954 DB	'c:\users\user\downloads\xash_build4529_src\engine\client'
	DB	'\gl_image.c', 00H
$SG143957 DB	'^3OpenGL Error:^7 %s while uploading %s [%s]', 0aH, 00H
	ORG $+2
$SG143998 DB	'pic != NULL', 00H
$SG143997 DB	'c:\users\user\downloads\xash_build4529_src\engine\client'
	DB	'\gl_image.c', 00H
$SG144000 DB	'tex != NULL', 00H
$SG143999 DB	'c:\users\user\downloads\xash_build4529_src\engine\client'
	DB	'\gl_image.c', 00H
$SG144004 DB	'GL_UploadTexture: %s s&3 [%d x %d]', 0aH, 00H
$SG144002 DB	'^1Error:^7 GL_UploadTexture: %s is not supported by your'
	DB	' hardware', 0aH, 00H
	ORG $+1
$SG144006 DB	'GL_UploadTexture: %s image buffer overflow', 0aH, 00H
$SG144050 DB	'^1Error:^7 LoadTexture: too long name %s (%d)', 0aH, 00H
	ORG $+1
$SG144077 DB	'GL_AllocTexture: MAX_TEXTURES limit exceeds', 0aH, 00H
	ORG $+3
$SG144090 DB	'c:\users\user\downloads\xash_build4529_src\engine\client'
	DB	'\gl_image.c', 00H
$SG144091 DB	'assert failed at %s:%i', 0aH, 00H
$SG144180 DB	'%s', 00H
	ORG $+1
$SG144094 DB	'^1Error:^7 GL_DeleteTexture: trying to free unnamed text'
	DB	'ure with texnum %i', 0aH, 00H
$SG144182 DB	'|', 00H
	ORG $+2
$SG144183 DB	'[%i]', 00H
	ORG $+3
$SG144190 DB	'^1Error:^7 GL_LoadTextureArray: mismatch image format fo'
	DB	'r %s and %s', 0aH, 00H
	ORG $+3
$SG144192 DB	'^1Error:^7 GL_LoadTextureArray: mismatch mip count for %'
	DB	's and %s', 0aH, 00H
	ORG $+2
$SG144226 DB	'GL_LoadTextureFromBuffer: couldn''t find texture %s for '
	DB	'update', 0aH, 00H
	ORG $+1
$SG144304 DB	'^1Error:^7 GL_ProcessTexture: bad operation for %s', 0aH
	DB	00H
$SG144194 DB	'^1Error:^7 GL_LoadTextureArray: mismatch custom encoding'
	DB	' for %s and %s', 0aH, 00H
$SG144200 DB	'^1Error:^7 GL_LoadTextureArray: mismatch image size for '
	DB	'%s and %s', 0aH, 00H
	ORG $+1
$SG144306 DB	'^1Error:^7 GL_ProcessTexture: no input data for %s', 0aH
	DB	00H
$SG144201 DB	'c:\users\user\downloads\xash_build4529_src\engine\client'
	DB	'\gl_image.c', 00H
$SG144376 DB	'*default', 00H
	ORG $+3
$SG144202 DB	'c:\users\user\downloads\xash_build4529_src\engine\client'
	DB	'\gl_image.c', 00H
$SG144377 DB	'*particle', 00H
	ORG $+2
$SG144205 DB	'^1Error:^7 GL_LoadTextureArray: not all layers were load'
	DB	'ed. Texture array is not created', 0aH, 00H
	ORG $+2
$SG144338 DB	'*dlight', 00H
$SG144381 DB	'*cintexture', 00H
$SG144309 DB	'^1Error:^7 GL_ProcessTexture: can''t process compressed '
	DB	'texture %s', 0aH, 00H
	ORG $+1
$SG144378 DB	'*white', 00H
	ORG $+1
$SG144379 DB	'*gray', 00H
	ORG $+2
$SG144380 DB	'*black', 00H
	ORG $+1
$SG144397 DB	0aH, 00H
	ORG $+2
$SG144398 DB	' -id-   -w-  -h-     -size- -fmt- -type- -data-  -encode'
	DB	'- -wrap- -depth- -name--------', 0aH, 00H
$SG144400 DB	'%4i: ', 00H
	ORG $+2
$SG144401 DB	'%4i %4i ', 00H
	ORG $+3
$SG144402 DB	'%12s ', 00H
	ORG $+2
$SG144404 DB	'CRGBA ', 00H
	ORG $+1
$SG144406 DB	'CRGB  ', 00H
	ORG $+1
$SG144408 DB	'CLA   ', 00H
	ORG $+1
$SG144410 DB	'CL    ', 00H
	ORG $+1
$SG144412 DB	'CA    ', 00H
	ORG $+1
$SG144414 DB	'CI    ', 00H
	ORG $+1
$SG144416 DB	'DXT1c ', 00H
	ORG $+1
$SG144418 DB	'DXT1a ', 00H
	ORG $+1
$SG144420 DB	'DXT3  ', 00H
	ORG $+1
$SG144422 DB	'DXT5  ', 00H
	ORG $+1
$SG144424 DB	'ATI2  ', 00H
	ORG $+1
$SG144426 DB	'RGBA  ', 00H
	ORG $+1
$SG144428 DB	'RGBA8 ', 00H
	ORG $+1
$SG144430 DB	'RGBA4 ', 00H
	ORG $+1
$SG144432 DB	'RGB   ', 00H
	ORG $+1
$SG144434 DB	'RGB8  ', 00H
	ORG $+1
$SG144436 DB	'RGB5  ', 00H
	ORG $+1
$SG144438 DB	'L4A4  ', 00H
	ORG $+1
$SG144440 DB	'L8A8  ', 00H
	ORG $+1
$SG144442 DB	'L4    ', 00H
	ORG $+1
$SG144444 DB	'L8    ', 00H
	ORG $+1
$SG144446 DB	'A8    ', 00H
	ORG $+1
$SG144448 DB	'I8    ', 00H
	ORG $+1
$SG144450 DB	'DPTH24', 00H
	ORG $+1
$SG144452 DB	'DPTH32', 00H
	ORG $+1
$SG144454 DB	'L16F  ', 00H
	ORG $+1
$SG144456 DB	'L32F  ', 00H
	ORG $+1
$SG144458 DB	'LA16F ', 00H
	ORG $+1
$SG144460 DB	'LA32F ', 00H
	ORG $+1
$SG144462 DB	'RG16F ', 00H
	ORG $+1
$SG144464 DB	'RG32F ', 00H
	ORG $+1
$SG144466 DB	'RGB16F', 00H
	ORG $+1
$SG144468 DB	'RGB32F', 00H
	ORG $+1
$SG144470 DB	'RGBA16F', 00H
$SG144472 DB	'RGBA32F', 00H
$SG144474 DB	' ^1ERROR^7 ', 00H
$SG144476 DB	' 1D   ', 00H
	ORG $+1
$SG144478 DB	' 2D   ', 00H
	ORG $+1
$SG144480 DB	' 3D   ', 00H
	ORG $+1
$SG144482 DB	'CUBE  ', 00H
	ORG $+1
$SG144484 DB	'RECT  ', 00H
	ORG $+1
$SG144486 DB	'ARRAY ', 00H
	ORG $+1
$SG144488 DB	'????  ', 00H
	ORG $+1
$SG144491 DB	'normal  ', 00H
	ORG $+3
$SG144492 DB	'diffuse ', 00H
	ORG $+3
$SG144494 DB	'YCoCg     ', 00H
	ORG $+1
$SG144496 DB	'ortho     ', 00H
	ORG $+1
$SG144498 DB	'stereo    ', 00H
	ORG $+1
$SG144500 DB	'parabolic ', 00H
	ORG $+1
$SG144502 DB	'quartic   ', 00H
	ORG $+1
$SG144504 DB	'azimuthal ', 00H
	ORG $+1
$SG144506 DB	'default   ', 00H
	ORG $+1
$SG144509 DB	'clamp  ', 00H
$SG144512 DB	'border ', 00H
$SG144513 DB	'repeat ', 00H
$SG144514 DB	'   %d  ', 00H
$SG144515 DB	'  %s', 0aH, 00H
	ORG $+2
$SG144516 DB	'--------------------------------------------------------'
	DB	'-', 0aH, 00H
	ORG $+1
$SG144517 DB	'%i total textures', 0aH, 00H
	ORG $+1
$SG144518 DB	'%s total memory used', 0aH, 00H
	ORG $+2
$SG144519 DB	0aH, 00H
	ORG $+2
$SG144522 DB	'*unused*', 00H
	ORG $+3
$SG144523 DB	'display loaded textures list', 00H
	ORG $+3
$SG144524 DB	'texturelist', 00H
$SG144532 DB	'texturelist', 00H
_DATA	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xash_build4529_src\engine\client\gl_image.c
_TEXT	SEGMENT
tv245 = -48						; size = 8
tv156 = -40						; size = 4
tv155 = -36						; size = 4
_dy$ = -32						; size = 4
tv75 = -28						; size = 4
tv76 = -24						; size = 4
_d$ = -20						; size = 4
_dx2$ = -16						; size = 4
_y$ = -12						; size = 4
_pic$ = -8						; size = 4
_x$ = -4						; size = 4
_GL_CreateInternalTextures PROC

; 1955 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 48					; 00000030H

; 1956 : 	int	dx2, dy, d;
; 1957 : 	int	x, y;
; 1958 : 	rgbdata_t	*pic;
; 1959 : 
; 1960 : 	// emo-texture from quake1
; 1961 : 	pic = GL_FakeImage( 16, 16, 1, IMAGE_HAS_COLOR );

	push	4
	push	1
	push	16					; 00000010H
	push	16					; 00000010H
	call	_GL_FakeImage
	add	esp, 16					; 00000010H
	mov	DWORD PTR _pic$[ebp], eax

; 1962 : 
; 1963 : 	for( y = 0; y < 16; y++ )

	mov	DWORD PTR _y$[ebp], 0
	jmp	SHORT $LN4@GL_CreateI
$LN2@GL_CreateI:
	mov	eax, DWORD PTR _y$[ebp]
	add	eax, 1
	mov	DWORD PTR _y$[ebp], eax
$LN4@GL_CreateI:
	cmp	DWORD PTR _y$[ebp], 16			; 00000010H
	jge	$LN3@GL_CreateI

; 1964 : 	{
; 1965 : 		for( x = 0; x < 16; x++ )

	mov	DWORD PTR _x$[ebp], 0
	jmp	SHORT $LN7@GL_CreateI
$LN5@GL_CreateI:
	mov	ecx, DWORD PTR _x$[ebp]
	add	ecx, 1
	mov	DWORD PTR _x$[ebp], ecx
$LN7@GL_CreateI:
	cmp	DWORD PTR _x$[ebp], 16			; 00000010H
	jge	SHORT $LN6@GL_CreateI

; 1966 : 		{
; 1967 : 			if(( y < 8 ) ^ ( x < 8 ))

	cmp	DWORD PTR _y$[ebp], 8
	jge	SHORT $LN28@GL_CreateI
	mov	DWORD PTR tv76[ebp], 1
	jmp	SHORT $LN29@GL_CreateI
$LN28@GL_CreateI:
	mov	DWORD PTR tv76[ebp], 0
$LN29@GL_CreateI:
	cmp	DWORD PTR _x$[ebp], 8
	jge	SHORT $LN26@GL_CreateI
	mov	DWORD PTR tv75[ebp], 1
	jmp	SHORT $LN27@GL_CreateI
$LN26@GL_CreateI:
	mov	DWORD PTR tv75[ebp], 0
$LN27@GL_CreateI:
	mov	edx, DWORD PTR tv76[ebp]
	xor	edx, DWORD PTR tv75[ebp]
	je	SHORT $LN23@GL_CreateI

; 1968 : 				((uint *)pic->buffer)[y*16+x] = 0xFFFF00FF;

	mov	eax, DWORD PTR _y$[ebp]
	shl	eax, 4
	add	eax, DWORD PTR _x$[ebp]
	mov	ecx, DWORD PTR _pic$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	mov	DWORD PTR [edx+eax*4], -65281		; ffff00ffH
	jmp	SHORT $LN24@GL_CreateI
$LN23@GL_CreateI:

; 1969 : 			else ((uint *)pic->buffer)[y*16+x] = 0xFF000000;

	mov	eax, DWORD PTR _y$[ebp]
	shl	eax, 4
	add	eax, DWORD PTR _x$[ebp]
	mov	ecx, DWORD PTR _pic$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	mov	DWORD PTR [edx+eax*4], -16777216	; ff000000H
$LN24@GL_CreateI:

; 1970 : 		}

	jmp	SHORT $LN5@GL_CreateI
$LN6@GL_CreateI:

; 1971 : 	}

	jmp	$LN2@GL_CreateI
$LN3@GL_CreateI:

; 1972 : 
; 1973 : 	tr.defaultTexture = GL_LoadTextureInternal( "*default", pic, TF_COLORMAP );

	push	0
	push	0
	mov	eax, DWORD PTR _pic$[ebp]
	push	eax
	push	OFFSET $SG144376
	call	_GL_LoadTextureFromBuffer
	add	esp, 16					; 00000010H
	mov	DWORD PTR _tr, eax

; 1974 : 
; 1975 : 	// particle texture from quake1
; 1976 : 	pic = GL_FakeImage( 16, 16, 1, IMAGE_HAS_COLOR|IMAGE_HAS_ALPHA );

	push	6
	push	1
	push	16					; 00000010H
	push	16					; 00000010H
	call	_GL_FakeImage
	add	esp, 16					; 00000010H
	mov	DWORD PTR _pic$[ebp], eax

; 1977 : 
; 1978 : 	for( x = 0; x < 16; x++ )

	mov	DWORD PTR _x$[ebp], 0
	jmp	SHORT $LN10@GL_CreateI
$LN8@GL_CreateI:
	mov	ecx, DWORD PTR _x$[ebp]
	add	ecx, 1
	mov	DWORD PTR _x$[ebp], ecx
$LN10@GL_CreateI:
	cmp	DWORD PTR _x$[ebp], 16			; 00000010H
	jge	$LN9@GL_CreateI

; 1979 : 	{
; 1980 : 		dx2 = x - 8;

	mov	edx, DWORD PTR _x$[ebp]
	sub	edx, 8
	mov	DWORD PTR _dx2$[ebp], edx

; 1981 : 		dx2 = dx2 * dx2;

	mov	eax, DWORD PTR _dx2$[ebp]
	imul	eax, DWORD PTR _dx2$[ebp]
	mov	DWORD PTR _dx2$[ebp], eax

; 1982 : 
; 1983 : 		for( y = 0; y < 16; y++ )

	mov	DWORD PTR _y$[ebp], 0
	jmp	SHORT $LN13@GL_CreateI
$LN11@GL_CreateI:
	mov	ecx, DWORD PTR _y$[ebp]
	add	ecx, 1
	mov	DWORD PTR _y$[ebp], ecx
$LN13@GL_CreateI:
	cmp	DWORD PTR _y$[ebp], 16			; 00000010H
	jge	$LN12@GL_CreateI

; 1984 : 		{
; 1985 : 			dy = y - 8;

	mov	edx, DWORD PTR _y$[ebp]
	sub	edx, 8
	mov	DWORD PTR _dy$[ebp], edx

; 1986 : 			d = 255 - 35 * sqrt( dx2 + dy * dy );

	mov	eax, DWORD PTR _dy$[ebp]
	imul	eax, DWORD PTR _dy$[ebp]
	add	eax, DWORD PTR _dx2$[ebp]
	cvtsi2sd xmm0, eax
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	call	_sqrt
	add	esp, 8
	fstp	QWORD PTR tv245[ebp]
	movsd	xmm0, QWORD PTR tv245[ebp]
	mulsd	xmm0, QWORD PTR __real@4041800000000000
	movsd	xmm1, QWORD PTR __real@406fe00000000000
	subsd	xmm1, xmm0
	cvttsd2si ecx, xmm1
	mov	DWORD PTR _d$[ebp], ecx

; 1987 : 			pic->buffer[( y * 16 + x ) * 4 + 3] = bound( 0, d, 255 );

	cmp	DWORD PTR _d$[ebp], 0
	jl	SHORT $LN32@GL_CreateI
	cmp	DWORD PTR _d$[ebp], 255			; 000000ffH
	jge	SHORT $LN30@GL_CreateI
	mov	edx, DWORD PTR _d$[ebp]
	mov	DWORD PTR tv155[ebp], edx
	jmp	SHORT $LN31@GL_CreateI
$LN30@GL_CreateI:
	mov	DWORD PTR tv155[ebp], 255		; 000000ffH
$LN31@GL_CreateI:
	mov	eax, DWORD PTR tv155[ebp]
	mov	DWORD PTR tv156[ebp], eax
	jmp	SHORT $LN33@GL_CreateI
$LN32@GL_CreateI:
	mov	DWORD PTR tv156[ebp], 0
$LN33@GL_CreateI:
	mov	ecx, DWORD PTR _y$[ebp]
	shl	ecx, 4
	add	ecx, DWORD PTR _x$[ebp]
	mov	edx, DWORD PTR _pic$[ebp]
	mov	eax, DWORD PTR [edx+24]
	mov	dl, BYTE PTR tv156[ebp]
	mov	BYTE PTR [eax+ecx*4+3], dl

; 1988 : 		}

	jmp	$LN11@GL_CreateI
$LN12@GL_CreateI:

; 1989 : 	}

	jmp	$LN8@GL_CreateI
$LN9@GL_CreateI:

; 1990 : 
; 1991 : 	tr.particleTexture = GL_LoadTextureInternal( "*particle", pic, TF_CLAMP );

	push	0
	push	2048					; 00000800H
	mov	eax, DWORD PTR _pic$[ebp]
	push	eax
	push	OFFSET $SG144377
	call	_GL_LoadTextureFromBuffer
	add	esp, 16					; 00000010H
	mov	DWORD PTR _tr+4, eax

; 1992 : 
; 1993 : 	// white texture
; 1994 : 	pic = GL_FakeImage( 4, 4, 1, IMAGE_HAS_COLOR );

	push	4
	push	1
	push	4
	push	4
	call	_GL_FakeImage
	add	esp, 16					; 00000010H
	mov	DWORD PTR _pic$[ebp], eax

; 1995 : 	for( x = 0; x < 16; x++ )

	mov	DWORD PTR _x$[ebp], 0
	jmp	SHORT $LN16@GL_CreateI
$LN14@GL_CreateI:
	mov	ecx, DWORD PTR _x$[ebp]
	add	ecx, 1
	mov	DWORD PTR _x$[ebp], ecx
$LN16@GL_CreateI:
	cmp	DWORD PTR _x$[ebp], 16			; 00000010H
	jge	SHORT $LN15@GL_CreateI

; 1996 : 		((uint *)pic->buffer)[x] = 0xFFFFFFFF;

	mov	edx, DWORD PTR _pic$[ebp]
	mov	eax, DWORD PTR [edx+24]
	mov	ecx, DWORD PTR _x$[ebp]
	mov	DWORD PTR [eax+ecx*4], -1
	jmp	SHORT $LN14@GL_CreateI
$LN15@GL_CreateI:

; 1997 : 	tr.whiteTexture = GL_LoadTextureInternal( "*white", pic, TF_COLORMAP );

	push	0
	push	0
	mov	edx, DWORD PTR _pic$[ebp]
	push	edx
	push	OFFSET $SG144378
	call	_GL_LoadTextureFromBuffer
	add	esp, 16					; 00000010H
	mov	DWORD PTR _tr+8, eax

; 1998 : 
; 1999 : 	// gray texture
; 2000 : 	pic = GL_FakeImage( 4, 4, 1, IMAGE_HAS_COLOR );

	push	4
	push	1
	push	4
	push	4
	call	_GL_FakeImage
	add	esp, 16					; 00000010H
	mov	DWORD PTR _pic$[ebp], eax

; 2001 : 	for( x = 0; x < 16; x++ )

	mov	DWORD PTR _x$[ebp], 0
	jmp	SHORT $LN19@GL_CreateI
$LN17@GL_CreateI:
	mov	eax, DWORD PTR _x$[ebp]
	add	eax, 1
	mov	DWORD PTR _x$[ebp], eax
$LN19@GL_CreateI:
	cmp	DWORD PTR _x$[ebp], 16			; 00000010H
	jge	SHORT $LN18@GL_CreateI

; 2002 : 		((uint *)pic->buffer)[x] = 0xFF7F7F7F;

	mov	ecx, DWORD PTR _pic$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	mov	eax, DWORD PTR _x$[ebp]
	mov	DWORD PTR [edx+eax*4], -8421505		; ff7f7f7fH
	jmp	SHORT $LN17@GL_CreateI
$LN18@GL_CreateI:

; 2003 : 	tr.grayTexture = GL_LoadTextureInternal( "*gray", pic, TF_COLORMAP );

	push	0
	push	0
	mov	ecx, DWORD PTR _pic$[ebp]
	push	ecx
	push	OFFSET $SG144379
	call	_GL_LoadTextureFromBuffer
	add	esp, 16					; 00000010H
	mov	DWORD PTR _tr+12, eax

; 2004 : 
; 2005 : 	// black texture
; 2006 : 	pic = GL_FakeImage( 4, 4, 1, IMAGE_HAS_COLOR );

	push	4
	push	1
	push	4
	push	4
	call	_GL_FakeImage
	add	esp, 16					; 00000010H
	mov	DWORD PTR _pic$[ebp], eax

; 2007 : 	for( x = 0; x < 16; x++ )

	mov	DWORD PTR _x$[ebp], 0
	jmp	SHORT $LN22@GL_CreateI
$LN20@GL_CreateI:
	mov	edx, DWORD PTR _x$[ebp]
	add	edx, 1
	mov	DWORD PTR _x$[ebp], edx
$LN22@GL_CreateI:
	cmp	DWORD PTR _x$[ebp], 16			; 00000010H
	jge	SHORT $LN21@GL_CreateI

; 2008 : 		((uint *)pic->buffer)[x] = 0xFF000000;

	mov	eax, DWORD PTR _pic$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	edx, DWORD PTR _x$[ebp]
	mov	DWORD PTR [ecx+edx*4], -16777216	; ff000000H
	jmp	SHORT $LN20@GL_CreateI
$LN21@GL_CreateI:

; 2009 : 	tr.blackTexture = GL_LoadTextureInternal( "*black", pic, TF_COLORMAP );

	push	0
	push	0
	mov	eax, DWORD PTR _pic$[ebp]
	push	eax
	push	OFFSET $SG144380
	call	_GL_LoadTextureFromBuffer
	add	esp, 16					; 00000010H
	mov	DWORD PTR _tr+16, eax

; 2010 : 
; 2011 : 	// cinematic dummy
; 2012 : 	pic = GL_FakeImage( 640, 100, 1, IMAGE_HAS_COLOR );

	push	4
	push	1
	push	100					; 00000064H
	push	640					; 00000280H
	call	_GL_FakeImage
	add	esp, 16					; 00000010H
	mov	DWORD PTR _pic$[ebp], eax

; 2013 : 	tr.cinTexture = GL_LoadTextureInternal( "*cintexture", pic, TF_NOMIPMAP|TF_CLAMP );

	push	0
	push	6144					; 00001800H
	mov	ecx, DWORD PTR _pic$[ebp]
	push	ecx
	push	OFFSET $SG144381
	call	_GL_LoadTextureFromBuffer
	add	esp, 16					; 00000010H
	mov	DWORD PTR _tr+1080, eax

; 2014 : }

	mov	esp, ebp
	pop	ebp
	ret	0
_GL_CreateInternalTextures ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xash_build4529_src\engine\client\gl_image.c
_TEXT	SEGMENT
tv80 = -16						; size = 4
tv71 = -12						; size = 4
tv68 = -8						; size = 4
tv65 = -4						; size = 4
_width$ = 8						; size = 4
_height$ = 12						; size = 4
_depth$ = 16						; size = 4
_flags$ = 20						; size = 4
_GL_FakeImage PROC

; 1904 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H

; 1905 : 	static byte	data2D[1024]; // 16x16x4
; 1906 : 	static rgbdata_t	r_image;
; 1907 : 
; 1908 : 	// also use this for bad textures, but without alpha
; 1909 : 	r_image.width = Q_max( 1, width );

	cmp	DWORD PTR _width$[ebp], 1
	jge	SHORT $LN4@GL_FakeIma
	mov	DWORD PTR tv65[ebp], 1
	jmp	SHORT $LN5@GL_FakeIma
$LN4@GL_FakeIma:
	mov	eax, DWORD PTR _width$[ebp]
	mov	DWORD PTR tv65[ebp], eax
$LN5@GL_FakeIma:
	mov	cx, WORD PTR tv65[ebp]
	mov	WORD PTR ?r_image@?1??GL_FakeImage@@9@9, cx

; 1910 : 	r_image.height = Q_max( 1, height );

	cmp	DWORD PTR _height$[ebp], 1
	jge	SHORT $LN6@GL_FakeIma
	mov	DWORD PTR tv68[ebp], 1
	jmp	SHORT $LN7@GL_FakeIma
$LN6@GL_FakeIma:
	mov	edx, DWORD PTR _height$[ebp]
	mov	DWORD PTR tv68[ebp], edx
$LN7@GL_FakeIma:
	mov	ax, WORD PTR tv68[ebp]
	mov	WORD PTR ?r_image@?1??GL_FakeImage@@9@9+2, ax

; 1911 : 	r_image.depth = Q_max( 1, depth );

	cmp	DWORD PTR _depth$[ebp], 1
	jge	SHORT $LN8@GL_FakeIma
	mov	DWORD PTR tv71[ebp], 1
	jmp	SHORT $LN9@GL_FakeIma
$LN8@GL_FakeIma:
	mov	ecx, DWORD PTR _depth$[ebp]
	mov	DWORD PTR tv71[ebp], ecx
$LN9@GL_FakeIma:
	mov	dx, WORD PTR tv71[ebp]
	mov	WORD PTR ?r_image@?1??GL_FakeImage@@9@9+4, dx

; 1912 : 	r_image.flags = flags;

	mov	eax, DWORD PTR _flags$[ebp]
	mov	DWORD PTR ?r_image@?1??GL_FakeImage@@9@9+12, eax

; 1913 : 	r_image.type = PF_RGBA_32;

	mov	DWORD PTR ?r_image@?1??GL_FakeImage@@9@9+8, 3

; 1914 : 	r_image.size = r_image.width * r_image.height * r_image.depth * 4;

	movzx	ecx, WORD PTR ?r_image@?1??GL_FakeImage@@9@9
	movzx	edx, WORD PTR ?r_image@?1??GL_FakeImage@@9@9+2
	imul	ecx, edx
	movzx	eax, WORD PTR ?r_image@?1??GL_FakeImage@@9@9+4
	imul	ecx, eax
	shl	ecx, 2
	mov	DWORD PTR ?r_image@?1??GL_FakeImage@@9@9+32, ecx

; 1915 : 	r_image.buffer = (r_image.size > sizeof( data2D )) ? NULL : data2D;

	cmp	DWORD PTR ?r_image@?1??GL_FakeImage@@9@9+32, 1024 ; 00000400H
	jbe	SHORT $LN10@GL_FakeIma
	mov	DWORD PTR tv80[ebp], 0
	jmp	SHORT $LN11@GL_FakeIma
$LN10@GL_FakeIma:
	mov	DWORD PTR tv80[ebp], OFFSET ?data2D@?1??GL_FakeImage@@9@9
$LN11@GL_FakeIma:
	mov	ecx, DWORD PTR tv80[ebp]
	mov	DWORD PTR ?r_image@?1??GL_FakeImage@@9@9+24, ecx

; 1916 : 	r_image.palette = NULL;

	mov	DWORD PTR ?r_image@?1??GL_FakeImage@@9@9+20, 0

; 1917 : 	r_image.numMips = 1;

	mov	BYTE PTR ?r_image@?1??GL_FakeImage@@9@9+18, 1

; 1918 : 	r_image.encode = 0;

	xor	edx, edx
	mov	WORD PTR ?r_image@?1??GL_FakeImage@@9@9+16, dx

; 1919 : 
; 1920 : 	if( FBitSet( r_image.flags, IMAGE_CUBEMAP ))

	mov	eax, DWORD PTR ?r_image@?1??GL_FakeImage@@9@9+12
	and	eax, 1
	je	SHORT $LN2@GL_FakeIma

; 1921 : 		r_image.size *= 6;

	imul	ecx, DWORD PTR ?r_image@?1??GL_FakeImage@@9@9+32, 6
	mov	DWORD PTR ?r_image@?1??GL_FakeImage@@9@9+32, ecx
$LN2@GL_FakeIma:

; 1922 : 	memset( data2D, 0xFF, sizeof( data2D ));

	push	1024					; 00000400H
	push	255					; 000000ffH
	push	OFFSET ?data2D@?1??GL_FakeImage@@9@9
	call	_memset
	add	esp, 12					; 0000000cH

; 1923 : 
; 1924 : 	return &r_image;

	mov	eax, OFFSET ?r_image@?1??GL_FakeImage@@9@9

; 1925 : }

	mov	esp, ebp
	pop	ebp
	ret	0
_GL_FakeImage ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xash_build4529_src\engine\client\gl_image.c
_TEXT	SEGMENT
_prev$ = -8						; size = 4
_cur$ = -4						; size = 4
_tex$ = 8						; size = 4
_GL_DeleteTexture PROC

; 1378 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 1379 : 	gl_texture_t	**prev;
; 1380 : 	gl_texture_t	*cur;
; 1381 : 
; 1382 : 	ASSERT( tex != NULL );

	cmp	DWORD PTR _tex$[ebp], 0
	jne	SHORT $LN4@GL_DeleteT
	push	1382					; 00000566H
	push	OFFSET $SG144090
	push	OFFSET $SG144091
	call	_Sys_Error
	add	esp, 12					; 0000000cH
$LN4@GL_DeleteT:

; 1383 : 
; 1384 : 	// already freed?
; 1385 : 	if( !tex->texnum ) return;

	mov	eax, DWORD PTR _tex$[ebp]
	cmp	DWORD PTR [eax+272], 0
	jne	SHORT $LN5@GL_DeleteT
	jmp	$LN1@GL_DeleteT
$LN5@GL_DeleteT:

; 1386 : 
; 1387 : 	// debug
; 1388 : 	if( !tex->name[0] )

	mov	ecx, 1
	imul	edx, ecx, 0
	mov	eax, DWORD PTR _tex$[ebp]
	movsx	ecx, BYTE PTR [eax+edx]
	test	ecx, ecx
	jne	SHORT $LN6@GL_DeleteT

; 1389 : 	{
; 1390 : 		Con_Printf( S_ERROR "GL_DeleteTexture: trying to free unnamed texture with texnum %i\n", tex->texnum );

	mov	edx, DWORD PTR _tex$[ebp]
	mov	eax, DWORD PTR [edx+272]
	push	eax
	push	OFFSET $SG144094
	call	_Con_Printf
	add	esp, 8

; 1391 : 		return;

	jmp	$LN1@GL_DeleteT
$LN6@GL_DeleteT:

; 1392 : 	}
; 1393 : 
; 1394 : 	// remove from hash table
; 1395 : 	prev = &gl_texturesHashTable[tex->hashValue];

	mov	ecx, DWORD PTR _tex$[ebp]
	mov	edx, DWORD PTR [ecx+312]
	lea	eax, DWORD PTR _gl_texturesHashTable[edx*4]
	mov	DWORD PTR _prev$[ebp], eax
$LN2@GL_DeleteT:

; 1396 : 
; 1397 : 	while( 1 )

	mov	ecx, 1
	test	ecx, ecx
	je	SHORT $LN3@GL_DeleteT

; 1398 : 	{
; 1399 : 		cur = *prev;

	mov	edx, DWORD PTR _prev$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR _cur$[ebp], eax

; 1400 : 		if( !cur ) break;

	cmp	DWORD PTR _cur$[ebp], 0
	jne	SHORT $LN7@GL_DeleteT
	jmp	SHORT $LN3@GL_DeleteT
$LN7@GL_DeleteT:

; 1401 : 
; 1402 : 		if( cur == tex )

	mov	ecx, DWORD PTR _cur$[ebp]
	cmp	ecx, DWORD PTR _tex$[ebp]
	jne	SHORT $LN8@GL_DeleteT

; 1403 : 		{
; 1404 : 			*prev = cur->nextHash;

	mov	edx, DWORD PTR _prev$[ebp]
	mov	eax, DWORD PTR _cur$[ebp]
	mov	ecx, DWORD PTR [eax+316]
	mov	DWORD PTR [edx], ecx

; 1405 : 			break;

	jmp	SHORT $LN3@GL_DeleteT
$LN8@GL_DeleteT:

; 1406 : 		}
; 1407 : 		prev = &cur->nextHash;

	mov	edx, DWORD PTR _cur$[ebp]
	add	edx, 316				; 0000013cH
	mov	DWORD PTR _prev$[ebp], edx

; 1408 : 	}

	jmp	SHORT $LN2@GL_DeleteT
$LN3@GL_DeleteT:

; 1409 : 
; 1410 : 	// release source
; 1411 : 	if( tex->original )

	mov	eax, DWORD PTR _tex$[ebp]
	cmp	DWORD PTR [eax+292], 0
	je	SHORT $LN9@GL_DeleteT

; 1412 : 		FS_FreeImage( tex->original );

	mov	ecx, DWORD PTR _tex$[ebp]
	mov	edx, DWORD PTR [ecx+292]
	push	edx
	call	_FS_FreeImage
	add	esp, 4
$LN9@GL_DeleteT:

; 1413 : 
; 1414 : 	if( glw_state.initialized )

	cmp	DWORD PTR _glw_state+20, 0
	je	SHORT $LN10@GL_DeleteT

; 1415 : 		pglDeleteTextures( 1, &tex->texnum );

	mov	eax, DWORD PTR _tex$[ebp]
	add	eax, 272				; 00000110H
	push	eax
	push	1
	call	DWORD PTR _pglDeleteTextures
$LN10@GL_DeleteT:

; 1416 : 	memset( tex, 0, sizeof( *tex ));

	push	320					; 00000140H
	push	0
	mov	ecx, DWORD PTR _tex$[ebp]
	push	ecx
	call	_memset
	add	esp, 12					; 0000000cH
$LN1@GL_DeleteT:

; 1417 : }

	mov	esp, ebp
	pop	ebp
	ret	0
_GL_DeleteTexture ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xash_build4529_src\engine\client\gl_image.c
_TEXT	SEGMENT
_i$ = -8						; size = 4
_tex$ = -4						; size = 4
_name$ = 8						; size = 4
_flags$ = 12						; size = 4
_GL_AllocTexture PROC

; 1340 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 1341 : 	gl_texture_t	*tex;
; 1342 : 	uint		i;
; 1343 : 
; 1344 : 	// find a free texture_t slot
; 1345 : 	for( i = 0, tex = gl_textures; i < gl_numTextures; i++, tex++ )

	mov	DWORD PTR _i$[ebp], 0
	mov	DWORD PTR _tex$[ebp], OFFSET _gl_textures
	jmp	SHORT $LN4@GL_AllocTe
$LN2@GL_AllocTe:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
	mov	ecx, DWORD PTR _tex$[ebp]
	add	ecx, 320				; 00000140H
	mov	DWORD PTR _tex$[ebp], ecx
$LN4@GL_AllocTe:
	mov	edx, DWORD PTR _i$[ebp]
	cmp	edx, DWORD PTR _gl_numTextures
	jae	SHORT $LN3@GL_AllocTe

; 1346 : 		if( !tex->name[0] ) break;

	mov	eax, 1
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _tex$[ebp]
	movsx	eax, BYTE PTR [edx+ecx]
	test	eax, eax
	jne	SHORT $LN5@GL_AllocTe
	jmp	SHORT $LN3@GL_AllocTe
$LN5@GL_AllocTe:
	jmp	SHORT $LN2@GL_AllocTe
$LN3@GL_AllocTe:

; 1347 : 
; 1348 : 	if( i == gl_numTextures )

	mov	ecx, DWORD PTR _i$[ebp]
	cmp	ecx, DWORD PTR _gl_numTextures
	jne	SHORT $LN6@GL_AllocTe

; 1349 : 	{
; 1350 : 		if( gl_numTextures == MAX_TEXTURES )

	cmp	DWORD PTR _gl_numTextures, 4096		; 00001000H
	jne	SHORT $LN7@GL_AllocTe

; 1351 : 			Host_Error( "GL_AllocTexture: MAX_TEXTURES limit exceeds\n" );

	push	OFFSET $SG144077
	call	_Host_Error
	add	esp, 4
$LN7@GL_AllocTe:

; 1352 : 		gl_numTextures++;

	mov	edx, DWORD PTR _gl_numTextures
	add	edx, 1
	mov	DWORD PTR _gl_numTextures, edx
$LN6@GL_AllocTe:

; 1353 : 	}
; 1354 : 
; 1355 : 	tex = &gl_textures[i];

	imul	eax, DWORD PTR _i$[ebp], 320
	add	eax, OFFSET _gl_textures
	mov	DWORD PTR _tex$[ebp], eax

; 1356 : 
; 1357 : 	// copy initial params
; 1358 : 	Q_strncpy( tex->name, name, sizeof( tex->name ));

	push	256					; 00000100H
	mov	ecx, DWORD PTR _name$[ebp]
	push	ecx
	mov	edx, DWORD PTR _tex$[ebp]
	push	edx
	call	_Q_strncpy
	add	esp, 12					; 0000000cH

; 1359 : 	if( FBitSet( flags, TF_SKYSIDE ))

	mov	eax, DWORD PTR _flags$[ebp]
	and	eax, 1024				; 00000400H
	je	SHORT $LN8@GL_AllocTe

; 1360 : 		tex->texnum = tr.skyboxbasenum++;

	mov	ecx, DWORD PTR _tex$[ebp]
	mov	edx, DWORD PTR _tr+1088
	mov	DWORD PTR [ecx+272], edx
	mov	eax, DWORD PTR _tr+1088
	add	eax, 1
	mov	DWORD PTR _tr+1088, eax
	jmp	SHORT $LN9@GL_AllocTe
$LN8@GL_AllocTe:

; 1361 : 	else tex->texnum = i; // texnum is used for fast acess into gl_textures array too

	mov	ecx, DWORD PTR _tex$[ebp]
	mov	edx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [ecx+272], edx
$LN9@GL_AllocTe:

; 1362 : 	tex->flags = flags;

	mov	eax, DWORD PTR _tex$[ebp]
	mov	ecx, DWORD PTR _flags$[ebp]
	mov	DWORD PTR [eax+284], ecx

; 1363 : 
; 1364 : 	// add to hash table
; 1365 : 	tex->hashValue = COM_HashKey( name, TEXTURES_HASH_SIZE );

	push	1024					; 00000400H
	mov	edx, DWORD PTR _name$[ebp]
	push	edx
	call	_COM_HashKey
	add	esp, 8
	mov	ecx, DWORD PTR _tex$[ebp]
	mov	DWORD PTR [ecx+312], eax

; 1366 : 	tex->nextHash = gl_texturesHashTable[tex->hashValue];

	mov	edx, DWORD PTR _tex$[ebp]
	mov	eax, DWORD PTR [edx+312]
	mov	ecx, DWORD PTR _tex$[ebp]
	mov	edx, DWORD PTR _gl_texturesHashTable[eax*4]
	mov	DWORD PTR [ecx+316], edx

; 1367 : 	gl_texturesHashTable[tex->hashValue] = tex;

	mov	eax, DWORD PTR _tex$[ebp]
	mov	ecx, DWORD PTR [eax+312]
	mov	edx, DWORD PTR _tex$[ebp]
	mov	DWORD PTR _gl_texturesHashTable[ecx*4], edx

; 1368 : 
; 1369 : 	return tex;

	mov	eax, DWORD PTR _tex$[ebp]

; 1370 : }

	mov	esp, ebp
	pop	ebp
	ret	0
_GL_AllocTexture ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xash_build4529_src\engine\client\gl_image.c
_TEXT	SEGMENT
_hash$ = -8						; size = 4
_tex$ = -4						; size = 4
_name$ = 8						; size = 4
_GL_TextureForName PROC

; 1318 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 1319 : 	gl_texture_t	*tex;
; 1320 : 	uint		hash;
; 1321 : 
; 1322 : 	// find the texture in array
; 1323 : 	hash = COM_HashKey( name, TEXTURES_HASH_SIZE );

	push	1024					; 00000400H
	mov	eax, DWORD PTR _name$[ebp]
	push	eax
	call	_COM_HashKey
	add	esp, 8
	mov	DWORD PTR _hash$[ebp], eax

; 1324 : 
; 1325 : 	for( tex = gl_texturesHashTable[hash]; tex != NULL; tex = tex->nextHash )

	mov	ecx, DWORD PTR _hash$[ebp]
	mov	edx, DWORD PTR _gl_texturesHashTable[ecx*4]
	mov	DWORD PTR _tex$[ebp], edx
	jmp	SHORT $LN4@GL_Texture
$LN2@GL_Texture:
	mov	eax, DWORD PTR _tex$[ebp]
	mov	ecx, DWORD PTR [eax+316]
	mov	DWORD PTR _tex$[ebp], ecx
$LN4@GL_Texture:
	cmp	DWORD PTR _tex$[ebp], 0
	je	SHORT $LN3@GL_Texture

; 1326 : 	{
; 1327 : 		if( !Q_stricmp( tex->name, name ))

	push	99999					; 0001869fH
	mov	edx, DWORD PTR _name$[ebp]
	push	edx
	mov	eax, DWORD PTR _tex$[ebp]
	push	eax
	call	_Q_strnicmp
	add	esp, 12					; 0000000cH
	test	eax, eax
	jne	SHORT $LN5@GL_Texture

; 1328 : 			return tex;

	mov	eax, DWORD PTR _tex$[ebp]
	jmp	SHORT $LN1@GL_Texture
$LN5@GL_Texture:

; 1329 : 	}

	jmp	SHORT $LN2@GL_Texture
$LN3@GL_Texture:

; 1330 : 
; 1331 : 	return NULL;

	xor	eax, eax
$LN1@GL_Texture:

; 1332 : }

	mov	esp, ebp
	pop	ebp
	ret	0
_GL_TextureForName ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xash_build4529_src\engine\client\gl_image.c
_TEXT	SEGMENT
_name$ = 8						; size = 4
_GL_CheckTexName PROC

; 1298 : {

	push	ebp
	mov	ebp, esp

; 1299 : 	if( !COM_CheckString( name ))

	mov	eax, DWORD PTR _name$[ebp]
	push	eax
	call	_COM_CheckString
	add	esp, 4
	test	eax, eax
	jne	SHORT $LN2@GL_CheckTe

; 1300 : 		return false;

	xor	eax, eax
	jmp	SHORT $LN1@GL_CheckTe
$LN2@GL_CheckTe:

; 1301 : 
; 1302 : 	// because multi-layered textures can exceed name string
; 1303 : 	if( Q_strlen( name ) >= sizeof( gl_textures->name ))

	mov	ecx, DWORD PTR _name$[ebp]
	push	ecx
	call	_Q_strlen
	add	esp, 4
	cmp	eax, 256				; 00000100H
	jb	SHORT $LN3@GL_CheckTe

; 1304 : 	{
; 1305 : 		Con_Printf( S_ERROR "LoadTexture: too long name %s (%d)\n", name, Q_strlen( name ));

	mov	edx, DWORD PTR _name$[ebp]
	push	edx
	call	_Q_strlen
	add	esp, 4
	push	eax
	mov	eax, DWORD PTR _name$[ebp]
	push	eax
	push	OFFSET $SG144050
	call	_Con_Printf
	add	esp, 12					; 0000000cH

; 1306 : 		return false;

	xor	eax, eax
	jmp	SHORT $LN1@GL_CheckTe
$LN3@GL_CheckTe:

; 1307 : 	}
; 1308 : 
; 1309 : 	return true;

	mov	eax, 1
$LN1@GL_CheckTe:

; 1310 : }

	pop	ebp
	ret	0
_GL_CheckTexName ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xash_build4529_src\engine\client\gl_image.c
_TEXT	SEGMENT
_emboss_scale$ = -8					; size = 4
_img_flags$ = -4					; size = 4
_tex$ = 8						; size = 4
_pic$ = 12						; size = 4
_GL_ProcessImage PROC

; 1233 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 1234 : 	float	emboss_scale = 0.0f;

	xorps	xmm0, xmm0
	movss	DWORD PTR _emboss_scale$[ebp], xmm0

; 1235 : 	uint	img_flags = 0; 

	mov	DWORD PTR _img_flags$[ebp], 0

; 1236 : 
; 1237 : 	// force upload texture as RGB or RGBA (detail textures requires this)
; 1238 : 	if( tex->flags & TF_FORCE_COLOR ) pic->flags |= IMAGE_HAS_COLOR;

	mov	eax, DWORD PTR _tex$[ebp]
	mov	ecx, DWORD PTR [eax+284]
	and	ecx, 131072				; 00020000H
	je	SHORT $LN2@GL_Process
	mov	edx, DWORD PTR _pic$[ebp]
	mov	eax, DWORD PTR [edx+12]
	or	eax, 4
	mov	ecx, DWORD PTR _pic$[ebp]
	mov	DWORD PTR [ecx+12], eax
$LN2@GL_Process:

; 1239 : 	if( pic->flags & IMAGE_HAS_ALPHA ) tex->flags |= TF_HAS_ALPHA;

	mov	edx, DWORD PTR _pic$[ebp]
	mov	eax, DWORD PTR [edx+12]
	and	eax, 2
	je	SHORT $LN3@GL_Process
	mov	ecx, DWORD PTR _tex$[ebp]
	mov	edx, DWORD PTR [ecx+284]
	or	edx, 65536				; 00010000H
	mov	eax, DWORD PTR _tex$[ebp]
	mov	DWORD PTR [eax+284], edx
$LN3@GL_Process:

; 1240 : 
; 1241 : 	tex->encode = pic->encode; // share encode method

	mov	ecx, DWORD PTR _pic$[ebp]
	movzx	edx, WORD PTR [ecx+16]
	mov	eax, DWORD PTR _tex$[ebp]
	mov	DWORD PTR [eax+280], edx

; 1242 : 
; 1243 : 	if( ImageDXT( pic->type ))

	mov	ecx, DWORD PTR _pic$[ebp]
	cmp	DWORD PTR [ecx+8], 8
	je	SHORT $LN6@GL_Process
	mov	edx, DWORD PTR _pic$[ebp]
	cmp	DWORD PTR [edx+8], 9
	je	SHORT $LN6@GL_Process
	mov	eax, DWORD PTR _pic$[ebp]
	cmp	DWORD PTR [eax+8], 10			; 0000000aH
	je	SHORT $LN6@GL_Process
	mov	ecx, DWORD PTR _pic$[ebp]
	cmp	DWORD PTR [ecx+8], 11			; 0000000bH
	jne	SHORT $LN4@GL_Process
$LN6@GL_Process:

; 1244 : 	{
; 1245 : 		if( !pic->numMips )

	mov	edx, DWORD PTR _pic$[ebp]
	movzx	eax, BYTE PTR [edx+18]
	test	eax, eax
	jne	SHORT $LN7@GL_Process

; 1246 : 			tex->flags |= TF_NOMIPMAP; // disable mipmapping by user request

	mov	ecx, DWORD PTR _tex$[ebp]
	mov	edx, DWORD PTR [ecx+284]
	or	edx, 4096				; 00001000H
	mov	eax, DWORD PTR _tex$[ebp]
	mov	DWORD PTR [eax+284], edx
$LN7@GL_Process:

; 1247 : 
; 1248 : 		// clear all the unsupported flags
; 1249 : 		tex->flags &= ~TF_KEEP_SOURCE;

	mov	ecx, DWORD PTR _tex$[ebp]
	mov	edx, DWORD PTR [ecx+284]
	and	edx, -3					; fffffffdH
	mov	eax, DWORD PTR _tex$[ebp]
	mov	DWORD PTR [eax+284], edx

; 1250 : 	}

	jmp	$LN17@GL_Process
$LN4@GL_Process:

; 1251 : 	else
; 1252 : 	{
; 1253 : 		// copy flag about luma pixels
; 1254 : 		if( pic->flags & IMAGE_HAS_LUMA )

	mov	ecx, DWORD PTR _pic$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	and	edx, 16					; 00000010H
	je	SHORT $LN8@GL_Process

; 1255 : 			tex->flags |= TF_HAS_LUMA;

	mov	eax, DWORD PTR _tex$[ebp]
	mov	ecx, DWORD PTR [eax+284]
	or	ecx, 8192				; 00002000H
	mov	edx, DWORD PTR _tex$[ebp]
	mov	DWORD PTR [edx+284], ecx
$LN8@GL_Process:

; 1256 : 
; 1257 : 		if( pic->flags & IMAGE_QUAKEPAL )

	mov	eax, DWORD PTR _pic$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	and	ecx, 1024				; 00000400H
	je	SHORT $LN9@GL_Process

; 1258 : 			tex->flags |= TF_QUAKEPAL;

	mov	edx, DWORD PTR _tex$[ebp]
	mov	eax, DWORD PTR [edx+284]
	or	eax, 256				; 00000100H
	mov	ecx, DWORD PTR _tex$[ebp]
	mov	DWORD PTR [ecx+284], eax
$LN9@GL_Process:

; 1259 : 
; 1260 : 		// create luma texture from quake texture
; 1261 : 		if( tex->flags & TF_MAKELUMA )

	mov	edx, DWORD PTR _tex$[ebp]
	mov	eax, DWORD PTR [edx+284]
	and	eax, 16384				; 00004000H
	je	SHORT $LN10@GL_Process

; 1262 : 		{
; 1263 : 			img_flags |= IMAGE_MAKE_LUMA;

	mov	ecx, DWORD PTR _img_flags$[ebp]
	or	ecx, 16777216				; 01000000H
	mov	DWORD PTR _img_flags$[ebp], ecx

; 1264 : 			tex->flags &= ~TF_MAKELUMA;

	mov	edx, DWORD PTR _tex$[ebp]
	mov	eax, DWORD PTR [edx+284]
	and	eax, -16385				; ffffbfffH
	mov	ecx, DWORD PTR _tex$[ebp]
	mov	DWORD PTR [ecx+284], eax
$LN10@GL_Process:

; 1265 : 		}
; 1266 : 
; 1267 : 		if( tex->flags & TF_ALLOW_EMBOSS )

	mov	edx, DWORD PTR _tex$[ebp]
	mov	eax, DWORD PTR [edx+284]
	and	eax, 16					; 00000010H
	je	SHORT $LN11@GL_Process

; 1268 : 		{
; 1269 : 			img_flags |= IMAGE_EMBOSS;

	mov	ecx, DWORD PTR _img_flags$[ebp]
	or	ecx, 524288				; 00080000H
	mov	DWORD PTR _img_flags$[ebp], ecx

; 1270 : 			tex->flags &= ~TF_ALLOW_EMBOSS;

	mov	edx, DWORD PTR _tex$[ebp]
	mov	eax, DWORD PTR [edx+284]
	and	eax, -17				; ffffffefH
	mov	ecx, DWORD PTR _tex$[ebp]
	mov	DWORD PTR [ecx+284], eax
$LN11@GL_Process:

; 1271 : 		}
; 1272 : 
; 1273 : 		if( !FBitSet( tex->flags, TF_IMG_UPLOADED ) && FBitSet( tex->flags, TF_KEEP_SOURCE ))

	mov	edx, DWORD PTR _tex$[ebp]
	mov	eax, DWORD PTR [edx+284]
	and	eax, 33554432				; 02000000H
	jne	SHORT $LN12@GL_Process
	mov	ecx, DWORD PTR _tex$[ebp]
	mov	edx, DWORD PTR [ecx+284]
	and	edx, 2
	je	SHORT $LN12@GL_Process

; 1274 : 			tex->original = FS_CopyImage( pic ); // because current pic will be expanded to rgba

	mov	eax, DWORD PTR _pic$[ebp]
	push	eax
	call	_FS_CopyImage
	add	esp, 4
	mov	ecx, DWORD PTR _tex$[ebp]
	mov	DWORD PTR [ecx+292], eax
$LN12@GL_Process:

; 1275 : 
; 1276 : 		// we need to expand image into RGBA buffer
; 1277 : 		if( pic->type == PF_INDEXED_24 || pic->type == PF_INDEXED_32 )

	mov	edx, DWORD PTR _pic$[ebp]
	cmp	DWORD PTR [edx+8], 1
	je	SHORT $LN14@GL_Process
	mov	eax, DWORD PTR _pic$[ebp]
	cmp	DWORD PTR [eax+8], 2
	jne	SHORT $LN13@GL_Process
$LN14@GL_Process:

; 1278 : 			img_flags |= IMAGE_FORCE_RGBA;

	mov	ecx, DWORD PTR _img_flags$[ebp]
	or	ecx, 8388608				; 00800000H
	mov	DWORD PTR _img_flags$[ebp], ecx
$LN13@GL_Process:

; 1279 : 
; 1280 : 		// dedicated server doesn't register this variable
; 1281 : 		if( gl_emboss_scale != NULL )

	cmp	DWORD PTR _gl_emboss_scale, 0
	je	SHORT $LN15@GL_Process

; 1282 : 			emboss_scale = gl_emboss_scale->value;

	mov	edx, DWORD PTR _gl_emboss_scale
	movss	xmm0, DWORD PTR [edx+12]
	movss	DWORD PTR _emboss_scale$[ebp], xmm0
$LN15@GL_Process:

; 1283 : 
; 1284 : 		// processing image before uploading (force to rgba, make luma etc)
; 1285 : 		if( pic->buffer ) Image_Process( &pic, 0, 0, img_flags, emboss_scale );

	mov	eax, DWORD PTR _pic$[ebp]
	cmp	DWORD PTR [eax+24], 0
	je	SHORT $LN16@GL_Process
	push	ecx
	movss	xmm0, DWORD PTR _emboss_scale$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _img_flags$[ebp]
	push	ecx
	push	0
	push	0
	lea	edx, DWORD PTR _pic$[ebp]
	push	edx
	call	_Image_Process
	add	esp, 20					; 00000014H
$LN16@GL_Process:

; 1286 : 
; 1287 : 		if( FBitSet( tex->flags, TF_LUMINANCE ))

	mov	eax, DWORD PTR _tex$[ebp]
	mov	ecx, DWORD PTR [eax+284]
	and	ecx, 512				; 00000200H
	je	SHORT $LN17@GL_Process

; 1288 : 			ClearBits( pic->flags, IMAGE_HAS_COLOR );

	mov	edx, DWORD PTR _pic$[ebp]
	mov	eax, DWORD PTR [edx+12]
	and	eax, -5					; fffffffbH
	mov	ecx, DWORD PTR _pic$[ebp]
	mov	DWORD PTR [ecx+12], eax
$LN17@GL_Process:

; 1289 : 	}
; 1290 : }

	mov	esp, ebp
	pop	ebp
	ret	0
_GL_ProcessImage ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xash_build4529_src\engine\client\gl_image.c
_TEXT	SEGMENT
_normalMap$ = -108					; size = 4
_bufend$ = -104						; size = 4
_offset$ = -100						; size = 4
_mipCount$1 = -96					; size = 4
tv429 = -92						; size = 4
tv421 = -88						; size = 4
tv359 = -84						; size = 4
tv320 = -80						; size = 4
tv312 = -76						; size = 4
tv303 = -72						; size = 4
tv295 = -68						; size = 4
tv254 = -64						; size = 4
tv246 = -60						; size = 4
tv237 = -56						; size = 4
tv208 = -52						; size = 4
tv204 = -48						; size = 4
tv77 = -44						; size = 4
tv70 = -40						; size = 4
_numSides$ = -36					; size = 4
_data$ = -32						; size = 4
_size$ = -28						; size = 4
_texsize$ = -24						; size = 4
_i$ = -20						; size = 4
_width$ = -16						; size = 4
_height$ = -12						; size = 4
_buf$ = -8						; size = 4
_j$ = -4						; size = 4
_tex$ = 8						; size = 4
_pic$ = 12						; size = 4
_GL_UploadTexture PROC

; 1096 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 108				; 0000006cH
	push	esi

; 1097 : 	byte		*buf, *data;
; 1098 : 	size_t		texsize, size;
; 1099 : 	uint		width, height;
; 1100 : 	uint		i, j, numSides;
; 1101 : 	uint		offset = 0;

	mov	DWORD PTR _offset$[ebp], 0

; 1102 : 	qboolean		normalMap;
; 1103 : 	const byte	*bufend;
; 1104 : 
; 1105 : 	// dedicated server
; 1106 : 	if( !glw_state.initialized )

	cmp	DWORD PTR _glw_state+20, 0
	jne	SHORT $LN14@GL_UploadT

; 1107 : 		return true;

	mov	eax, 1
	jmp	$LN1@GL_UploadT
$LN14@GL_UploadT:

; 1108 : 
; 1109 : 	Assert( pic != NULL );

	cmp	DWORD PTR _pic$[ebp], 0
	je	SHORT $LN31@GL_UploadT
	mov	DWORD PTR tv70[ebp], 1
	jmp	SHORT $LN32@GL_UploadT
$LN31@GL_UploadT:
	mov	DWORD PTR tv70[ebp], 0
$LN32@GL_UploadT:
	push	0
	push	1109					; 00000455H
	push	OFFSET $SG143997
	push	OFFSET $SG143998
	mov	eax, DWORD PTR tv70[ebp]
	push	eax
	call	_DBG_AssertFunction
	add	esp, 20					; 00000014H

; 1110 : 	Assert( tex != NULL );

	cmp	DWORD PTR _tex$[ebp], 0
	je	SHORT $LN33@GL_UploadT
	mov	DWORD PTR tv77[ebp], 1
	jmp	SHORT $LN34@GL_UploadT
$LN33@GL_UploadT:
	mov	DWORD PTR tv77[ebp], 0
$LN34@GL_UploadT:
	push	0
	push	1110					; 00000456H
	push	OFFSET $SG143999
	push	OFFSET $SG144000
	mov	ecx, DWORD PTR tv77[ebp]
	push	ecx
	call	_DBG_AssertFunction
	add	esp, 20					; 00000014H

; 1111 : 
; 1112 : 	GL_SetTextureTarget( tex, pic ); // must be first

	mov	edx, DWORD PTR _pic$[ebp]
	push	edx
	mov	eax, DWORD PTR _tex$[ebp]
	push	eax
	call	_GL_SetTextureTarget
	add	esp, 8

; 1113 : 
; 1114 : 	// make sure what target is correct
; 1115 : 	if( tex->target == GL_NONE )

	mov	ecx, DWORD PTR _tex$[ebp]
	cmp	DWORD PTR [ecx+268], 0
	jne	SHORT $LN15@GL_UploadT

; 1116 : 	{
; 1117 : 		Con_DPrintf( S_ERROR "GL_UploadTexture: %s is not supported by your hardware\n", tex->name );

	mov	edx, DWORD PTR _tex$[ebp]
	push	edx
	push	OFFSET $SG144002
	call	_Con_DPrintf
	add	esp, 8

; 1118 : 		return false;

	xor	eax, eax
	jmp	$LN1@GL_UploadT
$LN15@GL_UploadT:

; 1119 : 	}
; 1120 : 
; 1121 : 	GL_SetTextureDimensions( tex, pic->width, pic->height, pic->depth );

	mov	eax, DWORD PTR _pic$[ebp]
	movzx	ecx, WORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR _pic$[ebp]
	movzx	eax, WORD PTR [edx+2]
	push	eax
	mov	ecx, DWORD PTR _pic$[ebp]
	movzx	edx, WORD PTR [ecx]
	push	edx
	mov	eax, DWORD PTR _tex$[ebp]
	push	eax
	call	_GL_SetTextureDimensions
	add	esp, 16					; 00000010H

; 1122 : 	GL_SetTextureFormat( tex, pic->type, pic->flags );

	mov	ecx, DWORD PTR _pic$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	mov	eax, DWORD PTR _pic$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	mov	edx, DWORD PTR _tex$[ebp]
	push	edx
	call	_GL_SetTextureFormat
	add	esp, 12					; 0000000cH

; 1123 : 
; 1124 : 	tex->fogParams[0] = pic->fogParams[0];

	mov	eax, 1
	imul	ecx, eax, 0
	mov	edx, 1
	imul	eax, edx, 0
	mov	edx, DWORD PTR _tex$[ebp]
	mov	esi, DWORD PTR _pic$[ebp]
	mov	cl, BYTE PTR [esi+ecx+28]
	mov	BYTE PTR [edx+eax+288], cl

; 1125 : 	tex->fogParams[1] = pic->fogParams[1];

	mov	edx, 1
	shl	edx, 0
	mov	eax, 1
	shl	eax, 0
	mov	ecx, DWORD PTR _tex$[ebp]
	mov	esi, DWORD PTR _pic$[ebp]
	mov	dl, BYTE PTR [esi+edx+28]
	mov	BYTE PTR [ecx+eax+288], dl

; 1126 : 	tex->fogParams[2] = pic->fogParams[2];

	mov	eax, 1
	shl	eax, 1
	mov	ecx, 1
	shl	ecx, 1
	mov	edx, DWORD PTR _tex$[ebp]
	mov	esi, DWORD PTR _pic$[ebp]
	mov	al, BYTE PTR [esi+eax+28]
	mov	BYTE PTR [edx+ecx+288], al

; 1127 : 	tex->fogParams[3] = pic->fogParams[3];

	mov	ecx, 1
	imul	edx, ecx, 3
	mov	eax, 1
	imul	ecx, eax, 3
	mov	eax, DWORD PTR _tex$[ebp]
	mov	esi, DWORD PTR _pic$[ebp]
	mov	dl, BYTE PTR [esi+edx+28]
	mov	BYTE PTR [eax+ecx+288], dl

; 1128 : 
; 1129 : 	if(( pic->width * pic->height ) & 3 )

	mov	eax, DWORD PTR _pic$[ebp]
	movzx	ecx, WORD PTR [eax]
	mov	edx, DWORD PTR _pic$[ebp]
	movzx	eax, WORD PTR [edx+2]
	imul	ecx, eax
	and	ecx, 3
	je	SHORT $LN16@GL_UploadT

; 1130 : 	{
; 1131 : 		// will be resampled, just tell me for debug targets
; 1132 : 		Con_Reportf( "GL_UploadTexture: %s s&3 [%d x %d]\n", tex->name, pic->width, pic->height );

	mov	ecx, DWORD PTR _pic$[ebp]
	movzx	edx, WORD PTR [ecx+2]
	push	edx
	mov	eax, DWORD PTR _pic$[ebp]
	movzx	ecx, WORD PTR [eax]
	push	ecx
	mov	edx, DWORD PTR _tex$[ebp]
	push	edx
	push	OFFSET $SG144004
	call	_Con_Reportf
	add	esp, 16					; 00000010H
$LN16@GL_UploadT:

; 1133 : 	}
; 1134 : 
; 1135 : 	buf = pic->buffer;

	mov	eax, DWORD PTR _pic$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	DWORD PTR _buf$[ebp], ecx

; 1136 : 	bufend = pic->buffer + pic->size; // total image size include all the layers, cube sides, mipmaps

	mov	edx, DWORD PTR _pic$[ebp]
	mov	eax, DWORD PTR [edx+24]
	mov	ecx, DWORD PTR _pic$[ebp]
	add	eax, DWORD PTR [ecx+32]
	mov	DWORD PTR _bufend$[ebp], eax

; 1137 : 	offset = GL_CalcImageSize( pic->type, pic->width, pic->height, pic->depth );

	mov	edx, DWORD PTR _pic$[ebp]
	movzx	eax, WORD PTR [edx+4]
	push	eax
	mov	ecx, DWORD PTR _pic$[ebp]
	movzx	edx, WORD PTR [ecx+2]
	push	edx
	mov	eax, DWORD PTR _pic$[ebp]
	movzx	ecx, WORD PTR [eax]
	push	ecx
	mov	edx, DWORD PTR _pic$[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	call	_GL_CalcImageSize
	add	esp, 16					; 00000010H
	mov	DWORD PTR _offset$[ebp], eax

; 1138 : 	texsize = GL_CalcTextureSize( tex->format, tex->width, tex->height, tex->depth );

	mov	ecx, DWORD PTR _tex$[ebp]
	movzx	edx, WORD PTR [ecx+264]
	push	edx
	mov	eax, DWORD PTR _tex$[ebp]
	movzx	ecx, WORD PTR [eax+262]
	push	ecx
	mov	edx, DWORD PTR _tex$[ebp]
	movzx	eax, WORD PTR [edx+260]
	push	eax
	mov	ecx, DWORD PTR _tex$[ebp]
	mov	edx, DWORD PTR [ecx+276]
	push	edx
	call	_GL_CalcTextureSize
	add	esp, 16					; 00000010H
	mov	DWORD PTR _texsize$[ebp], eax

; 1139 : 	normalMap = FBitSet( tex->flags, TF_NORMALMAP ) ? true : false;

	mov	eax, DWORD PTR _tex$[ebp]
	mov	ecx, DWORD PTR [eax+284]
	and	ecx, 32768				; 00008000H
	je	SHORT $LN35@GL_UploadT
	mov	DWORD PTR tv204[ebp], 1
	jmp	SHORT $LN36@GL_UploadT
$LN35@GL_UploadT:
	mov	DWORD PTR tv204[ebp], 0
$LN36@GL_UploadT:
	mov	edx, DWORD PTR tv204[ebp]
	mov	DWORD PTR _normalMap$[ebp], edx

; 1140 : 	numSides = FBitSet( pic->flags, IMAGE_CUBEMAP ) ? 6 : 1;

	mov	eax, DWORD PTR _pic$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	and	ecx, 1
	je	SHORT $LN37@GL_UploadT
	mov	DWORD PTR tv208[ebp], 6
	jmp	SHORT $LN38@GL_UploadT
$LN37@GL_UploadT:
	mov	DWORD PTR tv208[ebp], 1
$LN38@GL_UploadT:
	mov	edx, DWORD PTR tv208[ebp]
	mov	DWORD PTR _numSides$[ebp], edx

; 1141 : 
; 1142 : 	// uploading texture into video memory, change the binding
; 1143 : 	glState.currentTextures[glState.activeTMU] = tex->texnum;

	mov	eax, DWORD PTR _glState+16
	mov	ecx, DWORD PTR _tex$[ebp]
	mov	edx, DWORD PTR [ecx+272]
	mov	DWORD PTR _glState[eax*4+20], edx

; 1144 : 	pglBindTexture( tex->target, tex->texnum );

	mov	eax, DWORD PTR _tex$[ebp]
	mov	ecx, DWORD PTR [eax+272]
	push	ecx
	mov	edx, DWORD PTR _tex$[ebp]
	mov	eax, DWORD PTR [edx+268]
	push	eax
	call	DWORD PTR _pglBindTexture

; 1145 : 
; 1146 : 	for( i = 0; i < numSides; i++ )

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN4@GL_UploadT
$LN2@GL_UploadT:
	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
$LN4@GL_UploadT:
	mov	edx, DWORD PTR _i$[ebp]
	cmp	edx, DWORD PTR _numSides$[ebp]
	jae	$LN3@GL_UploadT

; 1147 : 	{
; 1148 : 		// track the buffer bounds
; 1149 : 		if( buf != NULL && buf >= bufend )

	cmp	DWORD PTR _buf$[ebp], 0
	je	SHORT $LN17@GL_UploadT
	mov	eax, DWORD PTR _buf$[ebp]
	cmp	eax, DWORD PTR _bufend$[ebp]
	jb	SHORT $LN17@GL_UploadT

; 1150 : 			Host_Error( "GL_UploadTexture: %s image buffer overflow\n", tex->name );

	mov	ecx, DWORD PTR _tex$[ebp]
	push	ecx
	push	OFFSET $SG144006
	call	_Host_Error
	add	esp, 8
$LN17@GL_UploadT:

; 1151 : 
; 1152 : 		if( ImageDXT( pic->type ))

	mov	edx, DWORD PTR _pic$[ebp]
	cmp	DWORD PTR [edx+8], 8
	je	SHORT $LN20@GL_UploadT
	mov	eax, DWORD PTR _pic$[ebp]
	cmp	DWORD PTR [eax+8], 9
	je	SHORT $LN20@GL_UploadT
	mov	ecx, DWORD PTR _pic$[ebp]
	cmp	DWORD PTR [ecx+8], 10			; 0000000aH
	je	SHORT $LN20@GL_UploadT
	mov	edx, DWORD PTR _pic$[ebp]
	cmp	DWORD PTR [edx+8], 11			; 0000000bH
	jne	$LN18@GL_UploadT
$LN20@GL_UploadT:

; 1153 : 		{
; 1154 : 			for( j = 0; j < Q_max( 1, pic->numMips ); j++ )

	mov	DWORD PTR _j$[ebp], 0
	jmp	SHORT $LN7@GL_UploadT
$LN5@GL_UploadT:
	mov	eax, DWORD PTR _j$[ebp]
	add	eax, 1
	mov	DWORD PTR _j$[ebp], eax
$LN7@GL_UploadT:
	mov	ecx, DWORD PTR _pic$[ebp]
	movzx	edx, BYTE PTR [ecx+18]
	cmp	edx, 1
	jge	SHORT $LN39@GL_UploadT
	mov	DWORD PTR tv237[ebp], 1
	jmp	SHORT $LN40@GL_UploadT
$LN39@GL_UploadT:
	mov	eax, DWORD PTR _pic$[ebp]
	movzx	ecx, BYTE PTR [eax+18]
	mov	DWORD PTR tv237[ebp], ecx
$LN40@GL_UploadT:
	mov	edx, DWORD PTR _j$[ebp]
	cmp	edx, DWORD PTR tv237[ebp]
	jae	$LN6@GL_UploadT

; 1155 : 			{
; 1156 : 				width = Q_max( 1, ( tex->width >> j ));

	mov	eax, DWORD PTR _tex$[ebp]
	movzx	edx, WORD PTR [eax+260]
	mov	ecx, DWORD PTR _j$[ebp]
	sar	edx, cl
	cmp	edx, 1
	jge	SHORT $LN41@GL_UploadT
	mov	DWORD PTR tv246[ebp], 1
	jmp	SHORT $LN42@GL_UploadT
$LN41@GL_UploadT:
	mov	eax, DWORD PTR _tex$[ebp]
	movzx	edx, WORD PTR [eax+260]
	mov	ecx, DWORD PTR _j$[ebp]
	sar	edx, cl
	mov	DWORD PTR tv246[ebp], edx
$LN42@GL_UploadT:
	mov	eax, DWORD PTR tv246[ebp]
	mov	DWORD PTR _width$[ebp], eax

; 1157 : 				height = Q_max( 1, ( tex->height >> j ));

	mov	ecx, DWORD PTR _tex$[ebp]
	movzx	edx, WORD PTR [ecx+262]
	mov	ecx, DWORD PTR _j$[ebp]
	sar	edx, cl
	cmp	edx, 1
	jge	SHORT $LN43@GL_UploadT
	mov	DWORD PTR tv254[ebp], 1
	jmp	SHORT $LN44@GL_UploadT
$LN43@GL_UploadT:
	mov	eax, DWORD PTR _tex$[ebp]
	movzx	edx, WORD PTR [eax+262]
	mov	ecx, DWORD PTR _j$[ebp]
	sar	edx, cl
	mov	DWORD PTR tv254[ebp], edx
$LN44@GL_UploadT:
	mov	eax, DWORD PTR tv254[ebp]
	mov	DWORD PTR _height$[ebp], eax

; 1158 : 				texsize = GL_CalcTextureSize( tex->format, width, height, tex->depth );

	mov	ecx, DWORD PTR _tex$[ebp]
	movzx	edx, WORD PTR [ecx+264]
	push	edx
	mov	eax, DWORD PTR _height$[ebp]
	push	eax
	mov	ecx, DWORD PTR _width$[ebp]
	push	ecx
	mov	edx, DWORD PTR _tex$[ebp]
	mov	eax, DWORD PTR [edx+276]
	push	eax
	call	_GL_CalcTextureSize
	add	esp, 16					; 00000010H
	mov	DWORD PTR _texsize$[ebp], eax

; 1159 : 				size = GL_CalcImageSize( pic->type, width, height, tex->depth );

	mov	ecx, DWORD PTR _tex$[ebp]
	movzx	edx, WORD PTR [ecx+264]
	push	edx
	mov	eax, DWORD PTR _height$[ebp]
	push	eax
	mov	ecx, DWORD PTR _width$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pic$[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	call	_GL_CalcImageSize
	add	esp, 16					; 00000010H
	mov	DWORD PTR _size$[ebp], eax

; 1160 : 				GL_TextureImageDXT( tex, i, j, width, height, tex->depth, size, buf );

	mov	ecx, DWORD PTR _buf$[ebp]
	push	ecx
	mov	edx, DWORD PTR _size$[ebp]
	push	edx
	mov	eax, DWORD PTR _tex$[ebp]
	movzx	ecx, WORD PTR [eax+264]
	push	ecx
	mov	edx, DWORD PTR _height$[ebp]
	push	edx
	mov	eax, DWORD PTR _width$[ebp]
	push	eax
	mov	ecx, DWORD PTR _j$[ebp]
	push	ecx
	mov	edx, DWORD PTR _i$[ebp]
	push	edx
	mov	eax, DWORD PTR _tex$[ebp]
	push	eax
	call	_GL_TextureImageDXT
	add	esp, 32					; 00000020H

; 1161 : 				tex->size += texsize;

	mov	ecx, DWORD PTR _tex$[ebp]
	mov	edx, DWORD PTR [ecx+296]
	add	edx, DWORD PTR _texsize$[ebp]
	mov	eax, DWORD PTR _tex$[ebp]
	mov	DWORD PTR [eax+296], edx

; 1162 : 				buf += size; // move pointer

	mov	ecx, DWORD PTR _buf$[ebp]
	add	ecx, DWORD PTR _size$[ebp]
	mov	DWORD PTR _buf$[ebp], ecx

; 1163 : 				tex->numMips++;

	mov	edx, DWORD PTR _tex$[ebp]
	mov	al, BYTE PTR [edx+266]
	add	al, 1
	mov	ecx, DWORD PTR _tex$[ebp]
	mov	BYTE PTR [ecx+266], al

; 1164 : 
; 1165 : 				GL_CheckTexImageError( tex );

	mov	edx, DWORD PTR _tex$[ebp]
	push	edx
	call	_GL_CheckTexImageError
	add	esp, 4

; 1166 : 			}

	jmp	$LN5@GL_UploadT
$LN6@GL_UploadT:

; 1167 : 		}

	jmp	$LN19@GL_UploadT
$LN18@GL_UploadT:

; 1168 : 		else if( Q_max( 1, pic->numMips ) > 1 )	// not-compressed DDS

	mov	eax, DWORD PTR _pic$[ebp]
	movzx	ecx, BYTE PTR [eax+18]
	cmp	ecx, 1
	jge	SHORT $LN45@GL_UploadT
	mov	DWORD PTR tv295[ebp], 1
	jmp	SHORT $LN46@GL_UploadT
$LN45@GL_UploadT:
	mov	edx, DWORD PTR _pic$[ebp]
	movzx	eax, BYTE PTR [edx+18]
	mov	DWORD PTR tv295[ebp], eax
$LN46@GL_UploadT:
	cmp	DWORD PTR tv295[ebp], 1
	jle	$LN21@GL_UploadT

; 1169 : 		{
; 1170 : 			for( j = 0; j < Q_max( 1, pic->numMips ); j++ )

	mov	DWORD PTR _j$[ebp], 0
	jmp	SHORT $LN10@GL_UploadT
$LN8@GL_UploadT:
	mov	ecx, DWORD PTR _j$[ebp]
	add	ecx, 1
	mov	DWORD PTR _j$[ebp], ecx
$LN10@GL_UploadT:
	mov	edx, DWORD PTR _pic$[ebp]
	movzx	eax, BYTE PTR [edx+18]
	cmp	eax, 1
	jge	SHORT $LN47@GL_UploadT
	mov	DWORD PTR tv303[ebp], 1
	jmp	SHORT $LN48@GL_UploadT
$LN47@GL_UploadT:
	mov	ecx, DWORD PTR _pic$[ebp]
	movzx	edx, BYTE PTR [ecx+18]
	mov	DWORD PTR tv303[ebp], edx
$LN48@GL_UploadT:
	mov	eax, DWORD PTR _j$[ebp]
	cmp	eax, DWORD PTR tv303[ebp]
	jae	$LN9@GL_UploadT

; 1171 : 			{
; 1172 : 				width = Q_max( 1, ( tex->width >> j ));

	mov	ecx, DWORD PTR _tex$[ebp]
	movzx	edx, WORD PTR [ecx+260]
	mov	ecx, DWORD PTR _j$[ebp]
	sar	edx, cl
	cmp	edx, 1
	jge	SHORT $LN49@GL_UploadT
	mov	DWORD PTR tv312[ebp], 1
	jmp	SHORT $LN50@GL_UploadT
$LN49@GL_UploadT:
	mov	eax, DWORD PTR _tex$[ebp]
	movzx	edx, WORD PTR [eax+260]
	mov	ecx, DWORD PTR _j$[ebp]
	sar	edx, cl
	mov	DWORD PTR tv312[ebp], edx
$LN50@GL_UploadT:
	mov	eax, DWORD PTR tv312[ebp]
	mov	DWORD PTR _width$[ebp], eax

; 1173 : 				height = Q_max( 1, ( tex->height >> j ));

	mov	ecx, DWORD PTR _tex$[ebp]
	movzx	edx, WORD PTR [ecx+262]
	mov	ecx, DWORD PTR _j$[ebp]
	sar	edx, cl
	cmp	edx, 1
	jge	SHORT $LN51@GL_UploadT
	mov	DWORD PTR tv320[ebp], 1
	jmp	SHORT $LN52@GL_UploadT
$LN51@GL_UploadT:
	mov	eax, DWORD PTR _tex$[ebp]
	movzx	edx, WORD PTR [eax+262]
	mov	ecx, DWORD PTR _j$[ebp]
	sar	edx, cl
	mov	DWORD PTR tv320[ebp], edx
$LN52@GL_UploadT:
	mov	eax, DWORD PTR tv320[ebp]
	mov	DWORD PTR _height$[ebp], eax

; 1174 : 				texsize = GL_CalcTextureSize( tex->format, width, height, tex->depth );

	mov	ecx, DWORD PTR _tex$[ebp]
	movzx	edx, WORD PTR [ecx+264]
	push	edx
	mov	eax, DWORD PTR _height$[ebp]
	push	eax
	mov	ecx, DWORD PTR _width$[ebp]
	push	ecx
	mov	edx, DWORD PTR _tex$[ebp]
	mov	eax, DWORD PTR [edx+276]
	push	eax
	call	_GL_CalcTextureSize
	add	esp, 16					; 00000010H
	mov	DWORD PTR _texsize$[ebp], eax

; 1175 : 				size = GL_CalcImageSize( pic->type, width, height, tex->depth );

	mov	ecx, DWORD PTR _tex$[ebp]
	movzx	edx, WORD PTR [ecx+264]
	push	edx
	mov	eax, DWORD PTR _height$[ebp]
	push	eax
	mov	ecx, DWORD PTR _width$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pic$[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	call	_GL_CalcImageSize
	add	esp, 16					; 00000010H
	mov	DWORD PTR _size$[ebp], eax

; 1176 : 				GL_TextureImageRAW( tex, i, j, width, height, tex->depth, pic->type, buf );

	mov	ecx, DWORD PTR _buf$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pic$[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	mov	ecx, DWORD PTR _tex$[ebp]
	movzx	edx, WORD PTR [ecx+264]
	push	edx
	mov	eax, DWORD PTR _height$[ebp]
	push	eax
	mov	ecx, DWORD PTR _width$[ebp]
	push	ecx
	mov	edx, DWORD PTR _j$[ebp]
	push	edx
	mov	eax, DWORD PTR _i$[ebp]
	push	eax
	mov	ecx, DWORD PTR _tex$[ebp]
	push	ecx
	call	_GL_TextureImageRAW
	add	esp, 32					; 00000020H

; 1177 : 				tex->size += texsize;

	mov	edx, DWORD PTR _tex$[ebp]
	mov	eax, DWORD PTR [edx+296]
	add	eax, DWORD PTR _texsize$[ebp]
	mov	ecx, DWORD PTR _tex$[ebp]
	mov	DWORD PTR [ecx+296], eax

; 1178 : 				buf += size; // move pointer

	mov	edx, DWORD PTR _buf$[ebp]
	add	edx, DWORD PTR _size$[ebp]
	mov	DWORD PTR _buf$[ebp], edx

; 1179 : 				tex->numMips++;

	mov	eax, DWORD PTR _tex$[ebp]
	mov	cl, BYTE PTR [eax+266]
	add	cl, 1
	mov	edx, DWORD PTR _tex$[ebp]
	mov	BYTE PTR [edx+266], cl

; 1180 : 
; 1181 : 				GL_CheckTexImageError( tex );

	mov	eax, DWORD PTR _tex$[ebp]
	push	eax
	call	_GL_CheckTexImageError
	add	esp, 4

; 1182 : 
; 1183 : 			}

	jmp	$LN8@GL_UploadT
$LN9@GL_UploadT:

; 1184 : 		}

	jmp	$LN19@GL_UploadT
$LN21@GL_UploadT:

; 1185 : 		else // RGBA32
; 1186 : 		{
; 1187 : 			int mipCount = GL_CalcMipmapCount( tex, ( buf != NULL ));

	cmp	DWORD PTR _buf$[ebp], 0
	je	SHORT $LN53@GL_UploadT
	mov	DWORD PTR tv359[ebp], 1
	jmp	SHORT $LN54@GL_UploadT
$LN53@GL_UploadT:
	mov	DWORD PTR tv359[ebp], 0
$LN54@GL_UploadT:
	mov	ecx, DWORD PTR tv359[ebp]
	push	ecx
	mov	edx, DWORD PTR _tex$[ebp]
	push	edx
	call	_GL_CalcMipmapCount
	add	esp, 8
	mov	DWORD PTR _mipCount$1[ebp], eax

; 1188 : 
; 1189 : 			// NOTE: only single uncompressed textures can be resamples, no mips, no layers, no sides
; 1190 : 			if(( tex->depth == 1 ) && ( pic->width != tex->width ) || ( pic->height != tex->height ))

	mov	eax, DWORD PTR _tex$[ebp]
	movzx	ecx, WORD PTR [eax+264]
	cmp	ecx, 1
	jne	SHORT $LN26@GL_UploadT
	mov	edx, DWORD PTR _pic$[ebp]
	movzx	eax, WORD PTR [edx]
	mov	ecx, DWORD PTR _tex$[ebp]
	movzx	edx, WORD PTR [ecx+260]
	cmp	eax, edx
	jne	SHORT $LN25@GL_UploadT
$LN26@GL_UploadT:
	mov	eax, DWORD PTR _pic$[ebp]
	movzx	ecx, WORD PTR [eax+2]
	mov	edx, DWORD PTR _tex$[ebp]
	movzx	eax, WORD PTR [edx+262]
	cmp	ecx, eax
	je	SHORT $LN23@GL_UploadT
$LN25@GL_UploadT:

; 1191 : 				data = GL_ResampleTexture( buf, pic->width, pic->height, tex->width, tex->height, normalMap );

	mov	ecx, DWORD PTR _normalMap$[ebp]
	push	ecx
	mov	edx, DWORD PTR _tex$[ebp]
	movzx	eax, WORD PTR [edx+262]
	push	eax
	mov	ecx, DWORD PTR _tex$[ebp]
	movzx	edx, WORD PTR [ecx+260]
	push	edx
	mov	eax, DWORD PTR _pic$[ebp]
	movzx	ecx, WORD PTR [eax+2]
	push	ecx
	mov	edx, DWORD PTR _pic$[ebp]
	movzx	eax, WORD PTR [edx]
	push	eax
	mov	ecx, DWORD PTR _buf$[ebp]
	push	ecx
	call	_GL_ResampleTexture
	add	esp, 24					; 00000018H
	mov	DWORD PTR _data$[ebp], eax
	jmp	SHORT $LN24@GL_UploadT
$LN23@GL_UploadT:

; 1192 : 			else data = buf;

	mov	edx, DWORD PTR _buf$[ebp]
	mov	DWORD PTR _data$[ebp], edx
$LN24@GL_UploadT:

; 1193 : 
; 1194 : 			if( !ImageDXT( pic->type ) && !FBitSet( tex->flags, TF_NOMIPMAP ) && FBitSet( pic->flags, IMAGE_ONEBIT_ALPHA ))

	mov	eax, DWORD PTR _pic$[ebp]
	cmp	DWORD PTR [eax+8], 8
	je	SHORT $LN27@GL_UploadT
	mov	ecx, DWORD PTR _pic$[ebp]
	cmp	DWORD PTR [ecx+8], 9
	je	SHORT $LN27@GL_UploadT
	mov	edx, DWORD PTR _pic$[ebp]
	cmp	DWORD PTR [edx+8], 10			; 0000000aH
	je	SHORT $LN27@GL_UploadT
	mov	eax, DWORD PTR _pic$[ebp]
	cmp	DWORD PTR [eax+8], 11			; 0000000bH
	je	SHORT $LN27@GL_UploadT
	mov	ecx, DWORD PTR _tex$[ebp]
	mov	edx, DWORD PTR [ecx+284]
	and	edx, 4096				; 00001000H
	jne	SHORT $LN27@GL_UploadT
	mov	eax, DWORD PTR _pic$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	and	ecx, 512				; 00000200H
	je	SHORT $LN27@GL_UploadT

; 1195 : 				data = GL_ApplyFilter( data, tex->width, tex->height );

	mov	edx, DWORD PTR _tex$[ebp]
	movzx	eax, WORD PTR [edx+262]
	push	eax
	mov	ecx, DWORD PTR _tex$[ebp]
	movzx	edx, WORD PTR [ecx+260]
	push	edx
	mov	eax, DWORD PTR _data$[ebp]
	push	eax
	call	_GL_ApplyFilter
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _data$[ebp], eax
$LN27@GL_UploadT:

; 1196 : 
; 1197 : 			// mips will be auto-generated if desired
; 1198 : 			for( j = 0; j < mipCount; j++ )

	mov	DWORD PTR _j$[ebp], 0
	jmp	SHORT $LN13@GL_UploadT
$LN11@GL_UploadT:
	mov	ecx, DWORD PTR _j$[ebp]
	add	ecx, 1
	mov	DWORD PTR _j$[ebp], ecx
$LN13@GL_UploadT:
	mov	edx, DWORD PTR _j$[ebp]
	cmp	edx, DWORD PTR _mipCount$1[ebp]
	jae	$LN12@GL_UploadT

; 1199 : 			{
; 1200 : 				width = Q_max( 1, ( tex->width >> j ));

	mov	eax, DWORD PTR _tex$[ebp]
	movzx	edx, WORD PTR [eax+260]
	mov	ecx, DWORD PTR _j$[ebp]
	sar	edx, cl
	cmp	edx, 1
	jge	SHORT $LN55@GL_UploadT
	mov	DWORD PTR tv421[ebp], 1
	jmp	SHORT $LN56@GL_UploadT
$LN55@GL_UploadT:
	mov	eax, DWORD PTR _tex$[ebp]
	movzx	edx, WORD PTR [eax+260]
	mov	ecx, DWORD PTR _j$[ebp]
	sar	edx, cl
	mov	DWORD PTR tv421[ebp], edx
$LN56@GL_UploadT:
	mov	eax, DWORD PTR tv421[ebp]
	mov	DWORD PTR _width$[ebp], eax

; 1201 : 				height = Q_max( 1, ( tex->height >> j ));

	mov	ecx, DWORD PTR _tex$[ebp]
	movzx	edx, WORD PTR [ecx+262]
	mov	ecx, DWORD PTR _j$[ebp]
	sar	edx, cl
	cmp	edx, 1
	jge	SHORT $LN57@GL_UploadT
	mov	DWORD PTR tv429[ebp], 1
	jmp	SHORT $LN58@GL_UploadT
$LN57@GL_UploadT:
	mov	eax, DWORD PTR _tex$[ebp]
	movzx	edx, WORD PTR [eax+262]
	mov	ecx, DWORD PTR _j$[ebp]
	sar	edx, cl
	mov	DWORD PTR tv429[ebp], edx
$LN58@GL_UploadT:
	mov	eax, DWORD PTR tv429[ebp]
	mov	DWORD PTR _height$[ebp], eax

; 1202 : 				texsize = GL_CalcTextureSize( tex->format, width, height, tex->depth );

	mov	ecx, DWORD PTR _tex$[ebp]
	movzx	edx, WORD PTR [ecx+264]
	push	edx
	mov	eax, DWORD PTR _height$[ebp]
	push	eax
	mov	ecx, DWORD PTR _width$[ebp]
	push	ecx
	mov	edx, DWORD PTR _tex$[ebp]
	mov	eax, DWORD PTR [edx+276]
	push	eax
	call	_GL_CalcTextureSize
	add	esp, 16					; 00000010H
	mov	DWORD PTR _texsize$[ebp], eax

; 1203 : 				size = GL_CalcImageSize( pic->type, width, height, tex->depth );

	mov	ecx, DWORD PTR _tex$[ebp]
	movzx	edx, WORD PTR [ecx+264]
	push	edx
	mov	eax, DWORD PTR _height$[ebp]
	push	eax
	mov	ecx, DWORD PTR _width$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pic$[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	call	_GL_CalcImageSize
	add	esp, 16					; 00000010H
	mov	DWORD PTR _size$[ebp], eax

; 1204 : 				GL_TextureImageRAW( tex, i, j, width, height, tex->depth, pic->type, data );

	mov	ecx, DWORD PTR _data$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pic$[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	mov	ecx, DWORD PTR _tex$[ebp]
	movzx	edx, WORD PTR [ecx+264]
	push	edx
	mov	eax, DWORD PTR _height$[ebp]
	push	eax
	mov	ecx, DWORD PTR _width$[ebp]
	push	ecx
	mov	edx, DWORD PTR _j$[ebp]
	push	edx
	mov	eax, DWORD PTR _i$[ebp]
	push	eax
	mov	ecx, DWORD PTR _tex$[ebp]
	push	ecx
	call	_GL_TextureImageRAW
	add	esp, 32					; 00000020H

; 1205 : 				if( mipCount > 1 )

	cmp	DWORD PTR _mipCount$1[ebp], 1
	jle	SHORT $LN28@GL_UploadT

; 1206 : 					GL_BuildMipMap( data, width, height, tex->depth, tex->flags );

	mov	edx, DWORD PTR _tex$[ebp]
	mov	eax, DWORD PTR [edx+284]
	push	eax
	mov	ecx, DWORD PTR _tex$[ebp]
	movzx	edx, WORD PTR [ecx+264]
	push	edx
	mov	eax, DWORD PTR _height$[ebp]
	push	eax
	mov	ecx, DWORD PTR _width$[ebp]
	push	ecx
	mov	edx, DWORD PTR _data$[ebp]
	push	edx
	call	_GL_BuildMipMap
	add	esp, 20					; 00000014H
$LN28@GL_UploadT:

; 1207 : 				tex->size += texsize;

	mov	eax, DWORD PTR _tex$[ebp]
	mov	ecx, DWORD PTR [eax+296]
	add	ecx, DWORD PTR _texsize$[ebp]
	mov	edx, DWORD PTR _tex$[ebp]
	mov	DWORD PTR [edx+296], ecx

; 1208 : 				tex->numMips++;

	mov	eax, DWORD PTR _tex$[ebp]
	mov	cl, BYTE PTR [eax+266]
	add	cl, 1
	mov	edx, DWORD PTR _tex$[ebp]
	mov	BYTE PTR [edx+266], cl

; 1209 : 
; 1210 : 				GL_CheckTexImageError( tex );

	mov	eax, DWORD PTR _tex$[ebp]
	push	eax
	call	_GL_CheckTexImageError
	add	esp, 4

; 1211 : 			}

	jmp	$LN11@GL_UploadT
$LN12@GL_UploadT:

; 1212 : 
; 1213 : 			// move to next side
; 1214 : 			if( numSides > 1 && ( buf != NULL ))

	cmp	DWORD PTR _numSides$[ebp], 1
	jbe	SHORT $LN19@GL_UploadT
	cmp	DWORD PTR _buf$[ebp], 0
	je	SHORT $LN19@GL_UploadT

; 1215 : 				buf += GL_CalcImageSize( pic->type, pic->width, pic->height, 1 );

	push	1
	mov	ecx, DWORD PTR _pic$[ebp]
	movzx	edx, WORD PTR [ecx+2]
	push	edx
	mov	eax, DWORD PTR _pic$[ebp]
	movzx	ecx, WORD PTR [eax]
	push	ecx
	mov	edx, DWORD PTR _pic$[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	call	_GL_CalcImageSize
	add	esp, 16					; 00000010H
	add	eax, DWORD PTR _buf$[ebp]
	mov	DWORD PTR _buf$[ebp], eax
$LN19@GL_UploadT:

; 1216 : 		}
; 1217 : 	}

	jmp	$LN2@GL_UploadT
$LN3@GL_UploadT:

; 1218 : 
; 1219 : 	SetBits( tex->flags, TF_IMG_UPLOADED ); // done

	mov	ecx, DWORD PTR _tex$[ebp]
	mov	edx, DWORD PTR [ecx+284]
	or	edx, 33554432				; 02000000H
	mov	eax, DWORD PTR _tex$[ebp]
	mov	DWORD PTR [eax+284], edx

; 1220 : 	tex->numMips /= numSides;

	mov	ecx, DWORD PTR _tex$[ebp]
	movzx	eax, BYTE PTR [ecx+266]
	xor	edx, edx
	div	DWORD PTR _numSides$[ebp]
	mov	edx, DWORD PTR _tex$[ebp]
	mov	BYTE PTR [edx+266], al

; 1221 : 
; 1222 : 	return true;

	mov	eax, 1
$LN1@GL_UploadT:

; 1223 : }

	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	0
_GL_UploadTexture ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xash_build4529_src\engine\client\gl_image.c
_TEXT	SEGMENT
_err$ = -12						; size = 4
tv74 = -8						; size = 4
tv69 = -4						; size = 4
_tex$ = 8						; size = 4
_GL_CheckTexImageError PROC

; 1078 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH

; 1079 : 	int	err;
; 1080 : 
; 1081 : 	Assert( tex != NULL );

	cmp	DWORD PTR _tex$[ebp], 0
	je	SHORT $LN4@GL_CheckTe
	mov	DWORD PTR tv69[ebp], 1
	jmp	SHORT $LN5@GL_CheckTe
$LN4@GL_CheckTe:
	mov	DWORD PTR tv69[ebp], 0
$LN5@GL_CheckTe:
	push	0
	push	1081					; 00000439H
	push	OFFSET $SG143954
	push	OFFSET $SG143955
	mov	eax, DWORD PTR tv69[ebp]
	push	eax
	call	_DBG_AssertFunction
	add	esp, 20					; 00000014H

; 1082 : 
; 1083 : 	// catch possible errors
; 1084 : 	if( CVAR_TO_BOOL( gl_check_errors ) && ( err = pglGetError()) != GL_NO_ERROR )

	cmp	DWORD PTR _gl_check_errors, 0
	je	SHORT $LN6@GL_CheckTe
	mov	ecx, DWORD PTR _gl_check_errors
	movss	xmm0, DWORD PTR [ecx+12]
	ucomiss	xmm0, DWORD PTR __real@00000000
	lahf
	test	ah, 68					; 00000044H
	jnp	SHORT $LN6@GL_CheckTe
	mov	DWORD PTR tv74[ebp], 1
	jmp	SHORT $LN7@GL_CheckTe
$LN6@GL_CheckTe:
	mov	DWORD PTR tv74[ebp], 0
$LN7@GL_CheckTe:
	cmp	DWORD PTR tv74[ebp], 0
	je	SHORT $LN2@GL_CheckTe
	call	DWORD PTR _pglGetError
	mov	DWORD PTR _err$[ebp], eax
	cmp	DWORD PTR _err$[ebp], 0
	je	SHORT $LN2@GL_CheckTe

; 1085 : 		Con_Printf( S_OPENGL_ERROR "%s while uploading %s [%s]\n", GL_ErrorString( err ), tex->name, GL_TargetToString( tex->target ));

	mov	edx, DWORD PTR _tex$[ebp]
	mov	eax, DWORD PTR [edx+268]
	push	eax
	call	_GL_TargetToString
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR _tex$[ebp]
	push	ecx
	mov	edx, DWORD PTR _err$[ebp]
	push	edx
	call	_GL_ErrorString
	add	esp, 4
	push	eax
	push	OFFSET $SG143957
	call	_Con_Printf
	add	esp, 16					; 00000010H
$LN2@GL_CheckTe:

; 1086 : }

	mov	esp, ebp
	pop	ebp
	ret	0
_GL_CheckTexImageError ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xash_build4529_src\engine\client\gl_image.c
_TEXT	SEGMENT
_cubeTarget$ = -12					; size = 4
tv71 = -8						; size = 4
_subImage$ = -4						; size = 4
_tex$ = 8						; size = 4
_side$ = 12						; size = 4
_level$ = 16						; size = 4
_width$ = 20						; size = 4
_height$ = 24						; size = 4
_depth$ = 28						; size = 4
_size$ = 32						; size = 4
_data$ = 36						; size = 4
_GL_TextureImageDXT PROC

; 1042 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH

; 1043 : 	GLuint	cubeTarget = GL_TEXTURE_CUBE_MAP_POSITIVE_X_ARB;

	mov	DWORD PTR _cubeTarget$[ebp], 34069	; 00008515H

; 1044 : 	qboolean	subImage = FBitSet( tex->flags, TF_IMG_UPLOADED );

	mov	eax, DWORD PTR _tex$[ebp]
	mov	ecx, DWORD PTR [eax+284]
	and	ecx, 33554432				; 02000000H
	mov	DWORD PTR _subImage$[ebp], ecx

; 1045 : 
; 1046 : 	Assert( tex != NULL );

	cmp	DWORD PTR _tex$[ebp], 0
	je	SHORT $LN18@GL_Texture
	mov	DWORD PTR tv71[ebp], 1
	jmp	SHORT $LN19@GL_Texture
$LN18@GL_Texture:
	mov	DWORD PTR tv71[ebp], 0
$LN19@GL_Texture:
	push	0
	push	1046					; 00000416H
	push	OFFSET $SG143930
	push	OFFSET $SG143931
	mov	edx, DWORD PTR tv71[ebp]
	push	edx
	call	_DBG_AssertFunction
	add	esp, 20					; 00000014H

; 1047 : 
; 1048 : 	if( tex->target == GL_TEXTURE_1D )

	mov	eax, DWORD PTR _tex$[ebp]
	cmp	DWORD PTR [eax+268], 3552		; 00000de0H
	jne	SHORT $LN2@GL_Texture

; 1049 : 	{
; 1050 : 		if( subImage ) pglCompressedTexSubImage1DARB( tex->target, level, 0, width, tex->format, size, data );

	cmp	DWORD PTR _subImage$[ebp], 0
	je	SHORT $LN4@GL_Texture
	mov	ecx, DWORD PTR _data$[ebp]
	push	ecx
	mov	edx, DWORD PTR _size$[ebp]
	push	edx
	mov	eax, DWORD PTR _tex$[ebp]
	mov	ecx, DWORD PTR [eax+276]
	push	ecx
	mov	edx, DWORD PTR _width$[ebp]
	push	edx
	push	0
	mov	eax, DWORD PTR _level$[ebp]
	push	eax
	mov	ecx, DWORD PTR _tex$[ebp]
	mov	edx, DWORD PTR [ecx+268]
	push	edx
	call	DWORD PTR _pglCompressedTexSubImage1DARB
	jmp	SHORT $LN5@GL_Texture
$LN4@GL_Texture:

; 1051 : 		else pglCompressedTexImage1DARB( tex->target, level, tex->format, width, 0, size, data );

	mov	eax, DWORD PTR _data$[ebp]
	push	eax
	mov	ecx, DWORD PTR _size$[ebp]
	push	ecx
	push	0
	mov	edx, DWORD PTR _width$[ebp]
	push	edx
	mov	eax, DWORD PTR _tex$[ebp]
	mov	ecx, DWORD PTR [eax+276]
	push	ecx
	mov	edx, DWORD PTR _level$[ebp]
	push	edx
	mov	eax, DWORD PTR _tex$[ebp]
	mov	ecx, DWORD PTR [eax+268]
	push	ecx
	call	DWORD PTR _pglCompressedTexImage1DARB
$LN5@GL_Texture:

; 1052 : 	}

	jmp	$LN1@GL_Texture
$LN2@GL_Texture:

; 1053 : 	else if( tex->target == GL_TEXTURE_CUBE_MAP_ARB )

	mov	edx, DWORD PTR _tex$[ebp]
	cmp	DWORD PTR [edx+268], 34067		; 00008513H
	jne	SHORT $LN6@GL_Texture

; 1054 : 	{
; 1055 : 		if( subImage ) pglCompressedTexSubImage2DARB( cubeTarget + side, level, 0, 0, width, height, tex->format, size, data );

	cmp	DWORD PTR _subImage$[ebp], 0
	je	SHORT $LN8@GL_Texture
	mov	eax, DWORD PTR _data$[ebp]
	push	eax
	mov	ecx, DWORD PTR _size$[ebp]
	push	ecx
	mov	edx, DWORD PTR _tex$[ebp]
	mov	eax, DWORD PTR [edx+276]
	push	eax
	mov	ecx, DWORD PTR _height$[ebp]
	push	ecx
	mov	edx, DWORD PTR _width$[ebp]
	push	edx
	push	0
	push	0
	mov	eax, DWORD PTR _level$[ebp]
	push	eax
	mov	ecx, DWORD PTR _cubeTarget$[ebp]
	add	ecx, DWORD PTR _side$[ebp]
	push	ecx
	call	DWORD PTR _pglCompressedTexSubImage2DARB
	jmp	SHORT $LN9@GL_Texture
$LN8@GL_Texture:

; 1056 : 		else pglCompressedTexImage2DARB( cubeTarget + side, level, tex->format, width, height, 0, size, data );

	mov	edx, DWORD PTR _data$[ebp]
	push	edx
	mov	eax, DWORD PTR _size$[ebp]
	push	eax
	push	0
	mov	ecx, DWORD PTR _height$[ebp]
	push	ecx
	mov	edx, DWORD PTR _width$[ebp]
	push	edx
	mov	eax, DWORD PTR _tex$[ebp]
	mov	ecx, DWORD PTR [eax+276]
	push	ecx
	mov	edx, DWORD PTR _level$[ebp]
	push	edx
	mov	eax, DWORD PTR _cubeTarget$[ebp]
	add	eax, DWORD PTR _side$[ebp]
	push	eax
	call	DWORD PTR _pglCompressedTexImage2DARB
$LN9@GL_Texture:

; 1057 : 	}

	jmp	$LN1@GL_Texture
$LN6@GL_Texture:

; 1058 : 	else if( tex->target == GL_TEXTURE_3D || tex->target == GL_TEXTURE_2D_ARRAY_EXT )

	mov	ecx, DWORD PTR _tex$[ebp]
	cmp	DWORD PTR [ecx+268], 32879		; 0000806fH
	je	SHORT $LN12@GL_Texture
	mov	edx, DWORD PTR _tex$[ebp]
	cmp	DWORD PTR [edx+268], 35866		; 00008c1aH
	jne	SHORT $LN10@GL_Texture
$LN12@GL_Texture:

; 1059 : 	{
; 1060 : 		if( subImage ) pglCompressedTexSubImage3DARB( tex->target, level, 0, 0, 0, width, height, depth, tex->format, size, data );

	cmp	DWORD PTR _subImage$[ebp], 0
	je	SHORT $LN13@GL_Texture
	mov	eax, DWORD PTR _data$[ebp]
	push	eax
	mov	ecx, DWORD PTR _size$[ebp]
	push	ecx
	mov	edx, DWORD PTR _tex$[ebp]
	mov	eax, DWORD PTR [edx+276]
	push	eax
	mov	ecx, DWORD PTR _depth$[ebp]
	push	ecx
	mov	edx, DWORD PTR _height$[ebp]
	push	edx
	mov	eax, DWORD PTR _width$[ebp]
	push	eax
	push	0
	push	0
	push	0
	mov	ecx, DWORD PTR _level$[ebp]
	push	ecx
	mov	edx, DWORD PTR _tex$[ebp]
	mov	eax, DWORD PTR [edx+268]
	push	eax
	call	DWORD PTR _pglCompressedTexSubImage3DARB
	jmp	SHORT $LN14@GL_Texture
$LN13@GL_Texture:

; 1061 : 		else pglCompressedTexImage3DARB( tex->target, level, tex->format, width, height, depth, 0, size, data );

	mov	ecx, DWORD PTR _data$[ebp]
	push	ecx
	mov	edx, DWORD PTR _size$[ebp]
	push	edx
	push	0
	mov	eax, DWORD PTR _depth$[ebp]
	push	eax
	mov	ecx, DWORD PTR _height$[ebp]
	push	ecx
	mov	edx, DWORD PTR _width$[ebp]
	push	edx
	mov	eax, DWORD PTR _tex$[ebp]
	mov	ecx, DWORD PTR [eax+276]
	push	ecx
	mov	edx, DWORD PTR _level$[ebp]
	push	edx
	mov	eax, DWORD PTR _tex$[ebp]
	mov	ecx, DWORD PTR [eax+268]
	push	ecx
	call	DWORD PTR _pglCompressedTexImage3DARB
$LN14@GL_Texture:

; 1062 : 	}

	jmp	SHORT $LN1@GL_Texture
$LN10@GL_Texture:

; 1063 : 	else // 2D or RECT
; 1064 : 	{
; 1065 : 		if( subImage ) pglCompressedTexSubImage2DARB( tex->target, level, 0, 0, width, height, tex->format, size, data );

	cmp	DWORD PTR _subImage$[ebp], 0
	je	SHORT $LN15@GL_Texture
	mov	edx, DWORD PTR _data$[ebp]
	push	edx
	mov	eax, DWORD PTR _size$[ebp]
	push	eax
	mov	ecx, DWORD PTR _tex$[ebp]
	mov	edx, DWORD PTR [ecx+276]
	push	edx
	mov	eax, DWORD PTR _height$[ebp]
	push	eax
	mov	ecx, DWORD PTR _width$[ebp]
	push	ecx
	push	0
	push	0
	mov	edx, DWORD PTR _level$[ebp]
	push	edx
	mov	eax, DWORD PTR _tex$[ebp]
	mov	ecx, DWORD PTR [eax+268]
	push	ecx
	call	DWORD PTR _pglCompressedTexSubImage2DARB
	jmp	SHORT $LN1@GL_Texture
$LN15@GL_Texture:

; 1066 : 		else pglCompressedTexImage2DARB( tex->target, level, tex->format, width, height, 0, size, data );

	mov	edx, DWORD PTR _data$[ebp]
	push	edx
	mov	eax, DWORD PTR _size$[ebp]
	push	eax
	push	0
	mov	ecx, DWORD PTR _height$[ebp]
	push	ecx
	mov	edx, DWORD PTR _width$[ebp]
	push	edx
	mov	eax, DWORD PTR _tex$[ebp]
	mov	ecx, DWORD PTR [eax+276]
	push	ecx
	mov	edx, DWORD PTR _level$[ebp]
	push	edx
	mov	eax, DWORD PTR _tex$[ebp]
	mov	ecx, DWORD PTR [eax+268]
	push	ecx
	call	DWORD PTR _pglCompressedTexImage2DARB
$LN1@GL_Texture:

; 1067 : 	}
; 1068 : }

	mov	esp, ebp
	pop	ebp
	ret	0
_GL_TextureImageDXT ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xash_build4529_src\engine\client\gl_image.c
_TEXT	SEGMENT
_cubeTarget$ = -20					; size = 4
tv74 = -16						; size = 4
_subImage$ = -12					; size = 4
_inFormat$ = -8						; size = 4
_dataType$ = -4						; size = 4
_tex$ = 8						; size = 4
_side$ = 12						; size = 4
_level$ = 16						; size = 4
_width$ = 20						; size = 4
_height$ = 24						; size = 4
_depth$ = 28						; size = 4
_type$ = 32						; size = 4
_data$ = 36						; size = 4
_GL_TextureImageRAW PROC

; 1003 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H

; 1004 : 	GLuint	cubeTarget = GL_TEXTURE_CUBE_MAP_POSITIVE_X_ARB;

	mov	DWORD PTR _cubeTarget$[ebp], 34069	; 00008515H

; 1005 : 	qboolean	subImage = FBitSet( tex->flags, TF_IMG_UPLOADED );

	mov	eax, DWORD PTR _tex$[ebp]
	mov	ecx, DWORD PTR [eax+284]
	and	ecx, 33554432				; 02000000H
	mov	DWORD PTR _subImage$[ebp], ecx

; 1006 : 	GLenum	inFormat = PFDesc[type].glFormat;

	imul	edx, DWORD PTR _type$[ebp], 28
	mov	eax, DWORD PTR _PFDesc[edx+20]
	mov	DWORD PTR _inFormat$[ebp], eax

; 1007 : 	GLint	dataType = GL_UNSIGNED_BYTE;

	mov	DWORD PTR _dataType$[ebp], 5121		; 00001401H

; 1008 : 
; 1009 : 	Assert( tex != NULL );

	cmp	DWORD PTR _tex$[ebp], 0
	je	SHORT $LN22@GL_Texture
	mov	DWORD PTR tv74[ebp], 1
	jmp	SHORT $LN23@GL_Texture
$LN22@GL_Texture:
	mov	DWORD PTR tv74[ebp], 0
$LN23@GL_Texture:
	push	0
	push	1009					; 000003f1H
	push	OFFSET $SG143887
	push	OFFSET $SG143888
	mov	ecx, DWORD PTR tv74[ebp]
	push	ecx
	call	_DBG_AssertFunction
	add	esp, 20					; 00000014H

; 1010 : 
; 1011 : 	if( FBitSet( tex->flags, TF_DEPTHMAP ))

	mov	edx, DWORD PTR _tex$[ebp]
	mov	eax, DWORD PTR [edx+284]
	and	eax, 128				; 00000080H
	je	SHORT $LN2@GL_Texture

; 1012 : 		inFormat = GL_DEPTH_COMPONENT;

	mov	DWORD PTR _inFormat$[ebp], 6402		; 00001902H
$LN2@GL_Texture:

; 1013 : 
; 1014 : 	if( FBitSet( tex->flags, TF_ARB_16BIT ))

	mov	ecx, DWORD PTR _tex$[ebp]
	mov	edx, DWORD PTR [ecx+284]
	and	edx, 268435456				; 10000000H
	je	SHORT $LN3@GL_Texture

; 1015 : 		dataType = GL_HALF_FLOAT_ARB;

	mov	DWORD PTR _dataType$[ebp], 5131		; 0000140bH
	jmp	SHORT $LN4@GL_Texture
$LN3@GL_Texture:

; 1016 : 	else if( FBitSet( tex->flags, TF_ARB_FLOAT ))

	mov	eax, DWORD PTR _tex$[ebp]
	mov	ecx, DWORD PTR [eax+284]
	and	ecx, 67108864				; 04000000H
	je	SHORT $LN4@GL_Texture

; 1017 : 		dataType = GL_FLOAT;

	mov	DWORD PTR _dataType$[ebp], 5126		; 00001406H
$LN4@GL_Texture:

; 1018 : 
; 1019 : 	if( tex->target == GL_TEXTURE_1D )

	mov	edx, DWORD PTR _tex$[ebp]
	cmp	DWORD PTR [edx+268], 3552		; 00000de0H
	jne	SHORT $LN6@GL_Texture

; 1020 : 	{
; 1021 : 		if( subImage ) pglTexSubImage1D( tex->target, level, 0, width, inFormat, dataType, data );

	cmp	DWORD PTR _subImage$[ebp], 0
	je	SHORT $LN8@GL_Texture
	mov	eax, DWORD PTR _data$[ebp]
	push	eax
	mov	ecx, DWORD PTR _dataType$[ebp]
	push	ecx
	mov	edx, DWORD PTR _inFormat$[ebp]
	push	edx
	mov	eax, DWORD PTR _width$[ebp]
	push	eax
	push	0
	mov	ecx, DWORD PTR _level$[ebp]
	push	ecx
	mov	edx, DWORD PTR _tex$[ebp]
	mov	eax, DWORD PTR [edx+268]
	push	eax
	call	DWORD PTR _pglTexSubImage1D
	jmp	SHORT $LN9@GL_Texture
$LN8@GL_Texture:

; 1022 : 		else pglTexImage1D( tex->target, level, tex->format, width, 0, inFormat, dataType, data );

	mov	ecx, DWORD PTR _data$[ebp]
	push	ecx
	mov	edx, DWORD PTR _dataType$[ebp]
	push	edx
	mov	eax, DWORD PTR _inFormat$[ebp]
	push	eax
	push	0
	mov	ecx, DWORD PTR _width$[ebp]
	push	ecx
	mov	edx, DWORD PTR _tex$[ebp]
	mov	eax, DWORD PTR [edx+276]
	push	eax
	mov	ecx, DWORD PTR _level$[ebp]
	push	ecx
	mov	edx, DWORD PTR _tex$[ebp]
	mov	eax, DWORD PTR [edx+268]
	push	eax
	call	DWORD PTR _pglTexImage1D
$LN9@GL_Texture:

; 1023 : 	}

	jmp	$LN1@GL_Texture
$LN6@GL_Texture:

; 1024 : 	else if( tex->target == GL_TEXTURE_CUBE_MAP_ARB )

	mov	ecx, DWORD PTR _tex$[ebp]
	cmp	DWORD PTR [ecx+268], 34067		; 00008513H
	jne	SHORT $LN10@GL_Texture

; 1025 : 	{
; 1026 : 		if( subImage ) pglTexSubImage2D( cubeTarget + side, level, 0, 0, width, height, inFormat, dataType, data );

	cmp	DWORD PTR _subImage$[ebp], 0
	je	SHORT $LN12@GL_Texture
	mov	edx, DWORD PTR _data$[ebp]
	push	edx
	mov	eax, DWORD PTR _dataType$[ebp]
	push	eax
	mov	ecx, DWORD PTR _inFormat$[ebp]
	push	ecx
	mov	edx, DWORD PTR _height$[ebp]
	push	edx
	mov	eax, DWORD PTR _width$[ebp]
	push	eax
	push	0
	push	0
	mov	ecx, DWORD PTR _level$[ebp]
	push	ecx
	mov	edx, DWORD PTR _cubeTarget$[ebp]
	add	edx, DWORD PTR _side$[ebp]
	push	edx
	call	DWORD PTR _pglTexSubImage2D
	jmp	SHORT $LN13@GL_Texture
$LN12@GL_Texture:

; 1027 : 		else pglTexImage2D( cubeTarget + side, level, tex->format, width, height, 0, inFormat, dataType, data );

	mov	eax, DWORD PTR _data$[ebp]
	push	eax
	mov	ecx, DWORD PTR _dataType$[ebp]
	push	ecx
	mov	edx, DWORD PTR _inFormat$[ebp]
	push	edx
	push	0
	mov	eax, DWORD PTR _height$[ebp]
	push	eax
	mov	ecx, DWORD PTR _width$[ebp]
	push	ecx
	mov	edx, DWORD PTR _tex$[ebp]
	mov	eax, DWORD PTR [edx+276]
	push	eax
	mov	ecx, DWORD PTR _level$[ebp]
	push	ecx
	mov	edx, DWORD PTR _cubeTarget$[ebp]
	add	edx, DWORD PTR _side$[ebp]
	push	edx
	call	DWORD PTR _pglTexImage2D
$LN13@GL_Texture:

; 1028 : 	}

	jmp	$LN1@GL_Texture
$LN10@GL_Texture:

; 1029 : 	else if( tex->target == GL_TEXTURE_3D || tex->target == GL_TEXTURE_2D_ARRAY_EXT )

	mov	eax, DWORD PTR _tex$[ebp]
	cmp	DWORD PTR [eax+268], 32879		; 0000806fH
	je	SHORT $LN16@GL_Texture
	mov	ecx, DWORD PTR _tex$[ebp]
	cmp	DWORD PTR [ecx+268], 35866		; 00008c1aH
	jne	SHORT $LN14@GL_Texture
$LN16@GL_Texture:

; 1030 : 	{
; 1031 : 		if( subImage ) pglTexSubImage3D( tex->target, level, 0, 0, 0, width, height, depth, inFormat, dataType, data );

	cmp	DWORD PTR _subImage$[ebp], 0
	je	SHORT $LN17@GL_Texture
	mov	edx, DWORD PTR _data$[ebp]
	push	edx
	mov	eax, DWORD PTR _dataType$[ebp]
	push	eax
	mov	ecx, DWORD PTR _inFormat$[ebp]
	push	ecx
	mov	edx, DWORD PTR _depth$[ebp]
	push	edx
	mov	eax, DWORD PTR _height$[ebp]
	push	eax
	mov	ecx, DWORD PTR _width$[ebp]
	push	ecx
	push	0
	push	0
	push	0
	mov	edx, DWORD PTR _level$[ebp]
	push	edx
	mov	eax, DWORD PTR _tex$[ebp]
	mov	ecx, DWORD PTR [eax+268]
	push	ecx
	call	DWORD PTR _pglTexSubImage3D
	jmp	SHORT $LN18@GL_Texture
$LN17@GL_Texture:

; 1032 : 		else pglTexImage3D( tex->target, level, tex->format, width, height, depth, 0, inFormat, dataType, data );

	mov	edx, DWORD PTR _data$[ebp]
	push	edx
	mov	eax, DWORD PTR _dataType$[ebp]
	push	eax
	mov	ecx, DWORD PTR _inFormat$[ebp]
	push	ecx
	push	0
	mov	edx, DWORD PTR _depth$[ebp]
	push	edx
	mov	eax, DWORD PTR _height$[ebp]
	push	eax
	mov	ecx, DWORD PTR _width$[ebp]
	push	ecx
	mov	edx, DWORD PTR _tex$[ebp]
	mov	eax, DWORD PTR [edx+276]
	push	eax
	mov	ecx, DWORD PTR _level$[ebp]
	push	ecx
	mov	edx, DWORD PTR _tex$[ebp]
	mov	eax, DWORD PTR [edx+268]
	push	eax
	call	DWORD PTR _pglTexImage3D
$LN18@GL_Texture:

; 1033 : 	}

	jmp	SHORT $LN1@GL_Texture
$LN14@GL_Texture:

; 1034 : 	else // 2D or RECT
; 1035 : 	{
; 1036 : 		if( subImage ) pglTexSubImage2D( tex->target, level, 0, 0, width, height, inFormat, dataType, data );

	cmp	DWORD PTR _subImage$[ebp], 0
	je	SHORT $LN19@GL_Texture
	mov	ecx, DWORD PTR _data$[ebp]
	push	ecx
	mov	edx, DWORD PTR _dataType$[ebp]
	push	edx
	mov	eax, DWORD PTR _inFormat$[ebp]
	push	eax
	mov	ecx, DWORD PTR _height$[ebp]
	push	ecx
	mov	edx, DWORD PTR _width$[ebp]
	push	edx
	push	0
	push	0
	mov	eax, DWORD PTR _level$[ebp]
	push	eax
	mov	ecx, DWORD PTR _tex$[ebp]
	mov	edx, DWORD PTR [ecx+268]
	push	edx
	call	DWORD PTR _pglTexSubImage2D
	jmp	SHORT $LN1@GL_Texture
$LN19@GL_Texture:

; 1037 : 		else pglTexImage2D( tex->target, level, tex->format, width, height, 0, inFormat, dataType, data );

	mov	eax, DWORD PTR _data$[ebp]
	push	eax
	mov	ecx, DWORD PTR _dataType$[ebp]
	push	ecx
	mov	edx, DWORD PTR _inFormat$[ebp]
	push	edx
	push	0
	mov	eax, DWORD PTR _height$[ebp]
	push	eax
	mov	ecx, DWORD PTR _width$[ebp]
	push	ecx
	mov	edx, DWORD PTR _tex$[ebp]
	mov	eax, DWORD PTR [edx+276]
	push	eax
	mov	ecx, DWORD PTR _level$[ebp]
	push	ecx
	mov	edx, DWORD PTR _tex$[ebp]
	mov	eax, DWORD PTR [edx+268]
	push	eax
	call	DWORD PTR _pglTexImage2D
$LN1@GL_Texture:

; 1038 : 	}
; 1039 : }

	mov	esp, ebp
	pop	ebp
	ret	0
_GL_TextureImageRAW ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xash_build4529_src\engine\client\gl_image.c
_TEXT	SEGMENT
tv588 = -80						; size = 4
tv375 = -76						; size = 4
_outpadding$ = -72					; size = 4
tv130 = -68						; size = 4
tv73 = -64						; size = 4
tv69 = -60						; size = 4
_mipHeight$ = -56					; size = 4
_z$ = -52						; size = 4
_instride$ = -48					; size = 4
_mipWidth$ = -44					; size = 4
_x$ = -40						; size = 4
_y$ = -36						; size = 4
_next$1 = -32						; size = 4
_next$2 = -28						; size = 4
_out$ = -24						; size = 4
_row$ = -20						; size = 4
_normal$ = -16						; size = 12
__$ArrayPad$ = -4					; size = 4
_in$ = 8						; size = 4
_srcWidth$ = 12						; size = 4
_srcHeight$ = 16					; size = 4
_srcDepth$ = 20						; size = 4
_flags$ = 24						; size = 4
_GL_BuildMipMap PROC

; 919  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 80					; 00000050H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 920  : 	byte	*out = in;

	mov	eax, DWORD PTR _in$[ebp]
	mov	DWORD PTR _out$[ebp], eax

; 921  : 	int	instride = ALIGN( srcWidth * 4, 1 );

	mov	ecx, DWORD PTR _srcWidth$[ebp]
	shl	ecx, 2
	mov	DWORD PTR _instride$[ebp], ecx

; 922  : 	int	mipWidth, mipHeight, outpadding;
; 923  : 	int	row, x, y, z;
; 924  : 	vec3_t	normal;
; 925  : 
; 926  : 	if( !in ) return;

	cmp	DWORD PTR _in$[ebp], 0
	jne	SHORT $LN17@GL_BuildMi
	jmp	$LN3@GL_BuildMi
$LN17@GL_BuildMi:

; 927  : 
; 928  : 	mipWidth = Q_max( 1, ( srcWidth >> 1 ));

	mov	edx, DWORD PTR _srcWidth$[ebp]
	sar	edx, 1
	cmp	edx, 1
	jge	SHORT $LN27@GL_BuildMi
	mov	DWORD PTR tv69[ebp], 1
	jmp	SHORT $LN28@GL_BuildMi
$LN27@GL_BuildMi:
	mov	eax, DWORD PTR _srcWidth$[ebp]
	sar	eax, 1
	mov	DWORD PTR tv69[ebp], eax
$LN28@GL_BuildMi:
	mov	ecx, DWORD PTR tv69[ebp]
	mov	DWORD PTR _mipWidth$[ebp], ecx

; 929  : 	mipHeight = Q_max( 1, ( srcHeight >> 1 ));

	mov	edx, DWORD PTR _srcHeight$[ebp]
	sar	edx, 1
	cmp	edx, 1
	jge	SHORT $LN29@GL_BuildMi
	mov	DWORD PTR tv73[ebp], 1
	jmp	SHORT $LN30@GL_BuildMi
$LN29@GL_BuildMi:
	mov	eax, DWORD PTR _srcHeight$[ebp]
	sar	eax, 1
	mov	DWORD PTR tv73[ebp], eax
$LN30@GL_BuildMi:
	mov	ecx, DWORD PTR tv73[ebp]
	mov	DWORD PTR _mipHeight$[ebp], ecx

; 930  : 	outpadding = ALIGN( mipWidth * 4, 1 ) - mipWidth * 4;

	mov	edx, DWORD PTR _mipWidth$[ebp]
	shl	edx, 2
	mov	eax, DWORD PTR _mipWidth$[ebp]
	shl	eax, 2
	sub	edx, eax
	mov	DWORD PTR _outpadding$[ebp], edx

; 931  : 	row = srcWidth << 2;

	mov	ecx, DWORD PTR _srcWidth$[ebp]
	shl	ecx, 2
	mov	DWORD PTR _row$[ebp], ecx

; 932  : 
; 933  : 	if( FBitSet( flags, TF_ALPHACONTRAST ))

	mov	edx, DWORD PTR _flags$[ebp]
	and	edx, 4194304				; 00400000H
	je	SHORT $LN18@GL_BuildMi

; 934  : 	{
; 935  : 		memset( in, mipWidth, mipWidth * mipHeight * 4 );

	mov	eax, DWORD PTR _mipWidth$[ebp]
	imul	eax, DWORD PTR _mipHeight$[ebp]
	shl	eax, 2
	push	eax
	mov	ecx, DWORD PTR _mipWidth$[ebp]
	push	ecx
	mov	edx, DWORD PTR _in$[ebp]
	push	edx
	call	_memset
	add	esp, 12					; 0000000cH

; 936  : 		return;

	jmp	$LN3@GL_BuildMi
$LN18@GL_BuildMi:

; 937  : 	}
; 938  : 
; 939  : 	// move through all layers
; 940  : 	for( z = 0; z < srcDepth; z++ )

	mov	DWORD PTR _z$[ebp], 0
	jmp	SHORT $LN4@GL_BuildMi
$LN2@GL_BuildMi:
	mov	eax, DWORD PTR _z$[ebp]
	add	eax, 1
	mov	DWORD PTR _z$[ebp], eax
$LN4@GL_BuildMi:
	mov	ecx, DWORD PTR _z$[ebp]
	cmp	ecx, DWORD PTR _srcDepth$[ebp]
	jge	$LN3@GL_BuildMi

; 941  : 	{
; 942  : 		if( FBitSet( flags, TF_NORMALMAP ))

	mov	edx, DWORD PTR _flags$[ebp]
	and	edx, 32768				; 00008000H
	je	$LN19@GL_BuildMi

; 943  : 		{
; 944  : 			for( y = 0; y < mipHeight; y++, in += instride * 2, out += outpadding )

	mov	DWORD PTR _y$[ebp], 0
	jmp	SHORT $LN7@GL_BuildMi
$LN5@GL_BuildMi:
	mov	eax, DWORD PTR _y$[ebp]
	add	eax, 1
	mov	DWORD PTR _y$[ebp], eax
	mov	ecx, DWORD PTR _instride$[ebp]
	mov	edx, DWORD PTR _in$[ebp]
	lea	eax, DWORD PTR [edx+ecx*2]
	mov	DWORD PTR _in$[ebp], eax
	mov	ecx, DWORD PTR _out$[ebp]
	add	ecx, DWORD PTR _outpadding$[ebp]
	mov	DWORD PTR _out$[ebp], ecx
$LN7@GL_BuildMi:
	mov	edx, DWORD PTR _y$[ebp]
	cmp	edx, DWORD PTR _mipHeight$[ebp]
	jge	$LN6@GL_BuildMi

; 945  : 			{
; 946  : 				byte *next = ((( y << 1 ) + 1 ) < srcHeight ) ? ( in + instride ) : in;

	mov	eax, DWORD PTR _y$[ebp]
	lea	ecx, DWORD PTR [eax+eax+1]
	cmp	ecx, DWORD PTR _srcHeight$[ebp]
	jge	SHORT $LN31@GL_BuildMi
	mov	edx, DWORD PTR _in$[ebp]
	add	edx, DWORD PTR _instride$[ebp]
	mov	DWORD PTR tv130[ebp], edx
	jmp	SHORT $LN32@GL_BuildMi
$LN31@GL_BuildMi:
	mov	eax, DWORD PTR _in$[ebp]
	mov	DWORD PTR tv130[ebp], eax
$LN32@GL_BuildMi:
	mov	ecx, DWORD PTR tv130[ebp]
	mov	DWORD PTR _next$1[ebp], ecx

; 947  : 				for( x = 0, row = 0; x < mipWidth; x++, row += 8, out += 4 )

	mov	DWORD PTR _x$[ebp], 0
	mov	DWORD PTR _row$[ebp], 0
	jmp	SHORT $LN10@GL_BuildMi
$LN8@GL_BuildMi:
	mov	edx, DWORD PTR _x$[ebp]
	add	edx, 1
	mov	DWORD PTR _x$[ebp], edx
	mov	eax, DWORD PTR _row$[ebp]
	add	eax, 8
	mov	DWORD PTR _row$[ebp], eax
	mov	ecx, DWORD PTR _out$[ebp]
	add	ecx, 4
	mov	DWORD PTR _out$[ebp], ecx
$LN10@GL_BuildMi:
	mov	edx, DWORD PTR _x$[ebp]
	cmp	edx, DWORD PTR _mipWidth$[ebp]
	jge	$LN9@GL_BuildMi

; 948  : 				{
; 949  : 					if((( x << 1 ) + 1 ) < srcWidth )

	mov	eax, DWORD PTR _x$[ebp]
	lea	ecx, DWORD PTR [eax+eax+1]
	cmp	ecx, DWORD PTR _srcWidth$[ebp]
	jge	$LN21@GL_BuildMi

; 950  : 					{
; 951  : 						normal[0] = MAKE_SIGNED( in[row+0] ) + MAKE_SIGNED( in[row+4] )

	mov	edx, DWORD PTR _in$[ebp]
	add	edx, DWORD PTR _row$[ebp]
	movzx	eax, BYTE PTR [edx]
	cvtsi2ss xmm0, eax
	mulss	xmm0, DWORD PTR __real@3c010204
	subss	xmm0, DWORD PTR __real@3f800000
	mov	ecx, DWORD PTR _in$[ebp]
	add	ecx, DWORD PTR _row$[ebp]
	movzx	edx, BYTE PTR [ecx+4]
	cvtsi2ss xmm1, edx
	mulss	xmm1, DWORD PTR __real@3c010204
	subss	xmm1, DWORD PTR __real@3f800000
	addss	xmm0, xmm1
	mov	eax, DWORD PTR _next$1[ebp]
	add	eax, DWORD PTR _row$[ebp]
	movzx	ecx, BYTE PTR [eax]
	cvtsi2ss xmm1, ecx
	mulss	xmm1, DWORD PTR __real@3c010204
	subss	xmm1, DWORD PTR __real@3f800000
	addss	xmm0, xmm1
	mov	edx, DWORD PTR _next$1[ebp]
	add	edx, DWORD PTR _row$[ebp]
	movzx	eax, BYTE PTR [edx+4]
	cvtsi2ss xmm1, eax
	mulss	xmm1, DWORD PTR __real@3c010204
	subss	xmm1, DWORD PTR __real@3f800000
	addss	xmm0, xmm1
	mov	ecx, 4
	imul	edx, ecx, 0
	movss	DWORD PTR _normal$[ebp+edx], xmm0

; 952  : 						+ MAKE_SIGNED( next[row+0] ) + MAKE_SIGNED( next[row+4] );
; 953  : 						normal[1] = MAKE_SIGNED( in[row+1] ) + MAKE_SIGNED( in[row+5] )

	mov	eax, DWORD PTR _in$[ebp]
	add	eax, DWORD PTR _row$[ebp]
	movzx	ecx, BYTE PTR [eax+1]
	cvtsi2ss xmm0, ecx
	mulss	xmm0, DWORD PTR __real@3c010204
	subss	xmm0, DWORD PTR __real@3f800000
	mov	edx, DWORD PTR _in$[ebp]
	add	edx, DWORD PTR _row$[ebp]
	movzx	eax, BYTE PTR [edx+5]
	cvtsi2ss xmm1, eax
	mulss	xmm1, DWORD PTR __real@3c010204
	subss	xmm1, DWORD PTR __real@3f800000
	addss	xmm0, xmm1
	mov	ecx, DWORD PTR _next$1[ebp]
	add	ecx, DWORD PTR _row$[ebp]
	movzx	edx, BYTE PTR [ecx+1]
	cvtsi2ss xmm1, edx
	mulss	xmm1, DWORD PTR __real@3c010204
	subss	xmm1, DWORD PTR __real@3f800000
	addss	xmm0, xmm1
	mov	eax, DWORD PTR _next$1[ebp]
	add	eax, DWORD PTR _row$[ebp]
	movzx	ecx, BYTE PTR [eax+5]
	cvtsi2ss xmm1, ecx
	mulss	xmm1, DWORD PTR __real@3c010204
	subss	xmm1, DWORD PTR __real@3f800000
	addss	xmm0, xmm1
	mov	edx, 4
	shl	edx, 0
	movss	DWORD PTR _normal$[ebp+edx], xmm0

; 954  : 						+ MAKE_SIGNED( next[row+1] ) + MAKE_SIGNED( next[row+5] );
; 955  : 						normal[2] = MAKE_SIGNED( in[row+2] ) + MAKE_SIGNED( in[row+6] )

	mov	eax, DWORD PTR _in$[ebp]
	add	eax, DWORD PTR _row$[ebp]
	movzx	ecx, BYTE PTR [eax+2]
	cvtsi2ss xmm0, ecx
	mulss	xmm0, DWORD PTR __real@3c010204
	subss	xmm0, DWORD PTR __real@3f800000
	mov	edx, DWORD PTR _in$[ebp]
	add	edx, DWORD PTR _row$[ebp]
	movzx	eax, BYTE PTR [edx+6]
	cvtsi2ss xmm1, eax
	mulss	xmm1, DWORD PTR __real@3c010204
	subss	xmm1, DWORD PTR __real@3f800000
	addss	xmm0, xmm1
	mov	ecx, DWORD PTR _next$1[ebp]
	add	ecx, DWORD PTR _row$[ebp]
	movzx	edx, BYTE PTR [ecx+2]
	cvtsi2ss xmm1, edx
	mulss	xmm1, DWORD PTR __real@3c010204
	subss	xmm1, DWORD PTR __real@3f800000
	addss	xmm0, xmm1
	mov	eax, DWORD PTR _next$1[ebp]
	add	eax, DWORD PTR _row$[ebp]
	movzx	ecx, BYTE PTR [eax+6]
	cvtsi2ss xmm1, ecx
	mulss	xmm1, DWORD PTR __real@3c010204
	subss	xmm1, DWORD PTR __real@3f800000
	addss	xmm0, xmm1
	mov	edx, 4
	shl	edx, 1
	movss	DWORD PTR _normal$[ebp+edx], xmm0

; 956  : 						+ MAKE_SIGNED( next[row+2] ) + MAKE_SIGNED( next[row+6] );
; 957  : 					}

	jmp	$LN22@GL_BuildMi
$LN21@GL_BuildMi:

; 958  : 					else
; 959  : 					{
; 960  : 						normal[0] = MAKE_SIGNED( in[row+0] ) + MAKE_SIGNED( next[row+0] );

	mov	eax, DWORD PTR _in$[ebp]
	add	eax, DWORD PTR _row$[ebp]
	movzx	ecx, BYTE PTR [eax]
	cvtsi2ss xmm0, ecx
	mulss	xmm0, DWORD PTR __real@3c010204
	subss	xmm0, DWORD PTR __real@3f800000
	mov	edx, DWORD PTR _next$1[ebp]
	add	edx, DWORD PTR _row$[ebp]
	movzx	eax, BYTE PTR [edx]
	cvtsi2ss xmm1, eax
	mulss	xmm1, DWORD PTR __real@3c010204
	subss	xmm1, DWORD PTR __real@3f800000
	addss	xmm0, xmm1
	mov	ecx, 4
	imul	edx, ecx, 0
	movss	DWORD PTR _normal$[ebp+edx], xmm0

; 961  : 						normal[1] = MAKE_SIGNED( in[row+1] ) + MAKE_SIGNED( next[row+1] );

	mov	eax, DWORD PTR _in$[ebp]
	add	eax, DWORD PTR _row$[ebp]
	movzx	ecx, BYTE PTR [eax+1]
	cvtsi2ss xmm0, ecx
	mulss	xmm0, DWORD PTR __real@3c010204
	subss	xmm0, DWORD PTR __real@3f800000
	mov	edx, DWORD PTR _next$1[ebp]
	add	edx, DWORD PTR _row$[ebp]
	movzx	eax, BYTE PTR [edx+1]
	cvtsi2ss xmm1, eax
	mulss	xmm1, DWORD PTR __real@3c010204
	subss	xmm1, DWORD PTR __real@3f800000
	addss	xmm0, xmm1
	mov	ecx, 4
	shl	ecx, 0
	movss	DWORD PTR _normal$[ebp+ecx], xmm0

; 962  : 						normal[2] = MAKE_SIGNED( in[row+2] ) + MAKE_SIGNED( next[row+2] );

	mov	edx, DWORD PTR _in$[ebp]
	add	edx, DWORD PTR _row$[ebp]
	movzx	eax, BYTE PTR [edx+2]
	cvtsi2ss xmm0, eax
	mulss	xmm0, DWORD PTR __real@3c010204
	subss	xmm0, DWORD PTR __real@3f800000
	mov	ecx, DWORD PTR _next$1[ebp]
	add	ecx, DWORD PTR _row$[ebp]
	movzx	edx, BYTE PTR [ecx+2]
	cvtsi2ss xmm1, edx
	mulss	xmm1, DWORD PTR __real@3c010204
	subss	xmm1, DWORD PTR __real@3f800000
	addss	xmm0, xmm1
	mov	eax, 4
	shl	eax, 1
	movss	DWORD PTR _normal$[ebp+eax], xmm0
$LN22@GL_BuildMi:

; 963  : 					}
; 964  : 
; 965  : 					if( !VectorNormalizeLength( normal ))

	lea	ecx, DWORD PTR _normal$[ebp]
	push	ecx
	lea	edx, DWORD PTR _normal$[ebp]
	push	edx
	call	_VectorNormalizeLength2
	add	esp, 8
	fstp	DWORD PTR tv588[ebp]
	movss	xmm0, DWORD PTR tv588[ebp]
	ucomiss	xmm0, DWORD PTR __real@00000000
	lahf
	test	ah, 68					; 00000044H
	jp	SHORT $LN23@GL_BuildMi

; 966  : 						VectorSet( normal, 0.5f, 0.5f, 1.0f );

	mov	eax, 4
	imul	ecx, eax, 0
	movss	xmm0, DWORD PTR __real@3f000000
	movss	DWORD PTR _normal$[ebp+ecx], xmm0
	mov	edx, 4
	shl	edx, 0
	movss	xmm0, DWORD PTR __real@3f000000
	movss	DWORD PTR _normal$[ebp+edx], xmm0
	mov	eax, 4
	shl	eax, 1
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR _normal$[ebp+eax], xmm0
$LN23@GL_BuildMi:

; 967  : 
; 968  : 					out[0] = 128 + (byte)(127.0f * normal[0]);

	mov	ecx, 4
	imul	edx, ecx, 0
	movss	xmm0, DWORD PTR __real@42fe0000
	mulss	xmm0, DWORD PTR _normal$[ebp+edx]
	cvttss2si eax, xmm0
	movzx	ecx, al
	add	ecx, 128				; 00000080H
	mov	edx, 1
	imul	eax, edx, 0
	mov	edx, DWORD PTR _out$[ebp]
	mov	BYTE PTR [edx+eax], cl

; 969  : 					out[1] = 128 + (byte)(127.0f * normal[1]);

	mov	eax, 4
	shl	eax, 0
	movss	xmm0, DWORD PTR __real@42fe0000
	mulss	xmm0, DWORD PTR _normal$[ebp+eax]
	cvttss2si ecx, xmm0
	movzx	edx, cl
	add	edx, 128				; 00000080H
	mov	eax, 1
	shl	eax, 0
	mov	ecx, DWORD PTR _out$[ebp]
	mov	BYTE PTR [ecx+eax], dl

; 970  : 					out[2] = 128 + (byte)(127.0f * normal[2]);

	mov	edx, 4
	shl	edx, 1
	movss	xmm0, DWORD PTR __real@42fe0000
	mulss	xmm0, DWORD PTR _normal$[ebp+edx]
	cvttss2si eax, xmm0
	movzx	ecx, al
	add	ecx, 128				; 00000080H
	mov	edx, 1
	shl	edx, 1
	mov	eax, DWORD PTR _out$[ebp]
	mov	BYTE PTR [eax+edx], cl

; 971  : 					out[3] = 255;

	mov	ecx, 1
	imul	edx, ecx, 3
	mov	eax, DWORD PTR _out$[ebp]
	mov	BYTE PTR [eax+edx], 255			; 000000ffH

; 972  : 				}

	jmp	$LN8@GL_BuildMi
$LN9@GL_BuildMi:

; 973  : 			}

	jmp	$LN5@GL_BuildMi
$LN6@GL_BuildMi:

; 974  : 		}

	jmp	$LN12@GL_BuildMi
$LN19@GL_BuildMi:

; 975  : 		else
; 976  : 		{
; 977  : 			for( y = 0; y < mipHeight; y++, in += instride * 2, out += outpadding )

	mov	DWORD PTR _y$[ebp], 0
	jmp	SHORT $LN13@GL_BuildMi
$LN11@GL_BuildMi:
	mov	ecx, DWORD PTR _y$[ebp]
	add	ecx, 1
	mov	DWORD PTR _y$[ebp], ecx
	mov	edx, DWORD PTR _instride$[ebp]
	mov	eax, DWORD PTR _in$[ebp]
	lea	ecx, DWORD PTR [eax+edx*2]
	mov	DWORD PTR _in$[ebp], ecx
	mov	edx, DWORD PTR _out$[ebp]
	add	edx, DWORD PTR _outpadding$[ebp]
	mov	DWORD PTR _out$[ebp], edx
$LN13@GL_BuildMi:
	mov	eax, DWORD PTR _y$[ebp]
	cmp	eax, DWORD PTR _mipHeight$[ebp]
	jge	$LN12@GL_BuildMi

; 978  : 			{
; 979  : 				byte *next = ((( y << 1 ) + 1 ) < srcHeight ) ? ( in + instride ) : in;

	mov	ecx, DWORD PTR _y$[ebp]
	lea	edx, DWORD PTR [ecx+ecx+1]
	cmp	edx, DWORD PTR _srcHeight$[ebp]
	jge	SHORT $LN33@GL_BuildMi
	mov	eax, DWORD PTR _in$[ebp]
	add	eax, DWORD PTR _instride$[ebp]
	mov	DWORD PTR tv375[ebp], eax
	jmp	SHORT $LN34@GL_BuildMi
$LN33@GL_BuildMi:
	mov	ecx, DWORD PTR _in$[ebp]
	mov	DWORD PTR tv375[ebp], ecx
$LN34@GL_BuildMi:
	mov	edx, DWORD PTR tv375[ebp]
	mov	DWORD PTR _next$2[ebp], edx

; 980  : 				for( x = 0, row = 0; x < mipWidth; x++, row += 8, out += 4 )

	mov	DWORD PTR _x$[ebp], 0
	mov	DWORD PTR _row$[ebp], 0
	jmp	SHORT $LN16@GL_BuildMi
$LN14@GL_BuildMi:
	mov	eax, DWORD PTR _x$[ebp]
	add	eax, 1
	mov	DWORD PTR _x$[ebp], eax
	mov	ecx, DWORD PTR _row$[ebp]
	add	ecx, 8
	mov	DWORD PTR _row$[ebp], ecx
	mov	edx, DWORD PTR _out$[ebp]
	add	edx, 4
	mov	DWORD PTR _out$[ebp], edx
$LN16@GL_BuildMi:
	mov	eax, DWORD PTR _x$[ebp]
	cmp	eax, DWORD PTR _mipWidth$[ebp]
	jge	$LN15@GL_BuildMi

; 981  : 				{
; 982  : 					if((( x << 1 ) + 1 ) < srcWidth )

	mov	ecx, DWORD PTR _x$[ebp]
	lea	edx, DWORD PTR [ecx+ecx+1]
	cmp	edx, DWORD PTR _srcWidth$[ebp]
	jge	$LN24@GL_BuildMi

; 983  : 					{
; 984  : 						out[0] = (in[row+0] + in[row+4] + next[row+0] + next[row+4]) >> 2;

	mov	eax, DWORD PTR _in$[ebp]
	add	eax, DWORD PTR _row$[ebp]
	movzx	ecx, BYTE PTR [eax]
	mov	edx, DWORD PTR _in$[ebp]
	add	edx, DWORD PTR _row$[ebp]
	movzx	eax, BYTE PTR [edx+4]
	add	ecx, eax
	mov	edx, DWORD PTR _next$2[ebp]
	add	edx, DWORD PTR _row$[ebp]
	movzx	eax, BYTE PTR [edx]
	add	ecx, eax
	mov	edx, DWORD PTR _next$2[ebp]
	add	edx, DWORD PTR _row$[ebp]
	movzx	eax, BYTE PTR [edx+4]
	add	ecx, eax
	sar	ecx, 2
	mov	edx, 1
	imul	eax, edx, 0
	mov	edx, DWORD PTR _out$[ebp]
	mov	BYTE PTR [edx+eax], cl

; 985  : 						out[1] = (in[row+1] + in[row+5] + next[row+1] + next[row+5]) >> 2;

	mov	eax, DWORD PTR _in$[ebp]
	add	eax, DWORD PTR _row$[ebp]
	movzx	ecx, BYTE PTR [eax+1]
	mov	edx, DWORD PTR _in$[ebp]
	add	edx, DWORD PTR _row$[ebp]
	movzx	eax, BYTE PTR [edx+5]
	add	ecx, eax
	mov	edx, DWORD PTR _next$2[ebp]
	add	edx, DWORD PTR _row$[ebp]
	movzx	eax, BYTE PTR [edx+1]
	add	ecx, eax
	mov	edx, DWORD PTR _next$2[ebp]
	add	edx, DWORD PTR _row$[ebp]
	movzx	eax, BYTE PTR [edx+5]
	add	ecx, eax
	sar	ecx, 2
	mov	edx, 1
	shl	edx, 0
	mov	eax, DWORD PTR _out$[ebp]
	mov	BYTE PTR [eax+edx], cl

; 986  : 						out[2] = (in[row+2] + in[row+6] + next[row+2] + next[row+6]) >> 2;

	mov	ecx, DWORD PTR _in$[ebp]
	add	ecx, DWORD PTR _row$[ebp]
	movzx	edx, BYTE PTR [ecx+2]
	mov	eax, DWORD PTR _in$[ebp]
	add	eax, DWORD PTR _row$[ebp]
	movzx	ecx, BYTE PTR [eax+6]
	add	edx, ecx
	mov	eax, DWORD PTR _next$2[ebp]
	add	eax, DWORD PTR _row$[ebp]
	movzx	ecx, BYTE PTR [eax+2]
	add	edx, ecx
	mov	eax, DWORD PTR _next$2[ebp]
	add	eax, DWORD PTR _row$[ebp]
	movzx	ecx, BYTE PTR [eax+6]
	add	edx, ecx
	sar	edx, 2
	mov	eax, 1
	shl	eax, 1
	mov	ecx, DWORD PTR _out$[ebp]
	mov	BYTE PTR [ecx+eax], dl

; 987  : 						out[3] = (in[row+3] + in[row+7] + next[row+3] + next[row+7]) >> 2;

	mov	edx, DWORD PTR _in$[ebp]
	add	edx, DWORD PTR _row$[ebp]
	movzx	eax, BYTE PTR [edx+3]
	mov	ecx, DWORD PTR _in$[ebp]
	add	ecx, DWORD PTR _row$[ebp]
	movzx	edx, BYTE PTR [ecx+7]
	add	eax, edx
	mov	ecx, DWORD PTR _next$2[ebp]
	add	ecx, DWORD PTR _row$[ebp]
	movzx	edx, BYTE PTR [ecx+3]
	add	eax, edx
	mov	ecx, DWORD PTR _next$2[ebp]
	add	ecx, DWORD PTR _row$[ebp]
	movzx	edx, BYTE PTR [ecx+7]
	add	eax, edx
	sar	eax, 2
	mov	ecx, 1
	imul	edx, ecx, 3
	mov	ecx, DWORD PTR _out$[ebp]
	mov	BYTE PTR [ecx+edx], al

; 988  : 					}

	jmp	$LN25@GL_BuildMi
$LN24@GL_BuildMi:

; 989  : 					else
; 990  : 					{
; 991  : 						out[0] = (in[row+0] + next[row+0]) >> 1;

	mov	edx, DWORD PTR _in$[ebp]
	add	edx, DWORD PTR _row$[ebp]
	movzx	eax, BYTE PTR [edx]
	mov	ecx, DWORD PTR _next$2[ebp]
	add	ecx, DWORD PTR _row$[ebp]
	movzx	edx, BYTE PTR [ecx]
	add	eax, edx
	sar	eax, 1
	mov	ecx, 1
	imul	edx, ecx, 0
	mov	ecx, DWORD PTR _out$[ebp]
	mov	BYTE PTR [ecx+edx], al

; 992  : 						out[1] = (in[row+1] + next[row+1]) >> 1;

	mov	edx, DWORD PTR _in$[ebp]
	add	edx, DWORD PTR _row$[ebp]
	movzx	eax, BYTE PTR [edx+1]
	mov	ecx, DWORD PTR _next$2[ebp]
	add	ecx, DWORD PTR _row$[ebp]
	movzx	edx, BYTE PTR [ecx+1]
	add	eax, edx
	sar	eax, 1
	mov	ecx, 1
	shl	ecx, 0
	mov	edx, DWORD PTR _out$[ebp]
	mov	BYTE PTR [edx+ecx], al

; 993  : 						out[2] = (in[row+2] + next[row+2]) >> 1;

	mov	eax, DWORD PTR _in$[ebp]
	add	eax, DWORD PTR _row$[ebp]
	movzx	ecx, BYTE PTR [eax+2]
	mov	edx, DWORD PTR _next$2[ebp]
	add	edx, DWORD PTR _row$[ebp]
	movzx	eax, BYTE PTR [edx+2]
	add	ecx, eax
	sar	ecx, 1
	mov	edx, 1
	shl	edx, 1
	mov	eax, DWORD PTR _out$[ebp]
	mov	BYTE PTR [eax+edx], cl

; 994  : 						out[3] = (in[row+3] + next[row+3]) >> 1;

	mov	ecx, DWORD PTR _in$[ebp]
	add	ecx, DWORD PTR _row$[ebp]
	movzx	edx, BYTE PTR [ecx+3]
	mov	eax, DWORD PTR _next$2[ebp]
	add	eax, DWORD PTR _row$[ebp]
	movzx	ecx, BYTE PTR [eax+3]
	add	edx, ecx
	sar	edx, 1
	mov	eax, 1
	imul	ecx, eax, 3
	mov	eax, DWORD PTR _out$[ebp]
	mov	BYTE PTR [eax+ecx], dl
$LN25@GL_BuildMi:

; 995  : 					}
; 996  : 				}

	jmp	$LN14@GL_BuildMi
$LN15@GL_BuildMi:

; 997  : 			}

	jmp	$LN11@GL_BuildMi
$LN12@GL_BuildMi:

; 998  : 		}
; 999  : 	}

	jmp	$LN2@GL_BuildMi
$LN3@GL_BuildMi:

; 1000 : }

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_GL_BuildMipMap ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xash_build4529_src\engine\client\gl_image.c
_TEXT	SEGMENT
_out$ = -12						; size = 4
_i$ = -8						; size = 4
_in$ = -4						; size = 4
_source$ = 8						; size = 4
_width$ = 12						; size = 4
_height$ = 16						; size = 4
_GL_ApplyFilter PROC

; 894  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH

; 895  : 	byte	*in = (byte *)source;

	mov	eax, DWORD PTR _source$[ebp]
	mov	DWORD PTR _in$[ebp], eax

; 896  : 	byte	*out = (byte *)source;

	mov	ecx, DWORD PTR _source$[ebp]
	mov	DWORD PTR _out$[ebp], ecx

; 897  : 	int	i;
; 898  : 
; 899  : 	if( CL_IsQuakeCompatible() || glConfig.max_multisamples > 1 )

	call	_CL_IsQuakeCompatible
	test	eax, eax
	jne	SHORT $LN6@GL_ApplyFi
	cmp	DWORD PTR _glConfig+96, 1
	jle	SHORT $LN5@GL_ApplyFi
$LN6@GL_ApplyFi:

; 900  : 		return in;

	mov	eax, DWORD PTR _in$[ebp]
	jmp	$LN1@GL_ApplyFi
$LN5@GL_ApplyFi:

; 901  : 
; 902  : 	for( i = 0; source && i < width * height; i++, in += 4 )

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN4@GL_ApplyFi
$LN2@GL_ApplyFi:
	mov	edx, DWORD PTR _i$[ebp]
	add	edx, 1
	mov	DWORD PTR _i$[ebp], edx
	mov	eax, DWORD PTR _in$[ebp]
	add	eax, 4
	mov	DWORD PTR _in$[ebp], eax
$LN4@GL_ApplyFi:
	cmp	DWORD PTR _source$[ebp], 0
	je	$LN3@GL_ApplyFi
	mov	ecx, DWORD PTR _width$[ebp]
	imul	ecx, DWORD PTR _height$[ebp]
	cmp	DWORD PTR _i$[ebp], ecx
	jge	SHORT $LN3@GL_ApplyFi

; 903  : 	{
; 904  : 		if( in[0] == 0 && in[1] == 0 && in[2] == 0 && in[3] == 0 )

	mov	edx, 1
	imul	eax, edx, 0
	mov	ecx, DWORD PTR _in$[ebp]
	movzx	edx, BYTE PTR [ecx+eax]
	test	edx, edx
	jne	SHORT $LN7@GL_ApplyFi
	mov	eax, 1
	shl	eax, 0
	mov	ecx, DWORD PTR _in$[ebp]
	movzx	edx, BYTE PTR [ecx+eax]
	test	edx, edx
	jne	SHORT $LN7@GL_ApplyFi
	mov	eax, 1
	shl	eax, 1
	mov	ecx, DWORD PTR _in$[ebp]
	movzx	edx, BYTE PTR [ecx+eax]
	test	edx, edx
	jne	SHORT $LN7@GL_ApplyFi
	mov	eax, 1
	imul	ecx, eax, 3
	mov	edx, DWORD PTR _in$[ebp]
	movzx	eax, BYTE PTR [edx+ecx]
	test	eax, eax
	jne	SHORT $LN7@GL_ApplyFi

; 905  : 			GL_BoxFilter3x3( in, source, width, height, i % width, i / width );

	mov	eax, DWORD PTR _i$[ebp]
	cdq
	idiv	DWORD PTR _width$[ebp]
	push	eax
	mov	eax, DWORD PTR _i$[ebp]
	cdq
	idiv	DWORD PTR _width$[ebp]
	push	edx
	mov	ecx, DWORD PTR _height$[ebp]
	push	ecx
	mov	edx, DWORD PTR _width$[ebp]
	push	edx
	mov	eax, DWORD PTR _source$[ebp]
	push	eax
	mov	ecx, DWORD PTR _in$[ebp]
	push	ecx
	call	_GL_BoxFilter3x3
	add	esp, 24					; 00000018H
$LN7@GL_ApplyFi:

; 906  : 	}

	jmp	$LN2@GL_ApplyFi
$LN3@GL_ApplyFi:

; 907  : 
; 908  : 	return out;

	mov	eax, DWORD PTR _out$[ebp]
$LN1@GL_ApplyFi:

; 909  : }

	mov	esp, ebp
	pop	ebp
	ret	0
_GL_ApplyFilter ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xash_build4529_src\engine\client\gl_image.c
_TEXT	SEGMENT
_count$ = -44						; size = 4
_a$ = -40						; size = 4
_b$ = -36						; size = 4
_g$ = -32						; size = 4
_r$ = -28						; size = 4
_u$ = -24						; size = 4
_v$ = -20						; size = 4
_j$ = -16						; size = 4
_i$ = -12						; size = 4
_pixel$ = -8						; size = 4
_acount$ = -4						; size = 4
_out$ = 8						; size = 4
_in$ = 12						; size = 4
_w$ = 16						; size = 4
_h$ = 20						; size = 4
_x$ = 24						; size = 4
_y$ = 28						; size = 4
_GL_BoxFilter3x3 PROC

; 847  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 44					; 0000002cH

; 848  : 	int		r = 0, g = 0, b = 0, a = 0;

	mov	DWORD PTR _r$[ebp], 0
	mov	DWORD PTR _g$[ebp], 0
	mov	DWORD PTR _b$[ebp], 0
	mov	DWORD PTR _a$[ebp], 0

; 849  : 	int		count = 0, acount = 0;

	mov	DWORD PTR _count$[ebp], 0
	mov	DWORD PTR _acount$[ebp], 0

; 850  : 	int		i, j, u, v;
; 851  : 	const byte	*pixel;
; 852  : 
; 853  : 	for( i = 0; i < 3; i++ )

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN4@GL_BoxFilt
$LN2@GL_BoxFilt:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN4@GL_BoxFilt:
	cmp	DWORD PTR _i$[ebp], 3
	jge	$LN3@GL_BoxFilt

; 854  : 	{
; 855  : 		u = ( i - 1 ) + x;

	mov	ecx, DWORD PTR _x$[ebp]
	mov	edx, DWORD PTR _i$[ebp]
	lea	eax, DWORD PTR [edx+ecx-1]
	mov	DWORD PTR _u$[ebp], eax

; 856  : 
; 857  : 		for( j = 0; j < 3; j++ )

	mov	DWORD PTR _j$[ebp], 0
	jmp	SHORT $LN7@GL_BoxFilt
$LN5@GL_BoxFilt:
	mov	ecx, DWORD PTR _j$[ebp]
	add	ecx, 1
	mov	DWORD PTR _j$[ebp], ecx
$LN7@GL_BoxFilt:
	cmp	DWORD PTR _j$[ebp], 3
	jge	$LN6@GL_BoxFilt

; 858  : 		{
; 859  : 			v = ( j - 1 ) + y;

	mov	edx, DWORD PTR _y$[ebp]
	mov	eax, DWORD PTR _j$[ebp]
	lea	ecx, DWORD PTR [eax+edx-1]
	mov	DWORD PTR _v$[ebp], ecx

; 860  : 
; 861  : 			if( u >= 0 && u < w && v >= 0 && v < h )

	cmp	DWORD PTR _u$[ebp], 0
	jl	$LN8@GL_BoxFilt
	mov	edx, DWORD PTR _u$[ebp]
	cmp	edx, DWORD PTR _w$[ebp]
	jge	$LN8@GL_BoxFilt
	cmp	DWORD PTR _v$[ebp], 0
	jl	$LN8@GL_BoxFilt
	mov	eax, DWORD PTR _v$[ebp]
	cmp	eax, DWORD PTR _h$[ebp]
	jge	$LN8@GL_BoxFilt

; 862  : 			{
; 863  : 				pixel = &in[( u + v * w ) * 4];

	mov	ecx, DWORD PTR _v$[ebp]
	imul	ecx, DWORD PTR _w$[ebp]
	add	ecx, DWORD PTR _u$[ebp]
	mov	edx, DWORD PTR _in$[ebp]
	lea	eax, DWORD PTR [edx+ecx*4]
	mov	DWORD PTR _pixel$[ebp], eax

; 864  : 
; 865  : 				if( pixel[3] != 0 )

	mov	ecx, 1
	imul	edx, ecx, 3
	mov	eax, DWORD PTR _pixel$[ebp]
	movzx	ecx, BYTE PTR [eax+edx]
	test	ecx, ecx
	je	SHORT $LN8@GL_BoxFilt

; 866  : 				{
; 867  : 					r += pixel[0];

	mov	edx, 1
	imul	eax, edx, 0
	mov	ecx, DWORD PTR _pixel$[ebp]
	movzx	edx, BYTE PTR [ecx+eax]
	add	edx, DWORD PTR _r$[ebp]
	mov	DWORD PTR _r$[ebp], edx

; 868  : 					g += pixel[1];

	mov	eax, 1
	shl	eax, 0
	mov	ecx, DWORD PTR _pixel$[ebp]
	movzx	edx, BYTE PTR [ecx+eax]
	add	edx, DWORD PTR _g$[ebp]
	mov	DWORD PTR _g$[ebp], edx

; 869  : 					b += pixel[2];

	mov	eax, 1
	shl	eax, 1
	mov	ecx, DWORD PTR _pixel$[ebp]
	movzx	edx, BYTE PTR [ecx+eax]
	add	edx, DWORD PTR _b$[ebp]
	mov	DWORD PTR _b$[ebp], edx

; 870  : 					a += pixel[3];

	mov	eax, 1
	imul	ecx, eax, 3
	mov	edx, DWORD PTR _pixel$[ebp]
	movzx	eax, BYTE PTR [edx+ecx]
	add	eax, DWORD PTR _a$[ebp]
	mov	DWORD PTR _a$[ebp], eax

; 871  : 					acount++;

	mov	ecx, DWORD PTR _acount$[ebp]
	add	ecx, 1
	mov	DWORD PTR _acount$[ebp], ecx
$LN8@GL_BoxFilt:

; 872  : 				}
; 873  : 			}
; 874  : 		}

	jmp	$LN5@GL_BoxFilt
$LN6@GL_BoxFilt:

; 875  : 	}

	jmp	$LN2@GL_BoxFilt
$LN3@GL_BoxFilt:

; 876  : 
; 877  : 	if(  acount == 0 )

	cmp	DWORD PTR _acount$[ebp], 0
	jne	SHORT $LN10@GL_BoxFilt

; 878  : 		acount = 1;

	mov	DWORD PTR _acount$[ebp], 1
$LN10@GL_BoxFilt:

; 879  : 
; 880  : 	out[0] = r / acount;

	mov	eax, DWORD PTR _r$[ebp]
	cdq
	idiv	DWORD PTR _acount$[ebp]
	mov	edx, 1
	imul	ecx, edx, 0
	mov	edx, DWORD PTR _out$[ebp]
	mov	BYTE PTR [edx+ecx], al

; 881  : 	out[1] = g / acount;

	mov	eax, DWORD PTR _g$[ebp]
	cdq
	idiv	DWORD PTR _acount$[ebp]
	mov	ecx, 1
	shl	ecx, 0
	mov	edx, DWORD PTR _out$[ebp]
	mov	BYTE PTR [edx+ecx], al

; 882  : 	out[2] = b / acount;

	mov	eax, DWORD PTR _b$[ebp]
	cdq
	idiv	DWORD PTR _acount$[ebp]
	mov	ecx, 1
	shl	ecx, 1
	mov	edx, DWORD PTR _out$[ebp]
	mov	BYTE PTR [edx+ecx], al

; 883  : //	out[3] = (int)( SimpleSpline( ( a / 12.0f ) / 255.0f ) * 255 );
; 884  : }

	mov	esp, ebp
	pop	ebp
	ret	0
_GL_BoxFilter3x3 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xash_build4529_src\engine\client\gl_image.c
_TEXT	SEGMENT
tv182 = -32						; size = 4
_bits$1 = -28						; size = 4
tv176 = -24						; size = 4
_haveAlpha$ = -20					; size = 4
_haveColor$ = -16					; size = 4
tv71 = -12						; size = 4
tv169 = -8						; size = 4
tv77 = -4						; size = 4
_tex$ = 8						; size = 4
_format$ = 12						; size = 4
_channelMask$ = 16					; size = 4
_GL_SetTextureFormat PROC

; 658  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 32					; 00000020H

; 659  : 	qboolean	haveColor = ( channelMask & IMAGE_HAS_COLOR );

	mov	eax, DWORD PTR _channelMask$[ebp]
	and	eax, 4
	mov	DWORD PTR _haveColor$[ebp], eax

; 660  : 	qboolean	haveAlpha = ( channelMask & IMAGE_HAS_ALPHA );

	mov	ecx, DWORD PTR _channelMask$[ebp]
	and	ecx, 2
	mov	DWORD PTR _haveAlpha$[ebp], ecx

; 661  : 
; 662  : 	Assert( tex != NULL );

	cmp	DWORD PTR _tex$[ebp], 0
	je	SHORT $LN58@GL_SetText
	mov	DWORD PTR tv71[ebp], 1
	jmp	SHORT $LN59@GL_SetText
$LN58@GL_SetText:
	mov	DWORD PTR tv71[ebp], 0
$LN59@GL_SetText:
	push	0
	push	662					; 00000296H
	push	OFFSET $SG143621
	push	OFFSET $SG143622
	mov	edx, DWORD PTR tv71[ebp]
	push	edx
	call	_DBG_AssertFunction
	add	esp, 20					; 00000014H

; 663  : 
; 664  : 	if( ImageDXT( format ))

	cmp	DWORD PTR _format$[ebp], 8
	je	SHORT $LN12@GL_SetText
	cmp	DWORD PTR _format$[ebp], 9
	je	SHORT $LN12@GL_SetText
	cmp	DWORD PTR _format$[ebp], 10		; 0000000aH
	je	SHORT $LN12@GL_SetText
	cmp	DWORD PTR _format$[ebp], 11		; 0000000bH
	jne	SHORT $LN10@GL_SetText
$LN12@GL_SetText:

; 665  : 	{
; 666  : 		switch( format )

	mov	eax, DWORD PTR _format$[ebp]
	mov	DWORD PTR tv77[ebp], eax
	mov	ecx, DWORD PTR tv77[ebp]
	sub	ecx, 8
	mov	DWORD PTR tv77[ebp], ecx
	cmp	DWORD PTR tv77[ebp], 3
	ja	SHORT $LN2@GL_SetText
	mov	edx, DWORD PTR tv77[ebp]
	jmp	DWORD PTR $LN60@GL_SetText[edx*4]
$LN13@GL_SetText:

; 667  : 		{
; 668  : 		case PF_DXT1: tex->format = GL_COMPRESSED_RGB_S3TC_DXT1_EXT; break;	// never use DXT1 with 1-bit alpha

	mov	eax, DWORD PTR _tex$[ebp]
	mov	DWORD PTR [eax+276], 33776		; 000083f0H
	jmp	SHORT $LN2@GL_SetText
$LN14@GL_SetText:

; 669  : 		case PF_DXT3: tex->format = GL_COMPRESSED_RGBA_S3TC_DXT3_EXT; break;

	mov	ecx, DWORD PTR _tex$[ebp]
	mov	DWORD PTR [ecx+276], 33778		; 000083f2H
	jmp	SHORT $LN2@GL_SetText
$LN15@GL_SetText:

; 670  : 		case PF_DXT5: tex->format = GL_COMPRESSED_RGBA_S3TC_DXT5_EXT; break;

	mov	edx, DWORD PTR _tex$[ebp]
	mov	DWORD PTR [edx+276], 33779		; 000083f3H
	jmp	SHORT $LN2@GL_SetText
$LN16@GL_SetText:

; 671  : 		case PF_ATI2:
; 672  : 			if( glConfig.hardware_type == GLHW_RADEON )

	cmp	DWORD PTR _glConfig+12, 1
	jne	SHORT $LN17@GL_SetText

; 673  : 				tex->format = GL_COMPRESSED_LUMINANCE_ALPHA_3DC_ATI;

	mov	eax, DWORD PTR _tex$[ebp]
	mov	DWORD PTR [eax+276], 34871		; 00008837H
	jmp	SHORT $LN2@GL_SetText
$LN17@GL_SetText:

; 674  : 			else tex->format = GL_COMPRESSED_RED_GREEN_RGTC2_EXT;

	mov	ecx, DWORD PTR _tex$[ebp]
	mov	DWORD PTR [ecx+276], 36285		; 00008dbdH
$LN2@GL_SetText:

; 675  : 			break;
; 676  : 		}
; 677  : 		return;

	jmp	$LN1@GL_SetText

; 678  : 	}

	jmp	$LN1@GL_SetText
$LN10@GL_SetText:

; 679  : 	else if( FBitSet( tex->flags, TF_DEPTHMAP ))

	mov	edx, DWORD PTR _tex$[ebp]
	mov	eax, DWORD PTR [edx+284]
	and	eax, 128				; 00000080H
	je	SHORT $LN19@GL_SetText

; 680  : 	{
; 681  : 		if( FBitSet( tex->flags, TF_ARB_16BIT ))

	mov	ecx, DWORD PTR _tex$[ebp]
	mov	edx, DWORD PTR [ecx+284]
	and	edx, 268435456				; 10000000H
	je	SHORT $LN21@GL_SetText

; 682  : 			tex->format = GL_DEPTH_COMPONENT16;

	mov	eax, DWORD PTR _tex$[ebp]
	mov	DWORD PTR [eax+276], 33189		; 000081a5H
	jmp	SHORT $LN22@GL_SetText
$LN21@GL_SetText:

; 683  : 		else if( FBitSet( tex->flags, TF_ARB_FLOAT ) && GL_Support( GL_ARB_DEPTH_FLOAT_EXT ))

	mov	ecx, DWORD PTR _tex$[ebp]
	mov	edx, DWORD PTR [ecx+284]
	and	edx, 67108864				; 04000000H
	je	SHORT $LN23@GL_SetText
	push	17					; 00000011H
	call	_GL_Support
	add	esp, 4
	test	eax, eax
	je	SHORT $LN23@GL_SetText

; 684  : 			tex->format = GL_DEPTH_COMPONENT32F;

	mov	eax, DWORD PTR _tex$[ebp]
	mov	DWORD PTR [eax+276], 36012		; 00008cacH
	jmp	SHORT $LN22@GL_SetText
$LN23@GL_SetText:

; 685  : 		else tex->format = GL_DEPTH_COMPONENT24;

	mov	ecx, DWORD PTR _tex$[ebp]
	mov	DWORD PTR [ecx+276], 33190		; 000081a6H
$LN22@GL_SetText:

; 686  : 	}

	jmp	$LN1@GL_SetText
$LN19@GL_SetText:

; 687  : 	else if( FBitSet( tex->flags, TF_ARB_FLOAT|TF_ARB_16BIT ) && GL_Support( GL_ARB_TEXTURE_FLOAT_EXT ))

	mov	edx, DWORD PTR _tex$[ebp]
	mov	eax, DWORD PTR [edx+284]
	and	eax, 335544320				; 14000000H
	je	$LN25@GL_SetText
	push	16					; 00000010H
	call	_GL_Support
	add	esp, 4
	test	eax, eax
	je	$LN25@GL_SetText

; 688  : 	{
; 689  : 		if( haveColor && haveAlpha )

	cmp	DWORD PTR _haveColor$[ebp], 0
	je	SHORT $LN27@GL_SetText
	cmp	DWORD PTR _haveAlpha$[ebp], 0
	je	SHORT $LN27@GL_SetText

; 690  : 		{
; 691  : 			if( FBitSet( tex->flags, TF_ARB_16BIT ) || glw_state.desktopBitsPixel == 16 )

	mov	ecx, DWORD PTR _tex$[ebp]
	mov	edx, DWORD PTR [ecx+284]
	and	edx, 268435456				; 10000000H
	jne	SHORT $LN31@GL_SetText
	cmp	DWORD PTR _glw_state+8, 16		; 00000010H
	jne	SHORT $LN29@GL_SetText
$LN31@GL_SetText:

; 692  : 				tex->format = GL_RGBA16F_ARB;

	mov	eax, DWORD PTR _tex$[ebp]
	mov	DWORD PTR [eax+276], 34842		; 0000881aH
	jmp	SHORT $LN30@GL_SetText
$LN29@GL_SetText:

; 693  : 			else tex->format = GL_RGBA32F_ARB;

	mov	ecx, DWORD PTR _tex$[ebp]
	mov	DWORD PTR [ecx+276], 34836		; 00008814H
$LN30@GL_SetText:

; 694  : 		}

	jmp	$LN28@GL_SetText
$LN27@GL_SetText:

; 695  : 		else if( haveColor )

	cmp	DWORD PTR _haveColor$[ebp], 0
	je	SHORT $LN32@GL_SetText

; 696  : 		{
; 697  : 			if( FBitSet( tex->flags, TF_ARB_16BIT ) || glw_state.desktopBitsPixel == 16 )

	mov	edx, DWORD PTR _tex$[ebp]
	mov	eax, DWORD PTR [edx+284]
	and	eax, 268435456				; 10000000H
	jne	SHORT $LN36@GL_SetText
	cmp	DWORD PTR _glw_state+8, 16		; 00000010H
	jne	SHORT $LN34@GL_SetText
$LN36@GL_SetText:

; 698  : 				tex->format = GL_RGB16F_ARB;

	mov	ecx, DWORD PTR _tex$[ebp]
	mov	DWORD PTR [ecx+276], 34843		; 0000881bH
	jmp	SHORT $LN35@GL_SetText
$LN34@GL_SetText:

; 699  : 			else tex->format = GL_RGB32F_ARB;

	mov	edx, DWORD PTR _tex$[ebp]
	mov	DWORD PTR [edx+276], 34837		; 00008815H
$LN35@GL_SetText:

; 700  : 		}

	jmp	SHORT $LN28@GL_SetText
$LN32@GL_SetText:

; 701  : 		else if( haveAlpha )

	cmp	DWORD PTR _haveAlpha$[ebp], 0
	je	SHORT $LN37@GL_SetText

; 702  : 		{
; 703  : 			if( FBitSet( tex->flags, TF_ARB_16BIT ) || glw_state.desktopBitsPixel == 16 )

	mov	eax, DWORD PTR _tex$[ebp]
	mov	ecx, DWORD PTR [eax+284]
	and	ecx, 268435456				; 10000000H
	jne	SHORT $LN41@GL_SetText
	cmp	DWORD PTR _glw_state+8, 16		; 00000010H
	jne	SHORT $LN39@GL_SetText
$LN41@GL_SetText:

; 704  : 				tex->format = GL_RG16F;

	mov	edx, DWORD PTR _tex$[ebp]
	mov	DWORD PTR [edx+276], 33327		; 0000822fH
	jmp	SHORT $LN40@GL_SetText
$LN39@GL_SetText:

; 705  : 			else tex->format = GL_RG32F;

	mov	eax, DWORD PTR _tex$[ebp]
	mov	DWORD PTR [eax+276], 33328		; 00008230H
$LN40@GL_SetText:

; 706  : 		}

	jmp	SHORT $LN28@GL_SetText
$LN37@GL_SetText:

; 707  : 		else
; 708  : 		{
; 709  : 			if( FBitSet( tex->flags, TF_ARB_16BIT ) || glw_state.desktopBitsPixel == 16 )

	mov	ecx, DWORD PTR _tex$[ebp]
	mov	edx, DWORD PTR [ecx+284]
	and	edx, 268435456				; 10000000H
	jne	SHORT $LN44@GL_SetText
	cmp	DWORD PTR _glw_state+8, 16		; 00000010H
	jne	SHORT $LN42@GL_SetText
$LN44@GL_SetText:

; 710  : 				tex->format = GL_LUMINANCE16F_ARB;

	mov	eax, DWORD PTR _tex$[ebp]
	mov	DWORD PTR [eax+276], 34846		; 0000881eH
	jmp	SHORT $LN28@GL_SetText
$LN42@GL_SetText:

; 711  : 			else tex->format = GL_LUMINANCE32F_ARB;

	mov	ecx, DWORD PTR _tex$[ebp]
	mov	DWORD PTR [ecx+276], 34840		; 00008818H
$LN28@GL_SetText:

; 712  : 		}
; 713  : 	}

	jmp	$LN1@GL_SetText
$LN25@GL_SetText:

; 714  : 	else
; 715  : 	{
; 716  : 		// NOTE: not all the types will be compressed
; 717  : 		int	bits = glw_state.desktopBitsPixel;

	mov	edx, DWORD PTR _glw_state+8
	mov	DWORD PTR _bits$1[ebp], edx

; 718  : 
; 719  : 		switch( GL_CalcTextureSamples( channelMask ))

	mov	eax, DWORD PTR _channelMask$[ebp]
	push	eax
	call	_GL_CalcTextureSamples
	add	esp, 4
	mov	DWORD PTR tv169[ebp], eax
	cmp	DWORD PTR tv169[ebp], 1
	je	SHORT $LN45@GL_SetText
	cmp	DWORD PTR tv169[ebp], 2
	je	SHORT $LN48@GL_SetText
	cmp	DWORD PTR tv169[ebp], 3
	je	SHORT $LN49@GL_SetText
	jmp	$LN53@GL_SetText
$LN45@GL_SetText:

; 720  : 		{
; 721  : 		case 1: 
; 722  : 			if( FBitSet( tex->flags, TF_ALPHACONTRAST ))

	mov	ecx, DWORD PTR _tex$[ebp]
	mov	edx, DWORD PTR [ecx+284]
	and	edx, 4194304				; 00400000H
	je	SHORT $LN46@GL_SetText

; 723  : 				tex->format = GL_INTENSITY8;

	mov	eax, DWORD PTR _tex$[ebp]
	mov	DWORD PTR [eax+276], 32843		; 0000804bH
	jmp	SHORT $LN47@GL_SetText
$LN46@GL_SetText:

; 724  : 			else tex->format = GL_LUMINANCE8;

	mov	ecx, DWORD PTR _tex$[ebp]
	mov	DWORD PTR [ecx+276], 32832		; 00008040H
$LN47@GL_SetText:

; 725  : 			break;

	jmp	$LN1@GL_SetText
$LN48@GL_SetText:

; 726  : 		case 2: tex->format = GL_LUMINANCE8_ALPHA8; break;

	mov	edx, DWORD PTR _tex$[ebp]
	mov	DWORD PTR [edx+276], 32837		; 00008045H
	jmp	$LN1@GL_SetText
$LN49@GL_SetText:

; 727  : 		case 3:
; 728  : 			switch( bits )

	mov	eax, DWORD PTR _bits$1[ebp]
	mov	DWORD PTR tv176[ebp], eax
	cmp	DWORD PTR tv176[ebp], 16		; 00000010H
	je	SHORT $LN50@GL_SetText
	cmp	DWORD PTR tv176[ebp], 32		; 00000020H
	je	SHORT $LN51@GL_SetText
	jmp	SHORT $LN52@GL_SetText
$LN50@GL_SetText:

; 729  : 			{
; 730  : 			case 16: tex->format = GL_RGB5; break;

	mov	ecx, DWORD PTR _tex$[ebp]
	mov	DWORD PTR [ecx+276], 32848		; 00008050H
	jmp	SHORT $LN6@GL_SetText
$LN51@GL_SetText:

; 731  : 			case 32: tex->format = GL_RGB8; break;

	mov	edx, DWORD PTR _tex$[ebp]
	mov	DWORD PTR [edx+276], 32849		; 00008051H
	jmp	SHORT $LN6@GL_SetText
$LN52@GL_SetText:

; 732  : 			default: tex->format = GL_RGB; break;

	mov	eax, DWORD PTR _tex$[ebp]
	mov	DWORD PTR [eax+276], 6407		; 00001907H
$LN6@GL_SetText:

; 733  : 			}
; 734  : 			break;	

	jmp	SHORT $LN1@GL_SetText
$LN53@GL_SetText:

; 735  : 		case 4:
; 736  : 		default:
; 737  : 			switch( bits )

	mov	ecx, DWORD PTR _bits$1[ebp]
	mov	DWORD PTR tv182[ebp], ecx
	cmp	DWORD PTR tv182[ebp], 16		; 00000010H
	je	SHORT $LN54@GL_SetText
	cmp	DWORD PTR tv182[ebp], 32		; 00000020H
	je	SHORT $LN55@GL_SetText
	jmp	SHORT $LN56@GL_SetText
$LN54@GL_SetText:

; 738  : 			{
; 739  : 			case 16: tex->format = GL_RGBA4; break;

	mov	edx, DWORD PTR _tex$[ebp]
	mov	DWORD PTR [edx+276], 32854		; 00008056H
	jmp	SHORT $LN1@GL_SetText
$LN55@GL_SetText:

; 740  : 			case 32: tex->format = GL_RGBA8; break;

	mov	eax, DWORD PTR _tex$[ebp]
	mov	DWORD PTR [eax+276], 32856		; 00008058H
	jmp	SHORT $LN1@GL_SetText
$LN56@GL_SetText:

; 741  : 			default: tex->format = GL_RGBA; break;

	mov	ecx, DWORD PTR _tex$[ebp]
	mov	DWORD PTR [ecx+276], 6408		; 00001908H
$LN1@GL_SetText:

; 742  : 			}
; 743  : 			break;
; 744  : 		}
; 745  : 	}
; 746  : }

	mov	esp, ebp
	pop	ebp
	ret	0
$LN60@GL_SetText:
	DD	$LN13@GL_SetText
	DD	$LN14@GL_SetText
	DD	$LN15@GL_SetText
	DD	$LN16@GL_SetText
_GL_SetTextureFormat ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xash_build4529_src\engine\client\gl_image.c
_TEXT	SEGMENT
tv93 = -16						; size = 4
tv84 = -12						; size = 4
tv76 = -8						; size = 4
tv69 = -4						; size = 4
_tex$ = 8						; size = 4
_pic$ = 12						; size = 4
_GL_SetTextureTarget PROC

; 606  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H

; 607  : 	Assert( pic != NULL );

	cmp	DWORD PTR _pic$[ebp], 0
	je	SHORT $LN19@GL_SetText
	mov	DWORD PTR tv69[ebp], 1
	jmp	SHORT $LN20@GL_SetText
$LN19@GL_SetText:
	mov	DWORD PTR tv69[ebp], 0
$LN20@GL_SetText:
	push	0
	push	607					; 0000025fH
	push	OFFSET $SG143580
	push	OFFSET $SG143581
	mov	eax, DWORD PTR tv69[ebp]
	push	eax
	call	_DBG_AssertFunction
	add	esp, 20					; 00000014H

; 608  : 	Assert( tex != NULL );

	cmp	DWORD PTR _tex$[ebp], 0
	je	SHORT $LN21@GL_SetText
	mov	DWORD PTR tv76[ebp], 1
	jmp	SHORT $LN22@GL_SetText
$LN21@GL_SetText:
	mov	DWORD PTR tv76[ebp], 0
$LN22@GL_SetText:
	push	0
	push	608					; 00000260H
	push	OFFSET $SG143582
	push	OFFSET $SG143583
	mov	ecx, DWORD PTR tv76[ebp]
	push	ecx
	call	_DBG_AssertFunction
	add	esp, 20					; 00000014H

; 609  : 
; 610  : 	// correct depth size
; 611  : 	pic->depth = Q_max( 1, pic->depth );

	mov	edx, DWORD PTR _pic$[ebp]
	movzx	eax, WORD PTR [edx+4]
	cmp	eax, 1
	jge	SHORT $LN23@GL_SetText
	mov	DWORD PTR tv84[ebp], 1
	jmp	SHORT $LN24@GL_SetText
$LN23@GL_SetText:
	mov	ecx, DWORD PTR _pic$[ebp]
	movzx	edx, WORD PTR [ecx+4]
	mov	DWORD PTR tv84[ebp], edx
$LN24@GL_SetText:
	mov	eax, DWORD PTR _pic$[ebp]
	mov	cx, WORD PTR tv84[ebp]
	mov	WORD PTR [eax+4], cx

; 612  : 	tex->numMips = 0; // begin counting

	mov	edx, DWORD PTR _tex$[ebp]
	mov	BYTE PTR [edx+266], 0

; 613  : 
; 614  : 	// correct mip count
; 615  : 	pic->numMips = Q_max( 1, pic->numMips );

	mov	eax, DWORD PTR _pic$[ebp]
	movzx	ecx, BYTE PTR [eax+18]
	cmp	ecx, 1
	jge	SHORT $LN25@GL_SetText
	mov	DWORD PTR tv93[ebp], 1
	jmp	SHORT $LN26@GL_SetText
$LN25@GL_SetText:
	mov	edx, DWORD PTR _pic$[ebp]
	movzx	eax, BYTE PTR [edx+18]
	mov	DWORD PTR tv93[ebp], eax
$LN26@GL_SetText:
	mov	ecx, DWORD PTR _pic$[ebp]
	mov	dl, BYTE PTR tv93[ebp]
	mov	BYTE PTR [ecx+18], dl

; 616  : 
; 617  : 	// trying to determine texture type
; 618  : 	if( pic->width > 1 && pic->height <= 1 )

	mov	eax, DWORD PTR _pic$[ebp]
	movzx	ecx, WORD PTR [eax]
	cmp	ecx, 1
	jle	SHORT $LN2@GL_SetText
	mov	edx, DWORD PTR _pic$[ebp]
	movzx	eax, WORD PTR [edx+2]
	cmp	eax, 1
	jg	SHORT $LN2@GL_SetText

; 619  : 		tex->target = GL_TEXTURE_1D;

	mov	ecx, DWORD PTR _tex$[ebp]
	mov	DWORD PTR [ecx+268], 3552		; 00000de0H
	jmp	$LN3@GL_SetText
$LN2@GL_SetText:

; 620  : 	else if( FBitSet( pic->flags, IMAGE_CUBEMAP ))

	mov	edx, DWORD PTR _pic$[ebp]
	mov	eax, DWORD PTR [edx+12]
	and	eax, 1
	je	SHORT $LN4@GL_SetText

; 621  : 		tex->target = GL_TEXTURE_CUBE_MAP_ARB;

	mov	ecx, DWORD PTR _tex$[ebp]
	mov	DWORD PTR [ecx+268], 34067		; 00008513H
	jmp	$LN3@GL_SetText
$LN4@GL_SetText:

; 622  : 	else if( FBitSet( pic->flags, IMAGE_MULTILAYER ) && pic->depth >= 1 )

	mov	edx, DWORD PTR _pic$[ebp]
	mov	eax, DWORD PTR [edx+12]
	and	eax, 256				; 00000100H
	je	SHORT $LN6@GL_SetText
	mov	ecx, DWORD PTR _pic$[ebp]
	movzx	edx, WORD PTR [ecx+4]
	cmp	edx, 1
	jl	SHORT $LN6@GL_SetText

; 623  : 		tex->target = GL_TEXTURE_2D_ARRAY_EXT;

	mov	eax, DWORD PTR _tex$[ebp]
	mov	DWORD PTR [eax+268], 35866		; 00008c1aH
	jmp	SHORT $LN3@GL_SetText
$LN6@GL_SetText:

; 624  : 	else if( pic->width > 1 && pic->height > 1 && pic->depth > 1 )

	mov	ecx, DWORD PTR _pic$[ebp]
	movzx	edx, WORD PTR [ecx]
	cmp	edx, 1
	jle	SHORT $LN8@GL_SetText
	mov	eax, DWORD PTR _pic$[ebp]
	movzx	ecx, WORD PTR [eax+2]
	cmp	ecx, 1
	jle	SHORT $LN8@GL_SetText
	mov	edx, DWORD PTR _pic$[ebp]
	movzx	eax, WORD PTR [edx+4]
	cmp	eax, 1
	jle	SHORT $LN8@GL_SetText

; 625  : 		tex->target = GL_TEXTURE_3D;

	mov	ecx, DWORD PTR _tex$[ebp]
	mov	DWORD PTR [ecx+268], 32879		; 0000806fH
	jmp	SHORT $LN3@GL_SetText
$LN8@GL_SetText:

; 626  : 	else if( FBitSet( tex->flags, TF_RECTANGLE ))

	mov	edx, DWORD PTR _tex$[ebp]
	mov	eax, DWORD PTR [edx+284]
	and	eax, 32					; 00000020H
	je	SHORT $LN10@GL_SetText

; 627  : 		tex->target = GL_TEXTURE_RECTANGLE_EXT;

	mov	ecx, DWORD PTR _tex$[ebp]
	mov	DWORD PTR [ecx+268], 34037		; 000084f5H
	jmp	SHORT $LN3@GL_SetText
$LN10@GL_SetText:

; 628  : 	else tex->target = GL_TEXTURE_2D; // default case

	mov	edx, DWORD PTR _tex$[ebp]
	mov	DWORD PTR [edx+268], 3553		; 00000de1H
$LN3@GL_SetText:

; 629  : 
; 630  : 	// check for hardware support
; 631  : 	if(( tex->target == GL_TEXTURE_CUBE_MAP_ARB ) && !GL_Support( GL_TEXTURE_CUBEMAP_EXT ))

	mov	eax, DWORD PTR _tex$[ebp]
	cmp	DWORD PTR [eax+268], 34067		; 00008513H
	jne	SHORT $LN12@GL_SetText
	push	5
	call	_GL_Support
	add	esp, 4
	test	eax, eax
	jne	SHORT $LN12@GL_SetText

; 632  : 		tex->target = GL_NONE;

	mov	ecx, DWORD PTR _tex$[ebp]
	mov	DWORD PTR [ecx+268], 0
$LN12@GL_SetText:

; 633  : 
; 634  : 	if(( tex->target == GL_TEXTURE_RECTANGLE_EXT ) && !GL_Support( GL_TEXTURE_2D_RECT_EXT ))

	mov	edx, DWORD PTR _tex$[ebp]
	cmp	DWORD PTR [edx+268], 34037		; 000084f5H
	jne	SHORT $LN13@GL_SetText
	push	10					; 0000000aH
	call	_GL_Support
	add	esp, 4
	test	eax, eax
	jne	SHORT $LN13@GL_SetText

; 635  : 		tex->target = GL_TEXTURE_2D;	// fallback

	mov	eax, DWORD PTR _tex$[ebp]
	mov	DWORD PTR [eax+268], 3553		; 00000de1H
$LN13@GL_SetText:

; 636  : 
; 637  : 	if(( tex->target == GL_TEXTURE_2D_ARRAY_EXT ) && !GL_Support( GL_TEXTURE_ARRAY_EXT ))

	mov	ecx, DWORD PTR _tex$[ebp]
	cmp	DWORD PTR [ecx+268], 35866		; 00008c1aH
	jne	SHORT $LN14@GL_SetText
	push	11					; 0000000bH
	call	_GL_Support
	add	esp, 4
	test	eax, eax
	jne	SHORT $LN14@GL_SetText

; 638  : 		tex->target = GL_NONE;

	mov	edx, DWORD PTR _tex$[ebp]
	mov	DWORD PTR [edx+268], 0
$LN14@GL_SetText:

; 639  : 
; 640  : 	if(( tex->target == GL_TEXTURE_3D ) && !GL_Support( GL_TEXTURE_3D_EXT ))

	mov	eax, DWORD PTR _tex$[ebp]
	cmp	DWORD PTR [eax+268], 32879		; 0000806fH
	jne	SHORT $LN15@GL_SetText
	push	12					; 0000000cH
	call	_GL_Support
	add	esp, 4
	test	eax, eax
	jne	SHORT $LN15@GL_SetText

; 641  : 		tex->target = GL_NONE;

	mov	ecx, DWORD PTR _tex$[ebp]
	mov	DWORD PTR [ecx+268], 0
$LN15@GL_SetText:

; 642  : 
; 643  : 	// check if depth textures are not supported
; 644  : 	if( FBitSet( tex->flags, TF_DEPTHMAP ) && !GL_Support( GL_DEPTH_TEXTURE ))

	mov	edx, DWORD PTR _tex$[ebp]
	mov	eax, DWORD PTR [edx+284]
	and	eax, 128				; 00000080H
	je	SHORT $LN16@GL_SetText
	push	20					; 00000014H
	call	_GL_Support
	add	esp, 4
	test	eax, eax
	jne	SHORT $LN16@GL_SetText

; 645  : 		tex->target = GL_NONE;

	mov	ecx, DWORD PTR _tex$[ebp]
	mov	DWORD PTR [ecx+268], 0
$LN16@GL_SetText:

; 646  : 
; 647  : 	// depth cubemaps only allowed when GL_EXT_gpu_shader4 is supported
; 648  : 	if( tex->target == GL_TEXTURE_CUBE_MAP_ARB && !GL_Support( GL_EXT_GPU_SHADER4 ) && FBitSet( tex->flags, TF_DEPTHMAP ))

	mov	edx, DWORD PTR _tex$[ebp]
	cmp	DWORD PTR [edx+268], 34067		; 00008513H
	jne	SHORT $LN1@GL_SetText
	push	19					; 00000013H
	call	_GL_Support
	add	esp, 4
	test	eax, eax
	jne	SHORT $LN1@GL_SetText
	mov	eax, DWORD PTR _tex$[ebp]
	mov	ecx, DWORD PTR [eax+284]
	and	ecx, 128				; 00000080H
	je	SHORT $LN1@GL_SetText

; 649  : 		tex->target = GL_NONE;

	mov	edx, DWORD PTR _tex$[ebp]
	mov	DWORD PTR [edx+268], 0
$LN1@GL_SetText:

; 650  : }

	mov	esp, ebp
	pop	ebp
	ret	0
_GL_SetTextureTarget ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xash_build4529_src\engine\client\gl_image.c
_TEXT	SEGMENT
tv168 = -40						; size = 4
tv164 = -36						; size = 4
tv160 = -32						; size = 4
tv69 = -28						; size = 4
_maxDepthSize$ = -24					; size = 4
_step$1 = -20						; size = 4
tv72 = -16						; size = 4
_scaled_height$2 = -12					; size = 4
_scaled_width$3 = -8					; size = 4
_maxTextureSize$ = -4					; size = 4
_tex$ = 8						; size = 4
_width$ = 12						; size = 4
_height$ = 16						; size = 4
_depth$ = 20						; size = 4
_GL_SetTextureDimensions PROC

; 517  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 40					; 00000028H

; 518  : 	int	maxTextureSize;
; 519  : 	int	maxDepthSize = 1;

	mov	DWORD PTR _maxDepthSize$[ebp], 1

; 520  : 
; 521  : 	Assert( tex != NULL );

	cmp	DWORD PTR _tex$[ebp], 0
	je	SHORT $LN36@GL_SetText
	mov	DWORD PTR tv69[ebp], 1
	jmp	SHORT $LN37@GL_SetText
$LN36@GL_SetText:
	mov	DWORD PTR tv69[ebp], 0
$LN37@GL_SetText:
	push	0
	push	521					; 00000209H
	push	OFFSET $SG143549
	push	OFFSET $SG143550
	mov	eax, DWORD PTR tv69[ebp]
	push	eax
	call	_DBG_AssertFunction
	add	esp, 20					; 00000014H

; 522  : 
; 523  : 	switch( tex->target )

	mov	ecx, DWORD PTR _tex$[ebp]
	mov	edx, DWORD PTR [ecx+268]
	mov	DWORD PTR tv72[ebp], edx
	cmp	DWORD PTR tv72[ebp], 34037		; 000084f5H
	ja	SHORT $LN38@GL_SetText
	cmp	DWORD PTR tv72[ebp], 34037		; 000084f5H
	je	SHORT $LN18@GL_SetText
	cmp	DWORD PTR tv72[ebp], 3552		; 00000de0H
	jb	SHORT $LN2@GL_SetText
	cmp	DWORD PTR tv72[ebp], 3553		; 00000de1H
	jbe	SHORT $LN16@GL_SetText
	cmp	DWORD PTR tv72[ebp], 32879		; 0000806fH
	je	SHORT $LN20@GL_SetText
	jmp	SHORT $LN2@GL_SetText
$LN38@GL_SetText:
	cmp	DWORD PTR tv72[ebp], 34067		; 00008513H
	je	SHORT $LN19@GL_SetText
	cmp	DWORD PTR tv72[ebp], 35866		; 00008c1aH
	je	SHORT $LN17@GL_SetText
	jmp	SHORT $LN2@GL_SetText
$LN16@GL_SetText:

; 524  : 	{
; 525  : 	case GL_TEXTURE_1D:
; 526  : 	case GL_TEXTURE_2D:
; 527  : 		maxTextureSize = glConfig.max_2d_texture_size;

	mov	eax, DWORD PTR _glConfig+60
	mov	DWORD PTR _maxTextureSize$[ebp], eax

; 528  : 		break;

	jmp	SHORT $LN2@GL_SetText
$LN17@GL_SetText:

; 529  : 	case GL_TEXTURE_2D_ARRAY_EXT:
; 530  : 		maxDepthSize = glConfig.max_2d_texture_layers;

	mov	ecx, DWORD PTR _glConfig+68
	mov	DWORD PTR _maxDepthSize$[ebp], ecx

; 531  : 		maxTextureSize = glConfig.max_2d_texture_size;

	mov	edx, DWORD PTR _glConfig+60
	mov	DWORD PTR _maxTextureSize$[ebp], edx

; 532  : 		break;

	jmp	SHORT $LN2@GL_SetText
$LN18@GL_SetText:

; 533  : 	case GL_TEXTURE_RECTANGLE_EXT:
; 534  : 		maxTextureSize = glConfig.max_2d_rectangle_size;

	mov	eax, DWORD PTR _glConfig+64
	mov	DWORD PTR _maxTextureSize$[ebp], eax

; 535  : 		break;

	jmp	SHORT $LN2@GL_SetText
$LN19@GL_SetText:

; 536  : 	case GL_TEXTURE_CUBE_MAP_ARB:
; 537  : 		maxTextureSize = glConfig.max_cubemap_size;

	mov	ecx, DWORD PTR _glConfig+76
	mov	DWORD PTR _maxTextureSize$[ebp], ecx

; 538  : 		break;

	jmp	SHORT $LN2@GL_SetText
$LN20@GL_SetText:

; 539  : 	case GL_TEXTURE_3D:
; 540  : 		maxDepthSize = glConfig.max_3d_texture_size;

	mov	edx, DWORD PTR _glConfig+72
	mov	DWORD PTR _maxDepthSize$[ebp], edx

; 541  : 		maxTextureSize = glConfig.max_3d_texture_size;

	mov	eax, DWORD PTR _glConfig+72
	mov	DWORD PTR _maxTextureSize$[ebp], eax
$LN2@GL_SetText:

; 542  : 		break;
; 543  : 	}
; 544  : 
; 545  : 	// store original sizes
; 546  : 	tex->srcWidth = width;

	mov	ecx, DWORD PTR _tex$[ebp]
	mov	dx, WORD PTR _width$[ebp]
	mov	WORD PTR [ecx+256], dx

; 547  : 	tex->srcHeight = height;

	mov	eax, DWORD PTR _tex$[ebp]
	mov	cx, WORD PTR _height$[ebp]
	mov	WORD PTR [eax+258], cx

; 548  : 
; 549  : 	if( !GL_Support( GL_ARB_TEXTURE_NPOT_EXT ))

	push	14					; 0000000eH
	call	_GL_Support
	add	esp, 4
	test	eax, eax
	jne	$LN21@GL_SetText

; 550  : 	{
; 551  : 		int	step = (int)gl_round_down->value;

	mov	edx, DWORD PTR _gl_round_down
	cvttss2si eax, DWORD PTR [edx+12]
	mov	DWORD PTR _step$1[ebp], eax

; 552  : 		int	scaled_width, scaled_height;
; 553  : 
; 554  : 		for( scaled_width = 1; scaled_width < width; scaled_width <<= 1 );

	mov	DWORD PTR _scaled_width$3[ebp], 1
	jmp	SHORT $LN6@GL_SetText
$LN4@GL_SetText:
	mov	ecx, DWORD PTR _scaled_width$3[ebp]
	shl	ecx, 1
	mov	DWORD PTR _scaled_width$3[ebp], ecx
$LN6@GL_SetText:
	mov	edx, DWORD PTR _scaled_width$3[ebp]
	cmp	edx, DWORD PTR _width$[ebp]
	jge	SHORT $LN5@GL_SetText
	jmp	SHORT $LN4@GL_SetText
$LN5@GL_SetText:

; 555  : 
; 556  : 		if( step > 0 && width < scaled_width && ( step == 1 || ( scaled_width - width ) > ( scaled_width >> step )))

	cmp	DWORD PTR _step$1[ebp], 0
	jle	SHORT $LN22@GL_SetText
	mov	eax, DWORD PTR _width$[ebp]
	cmp	eax, DWORD PTR _scaled_width$3[ebp]
	jge	SHORT $LN22@GL_SetText
	cmp	DWORD PTR _step$1[ebp], 1
	je	SHORT $LN23@GL_SetText
	mov	edx, DWORD PTR _scaled_width$3[ebp]
	sub	edx, DWORD PTR _width$[ebp]
	mov	eax, DWORD PTR _scaled_width$3[ebp]
	mov	ecx, DWORD PTR _step$1[ebp]
	sar	eax, cl
	cmp	edx, eax
	jle	SHORT $LN22@GL_SetText
$LN23@GL_SetText:

; 557  : 			scaled_width >>= 1;

	mov	ecx, DWORD PTR _scaled_width$3[ebp]
	sar	ecx, 1
	mov	DWORD PTR _scaled_width$3[ebp], ecx
$LN22@GL_SetText:

; 558  : 
; 559  : 		for( scaled_height = 1; scaled_height < height; scaled_height <<= 1 );

	mov	DWORD PTR _scaled_height$2[ebp], 1
	jmp	SHORT $LN9@GL_SetText
$LN7@GL_SetText:
	mov	edx, DWORD PTR _scaled_height$2[ebp]
	shl	edx, 1
	mov	DWORD PTR _scaled_height$2[ebp], edx
$LN9@GL_SetText:
	mov	eax, DWORD PTR _scaled_height$2[ebp]
	cmp	eax, DWORD PTR _height$[ebp]
	jge	SHORT $LN8@GL_SetText
	jmp	SHORT $LN7@GL_SetText
$LN8@GL_SetText:

; 560  : 
; 561  : 		if( step > 0 && height < scaled_height && ( step == 1 || ( scaled_height - height ) > ( scaled_height >> step )))

	cmp	DWORD PTR _step$1[ebp], 0
	jle	SHORT $LN24@GL_SetText
	mov	ecx, DWORD PTR _height$[ebp]
	cmp	ecx, DWORD PTR _scaled_height$2[ebp]
	jge	SHORT $LN24@GL_SetText
	cmp	DWORD PTR _step$1[ebp], 1
	je	SHORT $LN25@GL_SetText
	mov	edx, DWORD PTR _scaled_height$2[ebp]
	sub	edx, DWORD PTR _height$[ebp]
	mov	eax, DWORD PTR _scaled_height$2[ebp]
	mov	ecx, DWORD PTR _step$1[ebp]
	sar	eax, cl
	cmp	edx, eax
	jle	SHORT $LN24@GL_SetText
$LN25@GL_SetText:

; 562  : 			scaled_height >>= 1;

	mov	ecx, DWORD PTR _scaled_height$2[ebp]
	sar	ecx, 1
	mov	DWORD PTR _scaled_height$2[ebp], ecx
$LN24@GL_SetText:

; 563  : 
; 564  : 		width = scaled_width;

	mov	edx, DWORD PTR _scaled_width$3[ebp]
	mov	DWORD PTR _width$[ebp], edx

; 565  : 		height = scaled_height;

	mov	eax, DWORD PTR _scaled_height$2[ebp]
	mov	DWORD PTR _height$[ebp], eax
$LN21@GL_SetText:

; 566  : 	}
; 567  : 
; 568  : 	if( width > maxTextureSize || height > maxTextureSize || depth > maxDepthSize )

	mov	ecx, DWORD PTR _width$[ebp]
	cmp	ecx, DWORD PTR _maxTextureSize$[ebp]
	jg	SHORT $LN27@GL_SetText
	mov	edx, DWORD PTR _height$[ebp]
	cmp	edx, DWORD PTR _maxTextureSize$[ebp]
	jg	SHORT $LN27@GL_SetText
	mov	eax, DWORD PTR _depth$[ebp]
	cmp	eax, DWORD PTR _maxDepthSize$[ebp]
	jle	$LN15@GL_SetText
$LN27@GL_SetText:

; 569  : 	{
; 570  : 		if( tex->target == GL_TEXTURE_1D )

	mov	ecx, DWORD PTR _tex$[ebp]
	cmp	DWORD PTR [ecx+268], 3552		; 00000de0H
	jne	SHORT $LN28@GL_SetText
$LN10@GL_SetText:

; 571  : 		{
; 572  : 			while( width > maxTextureSize )

	mov	edx, DWORD PTR _width$[ebp]
	cmp	edx, DWORD PTR _maxTextureSize$[ebp]
	jle	SHORT $LN11@GL_SetText

; 573  : 				width >>= 1;

	mov	eax, DWORD PTR _width$[ebp]
	sar	eax, 1
	mov	DWORD PTR _width$[ebp], eax
	jmp	SHORT $LN10@GL_SetText
$LN11@GL_SetText:

; 574  : 		}

	jmp	SHORT $LN15@GL_SetText
$LN28@GL_SetText:

; 575  : 		else if( tex->target == GL_TEXTURE_3D || tex->target == GL_TEXTURE_2D_ARRAY_EXT )

	mov	ecx, DWORD PTR _tex$[ebp]
	cmp	DWORD PTR [ecx+268], 32879		; 0000806fH
	je	SHORT $LN32@GL_SetText
	mov	edx, DWORD PTR _tex$[ebp]
	cmp	DWORD PTR [edx+268], 35866		; 00008c1aH
	jne	SHORT $LN30@GL_SetText
$LN32@GL_SetText:

; 576  : 		{
; 577  : 			while( width > maxTextureSize || height > maxTextureSize || depth > maxDepthSize )

	mov	eax, DWORD PTR _width$[ebp]
	cmp	eax, DWORD PTR _maxTextureSize$[ebp]
	jg	SHORT $LN33@GL_SetText
	mov	ecx, DWORD PTR _height$[ebp]
	cmp	ecx, DWORD PTR _maxTextureSize$[ebp]
	jg	SHORT $LN33@GL_SetText
	mov	edx, DWORD PTR _depth$[ebp]
	cmp	edx, DWORD PTR _maxDepthSize$[ebp]
	jle	SHORT $LN13@GL_SetText
$LN33@GL_SetText:

; 578  : 			{
; 579  : 				width >>= 1;

	mov	eax, DWORD PTR _width$[ebp]
	sar	eax, 1
	mov	DWORD PTR _width$[ebp], eax

; 580  : 				height >>= 1;

	mov	ecx, DWORD PTR _height$[ebp]
	sar	ecx, 1
	mov	DWORD PTR _height$[ebp], ecx

; 581  : 				depth >>= 1;

	mov	edx, DWORD PTR _depth$[ebp]
	sar	edx, 1
	mov	DWORD PTR _depth$[ebp], edx

; 582  : 			}

	jmp	SHORT $LN32@GL_SetText
$LN13@GL_SetText:

; 583  : 		}

	jmp	SHORT $LN15@GL_SetText
$LN30@GL_SetText:

; 584  : 		else // all remaining cases
; 585  : 		{
; 586  : 			while( width > maxTextureSize || height > maxTextureSize )

	mov	eax, DWORD PTR _width$[ebp]
	cmp	eax, DWORD PTR _maxTextureSize$[ebp]
	jg	SHORT $LN34@GL_SetText
	mov	ecx, DWORD PTR _height$[ebp]
	cmp	ecx, DWORD PTR _maxTextureSize$[ebp]
	jle	SHORT $LN15@GL_SetText
$LN34@GL_SetText:

; 587  : 			{
; 588  : 				width >>= 1;

	mov	edx, DWORD PTR _width$[ebp]
	sar	edx, 1
	mov	DWORD PTR _width$[ebp], edx

; 589  : 				height >>= 1;

	mov	eax, DWORD PTR _height$[ebp]
	sar	eax, 1
	mov	DWORD PTR _height$[ebp], eax

; 590  : 			}

	jmp	SHORT $LN30@GL_SetText
$LN15@GL_SetText:

; 591  : 		}
; 592  : 	}
; 593  : 
; 594  : 	// set the texture dimensions
; 595  : 	tex->width = Q_max( 1, width );

	cmp	DWORD PTR _width$[ebp], 1
	jge	SHORT $LN39@GL_SetText
	mov	DWORD PTR tv160[ebp], 1
	jmp	SHORT $LN40@GL_SetText
$LN39@GL_SetText:
	mov	ecx, DWORD PTR _width$[ebp]
	mov	DWORD PTR tv160[ebp], ecx
$LN40@GL_SetText:
	mov	edx, DWORD PTR _tex$[ebp]
	mov	ax, WORD PTR tv160[ebp]
	mov	WORD PTR [edx+260], ax

; 596  : 	tex->height = Q_max( 1, height );

	cmp	DWORD PTR _height$[ebp], 1
	jge	SHORT $LN41@GL_SetText
	mov	DWORD PTR tv164[ebp], 1
	jmp	SHORT $LN42@GL_SetText
$LN41@GL_SetText:
	mov	ecx, DWORD PTR _height$[ebp]
	mov	DWORD PTR tv164[ebp], ecx
$LN42@GL_SetText:
	mov	edx, DWORD PTR _tex$[ebp]
	mov	ax, WORD PTR tv164[ebp]
	mov	WORD PTR [edx+262], ax

; 597  : 	tex->depth = Q_max( 1, depth );

	cmp	DWORD PTR _depth$[ebp], 1
	jge	SHORT $LN43@GL_SetText
	mov	DWORD PTR tv168[ebp], 1
	jmp	SHORT $LN44@GL_SetText
$LN43@GL_SetText:
	mov	ecx, DWORD PTR _depth$[ebp]
	mov	DWORD PTR tv168[ebp], ecx
$LN44@GL_SetText:
	mov	edx, DWORD PTR _tex$[ebp]
	mov	ax, WORD PTR tv168[ebp]
	mov	WORD PTR [edx+264], ax

; 598  : }

	mov	esp, ebp
	pop	ebp
	ret	0
_GL_SetTextureDimensions ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xash_build4529_src\engine\client\gl_image.c
_TEXT	SEGMENT
_height$ = -24						; size = 4
_width$ = -20						; size = 4
tv94 = -16						; size = 4
tv86 = -12						; size = 4
tv69 = -8						; size = 4
_mipcount$ = -4						; size = 4
_tex$ = 8						; size = 4
_haveBuffer$ = 12					; size = 4
_GL_CalcMipmapCount PROC

; 486  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H

; 487  : 	int	width, height;
; 488  : 	int	mipcount;
; 489  : 
; 490  : 	Assert( tex != NULL );

	cmp	DWORD PTR _tex$[ebp], 0
	je	SHORT $LN10@GL_CalcMip
	mov	DWORD PTR tv69[ebp], 1
	jmp	SHORT $LN11@GL_CalcMip
$LN10@GL_CalcMip:
	mov	DWORD PTR tv69[ebp], 0
$LN11@GL_CalcMip:
	push	0
	push	490					; 000001eaH
	push	OFFSET $SG143511
	push	OFFSET $SG143512
	mov	eax, DWORD PTR tv69[ebp]
	push	eax
	call	_DBG_AssertFunction
	add	esp, 20					; 00000014H

; 491  : 
; 492  : 	if( !haveBuffer || tex->target == GL_TEXTURE_3D )

	cmp	DWORD PTR _haveBuffer$[ebp], 0
	je	SHORT $LN6@GL_CalcMip
	mov	ecx, DWORD PTR _tex$[ebp]
	cmp	DWORD PTR [ecx+268], 32879		; 0000806fH
	jne	SHORT $LN5@GL_CalcMip
$LN6@GL_CalcMip:

; 493  : 		return 1;

	mov	eax, 1
	jmp	$LN1@GL_CalcMip
$LN5@GL_CalcMip:

; 494  : 
; 495  : 	// generate mip-levels by user request
; 496  : 	if( FBitSet( tex->flags, TF_NOMIPMAP ))

	mov	edx, DWORD PTR _tex$[ebp]
	mov	eax, DWORD PTR [edx+284]
	and	eax, 4096				; 00001000H
	je	SHORT $LN7@GL_CalcMip

; 497  : 		return 1;

	mov	eax, 1
	jmp	$LN1@GL_CalcMip
$LN7@GL_CalcMip:

; 498  : 		
; 499  : 	// mip-maps can't exceeds 16
; 500  : 	for( mipcount = 0; mipcount < 16; mipcount++ )

	mov	DWORD PTR _mipcount$[ebp], 0
	jmp	SHORT $LN4@GL_CalcMip
$LN2@GL_CalcMip:
	mov	ecx, DWORD PTR _mipcount$[ebp]
	add	ecx, 1
	mov	DWORD PTR _mipcount$[ebp], ecx
$LN4@GL_CalcMip:
	cmp	DWORD PTR _mipcount$[ebp], 16		; 00000010H
	jge	SHORT $LN3@GL_CalcMip

; 501  : 	{
; 502  : 		width = Q_max( 1, ( tex->width >> mipcount ));

	mov	edx, DWORD PTR _tex$[ebp]
	movzx	eax, WORD PTR [edx+260]
	mov	ecx, DWORD PTR _mipcount$[ebp]
	sar	eax, cl
	cmp	eax, 1
	jge	SHORT $LN12@GL_CalcMip
	mov	DWORD PTR tv86[ebp], 1
	jmp	SHORT $LN13@GL_CalcMip
$LN12@GL_CalcMip:
	mov	ecx, DWORD PTR _tex$[ebp]
	movzx	edx, WORD PTR [ecx+260]
	mov	ecx, DWORD PTR _mipcount$[ebp]
	sar	edx, cl
	mov	DWORD PTR tv86[ebp], edx
$LN13@GL_CalcMip:
	mov	eax, DWORD PTR tv86[ebp]
	mov	DWORD PTR _width$[ebp], eax

; 503  : 		height = Q_max( 1, ( tex->height >> mipcount ));

	mov	ecx, DWORD PTR _tex$[ebp]
	movzx	edx, WORD PTR [ecx+262]
	mov	ecx, DWORD PTR _mipcount$[ebp]
	sar	edx, cl
	cmp	edx, 1
	jge	SHORT $LN14@GL_CalcMip
	mov	DWORD PTR tv94[ebp], 1
	jmp	SHORT $LN15@GL_CalcMip
$LN14@GL_CalcMip:
	mov	eax, DWORD PTR _tex$[ebp]
	movzx	edx, WORD PTR [eax+262]
	mov	ecx, DWORD PTR _mipcount$[ebp]
	sar	edx, cl
	mov	DWORD PTR tv94[ebp], edx
$LN15@GL_CalcMip:
	mov	eax, DWORD PTR tv94[ebp]
	mov	DWORD PTR _height$[ebp], eax

; 504  : 		if( width == 1 && height == 1 )

	cmp	DWORD PTR _width$[ebp], 1
	jne	SHORT $LN8@GL_CalcMip
	cmp	DWORD PTR _height$[ebp], 1
	jne	SHORT $LN8@GL_CalcMip

; 505  : 			break;

	jmp	SHORT $LN3@GL_CalcMip
$LN8@GL_CalcMip:

; 506  : 	}

	jmp	$LN2@GL_CalcMip
$LN3@GL_CalcMip:

; 507  : 
; 508  : 	return mipcount + 1;

	mov	eax, DWORD PTR _mipcount$[ebp]
	add	eax, 1
$LN1@GL_CalcMip:

; 509  : }

	mov	esp, ebp
	pop	ebp
	ret	0
_GL_CalcMipmapCount ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xash_build4529_src\engine\client\gl_image.c
_TEXT	SEGMENT
tv65 = -12						; size = 4
_size$ = -8						; size = 4
tv66 = -4						; size = 4
_format$ = 8						; size = 4
_width$ = 12						; size = 4
_height$ = 16						; size = 4
_depth$ = 20						; size = 4
_GL_CalcTextureSize PROC

; 385  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH

; 386  : 	size_t	size = 0;

	mov	DWORD PTR _size$[ebp], 0

; 387  : 
; 388  : 	// check the depth error
; 389  : 	depth = Q_max( 1, depth );

	cmp	DWORD PTR _depth$[ebp], 1
	jge	SHORT $LN29@GL_CalcTex
	mov	DWORD PTR tv65[ebp], 1
	jmp	SHORT $LN30@GL_CalcTex
$LN29@GL_CalcTex:
	mov	eax, DWORD PTR _depth$[ebp]
	mov	DWORD PTR tv65[ebp], eax
$LN30@GL_CalcTex:
	mov	ecx, DWORD PTR tv65[ebp]
	mov	DWORD PTR _depth$[ebp], ecx

; 390  : 
; 391  : 	switch( format )

	mov	edx, DWORD PTR _format$[ebp]
	mov	DWORD PTR tv66[ebp], edx
	cmp	DWORD PTR tv66[ebp], 32832		; 00008040H
	ja	SHORT $LN31@GL_CalcTex
	cmp	DWORD PTR tv66[ebp], 32832		; 00008040H
	je	$LN10@GL_CalcTex
	mov	eax, DWORD PTR tv66[ebp]
	sub	eax, 6407				; 00001907H
	mov	DWORD PTR tv66[ebp], eax
	cmp	DWORD PTR tv66[ebp], 3
	ja	$LN27@GL_CalcTex
	mov	ecx, DWORD PTR tv66[ebp]
	jmp	DWORD PTR $LN38@GL_CalcTex[ecx*4]
$LN31@GL_CalcTex:
	cmp	DWORD PTR tv66[ebp], 33189		; 000081a5H
	ja	SHORT $LN32@GL_CalcTex
	cmp	DWORD PTR tv66[ebp], 33189		; 000081a5H
	je	$LN24@GL_CalcTex
	mov	edx, DWORD PTR tv66[ebp]
	sub	edx, 32837				; 00008045H
	mov	DWORD PTR tv66[ebp], edx
	cmp	DWORD PTR tv66[ebp], 19			; 00000013H
	ja	$LN27@GL_CalcTex
	mov	eax, DWORD PTR tv66[ebp]
	movzx	ecx, BYTE PTR $LN37@GL_CalcTex[eax]
	jmp	DWORD PTR $LN39@GL_CalcTex[ecx*4]
$LN32@GL_CalcTex:
	cmp	DWORD PTR tv66[ebp], 34027		; 000084ebH
	ja	$LN33@GL_CalcTex
	cmp	DWORD PTR tv66[ebp], 34027		; 000084ebH
	je	$LN5@GL_CalcTex
	cmp	DWORD PTR tv66[ebp], 33321		; 00008229H
	ja	SHORT $LN34@GL_CalcTex
	cmp	DWORD PTR tv66[ebp], 33321		; 00008229H
	je	$LN12@GL_CalcTex
	cmp	DWORD PTR tv66[ebp], 33190		; 000081a6H
	je	$LN25@GL_CalcTex
	jmp	$LN27@GL_CalcTex
$LN34@GL_CalcTex:
	cmp	DWORD PTR tv66[ebp], 33777		; 000083f1H
	ja	SHORT $LN35@GL_CalcTex
	cmp	DWORD PTR tv66[ebp], 33776		; 000083f0H
	jae	$LN4@GL_CalcTex
	mov	edx, DWORD PTR tv66[ebp]
	sub	edx, 33322				; 0000822aH
	mov	DWORD PTR tv66[ebp], edx
	cmp	DWORD PTR tv66[ebp], 6
	ja	$LN27@GL_CalcTex
	mov	eax, DWORD PTR tv66[ebp]
	jmp	DWORD PTR $LN40@GL_CalcTex[eax*4]
$LN35@GL_CalcTex:
	cmp	DWORD PTR tv66[ebp], 33778		; 000083f2H
	jb	$LN27@GL_CalcTex
	cmp	DWORD PTR tv66[ebp], 33779		; 000083f3H
	jbe	SHORT $LN5@GL_CalcTex
	jmp	$LN27@GL_CalcTex
$LN33@GL_CalcTex:
	cmp	DWORD PTR tv66[ebp], 34871		; 00008837H
	ja	SHORT $LN36@GL_CalcTex
	cmp	DWORD PTR tv66[ebp], 34871		; 00008837H
	je	SHORT $LN5@GL_CalcTex
	mov	ecx, DWORD PTR tv66[ebp]
	sub	ecx, 34836				; 00008814H
	mov	DWORD PTR tv66[ebp], ecx
	cmp	DWORD PTR tv66[ebp], 11			; 0000000bH
	ja	$LN27@GL_CalcTex
	mov	edx, DWORD PTR tv66[ebp]
	jmp	DWORD PTR $LN41@GL_CalcTex[edx*4]
$LN36@GL_CalcTex:
	cmp	DWORD PTR tv66[ebp], 36012		; 00008cacH
	je	$LN26@GL_CalcTex
	cmp	DWORD PTR tv66[ebp], 36285		; 00008dbdH
	je	SHORT $LN5@GL_CalcTex
	jmp	$LN27@GL_CalcTex
$LN4@GL_CalcTex:

; 392  : 	{
; 393  : 	case GL_COMPRESSED_RGB_S3TC_DXT1_EXT:
; 394  : 	case GL_COMPRESSED_RGBA_S3TC_DXT1_EXT:
; 395  : 		size = (((width + 3) >> 2) * ((height + 3) >> 2) * 8) * depth;

	mov	eax, DWORD PTR _width$[ebp]
	add	eax, 3
	sar	eax, 2
	mov	ecx, DWORD PTR _height$[ebp]
	add	ecx, 3
	sar	ecx, 2
	imul	eax, ecx
	shl	eax, 3
	imul	eax, DWORD PTR _depth$[ebp]
	mov	DWORD PTR _size$[ebp], eax

; 396  : 		break;

	jmp	$LN2@GL_CalcTex
$LN5@GL_CalcTex:

; 397  : 	case GL_COMPRESSED_RGBA_S3TC_DXT3_EXT:
; 398  : 	case GL_COMPRESSED_RGBA_S3TC_DXT5_EXT:
; 399  : 	case GL_COMPRESSED_RED_GREEN_RGTC2_EXT:
; 400  : 	case GL_COMPRESSED_LUMINANCE_ALPHA_ARB:
; 401  : 	case GL_COMPRESSED_LUMINANCE_ALPHA_3DC_ATI:
; 402  : 		size = (((width + 3) >> 2) * ((height + 3) >> 2) * 16) * depth;

	mov	edx, DWORD PTR _width$[ebp]
	add	edx, 3
	sar	edx, 2
	mov	eax, DWORD PTR _height$[ebp]
	add	eax, 3
	sar	eax, 2
	imul	edx, eax
	shl	edx, 4
	imul	edx, DWORD PTR _depth$[ebp]
	mov	DWORD PTR _size$[ebp], edx

; 403  : 		break;

	jmp	$LN2@GL_CalcTex
$LN6@GL_CalcTex:

; 404  : 	case GL_RGBA8:
; 405  : 	case GL_RGBA:
; 406  : 		size = width * height * depth * 4;

	mov	ecx, DWORD PTR _width$[ebp]
	imul	ecx, DWORD PTR _height$[ebp]
	imul	ecx, DWORD PTR _depth$[ebp]
	shl	ecx, 2
	mov	DWORD PTR _size$[ebp], ecx

; 407  : 		break;

	jmp	$LN2@GL_CalcTex
$LN7@GL_CalcTex:

; 408  : 	case GL_RGB8:
; 409  : 	case GL_RGB:
; 410  : 		size = width * height * depth * 3;

	mov	edx, DWORD PTR _width$[ebp]
	imul	edx, DWORD PTR _height$[ebp]
	imul	edx, DWORD PTR _depth$[ebp]
	imul	eax, edx, 3
	mov	DWORD PTR _size$[ebp], eax

; 411  : 		break;

	jmp	$LN2@GL_CalcTex
$LN8@GL_CalcTex:

; 412  : 	case GL_RGB5:
; 413  : 		size = (width * height * depth * 3) / 2;

	mov	ecx, DWORD PTR _width$[ebp]
	imul	ecx, DWORD PTR _height$[ebp]
	imul	ecx, DWORD PTR _depth$[ebp]
	imul	eax, ecx, 3
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	DWORD PTR _size$[ebp], eax

; 414  : 		break;

	jmp	$LN2@GL_CalcTex
$LN9@GL_CalcTex:

; 415  : 	case GL_RGBA4:
; 416  : 		size = (width * height * depth * 4) / 2;

	mov	eax, DWORD PTR _width$[ebp]
	imul	eax, DWORD PTR _height$[ebp]
	imul	eax, DWORD PTR _depth$[ebp]
	shl	eax, 2
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	DWORD PTR _size$[ebp], eax

; 417  : 		break;

	jmp	$LN2@GL_CalcTex
$LN10@GL_CalcTex:

; 418  : 	case GL_INTENSITY:
; 419  : 	case GL_LUMINANCE:
; 420  : 	case GL_INTENSITY8:
; 421  : 	case GL_LUMINANCE8:
; 422  : 		size = (width * height * depth);

	mov	edx, DWORD PTR _width$[ebp]
	imul	edx, DWORD PTR _height$[ebp]
	imul	edx, DWORD PTR _depth$[ebp]
	mov	DWORD PTR _size$[ebp], edx

; 423  : 		break;

	jmp	$LN2@GL_CalcTex
$LN11@GL_CalcTex:

; 424  : 	case GL_LUMINANCE_ALPHA:
; 425  : 	case GL_LUMINANCE8_ALPHA8:
; 426  : 		size = width * height * depth * 2;

	mov	eax, DWORD PTR _width$[ebp]
	imul	eax, DWORD PTR _height$[ebp]
	imul	eax, DWORD PTR _depth$[ebp]
	shl	eax, 1
	mov	DWORD PTR _size$[ebp], eax

; 427  : 		break;

	jmp	$LN2@GL_CalcTex
$LN12@GL_CalcTex:

; 428  : 	case GL_R8:
; 429  : 		size = width * height * depth;

	mov	ecx, DWORD PTR _width$[ebp]
	imul	ecx, DWORD PTR _height$[ebp]
	imul	ecx, DWORD PTR _depth$[ebp]
	mov	DWORD PTR _size$[ebp], ecx

; 430  : 		break;

	jmp	$LN2@GL_CalcTex
$LN13@GL_CalcTex:

; 431  : 	case GL_RG8:
; 432  : 		size = width * height * depth * 2;

	mov	edx, DWORD PTR _width$[ebp]
	imul	edx, DWORD PTR _height$[ebp]
	imul	edx, DWORD PTR _depth$[ebp]
	shl	edx, 1
	mov	DWORD PTR _size$[ebp], edx

; 433  : 		break;

	jmp	$LN2@GL_CalcTex
$LN14@GL_CalcTex:

; 434  : 	case GL_R16:
; 435  : 		size = width * height * depth * 2;

	mov	eax, DWORD PTR _width$[ebp]
	imul	eax, DWORD PTR _height$[ebp]
	imul	eax, DWORD PTR _depth$[ebp]
	shl	eax, 1
	mov	DWORD PTR _size$[ebp], eax

; 436  : 		break;

	jmp	$LN2@GL_CalcTex
$LN15@GL_CalcTex:

; 437  : 	case GL_RG16:
; 438  : 		size = width * height * depth * 4;

	mov	ecx, DWORD PTR _width$[ebp]
	imul	ecx, DWORD PTR _height$[ebp]
	imul	ecx, DWORD PTR _depth$[ebp]
	shl	ecx, 2
	mov	DWORD PTR _size$[ebp], ecx

; 439  : 		break;

	jmp	$LN2@GL_CalcTex
$LN16@GL_CalcTex:

; 440  : 	case GL_R16F:
; 441  : 	case GL_LUMINANCE16F_ARB:
; 442  : 		size = width * height * depth * 2;	// half-floats

	mov	edx, DWORD PTR _width$[ebp]
	imul	edx, DWORD PTR _height$[ebp]
	imul	edx, DWORD PTR _depth$[ebp]
	shl	edx, 1
	mov	DWORD PTR _size$[ebp], edx

; 443  : 		break;

	jmp	$LN2@GL_CalcTex
$LN17@GL_CalcTex:

; 444  : 	case GL_R32F:
; 445  : 	case GL_LUMINANCE32F_ARB:
; 446  : 		size = width * height * depth * 4;

	mov	eax, DWORD PTR _width$[ebp]
	imul	eax, DWORD PTR _height$[ebp]
	imul	eax, DWORD PTR _depth$[ebp]
	shl	eax, 2
	mov	DWORD PTR _size$[ebp], eax

; 447  : 		break;

	jmp	$LN2@GL_CalcTex
$LN18@GL_CalcTex:

; 448  : 	case GL_RG16F:
; 449  : 	case GL_LUMINANCE_ALPHA16F_ARB:
; 450  : 		size = width * height * depth * 4;

	mov	ecx, DWORD PTR _width$[ebp]
	imul	ecx, DWORD PTR _height$[ebp]
	imul	ecx, DWORD PTR _depth$[ebp]
	shl	ecx, 2
	mov	DWORD PTR _size$[ebp], ecx

; 451  : 		break;

	jmp	$LN2@GL_CalcTex
$LN19@GL_CalcTex:

; 452  : 	case GL_RG32F:
; 453  : 	case GL_LUMINANCE_ALPHA32F_ARB:
; 454  : 		size = width * height * depth * 8;

	mov	edx, DWORD PTR _width$[ebp]
	imul	edx, DWORD PTR _height$[ebp]
	imul	edx, DWORD PTR _depth$[ebp]
	shl	edx, 3
	mov	DWORD PTR _size$[ebp], edx

; 455  : 		break;

	jmp	$LN2@GL_CalcTex
$LN20@GL_CalcTex:

; 456  : 	case GL_RGB16F_ARB:
; 457  : 		size = width * height * depth * 6;

	mov	eax, DWORD PTR _width$[ebp]
	imul	eax, DWORD PTR _height$[ebp]
	imul	eax, DWORD PTR _depth$[ebp]
	imul	ecx, eax, 6
	mov	DWORD PTR _size$[ebp], ecx

; 458  : 		break;

	jmp	$LN2@GL_CalcTex
$LN21@GL_CalcTex:

; 459  : 	case GL_RGBA16F_ARB:
; 460  : 		size = width * height * depth * 8;

	mov	edx, DWORD PTR _width$[ebp]
	imul	edx, DWORD PTR _height$[ebp]
	imul	edx, DWORD PTR _depth$[ebp]
	shl	edx, 3
	mov	DWORD PTR _size$[ebp], edx

; 461  : 		break;

	jmp	SHORT $LN2@GL_CalcTex
$LN22@GL_CalcTex:

; 462  : 	case GL_RGB32F_ARB:
; 463  : 		size = width * height * depth * 12;

	mov	eax, DWORD PTR _width$[ebp]
	imul	eax, DWORD PTR _height$[ebp]
	imul	eax, DWORD PTR _depth$[ebp]
	imul	ecx, eax, 12
	mov	DWORD PTR _size$[ebp], ecx

; 464  : 		break;

	jmp	SHORT $LN2@GL_CalcTex
$LN23@GL_CalcTex:

; 465  : 	case GL_RGBA32F_ARB:
; 466  : 		size = width * height * depth * 16;

	mov	edx, DWORD PTR _width$[ebp]
	imul	edx, DWORD PTR _height$[ebp]
	imul	edx, DWORD PTR _depth$[ebp]
	shl	edx, 4
	mov	DWORD PTR _size$[ebp], edx

; 467  : 		break;

	jmp	SHORT $LN2@GL_CalcTex
$LN24@GL_CalcTex:

; 468  : 	case GL_DEPTH_COMPONENT16:
; 469  : 		size = width * height * depth * 2;

	mov	eax, DWORD PTR _width$[ebp]
	imul	eax, DWORD PTR _height$[ebp]
	imul	eax, DWORD PTR _depth$[ebp]
	shl	eax, 1
	mov	DWORD PTR _size$[ebp], eax

; 470  : 		break;

	jmp	SHORT $LN2@GL_CalcTex
$LN25@GL_CalcTex:

; 471  : 	case GL_DEPTH_COMPONENT24:
; 472  : 		size = width * height * depth * 3;

	mov	ecx, DWORD PTR _width$[ebp]
	imul	ecx, DWORD PTR _height$[ebp]
	imul	ecx, DWORD PTR _depth$[ebp]
	imul	edx, ecx, 3
	mov	DWORD PTR _size$[ebp], edx

; 473  : 		break;

	jmp	SHORT $LN2@GL_CalcTex
$LN26@GL_CalcTex:

; 474  : 	case GL_DEPTH_COMPONENT32F:
; 475  : 		size = width * height * depth * 4;

	mov	eax, DWORD PTR _width$[ebp]
	imul	eax, DWORD PTR _height$[ebp]
	imul	eax, DWORD PTR _depth$[ebp]
	shl	eax, 2
	mov	DWORD PTR _size$[ebp], eax

; 476  : 		break;

	jmp	SHORT $LN2@GL_CalcTex
$LN27@GL_CalcTex:

; 477  : 	default:
; 478  : 		Host_Error( "GL_CalcTextureSize: bad texture internal format (%u)\n", format );

	mov	ecx, DWORD PTR _format$[ebp]
	push	ecx
	push	OFFSET $SG143496
	call	_Host_Error
	add	esp, 8
$LN2@GL_CalcTex:

; 479  : 		break;
; 480  : 	}
; 481  : 
; 482  : 	return size;

	mov	eax, DWORD PTR _size$[ebp]

; 483  : }

	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN38@GL_CalcTex:
	DD	$LN7@GL_CalcTex
	DD	$LN6@GL_CalcTex
	DD	$LN10@GL_CalcTex
	DD	$LN11@GL_CalcTex
$LN39@GL_CalcTex:
	DD	$LN11@GL_CalcTex
	DD	$LN10@GL_CalcTex
	DD	$LN8@GL_CalcTex
	DD	$LN7@GL_CalcTex
	DD	$LN9@GL_CalcTex
	DD	$LN6@GL_CalcTex
	DD	$LN27@GL_CalcTex
$LN37@GL_CalcTex:
	DB	0
	DB	6
	DB	6
	DB	6
	DB	1
	DB	6
	DB	1
	DB	6
	DB	6
	DB	6
	DB	6
	DB	2
	DB	3
	DB	6
	DB	6
	DB	6
	DB	6
	DB	4
	DB	6
	DB	5
$LN40@GL_CalcTex:
	DD	$LN14@GL_CalcTex
	DD	$LN13@GL_CalcTex
	DD	$LN15@GL_CalcTex
	DD	$LN16@GL_CalcTex
	DD	$LN17@GL_CalcTex
	DD	$LN18@GL_CalcTex
	DD	$LN19@GL_CalcTex
$LN41@GL_CalcTex:
	DD	$LN23@GL_CalcTex
	DD	$LN22@GL_CalcTex
	DD	$LN27@GL_CalcTex
	DD	$LN27@GL_CalcTex
	DD	$LN17@GL_CalcTex
	DD	$LN19@GL_CalcTex
	DD	$LN21@GL_CalcTex
	DD	$LN20@GL_CalcTex
	DD	$LN27@GL_CalcTex
	DD	$LN27@GL_CalcTex
	DD	$LN16@GL_CalcTex
	DD	$LN18@GL_CalcTex
_GL_CalcTextureSize ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xash_build4529_src\engine\client\gl_image.c
_TEXT	SEGMENT
tv65 = -12						; size = 4
tv66 = -8						; size = 4
_size$ = -4						; size = 4
_format$ = 8						; size = 4
_width$ = 12						; size = 4
_height$ = 16						; size = 4
_depth$ = 20						; size = 4
_GL_CalcImageSize PROC

; 347  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH

; 348  : 	size_t	size = 0;

	mov	DWORD PTR _size$[ebp], 0

; 349  : 
; 350  : 	// check the depth error
; 351  : 	depth = Q_max( 1, depth );

	cmp	DWORD PTR _depth$[ebp], 1
	jge	SHORT $LN10@GL_CalcIma
	mov	DWORD PTR tv65[ebp], 1
	jmp	SHORT $LN11@GL_CalcIma
$LN10@GL_CalcIma:
	mov	eax, DWORD PTR _depth$[ebp]
	mov	DWORD PTR tv65[ebp], eax
$LN11@GL_CalcIma:
	mov	ecx, DWORD PTR tv65[ebp]
	mov	DWORD PTR _depth$[ebp], ecx

; 352  : 
; 353  : 	switch( format )

	mov	edx, DWORD PTR _format$[ebp]
	mov	DWORD PTR tv66[ebp], edx
	mov	eax, DWORD PTR tv66[ebp]
	sub	eax, 3
	mov	DWORD PTR tv66[ebp], eax
	cmp	DWORD PTR tv66[ebp], 8
	ja	$LN2@GL_CalcIma
	mov	ecx, DWORD PTR tv66[ebp]
	jmp	DWORD PTR $LN12@GL_CalcIma[ecx*4]
$LN4@GL_CalcIma:

; 354  : 	{
; 355  : 	case PF_LUMINANCE:
; 356  : 		size = width * height * depth;

	mov	edx, DWORD PTR _width$[ebp]
	imul	edx, DWORD PTR _height$[ebp]
	imul	edx, DWORD PTR _depth$[ebp]
	mov	DWORD PTR _size$[ebp], edx

; 357  : 		break;

	jmp	SHORT $LN2@GL_CalcIma
$LN5@GL_CalcIma:

; 358  : 	case PF_RGB_24:
; 359  : 	case PF_BGR_24:
; 360  : 		size = width * height * depth * 3;

	mov	eax, DWORD PTR _width$[ebp]
	imul	eax, DWORD PTR _height$[ebp]
	imul	eax, DWORD PTR _depth$[ebp]
	imul	ecx, eax, 3
	mov	DWORD PTR _size$[ebp], ecx

; 361  : 		break;

	jmp	SHORT $LN2@GL_CalcIma
$LN6@GL_CalcIma:

; 362  : 	case PF_BGRA_32:
; 363  : 	case PF_RGBA_32:
; 364  : 		size = width * height * depth * 4;

	mov	edx, DWORD PTR _width$[ebp]
	imul	edx, DWORD PTR _height$[ebp]
	imul	edx, DWORD PTR _depth$[ebp]
	shl	edx, 2
	mov	DWORD PTR _size$[ebp], edx

; 365  : 		break;

	jmp	SHORT $LN2@GL_CalcIma
$LN7@GL_CalcIma:

; 366  : 	case PF_DXT1:
; 367  : 		size = (((width + 3) >> 2) * ((height + 3) >> 2) * 8) * depth;

	mov	eax, DWORD PTR _width$[ebp]
	add	eax, 3
	sar	eax, 2
	mov	ecx, DWORD PTR _height$[ebp]
	add	ecx, 3
	sar	ecx, 2
	imul	eax, ecx
	shl	eax, 3
	imul	eax, DWORD PTR _depth$[ebp]
	mov	DWORD PTR _size$[ebp], eax

; 368  : 		break;

	jmp	SHORT $LN2@GL_CalcIma
$LN8@GL_CalcIma:

; 369  : 	case PF_DXT3:
; 370  : 	case PF_DXT5:
; 371  : 	case PF_ATI2:
; 372  : 		size = (((width + 3) >> 2) * ((height + 3) >> 2) * 16) * depth;

	mov	edx, DWORD PTR _width$[ebp]
	add	edx, 3
	sar	edx, 2
	mov	eax, DWORD PTR _height$[ebp]
	add	eax, 3
	sar	eax, 2
	imul	edx, eax
	shl	edx, 4
	imul	edx, DWORD PTR _depth$[ebp]
	mov	DWORD PTR _size$[ebp], edx
$LN2@GL_CalcIma:

; 373  : 		break;
; 374  : 	}
; 375  : 
; 376  : 	return size;

	mov	eax, DWORD PTR _size$[ebp]

; 377  : }

	mov	esp, ebp
	pop	ebp
	ret	0
$LN12@GL_CalcIma:
	DD	$LN6@GL_CalcIma
	DD	$LN6@GL_CalcIma
	DD	$LN5@GL_CalcIma
	DD	$LN5@GL_CalcIma
	DD	$LN4@GL_CalcIma
	DD	$LN7@GL_CalcIma
	DD	$LN8@GL_CalcIma
	DD	$LN8@GL_CalcIma
	DD	$LN8@GL_CalcIma
_GL_CalcImageSize ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xash_build4529_src\engine\client\gl_image.c
_TEXT	SEGMENT
tv71 = -8						; size = 4
tv68 = -4						; size = 4
_flags$ = 8						; size = 4
_GL_CalcTextureSamples PROC

; 335  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 336  : 	if( FBitSet( flags, IMAGE_HAS_COLOR ))

	mov	eax, DWORD PTR _flags$[ebp]
	and	eax, 4
	je	SHORT $LN2@GL_CalcTex

; 337  : 		return FBitSet( flags, IMAGE_HAS_ALPHA ) ? 4 : 3;

	mov	ecx, DWORD PTR _flags$[ebp]
	and	ecx, 2
	je	SHORT $LN4@GL_CalcTex
	mov	DWORD PTR tv68[ebp], 4
	jmp	SHORT $LN5@GL_CalcTex
$LN4@GL_CalcTex:
	mov	DWORD PTR tv68[ebp], 3
$LN5@GL_CalcTex:
	mov	eax, DWORD PTR tv68[ebp]
	jmp	SHORT $LN1@GL_CalcTex
$LN2@GL_CalcTex:

; 338  : 	return FBitSet( flags, IMAGE_HAS_ALPHA ) ? 2 : 1;

	mov	edx, DWORD PTR _flags$[ebp]
	and	edx, 2
	je	SHORT $LN6@GL_CalcTex
	mov	DWORD PTR tv71[ebp], 2
	jmp	SHORT $LN7@GL_CalcTex
$LN6@GL_CalcTex:
	mov	DWORD PTR tv71[ebp], 1
$LN7@GL_CalcTex:
	mov	eax, DWORD PTR tv71[ebp]
$LN1@GL_CalcTex:

; 339  : }

	mov	esp, ebp
	pop	ebp
	ret	0
_GL_CalcTextureSamples ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xash_build4529_src\engine\client\gl_image.c
_TEXT	SEGMENT
tv71 = -8						; size = 4
_tex$ = -4						; size = 4
_iTexture$ = 8						; size = 4
_GL_UpdateTextureParams PROC

; 249  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 250  : 	gl_texture_t	*tex = &gl_textures[iTexture];

	imul	eax, DWORD PTR _iTexture$[ebp], 320
	add	eax, OFFSET _gl_textures
	mov	DWORD PTR _tex$[ebp], eax

; 251  : 
; 252  : 	Assert( tex != NULL );

	je	SHORT $LN13@GL_UpdateT
	mov	DWORD PTR tv71[ebp], 1
	jmp	SHORT $LN14@GL_UpdateT
$LN13@GL_UpdateT:
	mov	DWORD PTR tv71[ebp], 0
$LN14@GL_UpdateT:
	push	0
	push	252					; 000000fcH
	push	OFFSET $SG143406
	push	OFFSET $SG143407
	mov	ecx, DWORD PTR tv71[ebp]
	push	ecx
	call	_DBG_AssertFunction
	add	esp, 20					; 00000014H

; 253  : 
; 254  : 	if( !tex->texnum ) return; // free slot

	mov	edx, DWORD PTR _tex$[ebp]
	cmp	DWORD PTR [edx+272], 0
	jne	SHORT $LN2@GL_UpdateT
	jmp	$LN10@GL_UpdateT
$LN2@GL_UpdateT:

; 255  : 
; 256  : 	GL_Bind( GL_TEXTURE0, iTexture );

	mov	eax, DWORD PTR _iTexture$[ebp]
	push	eax
	push	0
	call	_GL_Bind
	add	esp, 8

; 257  : 
; 258  : 	// set texture anisotropy if available
; 259  : 	if( GL_Support( GL_ANISOTROPY_EXT ) && ( tex->numMips > 1 ) && !FBitSet( tex->flags, TF_DEPTHMAP|TF_ALPHACONTRAST ))

	push	6
	call	_GL_Support
	add	esp, 4
	test	eax, eax
	je	SHORT $LN3@GL_UpdateT
	mov	ecx, DWORD PTR _tex$[ebp]
	movzx	edx, BYTE PTR [ecx+266]
	cmp	edx, 1
	jle	SHORT $LN3@GL_UpdateT
	mov	eax, DWORD PTR _tex$[ebp]
	mov	ecx, DWORD PTR [eax+284]
	and	ecx, 4194432				; 00400080H
	jne	SHORT $LN3@GL_UpdateT

; 260  : 		pglTexParameterf( tex->target, GL_TEXTURE_MAX_ANISOTROPY_EXT, gl_texture_anisotropy->value );

	mov	edx, DWORD PTR _gl_texture_anisotropy
	push	ecx
	movss	xmm0, DWORD PTR [edx+12]
	movss	DWORD PTR [esp], xmm0
	push	34046					; 000084feH
	mov	eax, DWORD PTR _tex$[ebp]
	mov	ecx, DWORD PTR [eax+268]
	push	ecx
	call	DWORD PTR _pglTexParameterf
$LN3@GL_UpdateT:

; 261  : 
; 262  : 	// set texture LOD bias if available
; 263  : 	if( GL_Support( GL_TEXTURE_LOD_BIAS ) && ( tex->numMips > 1 ) && !FBitSet( tex->flags, TF_DEPTHMAP ))

	push	7
	call	_GL_Support
	add	esp, 4
	test	eax, eax
	je	SHORT $LN4@GL_UpdateT
	mov	edx, DWORD PTR _tex$[ebp]
	movzx	eax, BYTE PTR [edx+266]
	cmp	eax, 1
	jle	SHORT $LN4@GL_UpdateT
	mov	ecx, DWORD PTR _tex$[ebp]
	mov	edx, DWORD PTR [ecx+284]
	and	edx, 128				; 00000080H
	jne	SHORT $LN4@GL_UpdateT

; 264  : 		pglTexParameterf( tex->target, GL_TEXTURE_LOD_BIAS_EXT, gl_texture_lodbias->value );

	mov	eax, DWORD PTR _gl_texture_lodbias
	push	ecx
	movss	xmm0, DWORD PTR [eax+12]
	movss	DWORD PTR [esp], xmm0
	push	34049					; 00008501H
	mov	ecx, DWORD PTR _tex$[ebp]
	mov	edx, DWORD PTR [ecx+268]
	push	edx
	call	DWORD PTR _pglTexParameterf
$LN4@GL_UpdateT:

; 265  : 
; 266  : 	if( IsLightMap( tex ))

	mov	eax, DWORD PTR _tex$[ebp]
	mov	ecx, DWORD PTR [eax+284]
	and	ecx, 2097152				; 00200000H
	je	$LN7@GL_UpdateT

; 267  : 	{
; 268  : 		if( gl_lightmap_nearest->value )

	mov	edx, DWORD PTR _gl_lightmap_nearest
	movss	xmm0, DWORD PTR [edx+12]
	ucomiss	xmm0, DWORD PTR __real@00000000
	lahf
	test	ah, 68					; 00000044H
	jnp	SHORT $LN6@GL_UpdateT

; 269  : 		{
; 270  : 			pglTexParameteri( tex->target, GL_TEXTURE_MIN_FILTER, GL_NEAREST );

	push	9728					; 00002600H
	push	10241					; 00002801H
	mov	eax, DWORD PTR _tex$[ebp]
	mov	ecx, DWORD PTR [eax+268]
	push	ecx
	call	DWORD PTR _pglTexParameteri

; 271  : 			pglTexParameteri( tex->target, GL_TEXTURE_MAG_FILTER, GL_NEAREST );

	push	9728					; 00002600H
	push	10240					; 00002800H
	mov	edx, DWORD PTR _tex$[ebp]
	mov	eax, DWORD PTR [edx+268]
	push	eax
	call	DWORD PTR _pglTexParameteri

; 272  : 		}

	jmp	SHORT $LN7@GL_UpdateT
$LN6@GL_UpdateT:

; 273  : 		else
; 274  : 		{
; 275  : 			pglTexParameteri( tex->target, GL_TEXTURE_MIN_FILTER, GL_LINEAR );

	push	9729					; 00002601H
	push	10241					; 00002801H
	mov	ecx, DWORD PTR _tex$[ebp]
	mov	edx, DWORD PTR [ecx+268]
	push	edx
	call	DWORD PTR _pglTexParameteri

; 276  : 			pglTexParameteri( tex->target, GL_TEXTURE_MAG_FILTER, GL_LINEAR );

	push	9729					; 00002601H
	push	10240					; 00002800H
	mov	eax, DWORD PTR _tex$[ebp]
	mov	ecx, DWORD PTR [eax+268]
	push	ecx
	call	DWORD PTR _pglTexParameteri
$LN7@GL_UpdateT:

; 277  : 		}
; 278  : 	}
; 279  : 
; 280  : 	if( tex->numMips <= 1 ) return;

	mov	edx, DWORD PTR _tex$[ebp]
	movzx	eax, BYTE PTR [edx+266]
	cmp	eax, 1
	jg	SHORT $LN8@GL_UpdateT
	jmp	$LN10@GL_UpdateT
$LN8@GL_UpdateT:

; 281  : 
; 282  : 	if( FBitSet( tex->flags, TF_NEAREST ) || gl_texture_nearest->value )

	mov	ecx, DWORD PTR _tex$[ebp]
	mov	edx, DWORD PTR [ecx+284]
	and	edx, 1
	jne	SHORT $LN11@GL_UpdateT
	mov	eax, DWORD PTR _gl_texture_nearest
	movss	xmm0, DWORD PTR [eax+12]
	ucomiss	xmm0, DWORD PTR __real@00000000
	lahf
	test	ah, 68					; 00000044H
	jnp	SHORT $LN9@GL_UpdateT
$LN11@GL_UpdateT:

; 283  : 	{
; 284  : 		pglTexParameteri( tex->target, GL_TEXTURE_MIN_FILTER, GL_NEAREST_MIPMAP_NEAREST );

	push	9984					; 00002700H
	push	10241					; 00002801H
	mov	ecx, DWORD PTR _tex$[ebp]
	mov	edx, DWORD PTR [ecx+268]
	push	edx
	call	DWORD PTR _pglTexParameteri

; 285  : 		pglTexParameteri( tex->target, GL_TEXTURE_MAG_FILTER, GL_NEAREST );

	push	9728					; 00002600H
	push	10240					; 00002800H
	mov	eax, DWORD PTR _tex$[ebp]
	mov	ecx, DWORD PTR [eax+268]
	push	ecx
	call	DWORD PTR _pglTexParameteri

; 286  : 	}

	jmp	SHORT $LN10@GL_UpdateT
$LN9@GL_UpdateT:

; 287  : 	else
; 288  : 	{
; 289  : 		pglTexParameteri( tex->target, GL_TEXTURE_MIN_FILTER, GL_LINEAR_MIPMAP_LINEAR );

	push	9987					; 00002703H
	push	10241					; 00002801H
	mov	edx, DWORD PTR _tex$[ebp]
	mov	eax, DWORD PTR [edx+268]
	push	eax
	call	DWORD PTR _pglTexParameteri

; 290  : 		pglTexParameteri( tex->target, GL_TEXTURE_MAG_FILTER, GL_LINEAR );

	push	9729					; 00002601H
	push	10240					; 00002800H
	mov	ecx, DWORD PTR _tex$[ebp]
	mov	edx, DWORD PTR [ecx+268]
	push	edx
	call	DWORD PTR _pglTexParameteri
$LN10@GL_UpdateT:

; 291  : 	}
; 292  : }

	mov	esp, ebp
	pop	ebp
	ret	0
_GL_UpdateTextureParams ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xash_build4529_src\engine\client\gl_image.c
_TEXT	SEGMENT
tv64 = -4						; size = 4
_target$ = 8						; size = 4
_GL_TargetToString PROC

; 46   : {

	push	ebp
	mov	ebp, esp
	push	ecx

; 47   : 	switch( target )

	mov	eax, DWORD PTR _target$[ebp]
	mov	DWORD PTR tv64[ebp], eax
	cmp	DWORD PTR tv64[ebp], 34037		; 000084f5H
	ja	SHORT $LN11@GL_TargetT
	cmp	DWORD PTR tv64[ebp], 34037		; 000084f5H
	je	SHORT $LN9@GL_TargetT
	cmp	DWORD PTR tv64[ebp], 3552		; 00000de0H
	je	SHORT $LN4@GL_TargetT
	cmp	DWORD PTR tv64[ebp], 3553		; 00000de1H
	je	SHORT $LN5@GL_TargetT
	cmp	DWORD PTR tv64[ebp], 32879		; 0000806fH
	je	SHORT $LN6@GL_TargetT
	jmp	SHORT $LN2@GL_TargetT
$LN11@GL_TargetT:
	cmp	DWORD PTR tv64[ebp], 34067		; 00008513H
	je	SHORT $LN7@GL_TargetT
	cmp	DWORD PTR tv64[ebp], 35866		; 00008c1aH
	je	SHORT $LN8@GL_TargetT
	jmp	SHORT $LN2@GL_TargetT
$LN4@GL_TargetT:

; 48   : 	{
; 49   : 	case GL_TEXTURE_1D:
; 50   : 		return "1D";

	mov	eax, OFFSET $SG143322
	jmp	SHORT $LN1@GL_TargetT
$LN5@GL_TargetT:

; 51   : 	case GL_TEXTURE_2D:
; 52   : 		return "2D";

	mov	eax, OFFSET $SG143324
	jmp	SHORT $LN1@GL_TargetT
$LN6@GL_TargetT:

; 53   : 	case GL_TEXTURE_3D:
; 54   : 		return "3D";

	mov	eax, OFFSET $SG143326
	jmp	SHORT $LN1@GL_TargetT
$LN7@GL_TargetT:

; 55   : 	case GL_TEXTURE_CUBE_MAP_ARB:
; 56   : 		return "Cube";

	mov	eax, OFFSET $SG143328
	jmp	SHORT $LN1@GL_TargetT
$LN8@GL_TargetT:

; 57   : 	case GL_TEXTURE_2D_ARRAY_EXT:
; 58   : 		return "Array";

	mov	eax, OFFSET $SG143330
	jmp	SHORT $LN1@GL_TargetT
$LN9@GL_TargetT:

; 59   : 	case GL_TEXTURE_RECTANGLE_EXT:
; 60   : 		return "Rect";

	mov	eax, OFFSET $SG143332
	jmp	SHORT $LN1@GL_TargetT
$LN2@GL_TargetT:

; 61   : 	}
; 62   : 	return "??";

	mov	eax, OFFSET $SG143333
$LN1@GL_TargetT:

; 63   : }

	mov	esp, ebp
	pop	ebp
	ret	0
_GL_TargetToString ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xash_build4529_src\engine\client\gl_image.c
_TEXT	SEGMENT
_total$ = -8						; size = 4
_i$ = -4						; size = 4
_GL_TexMemory PROC

; 1882 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 1883 : 	int	i, total = 0;

	mov	DWORD PTR _total$[ebp], 0

; 1884 : 
; 1885 : 	for( i = 0; i < gl_numTextures; i++ )

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN4@GL_TexMemo
$LN2@GL_TexMemo:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN4@GL_TexMemo:
	mov	ecx, DWORD PTR _i$[ebp]
	cmp	ecx, DWORD PTR _gl_numTextures
	jae	SHORT $LN3@GL_TexMemo

; 1886 : 		total += gl_textures[i].size;

	imul	edx, DWORD PTR _i$[ebp], 320
	mov	eax, DWORD PTR _total$[ebp]
	add	eax, DWORD PTR _gl_textures[edx+296]
	mov	DWORD PTR _total$[ebp], eax
	jmp	SHORT $LN2@GL_TexMemo
$LN3@GL_TexMemo:

; 1887 : 
; 1888 : 	return total;

	mov	eax, DWORD PTR _total$[ebp]

; 1889 : }

	mov	esp, ebp
	pop	ebp
	ret	0
_GL_TexMemory ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xash_build4529_src\engine\client\gl_image.c
_TEXT	SEGMENT
_tex$ = -8						; size = 4
_i$ = -4						; size = 4
_R_ShutdownImages PROC

; 2256 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 2257 : 	gl_texture_t	*tex;
; 2258 : 	int		i;
; 2259 : 
; 2260 : 	Cmd_RemoveCommand( "texturelist" );

	push	OFFSET $SG144532
	call	_Cmd_RemoveCommand
	add	esp, 4

; 2261 : 	GL_CleanupAllTextureUnits();

	call	_GL_CleanupAllTextureUnits

; 2262 : 
; 2263 : 	for( i = 0, tex = gl_textures; i < gl_numTextures; i++, tex++ )

	mov	DWORD PTR _i$[ebp], 0
	mov	DWORD PTR _tex$[ebp], OFFSET _gl_textures
	jmp	SHORT $LN4@R_Shutdown
$LN2@R_Shutdown:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
	mov	ecx, DWORD PTR _tex$[ebp]
	add	ecx, 320				; 00000140H
	mov	DWORD PTR _tex$[ebp], ecx
$LN4@R_Shutdown:
	mov	edx, DWORD PTR _i$[ebp]
	cmp	edx, DWORD PTR _gl_numTextures
	jae	SHORT $LN3@R_Shutdown

; 2264 : 		GL_DeleteTexture( tex );

	mov	eax, DWORD PTR _tex$[ebp]
	push	eax
	call	_GL_DeleteTexture
	add	esp, 4
	jmp	SHORT $LN2@R_Shutdown
$LN3@R_Shutdown:

; 2265 : 
; 2266 : 	memset( tr.lightmapTextures, 0, sizeof( tr.lightmapTextures ));

	push	1024					; 00000400H
	push	0
	push	OFFSET _tr+28
	call	_memset
	add	esp, 12					; 0000000cH

; 2267 : 	memset( gl_texturesHashTable, 0, sizeof( gl_texturesHashTable ));

	push	4096					; 00001000H
	push	0
	push	OFFSET _gl_texturesHashTable
	call	_memset
	add	esp, 12					; 0000000cH

; 2268 : 	memset( gl_textures, 0, sizeof( gl_textures ));

	push	1310720					; 00140000H
	push	0
	push	OFFSET _gl_textures
	call	_memset
	add	esp, 12					; 0000000cH

; 2269 : 	gl_numTextures = 0;

	mov	DWORD PTR _gl_numTextures, 0

; 2270 : }

	mov	esp, ebp
	pop	ebp
	ret	0
_R_ShutdownImages ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xash_build4529_src\engine\client\gl_image.c
_TEXT	SEGMENT
_R_InitImages PROC

; 2231 : {

	push	ebp
	mov	ebp, esp

; 2232 : 	memset( gl_textures, 0, sizeof( gl_textures ));

	push	1310720					; 00140000H
	push	0
	push	OFFSET _gl_textures
	call	_memset
	add	esp, 12					; 0000000cH

; 2233 : 	memset( gl_texturesHashTable, 0, sizeof( gl_texturesHashTable ));

	push	4096					; 00001000H
	push	0
	push	OFFSET _gl_texturesHashTable
	call	_memset
	add	esp, 12					; 0000000cH

; 2234 : 	gl_numTextures = 0;

	mov	DWORD PTR _gl_numTextures, 0

; 2235 : 
; 2236 : 	// create unused 0-entry
; 2237 : 	Q_strncpy( gl_textures->name, "*unused*", sizeof( gl_textures->name ));

	push	256					; 00000100H
	push	OFFSET $SG144522
	push	OFFSET _gl_textures
	call	_Q_strncpy
	add	esp, 12					; 0000000cH

; 2238 : 	gl_textures->hashValue = COM_HashKey( gl_textures->name, TEXTURES_HASH_SIZE );

	push	1024					; 00000400H
	push	OFFSET _gl_textures
	call	_COM_HashKey
	add	esp, 8
	mov	DWORD PTR _gl_textures+312, eax

; 2239 : 	gl_textures->nextHash = gl_texturesHashTable[gl_textures->hashValue];

	mov	eax, DWORD PTR _gl_textures+312
	mov	ecx, DWORD PTR _gl_texturesHashTable[eax*4]
	mov	DWORD PTR _gl_textures+316, ecx

; 2240 : 	gl_texturesHashTable[gl_textures->hashValue] = gl_textures;

	mov	edx, DWORD PTR _gl_textures+312
	mov	DWORD PTR _gl_texturesHashTable[edx*4], OFFSET _gl_textures

; 2241 : 	gl_numTextures = 1;

	mov	DWORD PTR _gl_numTextures, 1

; 2242 : 
; 2243 : 	// validate cvars
; 2244 : 	R_SetTextureParameters();

	call	_R_SetTextureParameters

; 2245 : 	GL_CreateInternalTextures();

	call	_GL_CreateInternalTextures

; 2246 : 
; 2247 : 	Cmd_AddCommand( "texturelist", R_TextureList_f, "display loaded textures list" );

	push	OFFSET $SG144523
	push	OFFSET _R_TextureList_f
	push	OFFSET $SG144524
	call	_Cmd_AddCommand
	add	esp, 12					; 0000000cH

; 2248 : }

	pop	ebp
	ret	0
_R_InitImages ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xash_build4529_src\engine\client\gl_image.c
_TEXT	SEGMENT
tv330 = -40						; size = 8
tv326 = -32						; size = 4
_bytes$ = -28						; size = 4
_texCount$ = -24					; size = 4
tv245 = -20						; size = 4
_i$ = -16						; size = 4
tv224 = -12						; size = 4
_image$ = -8						; size = 4
tv91 = -4						; size = 4
_R_TextureList_f PROC

; 2022 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 40					; 00000028H

; 2023 : 	gl_texture_t	*image;
; 2024 : 	int		i, texCount, bytes = 0;

	mov	DWORD PTR _bytes$[ebp], 0

; 2025 : 
; 2026 : 	Con_Printf( "\n" );

	push	OFFSET $SG144397
	call	_Con_Printf
	add	esp, 4

; 2027 : 	Con_Printf( " -id-   -w-  -h-     -size- -fmt- -type- -data-  -encode- -wrap- -depth- -name--------\n" );

	push	OFFSET $SG144398
	call	_Con_Printf
	add	esp, 4

; 2028 : 
; 2029 : 	for( i = texCount = 0, image = gl_textures; i < gl_numTextures; i++, image++ )

	mov	DWORD PTR _texCount$[ebp], 0
	mov	eax, DWORD PTR _texCount$[ebp]
	mov	DWORD PTR _i$[ebp], eax
	mov	DWORD PTR _image$[ebp], OFFSET _gl_textures
	jmp	SHORT $LN4@R_TextureL
$LN2@R_TextureL:
	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
	mov	edx, DWORD PTR _image$[ebp]
	add	edx, 320				; 00000140H
	mov	DWORD PTR _image$[ebp], edx
$LN4@R_TextureL:
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR _gl_numTextures
	jae	$LN3@R_TextureL

; 2030 : 	{
; 2031 : 		if( !image->texnum ) continue;

	mov	ecx, DWORD PTR _image$[ebp]
	cmp	DWORD PTR [ecx+272], 0
	jne	SHORT $LN11@R_TextureL
	jmp	SHORT $LN2@R_TextureL
$LN11@R_TextureL:

; 2032 : 
; 2033 : 		bytes += image->size;

	mov	edx, DWORD PTR _image$[ebp]
	mov	eax, DWORD PTR _bytes$[ebp]
	add	eax, DWORD PTR [edx+296]
	mov	DWORD PTR _bytes$[ebp], eax

; 2034 : 		texCount++;

	mov	ecx, DWORD PTR _texCount$[ebp]
	add	ecx, 1
	mov	DWORD PTR _texCount$[ebp], ecx

; 2035 : 
; 2036 : 		Con_Printf( "%4i: ", i );

	mov	edx, DWORD PTR _i$[ebp]
	push	edx
	push	OFFSET $SG144400
	call	_Con_Printf
	add	esp, 8

; 2037 : 		Con_Printf( "%4i %4i ", image->width, image->height );

	mov	eax, DWORD PTR _image$[ebp]
	movzx	ecx, WORD PTR [eax+262]
	push	ecx
	mov	edx, DWORD PTR _image$[ebp]
	movzx	eax, WORD PTR [edx+260]
	push	eax
	push	OFFSET $SG144401
	call	_Con_Printf
	add	esp, 12					; 0000000cH

; 2038 : 		Con_Printf( "%12s ", Q_memprint( image->size ));

	push	2
	mov	ecx, DWORD PTR _image$[ebp]
	mov	edx, DWORD PTR [ecx+296]
	mov	DWORD PTR tv326[ebp], edx
	cvtsi2sd xmm0, DWORD PTR tv326[ebp]
	mov	eax, DWORD PTR tv326[ebp]
	shr	eax, 31					; 0000001fH
	addsd	xmm0, QWORD PTR __xmm@41f00000000000000000000000000000[eax*8]
	movsd	QWORD PTR tv330[ebp], xmm0
	cvtsd2ss xmm0, QWORD PTR tv330[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	_Q_pretifymem
	add	esp, 8
	push	eax
	push	OFFSET $SG144402
	call	_Con_Printf
	add	esp, 8

; 2039 : 
; 2040 : 		switch( image->format )

	mov	ecx, DWORD PTR _image$[ebp]
	mov	edx, DWORD PTR [ecx+276]
	mov	DWORD PTR tv91[ebp], edx
	cmp	DWORD PTR tv91[ebp], 33776		; 000083f0H
	jg	$LN69@R_TextureL
	cmp	DWORD PTR tv91[ebp], 33776		; 000083f0H
	je	$LN18@R_TextureL
	cmp	DWORD PTR tv91[ebp], 32828		; 0000803cH
	jg	SHORT $LN70@R_TextureL
	cmp	DWORD PTR tv91[ebp], 32828		; 0000803cH
	je	$LN33@R_TextureL
	mov	eax, DWORD PTR tv91[ebp]
	sub	eax, 6402				; 00001902H
	mov	DWORD PTR tv91[ebp], eax
	cmp	DWORD PTR tv91[ebp], 8
	ja	$LN47@R_TextureL
	mov	ecx, DWORD PTR tv91[ebp]
	jmp	DWORD PTR $LN78@R_TextureL[ecx*4]
$LN70@R_TextureL:
	cmp	DWORD PTR tv91[ebp], 32843		; 0000804bH
	jg	SHORT $LN71@R_TextureL
	cmp	DWORD PTR tv91[ebp], 32843		; 0000804bH
	je	$LN34@R_TextureL
	mov	edx, DWORD PTR tv91[ebp]
	sub	edx, 32831				; 0000803fH
	mov	DWORD PTR tv91[ebp], edx
	cmp	DWORD PTR tv91[ebp], 6
	ja	$LN47@R_TextureL
	mov	eax, DWORD PTR tv91[ebp]
	jmp	DWORD PTR $LN79@R_TextureL[eax*4]
$LN71@R_TextureL:
	cmp	DWORD PTR tv91[ebp], 32856		; 00008058H
	jg	SHORT $LN72@R_TextureL
	cmp	DWORD PTR tv91[ebp], 32856		; 00008058H
	je	$LN24@R_TextureL
	cmp	DWORD PTR tv91[ebp], 32848		; 00008050H
	je	$LN28@R_TextureL
	cmp	DWORD PTR tv91[ebp], 32849		; 00008051H
	je	$LN27@R_TextureL
	cmp	DWORD PTR tv91[ebp], 32854		; 00008056H
	je	$LN25@R_TextureL
	jmp	$LN47@R_TextureL
$LN72@R_TextureL:
	cmp	DWORD PTR tv91[ebp], 33190		; 000081a6H
	je	$LN35@R_TextureL
	cmp	DWORD PTR tv91[ebp], 33327		; 0000822fH
	je	$LN41@R_TextureL
	cmp	DWORD PTR tv91[ebp], 33328		; 00008230H
	je	$LN42@R_TextureL
	jmp	$LN47@R_TextureL
$LN69@R_TextureL:
	cmp	DWORD PTR tv91[ebp], 34836		; 00008814H
	jg	SHORT $LN73@R_TextureL
	cmp	DWORD PTR tv91[ebp], 34836		; 00008814H
	je	$LN46@R_TextureL
	mov	ecx, DWORD PTR tv91[ebp]
	sub	ecx, 33777				; 000083f1H
	mov	DWORD PTR tv91[ebp], ecx
	cmp	DWORD PTR tv91[ebp], 253		; 000000fdH
	ja	$LN47@R_TextureL
	mov	edx, DWORD PTR tv91[ebp]
	movzx	eax, BYTE PTR $LN77@R_TextureL[edx]
	jmp	DWORD PTR $LN80@R_TextureL[eax*4]
$LN73@R_TextureL:
	cmp	DWORD PTR tv91[ebp], 34840		; 00008818H
	jg	SHORT $LN74@R_TextureL
	cmp	DWORD PTR tv91[ebp], 34840		; 00008818H
	je	$LN38@R_TextureL
	cmp	DWORD PTR tv91[ebp], 34837		; 00008815H
	je	$LN44@R_TextureL
	jmp	$LN47@R_TextureL
$LN74@R_TextureL:
	cmp	DWORD PTR tv91[ebp], 34871		; 00008837H
	jg	SHORT $LN75@R_TextureL
	cmp	DWORD PTR tv91[ebp], 34871		; 00008837H
	je	$LN22@R_TextureL
	mov	ecx, DWORD PTR tv91[ebp]
	sub	ecx, 34841				; 00008819H
	mov	DWORD PTR tv91[ebp], ecx
	cmp	DWORD PTR tv91[ebp], 6
	ja	$LN47@R_TextureL
	mov	edx, DWORD PTR tv91[ebp]
	jmp	DWORD PTR $LN81@R_TextureL[edx*4]
$LN75@R_TextureL:
	cmp	DWORD PTR tv91[ebp], 36012		; 00008cacH
	je	$LN36@R_TextureL
	cmp	DWORD PTR tv91[ebp], 36285		; 00008dbdH
	je	$LN22@R_TextureL
	jmp	$LN47@R_TextureL
$LN12@R_TextureL:

; 2041 : 		{
; 2042 : 		case GL_COMPRESSED_RGBA_ARB:
; 2043 : 			Con_Printf( "CRGBA " );

	push	OFFSET $SG144404
	call	_Con_Printf
	add	esp, 4

; 2044 : 			break;

	jmp	$LN5@R_TextureL
$LN13@R_TextureL:

; 2045 : 		case GL_COMPRESSED_RGB_ARB:
; 2046 : 			Con_Printf( "CRGB  " );

	push	OFFSET $SG144406
	call	_Con_Printf
	add	esp, 4

; 2047 : 			break;

	jmp	$LN5@R_TextureL
$LN14@R_TextureL:

; 2048 : 		case GL_COMPRESSED_LUMINANCE_ALPHA_ARB:
; 2049 : 			Con_Printf( "CLA   " );

	push	OFFSET $SG144408
	call	_Con_Printf
	add	esp, 4

; 2050 : 			break;

	jmp	$LN5@R_TextureL
$LN15@R_TextureL:

; 2051 : 		case GL_COMPRESSED_LUMINANCE_ARB:
; 2052 : 			Con_Printf( "CL    " );

	push	OFFSET $SG144410
	call	_Con_Printf
	add	esp, 4

; 2053 : 			break;

	jmp	$LN5@R_TextureL
$LN16@R_TextureL:

; 2054 : 		case GL_COMPRESSED_ALPHA_ARB:
; 2055 : 			Con_Printf( "CA    " );

	push	OFFSET $SG144412
	call	_Con_Printf
	add	esp, 4

; 2056 : 			break;

	jmp	$LN5@R_TextureL
$LN17@R_TextureL:

; 2057 : 		case GL_COMPRESSED_INTENSITY_ARB:
; 2058 : 			Con_Printf( "CI    " );

	push	OFFSET $SG144414
	call	_Con_Printf
	add	esp, 4

; 2059 : 			break;

	jmp	$LN5@R_TextureL
$LN18@R_TextureL:

; 2060 : 		case GL_COMPRESSED_RGB_S3TC_DXT1_EXT:
; 2061 : 			Con_Printf( "DXT1c " );

	push	OFFSET $SG144416
	call	_Con_Printf
	add	esp, 4

; 2062 : 			break;

	jmp	$LN5@R_TextureL
$LN19@R_TextureL:

; 2063 : 		case GL_COMPRESSED_RGBA_S3TC_DXT1_EXT:
; 2064 : 			Con_Printf( "DXT1a " );

	push	OFFSET $SG144418
	call	_Con_Printf
	add	esp, 4

; 2065 : 			break;

	jmp	$LN5@R_TextureL
$LN20@R_TextureL:

; 2066 : 		case GL_COMPRESSED_RGBA_S3TC_DXT3_EXT:
; 2067 : 			Con_Printf( "DXT3  " );

	push	OFFSET $SG144420
	call	_Con_Printf
	add	esp, 4

; 2068 : 			break;

	jmp	$LN5@R_TextureL
$LN21@R_TextureL:

; 2069 : 		case GL_COMPRESSED_RGBA_S3TC_DXT5_EXT:
; 2070 : 			Con_Printf( "DXT5  " );

	push	OFFSET $SG144422
	call	_Con_Printf
	add	esp, 4

; 2071 : 			break;

	jmp	$LN5@R_TextureL
$LN22@R_TextureL:

; 2072 : 		case GL_COMPRESSED_RED_GREEN_RGTC2_EXT:
; 2073 : 		case GL_COMPRESSED_LUMINANCE_ALPHA_3DC_ATI:
; 2074 : 			Con_Printf( "ATI2  " );

	push	OFFSET $SG144424
	call	_Con_Printf
	add	esp, 4

; 2075 : 			break;

	jmp	$LN5@R_TextureL
$LN23@R_TextureL:

; 2076 : 		case GL_RGBA:
; 2077 : 			Con_Printf( "RGBA  " );

	push	OFFSET $SG144426
	call	_Con_Printf
	add	esp, 4

; 2078 : 			break;

	jmp	$LN5@R_TextureL
$LN24@R_TextureL:

; 2079 : 		case GL_RGBA8:
; 2080 : 			Con_Printf( "RGBA8 " );

	push	OFFSET $SG144428
	call	_Con_Printf
	add	esp, 4

; 2081 : 			break;

	jmp	$LN5@R_TextureL
$LN25@R_TextureL:

; 2082 : 		case GL_RGBA4:
; 2083 : 			Con_Printf( "RGBA4 " );

	push	OFFSET $SG144430
	call	_Con_Printf
	add	esp, 4

; 2084 : 			break;

	jmp	$LN5@R_TextureL
$LN26@R_TextureL:

; 2085 : 		case GL_RGB:
; 2086 : 			Con_Printf( "RGB   " );

	push	OFFSET $SG144432
	call	_Con_Printf
	add	esp, 4

; 2087 : 			break;

	jmp	$LN5@R_TextureL
$LN27@R_TextureL:

; 2088 : 		case GL_RGB8:
; 2089 : 			Con_Printf( "RGB8  " );

	push	OFFSET $SG144434
	call	_Con_Printf
	add	esp, 4

; 2090 : 			break;

	jmp	$LN5@R_TextureL
$LN28@R_TextureL:

; 2091 : 		case GL_RGB5:
; 2092 : 			Con_Printf( "RGB5  " );

	push	OFFSET $SG144436
	call	_Con_Printf
	add	esp, 4

; 2093 : 			break;

	jmp	$LN5@R_TextureL
$LN29@R_TextureL:

; 2094 : 		case GL_LUMINANCE4_ALPHA4:
; 2095 : 			Con_Printf( "L4A4  " );

	push	OFFSET $SG144438
	call	_Con_Printf
	add	esp, 4

; 2096 : 			break;

	jmp	$LN5@R_TextureL
$LN30@R_TextureL:

; 2097 : 		case GL_LUMINANCE_ALPHA:
; 2098 : 		case GL_LUMINANCE8_ALPHA8:
; 2099 : 			Con_Printf( "L8A8  " );

	push	OFFSET $SG144440
	call	_Con_Printf
	add	esp, 4

; 2100 : 			break;

	jmp	$LN5@R_TextureL
$LN31@R_TextureL:

; 2101 : 		case GL_LUMINANCE4:
; 2102 : 			Con_Printf( "L4    " );

	push	OFFSET $SG144442
	call	_Con_Printf
	add	esp, 4

; 2103 : 			break;

	jmp	$LN5@R_TextureL
$LN32@R_TextureL:

; 2104 : 		case GL_LUMINANCE:
; 2105 : 		case GL_LUMINANCE8:
; 2106 : 			Con_Printf( "L8    " );

	push	OFFSET $SG144444
	call	_Con_Printf
	add	esp, 4

; 2107 : 			break;

	jmp	$LN5@R_TextureL
$LN33@R_TextureL:

; 2108 : 		case GL_ALPHA8:
; 2109 : 			Con_Printf( "A8    " );

	push	OFFSET $SG144446
	call	_Con_Printf
	add	esp, 4

; 2110 : 			break;

	jmp	$LN5@R_TextureL
$LN34@R_TextureL:

; 2111 : 		case GL_INTENSITY8:
; 2112 : 			Con_Printf( "I8    " );

	push	OFFSET $SG144448
	call	_Con_Printf
	add	esp, 4

; 2113 : 			break;

	jmp	$LN5@R_TextureL
$LN35@R_TextureL:

; 2114 : 		case GL_DEPTH_COMPONENT:
; 2115 : 		case GL_DEPTH_COMPONENT24:
; 2116 : 			Con_Printf( "DPTH24" );

	push	OFFSET $SG144450
	call	_Con_Printf
	add	esp, 4

; 2117 : 			break;			

	jmp	$LN5@R_TextureL
$LN36@R_TextureL:

; 2118 : 		case GL_DEPTH_COMPONENT32F:
; 2119 : 			Con_Printf( "DPTH32" );

	push	OFFSET $SG144452
	call	_Con_Printf
	add	esp, 4

; 2120 : 			break;

	jmp	$LN5@R_TextureL
$LN37@R_TextureL:

; 2121 : 		case GL_LUMINANCE16F_ARB:
; 2122 : 			Con_Printf( "L16F  " );

	push	OFFSET $SG144454
	call	_Con_Printf
	add	esp, 4

; 2123 : 			break;

	jmp	$LN5@R_TextureL
$LN38@R_TextureL:

; 2124 : 		case GL_LUMINANCE32F_ARB:
; 2125 : 			Con_Printf( "L32F  " );

	push	OFFSET $SG144456
	call	_Con_Printf
	add	esp, 4

; 2126 : 			break;

	jmp	$LN5@R_TextureL
$LN39@R_TextureL:

; 2127 : 		case GL_LUMINANCE_ALPHA16F_ARB:
; 2128 : 			Con_Printf( "LA16F " );

	push	OFFSET $SG144458
	call	_Con_Printf
	add	esp, 4

; 2129 : 			break;

	jmp	SHORT $LN5@R_TextureL
$LN40@R_TextureL:

; 2130 : 		case GL_LUMINANCE_ALPHA32F_ARB:
; 2131 : 			Con_Printf( "LA32F " );

	push	OFFSET $SG144460
	call	_Con_Printf
	add	esp, 4

; 2132 : 			break;

	jmp	SHORT $LN5@R_TextureL
$LN41@R_TextureL:

; 2133 : 		case GL_RG16F:
; 2134 : 			Con_Printf( "RG16F " );

	push	OFFSET $SG144462
	call	_Con_Printf
	add	esp, 4

; 2135 : 			break;

	jmp	SHORT $LN5@R_TextureL
$LN42@R_TextureL:

; 2136 : 		case GL_RG32F:
; 2137 : 			Con_Printf( "RG32F " );

	push	OFFSET $SG144464
	call	_Con_Printf
	add	esp, 4

; 2138 : 			break;

	jmp	SHORT $LN5@R_TextureL
$LN43@R_TextureL:

; 2139 : 		case GL_RGB16F_ARB:
; 2140 : 			Con_Printf( "RGB16F" );

	push	OFFSET $SG144466
	call	_Con_Printf
	add	esp, 4

; 2141 : 			break;

	jmp	SHORT $LN5@R_TextureL
$LN44@R_TextureL:

; 2142 : 		case GL_RGB32F_ARB:
; 2143 : 			Con_Printf( "RGB32F" );

	push	OFFSET $SG144468
	call	_Con_Printf
	add	esp, 4

; 2144 : 			break;

	jmp	SHORT $LN5@R_TextureL
$LN45@R_TextureL:

; 2145 : 		case GL_RGBA16F_ARB:
; 2146 : 			Con_Printf( "RGBA16F" );

	push	OFFSET $SG144470
	call	_Con_Printf
	add	esp, 4

; 2147 : 			break;

	jmp	SHORT $LN5@R_TextureL
$LN46@R_TextureL:

; 2148 : 		case GL_RGBA32F_ARB:
; 2149 : 			Con_Printf( "RGBA32F" );

	push	OFFSET $SG144472
	call	_Con_Printf
	add	esp, 4

; 2150 : 			break;

	jmp	SHORT $LN5@R_TextureL
$LN47@R_TextureL:

; 2151 : 		default:
; 2152 : 			Con_Printf( " ^1ERROR^7 " );

	push	OFFSET $SG144474
	call	_Con_Printf
	add	esp, 4
$LN5@R_TextureL:

; 2153 : 			break;
; 2154 : 		}
; 2155 : 
; 2156 : 		switch( image->target )

	mov	eax, DWORD PTR _image$[ebp]
	mov	ecx, DWORD PTR [eax+268]
	mov	DWORD PTR tv224[ebp], ecx
	cmp	DWORD PTR tv224[ebp], 34037		; 000084f5H
	ja	SHORT $LN76@R_TextureL
	cmp	DWORD PTR tv224[ebp], 34037		; 000084f5H
	je	SHORT $LN52@R_TextureL
	cmp	DWORD PTR tv224[ebp], 3552		; 00000de0H
	je	SHORT $LN48@R_TextureL
	cmp	DWORD PTR tv224[ebp], 3553		; 00000de1H
	je	SHORT $LN49@R_TextureL
	cmp	DWORD PTR tv224[ebp], 32879		; 0000806fH
	je	SHORT $LN50@R_TextureL
	jmp	SHORT $LN54@R_TextureL
$LN76@R_TextureL:
	cmp	DWORD PTR tv224[ebp], 34067		; 00008513H
	je	SHORT $LN51@R_TextureL
	cmp	DWORD PTR tv224[ebp], 35866		; 00008c1aH
	je	SHORT $LN53@R_TextureL
	jmp	SHORT $LN54@R_TextureL
$LN48@R_TextureL:

; 2157 : 		{
; 2158 : 		case GL_TEXTURE_1D:
; 2159 : 			Con_Printf( " 1D   " );

	push	OFFSET $SG144476
	call	_Con_Printf
	add	esp, 4

; 2160 : 			break;

	jmp	SHORT $LN7@R_TextureL
$LN49@R_TextureL:

; 2161 : 		case GL_TEXTURE_2D:
; 2162 : 			Con_Printf( " 2D   " );

	push	OFFSET $SG144478
	call	_Con_Printf
	add	esp, 4

; 2163 : 			break;

	jmp	SHORT $LN7@R_TextureL
$LN50@R_TextureL:

; 2164 : 		case GL_TEXTURE_3D:
; 2165 : 			Con_Printf( " 3D   " );

	push	OFFSET $SG144480
	call	_Con_Printf
	add	esp, 4

; 2166 : 			break;

	jmp	SHORT $LN7@R_TextureL
$LN51@R_TextureL:

; 2167 : 		case GL_TEXTURE_CUBE_MAP_ARB:
; 2168 : 			Con_Printf( "CUBE  " );

	push	OFFSET $SG144482
	call	_Con_Printf
	add	esp, 4

; 2169 : 			break;

	jmp	SHORT $LN7@R_TextureL
$LN52@R_TextureL:

; 2170 : 		case GL_TEXTURE_RECTANGLE_EXT:
; 2171 : 			Con_Printf( "RECT  " );

	push	OFFSET $SG144484
	call	_Con_Printf
	add	esp, 4

; 2172 : 			break;

	jmp	SHORT $LN7@R_TextureL
$LN53@R_TextureL:

; 2173 : 		case GL_TEXTURE_2D_ARRAY_EXT:
; 2174 : 			Con_Printf( "ARRAY " );

	push	OFFSET $SG144486
	call	_Con_Printf
	add	esp, 4

; 2175 : 			break;

	jmp	SHORT $LN7@R_TextureL
$LN54@R_TextureL:

; 2176 : 		default:
; 2177 : 			Con_Printf( "????  " );

	push	OFFSET $SG144488
	call	_Con_Printf
	add	esp, 4
$LN7@R_TextureL:

; 2178 : 			break;
; 2179 : 		}
; 2180 : 
; 2181 : 		if( image->flags & TF_NORMALMAP )

	mov	edx, DWORD PTR _image$[ebp]
	mov	eax, DWORD PTR [edx+284]
	and	eax, 32768				; 00008000H
	je	SHORT $LN55@R_TextureL

; 2182 : 			Con_Printf( "normal  " );

	push	OFFSET $SG144491
	call	_Con_Printf
	add	esp, 4
	jmp	SHORT $LN56@R_TextureL
$LN55@R_TextureL:

; 2183 : 		else Con_Printf( "diffuse " );

	push	OFFSET $SG144492
	call	_Con_Printf
	add	esp, 4
$LN56@R_TextureL:

; 2184 : 
; 2185 : 		switch( image->encode )

	mov	ecx, DWORD PTR _image$[ebp]
	mov	edx, DWORD PTR [ecx+280]
	mov	DWORD PTR tv245[ebp], edx
	mov	eax, DWORD PTR tv245[ebp]
	sub	eax, 6657				; 00001a01H
	mov	DWORD PTR tv245[ebp], eax
	cmp	DWORD PTR tv245[ebp], 8
	ja	SHORT $LN63@R_TextureL
	mov	ecx, DWORD PTR tv245[ebp]
	jmp	DWORD PTR $LN82@R_TextureL[ecx*4]
$LN57@R_TextureL:

; 2186 : 		{
; 2187 : 		case DXT_ENCODE_COLOR_YCoCg:
; 2188 : 			Con_Printf( "YCoCg     " );

	push	OFFSET $SG144494
	call	_Con_Printf
	add	esp, 4

; 2189 : 			break;

	jmp	SHORT $LN9@R_TextureL
$LN58@R_TextureL:

; 2190 : 		case DXT_ENCODE_NORMAL_AG_ORTHO:
; 2191 : 			Con_Printf( "ortho     " );

	push	OFFSET $SG144496
	call	_Con_Printf
	add	esp, 4

; 2192 : 			break;

	jmp	SHORT $LN9@R_TextureL
$LN59@R_TextureL:

; 2193 : 		case DXT_ENCODE_NORMAL_AG_STEREO:
; 2194 : 			Con_Printf( "stereo    " );

	push	OFFSET $SG144498
	call	_Con_Printf
	add	esp, 4

; 2195 : 			break;

	jmp	SHORT $LN9@R_TextureL
$LN60@R_TextureL:

; 2196 : 		case DXT_ENCODE_NORMAL_AG_PARABOLOID:
; 2197 : 			Con_Printf( "parabolic " );

	push	OFFSET $SG144500
	call	_Con_Printf
	add	esp, 4

; 2198 : 			break;

	jmp	SHORT $LN9@R_TextureL
$LN61@R_TextureL:

; 2199 : 		case DXT_ENCODE_NORMAL_AG_QUARTIC:
; 2200 : 			Con_Printf( "quartic   " );

	push	OFFSET $SG144502
	call	_Con_Printf
	add	esp, 4

; 2201 : 			break;

	jmp	SHORT $LN9@R_TextureL
$LN62@R_TextureL:

; 2202 : 		case DXT_ENCODE_NORMAL_AG_AZIMUTHAL:
; 2203 : 			Con_Printf( "azimuthal " );

	push	OFFSET $SG144504
	call	_Con_Printf
	add	esp, 4

; 2204 : 			break;

	jmp	SHORT $LN9@R_TextureL
$LN63@R_TextureL:

; 2205 : 		default:
; 2206 : 			Con_Printf( "default   " );

	push	OFFSET $SG144506
	call	_Con_Printf
	add	esp, 4
$LN9@R_TextureL:

; 2207 : 			break;
; 2208 : 		}
; 2209 : 
; 2210 : 		if( image->flags & TF_CLAMP )

	mov	edx, DWORD PTR _image$[ebp]
	mov	eax, DWORD PTR [edx+284]
	and	eax, 2048				; 00000800H
	je	SHORT $LN64@R_TextureL

; 2211 : 			Con_Printf( "clamp  " );

	push	OFFSET $SG144509
	call	_Con_Printf
	add	esp, 4
	jmp	SHORT $LN67@R_TextureL
$LN64@R_TextureL:

; 2212 : 		else if( image->flags & TF_BORDER )

	mov	ecx, DWORD PTR _image$[ebp]
	mov	edx, DWORD PTR [ecx+284]
	and	edx, 524288				; 00080000H
	je	SHORT $LN66@R_TextureL

; 2213 : 			Con_Printf( "border " );

	push	OFFSET $SG144512
	call	_Con_Printf
	add	esp, 4
	jmp	SHORT $LN67@R_TextureL
$LN66@R_TextureL:

; 2214 : 		else Con_Printf( "repeat " );

	push	OFFSET $SG144513
	call	_Con_Printf
	add	esp, 4
$LN67@R_TextureL:

; 2215 : 		Con_Printf( "   %d  ", image->depth );

	mov	eax, DWORD PTR _image$[ebp]
	movzx	ecx, WORD PTR [eax+264]
	push	ecx
	push	OFFSET $SG144514
	call	_Con_Printf
	add	esp, 8

; 2216 : 		Con_Printf( "  %s\n", image->name );

	mov	edx, DWORD PTR _image$[ebp]
	push	edx
	push	OFFSET $SG144515
	call	_Con_Printf
	add	esp, 8

; 2217 : 	}

	jmp	$LN2@R_TextureL
$LN3@R_TextureL:

; 2218 : 
; 2219 : 	Con_Printf( "---------------------------------------------------------\n" );

	push	OFFSET $SG144516
	call	_Con_Printf
	add	esp, 4

; 2220 : 	Con_Printf( "%i total textures\n", texCount );

	mov	eax, DWORD PTR _texCount$[ebp]
	push	eax
	push	OFFSET $SG144517
	call	_Con_Printf
	add	esp, 8

; 2221 : 	Con_Printf( "%s total memory used\n", Q_memprint( bytes ));

	push	2
	cvtsi2ss xmm0, DWORD PTR _bytes$[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	_Q_pretifymem
	add	esp, 8
	push	eax
	push	OFFSET $SG144518
	call	_Con_Printf
	add	esp, 8

; 2222 : 	Con_Printf( "\n" );

	push	OFFSET $SG144519
	call	_Con_Printf
	add	esp, 4

; 2223 : }

	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN78@R_TextureL:
	DD	$LN35@R_TextureL
	DD	$LN47@R_TextureL
	DD	$LN47@R_TextureL
	DD	$LN47@R_TextureL
	DD	$LN47@R_TextureL
	DD	$LN26@R_TextureL
	DD	$LN23@R_TextureL
	DD	$LN32@R_TextureL
	DD	$LN30@R_TextureL
$LN79@R_TextureL:
	DD	$LN31@R_TextureL
	DD	$LN32@R_TextureL
	DD	$LN47@R_TextureL
	DD	$LN47@R_TextureL
	DD	$LN29@R_TextureL
	DD	$LN47@R_TextureL
	DD	$LN30@R_TextureL
$LN80@R_TextureL:
	DD	$LN19@R_TextureL
	DD	$LN20@R_TextureL
	DD	$LN21@R_TextureL
	DD	$LN16@R_TextureL
	DD	$LN15@R_TextureL
	DD	$LN14@R_TextureL
	DD	$LN17@R_TextureL
	DD	$LN13@R_TextureL
	DD	$LN12@R_TextureL
	DD	$LN47@R_TextureL
$LN77@R_TextureL:
	DB	0
	DB	1
	DB	2
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	3
	DB	4
	DB	5
	DB	6
	DB	7
	DB	8
	npad	2
$LN81@R_TextureL:
	DD	$LN40@R_TextureL
	DD	$LN45@R_TextureL
	DD	$LN43@R_TextureL
	DD	$LN47@R_TextureL
	DD	$LN47@R_TextureL
	DD	$LN37@R_TextureL
	DD	$LN39@R_TextureL
$LN82@R_TextureL:
	DD	$LN57@R_TextureL
	DD	$LN63@R_TextureL
	DD	$LN63@R_TextureL
	DD	$LN63@R_TextureL
	DD	$LN58@R_TextureL
	DD	$LN59@R_TextureL
	DD	$LN60@R_TextureL
	DD	$LN61@R_TextureL
	DD	$LN62@R_TextureL
_R_TextureList_f ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xash_build4529_src\engine\client\gl_image.c
_TEXT	SEGMENT
_r_image$ = -40						; size = 36
__$ArrayPad$ = -4					; size = 4
_R_InitDlightTexture PROC

; 1933 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 40					; 00000028H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 1934 : 	rgbdata_t	r_image;
; 1935 : 
; 1936 : 	if( tr.dlightTexture != 0 )

	cmp	DWORD PTR _tr+1052, 0
	je	SHORT $LN2@R_InitDlig

; 1937 : 		return; // already initialized

	jmp	SHORT $LN1@R_InitDlig
$LN2@R_InitDlig:

; 1938 : 
; 1939 : 	memset( &r_image, 0, sizeof( r_image ));

	push	36					; 00000024H
	push	0
	lea	eax, DWORD PTR _r_image$[ebp]
	push	eax
	call	_memset
	add	esp, 12					; 0000000cH

; 1940 : 	r_image.width = BLOCK_SIZE; 

	mov	cx, WORD PTR _tr+66964
	mov	WORD PTR _r_image$[ebp], cx

; 1941 : 	r_image.height = BLOCK_SIZE;

	mov	dx, WORD PTR _tr+66964
	mov	WORD PTR _r_image$[ebp+2], dx

; 1942 : 	r_image.flags = IMAGE_HAS_COLOR;

	mov	DWORD PTR _r_image$[ebp+12], 4

; 1943 : 	r_image.type = PF_RGBA_32;

	mov	DWORD PTR _r_image$[ebp+8], 3

; 1944 : 	r_image.size = r_image.width * r_image.height * 4;

	movzx	eax, WORD PTR _r_image$[ebp]
	movzx	ecx, WORD PTR _r_image$[ebp+2]
	imul	eax, ecx
	shl	eax, 2
	mov	DWORD PTR _r_image$[ebp+32], eax

; 1945 : 
; 1946 : 	tr.dlightTexture = GL_LoadTextureInternal( "*dlight", &r_image, TF_NOMIPMAP|TF_CLAMP|TF_ATLAS_PAGE );

	push	0
	push	2103296					; 00201800H
	lea	edx, DWORD PTR _r_image$[ebp]
	push	edx
	push	OFFSET $SG144338
	call	_GL_LoadTextureFromBuffer
	add	esp, 16					; 00000010H
	mov	DWORD PTR _tr+1052, eax
$LN1@R_InitDlig:

; 1947 : }

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_R_InitDlightTexture ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xash_build4529_src\engine\client\gl_image.c
_TEXT	SEGMENT
_texnum$ = 8						; size = 4
_GL_FreeTexture PROC

; 1815 : {

	push	ebp
	mov	ebp, esp

; 1816 : 	// number 0 it's already freed
; 1817 : 	if( texnum <= 0 ) return;

	cmp	DWORD PTR _texnum$[ebp], 0
	ja	SHORT $LN2@GL_FreeTex
	jmp	SHORT $LN1@GL_FreeTex
$LN2@GL_FreeTex:

; 1818 : 
; 1819 : 	GL_DeleteTexture( &gl_textures[texnum] );

	imul	eax, DWORD PTR _texnum$[ebp], 320
	add	eax, OFFSET _gl_textures
	push	eax
	call	_GL_DeleteTexture
	add	esp, 4
$LN1@GL_FreeTex:

; 1820 : }

	pop	ebp
	ret	0
_GL_FreeTexture ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xash_build4529_src\engine\client\gl_image.c
_TEXT	SEGMENT
_tex$ = -4						; size = 4
_name$ = 8						; size = 4
_GL_FindTexture PROC

; 1781 : {

	push	ebp
	mov	ebp, esp
	push	ecx

; 1782 : 	gl_texture_t	*tex;
; 1783 : 
; 1784 : 	if( !GL_CheckTexName( name ))

	mov	eax, DWORD PTR _name$[ebp]
	push	eax
	call	_GL_CheckTexName
	add	esp, 4
	test	eax, eax
	jne	SHORT $LN2@GL_FindTex

; 1785 : 		return 0;

	xor	eax, eax
	jmp	SHORT $LN1@GL_FindTex
$LN2@GL_FindTex:

; 1786 : 
; 1787 : 	// see if already loaded
; 1788 : 	if(( tex = GL_TextureForName( name )))

	mov	ecx, DWORD PTR _name$[ebp]
	push	ecx
	call	_GL_TextureForName
	add	esp, 4
	mov	DWORD PTR _tex$[ebp], eax
	cmp	DWORD PTR _tex$[ebp], 0
	je	SHORT $LN3@GL_FindTex

; 1789 : 		return (tex - gl_textures);

	mov	eax, DWORD PTR _tex$[ebp]
	sub	eax, OFFSET _gl_textures
	cdq
	mov	ecx, 320				; 00000140H
	idiv	ecx
	jmp	SHORT $LN1@GL_FindTex
$LN3@GL_FindTex:

; 1790 : 
; 1791 : 	return 0;

	xor	eax, eax
$LN1@GL_FindTex:

; 1792 : }

	mov	esp, ebp
	pop	ebp
	ret	0
_GL_FindTexture ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xash_build4529_src\engine\client\gl_image.c
_TEXT	SEGMENT
tv70 = -24						; size = 4
_border$ = -20						; size = 16
__$ArrayPad$ = -4					; size = 4
_tex$ = 8						; size = 4
_GL_ApplyTextureParams PROC

; 113  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 114  : 	vec4_t	border = { 0.0f, 0.0f, 0.0f, 1.0f };

	xorps	xmm0, xmm0
	movss	DWORD PTR _border$[ebp], xmm0
	xorps	xmm0, xmm0
	movss	DWORD PTR _border$[ebp+4], xmm0
	xorps	xmm0, xmm0
	movss	DWORD PTR _border$[ebp+8], xmm0
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR _border$[ebp+12], xmm0

; 115  : 
; 116  : 	if( !glw_state.initialized )

	cmp	DWORD PTR _glw_state+20, 0
	jne	SHORT $LN2@GL_ApplyTe

; 117  : 		return;

	jmp	$LN40@GL_ApplyTe
$LN2@GL_ApplyTe:

; 118  : 
; 119  : 	Assert( tex != NULL );

	cmp	DWORD PTR _tex$[ebp], 0
	je	SHORT $LN43@GL_ApplyTe
	mov	DWORD PTR tv70[ebp], 1
	jmp	SHORT $LN44@GL_ApplyTe
$LN43@GL_ApplyTe:
	mov	DWORD PTR tv70[ebp], 0
$LN44@GL_ApplyTe:
	push	0
	push	119					; 00000077H
	push	OFFSET $SG143358
	push	OFFSET $SG143359
	mov	eax, DWORD PTR tv70[ebp]
	push	eax
	call	_DBG_AssertFunction
	add	esp, 20					; 00000014H

; 120  : 
; 121  : 	// set texture filter
; 122  : 	if( FBitSet( tex->flags, TF_DEPTHMAP ))

	mov	ecx, DWORD PTR _tex$[ebp]
	mov	edx, DWORD PTR [ecx+284]
	and	edx, 128				; 00000080H
	je	$LN3@GL_ApplyTe

; 123  : 	{
; 124  : 		if( !FBitSet( tex->flags, TF_NOCOMPARE ))

	mov	eax, DWORD PTR _tex$[ebp]
	mov	ecx, DWORD PTR [eax+284]
	and	ecx, 134217728				; 08000000H
	jne	SHORT $LN5@GL_ApplyTe

; 125  : 		{
; 126  : 			pglTexParameteri( tex->target, GL_TEXTURE_COMPARE_MODE_ARB, GL_COMPARE_R_TO_TEXTURE_ARB );

	push	34894					; 0000884eH
	push	34892					; 0000884cH
	mov	edx, DWORD PTR _tex$[ebp]
	mov	eax, DWORD PTR [edx+268]
	push	eax
	call	DWORD PTR _pglTexParameteri

; 127  : 			pglTexParameteri( tex->target, GL_TEXTURE_COMPARE_FUNC_ARB, GL_LEQUAL );

	push	515					; 00000203H
	push	34893					; 0000884dH
	mov	ecx, DWORD PTR _tex$[ebp]
	mov	edx, DWORD PTR [ecx+268]
	push	edx
	call	DWORD PTR _pglTexParameteri
$LN5@GL_ApplyTe:

; 128  : 		}
; 129  : 
; 130  : 		if( FBitSet( tex->flags, TF_LUMINANCE ))

	mov	eax, DWORD PTR _tex$[ebp]
	mov	ecx, DWORD PTR [eax+284]
	and	ecx, 512				; 00000200H
	je	SHORT $LN6@GL_ApplyTe

; 131  : 			pglTexParameteri( tex->target, GL_DEPTH_TEXTURE_MODE_ARB, GL_LUMINANCE );

	push	6409					; 00001909H
	push	34891					; 0000884bH
	mov	edx, DWORD PTR _tex$[ebp]
	mov	eax, DWORD PTR [edx+268]
	push	eax
	call	DWORD PTR _pglTexParameteri
	jmp	SHORT $LN7@GL_ApplyTe
$LN6@GL_ApplyTe:

; 132  : 		else pglTexParameteri( tex->target, GL_DEPTH_TEXTURE_MODE_ARB, GL_INTENSITY );

	push	32841					; 00008049H
	push	34891					; 0000884bH
	mov	ecx, DWORD PTR _tex$[ebp]
	mov	edx, DWORD PTR [ecx+268]
	push	edx
	call	DWORD PTR _pglTexParameteri
$LN7@GL_ApplyTe:

; 133  : 
; 134  : 		if( FBitSet( tex->flags, TF_NEAREST ))

	mov	eax, DWORD PTR _tex$[ebp]
	mov	ecx, DWORD PTR [eax+284]
	and	ecx, 1
	je	SHORT $LN8@GL_ApplyTe

; 135  : 		{
; 136  : 			pglTexParameteri( tex->target, GL_TEXTURE_MIN_FILTER, GL_NEAREST );

	push	9728					; 00002600H
	push	10241					; 00002801H
	mov	edx, DWORD PTR _tex$[ebp]
	mov	eax, DWORD PTR [edx+268]
	push	eax
	call	DWORD PTR _pglTexParameteri

; 137  : 			pglTexParameteri( tex->target, GL_TEXTURE_MAG_FILTER, GL_NEAREST );

	push	9728					; 00002600H
	push	10240					; 00002800H
	mov	ecx, DWORD PTR _tex$[ebp]
	mov	edx, DWORD PTR [ecx+268]
	push	edx
	call	DWORD PTR _pglTexParameteri

; 138  : 		}

	jmp	SHORT $LN9@GL_ApplyTe
$LN8@GL_ApplyTe:

; 139  : 		else
; 140  : 		{
; 141  : 			pglTexParameteri( tex->target, GL_TEXTURE_MIN_FILTER, GL_LINEAR );

	push	9729					; 00002601H
	push	10241					; 00002801H
	mov	eax, DWORD PTR _tex$[ebp]
	mov	ecx, DWORD PTR [eax+268]
	push	ecx
	call	DWORD PTR _pglTexParameteri

; 142  : 			pglTexParameteri( tex->target, GL_TEXTURE_MAG_FILTER, GL_LINEAR );

	push	9729					; 00002601H
	push	10240					; 00002800H
	mov	edx, DWORD PTR _tex$[ebp]
	mov	eax, DWORD PTR [edx+268]
	push	eax
	call	DWORD PTR _pglTexParameteri
$LN9@GL_ApplyTe:

; 143  : 		}
; 144  : 
; 145  : 		// allow max anisotropy as 1.0f on depth textures
; 146  : 		if( GL_Support( GL_ANISOTROPY_EXT ))

	push	6
	call	_GL_Support
	add	esp, 4
	test	eax, eax
	je	SHORT $LN10@GL_ApplyTe

; 147  : 			pglTexParameterf( tex->target, GL_TEXTURE_MAX_ANISOTROPY_EXT, 1.0f );

	push	ecx
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [esp], xmm0
	push	34046					; 000084feH
	mov	ecx, DWORD PTR _tex$[ebp]
	mov	edx, DWORD PTR [ecx+268]
	push	edx
	call	DWORD PTR _pglTexParameterf
$LN10@GL_ApplyTe:

; 148  : 	}

	jmp	$LN21@GL_ApplyTe
$LN3@GL_ApplyTe:

; 149  : 	else if( FBitSet( tex->flags, TF_NOMIPMAP ) || tex->numMips <= 1 )

	mov	eax, DWORD PTR _tex$[ebp]
	mov	ecx, DWORD PTR [eax+284]
	and	ecx, 4096				; 00001000H
	jne	SHORT $LN13@GL_ApplyTe
	mov	edx, DWORD PTR _tex$[ebp]
	movzx	eax, BYTE PTR [edx+266]
	cmp	eax, 1
	jg	$LN11@GL_ApplyTe
$LN13@GL_ApplyTe:

; 150  : 	{
; 151  : 		if( FBitSet( tex->flags, TF_NEAREST ) || ( IsLightMap( tex ) && gl_lightmap_nearest->value ))

	mov	ecx, DWORD PTR _tex$[ebp]
	mov	edx, DWORD PTR [ecx+284]
	and	edx, 1
	jne	SHORT $LN16@GL_ApplyTe
	mov	eax, DWORD PTR _tex$[ebp]
	mov	ecx, DWORD PTR [eax+284]
	and	ecx, 2097152				; 00200000H
	je	SHORT $LN14@GL_ApplyTe
	mov	edx, DWORD PTR _gl_lightmap_nearest
	movss	xmm0, DWORD PTR [edx+12]
	ucomiss	xmm0, DWORD PTR __real@00000000
	lahf
	test	ah, 68					; 00000044H
	jnp	SHORT $LN14@GL_ApplyTe
$LN16@GL_ApplyTe:

; 152  : 		{
; 153  : 			pglTexParameteri( tex->target, GL_TEXTURE_MIN_FILTER, GL_NEAREST );

	push	9728					; 00002600H
	push	10241					; 00002801H
	mov	eax, DWORD PTR _tex$[ebp]
	mov	ecx, DWORD PTR [eax+268]
	push	ecx
	call	DWORD PTR _pglTexParameteri

; 154  : 			pglTexParameteri( tex->target, GL_TEXTURE_MAG_FILTER, GL_NEAREST );

	push	9728					; 00002600H
	push	10240					; 00002800H
	mov	edx, DWORD PTR _tex$[ebp]
	mov	eax, DWORD PTR [edx+268]
	push	eax
	call	DWORD PTR _pglTexParameteri

; 155  : 		}

	jmp	SHORT $LN15@GL_ApplyTe
$LN14@GL_ApplyTe:

; 156  : 		else
; 157  : 		{
; 158  : 			pglTexParameteri( tex->target, GL_TEXTURE_MIN_FILTER, GL_LINEAR );

	push	9729					; 00002601H
	push	10241					; 00002801H
	mov	ecx, DWORD PTR _tex$[ebp]
	mov	edx, DWORD PTR [ecx+268]
	push	edx
	call	DWORD PTR _pglTexParameteri

; 159  : 			pglTexParameteri( tex->target, GL_TEXTURE_MAG_FILTER, GL_LINEAR );

	push	9729					; 00002601H
	push	10240					; 00002800H
	mov	eax, DWORD PTR _tex$[ebp]
	mov	ecx, DWORD PTR [eax+268]
	push	ecx
	call	DWORD PTR _pglTexParameteri
$LN15@GL_ApplyTe:

; 160  : 		}
; 161  : 	}

	jmp	$LN21@GL_ApplyTe
$LN11@GL_ApplyTe:

; 162  : 	else
; 163  : 	{
; 164  : 		if( FBitSet( tex->flags, TF_NEAREST ) || gl_texture_nearest->value )

	mov	edx, DWORD PTR _tex$[ebp]
	mov	eax, DWORD PTR [edx+284]
	and	eax, 1
	jne	SHORT $LN19@GL_ApplyTe
	mov	ecx, DWORD PTR _gl_texture_nearest
	movss	xmm0, DWORD PTR [ecx+12]
	ucomiss	xmm0, DWORD PTR __real@00000000
	lahf
	test	ah, 68					; 00000044H
	jnp	SHORT $LN17@GL_ApplyTe
$LN19@GL_ApplyTe:

; 165  : 		{
; 166  : 			pglTexParameteri( tex->target, GL_TEXTURE_MIN_FILTER, GL_NEAREST_MIPMAP_NEAREST );

	push	9984					; 00002700H
	push	10241					; 00002801H
	mov	edx, DWORD PTR _tex$[ebp]
	mov	eax, DWORD PTR [edx+268]
	push	eax
	call	DWORD PTR _pglTexParameteri

; 167  : 			pglTexParameteri( tex->target, GL_TEXTURE_MAG_FILTER, GL_NEAREST );

	push	9728					; 00002600H
	push	10240					; 00002800H
	mov	ecx, DWORD PTR _tex$[ebp]
	mov	edx, DWORD PTR [ecx+268]
	push	edx
	call	DWORD PTR _pglTexParameteri

; 168  : 		}

	jmp	SHORT $LN18@GL_ApplyTe
$LN17@GL_ApplyTe:

; 169  : 		else
; 170  : 		{
; 171  : 			pglTexParameteri( tex->target, GL_TEXTURE_MIN_FILTER, GL_LINEAR_MIPMAP_LINEAR );

	push	9987					; 00002703H
	push	10241					; 00002801H
	mov	eax, DWORD PTR _tex$[ebp]
	mov	ecx, DWORD PTR [eax+268]
	push	ecx
	call	DWORD PTR _pglTexParameteri

; 172  : 			pglTexParameteri( tex->target, GL_TEXTURE_MAG_FILTER, GL_LINEAR );

	push	9729					; 00002601H
	push	10240					; 00002800H
	mov	edx, DWORD PTR _tex$[ebp]
	mov	eax, DWORD PTR [edx+268]
	push	eax
	call	DWORD PTR _pglTexParameteri
$LN18@GL_ApplyTe:

; 173  : 		}
; 174  : 
; 175  : 		// set texture anisotropy if available
; 176  : 		if( GL_Support( GL_ANISOTROPY_EXT ) && ( tex->numMips > 1 ) && !FBitSet( tex->flags, TF_ALPHACONTRAST ))

	push	6
	call	_GL_Support
	add	esp, 4
	test	eax, eax
	je	SHORT $LN20@GL_ApplyTe
	mov	ecx, DWORD PTR _tex$[ebp]
	movzx	edx, BYTE PTR [ecx+266]
	cmp	edx, 1
	jle	SHORT $LN20@GL_ApplyTe
	mov	eax, DWORD PTR _tex$[ebp]
	mov	ecx, DWORD PTR [eax+284]
	and	ecx, 4194304				; 00400000H
	jne	SHORT $LN20@GL_ApplyTe

; 177  : 			pglTexParameterf( tex->target, GL_TEXTURE_MAX_ANISOTROPY_EXT, gl_texture_anisotropy->value );

	mov	edx, DWORD PTR _gl_texture_anisotropy
	push	ecx
	movss	xmm0, DWORD PTR [edx+12]
	movss	DWORD PTR [esp], xmm0
	push	34046					; 000084feH
	mov	eax, DWORD PTR _tex$[ebp]
	mov	ecx, DWORD PTR [eax+268]
	push	ecx
	call	DWORD PTR _pglTexParameterf
$LN20@GL_ApplyTe:

; 178  : 
; 179  : 		// set texture LOD bias if available
; 180  : 		if( GL_Support( GL_TEXTURE_LOD_BIAS ) && ( tex->numMips > 1 ))

	push	7
	call	_GL_Support
	add	esp, 4
	test	eax, eax
	je	SHORT $LN21@GL_ApplyTe
	mov	edx, DWORD PTR _tex$[ebp]
	movzx	eax, BYTE PTR [edx+266]
	cmp	eax, 1
	jle	SHORT $LN21@GL_ApplyTe

; 181  : 			pglTexParameterf( tex->target, GL_TEXTURE_LOD_BIAS_EXT, gl_texture_lodbias->value );

	mov	ecx, DWORD PTR _gl_texture_lodbias
	push	ecx
	movss	xmm0, DWORD PTR [ecx+12]
	movss	DWORD PTR [esp], xmm0
	push	34049					; 00008501H
	mov	edx, DWORD PTR _tex$[ebp]
	mov	eax, DWORD PTR [edx+268]
	push	eax
	call	DWORD PTR _pglTexParameterf
$LN21@GL_ApplyTe:

; 182  : 	}
; 183  : 
; 184  : 	// check if border is not supported
; 185  : 	if( FBitSet( tex->flags, TF_BORDER ) && !GL_Support( GL_CLAMP_TEXBORDER_EXT ))

	mov	ecx, DWORD PTR _tex$[ebp]
	mov	edx, DWORD PTR [ecx+284]
	and	edx, 524288				; 00080000H
	je	SHORT $LN22@GL_ApplyTe
	push	15					; 0000000fH
	call	_GL_Support
	add	esp, 4
	test	eax, eax
	jne	SHORT $LN22@GL_ApplyTe

; 186  : 	{
; 187  : 		ClearBits( tex->flags, TF_BORDER );

	mov	eax, DWORD PTR _tex$[ebp]
	mov	ecx, DWORD PTR [eax+284]
	and	ecx, -524289				; fff7ffffH
	mov	edx, DWORD PTR _tex$[ebp]
	mov	DWORD PTR [edx+284], ecx

; 188  : 		SetBits( tex->flags, TF_CLAMP );

	mov	eax, DWORD PTR _tex$[ebp]
	mov	ecx, DWORD PTR [eax+284]
	or	ecx, 2048				; 00000800H
	mov	edx, DWORD PTR _tex$[ebp]
	mov	DWORD PTR [edx+284], ecx
$LN22@GL_ApplyTe:

; 189  : 	}
; 190  : 
; 191  : 	// only seamless cubemaps allows wrap 'clamp_to_border"
; 192  : 	if( tex->target == GL_TEXTURE_CUBE_MAP_ARB && !GL_Support( GL_ARB_SEAMLESS_CUBEMAP ) && FBitSet( tex->flags, TF_BORDER ))

	mov	eax, DWORD PTR _tex$[ebp]
	cmp	DWORD PTR [eax+268], 34067		; 00008513H
	jne	SHORT $LN23@GL_ApplyTe
	push	18					; 00000012H
	call	_GL_Support
	add	esp, 4
	test	eax, eax
	jne	SHORT $LN23@GL_ApplyTe
	mov	ecx, DWORD PTR _tex$[ebp]
	mov	edx, DWORD PTR [ecx+284]
	and	edx, 524288				; 00080000H
	je	SHORT $LN23@GL_ApplyTe

; 193  : 		ClearBits( tex->flags, TF_BORDER );

	mov	eax, DWORD PTR _tex$[ebp]
	mov	ecx, DWORD PTR [eax+284]
	and	ecx, -524289				; fff7ffffH
	mov	edx, DWORD PTR _tex$[ebp]
	mov	DWORD PTR [edx+284], ecx
$LN23@GL_ApplyTe:

; 194  : 
; 195  : 	// set texture wrap
; 196  : 	if( FBitSet( tex->flags, TF_BORDER ))

	mov	eax, DWORD PTR _tex$[ebp]
	mov	ecx, DWORD PTR [eax+284]
	and	ecx, 524288				; 00080000H
	je	$LN24@GL_ApplyTe

; 197  : 	{
; 198  : 		pglTexParameteri( tex->target, GL_TEXTURE_WRAP_S, GL_CLAMP_TO_BORDER );

	push	33069					; 0000812dH
	push	10242					; 00002802H
	mov	edx, DWORD PTR _tex$[ebp]
	mov	eax, DWORD PTR [edx+268]
	push	eax
	call	DWORD PTR _pglTexParameteri

; 199  : 
; 200  : 		if( tex->target != GL_TEXTURE_1D )

	mov	ecx, DWORD PTR _tex$[ebp]
	cmp	DWORD PTR [ecx+268], 3552		; 00000de0H
	je	SHORT $LN26@GL_ApplyTe

; 201  : 			pglTexParameteri( tex->target, GL_TEXTURE_WRAP_T, GL_CLAMP_TO_BORDER );

	push	33069					; 0000812dH
	push	10243					; 00002803H
	mov	edx, DWORD PTR _tex$[ebp]
	mov	eax, DWORD PTR [edx+268]
	push	eax
	call	DWORD PTR _pglTexParameteri
$LN26@GL_ApplyTe:

; 202  : 
; 203  : 		if( tex->target == GL_TEXTURE_3D || tex->target == GL_TEXTURE_CUBE_MAP_ARB )

	mov	ecx, DWORD PTR _tex$[ebp]
	cmp	DWORD PTR [ecx+268], 32879		; 0000806fH
	je	SHORT $LN28@GL_ApplyTe
	mov	edx, DWORD PTR _tex$[ebp]
	cmp	DWORD PTR [edx+268], 34067		; 00008513H
	jne	SHORT $LN27@GL_ApplyTe
$LN28@GL_ApplyTe:

; 204  : 			pglTexParameteri( tex->target, GL_TEXTURE_WRAP_R, GL_CLAMP_TO_BORDER );

	push	33069					; 0000812dH
	push	32882					; 00008072H
	mov	eax, DWORD PTR _tex$[ebp]
	mov	ecx, DWORD PTR [eax+268]
	push	ecx
	call	DWORD PTR _pglTexParameteri
$LN27@GL_ApplyTe:

; 205  : 
; 206  : 		pglTexParameterfv( tex->target, GL_TEXTURE_BORDER_COLOR, border );

	lea	edx, DWORD PTR _border$[ebp]
	push	edx
	push	4100					; 00001004H
	mov	eax, DWORD PTR _tex$[ebp]
	mov	ecx, DWORD PTR [eax+268]
	push	ecx
	call	DWORD PTR _pglTexParameterfv

; 207  : 	}

	jmp	$LN40@GL_ApplyTe
$LN24@GL_ApplyTe:

; 208  : 	else if( FBitSet( tex->flags, TF_CLAMP ))

	mov	edx, DWORD PTR _tex$[ebp]
	mov	eax, DWORD PTR [edx+284]
	and	eax, 2048				; 00000800H
	je	$LN29@GL_ApplyTe

; 209  : 	{
; 210  : 		if( GL_Support( GL_CLAMPTOEDGE_EXT ))

	push	13					; 0000000dH
	call	_GL_Support
	add	esp, 4
	test	eax, eax
	je	SHORT $LN31@GL_ApplyTe

; 211  : 		{
; 212  : 			pglTexParameteri( tex->target, GL_TEXTURE_WRAP_S, GL_CLAMP_TO_EDGE );

	push	33071					; 0000812fH
	push	10242					; 00002802H
	mov	ecx, DWORD PTR _tex$[ebp]
	mov	edx, DWORD PTR [ecx+268]
	push	edx
	call	DWORD PTR _pglTexParameteri

; 213  : 
; 214  : 			if( tex->target != GL_TEXTURE_1D )

	mov	eax, DWORD PTR _tex$[ebp]
	cmp	DWORD PTR [eax+268], 3552		; 00000de0H
	je	SHORT $LN33@GL_ApplyTe

; 215  : 				pglTexParameteri( tex->target, GL_TEXTURE_WRAP_T, GL_CLAMP_TO_EDGE );

	push	33071					; 0000812fH
	push	10243					; 00002803H
	mov	ecx, DWORD PTR _tex$[ebp]
	mov	edx, DWORD PTR [ecx+268]
	push	edx
	call	DWORD PTR _pglTexParameteri
$LN33@GL_ApplyTe:

; 216  : 
; 217  : 			if( tex->target == GL_TEXTURE_3D || tex->target == GL_TEXTURE_CUBE_MAP_ARB )

	mov	eax, DWORD PTR _tex$[ebp]
	cmp	DWORD PTR [eax+268], 32879		; 0000806fH
	je	SHORT $LN35@GL_ApplyTe
	mov	ecx, DWORD PTR _tex$[ebp]
	cmp	DWORD PTR [ecx+268], 34067		; 00008513H
	jne	SHORT $LN34@GL_ApplyTe
$LN35@GL_ApplyTe:

; 218  : 				pglTexParameteri( tex->target, GL_TEXTURE_WRAP_R, GL_CLAMP_TO_EDGE );

	push	33071					; 0000812fH
	push	32882					; 00008072H
	mov	edx, DWORD PTR _tex$[ebp]
	mov	eax, DWORD PTR [edx+268]
	push	eax
	call	DWORD PTR _pglTexParameteri
$LN34@GL_ApplyTe:

; 219  : 		}

	jmp	SHORT $LN37@GL_ApplyTe
$LN31@GL_ApplyTe:

; 220  : 		else
; 221  : 		{
; 222  : 			pglTexParameteri( tex->target, GL_TEXTURE_WRAP_S, GL_CLAMP );

	push	10496					; 00002900H
	push	10242					; 00002802H
	mov	ecx, DWORD PTR _tex$[ebp]
	mov	edx, DWORD PTR [ecx+268]
	push	edx
	call	DWORD PTR _pglTexParameteri

; 223  : 
; 224  : 			if( tex->target != GL_TEXTURE_1D )

	mov	eax, DWORD PTR _tex$[ebp]
	cmp	DWORD PTR [eax+268], 3552		; 00000de0H
	je	SHORT $LN36@GL_ApplyTe

; 225  : 				pglTexParameteri( tex->target, GL_TEXTURE_WRAP_T, GL_CLAMP );

	push	10496					; 00002900H
	push	10243					; 00002803H
	mov	ecx, DWORD PTR _tex$[ebp]
	mov	edx, DWORD PTR [ecx+268]
	push	edx
	call	DWORD PTR _pglTexParameteri
$LN36@GL_ApplyTe:

; 226  : 
; 227  : 			if( tex->target == GL_TEXTURE_3D || tex->target == GL_TEXTURE_CUBE_MAP_ARB )

	mov	eax, DWORD PTR _tex$[ebp]
	cmp	DWORD PTR [eax+268], 32879		; 0000806fH
	je	SHORT $LN38@GL_ApplyTe
	mov	ecx, DWORD PTR _tex$[ebp]
	cmp	DWORD PTR [ecx+268], 34067		; 00008513H
	jne	SHORT $LN37@GL_ApplyTe
$LN38@GL_ApplyTe:

; 228  : 				pglTexParameteri( tex->target, GL_TEXTURE_WRAP_R, GL_CLAMP );

	push	10496					; 00002900H
	push	32882					; 00008072H
	mov	edx, DWORD PTR _tex$[ebp]
	mov	eax, DWORD PTR [edx+268]
	push	eax
	call	DWORD PTR _pglTexParameteri
$LN37@GL_ApplyTe:

; 229  : 		}
; 230  : 	}

	jmp	SHORT $LN40@GL_ApplyTe
$LN29@GL_ApplyTe:

; 231  : 	else
; 232  : 	{
; 233  : 		pglTexParameteri( tex->target, GL_TEXTURE_WRAP_S, GL_REPEAT );

	push	10497					; 00002901H
	push	10242					; 00002802H
	mov	ecx, DWORD PTR _tex$[ebp]
	mov	edx, DWORD PTR [ecx+268]
	push	edx
	call	DWORD PTR _pglTexParameteri

; 234  : 
; 235  : 		if( tex->target != GL_TEXTURE_1D )

	mov	eax, DWORD PTR _tex$[ebp]
	cmp	DWORD PTR [eax+268], 3552		; 00000de0H
	je	SHORT $LN39@GL_ApplyTe

; 236  : 			pglTexParameteri( tex->target, GL_TEXTURE_WRAP_T, GL_REPEAT );

	push	10497					; 00002901H
	push	10243					; 00002803H
	mov	ecx, DWORD PTR _tex$[ebp]
	mov	edx, DWORD PTR [ecx+268]
	push	edx
	call	DWORD PTR _pglTexParameteri
$LN39@GL_ApplyTe:

; 237  : 
; 238  : 		if( tex->target == GL_TEXTURE_3D || tex->target == GL_TEXTURE_CUBE_MAP_ARB )

	mov	eax, DWORD PTR _tex$[ebp]
	cmp	DWORD PTR [eax+268], 32879		; 0000806fH
	je	SHORT $LN41@GL_ApplyTe
	mov	ecx, DWORD PTR _tex$[ebp]
	cmp	DWORD PTR [ecx+268], 34067		; 00008513H
	jne	SHORT $LN40@GL_ApplyTe
$LN41@GL_ApplyTe:

; 239  : 			pglTexParameteri( tex->target, GL_TEXTURE_WRAP_R, GL_REPEAT );

	push	10497					; 00002901H
	push	32882					; 00008072H
	mov	edx, DWORD PTR _tex$[ebp]
	mov	eax, DWORD PTR [edx+268]
	push	eax
	call	DWORD PTR _pglTexParameteri
$LN40@GL_ApplyTe:

; 240  : 	}
; 241  : }

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_GL_ApplyTextureParams ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xash_build4529_src\engine\client\gl_image.c
_TEXT	SEGMENT
_texsize$ = -36						; size = 4
_numSides$ = -32					; size = 4
tv134 = -28						; size = 4
tv94 = -24						; size = 4
tv85 = -20						; size = 4
tv71 = -16						; size = 4
_i$ = -12						; size = 4
_j$ = -8						; size = 4
_tex$ = -4						; size = 4
_texnum$ = 8						; size = 4
_width$ = 12						; size = 4
_height$ = 16						; size = 4
_depth$ = 20						; size = 4
_GL_UpdateTexSize PROC

; 1427 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 36					; 00000024H

; 1428 : 	int		i, j, texsize;
; 1429 : 	int		numSides;
; 1430 : 	gl_texture_t	*tex;
; 1431 : 
; 1432 : 	if( texnum <= 0 || texnum >= MAX_TEXTURES )

	cmp	DWORD PTR _texnum$[ebp], 0
	jle	SHORT $LN9@GL_UpdateT
	cmp	DWORD PTR _texnum$[ebp], 4096		; 00001000H
	jl	SHORT $LN8@GL_UpdateT
$LN9@GL_UpdateT:

; 1433 : 		return;

	jmp	$LN1@GL_UpdateT
$LN8@GL_UpdateT:

; 1434 : 
; 1435 : 	tex = &gl_textures[texnum];

	imul	eax, DWORD PTR _texnum$[ebp], 320
	add	eax, OFFSET _gl_textures
	mov	DWORD PTR _tex$[ebp], eax

; 1436 : 	numSides = FBitSet( tex->flags, TF_CUBEMAP ) ? 6 : 1;

	mov	ecx, DWORD PTR _tex$[ebp]
	mov	edx, DWORD PTR [ecx+284]
	and	edx, 64					; 00000040H
	je	SHORT $LN11@GL_UpdateT
	mov	DWORD PTR tv71[ebp], 6
	jmp	SHORT $LN12@GL_UpdateT
$LN11@GL_UpdateT:
	mov	DWORD PTR tv71[ebp], 1
$LN12@GL_UpdateT:
	mov	eax, DWORD PTR tv71[ebp]
	mov	DWORD PTR _numSides$[ebp], eax

; 1437 : 	GL_SetTextureDimensions( tex, width, height, depth );

	mov	ecx, DWORD PTR _depth$[ebp]
	push	ecx
	mov	edx, DWORD PTR _height$[ebp]
	push	edx
	mov	eax, DWORD PTR _width$[ebp]
	push	eax
	mov	ecx, DWORD PTR _tex$[ebp]
	push	ecx
	call	_GL_SetTextureDimensions
	add	esp, 16					; 00000010H

; 1438 : 	tex->size = 0; // recompute now

	mov	edx, DWORD PTR _tex$[ebp]
	mov	DWORD PTR [edx+296], 0

; 1439 : 
; 1440 : 	for( i = 0; i < numSides; i++ )

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN4@GL_UpdateT
$LN2@GL_UpdateT:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN4@GL_UpdateT:
	mov	ecx, DWORD PTR _i$[ebp]
	cmp	ecx, DWORD PTR _numSides$[ebp]
	jge	$LN1@GL_UpdateT

; 1441 : 	{
; 1442 : 		for( j = 0; j < Q_max( 1, tex->numMips ); j++ )

	mov	DWORD PTR _j$[ebp], 0
	jmp	SHORT $LN7@GL_UpdateT
$LN5@GL_UpdateT:
	mov	edx, DWORD PTR _j$[ebp]
	add	edx, 1
	mov	DWORD PTR _j$[ebp], edx
$LN7@GL_UpdateT:
	mov	eax, DWORD PTR _tex$[ebp]
	movzx	ecx, BYTE PTR [eax+266]
	cmp	ecx, 1
	jge	SHORT $LN13@GL_UpdateT
	mov	DWORD PTR tv85[ebp], 1
	jmp	SHORT $LN14@GL_UpdateT
$LN13@GL_UpdateT:
	mov	edx, DWORD PTR _tex$[ebp]
	movzx	eax, BYTE PTR [edx+266]
	mov	DWORD PTR tv85[ebp], eax
$LN14@GL_UpdateT:
	mov	ecx, DWORD PTR _j$[ebp]
	cmp	ecx, DWORD PTR tv85[ebp]
	jge	$LN6@GL_UpdateT

; 1443 : 		{
; 1444 : 			width = Q_max( 1, ( tex->width >> j ));

	mov	edx, DWORD PTR _tex$[ebp]
	movzx	eax, WORD PTR [edx+260]
	mov	ecx, DWORD PTR _j$[ebp]
	sar	eax, cl
	cmp	eax, 1
	jge	SHORT $LN15@GL_UpdateT
	mov	DWORD PTR tv94[ebp], 1
	jmp	SHORT $LN16@GL_UpdateT
$LN15@GL_UpdateT:
	mov	ecx, DWORD PTR _tex$[ebp]
	movzx	edx, WORD PTR [ecx+260]
	mov	ecx, DWORD PTR _j$[ebp]
	sar	edx, cl
	mov	DWORD PTR tv94[ebp], edx
$LN16@GL_UpdateT:
	mov	eax, DWORD PTR tv94[ebp]
	mov	DWORD PTR _width$[ebp], eax

; 1445 : 			height = Q_max( 1, ( tex->height >> j ));

	mov	ecx, DWORD PTR _tex$[ebp]
	movzx	edx, WORD PTR [ecx+262]
	mov	ecx, DWORD PTR _j$[ebp]
	sar	edx, cl
	cmp	edx, 1
	jge	SHORT $LN17@GL_UpdateT
	mov	DWORD PTR tv134[ebp], 1
	jmp	SHORT $LN18@GL_UpdateT
$LN17@GL_UpdateT:
	mov	eax, DWORD PTR _tex$[ebp]
	movzx	edx, WORD PTR [eax+262]
	mov	ecx, DWORD PTR _j$[ebp]
	sar	edx, cl
	mov	DWORD PTR tv134[ebp], edx
$LN18@GL_UpdateT:
	mov	eax, DWORD PTR tv134[ebp]
	mov	DWORD PTR _height$[ebp], eax

; 1446 : 			texsize = GL_CalcTextureSize( tex->format, width, height, tex->depth );

	mov	ecx, DWORD PTR _tex$[ebp]
	movzx	edx, WORD PTR [ecx+264]
	push	edx
	mov	eax, DWORD PTR _height$[ebp]
	push	eax
	mov	ecx, DWORD PTR _width$[ebp]
	push	ecx
	mov	edx, DWORD PTR _tex$[ebp]
	mov	eax, DWORD PTR [edx+276]
	push	eax
	call	_GL_CalcTextureSize
	add	esp, 16					; 00000010H
	mov	DWORD PTR _texsize$[ebp], eax

; 1447 : 			tex->size += texsize;

	mov	ecx, DWORD PTR _tex$[ebp]
	mov	edx, DWORD PTR [ecx+296]
	add	edx, DWORD PTR _texsize$[ebp]
	mov	eax, DWORD PTR _tex$[ebp]
	mov	DWORD PTR [eax+296], edx

; 1448 : 		}

	jmp	$LN5@GL_UpdateT
$LN6@GL_UpdateT:

; 1449 : 	}

	jmp	$LN2@GL_UpdateT
$LN1@GL_UpdateT:

; 1450 : }

	mov	esp, ebp
	pop	ebp
	ret	0
_GL_UpdateTexSize ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xash_build4529_src\engine\client\gl_image.c
_TEXT	SEGMENT
_pic$ = -12						; size = 4
_flags$ = -8						; size = 4
_image$ = -4						; size = 4
_texnum$ = 8						; size = 4
_gamma$ = 12						; size = 4
_topColor$ = 16						; size = 4
_bottomColor$ = 20					; size = 4
_GL_ProcessTexture PROC

; 1828 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH

; 1829 : 	gl_texture_t	*image;
; 1830 : 	rgbdata_t		*pic;
; 1831 : 	int		flags = 0;

	mov	DWORD PTR _flags$[ebp], 0

; 1832 : 
; 1833 : 	if( texnum <= 0 || texnum >= MAX_TEXTURES )

	cmp	DWORD PTR _texnum$[ebp], 0
	jle	SHORT $LN3@GL_Process
	cmp	DWORD PTR _texnum$[ebp], 4096		; 00001000H
	jl	SHORT $LN2@GL_Process
$LN3@GL_Process:

; 1834 : 		return; // missed image

	jmp	$LN1@GL_Process
$LN2@GL_Process:

; 1835 : 	image = &gl_textures[texnum];

	imul	eax, DWORD PTR _texnum$[ebp], 320
	add	eax, OFFSET _gl_textures
	mov	DWORD PTR _image$[ebp], eax

; 1836 : 
; 1837 : 	// select mode
; 1838 : 	if( gamma != -1.0f )

	movss	xmm0, DWORD PTR _gamma$[ebp]
	ucomiss	xmm0, DWORD PTR __real@bf800000
	lahf
	test	ah, 68					; 00000044H
	jnp	SHORT $LN4@GL_Process

; 1839 : 	{
; 1840 : 		flags = IMAGE_LIGHTGAMMA;

	mov	DWORD PTR _flags$[ebp], 67108864	; 04000000H

; 1841 : 	}

	jmp	SHORT $LN7@GL_Process
$LN4@GL_Process:

; 1842 : 	else if( topColor != -1 && bottomColor != -1 )

	cmp	DWORD PTR _topColor$[ebp], -1
	je	SHORT $LN6@GL_Process
	cmp	DWORD PTR _bottomColor$[ebp], -1
	je	SHORT $LN6@GL_Process

; 1843 : 	{
; 1844 : 		flags = IMAGE_REMAP;

	mov	DWORD PTR _flags$[ebp], 134217728	; 08000000H

; 1845 : 	}

	jmp	SHORT $LN7@GL_Process
$LN6@GL_Process:

; 1846 : 	else
; 1847 : 	{
; 1848 : 		Con_Printf( S_ERROR "GL_ProcessTexture: bad operation for %s\n", image->name );

	mov	ecx, DWORD PTR _image$[ebp]
	push	ecx
	push	OFFSET $SG144304
	call	_Con_Printf
	add	esp, 8

; 1849 : 		return;

	jmp	$LN1@GL_Process
$LN7@GL_Process:

; 1850 : 	}
; 1851 : 
; 1852 : 	if( !image->original )

	mov	edx, DWORD PTR _image$[ebp]
	cmp	DWORD PTR [edx+292], 0
	jne	SHORT $LN8@GL_Process

; 1853 : 	{
; 1854 : 		Con_Printf( S_ERROR "GL_ProcessTexture: no input data for %s\n", image->name );

	mov	eax, DWORD PTR _image$[ebp]
	push	eax
	push	OFFSET $SG144306
	call	_Con_Printf
	add	esp, 8

; 1855 : 		return;

	jmp	$LN1@GL_Process
$LN8@GL_Process:

; 1856 : 	}
; 1857 : 
; 1858 : 	if( ImageDXT( image->original->type ))

	mov	ecx, DWORD PTR _image$[ebp]
	mov	edx, DWORD PTR [ecx+292]
	cmp	DWORD PTR [edx+8], 8
	je	SHORT $LN10@GL_Process
	mov	eax, DWORD PTR _image$[ebp]
	mov	ecx, DWORD PTR [eax+292]
	cmp	DWORD PTR [ecx+8], 9
	je	SHORT $LN10@GL_Process
	mov	edx, DWORD PTR _image$[ebp]
	mov	eax, DWORD PTR [edx+292]
	cmp	DWORD PTR [eax+8], 10			; 0000000aH
	je	SHORT $LN10@GL_Process
	mov	ecx, DWORD PTR _image$[ebp]
	mov	edx, DWORD PTR [ecx+292]
	cmp	DWORD PTR [edx+8], 11			; 0000000bH
	jne	SHORT $LN9@GL_Process
$LN10@GL_Process:

; 1859 : 	{
; 1860 : 		Con_Printf( S_ERROR "GL_ProcessTexture: can't process compressed texture %s\n", image->name );

	mov	eax, DWORD PTR _image$[ebp]
	push	eax
	push	OFFSET $SG144309
	call	_Con_Printf
	add	esp, 8

; 1861 : 		return;

	jmp	SHORT $LN1@GL_Process
$LN9@GL_Process:

; 1862 : 	}
; 1863 : 
; 1864 : 	// all the operations makes over the image copy not an original
; 1865 : 	pic = FS_CopyImage( image->original );

	mov	ecx, DWORD PTR _image$[ebp]
	mov	edx, DWORD PTR [ecx+292]
	push	edx
	call	_FS_CopyImage
	add	esp, 4
	mov	DWORD PTR _pic$[ebp], eax

; 1866 : 	Image_Process( &pic, topColor, bottomColor, flags, 0.0f );

	push	ecx
	xorps	xmm0, xmm0
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _flags$[ebp]
	push	eax
	mov	ecx, DWORD PTR _bottomColor$[ebp]
	push	ecx
	mov	edx, DWORD PTR _topColor$[ebp]
	push	edx
	lea	eax, DWORD PTR _pic$[ebp]
	push	eax
	call	_Image_Process
	add	esp, 20					; 00000014H

; 1867 : 
; 1868 : 	GL_UploadTexture( image, pic );

	mov	ecx, DWORD PTR _pic$[ebp]
	push	ecx
	mov	edx, DWORD PTR _image$[ebp]
	push	edx
	call	_GL_UploadTexture
	add	esp, 8

; 1869 : 	GL_ApplyTextureParams( image ); // update texture filter, wrap etc

	mov	eax, DWORD PTR _image$[ebp]
	push	eax
	call	_GL_ApplyTextureParams
	add	esp, 4

; 1870 : 
; 1871 : 	FS_FreeImage( pic );

	mov	ecx, DWORD PTR _pic$[ebp]
	push	ecx
	call	_FS_FreeImage
	add	esp, 4
$LN1@GL_Process:

; 1872 : }

	mov	esp, ebp
	pop	ebp
	ret	0
_GL_ProcessTexture ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xash_build4529_src\engine\client\gl_image.c
_TEXT	SEGMENT
tv74 = -52						; size = 4
tv71 = -48						; size = 4
tv68 = -44						; size = 4
_r_empty$ = -40						; size = 36
__$ArrayPad$ = -4					; size = 4
_name$ = 8						; size = 4
_width$ = 12						; size = 4
_height$ = 16						; size = 4
_depth$ = 20						; size = 4
_buffer$ = 24						; size = 4
_flags$ = 28						; size = 4
_GL_CreateTextureArray PROC

; 1739 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 52					; 00000034H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 1740 : 	rgbdata_t	r_empty;
; 1741 : 
; 1742 : 	memset( &r_empty, 0, sizeof( r_empty ));

	push	36					; 00000024H
	push	0
	lea	eax, DWORD PTR _r_empty$[ebp]
	push	eax
	call	_memset
	add	esp, 12					; 0000000cH

; 1743 : 	r_empty.width = Q_max( width, 1 );

	cmp	DWORD PTR _width$[ebp], 1
	jle	SHORT $LN9@GL_CreateT
	mov	ecx, DWORD PTR _width$[ebp]
	mov	DWORD PTR tv68[ebp], ecx
	jmp	SHORT $LN10@GL_CreateT
$LN9@GL_CreateT:
	mov	DWORD PTR tv68[ebp], 1
$LN10@GL_CreateT:
	mov	dx, WORD PTR tv68[ebp]
	mov	WORD PTR _r_empty$[ebp], dx

; 1744 : 	r_empty.height = Q_max( height, 1 );

	cmp	DWORD PTR _height$[ebp], 1
	jle	SHORT $LN11@GL_CreateT
	mov	eax, DWORD PTR _height$[ebp]
	mov	DWORD PTR tv71[ebp], eax
	jmp	SHORT $LN12@GL_CreateT
$LN11@GL_CreateT:
	mov	DWORD PTR tv71[ebp], 1
$LN12@GL_CreateT:
	mov	cx, WORD PTR tv71[ebp]
	mov	WORD PTR _r_empty$[ebp+2], cx

; 1745 : 	r_empty.depth = Q_max( depth, 1 );

	cmp	DWORD PTR _depth$[ebp], 1
	jle	SHORT $LN13@GL_CreateT
	mov	edx, DWORD PTR _depth$[ebp]
	mov	DWORD PTR tv74[ebp], edx
	jmp	SHORT $LN14@GL_CreateT
$LN13@GL_CreateT:
	mov	DWORD PTR tv74[ebp], 1
$LN14@GL_CreateT:
	mov	ax, WORD PTR tv74[ebp]
	mov	WORD PTR _r_empty$[ebp+4], ax

; 1746 : 	r_empty.type = PF_RGBA_32;

	mov	DWORD PTR _r_empty$[ebp+8], 3

; 1747 : 	r_empty.size = r_empty.width * r_empty.height * r_empty.depth * 4;

	movzx	ecx, WORD PTR _r_empty$[ebp]
	movzx	edx, WORD PTR _r_empty$[ebp+2]
	imul	ecx, edx
	movzx	eax, WORD PTR _r_empty$[ebp+4]
	imul	ecx, eax
	shl	ecx, 2
	mov	DWORD PTR _r_empty$[ebp+32], ecx

; 1748 : 	r_empty.buffer = (byte *)buffer;

	mov	ecx, DWORD PTR _buffer$[ebp]
	mov	DWORD PTR _r_empty$[ebp+24], ecx

; 1749 : 
; 1750 : 	// clear invalid combinations
; 1751 : 	ClearBits( flags, TF_CUBEMAP|TF_SKYSIDE|TF_HAS_LUMA|TF_MAKELUMA|TF_ALPHACONTRAST );

	mov	edx, DWORD PTR _flags$[ebp]
	and	edx, -4219969				; ffbf9bbfH
	mov	DWORD PTR _flags$[ebp], edx

; 1752 : 
; 1753 : 	// if image not luminance it will have color
; 1754 : 	if( !FBitSet( flags, TF_LUMINANCE ))

	mov	eax, DWORD PTR _flags$[ebp]
	and	eax, 512				; 00000200H
	jne	SHORT $LN2@GL_CreateT

; 1755 : 		SetBits( r_empty.flags, IMAGE_HAS_COLOR );

	mov	ecx, DWORD PTR _r_empty$[ebp+12]
	or	ecx, 4
	mov	DWORD PTR _r_empty$[ebp+12], ecx
$LN2@GL_CreateT:

; 1756 : 
; 1757 : 	if( FBitSet( flags, TF_HAS_ALPHA ))

	mov	edx, DWORD PTR _flags$[ebp]
	and	edx, 65536				; 00010000H
	je	SHORT $LN3@GL_CreateT

; 1758 : 		SetBits( r_empty.flags, IMAGE_HAS_ALPHA );

	mov	eax, DWORD PTR _r_empty$[ebp+12]
	or	eax, 2
	mov	DWORD PTR _r_empty$[ebp+12], eax
$LN3@GL_CreateT:

; 1759 : 
; 1760 : 	if( FBitSet( flags, TF_TEXTURE_3D ))

	mov	ecx, DWORD PTR _flags$[ebp]
	and	ecx, 1048576				; 00100000H
	je	SHORT $LN4@GL_CreateT

; 1761 : 	{
; 1762 : 		if( !GL_Support( GL_TEXTURE_3D_EXT ))

	push	12					; 0000000cH
	call	_GL_Support
	add	esp, 4
	test	eax, eax
	jne	SHORT $LN6@GL_CreateT

; 1763 : 			return 0;

	xor	eax, eax
	jmp	SHORT $LN1@GL_CreateT
$LN6@GL_CreateT:

; 1764 : 	}

	jmp	SHORT $LN5@GL_CreateT
$LN4@GL_CreateT:

; 1765 : 	else
; 1766 : 	{
; 1767 : 		if( !GL_Support( GL_TEXTURE_ARRAY_EXT ))

	push	11					; 0000000bH
	call	_GL_Support
	add	esp, 4
	test	eax, eax
	jne	SHORT $LN7@GL_CreateT

; 1768 : 			return 0;

	xor	eax, eax
	jmp	SHORT $LN1@GL_CreateT
$LN7@GL_CreateT:

; 1769 : 		SetBits( r_empty.flags, IMAGE_MULTILAYER );

	mov	edx, DWORD PTR _r_empty$[ebp+12]
	or	edx, 256				; 00000100H
	mov	DWORD PTR _r_empty$[ebp+12], edx
$LN5@GL_CreateT:

; 1770 : 	}
; 1771 : 
; 1772 : 	return GL_LoadTextureInternal( name, &r_empty, flags );

	push	0
	mov	eax, DWORD PTR _flags$[ebp]
	push	eax
	lea	ecx, DWORD PTR _r_empty$[ebp]
	push	ecx
	mov	edx, DWORD PTR _name$[ebp]
	push	edx
	call	_GL_LoadTextureFromBuffer
	add	esp, 16					; 00000010H
$LN1@GL_CreateT:

; 1773 : }

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_GL_CreateTextureArray ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xash_build4529_src\engine\client\gl_image.c
_TEXT	SEGMENT
_update$ = -52						; size = 4
tv66 = -48						; size = 4
_datasize$ = -44					; size = 4
_r_empty$ = -40						; size = 36
__$ArrayPad$ = -4					; size = 4
_name$ = 8						; size = 4
_width$ = 12						; size = 4
_height$ = 16						; size = 4
_buffer$ = 20						; size = 4
_flags$ = 24						; size = 4
_GL_CreateTexture PROC

; 1692 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 52					; 00000034H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 1693 : 	qboolean	update = FBitSet( flags, TF_UPDATE ) ? true : false;

	mov	eax, DWORD PTR _flags$[ebp]
	and	eax, 262144				; 00040000H
	je	SHORT $LN10@GL_CreateT
	mov	DWORD PTR tv66[ebp], 1
	jmp	SHORT $LN11@GL_CreateT
$LN10@GL_CreateT:
	mov	DWORD PTR tv66[ebp], 0
$LN11@GL_CreateT:
	mov	ecx, DWORD PTR tv66[ebp]
	mov	DWORD PTR _update$[ebp], ecx

; 1694 : 	int	datasize = 1;

	mov	DWORD PTR _datasize$[ebp], 1

; 1695 : 	rgbdata_t	r_empty;
; 1696 : 
; 1697 : 	if( FBitSet( flags, TF_ARB_16BIT ))

	mov	edx, DWORD PTR _flags$[ebp]
	and	edx, 268435456				; 10000000H
	je	SHORT $LN2@GL_CreateT

; 1698 : 		datasize = 2;

	mov	DWORD PTR _datasize$[ebp], 2
	jmp	SHORT $LN3@GL_CreateT
$LN2@GL_CreateT:

; 1699 : 	else if( FBitSet( flags, TF_ARB_FLOAT ))

	mov	eax, DWORD PTR _flags$[ebp]
	and	eax, 67108864				; 04000000H
	je	SHORT $LN3@GL_CreateT

; 1700 : 		datasize = 4;

	mov	DWORD PTR _datasize$[ebp], 4
$LN3@GL_CreateT:

; 1701 : 
; 1702 : 	ClearBits( flags, TF_UPDATE );

	mov	ecx, DWORD PTR _flags$[ebp]
	and	ecx, -262145				; fffbffffH
	mov	DWORD PTR _flags$[ebp], ecx

; 1703 : 	memset( &r_empty, 0, sizeof( r_empty ));

	push	36					; 00000024H
	push	0
	lea	edx, DWORD PTR _r_empty$[ebp]
	push	edx
	call	_memset
	add	esp, 12					; 0000000cH

; 1704 : 	r_empty.width = width;

	mov	ax, WORD PTR _width$[ebp]
	mov	WORD PTR _r_empty$[ebp], ax

; 1705 : 	r_empty.height = height;

	mov	cx, WORD PTR _height$[ebp]
	mov	WORD PTR _r_empty$[ebp+2], cx

; 1706 : 	r_empty.type = PF_RGBA_32;

	mov	DWORD PTR _r_empty$[ebp+8], 3

; 1707 : 	r_empty.size = r_empty.width * r_empty.height * datasize * 4;

	movzx	edx, WORD PTR _r_empty$[ebp]
	movzx	eax, WORD PTR _r_empty$[ebp+2]
	imul	edx, eax
	imul	edx, DWORD PTR _datasize$[ebp]
	shl	edx, 2
	mov	DWORD PTR _r_empty$[ebp+32], edx

; 1708 : 	r_empty.buffer = (byte *)buffer;

	mov	ecx, DWORD PTR _buffer$[ebp]
	mov	DWORD PTR _r_empty$[ebp+24], ecx

; 1709 : 
; 1710 : 	// clear invalid combinations
; 1711 : 	ClearBits( flags, TF_TEXTURE_3D );

	mov	edx, DWORD PTR _flags$[ebp]
	and	edx, -1048577				; ffefffffH
	mov	DWORD PTR _flags$[ebp], edx

; 1712 : 
; 1713 : 	// if image not luminance and not alphacontrast it will have color
; 1714 : 	if( !FBitSet( flags, TF_LUMINANCE ) && !FBitSet( flags, TF_ALPHACONTRAST ))

	mov	eax, DWORD PTR _flags$[ebp]
	and	eax, 512				; 00000200H
	jne	SHORT $LN5@GL_CreateT
	mov	ecx, DWORD PTR _flags$[ebp]
	and	ecx, 4194304				; 00400000H
	jne	SHORT $LN5@GL_CreateT

; 1715 : 		SetBits( r_empty.flags, IMAGE_HAS_COLOR );

	mov	edx, DWORD PTR _r_empty$[ebp+12]
	or	edx, 4
	mov	DWORD PTR _r_empty$[ebp+12], edx
$LN5@GL_CreateT:

; 1716 : 
; 1717 : 	if( FBitSet( flags, TF_HAS_ALPHA ))

	mov	eax, DWORD PTR _flags$[ebp]
	and	eax, 65536				; 00010000H
	je	SHORT $LN6@GL_CreateT

; 1718 : 		SetBits( r_empty.flags, IMAGE_HAS_ALPHA );

	mov	ecx, DWORD PTR _r_empty$[ebp+12]
	or	ecx, 2
	mov	DWORD PTR _r_empty$[ebp+12], ecx
$LN6@GL_CreateT:

; 1719 : 
; 1720 : 	if( FBitSet( flags, TF_CUBEMAP ))

	mov	edx, DWORD PTR _flags$[ebp]
	and	edx, 64					; 00000040H
	je	SHORT $LN7@GL_CreateT

; 1721 : 	{
; 1722 : 		if( !GL_Support( GL_TEXTURE_CUBEMAP_EXT ))

	push	5
	call	_GL_Support
	add	esp, 4
	test	eax, eax
	jne	SHORT $LN8@GL_CreateT

; 1723 : 			return 0;

	xor	eax, eax
	jmp	SHORT $LN1@GL_CreateT
$LN8@GL_CreateT:

; 1724 : 		SetBits( r_empty.flags, IMAGE_CUBEMAP );

	mov	eax, DWORD PTR _r_empty$[ebp+12]
	or	eax, 1
	mov	DWORD PTR _r_empty$[ebp+12], eax

; 1725 : 		r_empty.size *= 6;

	imul	ecx, DWORD PTR _r_empty$[ebp+32], 6
	mov	DWORD PTR _r_empty$[ebp+32], ecx
$LN7@GL_CreateT:

; 1726 : 	}
; 1727 : 
; 1728 : 	return GL_LoadTextureFromBuffer( name, &r_empty, flags, update );

	mov	edx, DWORD PTR _update$[ebp]
	push	edx
	mov	eax, DWORD PTR _flags$[ebp]
	push	eax
	lea	ecx, DWORD PTR _r_empty$[ebp]
	push	ecx
	mov	edx, DWORD PTR _name$[ebp]
	push	edx
	call	_GL_LoadTextureFromBuffer
	add	esp, 16					; 00000010H
$LN1@GL_CreateT:

; 1729 : }

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_GL_CreateTexture ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xash_build4529_src\engine\client\gl_image.c
_TEXT	SEGMENT
tv537 = -32840						; size = 4
_in$ = -32836						; size = 4
_fracStep$ = -32832					; size = 4
_inRow2$ = -32828					; size = 4
_inRow1$ = -32824					; size = 4
_frac$ = -32820						; size = 4
_pix4$ = -32816						; size = 4
_pix3$ = -32812						; size = 4
_pix2$ = -32808						; size = 4
_pix1$ = -32804						; size = 4
_i$ = -32800						; size = 4
_y$ = -32796						; size = 4
_out$ = -32792						; size = 4
_x$ = -32788						; size = 4
_p2$ = -32784						; size = 16384
_p1$ = -16400						; size = 16384
_normal$ = -16						; size = 12
__$ArrayPad$ = -4					; size = 4
_source$ = 8						; size = 4
_inWidth$ = 12						; size = 4
_inHeight$ = 16						; size = 4
_outWidth$ = 20						; size = 4
_outHeight$ = 24					; size = 4
_isNormalMap$ = 28					; size = 4
_GL_ResampleTexture PROC

; 756  : {

	push	ebp
	mov	ebp, esp
	mov	eax, 32840				; 00008048H
	call	__chkstk
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 757  : 	uint		frac, fracStep;
; 758  : 	uint		*in = (uint *)source;

	mov	eax, DWORD PTR _source$[ebp]
	mov	DWORD PTR _in$[ebp], eax

; 759  : 	uint		p1[0x1000], p2[0x1000];
; 760  : 	byte		*pix1, *pix2, *pix3, *pix4;
; 761  : 	uint		*out, *inRow1, *inRow2;
; 762  : 	static byte	*scaledImage = NULL;	// pointer to a scaled image
; 763  : 	vec3_t		normal;
; 764  : 	int		i, x, y;
; 765  : 
; 766  : 	if( !source ) return NULL;

	cmp	DWORD PTR _source$[ebp], 0
	jne	SHORT $LN20@GL_Resampl
	xor	eax, eax
	jmp	$LN1@GL_Resampl
$LN20@GL_Resampl:

; 767  : 
; 768  : 	scaledImage = Mem_Realloc( r_temppool, scaledImage, outWidth * outHeight * 4 );

	push	768					; 00000300H
	push	OFFSET $SG143751
	push	1
	mov	ecx, DWORD PTR _outWidth$[ebp]
	imul	ecx, DWORD PTR _outHeight$[ebp]
	shl	ecx, 2
	push	ecx
	mov	edx, DWORD PTR ?scaledImage@?1??GL_ResampleTexture@@9@9
	push	edx
	mov	eax, DWORD PTR _r_temppool
	push	eax
	call	__Mem_Realloc
	add	esp, 24					; 00000018H
	mov	DWORD PTR ?scaledImage@?1??GL_ResampleTexture@@9@9, eax

; 769  : 	fracStep = inWidth * 0x10000 / outWidth;

	mov	eax, DWORD PTR _inWidth$[ebp]
	shl	eax, 16					; 00000010H
	cdq
	idiv	DWORD PTR _outWidth$[ebp]
	mov	DWORD PTR _fracStep$[ebp], eax

; 770  : 	out = (uint *)scaledImage;

	mov	ecx, DWORD PTR ?scaledImage@?1??GL_ResampleTexture@@9@9
	mov	DWORD PTR _out$[ebp], ecx

; 771  : 
; 772  : 	frac = fracStep >> 2;

	mov	edx, DWORD PTR _fracStep$[ebp]
	shr	edx, 2
	mov	DWORD PTR _frac$[ebp], edx

; 773  : 	for( i = 0; i < outWidth; i++ )

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN4@GL_Resampl
$LN2@GL_Resampl:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN4@GL_Resampl:
	mov	ecx, DWORD PTR _i$[ebp]
	cmp	ecx, DWORD PTR _outWidth$[ebp]
	jge	SHORT $LN3@GL_Resampl

; 774  : 	{
; 775  : 		p1[i] = 4 * (frac >> 16);

	mov	edx, DWORD PTR _frac$[ebp]
	shr	edx, 16					; 00000010H
	shl	edx, 2
	mov	eax, DWORD PTR _i$[ebp]
	mov	DWORD PTR _p1$[ebp+eax*4], edx

; 776  : 		frac += fracStep;

	mov	ecx, DWORD PTR _frac$[ebp]
	add	ecx, DWORD PTR _fracStep$[ebp]
	mov	DWORD PTR _frac$[ebp], ecx

; 777  : 	}

	jmp	SHORT $LN2@GL_Resampl
$LN3@GL_Resampl:

; 778  : 
; 779  : 	frac = (fracStep >> 2) * 3;

	mov	edx, DWORD PTR _fracStep$[ebp]
	shr	edx, 2
	imul	eax, edx, 3
	mov	DWORD PTR _frac$[ebp], eax

; 780  : 	for( i = 0; i < outWidth; i++ )

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN7@GL_Resampl
$LN5@GL_Resampl:
	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
$LN7@GL_Resampl:
	mov	edx, DWORD PTR _i$[ebp]
	cmp	edx, DWORD PTR _outWidth$[ebp]
	jge	SHORT $LN6@GL_Resampl

; 781  : 	{
; 782  : 		p2[i] = 4 * (frac >> 16);

	mov	eax, DWORD PTR _frac$[ebp]
	shr	eax, 16					; 00000010H
	shl	eax, 2
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR _p2$[ebp+ecx*4], eax

; 783  : 		frac += fracStep;

	mov	edx, DWORD PTR _frac$[ebp]
	add	edx, DWORD PTR _fracStep$[ebp]
	mov	DWORD PTR _frac$[ebp], edx

; 784  : 	}

	jmp	SHORT $LN5@GL_Resampl
$LN6@GL_Resampl:

; 785  : 
; 786  : 	if( isNormalMap )

	cmp	DWORD PTR _isNormalMap$[ebp], 0
	je	$LN21@GL_Resampl

; 787  : 	{
; 788  : 		for( y = 0; y < outHeight; y++, out += outWidth )

	mov	DWORD PTR _y$[ebp], 0
	jmp	SHORT $LN10@GL_Resampl
$LN8@GL_Resampl:
	mov	eax, DWORD PTR _y$[ebp]
	add	eax, 1
	mov	DWORD PTR _y$[ebp], eax
	mov	ecx, DWORD PTR _outWidth$[ebp]
	mov	edx, DWORD PTR _out$[ebp]
	lea	eax, DWORD PTR [edx+ecx*4]
	mov	DWORD PTR _out$[ebp], eax
$LN10@GL_Resampl:
	mov	ecx, DWORD PTR _y$[ebp]
	cmp	ecx, DWORD PTR _outHeight$[ebp]
	jge	$LN9@GL_Resampl

; 789  : 		{
; 790  : 			inRow1 = in + inWidth * (int)(((float)y + 0.25f) * inHeight / outHeight);

	cvtsi2ss xmm0, DWORD PTR _y$[ebp]
	addss	xmm0, DWORD PTR __real@3e800000
	cvtsi2ss xmm1, DWORD PTR _inHeight$[ebp]
	mulss	xmm0, xmm1
	cvtsi2ss xmm1, DWORD PTR _outHeight$[ebp]
	divss	xmm0, xmm1
	cvttss2si edx, xmm0
	imul	edx, DWORD PTR _inWidth$[ebp]
	mov	eax, DWORD PTR _in$[ebp]
	lea	ecx, DWORD PTR [eax+edx*4]
	mov	DWORD PTR _inRow1$[ebp], ecx

; 791  : 			inRow2 = in + inWidth * (int)(((float)y + 0.75f) * inHeight / outHeight);

	cvtsi2ss xmm0, DWORD PTR _y$[ebp]
	addss	xmm0, DWORD PTR __real@3f400000
	cvtsi2ss xmm1, DWORD PTR _inHeight$[ebp]
	mulss	xmm0, xmm1
	cvtsi2ss xmm1, DWORD PTR _outHeight$[ebp]
	divss	xmm0, xmm1
	cvttss2si edx, xmm0
	imul	edx, DWORD PTR _inWidth$[ebp]
	mov	eax, DWORD PTR _in$[ebp]
	lea	ecx, DWORD PTR [eax+edx*4]
	mov	DWORD PTR _inRow2$[ebp], ecx

; 792  : 
; 793  : 			for( x = 0; x < outWidth; x++ )

	mov	DWORD PTR _x$[ebp], 0
	jmp	SHORT $LN13@GL_Resampl
$LN11@GL_Resampl:
	mov	edx, DWORD PTR _x$[ebp]
	add	edx, 1
	mov	DWORD PTR _x$[ebp], edx
$LN13@GL_Resampl:
	mov	eax, DWORD PTR _x$[ebp]
	cmp	eax, DWORD PTR _outWidth$[ebp]
	jge	$LN12@GL_Resampl

; 794  : 			{
; 795  : 				pix1 = (byte *)inRow1 + p1[x];

	mov	ecx, DWORD PTR _x$[ebp]
	mov	edx, DWORD PTR _inRow1$[ebp]
	add	edx, DWORD PTR _p1$[ebp+ecx*4]
	mov	DWORD PTR _pix1$[ebp], edx

; 796  : 				pix2 = (byte *)inRow1 + p2[x];

	mov	eax, DWORD PTR _x$[ebp]
	mov	ecx, DWORD PTR _inRow1$[ebp]
	add	ecx, DWORD PTR _p2$[ebp+eax*4]
	mov	DWORD PTR _pix2$[ebp], ecx

; 797  : 				pix3 = (byte *)inRow2 + p1[x];

	mov	edx, DWORD PTR _x$[ebp]
	mov	eax, DWORD PTR _inRow2$[ebp]
	add	eax, DWORD PTR _p1$[ebp+edx*4]
	mov	DWORD PTR _pix3$[ebp], eax

; 798  : 				pix4 = (byte *)inRow2 + p2[x];

	mov	ecx, DWORD PTR _x$[ebp]
	mov	edx, DWORD PTR _inRow2$[ebp]
	add	edx, DWORD PTR _p2$[ebp+ecx*4]
	mov	DWORD PTR _pix4$[ebp], edx

; 799  : 
; 800  : 				normal[0] = MAKE_SIGNED( pix1[0] ) + MAKE_SIGNED( pix2[0] ) + MAKE_SIGNED( pix3[0] ) + MAKE_SIGNED( pix4[0] );

	mov	eax, 1
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _pix1$[ebp]
	movzx	eax, BYTE PTR [edx+ecx]
	cvtsi2ss xmm0, eax
	mulss	xmm0, DWORD PTR __real@3c010204
	subss	xmm0, DWORD PTR __real@3f800000
	mov	ecx, 1
	imul	edx, ecx, 0
	mov	eax, DWORD PTR _pix2$[ebp]
	movzx	ecx, BYTE PTR [eax+edx]
	cvtsi2ss xmm1, ecx
	mulss	xmm1, DWORD PTR __real@3c010204
	subss	xmm1, DWORD PTR __real@3f800000
	addss	xmm0, xmm1
	mov	edx, 1
	imul	eax, edx, 0
	mov	ecx, DWORD PTR _pix3$[ebp]
	movzx	edx, BYTE PTR [ecx+eax]
	cvtsi2ss xmm1, edx
	mulss	xmm1, DWORD PTR __real@3c010204
	subss	xmm1, DWORD PTR __real@3f800000
	addss	xmm0, xmm1
	mov	eax, 1
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _pix4$[ebp]
	movzx	eax, BYTE PTR [edx+ecx]
	cvtsi2ss xmm1, eax
	mulss	xmm1, DWORD PTR __real@3c010204
	subss	xmm1, DWORD PTR __real@3f800000
	addss	xmm0, xmm1
	mov	ecx, 4
	imul	edx, ecx, 0
	movss	DWORD PTR _normal$[ebp+edx], xmm0

; 801  : 				normal[1] = MAKE_SIGNED( pix1[1] ) + MAKE_SIGNED( pix2[1] ) + MAKE_SIGNED( pix3[1] ) + MAKE_SIGNED( pix4[1] );

	mov	eax, 1
	shl	eax, 0
	mov	ecx, DWORD PTR _pix1$[ebp]
	movzx	edx, BYTE PTR [ecx+eax]
	cvtsi2ss xmm0, edx
	mulss	xmm0, DWORD PTR __real@3c010204
	subss	xmm0, DWORD PTR __real@3f800000
	mov	eax, 1
	shl	eax, 0
	mov	ecx, DWORD PTR _pix2$[ebp]
	movzx	edx, BYTE PTR [ecx+eax]
	cvtsi2ss xmm1, edx
	mulss	xmm1, DWORD PTR __real@3c010204
	subss	xmm1, DWORD PTR __real@3f800000
	addss	xmm0, xmm1
	mov	eax, 1
	shl	eax, 0
	mov	ecx, DWORD PTR _pix3$[ebp]
	movzx	edx, BYTE PTR [ecx+eax]
	cvtsi2ss xmm1, edx
	mulss	xmm1, DWORD PTR __real@3c010204
	subss	xmm1, DWORD PTR __real@3f800000
	addss	xmm0, xmm1
	mov	eax, 1
	shl	eax, 0
	mov	ecx, DWORD PTR _pix4$[ebp]
	movzx	edx, BYTE PTR [ecx+eax]
	cvtsi2ss xmm1, edx
	mulss	xmm1, DWORD PTR __real@3c010204
	subss	xmm1, DWORD PTR __real@3f800000
	addss	xmm0, xmm1
	mov	eax, 4
	shl	eax, 0
	movss	DWORD PTR _normal$[ebp+eax], xmm0

; 802  : 				normal[2] = MAKE_SIGNED( pix1[2] ) + MAKE_SIGNED( pix2[2] ) + MAKE_SIGNED( pix3[2] ) + MAKE_SIGNED( pix4[2] );

	mov	ecx, 1
	shl	ecx, 1
	mov	edx, DWORD PTR _pix1$[ebp]
	movzx	eax, BYTE PTR [edx+ecx]
	cvtsi2ss xmm0, eax
	mulss	xmm0, DWORD PTR __real@3c010204
	subss	xmm0, DWORD PTR __real@3f800000
	mov	ecx, 1
	shl	ecx, 1
	mov	edx, DWORD PTR _pix2$[ebp]
	movzx	eax, BYTE PTR [edx+ecx]
	cvtsi2ss xmm1, eax
	mulss	xmm1, DWORD PTR __real@3c010204
	subss	xmm1, DWORD PTR __real@3f800000
	addss	xmm0, xmm1
	mov	ecx, 1
	shl	ecx, 1
	mov	edx, DWORD PTR _pix3$[ebp]
	movzx	eax, BYTE PTR [edx+ecx]
	cvtsi2ss xmm1, eax
	mulss	xmm1, DWORD PTR __real@3c010204
	subss	xmm1, DWORD PTR __real@3f800000
	addss	xmm0, xmm1
	mov	ecx, 1
	shl	ecx, 1
	mov	edx, DWORD PTR _pix4$[ebp]
	movzx	eax, BYTE PTR [edx+ecx]
	cvtsi2ss xmm1, eax
	mulss	xmm1, DWORD PTR __real@3c010204
	subss	xmm1, DWORD PTR __real@3f800000
	addss	xmm0, xmm1
	mov	ecx, 4
	shl	ecx, 1
	movss	DWORD PTR _normal$[ebp+ecx], xmm0

; 803  : 
; 804  : 				if( !VectorNormalizeLength( normal ))

	lea	edx, DWORD PTR _normal$[ebp]
	push	edx
	lea	eax, DWORD PTR _normal$[ebp]
	push	eax
	call	_VectorNormalizeLength2
	add	esp, 8
	fstp	DWORD PTR tv537[ebp]
	movss	xmm0, DWORD PTR tv537[ebp]
	ucomiss	xmm0, DWORD PTR __real@00000000
	lahf
	test	ah, 68					; 00000044H
	jp	SHORT $LN23@GL_Resampl

; 805  : 					VectorSet( normal, 0.5f, 0.5f, 1.0f );

	mov	ecx, 4
	imul	edx, ecx, 0
	movss	xmm0, DWORD PTR __real@3f000000
	movss	DWORD PTR _normal$[ebp+edx], xmm0
	mov	eax, 4
	shl	eax, 0
	movss	xmm0, DWORD PTR __real@3f000000
	movss	DWORD PTR _normal$[ebp+eax], xmm0
	mov	ecx, 4
	shl	ecx, 1
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR _normal$[ebp+ecx], xmm0
$LN23@GL_Resampl:

; 806  : 
; 807  : 				((byte *)(out+x))[0] = 128 + (byte)(127.0f * normal[0]);

	mov	edx, 4
	imul	eax, edx, 0
	movss	xmm0, DWORD PTR __real@42fe0000
	mulss	xmm0, DWORD PTR _normal$[ebp+eax]
	cvttss2si ecx, xmm0
	movzx	edx, cl
	add	edx, 128				; 00000080H
	mov	eax, DWORD PTR _x$[ebp]
	mov	ecx, DWORD PTR _out$[ebp]
	lea	eax, DWORD PTR [ecx+eax*4]
	mov	ecx, 1
	imul	ecx, ecx, 0
	mov	BYTE PTR [eax+ecx], dl

; 808  : 				((byte *)(out+x))[1] = 128 + (byte)(127.0f * normal[1]);

	mov	edx, 4
	shl	edx, 0
	movss	xmm0, DWORD PTR __real@42fe0000
	mulss	xmm0, DWORD PTR _normal$[ebp+edx]
	cvttss2si eax, xmm0
	movzx	ecx, al
	add	ecx, 128				; 00000080H
	mov	edx, DWORD PTR _x$[ebp]
	mov	eax, DWORD PTR _out$[ebp]
	lea	edx, DWORD PTR [eax+edx*4]
	mov	eax, 1
	shl	eax, 0
	mov	BYTE PTR [edx+eax], cl

; 809  : 				((byte *)(out+x))[2] = 128 + (byte)(127.0f * normal[2]);

	mov	ecx, 4
	shl	ecx, 1
	movss	xmm0, DWORD PTR __real@42fe0000
	mulss	xmm0, DWORD PTR _normal$[ebp+ecx]
	cvttss2si edx, xmm0
	movzx	eax, dl
	add	eax, 128				; 00000080H
	mov	ecx, DWORD PTR _x$[ebp]
	mov	edx, DWORD PTR _out$[ebp]
	lea	ecx, DWORD PTR [edx+ecx*4]
	mov	edx, 1
	shl	edx, 1
	mov	BYTE PTR [ecx+edx], al

; 810  : 				((byte *)(out+x))[3] = 255;

	mov	eax, DWORD PTR _x$[ebp]
	mov	ecx, DWORD PTR _out$[ebp]
	lea	edx, DWORD PTR [ecx+eax*4]
	mov	eax, 1
	imul	ecx, eax, 3
	mov	BYTE PTR [edx+ecx], 255			; 000000ffH

; 811  : 			}

	jmp	$LN11@GL_Resampl
$LN12@GL_Resampl:

; 812  : 		}

	jmp	$LN8@GL_Resampl
$LN9@GL_Resampl:

; 813  : 	}

	jmp	$LN15@GL_Resampl
$LN21@GL_Resampl:

; 814  : 	else
; 815  : 	{
; 816  : 		for( y = 0; y < outHeight; y++, out += outWidth )

	mov	DWORD PTR _y$[ebp], 0
	jmp	SHORT $LN16@GL_Resampl
$LN14@GL_Resampl:
	mov	edx, DWORD PTR _y$[ebp]
	add	edx, 1
	mov	DWORD PTR _y$[ebp], edx
	mov	eax, DWORD PTR _outWidth$[ebp]
	mov	ecx, DWORD PTR _out$[ebp]
	lea	edx, DWORD PTR [ecx+eax*4]
	mov	DWORD PTR _out$[ebp], edx
$LN16@GL_Resampl:
	mov	eax, DWORD PTR _y$[ebp]
	cmp	eax, DWORD PTR _outHeight$[ebp]
	jge	$LN15@GL_Resampl

; 817  : 		{
; 818  : 			inRow1 = in + inWidth * (int)(((float)y + 0.25f) * inHeight / outHeight);

	cvtsi2ss xmm0, DWORD PTR _y$[ebp]
	addss	xmm0, DWORD PTR __real@3e800000
	cvtsi2ss xmm1, DWORD PTR _inHeight$[ebp]
	mulss	xmm0, xmm1
	cvtsi2ss xmm1, DWORD PTR _outHeight$[ebp]
	divss	xmm0, xmm1
	cvttss2si ecx, xmm0
	imul	ecx, DWORD PTR _inWidth$[ebp]
	mov	edx, DWORD PTR _in$[ebp]
	lea	eax, DWORD PTR [edx+ecx*4]
	mov	DWORD PTR _inRow1$[ebp], eax

; 819  : 			inRow2 = in + inWidth * (int)(((float)y + 0.75f) * inHeight / outHeight);

	cvtsi2ss xmm0, DWORD PTR _y$[ebp]
	addss	xmm0, DWORD PTR __real@3f400000
	cvtsi2ss xmm1, DWORD PTR _inHeight$[ebp]
	mulss	xmm0, xmm1
	cvtsi2ss xmm1, DWORD PTR _outHeight$[ebp]
	divss	xmm0, xmm1
	cvttss2si ecx, xmm0
	imul	ecx, DWORD PTR _inWidth$[ebp]
	mov	edx, DWORD PTR _in$[ebp]
	lea	eax, DWORD PTR [edx+ecx*4]
	mov	DWORD PTR _inRow2$[ebp], eax

; 820  : 
; 821  : 			for( x = 0; x < outWidth; x++ )

	mov	DWORD PTR _x$[ebp], 0
	jmp	SHORT $LN19@GL_Resampl
$LN17@GL_Resampl:
	mov	ecx, DWORD PTR _x$[ebp]
	add	ecx, 1
	mov	DWORD PTR _x$[ebp], ecx
$LN19@GL_Resampl:
	mov	edx, DWORD PTR _x$[ebp]
	cmp	edx, DWORD PTR _outWidth$[ebp]
	jge	$LN18@GL_Resampl

; 822  : 			{
; 823  : 				pix1 = (byte *)inRow1 + p1[x];

	mov	eax, DWORD PTR _x$[ebp]
	mov	ecx, DWORD PTR _inRow1$[ebp]
	add	ecx, DWORD PTR _p1$[ebp+eax*4]
	mov	DWORD PTR _pix1$[ebp], ecx

; 824  : 				pix2 = (byte *)inRow1 + p2[x];

	mov	edx, DWORD PTR _x$[ebp]
	mov	eax, DWORD PTR _inRow1$[ebp]
	add	eax, DWORD PTR _p2$[ebp+edx*4]
	mov	DWORD PTR _pix2$[ebp], eax

; 825  : 				pix3 = (byte *)inRow2 + p1[x];

	mov	ecx, DWORD PTR _x$[ebp]
	mov	edx, DWORD PTR _inRow2$[ebp]
	add	edx, DWORD PTR _p1$[ebp+ecx*4]
	mov	DWORD PTR _pix3$[ebp], edx

; 826  : 				pix4 = (byte *)inRow2 + p2[x];

	mov	eax, DWORD PTR _x$[ebp]
	mov	ecx, DWORD PTR _inRow2$[ebp]
	add	ecx, DWORD PTR _p2$[ebp+eax*4]
	mov	DWORD PTR _pix4$[ebp], ecx

; 827  : 
; 828  : 				((byte *)(out+x))[0] = (pix1[0] + pix2[0] + pix3[0] + pix4[0]) >> 2;

	mov	edx, 1
	imul	eax, edx, 0
	mov	ecx, DWORD PTR _pix1$[ebp]
	movzx	edx, BYTE PTR [ecx+eax]
	mov	eax, 1
	imul	ecx, eax, 0
	mov	eax, DWORD PTR _pix2$[ebp]
	movzx	ecx, BYTE PTR [eax+ecx]
	add	edx, ecx
	mov	eax, 1
	imul	ecx, eax, 0
	mov	eax, DWORD PTR _pix3$[ebp]
	movzx	ecx, BYTE PTR [eax+ecx]
	add	edx, ecx
	mov	eax, 1
	imul	ecx, eax, 0
	mov	eax, DWORD PTR _pix4$[ebp]
	movzx	ecx, BYTE PTR [eax+ecx]
	add	edx, ecx
	sar	edx, 2
	mov	eax, DWORD PTR _x$[ebp]
	mov	ecx, DWORD PTR _out$[ebp]
	lea	eax, DWORD PTR [ecx+eax*4]
	mov	ecx, 1
	imul	ecx, ecx, 0
	mov	BYTE PTR [eax+ecx], dl

; 829  : 				((byte *)(out+x))[1] = (pix1[1] + pix2[1] + pix3[1] + pix4[1]) >> 2;

	mov	edx, 1
	shl	edx, 0
	mov	eax, DWORD PTR _pix1$[ebp]
	movzx	ecx, BYTE PTR [eax+edx]
	mov	edx, 1
	shl	edx, 0
	mov	eax, DWORD PTR _pix2$[ebp]
	movzx	edx, BYTE PTR [eax+edx]
	add	ecx, edx
	mov	eax, 1
	shl	eax, 0
	mov	edx, DWORD PTR _pix3$[ebp]
	movzx	eax, BYTE PTR [edx+eax]
	add	ecx, eax
	mov	edx, 1
	shl	edx, 0
	mov	eax, DWORD PTR _pix4$[ebp]
	movzx	edx, BYTE PTR [eax+edx]
	add	ecx, edx
	sar	ecx, 2
	mov	eax, DWORD PTR _x$[ebp]
	mov	edx, DWORD PTR _out$[ebp]
	lea	eax, DWORD PTR [edx+eax*4]
	mov	edx, 1
	shl	edx, 0
	mov	BYTE PTR [eax+edx], cl

; 830  : 				((byte *)(out+x))[2] = (pix1[2] + pix2[2] + pix3[2] + pix4[2]) >> 2;

	mov	eax, 1
	shl	eax, 1
	mov	ecx, DWORD PTR _pix1$[ebp]
	movzx	edx, BYTE PTR [ecx+eax]
	mov	eax, 1
	shl	eax, 1
	mov	ecx, DWORD PTR _pix2$[ebp]
	movzx	eax, BYTE PTR [ecx+eax]
	add	edx, eax
	mov	ecx, 1
	shl	ecx, 1
	mov	eax, DWORD PTR _pix3$[ebp]
	movzx	ecx, BYTE PTR [eax+ecx]
	add	edx, ecx
	mov	eax, 1
	shl	eax, 1
	mov	ecx, DWORD PTR _pix4$[ebp]
	movzx	eax, BYTE PTR [ecx+eax]
	add	edx, eax
	sar	edx, 2
	mov	ecx, DWORD PTR _x$[ebp]
	mov	eax, DWORD PTR _out$[ebp]
	lea	ecx, DWORD PTR [eax+ecx*4]
	mov	eax, 1
	shl	eax, 1
	mov	BYTE PTR [ecx+eax], dl

; 831  : 				((byte *)(out+x))[3] = (pix1[3] + pix2[3] + pix3[3] + pix4[3]) >> 2;

	mov	ecx, 1
	imul	edx, ecx, 3
	mov	eax, DWORD PTR _pix1$[ebp]
	movzx	ecx, BYTE PTR [eax+edx]
	mov	edx, 1
	imul	eax, edx, 3
	mov	edx, DWORD PTR _pix2$[ebp]
	movzx	eax, BYTE PTR [edx+eax]
	add	ecx, eax
	mov	edx, 1
	imul	eax, edx, 3
	mov	edx, DWORD PTR _pix3$[ebp]
	movzx	eax, BYTE PTR [edx+eax]
	add	ecx, eax
	mov	edx, 1
	imul	eax, edx, 3
	mov	edx, DWORD PTR _pix4$[ebp]
	movzx	eax, BYTE PTR [edx+eax]
	add	ecx, eax
	sar	ecx, 2
	mov	edx, DWORD PTR _x$[ebp]
	mov	eax, DWORD PTR _out$[ebp]
	lea	edx, DWORD PTR [eax+edx*4]
	mov	eax, 1
	imul	eax, eax, 3
	mov	BYTE PTR [edx+eax], cl

; 832  : 			}

	jmp	$LN17@GL_Resampl
$LN18@GL_Resampl:

; 833  : 		}

	jmp	$LN14@GL_Resampl
$LN15@GL_Resampl:

; 834  : 	}
; 835  : 
; 836  : 	return scaledImage;

	mov	eax, DWORD PTR ?scaledImage@?1??GL_ResampleTexture@@9@9
$LN1@GL_Resampl:

; 837  : }

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_GL_ResampleTexture ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xash_build4529_src\engine\client\gl_image.c
_TEXT	SEGMENT
_tex$ = -4						; size = 4
_name$ = 8						; size = 4
_pic$ = 12						; size = 4
_flags$ = 16						; size = 4
_update$ = 20						; size = 4
_GL_LoadTextureFromBuffer PROC

; 1647 : {

	push	ebp
	mov	ebp, esp
	push	ecx

; 1648 : 	gl_texture_t	*tex;
; 1649 : 
; 1650 : 	if( !GL_CheckTexName( name ))

	mov	eax, DWORD PTR _name$[ebp]
	push	eax
	call	_GL_CheckTexName
	add	esp, 4
	test	eax, eax
	jne	SHORT $LN2@GL_LoadTex

; 1651 : 		return 0;

	xor	eax, eax
	jmp	$LN1@GL_LoadTex
$LN2@GL_LoadTex:

; 1652 : 
; 1653 : 	// see if already loaded
; 1654 : 	if(( tex = GL_TextureForName( name )) && !update )

	mov	ecx, DWORD PTR _name$[ebp]
	push	ecx
	call	_GL_TextureForName
	add	esp, 4
	mov	DWORD PTR _tex$[ebp], eax
	cmp	DWORD PTR _tex$[ebp], 0
	je	SHORT $LN3@GL_LoadTex
	cmp	DWORD PTR _update$[ebp], 0
	jne	SHORT $LN3@GL_LoadTex

; 1655 : 		return (tex - gl_textures);

	mov	eax, DWORD PTR _tex$[ebp]
	sub	eax, OFFSET _gl_textures
	cdq
	mov	ecx, 320				; 00000140H
	idiv	ecx
	jmp	$LN1@GL_LoadTex
$LN3@GL_LoadTex:

; 1656 : 
; 1657 : 	// couldn't loading image
; 1658 : 	if( !pic ) return 0;

	cmp	DWORD PTR _pic$[ebp], 0
	jne	SHORT $LN4@GL_LoadTex
	xor	eax, eax
	jmp	$LN1@GL_LoadTex
$LN4@GL_LoadTex:

; 1659 : 
; 1660 : 	if( update )

	cmp	DWORD PTR _update$[ebp], 0
	je	SHORT $LN5@GL_LoadTex

; 1661 : 	{
; 1662 : 		if( tex == NULL )

	cmp	DWORD PTR _tex$[ebp], 0
	jne	SHORT $LN7@GL_LoadTex

; 1663 : 			Host_Error( "GL_LoadTextureFromBuffer: couldn't find texture %s for update\n", name );

	mov	edx, DWORD PTR _name$[ebp]
	push	edx
	push	OFFSET $SG144226
	call	_Host_Error
	add	esp, 8
$LN7@GL_LoadTex:

; 1664 : 		SetBits( tex->flags, flags );

	mov	eax, DWORD PTR _tex$[ebp]
	mov	ecx, DWORD PTR [eax+284]
	or	ecx, DWORD PTR _flags$[ebp]
	mov	edx, DWORD PTR _tex$[ebp]
	mov	DWORD PTR [edx+284], ecx

; 1665 : 	}

	jmp	SHORT $LN6@GL_LoadTex
$LN5@GL_LoadTex:

; 1666 : 	else
; 1667 : 	{
; 1668 : 		// allocate the new one
; 1669 : 		tex = GL_AllocTexture( name, flags );

	mov	eax, DWORD PTR _flags$[ebp]
	push	eax
	mov	ecx, DWORD PTR _name$[ebp]
	push	ecx
	call	_GL_AllocTexture
	add	esp, 8
	mov	DWORD PTR _tex$[ebp], eax
$LN6@GL_LoadTex:

; 1670 : 	}
; 1671 : 
; 1672 : 	GL_ProcessImage( tex, pic );

	mov	edx, DWORD PTR _pic$[ebp]
	push	edx
	mov	eax, DWORD PTR _tex$[ebp]
	push	eax
	call	_GL_ProcessImage
	add	esp, 8

; 1673 : 
; 1674 : 	if( !GL_UploadTexture( tex, pic ))

	mov	ecx, DWORD PTR _pic$[ebp]
	push	ecx
	mov	edx, DWORD PTR _tex$[ebp]
	push	edx
	call	_GL_UploadTexture
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN8@GL_LoadTex

; 1675 : 	{
; 1676 : 		memset( tex, 0, sizeof( gl_texture_t ));

	push	320					; 00000140H
	push	0
	mov	eax, DWORD PTR _tex$[ebp]
	push	eax
	call	_memset
	add	esp, 12					; 0000000cH

; 1677 : 		return 0;

	xor	eax, eax
	jmp	SHORT $LN1@GL_LoadTex
$LN8@GL_LoadTex:

; 1678 : 	}
; 1679 : 
; 1680 : 	GL_ApplyTextureParams( tex ); // update texture filter, wrap etc

	mov	ecx, DWORD PTR _tex$[ebp]
	push	ecx
	call	_GL_ApplyTextureParams
	add	esp, 4

; 1681 : 	return (tex - gl_textures);

	mov	eax, DWORD PTR _tex$[ebp]
	sub	eax, OFFSET _gl_textures
	cdq
	mov	ecx, 320				; 00000140H
	idiv	ecx
$LN1@GL_LoadTex:

; 1682 : }

	mov	esp, ebp
	pop	ebp
	ret	0
_GL_LoadTextureFromBuffer ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xash_build4529_src\engine\client\gl_image.c
_TEXT	SEGMENT
_picFlags$ = -580					; size = 4
_width$1 = -576						; size = 4
_height$2 = -572					; size = 4
tv279 = -568						; size = 4
tv271 = -564						; size = 4
tv262 = -560						; size = 4
$T3 = -556						; size = 4
_srcsize$4 = -552					; size = 4
_dstsize$5 = -548					; size = 4
_mipsize$6 = -544					; size = 4
_j$ = -540						; size = 4
_tex$ = -536						; size = 4
_numLayers$ = -532					; size = 4
_src$ = -528						; size = 4
_i$ = -524						; size = 4
_pic$ = -520						; size = 4
_basename$ = -516					; size = 256
_name$ = -260						; size = 256
__$ArrayPad$ = -4					; size = 4
_names$ = 8						; size = 4
_flags$ = 12						; size = 4
_GL_LoadTextureArray PROC

; 1506 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 580				; 00000244H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 1507 : 	rgbdata_t		*pic, *src;
; 1508 : 	char		basename[256];
; 1509 : 	uint		numLayers = 0;

	mov	DWORD PTR _numLayers$[ebp], 0

; 1510 : 	uint		picFlags = 0;

	mov	DWORD PTR _picFlags$[ebp], 0

; 1511 : 	char		name[256];
; 1512 : 	gl_texture_t	*tex;
; 1513 : 	uint		i, j;
; 1514 : 
; 1515 : 	if( !names || !names[0] || !glw_state.initialized )

	cmp	DWORD PTR _names$[ebp], 0
	je	SHORT $LN15@GL_LoadTex
	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _names$[ebp]
	cmp	DWORD PTR [edx+ecx], 0
	je	SHORT $LN15@GL_LoadTex
	cmp	DWORD PTR _glw_state+20, 0
	jne	SHORT $LN14@GL_LoadTex
$LN15@GL_LoadTex:

; 1516 : 		return 0;

	xor	eax, eax
	jmp	$LN1@GL_LoadTex
$LN14@GL_LoadTex:

; 1517 : 
; 1518 : 	// count layers (g-cont. this is pontentially unsafe loop)
; 1519 : 	for( i = 0; i < glConfig.max_2d_texture_layers && ( *names[i] != '\0' ); i++ )

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN4@GL_LoadTex
$LN2@GL_LoadTex:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN4@GL_LoadTex:
	mov	ecx, DWORD PTR _i$[ebp]
	cmp	ecx, DWORD PTR _glConfig+68
	jae	SHORT $LN3@GL_LoadTex
	mov	edx, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR _names$[ebp]
	mov	ecx, DWORD PTR [eax+edx*4]
	movsx	edx, BYTE PTR [ecx]
	test	edx, edx
	je	SHORT $LN3@GL_LoadTex

; 1520 : 		numLayers++;

	mov	eax, DWORD PTR _numLayers$[ebp]
	add	eax, 1
	mov	DWORD PTR _numLayers$[ebp], eax
	jmp	SHORT $LN2@GL_LoadTex
$LN3@GL_LoadTex:

; 1521 : 	name[0] = '\0';

	mov	ecx, 1
	imul	edx, ecx, 0
	mov	DWORD PTR $T3[ebp], edx
	cmp	DWORD PTR $T3[ebp], 256			; 00000100H
	jae	SHORT $LN36@GL_LoadTex
	jmp	SHORT $LN37@GL_LoadTex
$LN36@GL_LoadTex:
	call	___report_rangecheckfailure
$LN37@GL_LoadTex:
	mov	eax, DWORD PTR $T3[ebp]
	mov	BYTE PTR _name$[ebp+eax], 0

; 1522 : 
; 1523 : 	if( numLayers <= 0 ) return 0;

	cmp	DWORD PTR _numLayers$[ebp], 0
	ja	SHORT $LN16@GL_LoadTex
	xor	eax, eax
	jmp	$LN1@GL_LoadTex
$LN16@GL_LoadTex:

; 1524 : 
; 1525 : 	// create complexname from layer names
; 1526 : 	for( i = 0; i < numLayers; i++ )

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN7@GL_LoadTex
$LN5@GL_LoadTex:
	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
$LN7@GL_LoadTex:
	mov	edx, DWORD PTR _i$[ebp]
	cmp	edx, DWORD PTR _numLayers$[ebp]
	jae	SHORT $LN6@GL_LoadTex

; 1527 : 	{
; 1528 : 		COM_FileBase( names[i], basename );

	lea	eax, DWORD PTR _basename$[ebp]
	push	eax
	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR _names$[ebp]
	mov	eax, DWORD PTR [edx+ecx*4]
	push	eax
	call	_COM_FileBase
	add	esp, 8

; 1529 : 		Q_strncat( name, va( "%s", basename ), sizeof( name ));

	push	256					; 00000100H
	lea	ecx, DWORD PTR _basename$[ebp]
	push	ecx
	push	OFFSET $SG144180
	call	_va
	add	esp, 8
	push	eax
	lea	edx, DWORD PTR _name$[ebp]
	push	edx
	call	_Q_strncat
	add	esp, 12					; 0000000cH

; 1530 : 		if( i != ( numLayers - 1 )) Q_strncat( name, "|", sizeof( name ));

	mov	eax, DWORD PTR _numLayers$[ebp]
	sub	eax, 1
	cmp	DWORD PTR _i$[ebp], eax
	je	SHORT $LN17@GL_LoadTex
	push	256					; 00000100H
	push	OFFSET $SG144182
	lea	ecx, DWORD PTR _name$[ebp]
	push	ecx
	call	_Q_strncat
	add	esp, 12					; 0000000cH
$LN17@GL_LoadTex:

; 1531 : 	}

	jmp	$LN5@GL_LoadTex
$LN6@GL_LoadTex:

; 1532 : 
; 1533 : 	Q_strncat( name, va( "[%i]", numLayers ), sizeof( name ));

	push	256					; 00000100H
	mov	edx, DWORD PTR _numLayers$[ebp]
	push	edx
	push	OFFSET $SG144183
	call	_va
	add	esp, 8
	push	eax
	lea	eax, DWORD PTR _name$[ebp]
	push	eax
	call	_Q_strncat
	add	esp, 12					; 0000000cH

; 1534 : 
; 1535 : 	if( !GL_CheckTexName( name ))

	lea	ecx, DWORD PTR _name$[ebp]
	push	ecx
	call	_GL_CheckTexName
	add	esp, 4
	test	eax, eax
	jne	SHORT $LN18@GL_LoadTex

; 1536 : 		return 0;

	xor	eax, eax
	jmp	$LN1@GL_LoadTex
$LN18@GL_LoadTex:

; 1537 : 
; 1538 : 	// see if already loaded
; 1539 : 	if(( tex = GL_TextureForName( name )))

	lea	edx, DWORD PTR _name$[ebp]
	push	edx
	call	_GL_TextureForName
	add	esp, 4
	mov	DWORD PTR _tex$[ebp], eax
	cmp	DWORD PTR _tex$[ebp], 0
	je	SHORT $LN19@GL_LoadTex

; 1540 : 		return (tex - gl_textures);

	mov	eax, DWORD PTR _tex$[ebp]
	sub	eax, OFFSET _gl_textures
	cdq
	mov	ecx, 320				; 00000140H
	idiv	ecx
	jmp	$LN1@GL_LoadTex
$LN19@GL_LoadTex:

; 1541 : 
; 1542 : 	// load all the images and pack it into single image
; 1543 : 	for( i = 0, pic = NULL; i < numLayers; i++ )

	mov	DWORD PTR _i$[ebp], 0
	mov	DWORD PTR _pic$[ebp], 0
	jmp	SHORT $LN10@GL_LoadTex
$LN8@GL_LoadTex:
	mov	edx, DWORD PTR _i$[ebp]
	add	edx, 1
	mov	DWORD PTR _i$[ebp], edx
$LN10@GL_LoadTex:
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR _numLayers$[ebp]
	jae	$LN9@GL_LoadTex

; 1544 : 	{
; 1545 : 		size_t	srcsize, dstsize, mipsize;
; 1546 : 
; 1547 : 		src = FS_LoadImage( names[i], NULL, 0 );

	push	0
	push	0
	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR _names$[ebp]
	mov	eax, DWORD PTR [edx+ecx*4]
	push	eax
	call	_FS_LoadImage
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _src$[ebp], eax

; 1548 : 		if( !src ) break; // coldn't find layer

	cmp	DWORD PTR _src$[ebp], 0
	jne	SHORT $LN20@GL_LoadTex
	jmp	$LN9@GL_LoadTex
$LN20@GL_LoadTex:

; 1549 : 
; 1550 : 		if( pic )

	cmp	DWORD PTR _pic$[ebp], 0
	je	$LN21@GL_LoadTex

; 1551 : 		{
; 1552 : 			// mixed mode: DXT + RGB
; 1553 : 			if( pic->type != src->type )

	mov	ecx, DWORD PTR _pic$[ebp]
	mov	edx, DWORD PTR _src$[ebp]
	mov	eax, DWORD PTR [ecx+8]
	cmp	eax, DWORD PTR [edx+8]
	je	SHORT $LN23@GL_LoadTex

; 1554 : 			{
; 1555 : 				Con_Printf( S_ERROR "GL_LoadTextureArray: mismatch image format for %s and %s\n", names[0], names[i] );

	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR _names$[ebp]
	mov	eax, DWORD PTR [edx+ecx*4]
	push	eax
	mov	ecx, 4
	imul	edx, ecx, 0
	mov	eax, DWORD PTR _names$[ebp]
	mov	ecx, DWORD PTR [eax+edx]
	push	ecx
	push	OFFSET $SG144190
	call	_Con_Printf
	add	esp, 12					; 0000000cH

; 1556 : 				break;

	jmp	$LN9@GL_LoadTex
$LN23@GL_LoadTex:

; 1557 : 			}
; 1558 : 
; 1559 : 			// different mipcount
; 1560 : 			if( pic->numMips != src->numMips )

	mov	edx, DWORD PTR _pic$[ebp]
	movzx	eax, BYTE PTR [edx+18]
	mov	ecx, DWORD PTR _src$[ebp]
	movzx	edx, BYTE PTR [ecx+18]
	cmp	eax, edx
	je	SHORT $LN24@GL_LoadTex

; 1561 : 			{
; 1562 : 				Con_Printf( S_ERROR "GL_LoadTextureArray: mismatch mip count for %s and %s\n", names[0], names[i] );

	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _names$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	push	edx
	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _names$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	push	eax
	push	OFFSET $SG144192
	call	_Con_Printf
	add	esp, 12					; 0000000cH

; 1563 : 				break;

	jmp	$LN9@GL_LoadTex
$LN24@GL_LoadTex:

; 1564 : 			}
; 1565 : 
; 1566 : 			if( pic->encode != src->encode )

	mov	ecx, DWORD PTR _pic$[ebp]
	movzx	edx, WORD PTR [ecx+16]
	mov	eax, DWORD PTR _src$[ebp]
	movzx	ecx, WORD PTR [eax+16]
	cmp	edx, ecx
	je	SHORT $LN25@GL_LoadTex

; 1567 : 			{
; 1568 : 				Con_Printf( S_ERROR "GL_LoadTextureArray: mismatch custom encoding for %s and %s\n", names[0], names[i] );

	mov	edx, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR _names$[ebp]
	mov	ecx, DWORD PTR [eax+edx*4]
	push	ecx
	mov	edx, 4
	imul	eax, edx, 0
	mov	ecx, DWORD PTR _names$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	push	OFFSET $SG144194
	call	_Con_Printf
	add	esp, 12					; 0000000cH

; 1569 : 				break;

	jmp	$LN9@GL_LoadTex
$LN25@GL_LoadTex:

; 1570 : 			}
; 1571 : 
; 1572 : 			// but allow to rescale raw images
; 1573 : 			if( ImageRAW( pic->type ) && ImageRAW( src->type ) && ( pic->width != src->width || pic->height != src->height ))

	mov	eax, DWORD PTR _pic$[ebp]
	cmp	DWORD PTR [eax+8], 3
	je	SHORT $LN27@GL_LoadTex
	mov	ecx, DWORD PTR _pic$[ebp]
	cmp	DWORD PTR [ecx+8], 4
	je	SHORT $LN27@GL_LoadTex
	mov	edx, DWORD PTR _pic$[ebp]
	cmp	DWORD PTR [edx+8], 5
	je	SHORT $LN27@GL_LoadTex
	mov	eax, DWORD PTR _pic$[ebp]
	cmp	DWORD PTR [eax+8], 6
	je	SHORT $LN27@GL_LoadTex
	mov	ecx, DWORD PTR _pic$[ebp]
	cmp	DWORD PTR [ecx+8], 7
	jne	$LN26@GL_LoadTex
$LN27@GL_LoadTex:
	mov	edx, DWORD PTR _src$[ebp]
	cmp	DWORD PTR [edx+8], 3
	je	SHORT $LN28@GL_LoadTex
	mov	eax, DWORD PTR _src$[ebp]
	cmp	DWORD PTR [eax+8], 4
	je	SHORT $LN28@GL_LoadTex
	mov	ecx, DWORD PTR _src$[ebp]
	cmp	DWORD PTR [ecx+8], 5
	je	SHORT $LN28@GL_LoadTex
	mov	edx, DWORD PTR _src$[ebp]
	cmp	DWORD PTR [edx+8], 6
	je	SHORT $LN28@GL_LoadTex
	mov	eax, DWORD PTR _src$[ebp]
	cmp	DWORD PTR [eax+8], 7
	jne	SHORT $LN26@GL_LoadTex
$LN28@GL_LoadTex:
	mov	ecx, DWORD PTR _pic$[ebp]
	movzx	edx, WORD PTR [ecx]
	mov	eax, DWORD PTR _src$[ebp]
	movzx	ecx, WORD PTR [eax]
	cmp	edx, ecx
	jne	SHORT $LN29@GL_LoadTex
	mov	edx, DWORD PTR _pic$[ebp]
	movzx	eax, WORD PTR [edx+2]
	mov	ecx, DWORD PTR _src$[ebp]
	movzx	edx, WORD PTR [ecx+2]
	cmp	eax, edx
	je	SHORT $LN26@GL_LoadTex
$LN29@GL_LoadTex:

; 1574 : 				Image_Process( &src, pic->width, pic->height, IMAGE_RESAMPLE, 0.0f );

	push	ecx
	xorps	xmm0, xmm0
	movss	DWORD PTR [esp], xmm0
	push	1048576					; 00100000H
	mov	eax, DWORD PTR _pic$[ebp]
	movzx	ecx, WORD PTR [eax+2]
	push	ecx
	mov	edx, DWORD PTR _pic$[ebp]
	movzx	eax, WORD PTR [edx]
	push	eax
	lea	ecx, DWORD PTR _src$[ebp]
	push	ecx
	call	_Image_Process
	add	esp, 20					; 00000014H
$LN26@GL_LoadTex:

; 1575 : 
; 1576 : 			if( pic->size != src->size )

	mov	edx, DWORD PTR _pic$[ebp]
	mov	eax, DWORD PTR _src$[ebp]
	mov	ecx, DWORD PTR [edx+32]
	cmp	ecx, DWORD PTR [eax+32]
	je	SHORT $LN30@GL_LoadTex

; 1577 : 			{
; 1578 : 				Con_Printf( S_ERROR "GL_LoadTextureArray: mismatch image size for %s and %s\n", names[0], names[i] );

	mov	edx, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR _names$[ebp]
	mov	ecx, DWORD PTR [eax+edx*4]
	push	ecx
	mov	edx, 4
	imul	eax, edx, 0
	mov	ecx, DWORD PTR _names$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	push	OFFSET $SG144200
	call	_Con_Printf
	add	esp, 12					; 0000000cH

; 1579 : 				break;

	jmp	$LN9@GL_LoadTex
$LN30@GL_LoadTex:

; 1580 : 			}
; 1581 : 		}

	jmp	SHORT $LN22@GL_LoadTex
$LN21@GL_LoadTex:

; 1582 : 		else
; 1583 : 		{
; 1584 : 			// create new image
; 1585 : 			pic = Mem_Malloc( host.imagepool, sizeof( rgbdata_t ));

	push	1585					; 00000631H
	push	OFFSET $SG144201
	push	0
	push	36					; 00000024H
	mov	eax, DWORD PTR _host+34740
	push	eax
	call	__Mem_Alloc
	add	esp, 20					; 00000014H
	mov	DWORD PTR _pic$[ebp], eax

; 1586 : 			memcpy( pic, src, sizeof( rgbdata_t ));

	push	36					; 00000024H
	mov	ecx, DWORD PTR _src$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pic$[ebp]
	push	edx
	call	_memcpy
	add	esp, 12					; 0000000cH

; 1587 : 
; 1588 : 			// expand pic buffer for all layers
; 1589 : 			pic->buffer = Mem_Malloc( host.imagepool, pic->size * numLayers );

	push	1589					; 00000635H
	push	OFFSET $SG144202
	push	0
	mov	eax, DWORD PTR _pic$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	imul	ecx, DWORD PTR _numLayers$[ebp]
	push	ecx
	mov	edx, DWORD PTR _host+34740
	push	edx
	call	__Mem_Alloc
	add	esp, 20					; 00000014H
	mov	ecx, DWORD PTR _pic$[ebp]
	mov	DWORD PTR [ecx+24], eax

; 1590 : 			pic->depth = 0;

	xor	edx, edx
	mov	eax, DWORD PTR _pic$[ebp]
	mov	WORD PTR [eax+4], dx
$LN22@GL_LoadTex:

; 1591 : 		}
; 1592 : 
; 1593 : 		mipsize = srcsize = dstsize = 0;

	mov	DWORD PTR _dstsize$5[ebp], 0
	mov	ecx, DWORD PTR _dstsize$5[ebp]
	mov	DWORD PTR _srcsize$4[ebp], ecx
	mov	edx, DWORD PTR _srcsize$4[ebp]
	mov	DWORD PTR _mipsize$6[ebp], edx

; 1594 : 
; 1595 : 		for( j = 0; j < max( 1, pic->numMips ); j++ )

	mov	DWORD PTR _j$[ebp], 0
	jmp	SHORT $LN13@GL_LoadTex
$LN11@GL_LoadTex:
	mov	eax, DWORD PTR _j$[ebp]
	add	eax, 1
	mov	DWORD PTR _j$[ebp], eax
$LN13@GL_LoadTex:
	mov	ecx, DWORD PTR _pic$[ebp]
	movzx	edx, BYTE PTR [ecx+18]
	cmp	edx, 1
	jge	SHORT $LN38@GL_LoadTex
	mov	DWORD PTR tv262[ebp], 1
	jmp	SHORT $LN39@GL_LoadTex
$LN38@GL_LoadTex:
	mov	eax, DWORD PTR _pic$[ebp]
	movzx	ecx, BYTE PTR [eax+18]
	mov	DWORD PTR tv262[ebp], ecx
$LN39@GL_LoadTex:
	mov	edx, DWORD PTR _j$[ebp]
	cmp	edx, DWORD PTR tv262[ebp]
	jae	$LN12@GL_LoadTex

; 1596 : 		{
; 1597 : 			int width = Q_max( 1, ( pic->width >> j ));

	mov	eax, DWORD PTR _pic$[ebp]
	movzx	edx, WORD PTR [eax]
	mov	ecx, DWORD PTR _j$[ebp]
	sar	edx, cl
	cmp	edx, 1
	jge	SHORT $LN40@GL_LoadTex
	mov	DWORD PTR tv271[ebp], 1
	jmp	SHORT $LN41@GL_LoadTex
$LN40@GL_LoadTex:
	mov	eax, DWORD PTR _pic$[ebp]
	movzx	edx, WORD PTR [eax]
	mov	ecx, DWORD PTR _j$[ebp]
	sar	edx, cl
	mov	DWORD PTR tv271[ebp], edx
$LN41@GL_LoadTex:
	mov	eax, DWORD PTR tv271[ebp]
	mov	DWORD PTR _width$1[ebp], eax

; 1598 : 			int height = Q_max( 1, ( pic->height >> j ));

	mov	ecx, DWORD PTR _pic$[ebp]
	movzx	edx, WORD PTR [ecx+2]
	mov	ecx, DWORD PTR _j$[ebp]
	sar	edx, cl
	cmp	edx, 1
	jge	SHORT $LN42@GL_LoadTex
	mov	DWORD PTR tv279[ebp], 1
	jmp	SHORT $LN43@GL_LoadTex
$LN42@GL_LoadTex:
	mov	eax, DWORD PTR _pic$[ebp]
	movzx	edx, WORD PTR [eax+2]
	mov	ecx, DWORD PTR _j$[ebp]
	sar	edx, cl
	mov	DWORD PTR tv279[ebp], edx
$LN43@GL_LoadTex:
	mov	eax, DWORD PTR tv279[ebp]
	mov	DWORD PTR _height$2[ebp], eax

; 1599 : 			mipsize = GL_CalcImageSize( pic->type, width, height, 1 );

	push	1
	mov	ecx, DWORD PTR _height$2[ebp]
	push	ecx
	mov	edx, DWORD PTR _width$1[ebp]
	push	edx
	mov	eax, DWORD PTR _pic$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	call	_GL_CalcImageSize
	add	esp, 16					; 00000010H
	mov	DWORD PTR _mipsize$6[ebp], eax

; 1600 : 			memcpy( pic->buffer + dstsize + mipsize * i, src->buffer + srcsize, mipsize );

	mov	edx, DWORD PTR _mipsize$6[ebp]
	push	edx
	mov	eax, DWORD PTR _src$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	add	ecx, DWORD PTR _srcsize$4[ebp]
	push	ecx
	mov	edx, DWORD PTR _pic$[ebp]
	mov	eax, DWORD PTR [edx+24]
	add	eax, DWORD PTR _dstsize$5[ebp]
	mov	ecx, DWORD PTR _mipsize$6[ebp]
	imul	ecx, DWORD PTR _i$[ebp]
	add	eax, ecx
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH

; 1601 : 			dstsize += mipsize * numLayers;

	mov	edx, DWORD PTR _mipsize$6[ebp]
	imul	edx, DWORD PTR _numLayers$[ebp]
	add	edx, DWORD PTR _dstsize$5[ebp]
	mov	DWORD PTR _dstsize$5[ebp], edx

; 1602 : 			srcsize += mipsize;

	mov	eax, DWORD PTR _srcsize$4[ebp]
	add	eax, DWORD PTR _mipsize$6[ebp]
	mov	DWORD PTR _srcsize$4[ebp], eax

; 1603 : 		}

	jmp	$LN11@GL_LoadTex
$LN12@GL_LoadTex:

; 1604 : 
; 1605 : 		FS_FreeImage( src );

	mov	ecx, DWORD PTR _src$[ebp]
	push	ecx
	call	_FS_FreeImage
	add	esp, 4

; 1606 : 
; 1607 : 		// increase layers
; 1608 : 		pic->depth++;

	mov	edx, DWORD PTR _pic$[ebp]
	mov	ax, WORD PTR [edx+4]
	add	ax, 1
	mov	ecx, DWORD PTR _pic$[ebp]
	mov	WORD PTR [ecx+4], ax

; 1609 : 	}

	jmp	$LN8@GL_LoadTex
$LN9@GL_LoadTex:

; 1610 : 
; 1611 : 	// there were errors
; 1612 : 	if( !pic || ( pic->depth != numLayers ))

	cmp	DWORD PTR _pic$[ebp], 0
	je	SHORT $LN32@GL_LoadTex
	mov	edx, DWORD PTR _pic$[ebp]
	movzx	eax, WORD PTR [edx+4]
	cmp	eax, DWORD PTR _numLayers$[ebp]
	je	SHORT $LN31@GL_LoadTex
$LN32@GL_LoadTex:

; 1613 : 	{
; 1614 : 		Con_Printf( S_ERROR "GL_LoadTextureArray: not all layers were loaded. Texture array is not created\n" );

	push	OFFSET $SG144205
	call	_Con_Printf
	add	esp, 4

; 1615 : 		if( pic ) FS_FreeImage( pic );

	cmp	DWORD PTR _pic$[ebp], 0
	je	SHORT $LN33@GL_LoadTex
	mov	ecx, DWORD PTR _pic$[ebp]
	push	ecx
	call	_FS_FreeImage
	add	esp, 4
$LN33@GL_LoadTex:

; 1616 : 		return 0;

	xor	eax, eax
	jmp	$LN1@GL_LoadTex
$LN31@GL_LoadTex:

; 1617 : 	}	
; 1618 : 
; 1619 : 	// it's multilayer image!
; 1620 : 	SetBits( pic->flags, IMAGE_MULTILAYER );

	mov	edx, DWORD PTR _pic$[ebp]
	mov	eax, DWORD PTR [edx+12]
	or	eax, 256				; 00000100H
	mov	ecx, DWORD PTR _pic$[ebp]
	mov	DWORD PTR [ecx+12], eax

; 1621 : 	pic->size *= numLayers;

	mov	edx, DWORD PTR _pic$[ebp]
	mov	eax, DWORD PTR [edx+32]
	imul	eax, DWORD PTR _numLayers$[ebp]
	mov	ecx, DWORD PTR _pic$[ebp]
	mov	DWORD PTR [ecx+32], eax

; 1622 : 
; 1623 : 	// allocate the new one
; 1624 : 	tex = GL_AllocTexture( name, flags );

	mov	edx, DWORD PTR _flags$[ebp]
	push	edx
	lea	eax, DWORD PTR _name$[ebp]
	push	eax
	call	_GL_AllocTexture
	add	esp, 8
	mov	DWORD PTR _tex$[ebp], eax

; 1625 : 	GL_ProcessImage( tex, pic );

	mov	ecx, DWORD PTR _pic$[ebp]
	push	ecx
	mov	edx, DWORD PTR _tex$[ebp]
	push	edx
	call	_GL_ProcessImage
	add	esp, 8

; 1626 : 
; 1627 : 	if( !GL_UploadTexture( tex, pic ))

	mov	eax, DWORD PTR _pic$[ebp]
	push	eax
	mov	ecx, DWORD PTR _tex$[ebp]
	push	ecx
	call	_GL_UploadTexture
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN34@GL_LoadTex

; 1628 : 	{
; 1629 : 		memset( tex, 0, sizeof( gl_texture_t ));

	push	320					; 00000140H
	push	0
	mov	edx, DWORD PTR _tex$[ebp]
	push	edx
	call	_memset
	add	esp, 12					; 0000000cH

; 1630 : 		FS_FreeImage( pic ); // release source texture

	mov	eax, DWORD PTR _pic$[ebp]
	push	eax
	call	_FS_FreeImage
	add	esp, 4

; 1631 : 		return 0;

	xor	eax, eax
	jmp	SHORT $LN1@GL_LoadTex
$LN34@GL_LoadTex:

; 1632 : 	}
; 1633 : 
; 1634 : 	GL_ApplyTextureParams( tex ); // update texture filter, wrap etc

	mov	ecx, DWORD PTR _tex$[ebp]
	push	ecx
	call	_GL_ApplyTextureParams
	add	esp, 4

; 1635 : 	FS_FreeImage( pic ); // release source texture

	mov	edx, DWORD PTR _pic$[ebp]
	push	edx
	call	_FS_FreeImage
	add	esp, 4

; 1636 : 
; 1637 : 	// NOTE: always return texnum as index in array or engine will stop work !!!
; 1638 : 	return tex - gl_textures;

	mov	eax, DWORD PTR _tex$[ebp]
	sub	eax, OFFSET _gl_textures
	cdq
	mov	ecx, 320				; 00000140H
	idiv	ecx
$LN1@GL_LoadTex:

; 1639 : }

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_GL_LoadTextureArray ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xash_build4529_src\engine\client\gl_image.c
_TEXT	SEGMENT
_pic$ = -12						; size = 4
_picFlags$ = -8						; size = 4
_tex$ = -4						; size = 4
_name$ = 8						; size = 4
_buf$ = 12						; size = 4
_size$ = 16						; size = 4
_flags$ = 20						; size = 4
_GL_LoadTexture PROC

; 1458 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH

; 1459 : 	gl_texture_t	*tex;
; 1460 : 	rgbdata_t		*pic;
; 1461 : 	uint		picFlags = 0;

	mov	DWORD PTR _picFlags$[ebp], 0

; 1462 : 
; 1463 : 	if( !GL_CheckTexName( name ))

	mov	eax, DWORD PTR _name$[ebp]
	push	eax
	call	_GL_CheckTexName
	add	esp, 4
	test	eax, eax
	jne	SHORT $LN2@GL_LoadTex

; 1464 : 		return 0;

	xor	eax, eax
	jmp	$LN1@GL_LoadTex
$LN2@GL_LoadTex:

; 1465 : 
; 1466 : 	// see if already loaded
; 1467 : 	if(( tex = GL_TextureForName( name )))

	mov	ecx, DWORD PTR _name$[ebp]
	push	ecx
	call	_GL_TextureForName
	add	esp, 4
	mov	DWORD PTR _tex$[ebp], eax
	cmp	DWORD PTR _tex$[ebp], 0
	je	SHORT $LN3@GL_LoadTex

; 1468 : 		return (tex - gl_textures);

	mov	eax, DWORD PTR _tex$[ebp]
	sub	eax, OFFSET _gl_textures
	cdq
	mov	ecx, 320				; 00000140H
	idiv	ecx
	jmp	$LN1@GL_LoadTex
$LN3@GL_LoadTex:

; 1469 : 
; 1470 : 	if( FBitSet( flags, TF_NOFLIP_TGA ))

	mov	edx, DWORD PTR _flags$[ebp]
	and	edx, 4
	je	SHORT $LN4@GL_LoadTex

; 1471 : 		SetBits( picFlags, IL_DONTFLIP_TGA );

	mov	eax, DWORD PTR _picFlags$[ebp]
	or	eax, 8
	mov	DWORD PTR _picFlags$[ebp], eax
$LN4@GL_LoadTex:

; 1472 : 
; 1473 : 	if( FBitSet( flags, TF_KEEP_SOURCE ) && !FBitSet( flags, TF_EXPAND_SOURCE ))

	mov	ecx, DWORD PTR _flags$[ebp]
	and	ecx, 2
	je	SHORT $LN5@GL_LoadTex
	mov	edx, DWORD PTR _flags$[ebp]
	and	edx, 8
	jne	SHORT $LN5@GL_LoadTex

; 1474 : 		SetBits( picFlags, IL_KEEP_8BIT );	

	mov	eax, DWORD PTR _picFlags$[ebp]
	or	eax, 2
	mov	DWORD PTR _picFlags$[ebp], eax
$LN5@GL_LoadTex:

; 1475 : 
; 1476 : 	// set some image flags
; 1477 : 	Image_SetForceFlags( picFlags );

	mov	ecx, DWORD PTR _picFlags$[ebp]
	push	ecx
	call	_Image_SetForceFlags
	add	esp, 4

; 1478 : 
; 1479 : 	pic = FS_LoadImage( name, buf, size );

	mov	edx, DWORD PTR _size$[ebp]
	push	edx
	mov	eax, DWORD PTR _buf$[ebp]
	push	eax
	mov	ecx, DWORD PTR _name$[ebp]
	push	ecx
	call	_FS_LoadImage
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _pic$[ebp], eax

; 1480 : 	if( !pic ) return 0; // couldn't loading image

	cmp	DWORD PTR _pic$[ebp], 0
	jne	SHORT $LN6@GL_LoadTex
	xor	eax, eax
	jmp	$LN1@GL_LoadTex
$LN6@GL_LoadTex:

; 1481 : 
; 1482 : 	// allocate the new one
; 1483 : 	tex = GL_AllocTexture( name, flags );

	mov	edx, DWORD PTR _flags$[ebp]
	push	edx
	mov	eax, DWORD PTR _name$[ebp]
	push	eax
	call	_GL_AllocTexture
	add	esp, 8
	mov	DWORD PTR _tex$[ebp], eax

; 1484 : 	GL_ProcessImage( tex, pic );

	mov	ecx, DWORD PTR _pic$[ebp]
	push	ecx
	mov	edx, DWORD PTR _tex$[ebp]
	push	edx
	call	_GL_ProcessImage
	add	esp, 8

; 1485 : 
; 1486 : 	if( !GL_UploadTexture( tex, pic ))

	mov	eax, DWORD PTR _pic$[ebp]
	push	eax
	mov	ecx, DWORD PTR _tex$[ebp]
	push	ecx
	call	_GL_UploadTexture
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN7@GL_LoadTex

; 1487 : 	{
; 1488 : 		memset( tex, 0, sizeof( gl_texture_t ));

	push	320					; 00000140H
	push	0
	mov	edx, DWORD PTR _tex$[ebp]
	push	edx
	call	_memset
	add	esp, 12					; 0000000cH

; 1489 : 		FS_FreeImage( pic ); // release source texture

	mov	eax, DWORD PTR _pic$[ebp]
	push	eax
	call	_FS_FreeImage
	add	esp, 4

; 1490 : 		return 0;

	xor	eax, eax
	jmp	SHORT $LN1@GL_LoadTex
$LN7@GL_LoadTex:

; 1491 : 	}
; 1492 : 
; 1493 : 	GL_ApplyTextureParams( tex ); // update texture filter, wrap etc

	mov	ecx, DWORD PTR _tex$[ebp]
	push	ecx
	call	_GL_ApplyTextureParams
	add	esp, 4

; 1494 : 	FS_FreeImage( pic ); // release source texture

	mov	edx, DWORD PTR _pic$[ebp]
	push	edx
	call	_FS_FreeImage
	add	esp, 4

; 1495 : 
; 1496 : 	// NOTE: always return texnum as index in array or engine will stop work !!!
; 1497 : 	return tex - gl_textures;

	mov	eax, DWORD PTR _tex$[ebp]
	sub	eax, OFFSET _gl_textures
	cdq
	mov	ecx, 320				; 00000140H
	idiv	ecx
$LN1@GL_LoadTex:

; 1498 : }

	mov	esp, ebp
	pop	ebp
	ret	0
_GL_LoadTexture ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xash_build4529_src\engine\client\gl_image.c
_TEXT	SEGMENT
_texnum$ = 8						; size = 4
_R_GetTexture PROC

; 35   : {

	push	ebp
	mov	ebp, esp

; 36   : 	ASSERT( texnum >= 0 && texnum < MAX_TEXTURES );

	cmp	DWORD PTR _texnum$[ebp], 0
	jb	SHORT $LN3@R_GetTextu
	cmp	DWORD PTR _texnum$[ebp], 4096		; 00001000H
	jb	SHORT $LN2@R_GetTextu
$LN3@R_GetTextu:
	push	36					; 00000024H
	push	OFFSET $SG143313
	push	OFFSET $SG143314
	call	_Sys_Error
	add	esp, 12					; 0000000cH
$LN2@R_GetTextu:

; 37   : 	return &gl_textures[texnum];

	imul	eax, DWORD PTR _texnum$[ebp], 320
	add	eax, OFFSET _gl_textures

; 38   : }

	pop	ebp
	ret	0
_R_GetTexture ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xash_build4529_src\engine\client\gl_image.c
_TEXT	SEGMENT
_i$ = -4						; size = 4
_R_SetTextureParameters PROC

; 300  : {

	push	ebp
	mov	ebp, esp
	push	ecx

; 301  : 	int	i;
; 302  : 
; 303  : 	if( GL_Support( GL_ANISOTROPY_EXT ))

	push	6
	call	_GL_Support
	add	esp, 4
	test	eax, eax
	je	SHORT $LN8@R_SetTextu

; 304  : 	{
; 305  : 		if( gl_texture_anisotropy->value > glConfig.max_texture_anisotropy )

	mov	eax, DWORD PTR _gl_texture_anisotropy
	movss	xmm0, DWORD PTR [eax+12]
	comiss	xmm0, DWORD PTR _glConfig+80
	jbe	SHORT $LN6@R_SetTextu

; 306  : 			Cvar_SetValue( "gl_anisotropy", glConfig.max_texture_anisotropy );

	push	ecx
	movss	xmm0, DWORD PTR _glConfig+80
	movss	DWORD PTR [esp], xmm0
	push	OFFSET $SG143427
	call	_Cvar_SetValue
	add	esp, 8
	jmp	SHORT $LN8@R_SetTextu
$LN6@R_SetTextu:

; 307  : 		else if( gl_texture_anisotropy->value < 1.0f )

	mov	ecx, DWORD PTR _gl_texture_anisotropy
	movss	xmm0, DWORD PTR __real@3f800000
	comiss	xmm0, DWORD PTR [ecx+12]
	jbe	SHORT $LN8@R_SetTextu

; 308  : 			Cvar_SetValue( "gl_anisotropy", 1.0f );

	push	ecx
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [esp], xmm0
	push	OFFSET $SG143429
	call	_Cvar_SetValue
	add	esp, 8
$LN8@R_SetTextu:

; 309  : 	}
; 310  : 
; 311  : 	if( GL_Support( GL_TEXTURE_LOD_BIAS ))

	push	7
	call	_GL_Support
	add	esp, 4
	test	eax, eax
	je	SHORT $LN12@R_SetTextu

; 312  : 	{
; 313  : 		if( gl_texture_lodbias->value < -glConfig.max_texture_lod_bias )

	movss	xmm0, DWORD PTR _glConfig+84
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mov	edx, DWORD PTR _gl_texture_lodbias
	comiss	xmm0, DWORD PTR [edx+12]
	jbe	SHORT $LN10@R_SetTextu

; 314  : 			Cvar_SetValue( "gl_texture_lodbias", -glConfig.max_texture_lod_bias );

	movss	xmm0, DWORD PTR _glConfig+84
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	push	OFFSET $SG143433
	call	_Cvar_SetValue
	add	esp, 8
	jmp	SHORT $LN12@R_SetTextu
$LN10@R_SetTextu:

; 315  : 		else if( gl_texture_lodbias->value > glConfig.max_texture_lod_bias )

	mov	eax, DWORD PTR _gl_texture_lodbias
	movss	xmm0, DWORD PTR [eax+12]
	comiss	xmm0, DWORD PTR _glConfig+84
	jbe	SHORT $LN12@R_SetTextu

; 316  : 			Cvar_SetValue( "gl_texture_lodbias", glConfig.max_texture_lod_bias );

	push	ecx
	movss	xmm0, DWORD PTR _glConfig+84
	movss	DWORD PTR [esp], xmm0
	push	OFFSET $SG143435
	call	_Cvar_SetValue
	add	esp, 8
$LN12@R_SetTextu:

; 317  : 	}
; 318  : 
; 319  : 	ClearBits( gl_texture_anisotropy->flags, FCVAR_CHANGED );

	mov	ecx, DWORD PTR _gl_texture_anisotropy
	mov	edx, DWORD PTR [ecx+8]
	and	edx, -8193				; ffffdfffH
	mov	eax, DWORD PTR _gl_texture_anisotropy
	mov	DWORD PTR [eax+8], edx

; 320  : 	ClearBits( gl_texture_lodbias->flags, FCVAR_CHANGED );

	mov	ecx, DWORD PTR _gl_texture_lodbias
	mov	edx, DWORD PTR [ecx+8]
	and	edx, -8193				; ffffdfffH
	mov	eax, DWORD PTR _gl_texture_lodbias
	mov	DWORD PTR [eax+8], edx

; 321  : 	ClearBits( gl_texture_nearest->flags, FCVAR_CHANGED );

	mov	ecx, DWORD PTR _gl_texture_nearest
	mov	edx, DWORD PTR [ecx+8]
	and	edx, -8193				; ffffdfffH
	mov	eax, DWORD PTR _gl_texture_nearest
	mov	DWORD PTR [eax+8], edx

; 322  : 	ClearBits( gl_lightmap_nearest->flags, FCVAR_CHANGED );

	mov	ecx, DWORD PTR _gl_lightmap_nearest
	mov	edx, DWORD PTR [ecx+8]
	and	edx, -8193				; ffffdfffH
	mov	eax, DWORD PTR _gl_lightmap_nearest
	mov	DWORD PTR [eax+8], edx

; 323  : 
; 324  : 	// change all the existing mipmapped texture objects
; 325  : 	for( i = 0; i < gl_numTextures; i++ )

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN4@R_SetTextu
$LN2@R_SetTextu:
	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
$LN4@R_SetTextu:
	mov	edx, DWORD PTR _i$[ebp]
	cmp	edx, DWORD PTR _gl_numTextures
	jae	SHORT $LN3@R_SetTextu

; 326  : 		GL_UpdateTextureParams( i );

	mov	eax, DWORD PTR _i$[ebp]
	push	eax
	call	_GL_UpdateTextureParams
	add	esp, 4
	jmp	SHORT $LN2@R_SetTextu
$LN3@R_SetTextu:

; 327  : }

	mov	esp, ebp
	pop	ebp
	ret	0
_R_SetTextureParameters ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xash_build4529_src\engine\client\gl_image.c
_TEXT	SEGMENT
_glTarget$ = -8						; size = 4
_texture$ = -4						; size = 4
_tmu$ = 8						; size = 4
_texnum$ = 12						; size = 4
_GL_Bind PROC

; 71   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 72   : 	gl_texture_t	*texture;
; 73   : 	GLuint		glTarget;
; 74   : 
; 75   : 	// missed or invalid texture?
; 76   : 	if( texnum <= 0 || texnum >= MAX_TEXTURES )

	cmp	DWORD PTR _texnum$[ebp], 0
	jbe	SHORT $LN3@GL_Bind
	cmp	DWORD PTR _texnum$[ebp], 4096		; 00001000H
	jb	SHORT $LN2@GL_Bind
$LN3@GL_Bind:

; 77   : 	{
; 78   : 		if( texnum != 0 )

	cmp	DWORD PTR _texnum$[ebp], 0
	je	SHORT $LN4@GL_Bind

; 79   : 			Con_DPrintf( S_ERROR "GL_Bind: invalid texturenum %d\n", texnum );

	mov	eax, DWORD PTR _texnum$[ebp]
	push	eax
	push	OFFSET $SG143344
	call	_Con_DPrintf
	add	esp, 8
$LN4@GL_Bind:

; 80   : 		texnum = tr.defaultTexture;

	mov	ecx, DWORD PTR _tr
	mov	DWORD PTR _texnum$[ebp], ecx
$LN2@GL_Bind:

; 81   : 	}
; 82   : 	if( tmu != GL_KEEP_UNIT )

	cmp	DWORD PTR _tmu$[ebp], -1
	je	SHORT $LN5@GL_Bind

; 83   : 		GL_SelectTexture( tmu );

	mov	edx, DWORD PTR _tmu$[ebp]
	push	edx
	call	_GL_SelectTexture
	add	esp, 4
	jmp	SHORT $LN6@GL_Bind
$LN5@GL_Bind:

; 84   : 	else tmu = glState.activeTMU;

	mov	eax, DWORD PTR _glState+16
	mov	DWORD PTR _tmu$[ebp], eax
$LN6@GL_Bind:

; 85   : 
; 86   : 	texture = &gl_textures[texnum];

	imul	ecx, DWORD PTR _texnum$[ebp], 320
	add	ecx, OFFSET _gl_textures
	mov	DWORD PTR _texture$[ebp], ecx

; 87   : 	glTarget = texture->target;

	mov	edx, DWORD PTR _texture$[ebp]
	mov	eax, DWORD PTR [edx+268]
	mov	DWORD PTR _glTarget$[ebp], eax

; 88   : 
; 89   : 	if( glTarget == GL_TEXTURE_2D_ARRAY_EXT )

	cmp	DWORD PTR _glTarget$[ebp], 35866	; 00008c1aH
	jne	SHORT $LN7@GL_Bind

; 90   : 		glTarget = GL_TEXTURE_2D;

	mov	DWORD PTR _glTarget$[ebp], 3553		; 00000de1H
$LN7@GL_Bind:

; 91   : 
; 92   : 	if( glState.currentTextureTargets[tmu] != glTarget )

	mov	ecx, DWORD PTR _tmu$[ebp]
	mov	edx, DWORD PTR _glState[ecx*4+148]
	cmp	edx, DWORD PTR _glTarget$[ebp]
	je	SHORT $LN8@GL_Bind

; 93   : 	{
; 94   : 		if( glState.currentTextureTargets[tmu] != GL_NONE )

	mov	eax, DWORD PTR _tmu$[ebp]
	cmp	DWORD PTR _glState[eax*4+148], 0
	je	SHORT $LN9@GL_Bind

; 95   : 			pglDisable( glState.currentTextureTargets[tmu] );

	mov	ecx, DWORD PTR _tmu$[ebp]
	mov	edx, DWORD PTR _glState[ecx*4+148]
	push	edx
	call	DWORD PTR _pglDisable
$LN9@GL_Bind:

; 96   : 		glState.currentTextureTargets[tmu] = glTarget;

	mov	eax, DWORD PTR _tmu$[ebp]
	mov	ecx, DWORD PTR _glTarget$[ebp]
	mov	DWORD PTR _glState[eax*4+148], ecx

; 97   : 		pglEnable( glState.currentTextureTargets[tmu] );

	mov	edx, DWORD PTR _tmu$[ebp]
	mov	eax, DWORD PTR _glState[edx*4+148]
	push	eax
	call	DWORD PTR _pglEnable
$LN8@GL_Bind:

; 98   : 	}
; 99   : 
; 100  : 	if( glState.currentTextures[tmu] == texture->texnum )

	mov	ecx, DWORD PTR _tmu$[ebp]
	mov	edx, DWORD PTR _texture$[ebp]
	mov	eax, DWORD PTR _glState[ecx*4+20]
	cmp	eax, DWORD PTR [edx+272]
	jne	SHORT $LN10@GL_Bind

; 101  : 		return;

	jmp	SHORT $LN1@GL_Bind
$LN10@GL_Bind:

; 102  : 
; 103  : 	pglBindTexture( texture->target, texture->texnum );

	mov	ecx, DWORD PTR _texture$[ebp]
	mov	edx, DWORD PTR [ecx+272]
	push	edx
	mov	eax, DWORD PTR _texture$[ebp]
	mov	ecx, DWORD PTR [eax+268]
	push	ecx
	call	DWORD PTR _pglBindTexture

; 104  : 	glState.currentTextures[tmu] = texture->texnum;

	mov	edx, DWORD PTR _tmu$[ebp]
	mov	eax, DWORD PTR _texture$[ebp]
	mov	ecx, DWORD PTR [eax+272]
	mov	DWORD PTR _glState[edx*4+20], ecx
$LN1@GL_Bind:

; 105  : }

	mov	esp, ebp
	pop	ebp
	ret	0
_GL_Bind ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xash_build4529_src\engine\client\gl_image.c
_TEXT	SEGMENT
_texnum$ = -4						; size = 4
_name$ = 8						; size = 4
_GL_FreeImage PROC

; 1802 : {

	push	ebp
	mov	ebp, esp
	push	ecx

; 1803 : 	int	texnum;
; 1804 : 
; 1805 : 	if(( texnum = GL_FindTexture( name )) != 0 )

	mov	eax, DWORD PTR _name$[ebp]
	push	eax
	call	_GL_FindTexture
	add	esp, 4
	mov	DWORD PTR _texnum$[ebp], eax
	cmp	DWORD PTR _texnum$[ebp], 0
	je	SHORT $LN1@GL_FreeIma

; 1806 : 		 GL_FreeTexture( texnum );

	mov	ecx, DWORD PTR _texnum$[ebp]
	push	ecx
	call	_GL_FreeTexture
	add	esp, 4
$LN1@GL_FreeIma:

; 1807 : }

	mov	esp, ebp
	pop	ebp
	ret	0
_GL_FreeImage ENDP
_TEXT	ENDS
END
