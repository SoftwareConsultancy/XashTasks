; Listing generated by Microsoft (R) Optimizing Compiler Version 19.16.27045.0 

	TITLE	C:\Users\USER\Documents\GitHub\XashTasks\xash_build4529_src\engine\common\sys_con.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	___local_stdio_printf_options
PUBLIC	__vfprintf_l
PUBLIC	_fprintf
PUBLIC	_Sys_PrintLog
PUBLIC	_Sys_InitLog
PUBLIC	_Sys_CloseLog
PUBLIC	_Con_ShowConsole
PUBLIC	_Con_WinPrint
PUBLIC	_Con_InitConsoleCommands
PUBLIC	_Con_CreateConsole
PUBLIC	_Con_DestroyConsole
PUBLIC	_Con_RegisterHotkeys
PUBLIC	_Con_DisableInput
PUBLIC	_Con_Input
PUBLIC	_Con_SetInputText
PUBLIC	_Con_InputLineProc@16
EXTRN	__imp__fclose:PROC
EXTRN	__imp__fflush:PROC
EXTRN	__imp__fopen:PROC
EXTRN	__imp____stdio_common_vfprintf:PROC
EXTRN	__imp__CloseHandle@4:PROC
EXTRN	__imp__MulDiv@12:PROC
EXTRN	__imp__CreateFontA@56:PROC
EXTRN	__imp__CreateSolidBrush@4:PROC
EXTRN	__imp__DeleteObject@4:PROC
EXTRN	__imp__GetDeviceCaps@8:PROC
EXTRN	__imp__SetBkColor@8:PROC
EXTRN	__imp__SetTextColor@8:PROC
EXTRN	__imp__RegisterHotKey@16:PROC
EXTRN	__imp__SendMessageA@16:PROC
EXTRN	__imp__DefWindowProcA@16:PROC
EXTRN	__imp__PostQuitMessage@4:PROC
EXTRN	__imp__CallWindowProcA@20:PROC
EXTRN	__imp__RegisterClassA@4:PROC
EXTRN	__imp__UnregisterClassA@8:PROC
EXTRN	__imp__CreateWindowExA@48:PROC
EXTRN	__imp__DestroyWindow@4:PROC
EXTRN	__imp__ShowWindow@8:PROC
EXTRN	__imp__SetFocus@4:PROC
EXTRN	__imp__UpdateWindow@4:PROC
EXTRN	__imp__SetForegroundWindow@4:PROC
EXTRN	__imp__GetDC@4:PROC
EXTRN	__imp__ReleaseDC@8:PROC
EXTRN	__imp__SetWindowTextA@8:PROC
EXTRN	__imp__GetWindowTextA@12:PROC
EXTRN	__imp__GetClientRect@8:PROC
EXTRN	__imp__AdjustWindowRect@12:PROC
EXTRN	__imp__MessageBoxA@16:PROC
EXTRN	__imp__SetWindowLongA@12:PROC
EXTRN	__imp__GetDesktopWindow@0:PROC
EXTRN	__imp__LoadCursorA@8:PROC
EXTRN	__imp__LoadIconA@8:PROC
EXTRN	_Sys_CheckParm:PROC
EXTRN	_Sys_Quit:PROC
EXTRN	_Cmd_AddCommand:PROC
EXTRN	_Q_strlen:PROC
EXTRN	_Q_strncat:PROC
EXTRN	_Q_strncpy:PROC
EXTRN	_Q_timestamp:PROC
EXTRN	_va:PROC
EXTRN	_Q_buildnum:PROC
EXTRN	_Con_Reportf:PROC
EXTRN	_Con_DPrintf:PROC
EXTRN	_Con_Printf:PROC
EXTRN	_Cmd_AutoComplete:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	_host:BYTE
EXTRN	___security_cookie:DWORD
_DATA	SEGMENT
COMM	?_OptionsStorage@?1??__local_stdio_printf_options@@9@9:QWORD							; `__local_stdio_printf_options'::`2'::_OptionsStorage
_DATA	ENDS
_BSS	SEGMENT
_s_wcd	DB	0467cH DUP (?)
$SG129797 DB	01H DUP (?)
	ALIGN	4

$SG129893 DB	01H DUP (?)
_BSS	ENDS
_DATA	SEGMENT
$SG129892 DB	0aH, 00H
	ORG $+2
$SG129894 DB	'>%s', 0aH, 00H
	ORG $+3
$SG129940 DB	'XashConsole', 00H
$SG129942 DB	'-log', 00H
	ORG $+3
$SG129945 DB	'Fixedsys', 00H
	ORG $+3
$SG129946 DB	'0.99', 00H
	ORG $+3
$SG129947 DB	'Xash3D %s', 00H
	ORG $+2
$SG129948 DB	'engine.log', 00H
	ORG $+1
$SG129949 DB	'System', 00H
	ORG $+1
$SG129950 DB	'Xash Dedicated Server', 00H
	ORG $+2
$SG129951 DB	'dedicated.log', 00H
	ORG $+2
$SG129953 DB	'XashConsole', 00H
$SG129954 DB	'^1Error:^7 Can''t register window class ''%s''', 0aH, 00H
	ORG $+3
$SG129955 DB	'XashConsole', 00H
$SG129957 DB	'^1Error:^7 Can''t create window ''%s''', 0aH, 00H
	ORG $+3
$SG129959 DB	'edit', 00H
	ORG $+3
$SG129960 DB	'button', 00H
	ORG $+1
$SG129961 DB	'submit', 00H
	ORG $+1
$SG129962 DB	'edit', 00H
	ORG $+3
$SG129971 DB	'clear console history', 00H
	ORG $+2
$SG129972 DB	'clear', 00H
	ORG $+2
$SG129975 DB	'Sys_FreeLibrary: Unloading xash.dll', 0aH, 00H
	ORG $+3
$SG129978 DB	'XashConsole', 00H
$SG129992 DB	'a', 00H
	ORG $+2
$SG129993 DB	'w', 00H
	ORG $+2
$SG129996 DB	'Xash Error', 00H
	ORG $+1
$SG129997 DB	'can''t create log file %s', 0aH, 00H
	ORG $+2
$SG129998 DB	'========================================================'
	DB	'=========================', 0aH, 00H
	ORG $+1
$SG129999 DB	09H, '%s (build %i) started at %s', 0aH, 00H
	ORG $+2
$SG130008 DB	'crashed', 00H
$SG130010 DB	'stopped with error', 00H
	ORG $+1
$SG130000 DB	'========================================================'
	DB	'=========================', 0aH, 00H
	ORG $+1
$SG130014 DB	'stopped', 00H
$SG130016 DB	0aH, 00H
	ORG $+2
$SG130017 DB	'========================================================'
	DB	'=========================', 00H
	ORG $+2
$SG130020 DB	0aH, 09H, '%s (build %i) %s', 0aH, 00H
$SG130021 DB	0aH, 09H, '%s (build %i) %s at %s', 0aH, 00H
	ORG $+2
$SG130024 DB	0aH, 00H
	ORG $+2
$SG130022 DB	'========================================================'
	DB	'=========================', 00H
	ORG $+2
$SG130029 DB	'%s', 00H
_DATA	ENDS
; Function compile flags: /Odtp
; File c:\users\user\documents\github\xashtasks\xash_build4529_src\engine\common\sys_con.c
_TEXT	SEGMENT
tv64 = -1032						; size = 4
_inputBuffer$ = -1028					; size = 1024
__$ArrayPad$ = -4					; size = 4
_hWnd$ = 8						; size = 4
_uMsg$ = 12						; size = 4
_wParam$ = 16						; size = 4
_lParam$ = 20						; size = 4
_Con_InputLineProc@16 PROC

; 175  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 1032				; 00000408H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 176  : 	char	inputBuffer[1024];
; 177  : 
; 178  : 	switch( uMsg )

	mov	eax, DWORD PTR _uMsg$[ebp]
	mov	DWORD PTR tv64[ebp], eax
	mov	ecx, DWORD PTR tv64[ebp]
	sub	ecx, 8
	mov	DWORD PTR tv64[ebp], ecx
	cmp	DWORD PTR tv64[ebp], 253		; 000000fdH
	ja	$LN2@Con_InputL
	mov	edx, DWORD PTR tv64[ebp]
	movzx	eax, BYTE PTR $LN14@Con_InputL[edx]
	jmp	DWORD PTR $LN16@Con_InputL[eax*4]
$LN4@Con_InputL:

; 179  : 	{
; 180  : 	case WM_KILLFOCUS:
; 181  : 		if(( HWND )wParam == s_wcd.hWnd )

	mov	ecx, DWORD PTR _wParam$[ebp]
	cmp	ecx, DWORD PTR _s_wcd+64
	jne	SHORT $LN5@Con_InputL

; 182  : 		{
; 183  : 			SetFocus( hWnd );

	mov	edx, DWORD PTR _hWnd$[ebp]
	push	edx
	call	DWORD PTR __imp__SetFocus@4

; 184  : 			return 0;

	xor	eax, eax
	jmp	$LN1@Con_InputL
$LN5@Con_InputL:

; 185  : 		}
; 186  : 		break;

	jmp	$LN2@Con_InputL
$LN6@Con_InputL:

; 187  : 	case WM_SYSKEYDOWN:
; 188  : 	case WM_KEYDOWN:
; 189  : 		if( Con_KeyEvent( LOWORD( wParam ), true ))

	push	1
	mov	eax, DWORD PTR _wParam$[ebp]
	and	eax, 65535				; 0000ffffH
	movzx	ecx, ax
	push	ecx
	call	_Con_KeyEvent
	add	esp, 8
	test	eax, eax
	je	SHORT $LN7@Con_InputL

; 190  : 			return 0;

	xor	eax, eax
	jmp	$LN1@Con_InputL
$LN7@Con_InputL:

; 191  : 		break;

	jmp	$LN2@Con_InputL
$LN8@Con_InputL:

; 192  : 	case WM_SYSKEYUP:
; 193  : 	case WM_KEYUP:
; 194  : 		if( Con_KeyEvent( LOWORD( wParam ), false ))

	push	0
	mov	edx, DWORD PTR _wParam$[ebp]
	and	edx, 65535				; 0000ffffH
	movzx	eax, dx
	push	eax
	call	_Con_KeyEvent
	add	esp, 8
	test	eax, eax
	je	SHORT $LN9@Con_InputL

; 195  : 			return 0;

	xor	eax, eax
	jmp	$LN1@Con_InputL
$LN9@Con_InputL:

; 196  : 		break;

	jmp	$LN2@Con_InputL
$LN10@Con_InputL:

; 197  : 	case WM_CHAR:
; 198  : 		if( Con_KeyEvent( wParam, true ))

	push	1
	mov	ecx, DWORD PTR _wParam$[ebp]
	push	ecx
	call	_Con_KeyEvent
	add	esp, 8
	test	eax, eax
	je	SHORT $LN11@Con_InputL

; 199  : 			return 0;

	xor	eax, eax
	jmp	$LN1@Con_InputL
$LN11@Con_InputL:

; 200  : 		if( wParam == 13 && host.status != HOST_ERR_FATAL )

	cmp	DWORD PTR _wParam$[ebp], 13		; 0000000dH
	jne	$LN2@Con_InputL
	cmp	DWORD PTR _host+12, 3
	je	$LN2@Con_InputL

; 201  : 		{
; 202  : 			GetWindowText( s_wcd.hwndInputLine, inputBuffer, sizeof( inputBuffer ));

	push	1024					; 00000400H
	lea	edx, DWORD PTR _inputBuffer$[ebp]
	push	edx
	mov	eax, DWORD PTR _s_wcd+84
	push	eax
	call	DWORD PTR __imp__GetWindowTextA@12

; 203  : 			Q_strncat( s_wcd.consoleText, inputBuffer, sizeof( s_wcd.consoleText ) - Q_strlen( s_wcd.consoleText ) - 5 );

	push	OFFSET _s_wcd+88
	call	_Q_strlen
	add	esp, 4
	mov	ecx, 256				; 00000100H
	sub	ecx, eax
	sub	ecx, 5
	push	ecx
	lea	edx, DWORD PTR _inputBuffer$[ebp]
	push	edx
	push	OFFSET _s_wcd+88
	call	_Q_strncat
	add	esp, 12					; 0000000cH

; 204  : 			Q_strcat( s_wcd.consoleText, "\n" );

	push	99999					; 0001869fH
	push	OFFSET $SG129892
	push	OFFSET _s_wcd+88
	call	_Q_strncat
	add	esp, 12					; 0000000cH

; 205  : 			SetWindowText( s_wcd.hwndInputLine, "" );

	push	OFFSET $SG129893
	mov	eax, DWORD PTR _s_wcd+84
	push	eax
	call	DWORD PTR __imp__SetWindowTextA@8

; 206  : 			Con_Printf( ">%s\n", inputBuffer );

	lea	ecx, DWORD PTR _inputBuffer$[ebp]
	push	ecx
	push	OFFSET $SG129894
	call	_Con_Printf
	add	esp, 8

; 207  : 
; 208  : 			// copy line to history buffer
; 209  : 			Q_strncpy( s_wcd.historyLines[s_wcd.nextHistoryLine % COMMAND_HISTORY], inputBuffer, MAX_STRING );

	push	256					; 00000100H
	lea	edx, DWORD PTR _inputBuffer$[ebp]
	push	edx
	mov	eax, DWORD PTR _s_wcd+16984
	and	eax, -2147483585			; 8000003fH
	jns	SHORT $LN15@Con_InputL
	dec	eax
	or	eax, -64				; ffffffc0H
	inc	eax
$LN15@Con_InputL:
	shl	eax, 8
	add	eax, OFFSET _s_wcd+600
	push	eax
	call	_Q_strncpy
	add	esp, 12					; 0000000cH

; 210  : 			s_wcd.nextHistoryLine++;

	mov	ecx, DWORD PTR _s_wcd+16984
	add	ecx, 1
	mov	DWORD PTR _s_wcd+16984, ecx

; 211  : 			s_wcd.historyLine = s_wcd.nextHistoryLine;

	mov	edx, DWORD PTR _s_wcd+16984
	mov	DWORD PTR _s_wcd+16988, edx

; 212  : 			return 0;

	xor	eax, eax
	jmp	SHORT $LN1@Con_InputL
$LN2@Con_InputL:

; 213  : 		}
; 214  : 		break;
; 215  : 	}
; 216  : 	return CallWindowProc( s_wcd.SysInputLineWndProc, hWnd, uMsg, wParam, lParam );

	mov	eax, DWORD PTR _lParam$[ebp]
	push	eax
	mov	ecx, DWORD PTR _wParam$[ebp]
	push	ecx
	mov	edx, DWORD PTR _uMsg$[ebp]
	push	edx
	mov	eax, DWORD PTR _hWnd$[ebp]
	push	eax
	mov	ecx, DWORD PTR _s_wcd+17004
	push	ecx
	call	DWORD PTR __imp__CallWindowProcA@20
$LN1@Con_InputL:

; 217  : }

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
	npad	1
$LN16@Con_InputL:
	DD	$LN4@Con_InputL
	DD	$LN6@Con_InputL
	DD	$LN8@Con_InputL
	DD	$LN10@Con_InputL
	DD	$LN2@Con_InputL
$LN14@Con_InputL:
	DB	0
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	1
	DB	2
	DB	3
	DB	4
	DB	1
	DB	2
_Con_InputLineProc@16 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\documents\github\xashtasks\xash_build4529_src\engine\common\sys_con.c
_TEXT	SEGMENT
tv86 = -8						; size = 4
tv64 = -4						; size = 4
_hWnd$ = 8						; size = 4
_uMsg$ = 12						; size = 4
_wParam$ = 16						; size = 4
_lParam$ = 20						; size = 4
_Con_WndProc@16 PROC

; 129  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 130  : 	switch( uMsg )

	mov	eax, DWORD PTR _uMsg$[ebp]
	mov	DWORD PTR tv64[ebp], eax
	cmp	DWORD PTR tv64[ebp], 273		; 00000111H
	ja	SHORT $LN19@Con_WndPro
	cmp	DWORD PTR tv64[ebp], 273		; 00000111H
	je	$LN13@Con_WndPro
	cmp	DWORD PTR tv64[ebp], 1
	je	$LN17@Con_WndPro
	cmp	DWORD PTR tv64[ebp], 6
	je	SHORT $LN6@Con_WndPro
	cmp	DWORD PTR tv64[ebp], 16			; 00000010H
	je	SHORT $LN8@Con_WndPro
	jmp	$LN2@Con_WndPro
$LN19@Con_WndPro:
	cmp	DWORD PTR tv64[ebp], 312		; 00000138H
	je	SHORT $LN11@Con_WndPro
	cmp	DWORD PTR tv64[ebp], 786		; 00000312H
	je	$LN15@Con_WndPro
	jmp	$LN2@Con_WndPro
$LN6@Con_WndPro:

; 131  : 	{
; 132  : 	case WM_ACTIVATE:
; 133  : 		if( LOWORD( wParam ) != WA_INACTIVE )

	mov	ecx, DWORD PTR _wParam$[ebp]
	and	ecx, 65535				; 0000ffffH
	movzx	edx, cx
	test	edx, edx
	je	SHORT $LN7@Con_WndPro

; 134  : 			SetFocus( s_wcd.hwndInputLine );

	mov	eax, DWORD PTR _s_wcd+84
	push	eax
	call	DWORD PTR __imp__SetFocus@4
$LN7@Con_WndPro:

; 135  : 		break;

	jmp	$LN2@Con_WndPro
$LN8@Con_WndPro:

; 136  : 	case WM_CLOSE:
; 137  : 		if( host.status == HOST_ERR_FATAL )

	cmp	DWORD PTR _host+12, 3
	jne	SHORT $LN9@Con_WndPro

; 138  : 		{
; 139  : 			// send windows message
; 140  : 			PostQuitMessage( 0 );

	push	0
	call	DWORD PTR __imp__PostQuitMessage@4

; 141  : 		}

	jmp	SHORT $LN10@Con_WndPro
$LN9@Con_WndPro:

; 142  : 		else Sys_Quit(); // otherwise

	call	_Sys_Quit
$LN10@Con_WndPro:

; 143  : 		return 0;

	xor	eax, eax
	jmp	$LN1@Con_WndPro
$LN11@Con_WndPro:

; 144  : 	case WM_CTLCOLORSTATIC:
; 145  : 		if((HWND)lParam == s_wcd.hwndBuffer )

	mov	ecx, DWORD PTR _lParam$[ebp]
	cmp	ecx, DWORD PTR _s_wcd+68
	jne	SHORT $LN12@Con_WndPro

; 146  : 		{
; 147  : 			SetBkColor((HDC)wParam, RGB( 0x90, 0x90, 0x90 ));

	push	9474192					; 00909090H
	mov	edx, DWORD PTR _wParam$[ebp]
	push	edx
	call	DWORD PTR __imp__SetBkColor@8

; 148  : 			SetTextColor((HDC)wParam, RGB( 0xff, 0xff, 0xff ));

	push	16777215				; 00ffffffH
	mov	eax, DWORD PTR _wParam$[ebp]
	push	eax
	call	DWORD PTR __imp__SetTextColor@8

; 149  : 			return (long)s_wcd.hbrEditBackground;

	mov	eax, DWORD PTR _s_wcd+76
	jmp	SHORT $LN1@Con_WndPro
$LN12@Con_WndPro:

; 150  : 		}
; 151  : 		break;

	jmp	SHORT $LN2@Con_WndPro
$LN13@Con_WndPro:

; 152  : 	case WM_COMMAND:
; 153  : 		if( wParam == SUBMIT_ID )

	cmp	DWORD PTR _wParam$[ebp], 1
	jne	SHORT $LN14@Con_WndPro

; 154  : 		{
; 155  : 			SendMessage( s_wcd.hwndInputLine, WM_CHAR, 13, 0L );

	push	0
	push	13					; 0000000dH
	push	258					; 00000102H
	mov	ecx, DWORD PTR _s_wcd+84
	push	ecx
	call	DWORD PTR __imp__SendMessageA@16

; 156  : 			SetFocus( s_wcd.hwndInputLine );

	mov	edx, DWORD PTR _s_wcd+84
	push	edx
	call	DWORD PTR __imp__SetFocus@4
$LN14@Con_WndPro:

; 157  : 		}
; 158  : 		break;

	jmp	SHORT $LN2@Con_WndPro
$LN15@Con_WndPro:

; 159  : 	case WM_HOTKEY:
; 160  : 		switch( LOWORD( wParam ))

	mov	eax, DWORD PTR _wParam$[ebp]
	and	eax, 65535				; 0000ffffH
	movzx	ecx, ax
	mov	DWORD PTR tv86[ebp], ecx
	cmp	DWORD PTR tv86[ebp], 2
	je	SHORT $LN16@Con_WndPro
	jmp	SHORT $LN4@Con_WndPro
$LN16@Con_WndPro:

; 161  : 		{
; 162  : 		case QUIT_ON_ESCAPE_ID:
; 163  : 			PostQuitMessage( 0 );

	push	0
	call	DWORD PTR __imp__PostQuitMessage@4
$LN4@Con_WndPro:

; 164  : 			break;
; 165  : 		}
; 166  : 		break;

	jmp	SHORT $LN2@Con_WndPro
$LN17@Con_WndPro:

; 167  : 	case WM_CREATE:
; 168  : 		s_wcd.hbrEditBackground = CreateSolidBrush( RGB( 0x90, 0x90, 0x90 ));

	push	9474192					; 00909090H
	call	DWORD PTR __imp__CreateSolidBrush@4
	mov	DWORD PTR _s_wcd+76, eax
$LN2@Con_WndPro:

; 169  : 		break;
; 170  : 	}
; 171  : 	return DefWindowProc( hWnd, uMsg, wParam, lParam );

	mov	edx, DWORD PTR _lParam$[ebp]
	push	edx
	mov	eax, DWORD PTR _wParam$[ebp]
	push	eax
	mov	ecx, DWORD PTR _uMsg$[ebp]
	push	ecx
	mov	edx, DWORD PTR _hWnd$[ebp]
	push	edx
	call	DWORD PTR __imp__DefWindowProcA@16
$LN1@Con_WndPro:

; 172  : }

	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
_Con_WndProc@16 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\documents\github\xashtasks\xash_build4529_src\engine\common\sys_con.c
_TEXT	SEGMENT
tv65 = -1032						; size = 4
_inputBuffer$ = -1028					; size = 1024
__$ArrayPad$ = -4					; size = 4
_key$ = 8						; size = 4
_down$ = 12						; size = 4
_Con_KeyEvent PROC

; 100  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 1032				; 00000408H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 101  : 	char	inputBuffer[1024];
; 102  : 
; 103  : 	if( !down )

	cmp	DWORD PTR _down$[ebp], 0
	jne	SHORT $LN4@Con_KeyEve

; 104  : 		return 0;

	xor	eax, eax
	jmp	$LN1@Con_KeyEve
$LN4@Con_KeyEve:

; 105  : 
; 106  : 	switch( key )

	mov	eax, DWORD PTR _key$[ebp]
	mov	DWORD PTR tv65[ebp], eax
	cmp	DWORD PTR tv65[ebp], 9
	je	SHORT $LN5@Con_KeyEve
	cmp	DWORD PTR tv65[ebp], 38			; 00000026H
	je	$LN8@Con_KeyEve
	cmp	DWORD PTR tv65[ebp], 40			; 00000028H
	je	SHORT $LN6@Con_KeyEve
	jmp	$LN2@Con_KeyEve
$LN5@Con_KeyEve:

; 107  : 	{
; 108  : 	case VK_TAB:
; 109  : 		GetWindowText( s_wcd.hwndInputLine, inputBuffer, sizeof( inputBuffer ));

	push	1024					; 00000400H
	lea	ecx, DWORD PTR _inputBuffer$[ebp]
	push	ecx
	mov	edx, DWORD PTR _s_wcd+84
	push	edx
	call	DWORD PTR __imp__GetWindowTextA@12

; 110  : 		Cmd_AutoComplete( inputBuffer );

	lea	eax, DWORD PTR _inputBuffer$[ebp]
	push	eax
	call	_Cmd_AutoComplete
	add	esp, 4

; 111  : 		Con_SetInputText( inputBuffer );

	lea	ecx, DWORD PTR _inputBuffer$[ebp]
	push	ecx
	call	_Con_SetInputText
	add	esp, 4

; 112  : 		return 1;

	mov	eax, 1
	jmp	$LN1@Con_KeyEve
$LN6@Con_KeyEve:

; 113  : 	case VK_DOWN:
; 114  : 		if( s_wcd.historyLine == s_wcd.nextHistoryLine )

	mov	edx, DWORD PTR _s_wcd+16988
	cmp	edx, DWORD PTR _s_wcd+16984
	jne	SHORT $LN7@Con_KeyEve

; 115  : 			return 0;

	xor	eax, eax
	jmp	$LN1@Con_KeyEve
$LN7@Con_KeyEve:

; 116  : 		s_wcd.historyLine++;

	mov	eax, DWORD PTR _s_wcd+16988
	add	eax, 1
	mov	DWORD PTR _s_wcd+16988, eax

; 117  : 		Con_SetInputText( s_wcd.historyLines[s_wcd.historyLine % COMMAND_HISTORY] );

	mov	ecx, DWORD PTR _s_wcd+16988
	and	ecx, -2147483585			; 8000003fH
	jns	SHORT $LN11@Con_KeyEve
	dec	ecx
	or	ecx, -64				; ffffffc0H
	inc	ecx
$LN11@Con_KeyEve:
	shl	ecx, 8
	add	ecx, OFFSET _s_wcd+600
	push	ecx
	call	_Con_SetInputText
	add	esp, 4

; 118  : 		return 1;

	mov	eax, 1
	jmp	SHORT $LN1@Con_KeyEve
$LN8@Con_KeyEve:

; 119  : 	case VK_UP:
; 120  : 		if( s_wcd.nextHistoryLine - s_wcd.historyLine < COMMAND_HISTORY && s_wcd.historyLine > 0 )

	mov	edx, DWORD PTR _s_wcd+16984
	sub	edx, DWORD PTR _s_wcd+16988
	cmp	edx, 64					; 00000040H
	jge	SHORT $LN9@Con_KeyEve
	cmp	DWORD PTR _s_wcd+16988, 0
	jle	SHORT $LN9@Con_KeyEve

; 121  : 			s_wcd.historyLine--;

	mov	eax, DWORD PTR _s_wcd+16988
	sub	eax, 1
	mov	DWORD PTR _s_wcd+16988, eax
$LN9@Con_KeyEve:

; 122  : 		Con_SetInputText( s_wcd.historyLines[s_wcd.historyLine % COMMAND_HISTORY] );

	mov	ecx, DWORD PTR _s_wcd+16988
	and	ecx, -2147483585			; 8000003fH
	jns	SHORT $LN12@Con_KeyEve
	dec	ecx
	or	ecx, -64				; ffffffc0H
	inc	ecx
$LN12@Con_KeyEve:
	shl	ecx, 8
	add	ecx, OFFSET _s_wcd+600
	push	ecx
	call	_Con_SetInputText
	add	esp, 4

; 123  : 		return 1;

	mov	eax, 1
	jmp	SHORT $LN1@Con_KeyEve
$LN2@Con_KeyEve:

; 124  : 	}
; 125  : 	return 0;

	xor	eax, eax
$LN1@Con_KeyEve:

; 126  : }

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_Con_KeyEvent ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\documents\github\xashtasks\xash_build4529_src\engine\common\sys_con.c
_TEXT	SEGMENT
_Con_Clear_f PROC

; 92   : {

	push	ebp
	mov	ebp, esp

; 93   : 	if( host.type != HOST_DEDICATED ) return;

	cmp	DWORD PTR _host+164, 1
	je	SHORT $LN2@Con_Clear_
	jmp	SHORT $LN1@Con_Clear_
$LN2@Con_Clear_:

; 94   : 	SendMessage( s_wcd.hwndBuffer, EM_SETSEL, 0, -1 );

	push	-1
	push	0
	push	177					; 000000b1H
	mov	eax, DWORD PTR _s_wcd+68
	push	eax
	call	DWORD PTR __imp__SendMessageA@16

; 95   : 	SendMessage( s_wcd.hwndBuffer, EM_REPLACESEL, FALSE, (LPARAM)"" );

	push	OFFSET $SG129797
	push	0
	push	194					; 000000c2H
	mov	ecx, DWORD PTR _s_wcd+68
	push	ecx
	call	DWORD PTR __imp__SendMessageA@16

; 96   : 	UpdateWindow( s_wcd.hwndBuffer );

	mov	edx, DWORD PTR _s_wcd+68
	push	edx
	call	DWORD PTR __imp__UpdateWindow@4
$LN1@Con_Clear_:

; 97   : }

	pop	ebp
	ret	0
_Con_Clear_f ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\documents\github\xashtasks\xash_build4529_src\engine\common\sys_con.c
_TEXT	SEGMENT
_inputText$ = 8						; size = 4
_Con_SetInputText PROC

; 85   : {

	push	ebp
	mov	ebp, esp

; 86   : 	if( host.type != HOST_DEDICATED ) return;

	cmp	DWORD PTR _host+164, 1
	je	SHORT $LN2@Con_SetInp
	jmp	SHORT $LN1@Con_SetInp
$LN2@Con_SetInp:

; 87   : 	SetWindowText( s_wcd.hwndInputLine, inputText );

	mov	eax, DWORD PTR _inputText$[ebp]
	push	eax
	mov	ecx, DWORD PTR _s_wcd+84
	push	ecx
	call	DWORD PTR __imp__SetWindowTextA@8

; 88   : 	SendMessage( s_wcd.hwndInputLine, EM_SETSEL, Q_strlen( inputText ), -1 );

	push	-1
	mov	edx, DWORD PTR _inputText$[ebp]
	push	edx
	call	_Q_strlen
	add	esp, 4
	push	eax
	push	177					; 000000b1H
	mov	eax, DWORD PTR _s_wcd+84
	push	eax
	call	DWORD PTR __imp__SendMessageA@16
$LN1@Con_SetInp:

; 89   : }

	pop	ebp
	ret	0
_Con_SetInputText ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\documents\github\xashtasks\xash_build4529_src\engine\common\sys_con.c
_TEXT	SEGMENT
_Con_Input PROC

; 445  : {

	push	ebp
	mov	ebp, esp

; 446  : 	if( s_wcd.consoleText[0] == 0 )

	mov	eax, 1
	imul	ecx, eax, 0
	movsx	edx, BYTE PTR _s_wcd[ecx+88]
	test	edx, edx
	jne	SHORT $LN2@Con_Input

; 447  : 		return NULL;

	xor	eax, eax
	jmp	SHORT $LN1@Con_Input
$LN2@Con_Input:

; 448  : 		
; 449  : 	Q_strncpy( s_wcd.returnedText, s_wcd.consoleText, sizeof( s_wcd.returnedText ));

	push	256					; 00000100H
	push	OFFSET _s_wcd+88
	push	OFFSET _s_wcd+344
	call	_Q_strncpy
	add	esp, 12					; 0000000cH

; 450  : 	s_wcd.consoleText[0] = 0;

	mov	eax, 1
	imul	ecx, eax, 0
	mov	BYTE PTR _s_wcd[ecx+88], 0

; 451  : 	
; 452  : 	return s_wcd.returnedText;

	mov	eax, OFFSET _s_wcd+344
$LN1@Con_Input:

; 453  : }

	pop	ebp
	ret	0
_Con_Input ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\documents\github\xashtasks\xash_build4529_src\engine\common\sys_con.c
_TEXT	SEGMENT
_Con_DisableInput PROC

; 78   : {

	push	ebp
	mov	ebp, esp

; 79   : 	if( host.type != HOST_DEDICATED ) return;

	cmp	DWORD PTR _host+164, 1
	je	SHORT $LN2@Con_Disabl
	jmp	SHORT $LN1@Con_Disabl
$LN2@Con_Disabl:

; 80   : 	SendMessage( s_wcd.hwndButtonSubmit, WM_ENABLE, 0, 0 );

	push	0
	push	0
	push	10					; 0000000aH
	mov	eax, DWORD PTR _s_wcd+72
	push	eax
	call	DWORD PTR __imp__SendMessageA@16

; 81   : 	SendMessage( s_wcd.hwndInputLine, WM_ENABLE, 0, 0 );

	push	0
	push	0
	push	10					; 0000000aH
	mov	ecx, DWORD PTR _s_wcd+84
	push	ecx
	call	DWORD PTR __imp__SendMessageA@16
$LN1@Con_Disabl:

; 82   : }

	pop	ebp
	ret	0
_Con_DisableInput ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\documents\github\xashtasks\xash_build4529_src\engine\common\sys_con.c
_TEXT	SEGMENT
_Con_RegisterHotkeys PROC

; 463  : {

	push	ebp
	mov	ebp, esp

; 464  : 	SetFocus( s_wcd.hWnd );

	mov	eax, DWORD PTR _s_wcd+64
	push	eax
	call	DWORD PTR __imp__SetFocus@4

; 465  : 
; 466  : 	// user can hit escape for quit
; 467  : 	RegisterHotKey( s_wcd.hWnd, QUIT_ON_ESCAPE_ID, 0, VK_ESCAPE );

	push	27					; 0000001bH
	push	0
	push	2
	mov	ecx, DWORD PTR _s_wcd+64
	push	ecx
	call	DWORD PTR __imp__RegisterHotKey@16

; 468  : }

	pop	ebp
	ret	0
_Con_RegisterHotkeys ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\documents\github\xashtasks\xash_build4529_src\engine\common\sys_con.c
_TEXT	SEGMENT
_Con_DestroyConsole PROC

; 400  : {

	push	ebp
	mov	ebp, esp

; 401  : 	// last text message into console or log 
; 402  : 	Con_Reportf( "Sys_FreeLibrary: Unloading xash.dll\n" );

	push	OFFSET $SG129975
	call	_Con_Reportf
	add	esp, 4

; 403  : 
; 404  : 	Sys_CloseLog();

	call	_Sys_CloseLog

; 405  : 
; 406  : 	if( s_wcd.hWnd )

	cmp	DWORD PTR _s_wcd+64, 0
	je	$LN2@Con_Destro

; 407  : 	{
; 408  : 		DeleteObject( s_wcd.hbrEditBackground );

	mov	eax, DWORD PTR _s_wcd+76
	push	eax
	call	DWORD PTR __imp__DeleteObject@4

; 409  :                     DeleteObject( s_wcd.hfBufferFont );

	mov	ecx, DWORD PTR _s_wcd+80
	push	ecx
	call	DWORD PTR __imp__DeleteObject@4

; 410  : 
; 411  : 		if( host.type == HOST_DEDICATED )

	cmp	DWORD PTR _host+164, 1
	jne	SHORT $LN3@Con_Destro

; 412  : 		{
; 413  : 			ShowWindow( s_wcd.hwndButtonSubmit, SW_HIDE );

	push	0
	mov	edx, DWORD PTR _s_wcd+72
	push	edx
	call	DWORD PTR __imp__ShowWindow@8

; 414  : 			DestroyWindow( s_wcd.hwndButtonSubmit );

	mov	eax, DWORD PTR _s_wcd+72
	push	eax
	call	DWORD PTR __imp__DestroyWindow@4

; 415  : 			s_wcd.hwndButtonSubmit = 0;

	mov	DWORD PTR _s_wcd+72, 0

; 416  : 
; 417  : 			ShowWindow( s_wcd.hwndInputLine, SW_HIDE );

	push	0
	mov	ecx, DWORD PTR _s_wcd+84
	push	ecx
	call	DWORD PTR __imp__ShowWindow@8

; 418  : 			DestroyWindow( s_wcd.hwndInputLine );

	mov	edx, DWORD PTR _s_wcd+84
	push	edx
	call	DWORD PTR __imp__DestroyWindow@4

; 419  : 			s_wcd.hwndInputLine = 0;

	mov	DWORD PTR _s_wcd+84, 0
$LN3@Con_Destro:

; 420  : 		}
; 421  : 
; 422  : 		ShowWindow( s_wcd.hwndBuffer, SW_HIDE );

	push	0
	mov	eax, DWORD PTR _s_wcd+68
	push	eax
	call	DWORD PTR __imp__ShowWindow@8

; 423  : 		DestroyWindow( s_wcd.hwndBuffer );

	mov	ecx, DWORD PTR _s_wcd+68
	push	ecx
	call	DWORD PTR __imp__DestroyWindow@4

; 424  : 		s_wcd.hwndBuffer = 0;

	mov	DWORD PTR _s_wcd+68, 0

; 425  : 
; 426  : 		ShowWindow( s_wcd.hWnd, SW_HIDE );

	push	0
	mov	edx, DWORD PTR _s_wcd+64
	push	edx
	call	DWORD PTR __imp__ShowWindow@8

; 427  : 		DestroyWindow( s_wcd.hWnd );

	mov	eax, DWORD PTR _s_wcd+64
	push	eax
	call	DWORD PTR __imp__DestroyWindow@4

; 428  : 		s_wcd.hWnd = 0;

	mov	DWORD PTR _s_wcd+64, 0
$LN2@Con_Destro:

; 429  : 	}
; 430  : 
; 431  : 	UnregisterClass( SYSCONSOLE, host.hInst );

	mov	ecx, DWORD PTR _host
	push	ecx
	push	OFFSET $SG129978
	call	DWORD PTR __imp__UnregisterClassA@8

; 432  : 
; 433  : 	// place it here in case Sys_Crash working properly
; 434  : 	if( host.hMutex ) CloseHandle( host.hMutex );

	cmp	DWORD PTR _host+4, 0
	je	SHORT $LN1@Con_Destro
	mov	edx, DWORD PTR _host+4
	push	edx
	call	DWORD PTR __imp__CloseHandle@4
$LN1@Con_Destro:

; 435  : }

	pop	ebp
	ret	0
_Con_DestroyConsole ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\documents\github\xashtasks\xash_build4529_src\engine\common\sys_con.c
_TEXT	SEGMENT
_wc$ = -348						; size = 40
_CONSTYLE$ = -308					; size = 4
_nHeight$ = -304					; size = 4
_swidth$ = -300						; size = 4
_sheight$ = -296					; size = 4
tv304 = -292						; size = 4
_fontsize$ = -288					; size = 4
_DEDSTYLE$ = -284					; size = 4
_hDC$ = -280						; size = 4
_rect$ = -276						; size = 16
_FontName$ = -260					; size = 256
__$ArrayPad$ = -4					; size = 4
_Con_CreateConsole PROC

; 262  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 348				; 0000015cH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 263  : 	HDC	hDC;
; 264  : 	WNDCLASS	wc;
; 265  : 	RECT	rect;
; 266  : 	int	nHeight;
; 267  : 	int	swidth, sheight, fontsize;
; 268  : 	int	DEDSTYLE = WS_POPUPWINDOW | WS_CAPTION;

	mov	DWORD PTR _DEDSTYLE$[ebp], -2134376448	; 80c80000H

; 269  : 	int	CONSTYLE = WS_CHILD|WS_VISIBLE|WS_VSCROLL|WS_BORDER|WS_EX_CLIENTEDGE|ES_LEFT|ES_MULTILINE|ES_AUTOVSCROLL|ES_READONLY;

	mov	DWORD PTR _CONSTYLE$[ebp], 1352665668	; 50a00a44H

; 270  : 	string	FontName;
; 271  : 
; 272  : 	wc.style         = 0;

	mov	DWORD PTR _wc$[ebp], 0

; 273  : 	wc.lpfnWndProc   = (WNDPROC)Con_WndProc;

	mov	DWORD PTR _wc$[ebp+4], OFFSET _Con_WndProc@16

; 274  : 	wc.cbClsExtra    = 0;

	mov	DWORD PTR _wc$[ebp+8], 0

; 275  : 	wc.cbWndExtra    = 0;

	mov	DWORD PTR _wc$[ebp+12], 0

; 276  : 	wc.hInstance     = host.hInst;

	mov	eax, DWORD PTR _host
	mov	DWORD PTR _wc$[ebp+16], eax

; 277  : 	wc.hIcon         = LoadIcon( host.hInst, MAKEINTRESOURCE( IDI_ICON1 ));

	push	101					; 00000065H
	mov	ecx, DWORD PTR _host
	push	ecx
	call	DWORD PTR __imp__LoadIconA@8
	mov	DWORD PTR _wc$[ebp+20], eax

; 278  : 	wc.hCursor       = LoadCursor( NULL, IDC_ARROW );

	push	32512					; 00007f00H
	push	0
	call	DWORD PTR __imp__LoadCursorA@8
	mov	DWORD PTR _wc$[ebp+24], eax

; 279  : 	wc.hbrBackground = (void *)COLOR_3DSHADOW;

	mov	DWORD PTR _wc$[ebp+28], 16		; 00000010H

; 280  : 	wc.lpszClassName = SYSCONSOLE;

	mov	DWORD PTR _wc$[ebp+36], OFFSET $SG129940

; 281  : 	wc.lpszMenuName  = 0;

	mov	DWORD PTR _wc$[ebp+32], 0

; 282  : 
; 283  : 	if( Sys_CheckParm( "-log" ))

	push	OFFSET $SG129942
	call	_Sys_CheckParm
	add	esp, 4
	test	eax, eax
	je	SHORT $LN2@Con_Create

; 284  : 		s_wcd.log_active = true;

	mov	DWORD PTR _s_wcd+17012, 1
$LN2@Con_Create:

; 285  : 
; 286  : 	if( host.type == HOST_NORMAL )

	cmp	DWORD PTR _host+164, 0
	jne	$LN3@Con_Create

; 287  : 	{
; 288  : 		rect.left = 0;

	mov	DWORD PTR _rect$[ebp], 0

; 289  : 		rect.right = 536;

	mov	DWORD PTR _rect$[ebp+8], 536		; 00000218H

; 290  : 		rect.top = 0;

	mov	DWORD PTR _rect$[ebp+4], 0

; 291  : 		rect.bottom = 364;

	mov	DWORD PTR _rect$[ebp+12], 364		; 0000016cH

; 292  : 		Q_strncpy( FontName, "Fixedsys", sizeof( FontName ));

	push	256					; 00000100H
	push	OFFSET $SG129945
	lea	edx, DWORD PTR _FontName$[ebp]
	push	edx
	call	_Q_strncpy
	add	esp, 12					; 0000000cH

; 293  : 		Q_strncpy( s_wcd.title, va( "Xash3D %s", XASH_VERSION ), sizeof( s_wcd.title ));

	push	64					; 00000040H
	push	OFFSET $SG129946
	push	OFFSET $SG129947
	call	_va
	add	esp, 8
	push	eax
	push	OFFSET _s_wcd
	call	_Q_strncpy
	add	esp, 12					; 0000000cH

; 294  : 		Q_strncpy( s_wcd.log_path, "engine.log", sizeof( s_wcd.log_path ));

	push	1024					; 00000400H
	push	OFFSET $SG129948
	push	OFFSET _s_wcd+17016
	call	_Q_strncpy
	add	esp, 12					; 0000000cH

; 295  : 		fontsize = 8;

	mov	DWORD PTR _fontsize$[ebp], 8

; 296  : 	}

	jmp	$LN4@Con_Create
$LN3@Con_Create:

; 297  : 	else // dedicated console
; 298  : 	{
; 299  : 		rect.left = 0;

	mov	DWORD PTR _rect$[ebp], 0

; 300  : 		rect.right = 640;

	mov	DWORD PTR _rect$[ebp+8], 640		; 00000280H

; 301  : 		rect.top = 0;

	mov	DWORD PTR _rect$[ebp+4], 0

; 302  : 		rect.bottom = 392;

	mov	DWORD PTR _rect$[ebp+12], 392		; 00000188H

; 303  : 		Q_strncpy( FontName, "System", sizeof( FontName ));

	push	256					; 00000100H
	push	OFFSET $SG129949
	lea	eax, DWORD PTR _FontName$[ebp]
	push	eax
	call	_Q_strncpy
	add	esp, 12					; 0000000cH

; 304  : 		Q_strncpy( s_wcd.title, "Xash Dedicated Server", sizeof( s_wcd.title ));

	push	64					; 00000040H
	push	OFFSET $SG129950
	push	OFFSET _s_wcd
	call	_Q_strncpy
	add	esp, 12					; 0000000cH

; 305  : 		Q_strncpy( s_wcd.log_path, "dedicated.log", sizeof( s_wcd.log_path ));

	push	1024					; 00000400H
	push	OFFSET $SG129951
	push	OFFSET _s_wcd+17016
	call	_Q_strncpy
	add	esp, 12					; 0000000cH

; 306  : 		s_wcd.log_active = true; // always make log

	mov	DWORD PTR _s_wcd+17012, 1

; 307  : 		fontsize = 14;

	mov	DWORD PTR _fontsize$[ebp], 14		; 0000000eH
$LN4@Con_Create:

; 308  : 	}
; 309  : 
; 310  : 	Sys_InitLog();

	call	_Sys_InitLog

; 311  : 
; 312  : 	if( !RegisterClass( &wc ))

	lea	ecx, DWORD PTR _wc$[ebp]
	push	ecx
	call	DWORD PTR __imp__RegisterClassA@4
	movzx	edx, ax
	test	edx, edx
	jne	SHORT $LN5@Con_Create

; 313  : 	{
; 314  : 		// print into log
; 315  : 		Con_DPrintf( S_ERROR "Can't register window class '%s'\n", SYSCONSOLE );

	push	OFFSET $SG129953
	push	OFFSET $SG129954
	call	_Con_DPrintf
	add	esp, 8

; 316  : 		return;

	jmp	$LN1@Con_Create
$LN5@Con_Create:

; 317  : 	} 
; 318  : 
; 319  : 	AdjustWindowRect( &rect, DEDSTYLE, FALSE );

	push	0
	mov	eax, DWORD PTR _DEDSTYLE$[ebp]
	push	eax
	lea	ecx, DWORD PTR _rect$[ebp]
	push	ecx
	call	DWORD PTR __imp__AdjustWindowRect@12

; 320  : 
; 321  : 	hDC = GetDC( GetDesktopWindow() );

	call	DWORD PTR __imp__GetDesktopWindow@0
	push	eax
	call	DWORD PTR __imp__GetDC@4
	mov	DWORD PTR _hDC$[ebp], eax

; 322  : 	swidth = GetDeviceCaps( hDC, HORZRES );

	push	8
	mov	edx, DWORD PTR _hDC$[ebp]
	push	edx
	call	DWORD PTR __imp__GetDeviceCaps@8
	mov	DWORD PTR _swidth$[ebp], eax

; 323  : 	sheight = GetDeviceCaps( hDC, VERTRES );

	push	10					; 0000000aH
	mov	eax, DWORD PTR _hDC$[ebp]
	push	eax
	call	DWORD PTR __imp__GetDeviceCaps@8
	mov	DWORD PTR _sheight$[ebp], eax

; 324  : 	ReleaseDC( GetDesktopWindow(), hDC );

	mov	ecx, DWORD PTR _hDC$[ebp]
	push	ecx
	call	DWORD PTR __imp__GetDesktopWindow@0
	push	eax
	call	DWORD PTR __imp__ReleaseDC@8

; 325  : 
; 326  : 	s_wcd.windowWidth = rect.right - rect.left;

	mov	edx, DWORD PTR _rect$[ebp+8]
	sub	edx, DWORD PTR _rect$[ebp]
	mov	DWORD PTR _s_wcd+16996, edx

; 327  : 	s_wcd.windowHeight = rect.bottom - rect.top;

	mov	eax, DWORD PTR _rect$[ebp+12]
	sub	eax, DWORD PTR _rect$[ebp+4]
	mov	DWORD PTR _s_wcd+17000, eax

; 328  : 
; 329  : 	s_wcd.hWnd = CreateWindowEx( WS_EX_DLGMODALFRAME, SYSCONSOLE, s_wcd.title, DEDSTYLE, ( swidth - 600 ) / 2, ( sheight - 450 ) / 2 , rect.right - rect.left + 1, rect.bottom - rect.top + 1, NULL, NULL, host.hInst, NULL );

	push	0
	mov	ecx, DWORD PTR _host
	push	ecx
	push	0
	push	0
	mov	edx, DWORD PTR _rect$[ebp+12]
	sub	edx, DWORD PTR _rect$[ebp+4]
	add	edx, 1
	push	edx
	mov	eax, DWORD PTR _rect$[ebp+8]
	sub	eax, DWORD PTR _rect$[ebp]
	add	eax, 1
	push	eax
	mov	eax, DWORD PTR _sheight$[ebp]
	sub	eax, 450				; 000001c2H
	cdq
	sub	eax, edx
	sar	eax, 1
	push	eax
	mov	eax, DWORD PTR _swidth$[ebp]
	sub	eax, 600				; 00000258H
	cdq
	sub	eax, edx
	sar	eax, 1
	push	eax
	mov	ecx, DWORD PTR _DEDSTYLE$[ebp]
	push	ecx
	push	OFFSET _s_wcd
	push	OFFSET $SG129955
	push	1
	call	DWORD PTR __imp__CreateWindowExA@48
	mov	DWORD PTR _s_wcd+64, eax

; 330  : 	if( s_wcd.hWnd == NULL )

	cmp	DWORD PTR _s_wcd+64, 0
	jne	SHORT $LN6@Con_Create

; 331  : 	{
; 332  : 		Con_DPrintf( S_ERROR "Can't create window '%s'\n", s_wcd.title );

	push	OFFSET _s_wcd
	push	OFFSET $SG129957
	call	_Con_DPrintf
	add	esp, 8

; 333  : 		return;

	jmp	$LN1@Con_Create
$LN6@Con_Create:

; 334  : 	}
; 335  : 
; 336  : 	// create fonts
; 337  : 	hDC = GetDC( s_wcd.hWnd );

	mov	edx, DWORD PTR _s_wcd+64
	push	edx
	call	DWORD PTR __imp__GetDC@4
	mov	DWORD PTR _hDC$[ebp], eax

; 338  : 	nHeight = -MulDiv( fontsize, GetDeviceCaps( hDC, LOGPIXELSY ), 72 );

	push	72					; 00000048H
	push	90					; 0000005aH
	mov	eax, DWORD PTR _hDC$[ebp]
	push	eax
	call	DWORD PTR __imp__GetDeviceCaps@8
	push	eax
	mov	ecx, DWORD PTR _fontsize$[ebp]
	push	ecx
	call	DWORD PTR __imp__MulDiv@12
	neg	eax
	mov	DWORD PTR _nHeight$[ebp], eax

; 339  : 	s_wcd.hfBufferFont = CreateFont( nHeight, 0, 0, 0, FW_LIGHT, 0, 0, 0, DEFAULT_CHARSET, OUT_DEFAULT_PRECIS, CLIP_DEFAULT_PRECIS, DEFAULT_QUALITY, FF_MODERN|FIXED_PITCH, FontName );

	lea	edx, DWORD PTR _FontName$[ebp]
	push	edx
	push	49					; 00000031H
	push	0
	push	0
	push	0
	push	1
	push	0
	push	0
	push	0
	push	300					; 0000012cH
	push	0
	push	0
	push	0
	mov	eax, DWORD PTR _nHeight$[ebp]
	push	eax
	call	DWORD PTR __imp__CreateFontA@56
	mov	DWORD PTR _s_wcd+80, eax

; 340  : 	ReleaseDC( s_wcd.hWnd, hDC );

	mov	ecx, DWORD PTR _hDC$[ebp]
	push	ecx
	mov	edx, DWORD PTR _s_wcd+64
	push	edx
	call	DWORD PTR __imp__ReleaseDC@8

; 341  : 
; 342  : 	if( host.type == HOST_DEDICATED )

	cmp	DWORD PTR _host+164, 1
	jne	$LN7@Con_Create

; 343  : 	{
; 344  : 		// create the input line
; 345  : 		s_wcd.hwndInputLine = CreateWindowEx( WS_EX_CLIENTEDGE, "edit", NULL, WS_CHILD|WS_VISIBLE|WS_BORDER|ES_LEFT|ES_AUTOHSCROLL, 0, 366, 550, 25, s_wcd.hWnd, (HMENU)INPUT_ID, host.hInst, NULL );

	push	0
	mov	eax, DWORD PTR _host
	push	eax
	push	109					; 0000006dH
	mov	ecx, DWORD PTR _s_wcd+64
	push	ecx
	push	25					; 00000019H
	push	550					; 00000226H
	push	366					; 0000016eH
	push	0
	push	1350566016				; 50800080H
	push	0
	push	OFFSET $SG129959
	push	512					; 00000200H
	call	DWORD PTR __imp__CreateWindowExA@48
	mov	DWORD PTR _s_wcd+84, eax

; 346  : 
; 347  : 		s_wcd.hwndButtonSubmit = CreateWindow( "button", NULL, BS_PUSHBUTTON|WS_VISIBLE|WS_CHILD|BS_DEFPUSHBUTTON, 552, 367, 87, 25, s_wcd.hWnd, (HMENU)SUBMIT_ID, host.hInst, NULL );

	push	0
	mov	edx, DWORD PTR _host
	push	edx
	push	1
	mov	eax, DWORD PTR _s_wcd+64
	push	eax
	push	25					; 00000019H
	push	87					; 00000057H
	push	367					; 0000016fH
	push	552					; 00000228H
	push	1342177281				; 50000001H
	push	0
	push	OFFSET $SG129960
	push	0
	call	DWORD PTR __imp__CreateWindowExA@48
	mov	DWORD PTR _s_wcd+72, eax

; 348  : 		SendMessage( s_wcd.hwndButtonSubmit, WM_SETTEXT, 0, ( LPARAM ) "submit" );

	push	OFFSET $SG129961
	push	0
	push	12					; 0000000cH
	mov	ecx, DWORD PTR _s_wcd+72
	push	ecx
	call	DWORD PTR __imp__SendMessageA@16
$LN7@Con_Create:

; 349  :           }
; 350  :           
; 351  : 	// create the scrollbuffer
; 352  : 	GetClientRect( s_wcd.hWnd, &rect );

	lea	edx, DWORD PTR _rect$[ebp]
	push	edx
	mov	eax, DWORD PTR _s_wcd+64
	push	eax
	call	DWORD PTR __imp__GetClientRect@8

; 353  : 
; 354  : 	s_wcd.hwndBuffer = CreateWindowEx( WS_EX_DLGMODALFRAME|WS_EX_CLIENTEDGE, "edit", NULL, CONSTYLE, 0, 0, rect.right - rect.left, min(365, rect.bottom), s_wcd.hWnd, (HMENU)EDIT_ID, host.hInst, NULL );

	cmp	DWORD PTR _rect$[ebp+12], 365		; 0000016dH
	jle	SHORT $LN14@Con_Create
	mov	DWORD PTR tv304[ebp], 365		; 0000016dH
	jmp	SHORT $LN15@Con_Create
$LN14@Con_Create:
	mov	ecx, DWORD PTR _rect$[ebp+12]
	mov	DWORD PTR tv304[ebp], ecx
$LN15@Con_Create:
	push	0
	mov	edx, DWORD PTR _host
	push	edx
	push	110					; 0000006eH
	mov	eax, DWORD PTR _s_wcd+64
	push	eax
	mov	ecx, DWORD PTR tv304[ebp]
	push	ecx
	mov	edx, DWORD PTR _rect$[ebp+8]
	sub	edx, DWORD PTR _rect$[ebp]
	push	edx
	push	0
	push	0
	mov	eax, DWORD PTR _CONSTYLE$[ebp]
	push	eax
	push	0
	push	OFFSET $SG129962
	push	513					; 00000201H
	call	DWORD PTR __imp__CreateWindowExA@48
	mov	DWORD PTR _s_wcd+68, eax

; 355  : 	SendMessage( s_wcd.hwndBuffer, WM_SETFONT, (WPARAM)s_wcd.hfBufferFont, 0 );

	push	0
	mov	ecx, DWORD PTR _s_wcd+80
	push	ecx
	push	48					; 00000030H
	mov	edx, DWORD PTR _s_wcd+68
	push	edx
	call	DWORD PTR __imp__SendMessageA@16

; 356  : 
; 357  : 	if( host.type == HOST_DEDICATED )

	cmp	DWORD PTR _host+164, 1
	jne	SHORT $LN8@Con_Create

; 358  : 	{
; 359  : 		s_wcd.SysInputLineWndProc = (WNDPROC)SetWindowLong( s_wcd.hwndInputLine, GWL_WNDPROC, (long)Con_InputLineProc );

	push	OFFSET _Con_InputLineProc@16
	push	-4					; fffffffcH
	mov	eax, DWORD PTR _s_wcd+84
	push	eax
	call	DWORD PTR __imp__SetWindowLongA@12
	mov	DWORD PTR _s_wcd+17004, eax

; 360  : 		SendMessage( s_wcd.hwndInputLine, WM_SETFONT, ( WPARAM )s_wcd.hfBufferFont, 0 );

	push	0
	mov	ecx, DWORD PTR _s_wcd+80
	push	ecx
	push	48					; 00000030H
	mov	edx, DWORD PTR _s_wcd+84
	push	edx
	call	DWORD PTR __imp__SendMessageA@16
$LN8@Con_Create:

; 361  :           }
; 362  : 
; 363  : 	// show console if needed
; 364  : 	if( host.con_showalways )

	cmp	DWORD PTR _host+34356, 0
	je	SHORT $LN9@Con_Create

; 365  : 	{          
; 366  : 		// make console visible
; 367  : 		ShowWindow( s_wcd.hWnd, SW_SHOWDEFAULT );

	push	10					; 0000000aH
	mov	eax, DWORD PTR _s_wcd+64
	push	eax
	call	DWORD PTR __imp__ShowWindow@8

; 368  : 		UpdateWindow( s_wcd.hWnd );

	mov	ecx, DWORD PTR _s_wcd+64
	push	ecx
	call	DWORD PTR __imp__UpdateWindow@4

; 369  : 		SetForegroundWindow( s_wcd.hWnd );

	mov	edx, DWORD PTR _s_wcd+64
	push	edx
	call	DWORD PTR __imp__SetForegroundWindow@4

; 370  : 
; 371  : 		if( host.type != HOST_DEDICATED )

	cmp	DWORD PTR _host+164, 1
	je	SHORT $LN11@Con_Create

; 372  : 			SetFocus( s_wcd.hWnd );

	mov	eax, DWORD PTR _s_wcd+64
	push	eax
	call	DWORD PTR __imp__SetFocus@4
	jmp	SHORT $LN12@Con_Create
$LN11@Con_Create:

; 373  : 		else SetFocus( s_wcd.hwndInputLine );

	mov	ecx, DWORD PTR _s_wcd+84
	push	ecx
	call	DWORD PTR __imp__SetFocus@4
$LN12@Con_Create:

; 374  : 		s_wcd.status = true;

	mov	DWORD PTR _s_wcd+16992, 1

; 375  :           }

	jmp	SHORT $LN1@Con_Create
$LN9@Con_Create:

; 376  : 	else s_wcd.status = false;

	mov	DWORD PTR _s_wcd+16992, 0
$LN1@Con_Create:

; 377  : }

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_Con_CreateConsole ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\documents\github\xashtasks\xash_build4529_src\engine\common\sys_con.c
_TEXT	SEGMENT
_Con_InitConsoleCommands PROC

; 387  : {

	push	ebp
	mov	ebp, esp

; 388  : 	if( host.type != HOST_DEDICATED ) return;

	cmp	DWORD PTR _host+164, 1
	je	SHORT $LN2@Con_InitCo
	jmp	SHORT $LN1@Con_InitCo
$LN2@Con_InitCo:

; 389  : 	Cmd_AddCommand( "clear", Con_Clear_f, "clear console history" );

	push	OFFSET $SG129971
	push	OFFSET _Con_Clear_f
	push	OFFSET $SG129972
	call	_Cmd_AddCommand
	add	esp, 12					; 0000000cH
$LN1@Con_InitCo:

; 390  : }

	pop	ebp
	ret	0
_Con_InitConsoleCommands ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\documents\github\xashtasks\xash_build4529_src\engine\common\sys_con.c
_TEXT	SEGMENT
_len$ = -4						; size = 4
_pMsg$ = 8						; size = 4
_Con_WinPrint PROC

; 235  : {

	push	ebp
	mov	ebp, esp
	push	ecx

; 236  : 	size_t	len = Q_strlen( pMsg );

	mov	eax, DWORD PTR _pMsg$[ebp]
	push	eax
	call	_Q_strlen
	add	esp, 4
	mov	DWORD PTR _len$[ebp], eax

; 237  : 
; 238  : 	// replace selection instead of appending if we're overflowing
; 239  : 	s_wcd.outLen += len;

	mov	ecx, DWORD PTR _s_wcd+17008
	add	ecx, DWORD PTR _len$[ebp]
	mov	DWORD PTR _s_wcd+17008, ecx

; 240  : 	if( s_wcd.outLen >= 0x7fff )

	cmp	DWORD PTR _s_wcd+17008, 32767		; 00007fffH
	jb	SHORT $LN2@Con_WinPri

; 241  : 	{
; 242  : 		SendMessage( s_wcd.hwndBuffer, EM_SETSEL, 0, -1 );

	push	-1
	push	0
	push	177					; 000000b1H
	mov	edx, DWORD PTR _s_wcd+68
	push	edx
	call	DWORD PTR __imp__SendMessageA@16

; 243  : 		s_wcd.outLen = len;

	mov	eax, DWORD PTR _len$[ebp]
	mov	DWORD PTR _s_wcd+17008, eax
$LN2@Con_WinPri:

; 244  : 	} 
; 245  : 
; 246  : 	SendMessage( s_wcd.hwndBuffer, EM_REPLACESEL, 0, (LPARAM)pMsg );

	mov	ecx, DWORD PTR _pMsg$[ebp]
	push	ecx
	push	0
	push	194					; 000000c2H
	mov	edx, DWORD PTR _s_wcd+68
	push	edx
	call	DWORD PTR __imp__SendMessageA@16

; 247  : 
; 248  : 	// put this text into the windows console
; 249  : 	SendMessage( s_wcd.hwndBuffer, EM_LINESCROLL, 0, 0xffff );

	push	65535					; 0000ffffH
	push	0
	push	182					; 000000b6H
	mov	eax, DWORD PTR _s_wcd+68
	push	eax
	call	DWORD PTR __imp__SendMessageA@16

; 250  : 	SendMessage( s_wcd.hwndBuffer, EM_SCROLLCARET, 0, 0 );

	push	0
	push	0
	push	183					; 000000b7H
	mov	ecx, DWORD PTR _s_wcd+68
	push	ecx
	call	DWORD PTR __imp__SendMessageA@16

; 251  : }

	mov	esp, ebp
	pop	ebp
	ret	0
_Con_WinPrint ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\documents\github\xashtasks\xash_build4529_src\engine\common\sys_con.c
_TEXT	SEGMENT
_show$ = 8						; size = 4
_Con_ShowConsole PROC

; 64   : {

	push	ebp
	mov	ebp, esp

; 65   : 	if( !s_wcd.hWnd || show == s_wcd.status )

	cmp	DWORD PTR _s_wcd+64, 0
	je	SHORT $LN3@Con_ShowCo
	mov	eax, DWORD PTR _show$[ebp]
	cmp	eax, DWORD PTR _s_wcd+16992
	jne	SHORT $LN2@Con_ShowCo
$LN3@Con_ShowCo:

; 66   : 		return;

	jmp	SHORT $LN1@Con_ShowCo
$LN2@Con_ShowCo:

; 67   : 
; 68   : 	s_wcd.status = show;

	mov	ecx, DWORD PTR _show$[ebp]
	mov	DWORD PTR _s_wcd+16992, ecx

; 69   : 	if( show )

	cmp	DWORD PTR _show$[ebp], 0
	je	SHORT $LN4@Con_ShowCo

; 70   : 	{
; 71   : 		ShowWindow( s_wcd.hWnd, SW_SHOWNORMAL );

	push	1
	mov	edx, DWORD PTR _s_wcd+64
	push	edx
	call	DWORD PTR __imp__ShowWindow@8

; 72   : 		SendMessage( s_wcd.hwndBuffer, EM_LINESCROLL, 0, 0xffff );

	push	65535					; 0000ffffH
	push	0
	push	182					; 000000b6H
	mov	eax, DWORD PTR _s_wcd+68
	push	eax
	call	DWORD PTR __imp__SendMessageA@16

; 73   : 	}

	jmp	SHORT $LN1@Con_ShowCo
$LN4@Con_ShowCo:

; 74   : 	else ShowWindow( s_wcd.hWnd, SW_HIDE );

	push	0
	mov	ecx, DWORD PTR _s_wcd+64
	push	ecx
	call	DWORD PTR __imp__ShowWindow@8
$LN1@Con_ShowCo:

; 75   : }

	pop	ebp
	ret	0
_Con_ShowConsole ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\documents\github\xashtasks\xash_build4529_src\engine\common\sys_con.c
_TEXT	SEGMENT
tv64 = -72						; size = 4
_event_name$ = -68					; size = 64
__$ArrayPad$ = -4					; size = 4
_Sys_CloseLog PROC

; 503  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 504  : 	char	event_name[64];
; 505  : 
; 506  : 	// continue logged
; 507  : 	switch( host.status )

	mov	eax, DWORD PTR _host+12
	mov	DWORD PTR tv64[ebp], eax
	cmp	DWORD PTR tv64[ebp], 3
	je	SHORT $LN5@Sys_CloseL
	cmp	DWORD PTR tv64[ebp], 6
	je	SHORT $LN4@Sys_CloseL
	jmp	SHORT $LN6@Sys_CloseL
$LN4@Sys_CloseL:

; 508  : 	{
; 509  : 	case HOST_CRASHED:
; 510  : 		Q_strncpy( event_name, "crashed", sizeof( event_name ));

	push	64					; 00000040H
	push	OFFSET $SG130008
	lea	ecx, DWORD PTR _event_name$[ebp]
	push	ecx
	call	_Q_strncpy
	add	esp, 12					; 0000000cH

; 511  : 		break;

	jmp	SHORT $LN2@Sys_CloseL
$LN5@Sys_CloseL:

; 512  : 	case HOST_ERR_FATAL:
; 513  : 		Q_strncpy( event_name, "stopped with error", sizeof( event_name ));

	push	64					; 00000040H
	push	OFFSET $SG130010
	lea	edx, DWORD PTR _event_name$[ebp]
	push	edx
	call	_Q_strncpy
	add	esp, 12					; 0000000cH

; 514  : 		break;

	jmp	SHORT $LN2@Sys_CloseL
$LN6@Sys_CloseL:

; 515  : 	default:
; 516  : 		if( !host.change_game ) Q_strncpy( event_name, "stopped", sizeof( event_name ));

	cmp	DWORD PTR _host+34368, 0
	jne	SHORT $LN7@Sys_CloseL
	push	64					; 00000040H
	push	OFFSET $SG130014
	lea	eax, DWORD PTR _event_name$[ebp]
	push	eax
	call	_Q_strncpy
	add	esp, 12					; 0000000cH
	jmp	SHORT $LN2@Sys_CloseL
$LN7@Sys_CloseL:

; 517  : 		else Q_strncpy( event_name, host.finalmsg, sizeof( event_name ));

	push	64					; 00000040H
	push	OFFSET _host+240
	lea	ecx, DWORD PTR _event_name$[ebp]
	push	ecx
	call	_Q_strncpy
	add	esp, 12					; 0000000cH
$LN2@Sys_CloseL:

; 518  : 		break;
; 519  : 	}
; 520  : 
; 521  : 	if( s_wcd.logfile )

	cmp	DWORD PTR _s_wcd+18040, 0
	je	$LN1@Sys_CloseL

; 522  : 	{
; 523  : 		fprintf( s_wcd.logfile, "\n");

	push	OFFSET $SG130016
	mov	edx, DWORD PTR _s_wcd+18040
	push	edx
	call	_fprintf
	add	esp, 8

; 524  : 		fprintf( s_wcd.logfile, "=================================================================================");

	push	OFFSET $SG130017
	mov	eax, DWORD PTR _s_wcd+18040
	push	eax
	call	_fprintf
	add	esp, 8

; 525  : 		if( host.change_game ) fprintf( s_wcd.logfile, "\n\t%s (build %i) %s\n", s_wcd.title, Q_buildnum(), event_name );

	cmp	DWORD PTR _host+34368, 0
	je	SHORT $LN10@Sys_CloseL
	lea	ecx, DWORD PTR _event_name$[ebp]
	push	ecx
	call	_Q_buildnum
	push	eax
	push	OFFSET _s_wcd
	push	OFFSET $SG130020
	mov	edx, DWORD PTR _s_wcd+18040
	push	edx
	call	_fprintf
	add	esp, 20					; 00000014H
	jmp	SHORT $LN11@Sys_CloseL
$LN10@Sys_CloseL:

; 526  : 		else fprintf( s_wcd.logfile, "\n\t%s (build %i) %s at %s\n", s_wcd.title, Q_buildnum(), event_name, Q_timestamp( TIME_FULL ));

	push	0
	call	_Q_timestamp
	add	esp, 4
	push	eax
	lea	eax, DWORD PTR _event_name$[ebp]
	push	eax
	call	_Q_buildnum
	push	eax
	push	OFFSET _s_wcd
	push	OFFSET $SG130021
	mov	ecx, DWORD PTR _s_wcd+18040
	push	ecx
	call	_fprintf
	add	esp, 24					; 00000018H
$LN11@Sys_CloseL:

; 527  : 		fprintf( s_wcd.logfile, "=================================================================================");

	push	OFFSET $SG130022
	mov	edx, DWORD PTR _s_wcd+18040
	push	edx
	call	_fprintf
	add	esp, 8

; 528  : 		if( host.change_game ) fprintf( s_wcd.logfile, "\n" ); // just for tabulate

	cmp	DWORD PTR _host+34368, 0
	je	SHORT $LN12@Sys_CloseL
	push	OFFSET $SG130024
	mov	eax, DWORD PTR _s_wcd+18040
	push	eax
	call	_fprintf
	add	esp, 8
$LN12@Sys_CloseL:

; 529  : 
; 530  : 		fclose( s_wcd.logfile );

	mov	ecx, DWORD PTR _s_wcd+18040
	push	ecx
	call	DWORD PTR __imp__fclose
	add	esp, 4

; 531  : 		s_wcd.logfile = NULL;

	mov	DWORD PTR _s_wcd+18040, 0
$LN1@Sys_CloseL:

; 532  : 	}
; 533  : }

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_Sys_CloseLog ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\documents\github\xashtasks\xash_build4529_src\engine\common\sys_con.c
_TEXT	SEGMENT
_mode$ = -4						; size = 4
_Sys_InitLog PROC

; 478  : {

	push	ebp
	mov	ebp, esp
	push	ecx

; 479  : 	const char	*mode;
; 480  : 
; 481  : 	if( host.change_game && host.type != HOST_DEDICATED )

	cmp	DWORD PTR _host+34368, 0
	je	SHORT $LN2@Sys_InitLo
	cmp	DWORD PTR _host+164, 1
	je	SHORT $LN2@Sys_InitLo

; 482  : 		mode = "a";

	mov	DWORD PTR _mode$[ebp], OFFSET $SG129992
	jmp	SHORT $LN3@Sys_InitLo
$LN2@Sys_InitLo:

; 483  : 	else mode = "w";

	mov	DWORD PTR _mode$[ebp], OFFSET $SG129993
$LN3@Sys_InitLo:

; 484  : 
; 485  : 	// create log if needed
; 486  : 	if( s_wcd.log_active )

	cmp	DWORD PTR _s_wcd+17012, 0
	je	$LN1@Sys_InitLo

; 487  : 	{
; 488  : 		s_wcd.logfile = fopen( s_wcd.log_path, mode );

	mov	eax, DWORD PTR _mode$[ebp]
	push	eax
	push	OFFSET _s_wcd+17016
	call	DWORD PTR __imp__fopen
	add	esp, 8
	mov	DWORD PTR _s_wcd+18040, eax

; 489  : 
; 490  : 		if( !s_wcd.logfile )

	cmp	DWORD PTR _s_wcd+18040, 0
	jne	SHORT $LN5@Sys_InitLo

; 491  : 		{
; 492  : 			MSGBOX( va( "can't create log file %s\n", s_wcd.log_path ));

	push	65552					; 00010010H
	push	OFFSET $SG129996
	push	OFFSET _s_wcd+17016
	push	OFFSET $SG129997
	call	_va
	add	esp, 8
	push	eax
	push	0
	call	DWORD PTR __imp__MessageBoxA@16

; 493  : 			return;

	jmp	SHORT $LN1@Sys_InitLo
$LN5@Sys_InitLo:

; 494  : 		}
; 495  : 
; 496  : 		fprintf( s_wcd.logfile, "=================================================================================\n" );

	push	OFFSET $SG129998
	mov	ecx, DWORD PTR _s_wcd+18040
	push	ecx
	call	_fprintf
	add	esp, 8

; 497  : 		fprintf( s_wcd.logfile, "\t%s (build %i) started at %s\n", s_wcd.title, Q_buildnum(), Q_timestamp( TIME_FULL ));

	push	0
	call	_Q_timestamp
	add	esp, 4
	push	eax
	call	_Q_buildnum
	push	eax
	push	OFFSET _s_wcd
	push	OFFSET $SG129999
	mov	edx, DWORD PTR _s_wcd+18040
	push	edx
	call	_fprintf
	add	esp, 20					; 00000014H

; 498  : 		fprintf( s_wcd.logfile, "=================================================================================\n" );

	push	OFFSET $SG130000
	mov	eax, DWORD PTR _s_wcd+18040
	push	eax
	call	_fprintf
	add	esp, 8
$LN1@Sys_InitLo:

; 499  : 	}
; 500  : }

	mov	esp, ebp
	pop	ebp
	ret	0
_Sys_InitLog ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\documents\github\xashtasks\xash_build4529_src\engine\common\sys_con.c
_TEXT	SEGMENT
_pMsg$ = 8						; size = 4
_Sys_PrintLog PROC

; 536  : {

	push	ebp
	mov	ebp, esp

; 537  : 	if( !s_wcd.logfile ) return;

	cmp	DWORD PTR _s_wcd+18040, 0
	jne	SHORT $LN2@Sys_PrintL
	jmp	SHORT $LN1@Sys_PrintL
$LN2@Sys_PrintL:

; 538  : 	fprintf( s_wcd.logfile, "%s", pMsg );

	mov	eax, DWORD PTR _pMsg$[ebp]
	push	eax
	push	OFFSET $SG130029
	mov	ecx, DWORD PTR _s_wcd+18040
	push	ecx
	call	_fprintf
	add	esp, 12					; 0000000cH

; 539  : 	fflush( s_wcd.logfile );

	mov	edx, DWORD PTR _s_wcd+18040
	push	edx
	call	DWORD PTR __imp__fflush
	add	esp, 4
$LN1@Sys_PrintL:

; 540  : }

	pop	ebp
	ret	0
_Sys_PrintLog ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\windows kits\10\include\10.0.17763.0\ucrt\stdio.h
;	COMDAT _fprintf
_TEXT	SEGMENT
__Result$ = -8						; size = 4
__ArgList$ = -4						; size = 4
__Stream$ = 8						; size = 4
__Format$ = 12						; size = 4
_fprintf PROC						; COMDAT

; 835  :     {

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 836  :         int _Result;
; 837  :         va_list _ArgList;
; 838  :         __crt_va_start(_ArgList, _Format);

	lea	eax, DWORD PTR __Format$[ebp+4]
	mov	DWORD PTR __ArgList$[ebp], eax

; 839  :         _Result = _vfprintf_l(_Stream, _Format, NULL, _ArgList);

	mov	ecx, DWORD PTR __ArgList$[ebp]
	push	ecx
	push	0
	mov	edx, DWORD PTR __Format$[ebp]
	push	edx
	mov	eax, DWORD PTR __Stream$[ebp]
	push	eax
	call	__vfprintf_l
	add	esp, 16					; 00000010H
	mov	DWORD PTR __Result$[ebp], eax

; 840  :         __crt_va_end(_ArgList);

	mov	DWORD PTR __ArgList$[ebp], 0

; 841  :         return _Result;

	mov	eax, DWORD PTR __Result$[ebp]

; 842  :     }

	mov	esp, ebp
	pop	ebp
	ret	0
_fprintf ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\windows kits\10\include\10.0.17763.0\ucrt\stdio.h
;	COMDAT __vfprintf_l
_TEXT	SEGMENT
__Stream$ = 8						; size = 4
__Format$ = 12						; size = 4
__Locale$ = 16						; size = 4
__ArgList$ = 20						; size = 4
__vfprintf_l PROC					; COMDAT

; 642  :     {

	push	ebp
	mov	ebp, esp

; 643  :         return __stdio_common_vfprintf(_CRT_INTERNAL_LOCAL_PRINTF_OPTIONS, _Stream, _Format, _Locale, _ArgList);

	mov	eax, DWORD PTR __ArgList$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Locale$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Format$[ebp]
	push	edx
	mov	eax, DWORD PTR __Stream$[ebp]
	push	eax
	call	___local_stdio_printf_options
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR [eax]
	push	edx
	call	DWORD PTR __imp____stdio_common_vfprintf
	add	esp, 24					; 00000018H

; 644  :     }

	pop	ebp
	ret	0
__vfprintf_l ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\windows kits\10\include\10.0.17763.0\ucrt\corecrt_stdio_config.h
;	COMDAT ___local_stdio_printf_options
_TEXT	SEGMENT
___local_stdio_printf_options PROC			; COMDAT

; 86   :     {

	push	ebp
	mov	ebp, esp

; 87   :         static unsigned __int64 _OptionsStorage;
; 88   :         return &_OptionsStorage;

	mov	eax, OFFSET ?_OptionsStorage@?1??__local_stdio_printf_options@@9@9 ; `__local_stdio_printf_options'::`2'::_OptionsStorage

; 89   :     }

	pop	ebp
	ret	0
___local_stdio_printf_options ENDP
_TEXT	ENDS
END
