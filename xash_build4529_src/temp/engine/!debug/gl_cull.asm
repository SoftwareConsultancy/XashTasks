; Listing generated by Microsoft (R) Optimizing Compiler Version 19.16.27045.0 

	TITLE	C:\Users\USER\Documents\GitHub\XashTasks\xash_build4529_src\engine\client\gl_cull.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

_DATA	SEGMENT
COMM	_pglColor4f:DWORD
COMM	_pglColor4fv:DWORD
COMM	_pglColor4i:DWORD
COMM	_pglColor4iv:DWORD
COMM	_pglColor4s:DWORD
COMM	_pglColor4sv:DWORD
COMM	_pglColor4ub:DWORD
COMM	_pglColor4ubv:DWORD
COMM	_pglColor4ui:DWORD
COMM	_pglColor4uiv:DWORD
COMM	_pglColor4us:DWORD
COMM	_pglColor4usv:DWORD
COMM	_pglColorMask:DWORD
COMM	_pglColorMaterial:DWORD
COMM	_pglColorPointer:DWORD
COMM	_pglCopyPixels:DWORD
COMM	_pglCopyTexImage1D:DWORD
COMM	_pglCopyTexImage2D:DWORD
COMM	_pglCopyTexSubImage1D:DWORD
COMM	_pglCopyTexSubImage2D:DWORD
COMM	_pglCullFace:DWORD
COMM	_pglDeleteLists:DWORD
COMM	_pglDeleteTextures:DWORD
COMM	_pglDepthFunc:DWORD
COMM	_pglDepthMask:DWORD
COMM	_pglDepthRange:DWORD
COMM	_pglDisable:DWORD
COMM	_pglDisableClientState:DWORD
COMM	_pglDrawArrays:DWORD
COMM	_pglDrawBuffer:DWORD
COMM	_pglDrawElements:DWORD
COMM	_pglDrawPixels:DWORD
COMM	_pglEdgeFlag:DWORD
COMM	_pglEdgeFlagPointer:DWORD
COMM	_pglEdgeFlagv:DWORD
COMM	_pglEnable:DWORD
COMM	_pglEnableClientState:DWORD
COMM	_pglEnd:DWORD
COMM	_pglEndList:DWORD
COMM	_pglEvalCoord1d:DWORD
COMM	_pglEvalCoord1dv:DWORD
COMM	_pglEvalCoord1f:DWORD
COMM	_pglEvalCoord1fv:DWORD
COMM	_pglEvalCoord2d:DWORD
COMM	_pglEvalCoord2dv:DWORD
COMM	_pglEvalCoord2f:DWORD
COMM	_pglEvalCoord2fv:DWORD
COMM	_pglEvalMesh1:DWORD
COMM	_pglEvalMesh2:DWORD
COMM	_pglEvalPoint1:DWORD
COMM	_pglEvalPoint2:DWORD
COMM	_pglFeedbackBuffer:DWORD
COMM	_pglFinish:DWORD
COMM	_pglFlush:DWORD
COMM	_pglFogf:DWORD
COMM	_pglFogfv:DWORD
COMM	_pglFogi:DWORD
COMM	_pglFogiv:DWORD
COMM	_pglFrontFace:DWORD
COMM	_pglFrustum:DWORD
COMM	_pglGenTextures:DWORD
COMM	_pglGetBooleanv:DWORD
COMM	_pglGetClipPlane:DWORD
COMM	_pglGetDoublev:DWORD
COMM	_pglGetFloatv:DWORD
COMM	_pglGetIntegerv:DWORD
COMM	_pglGetLightfv:DWORD
COMM	_pglGetLightiv:DWORD
COMM	_pglGetMapdv:DWORD
COMM	_pglGetMapfv:DWORD
COMM	_pglGetMapiv:DWORD
COMM	_pglGetMaterialfv:DWORD
COMM	_pglGetMaterialiv:DWORD
COMM	_pglGetPixelMapfv:DWORD
COMM	_pglGetPixelMapuiv:DWORD
COMM	_pglGetPixelMapusv:DWORD
COMM	_pglGetPointerv:DWORD
COMM	_pglGetPolygonStipple:DWORD
COMM	_pglGetTexEnvfv:DWORD
COMM	_pglGetTexEnviv:DWORD
COMM	_pglGetTexGendv:DWORD
COMM	_pglGetTexGenfv:DWORD
COMM	_pglGetTexGeniv:DWORD
COMM	_pglGetTexImage:DWORD
COMM	_pglGetTexLevelParameterfv:DWORD
COMM	_pglGetTexLevelParameteriv:DWORD
COMM	_pglGetTexParameterfv:DWORD
COMM	_pglGetTexParameteriv:DWORD
COMM	_pglHint:DWORD
COMM	_pglIndexMask:DWORD
COMM	_pglIndexPointer:DWORD
COMM	_pglIndexd:DWORD
COMM	_pglIndexdv:DWORD
COMM	_pglIndexf:DWORD
COMM	_pglIndexfv:DWORD
COMM	_pglIndexi:DWORD
COMM	_pglIndexiv:DWORD
COMM	_pglIndexs:DWORD
COMM	_pglIndexsv:DWORD
COMM	_pglIndexub:DWORD
COMM	_pglIndexubv:DWORD
COMM	_pglInitNames:DWORD
COMM	_pglInterleavedArrays:DWORD
COMM	_pglLightModelf:DWORD
COMM	_pglLightModelfv:DWORD
COMM	_pglLightModeli:DWORD
COMM	_pglLightModeliv:DWORD
COMM	_pglLightf:DWORD
COMM	_pglLightfv:DWORD
COMM	_pglLighti:DWORD
COMM	_pglLightiv:DWORD
COMM	_pglLineStipple:DWORD
COMM	_pglLineWidth:DWORD
COMM	_pglListBase:DWORD
COMM	_pglLoadIdentity:DWORD
COMM	_pglLoadMatrixd:DWORD
COMM	_pglLoadMatrixf:DWORD
COMM	_pglLoadName:DWORD
COMM	_pglLogicOp:DWORD
COMM	_pglMap1d:DWORD
COMM	_pglMap1f:DWORD
COMM	_pglMap2d:DWORD
COMM	_pglMap2f:DWORD
COMM	_pglMapGrid1d:DWORD
COMM	_pglMapGrid1f:DWORD
COMM	_pglMapGrid2d:DWORD
COMM	_pglMapGrid2f:DWORD
COMM	_pglMaterialf:DWORD
COMM	_pglMaterialfv:DWORD
COMM	_pglMateriali:DWORD
COMM	_pglMaterialiv:DWORD
COMM	_pglMatrixMode:DWORD
COMM	_pglMultMatrixd:DWORD
COMM	_pglMultMatrixf:DWORD
COMM	_pglNewList:DWORD
COMM	_pglNormal3b:DWORD
COMM	_pglNormal3bv:DWORD
COMM	_pglNormal3d:DWORD
COMM	_pglNormal3dv:DWORD
COMM	_pglNormal3f:DWORD
COMM	_pglNormal3fv:DWORD
COMM	_pglNormal3i:DWORD
COMM	_pglNormal3iv:DWORD
COMM	_pglNormal3s:DWORD
COMM	_pglNormal3sv:DWORD
COMM	_pglNormalPointer:DWORD
COMM	_pglOrtho:DWORD
COMM	_pglPassThrough:DWORD
COMM	_pglPixelMapfv:DWORD
COMM	_pglPixelMapuiv:DWORD
COMM	_pglPixelMapusv:DWORD
COMM	_pglPixelStoref:DWORD
COMM	_pglPixelStorei:DWORD
COMM	_pglPixelTransferf:DWORD
COMM	_pglPixelTransferi:DWORD
COMM	_pglPixelZoom:DWORD
COMM	_pglPointSize:DWORD
COMM	_pglPolygonMode:DWORD
COMM	_pglPolygonOffset:DWORD
COMM	_pglPolygonStipple:DWORD
COMM	_pglPopAttrib:DWORD
COMM	_pglPopClientAttrib:DWORD
COMM	_pglPopMatrix:DWORD
COMM	_pglPopName:DWORD
COMM	_pglPushAttrib:DWORD
COMM	_pglPushClientAttrib:DWORD
COMM	_pglPushMatrix:DWORD
COMM	_pglPushName:DWORD
COMM	_pglRasterPos2d:DWORD
COMM	_pglRasterPos2dv:DWORD
COMM	_pglRasterPos2f:DWORD
COMM	_pglRasterPos2fv:DWORD
COMM	_pglRasterPos2i:DWORD
COMM	_pglRasterPos2iv:DWORD
COMM	_pglRasterPos2s:DWORD
COMM	_pglRasterPos2sv:DWORD
COMM	_pglRasterPos3d:DWORD
COMM	_pglRasterPos3dv:DWORD
COMM	_pglRasterPos3f:DWORD
COMM	_pglRasterPos3fv:DWORD
COMM	_pglRasterPos3i:DWORD
COMM	_pglRasterPos3iv:DWORD
COMM	_pglRasterPos3s:DWORD
COMM	_pglRasterPos3sv:DWORD
COMM	_pglRasterPos4d:DWORD
COMM	_pglRasterPos4dv:DWORD
COMM	_pglRasterPos4f:DWORD
COMM	_pglRasterPos4fv:DWORD
COMM	_pglRasterPos4i:DWORD
COMM	_pglRasterPos4iv:DWORD
COMM	_pglRasterPos4s:DWORD
COMM	_pglRasterPos4sv:DWORD
COMM	_pglReadBuffer:DWORD
COMM	_pglReadPixels:DWORD
COMM	_pglRectd:DWORD
COMM	_pglRectdv:DWORD
COMM	_pglRectf:DWORD
COMM	_pglRectfv:DWORD
COMM	_pglRecti:DWORD
COMM	_pglRectiv:DWORD
COMM	_pglRects:DWORD
COMM	_pglRectsv:DWORD
COMM	_pglRotated:DWORD
COMM	_pglRotatef:DWORD
COMM	_pglScaled:DWORD
COMM	_pglScalef:DWORD
COMM	_pglScissor:DWORD
COMM	_pglSelectBuffer:DWORD
COMM	_pglShadeModel:DWORD
COMM	_pglStencilFunc:DWORD
COMM	_pglStencilMask:DWORD
COMM	_pglStencilOp:DWORD
COMM	_pglTexCoord1d:DWORD
COMM	_pglTexCoord1dv:DWORD
COMM	_pglTexCoord1f:DWORD
COMM	_pglTexCoord1fv:DWORD
COMM	_pglTexCoord1i:DWORD
COMM	_pglTexCoord1iv:DWORD
COMM	_pglTexCoord1s:DWORD
COMM	_pglTexCoord1sv:DWORD
COMM	_pglTexCoord2d:DWORD
COMM	_pglTexCoord2dv:DWORD
COMM	_pglTexCoord2f:DWORD
COMM	_pglTexCoord2fv:DWORD
COMM	_pglTexCoord2i:DWORD
COMM	_pglTexCoord2iv:DWORD
COMM	_pglTexCoord2s:DWORD
COMM	_pglTexCoord2sv:DWORD
COMM	_pglTexCoord3d:DWORD
COMM	_pglTexCoord3dv:DWORD
COMM	_pglTexCoord3f:DWORD
COMM	_pglTexCoord3fv:DWORD
COMM	_pglTexCoord3i:DWORD
COMM	_pglTexCoord3iv:DWORD
COMM	_pglTexCoord3s:DWORD
COMM	_pglTexCoord3sv:DWORD
COMM	_pglTexCoord4d:DWORD
COMM	_pglTexCoord4dv:DWORD
COMM	_pglTexCoord4f:DWORD
COMM	_pglTexCoord4fv:DWORD
COMM	_pglTexCoord4i:DWORD
COMM	_pglTexCoord4iv:DWORD
COMM	_pglTexCoord4s:DWORD
COMM	_pglTexCoord4sv:DWORD
COMM	_pglTexCoordPointer:DWORD
COMM	_pglTexEnvf:DWORD
COMM	_pglTexEnvfv:DWORD
COMM	_pglTexEnvi:DWORD
COMM	_pglTexEnviv:DWORD
COMM	_pglTexGend:DWORD
COMM	_pglTexGendv:DWORD
COMM	_pglTexGenf:DWORD
COMM	_pglTexGenfv:DWORD
COMM	_pglTexGeni:DWORD
COMM	_pglTexGeniv:DWORD
COMM	_pglTexImage1D:DWORD
COMM	_pglTexImage2D:DWORD
COMM	_pglTexParameterf:DWORD
COMM	_pglTexParameterfv:DWORD
COMM	_pglTexParameteri:DWORD
COMM	_pglTexParameteriv:DWORD
COMM	_pglTexSubImage1D:DWORD
COMM	_pglTexSubImage2D:DWORD
COMM	_pglTranslated:DWORD
COMM	_pglTranslatef:DWORD
COMM	_pglVertex2d:DWORD
COMM	_pglVertex2dv:DWORD
COMM	_pglVertex2f:DWORD
COMM	_pglVertex2fv:DWORD
COMM	_pglVertex2i:DWORD
COMM	_pglVertex2iv:DWORD
COMM	_pglVertex2s:DWORD
COMM	_pglVertex2sv:DWORD
COMM	_pglVertex3d:DWORD
COMM	_pglVertex3dv:DWORD
COMM	_pglVertex3f:DWORD
COMM	_pglVertex3fv:DWORD
COMM	_pglVertex3i:DWORD
COMM	_pglVertex3iv:DWORD
COMM	_pglVertex3s:DWORD
COMM	_pglVertex3sv:DWORD
COMM	_pglVertex4d:DWORD
COMM	_pglVertex4dv:DWORD
COMM	_pglVertex4f:DWORD
COMM	_pglVertex4fv:DWORD
COMM	_pglVertex4i:DWORD
COMM	_pglVertex4iv:DWORD
COMM	_pglVertex4s:DWORD
COMM	_pglVertex4sv:DWORD
COMM	_pglVertexPointer:DWORD
COMM	_pglViewport:DWORD
COMM	_pglPointParameterfEXT:DWORD
COMM	_pglPointParameterfvEXT:DWORD
COMM	_pglLockArraysEXT:DWORD
COMM	_pglUnlockArraysEXT:DWORD
COMM	_pglActiveTextureARB:DWORD
COMM	_pglClientActiveTextureARB:DWORD
COMM	_pglGetCompressedTexImage:DWORD
COMM	_pglDrawRangeElements:DWORD
COMM	_pglDrawRangeElementsEXT:DWORD
COMM	_pglMultiTexCoord1f:DWORD
COMM	_pglMultiTexCoord2f:DWORD
COMM	_pglMultiTexCoord3f:DWORD
COMM	_pglMultiTexCoord4f:DWORD
COMM	_pglActiveTexture:DWORD
COMM	_pglClientActiveTexture:DWORD
COMM	_pglCompressedTexImage3DARB:DWORD
COMM	_pglCompressedTexImage2DARB:DWORD
COMM	_pglCompressedTexImage1DARB:DWORD
COMM	_pglCompressedTexSubImage3DARB:DWORD
COMM	_pglCompressedTexSubImage2DARB:DWORD
COMM	_pglCompressedTexSubImage1DARB:DWORD
COMM	_pglDeleteObjectARB:DWORD
COMM	_pglGetHandleARB:DWORD
COMM	_pglDetachObjectARB:DWORD
COMM	_pglCreateShaderObjectARB:DWORD
COMM	_pglShaderSourceARB:DWORD
COMM	_pglCompileShaderARB:DWORD
COMM	_pglCreateProgramObjectARB:DWORD
COMM	_pglAttachObjectARB:DWORD
COMM	_pglLinkProgramARB:DWORD
COMM	_pglUseProgramObjectARB:DWORD
COMM	_pglValidateProgramARB:DWORD
COMM	_pglBindProgramARB:DWORD
COMM	_pglDeleteProgramsARB:DWORD
COMM	_pglGenProgramsARB:DWORD
COMM	_pglProgramStringARB:DWORD
COMM	_pglProgramEnvParameter4fARB:DWORD
COMM	_pglProgramLocalParameter4fARB:DWORD
COMM	_pglUniform1fARB:DWORD
COMM	_pglUniform2fARB:DWORD
COMM	_pglUniform3fARB:DWORD
COMM	_pglUniform4fARB:DWORD
COMM	_pglUniform1iARB:DWORD
COMM	_pglUniform2iARB:DWORD
COMM	_pglUniform3iARB:DWORD
COMM	_pglUniform4iARB:DWORD
COMM	_pglUniform1fvARB:DWORD
COMM	_pglUniform2fvARB:DWORD
COMM	_pglUniform3fvARB:DWORD
COMM	_pglUniform4fvARB:DWORD
COMM	_pglUniform1ivARB:DWORD
COMM	_pglUniform2ivARB:DWORD
COMM	_pglUniform3ivARB:DWORD
COMM	_pglUniform4ivARB:DWORD
COMM	_pglUniformMatrix2fvARB:DWORD
COMM	_pglUniformMatrix3fvARB:DWORD
COMM	_pglUniformMatrix4fvARB:DWORD
COMM	_pglGetObjectParameterfvARB:DWORD
COMM	_pglGetObjectParameterivARB:DWORD
COMM	_pglGetInfoLogARB:DWORD
COMM	_pglGetAttachedObjectsARB:DWORD
COMM	_pglGetUniformLocationARB:DWORD
COMM	_pglGetActiveUniformARB:DWORD
COMM	_pglGetUniformfvARB:DWORD
COMM	_pglGetUniformivARB:DWORD
COMM	_pglGetShaderSourceARB:DWORD
COMM	_pglTexImage3D:DWORD
COMM	_pglTexSubImage3D:DWORD
COMM	_pglCopyTexSubImage3D:DWORD
COMM	_pglBlendEquationEXT:DWORD
COMM	_pglStencilOpSeparate:DWORD
COMM	_pglStencilFuncSeparate:DWORD
COMM	_pglActiveStencilFaceEXT:DWORD
COMM	_pglVertexAttribPointerARB:DWORD
COMM	_pglEnableVertexAttribArrayARB:DWORD
COMM	_pglDisableVertexAttribArrayARB:DWORD
COMM	_pglBindAttribLocationARB:DWORD
COMM	_pglGetActiveAttribARB:DWORD
COMM	_pglGetAttribLocationARB:DWORD
COMM	_pglBindFragDataLocation:DWORD
COMM	_pglVertexAttrib2fARB:DWORD
COMM	_pglVertexAttrib2fvARB:DWORD
COMM	_pglVertexAttrib3fvARB:DWORD
COMM	_pglBindBufferARB:DWORD
COMM	_pglDeleteBuffersARB:DWORD
COMM	_pglGenBuffersARB:DWORD
COMM	_pglIsBufferARB:DWORD
COMM	_pglMapBufferARB:DWORD
COMM	_pglUnmapBufferARB:DWORD
COMM	_pglBufferDataARB:DWORD
COMM	_pglBufferSubDataARB:DWORD
COMM	_pglGenQueriesARB:DWORD
COMM	_pglDeleteQueriesARB:DWORD
COMM	_pglIsQueryARB:DWORD
COMM	_pglBeginQueryARB:DWORD
COMM	_pglEndQueryARB:DWORD
COMM	_pglGetQueryivARB:DWORD
COMM	_pglGetQueryObjectivARB:DWORD
COMM	_pglGetQueryObjectuivARB:DWORD
COMM	_pglDebugMessageControlARB:DWORD
COMM	_pglDebugMessageInsertARB:DWORD
COMM	_pglDebugMessageCallbackARB:DWORD
COMM	_pglGetDebugMessageLogARB:DWORD
COMM	_pglIsRenderbuffer:DWORD
COMM	_pglBindRenderbuffer:DWORD
COMM	_pglDeleteRenderbuffers:DWORD
COMM	_pglGenRenderbuffers:DWORD
COMM	_pglRenderbufferStorage:DWORD
COMM	_pglRenderbufferStorageMultisample:DWORD
COMM	_pglGetRenderbufferParameteriv:DWORD
COMM	_pglIsFramebuffer:DWORD
COMM	_pglBindFramebuffer:DWORD
COMM	_pglDeleteFramebuffers:DWORD
COMM	_pglGenFramebuffers:DWORD
COMM	_pglCheckFramebufferStatus:DWORD
COMM	_pglFramebufferTexture1D:DWORD
COMM	_pglFramebufferTexture2D:DWORD
COMM	_pglFramebufferTexture3D:DWORD
COMM	_pglFramebufferTextureLayer:DWORD
COMM	_pglFramebufferRenderbuffer:DWORD
COMM	_pglGetFramebufferAttachmentParameteriv:DWORD
COMM	_pglBlitFramebuffer:DWORD
COMM	_pglDrawBuffersARB:DWORD
COMM	_pglGenerateMipmap:DWORD
COMM	_pglBindVertexArray:DWORD
COMM	_pglDeleteVertexArrays:DWORD
COMM	_pglGenVertexArrays:DWORD
COMM	_pglIsVertexArray:DWORD
COMM	_pglSwapInterval:DWORD
COMM	_pwglSwapBuffers:DWORD
COMM	_pwglCopyContext:DWORD
COMM	_pwglCreateContext:DWORD
COMM	_pwglCreateLayerContext:DWORD
COMM	_pwglDeleteContext:DWORD
COMM	_pwglGetCurrentContext:DWORD
COMM	_pwglGetProcAddress:DWORD
COMM	_pwglMakeCurrent:DWORD
COMM	_pwglShareLists:DWORD
COMM	_pwglUseFontBitmaps:DWORD
COMM	_pwglUseFontOutlines:DWORD
COMM	_pwglDescribeLayerPlane:DWORD
COMM	_pwglSetLayerPaletteEntries:DWORD
COMM	_pwglGetLayerPaletteEntries:DWORD
COMM	_pwglRealizeLayerPalette:DWORD
COMM	_pwglSwapLayerBuffers:DWORD
COMM	_pwglSwapIntervalEXT:DWORD
COMM	_pwglCreateContextAttribsARB:DWORD
COMM	_pwglGetPixelFormatAttribiv:DWORD
COMM	_pwglChoosePixelFormat:DWORD
COMM	_pwglGetExtensionsStringEXT:DWORD
COMM	_pglGetError:DWORD
COMM	_pglGetString:DWORD
COMM	_pglAccum:DWORD
COMM	_pglAlphaFunc:DWORD
COMM	_pglArrayElement:DWORD
COMM	_pglBegin:DWORD
COMM	_pglBindTexture:DWORD
COMM	_pglBitmap:DWORD
COMM	_pglBlendFunc:DWORD
COMM	_pglCallList:DWORD
COMM	_pglCallLists:DWORD
COMM	_pglClear:DWORD
COMM	_pglClearAccum:DWORD
COMM	_pglClearColor:DWORD
COMM	_pglClearDepth:DWORD
COMM	_pglClearIndex:DWORD
COMM	_pglClearStencil:DWORD
COMM	_pglIsEnabled:DWORD
COMM	_pglIsList:DWORD
COMM	_pglIsTexture:DWORD
COMM	_pglClipPlane:DWORD
COMM	_pglColor3b:DWORD
COMM	_pglColor3bv:DWORD
COMM	_pglColor3d:DWORD
COMM	_pglColor3dv:DWORD
COMM	_pglColor3f:DWORD
COMM	_pglColor3fv:DWORD
COMM	_pglColor3i:DWORD
COMM	_pglColor3iv:DWORD
COMM	_pglColor3s:DWORD
COMM	_pglColor3sv:DWORD
COMM	_pglColor3ub:DWORD
COMM	_pglColor3ubv:DWORD
COMM	_pglColor3ui:DWORD
COMM	_pglColor3uiv:DWORD
COMM	_pglColor3us:DWORD
COMM	_pglColor3usv:DWORD
COMM	_pglColor4b:DWORD
COMM	_pglColor4bv:DWORD
COMM	_pglColor4d:DWORD
COMM	_pglColor4dv:DWORD
_DATA	ENDS
PUBLIC	_R_CullModel
PUBLIC	_R_CullBox
PUBLIC	_R_CullSphere
PUBLIC	_R_CullSurface
PUBLIC	__real@00000000
PUBLIC	__real@3c23d70a
PUBLIC	__real@bc23d70a
EXTRN	_Matrix4x4_VectorRotate:PROC
EXTRN	_CL_IsDevOverviewMode:PROC
EXTRN	_GL_FrustumCullBox:PROC
EXTRN	_GL_FrustumCullSphere:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	_cl:BYTE
EXTRN	_clgame:BYTE
EXTRN	_RI:BYTE
EXTRN	_tr:BYTE
EXTRN	_glState:BYTE
EXTRN	_r_nocull:DWORD
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
;	COMDAT __real@bc23d70a
CONST	SEGMENT
__real@bc23d70a DD 0bc23d70ar			; -0.01
CONST	ENDS
;	COMDAT __real@3c23d70a
CONST	SEGMENT
__real@3c23d70a DD 03c23d70ar			; 0.01
CONST	ENDS
;	COMDAT __real@00000000
CONST	SEGMENT
__real@00000000 DD 000000000r			; 0
CONST	ENDS
; Function compile flags: /Odtp
; File c:\users\user\documents\github\xashtasks\xash_build4529_src\engine\client\gl_cull.c
_TEXT	SEGMENT
tv194 = -28						; size = 4
_dist$1 = -24						; size = 4
_e$ = -20						; size = 4
_orthonormal$2 = -16					; size = 12
__$ArrayPad$ = -4					; size = 4
_surf$ = 8						; size = 4
_frustum$ = 12						; size = 4
_clipflags$ = 16					; size = 4
_R_CullSurface PROC

; 88   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 89   : 	cl_entity_t	*e = RI.currententity;

	mov	eax, DWORD PTR _RI+28
	mov	DWORD PTR _e$[ebp], eax

; 90   : 
; 91   : 	if( !surf || !surf->texinfo || !surf->texinfo->texture )

	cmp	DWORD PTR _surf$[ebp], 0
	je	SHORT $LN3@R_CullSurf
	mov	ecx, DWORD PTR _surf$[ebp]
	cmp	DWORD PTR [ecx+44], 0
	je	SHORT $LN3@R_CullSurf
	mov	edx, DWORD PTR _surf$[ebp]
	mov	eax, DWORD PTR [edx+44]
	cmp	DWORD PTR [eax+36], 0
	jne	SHORT $LN2@R_CullSurf
$LN3@R_CullSurf:

; 92   : 		return CULL_OTHER;

	mov	eax, 4
	jmp	$LN1@R_CullSurf
$LN2@R_CullSurf:

; 93   : 
; 94   : 	if( r_nocull->value )

	mov	ecx, DWORD PTR _r_nocull
	movss	xmm0, DWORD PTR [ecx+12]
	ucomiss	xmm0, DWORD PTR __real@00000000
	lahf
	test	ah, 68					; 00000044H
	jnp	SHORT $LN4@R_CullSurf

; 95   : 		return CULL_VISIBLE;

	xor	eax, eax
	jmp	$LN1@R_CullSurf
$LN4@R_CullSurf:

; 96   : 
; 97   : 	// world surfaces can be culled by vis frame too
; 98   : 	if( RI.currententity == clgame.entities && surf->visframe != tr.framecount )

	mov	edx, DWORD PTR _RI+28
	cmp	edx, DWORD PTR _clgame+1000
	jne	SHORT $LN5@R_CullSurf
	mov	eax, DWORD PTR _surf$[ebp]
	mov	ecx, DWORD PTR [eax]
	cmp	ecx, DWORD PTR _tr+66680
	je	SHORT $LN5@R_CullSurf

; 99   : 		return CULL_VISFRAME;

	mov	eax, 3
	jmp	$LN1@R_CullSurf
$LN5@R_CullSurf:

; 100  : 
; 101  : 	// only static ents can be culled by frustum
; 102  : 	if( !R_StaticEntity( e )) frustum = NULL;

	mov	edx, 4
	imul	eax, edx, 0
	mov	ecx, DWORD PTR _e$[ebp]
	movss	xmm0, DWORD PTR [ecx+eax+2888]
	ucomiss	xmm0, DWORD PTR __real@00000000
	lahf
	test	ah, 68					; 00000044H
	jp	$LN8@R_CullSurf
	mov	edx, 4
	shl	edx, 0
	mov	eax, DWORD PTR _e$[ebp]
	movss	xmm0, DWORD PTR [eax+edx+2888]
	ucomiss	xmm0, DWORD PTR __real@00000000
	lahf
	test	ah, 68					; 00000044H
	jp	$LN8@R_CullSurf
	mov	ecx, 4
	shl	ecx, 1
	mov	edx, DWORD PTR _e$[ebp]
	movss	xmm0, DWORD PTR [edx+ecx+2888]
	ucomiss	xmm0, DWORD PTR __real@00000000
	lahf
	test	ah, 68					; 00000044H
	jp	SHORT $LN8@R_CullSurf
	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _e$[ebp]
	movss	xmm0, DWORD PTR [edx+ecx+2900]
	ucomiss	xmm0, DWORD PTR __real@00000000
	lahf
	test	ah, 68					; 00000044H
	jp	SHORT $LN8@R_CullSurf
	mov	eax, 4
	shl	eax, 0
	mov	ecx, DWORD PTR _e$[ebp]
	movss	xmm0, DWORD PTR [ecx+eax+2900]
	ucomiss	xmm0, DWORD PTR __real@00000000
	lahf
	test	ah, 68					; 00000044H
	jp	SHORT $LN8@R_CullSurf
	mov	edx, 4
	shl	edx, 1
	mov	eax, DWORD PTR _e$[ebp]
	movss	xmm0, DWORD PTR [eax+edx+2900]
	ucomiss	xmm0, DWORD PTR __real@00000000
	lahf
	test	ah, 68					; 00000044H
	jnp	SHORT $LN6@R_CullSurf
$LN8@R_CullSurf:
	mov	DWORD PTR _frustum$[ebp], 0
$LN6@R_CullSurf:

; 103  : 
; 104  : 	if( !VectorIsNull( surf->plane->normal ))

	mov	ecx, DWORD PTR _surf$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, 4
	imul	ecx, eax, 0
	movss	xmm0, DWORD PTR [edx+ecx]
	ucomiss	xmm0, DWORD PTR __real@00000000
	lahf
	test	ah, 68					; 00000044H
	jp	SHORT $LN10@R_CullSurf
	mov	edx, DWORD PTR _surf$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, 4
	shl	ecx, 0
	movss	xmm0, DWORD PTR [eax+ecx]
	ucomiss	xmm0, DWORD PTR __real@00000000
	lahf
	test	ah, 68					; 00000044H
	jp	SHORT $LN10@R_CullSurf
	mov	edx, DWORD PTR _surf$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, 4
	shl	ecx, 1
	movss	xmm0, DWORD PTR [eax+ecx]
	ucomiss	xmm0, DWORD PTR __real@00000000
	lahf
	test	ah, 68					; 00000044H
	jnp	$LN25@R_CullSurf
$LN10@R_CullSurf:

; 105  : 	{
; 106  : 		float	dist;
; 107  : 
; 108  : 		// can use normal.z for world (optimisation)
; 109  : 		if( RI.drawOrtho )

	cmp	DWORD PTR _RI+16, 0
	je	SHORT $LN11@R_CullSurf

; 110  : 		{
; 111  : 			vec3_t	orthonormal;
; 112  : 
; 113  : 			if( e == clgame.entities ) orthonormal[2] = surf->plane->normal[2];

	mov	edx, DWORD PTR _e$[ebp]
	cmp	edx, DWORD PTR _clgame+1000
	jne	SHORT $LN13@R_CullSurf
	mov	eax, DWORD PTR _surf$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, 4
	shl	edx, 1
	mov	eax, 4
	shl	eax, 1
	mov	ecx, DWORD PTR [ecx+edx]
	mov	DWORD PTR _orthonormal$2[ebp+eax], ecx
	jmp	SHORT $LN14@R_CullSurf
$LN13@R_CullSurf:

; 114  : 			else Matrix4x4_VectorRotate( RI.objectMatrix, surf->plane->normal, orthonormal );

	lea	edx, DWORD PTR _orthonormal$2[ebp]
	push	edx
	mov	eax, DWORD PTR _surf$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	push	OFFSET _RI+456
	call	_Matrix4x4_VectorRotate
	add	esp, 12					; 0000000cH
$LN14@R_CullSurf:

; 115  : 			dist = orthonormal[2];

	mov	edx, 4
	shl	edx, 1
	movss	xmm0, DWORD PTR _orthonormal$2[ebp+edx]
	movss	DWORD PTR _dist$1[ebp], xmm0

; 116  : 		}

	jmp	$LN12@R_CullSurf
$LN11@R_CullSurf:

; 117  : 		else dist = PlaneDiff( tr.modelorg, surf->plane );

	mov	eax, DWORD PTR _surf$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	movzx	edx, BYTE PTR [ecx+16]
	cmp	edx, 3
	jge	SHORT $LN28@R_CullSurf
	mov	eax, DWORD PTR _surf$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	movzx	edx, BYTE PTR [ecx+16]
	movss	xmm0, DWORD PTR _tr[edx*4+66980]
	movss	DWORD PTR tv194[ebp], xmm0
	jmp	SHORT $LN29@R_CullSurf
$LN28@R_CullSurf:
	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _surf$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	edx, 4
	imul	edx, edx, 0
	movss	xmm0, DWORD PTR _tr[ecx+66980]
	mulss	xmm0, DWORD PTR [eax+edx]
	mov	eax, 4
	shl	eax, 0
	mov	ecx, DWORD PTR _surf$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	ecx, 4
	shl	ecx, 0
	movss	xmm1, DWORD PTR _tr[eax+66980]
	mulss	xmm1, DWORD PTR [edx+ecx]
	addss	xmm0, xmm1
	mov	edx, 4
	shl	edx, 1
	mov	eax, DWORD PTR _surf$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	eax, 4
	shl	eax, 1
	movss	xmm1, DWORD PTR _tr[edx+66980]
	mulss	xmm1, DWORD PTR [ecx+eax]
	addss	xmm0, xmm1
	movss	DWORD PTR tv194[ebp], xmm0
$LN29@R_CullSurf:
	mov	ecx, DWORD PTR _surf$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	movss	xmm0, DWORD PTR tv194[ebp]
	subss	xmm0, DWORD PTR [edx+12]
	movss	DWORD PTR _dist$1[ebp], xmm0
$LN12@R_CullSurf:

; 118  : 
; 119  : 		if( glState.faceCull == GL_FRONT )

	cmp	DWORD PTR _glState+568, 1028		; 00000404H
	jne	SHORT $LN15@R_CullSurf

; 120  : 		{
; 121  : 			if( FBitSet( surf->flags, SURF_PLANEBACK ))

	mov	eax, DWORD PTR _surf$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	and	ecx, 2
	je	SHORT $LN17@R_CullSurf

; 122  : 			{
; 123  : 				if( dist >= -BACKFACE_EPSILON )

	movss	xmm0, DWORD PTR _dist$1[ebp]
	comiss	xmm0, DWORD PTR __real@bc23d70a
	jb	SHORT $LN19@R_CullSurf

; 124  : 					return CULL_BACKSIDE; // wrong side

	mov	eax, 1
	jmp	$LN1@R_CullSurf
$LN19@R_CullSurf:

; 125  : 			}

	jmp	SHORT $LN20@R_CullSurf
$LN17@R_CullSurf:

; 126  : 			else
; 127  : 			{
; 128  : 				if( dist <= BACKFACE_EPSILON )

	movss	xmm0, DWORD PTR __real@3c23d70a
	comiss	xmm0, DWORD PTR _dist$1[ebp]
	jb	SHORT $LN20@R_CullSurf

; 129  : 					return CULL_BACKSIDE; // wrong side

	mov	eax, 1
	jmp	SHORT $LN1@R_CullSurf
$LN20@R_CullSurf:

; 130  : 			}
; 131  : 		}

	jmp	SHORT $LN25@R_CullSurf
$LN15@R_CullSurf:

; 132  : 		else if( glState.faceCull == GL_BACK )

	cmp	DWORD PTR _glState+568, 1029		; 00000405H
	jne	SHORT $LN25@R_CullSurf

; 133  : 		{
; 134  : 			if( FBitSet( surf->flags, SURF_PLANEBACK ))

	mov	edx, DWORD PTR _surf$[ebp]
	mov	eax, DWORD PTR [edx+8]
	and	eax, 2
	je	SHORT $LN22@R_CullSurf

; 135  : 			{
; 136  : 				if( dist <= BACKFACE_EPSILON )

	movss	xmm0, DWORD PTR __real@3c23d70a
	comiss	xmm0, DWORD PTR _dist$1[ebp]
	jb	SHORT $LN24@R_CullSurf

; 137  : 					return CULL_BACKSIDE; // wrong side

	mov	eax, 1
	jmp	SHORT $LN1@R_CullSurf
$LN24@R_CullSurf:

; 138  : 			}

	jmp	SHORT $LN25@R_CullSurf
$LN22@R_CullSurf:

; 139  : 			else
; 140  : 			{
; 141  : 				if( dist >= -BACKFACE_EPSILON )

	movss	xmm0, DWORD PTR _dist$1[ebp]
	comiss	xmm0, DWORD PTR __real@bc23d70a
	jb	SHORT $LN25@R_CullSurf

; 142  : 					return CULL_BACKSIDE; // wrong side

	mov	eax, 1
	jmp	SHORT $LN1@R_CullSurf
$LN25@R_CullSurf:

; 143  : 			}
; 144  : 		}
; 145  : 	}
; 146  : 
; 147  : 	if( frustum && GL_FrustumCullBox( frustum, surf->info->mins, surf->info->maxs, clipflags ))

	cmp	DWORD PTR _frustum$[ebp], 0
	je	SHORT $LN26@R_CullSurf
	mov	ecx, DWORD PTR _clipflags$[ebp]
	push	ecx
	mov	edx, DWORD PTR _surf$[ebp]
	mov	eax, DWORD PTR [edx+80]
	add	eax, 12					; 0000000cH
	push	eax
	mov	ecx, DWORD PTR _surf$[ebp]
	mov	edx, DWORD PTR [ecx+80]
	push	edx
	mov	eax, DWORD PTR _frustum$[ebp]
	push	eax
	call	_GL_FrustumCullBox
	add	esp, 16					; 00000010H
	test	eax, eax
	je	SHORT $LN26@R_CullSurf

; 148  : 		return CULL_FRUSTUM;

	mov	eax, 2
	jmp	SHORT $LN1@R_CullSurf
$LN26@R_CullSurf:

; 149  : 
; 150  : 	return CULL_VISIBLE;

	xor	eax, eax
$LN1@R_CullSurf:

; 151  : }

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_R_CullSurface ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\documents\github\xashtasks\xash_build4529_src\engine\client\gl_cull.c
_TEXT	SEGMENT
_centre$ = 8						; size = 4
_radius$ = 12						; size = 4
_R_CullSphere PROC

; 48   : {

	push	ebp
	mov	ebp, esp

; 49   : 	return GL_FrustumCullSphere( &RI.frustum, centre, radius, 0 );

	push	0
	push	ecx
	movss	xmm0, DWORD PTR _radius$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _centre$[ebp]
	push	eax
	push	OFFSET _RI+56
	call	_GL_FrustumCullSphere
	add	esp, 16					; 00000010H

; 50   : }

	pop	ebp
	ret	0
_R_CullSphere ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\documents\github\xashtasks\xash_build4529_src\engine\client\gl_cull.c
_TEXT	SEGMENT
_mins$ = 8						; size = 4
_maxs$ = 12						; size = 4
_R_CullBox PROC

; 36   : {

	push	ebp
	mov	ebp, esp

; 37   : 	return GL_FrustumCullBox( &RI.frustum, mins, maxs, 0 );

	push	0
	mov	eax, DWORD PTR _maxs$[ebp]
	push	eax
	mov	ecx, DWORD PTR _mins$[ebp]
	push	ecx
	push	OFFSET _RI+56
	call	_GL_FrustumCullBox
	add	esp, 16					; 00000010H

; 38   : }

	pop	ebp
	ret	0
_R_CullBox ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\documents\github\xashtasks\xash_build4529_src\engine\client\gl_cull.c
_TEXT	SEGMENT
_e$ = 8							; size = 4
_absmin$ = 12						; size = 4
_absmax$ = 16						; size = 4
_R_CullModel PROC

; 58   : {

	push	ebp
	mov	ebp, esp

; 59   : 	if( e == &clgame.viewent )

	cmp	DWORD PTR _e$[ebp], OFFSET _clgame+149800
	jne	SHORT $LN2@R_CullMode

; 60   : 	{
; 61   : 		if( CL_IsDevOverviewMode( ))

	call	_CL_IsDevOverviewMode
	test	eax, eax
	je	SHORT $LN3@R_CullMode

; 62   : 			return 1;

	mov	eax, 1
	jmp	$LN1@R_CullMode
$LN3@R_CullMode:

; 63   : 
; 64   : 		if( RP_NORMALPASS() && !cl.local.thirdperson && cl.viewentity == ( cl.playernum + 1 ))

	mov	eax, DWORD PTR _RI
	and	eax, 1
	jne	SHORT $LN4@R_CullMode
	cmp	DWORD PTR _cl+1568540, 0
	jne	SHORT $LN4@R_CullMode
	mov	ecx, DWORD PTR _cl+1568828
	add	ecx, 1
	cmp	DWORD PTR _cl+1568608, ecx
	jne	SHORT $LN4@R_CullMode

; 65   : 			return 0;

	xor	eax, eax
	jmp	SHORT $LN1@R_CullMode
$LN4@R_CullMode:

; 66   : 
; 67   : 		return 1;

	mov	eax, 1
	jmp	SHORT $LN1@R_CullMode
$LN2@R_CullMode:

; 68   : 	}
; 69   : 
; 70   : 	// local client can't view himself if camera or thirdperson is not active
; 71   : 	if( RP_LOCALCLIENT( e ) && !cl.local.thirdperson && cl.viewentity == ( cl.playernum + 1 ))

	cmp	DWORD PTR _e$[ebp], 0
	je	SHORT $LN5@R_CullMode
	mov	edx, DWORD PTR _cl+1568828
	add	edx, 1
	mov	eax, DWORD PTR _e$[ebp]
	cmp	DWORD PTR [eax], edx
	jne	SHORT $LN5@R_CullMode
	mov	ecx, DWORD PTR _e$[ebp]
	cmp	DWORD PTR [ecx+4], 0
	je	SHORT $LN5@R_CullMode
	cmp	DWORD PTR _cl+1568540, 0
	jne	SHORT $LN5@R_CullMode
	mov	edx, DWORD PTR _cl+1568828
	add	edx, 1
	cmp	DWORD PTR _cl+1568608, edx
	jne	SHORT $LN5@R_CullMode

; 72   : 		return 1;

	mov	eax, 1
	jmp	SHORT $LN1@R_CullMode
$LN5@R_CullMode:

; 73   : 
; 74   : 	if( R_CullBox( absmin, absmax ))

	mov	eax, DWORD PTR _absmax$[ebp]
	push	eax
	mov	ecx, DWORD PTR _absmin$[ebp]
	push	ecx
	call	_R_CullBox
	add	esp, 8
	test	eax, eax
	je	SHORT $LN6@R_CullMode

; 75   : 		return 1;

	mov	eax, 1
	jmp	SHORT $LN1@R_CullMode
$LN6@R_CullMode:

; 76   : 
; 77   : 	return 0;

	xor	eax, eax
$LN1@R_CullMode:

; 78   : }

	pop	ebp
	ret	0
_R_CullModel ENDP
_TEXT	ENDS
END
