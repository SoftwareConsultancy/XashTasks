; Listing generated by Microsoft (R) Optimizing Compiler Version 19.16.27045.0 

	TITLE	C:\Users\USER\Downloads\XashXT_v0.81_rev.1_with_sources\XashXT_v0.81_rev.1_src\server\monsters\animating.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	?m_DataMap@CBaseAnimating@@2Udatamap_s@@A	; CBaseAnimating::m_DataMap
_DATA	SEGMENT
?m_DataMap@CBaseAnimating@@2Udatamap_s@@A DD 00H	; CBaseAnimating::m_DataMap
	DD	00H
	DD	FLAT:$SG74394
	DD	00H
_DATA	ENDS
CONST	SEGMENT
$SG74394 DB	'CBaseAnimating', 00H
	ORG $+1
$SG74463 DB	'm_flFrameRate', 00H
	ORG $+2
$SG74464 DB	'm_flGroundSpeed', 00H
$SG74465 DB	'm_flLastEventCheck', 00H
	ORG $+1
$SG74466 DB	'm_fSequenceFinished', 00H
$SG74467 DB	'm_fSequenceLoops', 00H
	ORG $+3
$SG74468 DB	'CBaseAnimating', 00H
	ORG $+1
$SG74884 DB	'n', 00H, 'u', 00H, 'm', 00H, ' ', 00H, '>', 00H, ' ', 00H
	DB	'0', 00H, 00H, 00H
$SG74887 DB	'0', 00H, 00H, 00H
$SG74533 DB	'c:\users\user\downloads\xashxt_v0.81_rev.1_with_sources\'
	DB	'xashxt_v0.81_rev.1_src\server\monsters\animating.cpp', 00H
	ORG $+3
$SG74534 DB	'activity != 0', 00H
	ORG $+2
$SG74565 DB	'Gibbed monster is thinking!', 0aH, 00H
	ORG $+3
$SG74717 DB	'c', 00H, ':', 00H, '\', 00H, 'u', 00H, 's', 00H, 'e', 00H
	DB	'r', 00H, 's', 00H, '\', 00H, 'u', 00H, 's', 00H, 'e', 00H, 'r'
	DB	00H, '\', 00H, 'd', 00H, 'o', 00H, 'w', 00H, 'n', 00H, 'l', 00H
	DB	'o', 00H, 'a', 00H, 'd', 00H, 's', 00H, '\', 00H, 'x', 00H, 'a'
	DB	00H, 's', 00H, 'h', 00H, 'x', 00H, 't', 00H, '_', 00H, 'v', 00H
	DB	'0', 00H, '.', 00H, '8', 00H, '1', 00H, '_', 00H, 'r', 00H, 'e'
	DB	00H, 'v', 00H, '.', 00H, '1', 00H, '_', 00H, 'w', 00H, 'i', 00H
	DB	't', 00H, 'h', 00H, '_', 00H, 's', 00H, 'o', 00H, 'u', 00H, 'r'
	DB	00H, 'c', 00H, 'e', 00H, 's', 00H, '\', 00H, 'x', 00H, 'a', 00H
	DB	's', 00H, 'h', 00H, 'x', 00H, 't', 00H, '_', 00H, 'v', 00H, '0'
	DB	00H, '.', 00H, '8', 00H, '1', 00H, '_', 00H, 'r', 00H, 'e', 00H
	DB	'v', 00H, '.', 00H, '1', 00H, '_', 00H, 's', 00H, 'r', 00H, 'c'
	DB	00H, '\', 00H, 'g', 00H, 'a', 00H, 'm', 00H, 'e', 00H, '_', 00H
	DB	's', 00H, 'h', 00H, 'a', 00H, 'r', 00H, 'e', 00H, 'd', 00H, '\'
	DB	00H, 'u', 00H, 't', 00H, 'l', 00H, 'm', 00H, 'e', 00H, 'm', 00H
	DB	'o', 00H, 'r', 00H, 'y', 00H, '.', 00H, 'h', 00H, 00H, 00H
	ORG $+2
$SG74718 DB	'n', 00H, 'G', 00H, 'r', 00H, 'o', 00H, 'w', 00H, 'S', 00H
	DB	'i', 00H, 'z', 00H, 'e', 00H, ' ', 00H, '>', 00H, '=', 00H, ' '
	DB	00H, '0', 00H, 00H, 00H
	ORG $+2
$SG74761 DB	'c', 00H, ':', 00H, '\', 00H, 'u', 00H, 's', 00H, 'e', 00H
	DB	'r', 00H, 's', 00H, '\', 00H, 'u', 00H, 's', 00H, 'e', 00H, 'r'
	DB	00H, '\', 00H, 'd', 00H, 'o', 00H, 'w', 00H, 'n', 00H, 'l', 00H
	DB	'o', 00H, 'a', 00H, 'd', 00H, 's', 00H, '\', 00H, 'x', 00H, 'a'
	DB	00H, 's', 00H, 'h', 00H, 'x', 00H, 't', 00H, '_', 00H, 'v', 00H
	DB	'0', 00H, '.', 00H, '8', 00H, '1', 00H, '_', 00H, 'r', 00H, 'e'
	DB	00H, 'v', 00H, '.', 00H, '1', 00H, '_', 00H, 'w', 00H, 'i', 00H
	DB	't', 00H, 'h', 00H, '_', 00H, 's', 00H, 'o', 00H, 'u', 00H, 'r'
	DB	00H, 'c', 00H, 'e', 00H, 's', 00H, '\', 00H, 'x', 00H, 'a', 00H
	DB	's', 00H, 'h', 00H, 'x', 00H, 't', 00H, '_', 00H, 'v', 00H, '0'
	DB	00H, '.', 00H, '8', 00H, '1', 00H, '_', 00H, 'r', 00H, 'e', 00H
	DB	'v', 00H, '.', 00H, '1', 00H, '_', 00H, 's', 00H, 'r', 00H, 'c'
	DB	00H, '\', 00H, 'g', 00H, 'a', 00H, 'm', 00H, 'e', 00H, '_', 00H
	DB	's', 00H, 'h', 00H, 'a', 00H, 'r', 00H, 'e', 00H, 'd', 00H, '\'
	DB	00H, 'u', 00H, 't', 00H, 'l', 00H, 'a', 00H, 'r', 00H, 'r', 00H
	DB	'a', 00H, 'y', 00H, '.', 00H, 'h', 00H, 00H, 00H
$SG74893 DB	'0', 00H, 00H, 00H
$SG74762 DB	'(', 00H, 'B', 00H, 'a', 00H, 's', 00H, 'e', 00H, '(', 00H
	DB	')', 00H, ' ', 00H, '=', 00H, '=', 00H, ' ', 00H, 'N', 00H, 'U'
	DB	00H, 'L', 00H, 'L', 00H, ')', 00H, ' ', 00H, '|', 00H, '|', 00H
	DB	' ', 00H, '(', 00H, '&', 00H, 's', 00H, 'r', 00H, 'c', 00H, ' '
	DB	00H, '<', 00H, ' ', 00H, 'B', 00H, 'a', 00H, 's', 00H, 'e', 00H
	DB	'(', 00H, ')', 00H, ')', 00H, ' ', 00H, '|', 00H, '|', 00H, ' '
	DB	00H, '(', 00H, '&', 00H, 's', 00H, 'r', 00H, 'c', 00H, ' ', 00H
	DB	'>', 00H, '=', 00H, ' ', 00H, '(', 00H, 'B', 00H, 'a', 00H, 's'
	DB	00H, 'e', 00H, '(', 00H, ')', 00H, ' ', 00H, '+', 00H, ' ', 00H
	DB	'C', 00H, 'o', 00H, 'u', 00H, 'n', 00H, 't', 00H, '(', 00H, ')'
	DB	00H, ')', 00H, ' ', 00H, ')', 00H, 00H, 00H
	ORG $+2
$SG74897 DB	'm', 00H, '_', 00H, 'p', 00H, 'M', 00H, 'e', 00H, 'm', 00H
	DB	'o', 00H, 'r', 00H, 'y', 00H, 00H, 00H
$SG74763 DB	'c', 00H, ':', 00H, '\', 00H, 'u', 00H, 's', 00H, 'e', 00H
	DB	'r', 00H, 's', 00H, '\', 00H, 'u', 00H, 's', 00H, 'e', 00H, 'r'
	DB	00H, '\', 00H, 'd', 00H, 'o', 00H, 'w', 00H, 'n', 00H, 'l', 00H
	DB	'o', 00H, 'a', 00H, 'd', 00H, 's', 00H, '\', 00H, 'x', 00H, 'a'
	DB	00H, 's', 00H, 'h', 00H, 'x', 00H, 't', 00H, '_', 00H, 'v', 00H
	DB	'0', 00H, '.', 00H, '8', 00H, '1', 00H, '_', 00H, 'r', 00H, 'e'
	DB	00H, 'v', 00H, '.', 00H, '1', 00H, '_', 00H, 'w', 00H, 'i', 00H
	DB	't', 00H, 'h', 00H, '_', 00H, 's', 00H, 'o', 00H, 'u', 00H, 'r'
	DB	00H, 'c', 00H, 'e', 00H, 's', 00H, '\', 00H, 'x', 00H, 'a', 00H
	DB	's', 00H, 'h', 00H, 'x', 00H, 't', 00H, '_', 00H, 'v', 00H, '0'
	DB	00H, '.', 00H, '8', 00H, '1', 00H, '_', 00H, 'r', 00H, 'e', 00H
	DB	'v', 00H, '.', 00H, '1', 00H, '_', 00H, 's', 00H, 'r', 00H, 'c'
	DB	00H, '\', 00H, 'g', 00H, 'a', 00H, 'm', 00H, 'e', 00H, '_', 00H
	DB	's', 00H, 'h', 00H, 'a', 00H, 'r', 00H, 'e', 00H, 'd', 00H, '\'
	DB	00H, 'u', 00H, 't', 00H, 'l', 00H, 'a', 00H, 'r', 00H, 'r', 00H
	DB	'a', 00H, 'y', 00H, '.', 00H, 'h', 00H, 00H, 00H
$SG74899 DB	'm', 00H, '_', 00H, 'p', 00H, 'M', 00H, 'e', 00H, 'm', 00H
	DB	'o', 00H, 'r', 00H, 'y', 00H, 00H, 00H
$SG74764 DB	'(', 00H, 'e', 00H, 'l', 00H, 'e', 00H, 'm', 00H, ' ', 00H
	DB	'=', 00H, '=', 00H, ' ', 00H, 'C', 00H, 'o', 00H, 'u', 00H, 'n'
	DB	00H, 't', 00H, '(', 00H, ')', 00H, ')', 00H, ' ', 00H, '|', 00H
	DB	'|', 00H, ' ', 00H, 'I', 00H, 's', 00H, 'V', 00H, 'a', 00H, 'l'
	DB	00H, 'i', 00H, 'd', 00H, 'I', 00H, 'n', 00H, 'd', 00H, 'e', 00H
	DB	'x', 00H, '(', 00H, 'e', 00H, 'l', 00H, 'e', 00H, 'm', 00H, ')'
	DB	00H, 00H, 00H
$SG74836 DB	'c', 00H, ':', 00H, '\', 00H, 'u', 00H, 's', 00H, 'e', 00H
	DB	'r', 00H, 's', 00H, '\', 00H, 'u', 00H, 's', 00H, 'e', 00H, 'r'
	DB	00H, '\', 00H, 'd', 00H, 'o', 00H, 'w', 00H, 'n', 00H, 'l', 00H
	DB	'o', 00H, 'a', 00H, 'd', 00H, 's', 00H, '\', 00H, 'x', 00H, 'a'
	DB	00H, 's', 00H, 'h', 00H, 'x', 00H, 't', 00H, '_', 00H, 'v', 00H
	DB	'0', 00H, '.', 00H, '8', 00H, '1', 00H, '_', 00H, 'r', 00H, 'e'
	DB	00H, 'v', 00H, '.', 00H, '1', 00H, '_', 00H, 'w', 00H, 'i', 00H
	DB	't', 00H, 'h', 00H, '_', 00H, 's', 00H, 'o', 00H, 'u', 00H, 'r'
	DB	00H, 'c', 00H, 'e', 00H, 's', 00H, '\', 00H, 'x', 00H, 'a', 00H
	DB	's', 00H, 'h', 00H, 'x', 00H, 't', 00H, '_', 00H, 'v', 00H, '0'
	DB	00H, '.', 00H, '8', 00H, '1', 00H, '_', 00H, 'r', 00H, 'e', 00H
	DB	'v', 00H, '.', 00H, '1', 00H, '_', 00H, 's', 00H, 'r', 00H, 'c'
	DB	00H, '\', 00H, 'g', 00H, 'a', 00H, 'm', 00H, 'e', 00H, '_', 00H
	DB	's', 00H, 'h', 00H, 'a', 00H, 'r', 00H, 'e', 00H, 'd', 00H, '\'
	DB	00H, 'u', 00H, 't', 00H, 'l', 00H, 'a', 00H, 'r', 00H, 'r', 00H
	DB	'a', 00H, 'y', 00H, '.', 00H, 'h', 00H, 00H, 00H
	ORG $+4
$SG74837 DB	'I', 00H, 's', 00H, 'V', 00H, 'a', 00H, 'l', 00H, 'i', 00H
	DB	'd', 00H, 'I', 00H, 'n', 00H, 'd', 00H, 'e', 00H, 'x', 00H, '('
	DB	00H, 'e', 00H, 'l', 00H, 'e', 00H, 'm', 00H, ')', 00H, ' ', 00H
	DB	'|', 00H, '|', 00H, ' ', 00H, '(', 00H, ' ', 00H, 'm', 00H, '_'
	DB	00H, 'S', 00H, 'i', 00H, 'z', 00H, 'e', 00H, ' ', 00H, '=', 00H
	DB	'=', 00H, ' ', 00H, '0', 00H, ' ', 00H, ')', 00H, ' ', 00H, '|'
	DB	00H, '|', 00H, ' ', 00H, '(', 00H, ' ', 00H, 'n', 00H, 'u', 00H
	DB	'm', 00H, ' ', 00H, '=', 00H, '=', 00H, ' ', 00H, '0', 00H, ' '
	DB	00H, ')', 00H, 00H, 00H
	ORG $+4
$SG74883 DB	'c', 00H, ':', 00H, '\', 00H, 'u', 00H, 's', 00H, 'e', 00H
	DB	'r', 00H, 's', 00H, '\', 00H, 'u', 00H, 's', 00H, 'e', 00H, 'r'
	DB	00H, '\', 00H, 'd', 00H, 'o', 00H, 'w', 00H, 'n', 00H, 'l', 00H
	DB	'o', 00H, 'a', 00H, 'd', 00H, 's', 00H, '\', 00H, 'x', 00H, 'a'
	DB	00H, 's', 00H, 'h', 00H, 'x', 00H, 't', 00H, '_', 00H, 'v', 00H
	DB	'0', 00H, '.', 00H, '8', 00H, '1', 00H, '_', 00H, 'r', 00H, 'e'
	DB	00H, 'v', 00H, '.', 00H, '1', 00H, '_', 00H, 'w', 00H, 'i', 00H
	DB	't', 00H, 'h', 00H, '_', 00H, 's', 00H, 'o', 00H, 'u', 00H, 'r'
	DB	00H, 'c', 00H, 'e', 00H, 's', 00H, '\', 00H, 'x', 00H, 'a', 00H
	DB	's', 00H, 'h', 00H, 'x', 00H, 't', 00H, '_', 00H, 'v', 00H, '0'
	DB	00H, '.', 00H, '8', 00H, '1', 00H, '_', 00H, 'r', 00H, 'e', 00H
	DB	'v', 00H, '.', 00H, '1', 00H, '_', 00H, 's', 00H, 'r', 00H, 'c'
	DB	00H, '\', 00H, 'g', 00H, 'a', 00H, 'm', 00H, 'e', 00H, '_', 00H
	DB	's', 00H, 'h', 00H, 'a', 00H, 'r', 00H, 'e', 00H, 'd', 00H, '\'
	DB	00H, 'u', 00H, 't', 00H, 'l', 00H, 'm', 00H, 'e', 00H, 'm', 00H
	DB	'o', 00H, 'r', 00H, 'y', 00H, '.', 00H, 'h', 00H, 00H, 00H
	ORG $+2
$SG74886 DB	'c', 00H, ':', 00H, '\', 00H, 'u', 00H, 's', 00H, 'e', 00H
	DB	'r', 00H, 's', 00H, '\', 00H, 'u', 00H, 's', 00H, 'e', 00H, 'r'
	DB	00H, '\', 00H, 'd', 00H, 'o', 00H, 'w', 00H, 'n', 00H, 'l', 00H
	DB	'o', 00H, 'a', 00H, 'd', 00H, 's', 00H, '\', 00H, 'x', 00H, 'a'
	DB	00H, 's', 00H, 'h', 00H, 'x', 00H, 't', 00H, '_', 00H, 'v', 00H
	DB	'0', 00H, '.', 00H, '8', 00H, '1', 00H, '_', 00H, 'r', 00H, 'e'
	DB	00H, 'v', 00H, '.', 00H, '1', 00H, '_', 00H, 'w', 00H, 'i', 00H
	DB	't', 00H, 'h', 00H, '_', 00H, 's', 00H, 'o', 00H, 'u', 00H, 'r'
	DB	00H, 'c', 00H, 'e', 00H, 's', 00H, '\', 00H, 'x', 00H, 'a', 00H
	DB	's', 00H, 'h', 00H, 'x', 00H, 't', 00H, '_', 00H, 'v', 00H, '0'
	DB	00H, '.', 00H, '8', 00H, '1', 00H, '_', 00H, 'r', 00H, 'e', 00H
	DB	'v', 00H, '.', 00H, '1', 00H, '_', 00H, 's', 00H, 'r', 00H, 'c'
	DB	00H, '\', 00H, 'g', 00H, 'a', 00H, 'm', 00H, 'e', 00H, '_', 00H
	DB	's', 00H, 'h', 00H, 'a', 00H, 'r', 00H, 'e', 00H, 'd', 00H, '\'
	DB	00H, 'u', 00H, 't', 00H, 'l', 00H, 'm', 00H, 'e', 00H, 'm', 00H
	DB	'o', 00H, 'r', 00H, 'y', 00H, '.', 00H, 'h', 00H, 00H, 00H
	ORG $+2
$SG74892 DB	'c', 00H, ':', 00H, '\', 00H, 'u', 00H, 's', 00H, 'e', 00H
	DB	'r', 00H, 's', 00H, '\', 00H, 'u', 00H, 's', 00H, 'e', 00H, 'r'
	DB	00H, '\', 00H, 'd', 00H, 'o', 00H, 'w', 00H, 'n', 00H, 'l', 00H
	DB	'o', 00H, 'a', 00H, 'd', 00H, 's', 00H, '\', 00H, 'x', 00H, 'a'
	DB	00H, 's', 00H, 'h', 00H, 'x', 00H, 't', 00H, '_', 00H, 'v', 00H
	DB	'0', 00H, '.', 00H, '8', 00H, '1', 00H, '_', 00H, 'r', 00H, 'e'
	DB	00H, 'v', 00H, '.', 00H, '1', 00H, '_', 00H, 'w', 00H, 'i', 00H
	DB	't', 00H, 'h', 00H, '_', 00H, 's', 00H, 'o', 00H, 'u', 00H, 'r'
	DB	00H, 'c', 00H, 'e', 00H, 's', 00H, '\', 00H, 'x', 00H, 'a', 00H
	DB	's', 00H, 'h', 00H, 'x', 00H, 't', 00H, '_', 00H, 'v', 00H, '0'
	DB	00H, '.', 00H, '8', 00H, '1', 00H, '_', 00H, 'r', 00H, 'e', 00H
	DB	'v', 00H, '.', 00H, '1', 00H, '_', 00H, 's', 00H, 'r', 00H, 'c'
	DB	00H, '\', 00H, 'g', 00H, 'a', 00H, 'm', 00H, 'e', 00H, '_', 00H
	DB	's', 00H, 'h', 00H, 'a', 00H, 'r', 00H, 'e', 00H, 'd', 00H, '\'
	DB	00H, 'u', 00H, 't', 00H, 'l', 00H, 'm', 00H, 'e', 00H, 'm', 00H
	DB	'o', 00H, 'r', 00H, 'y', 00H, '.', 00H, 'h', 00H, 00H, 00H
	ORG $+2
$SG74896 DB	'c', 00H, ':', 00H, '\', 00H, 'u', 00H, 's', 00H, 'e', 00H
	DB	'r', 00H, 's', 00H, '\', 00H, 'u', 00H, 's', 00H, 'e', 00H, 'r'
	DB	00H, '\', 00H, 'd', 00H, 'o', 00H, 'w', 00H, 'n', 00H, 'l', 00H
	DB	'o', 00H, 'a', 00H, 'd', 00H, 's', 00H, '\', 00H, 'x', 00H, 'a'
	DB	00H, 's', 00H, 'h', 00H, 'x', 00H, 't', 00H, '_', 00H, 'v', 00H
	DB	'0', 00H, '.', 00H, '8', 00H, '1', 00H, '_', 00H, 'r', 00H, 'e'
	DB	00H, 'v', 00H, '.', 00H, '1', 00H, '_', 00H, 'w', 00H, 'i', 00H
	DB	't', 00H, 'h', 00H, '_', 00H, 's', 00H, 'o', 00H, 'u', 00H, 'r'
	DB	00H, 'c', 00H, 'e', 00H, 's', 00H, '\', 00H, 'x', 00H, 'a', 00H
	DB	's', 00H, 'h', 00H, 'x', 00H, 't', 00H, '_', 00H, 'v', 00H, '0'
	DB	00H, '.', 00H, '8', 00H, '1', 00H, '_', 00H, 'r', 00H, 'e', 00H
	DB	'v', 00H, '.', 00H, '1', 00H, '_', 00H, 's', 00H, 'r', 00H, 'c'
	DB	00H, '\', 00H, 'g', 00H, 'a', 00H, 'm', 00H, 'e', 00H, '_', 00H
	DB	's', 00H, 'h', 00H, 'a', 00H, 'r', 00H, 'e', 00H, 'd', 00H, '\'
	DB	00H, 'u', 00H, 't', 00H, 'l', 00H, 'm', 00H, 'e', 00H, 'm', 00H
	DB	'o', 00H, 'r', 00H, 'y', 00H, '.', 00H, 'h', 00H, 00H, 00H
	ORG $+2
$SG74898 DB	'c', 00H, ':', 00H, '\', 00H, 'u', 00H, 's', 00H, 'e', 00H
	DB	'r', 00H, 's', 00H, '\', 00H, 'u', 00H, 's', 00H, 'e', 00H, 'r'
	DB	00H, '\', 00H, 'd', 00H, 'o', 00H, 'w', 00H, 'n', 00H, 'l', 00H
	DB	'o', 00H, 'a', 00H, 'd', 00H, 's', 00H, '\', 00H, 'x', 00H, 'a'
	DB	00H, 's', 00H, 'h', 00H, 'x', 00H, 't', 00H, '_', 00H, 'v', 00H
	DB	'0', 00H, '.', 00H, '8', 00H, '1', 00H, '_', 00H, 'r', 00H, 'e'
	DB	00H, 'v', 00H, '.', 00H, '1', 00H, '_', 00H, 'w', 00H, 'i', 00H
	DB	't', 00H, 'h', 00H, '_', 00H, 's', 00H, 'o', 00H, 'u', 00H, 'r'
	DB	00H, 'c', 00H, 'e', 00H, 's', 00H, '\', 00H, 'x', 00H, 'a', 00H
	DB	's', 00H, 'h', 00H, 'x', 00H, 't', 00H, '_', 00H, 'v', 00H, '0'
	DB	00H, '.', 00H, '8', 00H, '1', 00H, '_', 00H, 'r', 00H, 'e', 00H
	DB	'v', 00H, '.', 00H, '1', 00H, '_', 00H, 's', 00H, 'r', 00H, 'c'
	DB	00H, '\', 00H, 'g', 00H, 'a', 00H, 'm', 00H, 'e', 00H, '_', 00H
	DB	's', 00H, 'h', 00H, 'a', 00H, 'r', 00H, 'e', 00H, 'd', 00H, '\'
	DB	00H, 'u', 00H, 't', 00H, 'l', 00H, 'm', 00H, 'e', 00H, 'm', 00H
	DB	'o', 00H, 'r', 00H, 'y', 00H, '.', 00H, 'h', 00H, 00H, 00H
CONST	ENDS
PUBLIC	??_H@YGXPAXIIP6EPAX0@Z@Z			; `vector constructor iterator'
PUBLIC	??__G@YGXPAX0IIP6EPAX00@Z@Z			; `vector copy constructor iterator'
PUBLIC	??0Vector@@QAE@XZ				; Vector::Vector
PUBLIC	??0Vector@@QAE@MMM@Z				; Vector::Vector
PUBLIC	?Length@Vector@@QBEMXZ				; Vector::Length
PUBLIC	??BVector@@QAEPAMXZ				; Vector::operator float *
PUBLIC	??0CDatadescGeneratedNameHolder@@QAE@PBD@Z	; CDatadescGeneratedNameHolder::CDatadescGeneratedNameHolder
PUBLIC	??1CDatadescGeneratedNameHolder@@QAE@XZ		; CDatadescGeneratedNameHolder::~CDatadescGeneratedNameHolder
PUBLIC	??0?$CUtlArray@PADV?$CUtlMemory@PADH@@@@QAE@HH@Z ; CUtlArray<char *,CUtlMemory<char *,int> >::CUtlArray<char *,CUtlMemory<char *,int> >
PUBLIC	??1?$CUtlArray@PADV?$CUtlMemory@PADH@@@@QAE@XZ	; CUtlArray<char *,CUtlMemory<char *,int> >::~CUtlArray<char *,CUtlMemory<char *,int> >
PUBLIC	??A?$CUtlArray@PADV?$CUtlMemory@PADH@@@@QAEAAPADH@Z ; CUtlArray<char *,CUtlMemory<char *,int> >::operator[]
PUBLIC	?Element@?$CUtlArray@PADV?$CUtlMemory@PADH@@@@QAEAAPADH@Z ; CUtlArray<char *,CUtlMemory<char *,int> >::Element
PUBLIC	?Base@?$CUtlArray@PADV?$CUtlMemory@PADH@@@@QAEPAPADXZ ; CUtlArray<char *,CUtlMemory<char *,int> >::Base
PUBLIC	?Count@?$CUtlArray@PADV?$CUtlMemory@PADH@@@@QBEHXZ ; CUtlArray<char *,CUtlMemory<char *,int> >::Count
PUBLIC	?RemoveAll@?$CUtlArray@PADV?$CUtlMemory@PADH@@@@QAEXXZ ; CUtlArray<char *,CUtlMemory<char *,int> >::RemoveAll
PUBLIC	?Purge@?$CUtlArray@PADV?$CUtlMemory@PADH@@@@QAEXXZ ; CUtlArray<char *,CUtlMemory<char *,int> >::Purge
PUBLIC	??0?$CUtlMemory@PADH@@QAE@HH@Z			; CUtlMemory<char *,int>::CUtlMemory<char *,int>
PUBLIC	??1?$CUtlMemory@PADH@@QAE@XZ			; CUtlMemory<char *,int>::~CUtlMemory<char *,int>
PUBLIC	??A?$CUtlMemory@PADH@@QAEAAPADH@Z		; CUtlMemory<char *,int>::operator[]
PUBLIC	?IsIdxValid@?$CUtlMemory@PADH@@QBE_NH@Z		; CUtlMemory<char *,int>::IsIdxValid
PUBLIC	?Base@?$CUtlMemory@PADH@@QAEPAPADXZ		; CUtlMemory<char *,int>::Base
PUBLIC	?Purge@?$CUtlMemory@PADH@@QAEXXZ		; CUtlMemory<char *,int>::Purge
PUBLIC	?IsExternallyAllocated@?$CUtlMemory@PADH@@QBE_NXZ ; CUtlMemory<char *,int>::IsExternallyAllocated
PUBLIC	?IsReadOnly@?$CUtlMemory@PADH@@QBE_NXZ		; CUtlMemory<char *,int>::IsReadOnly
PUBLIC	?ValidateGrowSize@?$CUtlMemory@PADH@@IAEXXZ	; CUtlMemory<char *,int>::ValidateGrowSize
PUBLIC	?ResetDbgInfo@?$CUtlArray@PADV?$CUtlMemory@PADH@@@@IAEXXZ ; CUtlArray<char *,CUtlMemory<char *,int> >::ResetDbgInfo
PUBLIC	?ENT@@YAPAUedict_s@@PBUentvars_s@@@Z		; ENT
PUBLIC	?Get@EHANDLE@@QAEPAUedict_s@@XZ			; EHANDLE::Get
PUBLIC	??BEHANDLE@@QAEHXZ				; EHANDLE::operator int
PUBLIC	?edict@CBaseEntity@@QAEPAUedict_s@@XZ		; CBaseEntity::edict
PUBLIC	?StudioFrameAdvance@CBaseAnimating@@QAEMM@Z	; CBaseAnimating::StudioFrameAdvance
PUBLIC	?StudioGaitFrameAdvance@CBaseAnimating@@QAEMXZ	; CBaseAnimating::StudioGaitFrameAdvance
PUBLIC	?GetSequenceFlags@CBaseAnimating@@QAEHXZ	; CBaseAnimating::GetSequenceFlags
PUBLIC	?LookupActivity@CBaseAnimating@@QAEHH@Z		; CBaseAnimating::LookupActivity
PUBLIC	?LookupActivityHeaviest@CBaseAnimating@@QAEHH@Z	; CBaseAnimating::LookupActivityHeaviest
PUBLIC	?LookupSequence@CBaseAnimating@@QAEHPBD@Z	; CBaseAnimating::LookupSequence
PUBLIC	?GetModelPtr@CBaseAnimating@@SAPAXH@Z		; CBaseAnimating::GetModelPtr
PUBLIC	?GetModelPtr@CBaseAnimating@@QAEPAXXZ		; CBaseAnimating::GetModelPtr
PUBLIC	?ResetSequenceInfo@CBaseAnimating@@QAEXXZ	; CBaseAnimating::ResetSequenceInfo
PUBLIC	?DispatchAnimEvents@CBaseAnimating@@QAEXM@Z	; CBaseAnimating::DispatchAnimEvents
PUBLIC	?SetBoneController@CBaseAnimating@@QAEMHM@Z	; CBaseAnimating::SetBoneController
PUBLIC	?InitBoneControllers@CBaseAnimating@@QAEXXZ	; CBaseAnimating::InitBoneControllers
PUBLIC	?SetBlending@CBaseAnimating@@QAEMHM@Z		; CBaseAnimating::SetBlending
PUBLIC	?GetBonePosition@CBaseAnimating@@QAEXHAAVVector@@0@Z ; CBaseAnimating::GetBonePosition
PUBLIC	?GetAutomovement@CBaseAnimating@@QAEXAAVVector@@0M@Z ; CBaseAnimating::GetAutomovement
PUBLIC	?FindTransition@CBaseAnimating@@QAEHHHPAH@Z	; CBaseAnimating::FindTransition
PUBLIC	?GetAttachment@CBaseAnimating@@QAEXHAAVVector@@0@Z ; CBaseAnimating::GetAttachment
PUBLIC	?SetBodygroup@CBaseAnimating@@QAEXHH@Z		; CBaseAnimating::SetBodygroup
PUBLIC	?GetBodygroup@CBaseAnimating@@QAEHH@Z		; CBaseAnimating::GetBodygroup
PUBLIC	?ExtractBbox@CBaseAnimating@@QAEHHAAVVector@@0@Z ; CBaseAnimating::ExtractBbox
PUBLIC	?SetSequenceBox@CBaseAnimating@@QAEXXZ		; CBaseAnimating::SetSequenceBox
PUBLIC	?GetBaseMap@CBaseAnimating@@SAPAUdatamap_s@@XZ	; CBaseAnimating::GetBaseMap
PUBLIC	?GetDataDescMap@CBaseAnimating@@UAEPAUdatamap_s@@XZ ; CBaseAnimating::GetDataDescMap
PUBLIC	??$DataMapAccess@VCBaseDelay@@@@YAXPAVCBaseDelay@@PAPAUdatamap_s@@@Z ; DataMapAccess<CBaseDelay>
PUBLIC	??$DataMapInit@VCBaseAnimating@@@@YAPAUdatamap_s@@PAVCBaseAnimating@@@Z ; DataMapInit<CBaseAnimating>
PUBLIC	??$Destruct@PAD@@YAXPAPAD@Z			; Destruct<char *>
PUBLIC	?g_DataMapHolder@CBaseAnimating_DataDescInit@@3PAUdatamap_s@@A ; CBaseAnimating_DataDescInit::g_DataMapHolder
PUBLIC	??_C@_1MO@LCPOAHHB@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAu?$AAs?$AAe?$AAr?$AA?2?$AAd@ ; `string'
PUBLIC	??_C@_1BM@PFNFCCHH@?$AA?$CB?$AAI?$AAs?$AAR?$AAe?$AAa?$AAd?$AAO?$AAn?$AAl?$AAy?$AA?$CI?$AA?$CJ@ ; `string'
PUBLIC	??_C@_1BM@CKILBAKK@?$AAI?$AAs?$AAI?$AAd?$AAx?$AAV?$AAa?$AAl?$AAi?$AAd?$AA?$CI?$AAi?$AA?$CJ@ ; `string'
PUBLIC	__real@00000000
PUBLIC	__real@0000000000000000
PUBLIC	__real@3dcccccd
PUBLIC	__real@3e70f0f1
PUBLIC	__real@3e800000
PUBLIC	__real@3f50624dd2f1a9fc
PUBLIC	__real@3f800000
PUBLIC	__real@3f91df46a2529d39
PUBLIC	__real@40400000
PUBLIC	__real@4070000000000000
PUBLIC	__real@40800000
PUBLIC	__real@41f00000
PUBLIC	__real@42652ee1
PUBLIC	__real@42f00000
PUBLIC	__real@43340000
PUBLIC	__real@437f0000
PUBLIC	__real@43800000
PUBLIC	__real@43b40000
PUBLIC	__real@461c3c00
PUBLIC	__real@80000000
PUBLIC	__real@bf800000
PUBLIC	__real@c2f00000
PUBLIC	__real@c3340000
PUBLIC	__real@c61c3c00
PUBLIC	__xmm@80000000000000008000000000000000
PUBLIC	__xmm@80000000800000008000000080000000
EXTRN	??3@YAXPAXI@Z:PROC				; operator delete
EXTRN	_atexit:PROC
EXTRN	__Init_thread_header:PROC
EXTRN	__Init_thread_abort:PROC
EXTRN	__Init_thread_footer:PROC
EXTRN	_memset:PROC
EXTRN	_strlen:PROC
EXTRN	_free:PROC
EXTRN	_malloc:PROC
EXTRN	_atan2:PROC
EXTRN	_cos:PROC
EXTRN	_sin:PROC
EXTRN	_sqrt:PROC
EXTRN	?VectorITransform@matrix4x4@@QBE?AVVector@@ABV2@@Z:PROC ; matrix4x4::VectorITransform
EXTRN	__wassert:PROC
EXTRN	?DBG_EntOfVars@@YAPAUedict_s@@PBUentvars_s@@@Z:PROC ; DBG_EntOfVars
EXTRN	?UTIL_SetSize@@YAXPAUentvars_s@@ABVVector@@1@Z:PROC ; UTIL_SetSize
EXTRN	?DBG_AssertFunction@@YAXHPBD0H0@Z:PROC		; DBG_AssertFunction
EXTRN	?GetAbsAngles@CBaseEntity@@QBEABVVector@@XZ:PROC ; CBaseEntity::GetAbsAngles
EXTRN	?GetParentToWorldTransform@CBaseEntity@@QAE?AVmatrix4x4@@XZ:PROC ; CBaseEntity::GetParentToWorldTransform
EXTRN	?LookupActivity@@YAHPAXH@Z:PROC			; LookupActivity
EXTRN	?LookupActivityHeaviest@@YAHPAXH@Z:PROC		; LookupActivityHeaviest
EXTRN	?LookupSequence@@YAHPAXPBD@Z:PROC		; LookupSequence
EXTRN	?GetSequenceInfo@@YAXPAXHPAM1@Z:PROC		; GetSequenceInfo
EXTRN	?GetSequenceFlags@@YAHPAXH@Z:PROC		; GetSequenceFlags
EXTRN	?CalcGaitFrame@@YAXPAXAAHAAMM@Z:PROC		; CalcGaitFrame
EXTRN	?SetController@@YAMPAXPAEHM@Z:PROC		; SetController
EXTRN	?SetBlending@@YAMPAXHPAEHM@Z:PROC		; SetBlending
EXTRN	?FindTransition@@YAHPAXHHPAH@Z:PROC		; FindTransition
EXTRN	?SetBodygroup@@YAXPAXAAHHH@Z:PROC		; SetBodygroup
EXTRN	?GetBodygroup@@YAHPAXHH@Z:PROC			; GetBodygroup
EXTRN	?GetAnimationEvent@@YAHPAXHPAUMonsterEvent_t@@MMH@Z:PROC ; GetAnimationEvent
EXTRN	?ExtractBbox@@YAHPAXHAAVVector@@1@Z:PROC	; ExtractBbox
EXTRN	@__security_check_cookie@4:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	__Init_thread_epoch:DWORD
EXTRN	?g_engfuncs@@3Uenginefuncs_s@@A:BYTE		; g_engfuncs
EXTRN	?g_physfuncs@@3Userver_physics_api_s@@A:BYTE	; g_physfuncs
EXTRN	?gpGlobals@@3PAUglobalvars_t@@A:DWORD		; gpGlobals
EXTRN	?g_fPhysicInitialized@@3HA:DWORD		; g_fPhysicInitialized
EXTRN	?m_DataMap@CBaseDelay@@2Udatamap_s@@A:BYTE	; CBaseDelay::m_DataMap
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
EXTRN	__tls_array:DWORD
EXTRN	__tls_index:DWORD
_BSS	SEGMENT
?g_DataMapHolder@CBaseAnimating_DataDescInit@@3PAUdatamap_s@@A DD 01H DUP (?) ; CBaseAnimating_DataDescInit::g_DataMapHolder
_BSS	ENDS
;	COMDAT ?nameHolder@?1???$DataMapInit@VCBaseAnimating@@@@YAPAUdatamap_s@@PAVCBaseAnimating@@@Z@4VCDatadescGeneratedNameHolder@@A
_BSS	SEGMENT
?nameHolder@?1???$DataMapInit@VCBaseAnimating@@@@YAPAUdatamap_s@@PAVCBaseAnimating@@@Z@4VCDatadescGeneratedNameHolder@@A DB 01cH DUP (?) ; `DataMapInit<CBaseAnimating>'::`2'::nameHolder
_BSS	ENDS
;	COMDAT ?$TSS0@?1???$DataMapInit@VCBaseAnimating@@@@YAPAUdatamap_s@@PAVCBaseAnimating@@@Z@4HA
_BSS	SEGMENT
?$TSS0@?1???$DataMapInit@VCBaseAnimating@@@@YAPAUdatamap_s@@PAVCBaseAnimating@@@Z@4HA DD 01H DUP (?) ; TSS0<`template-parameter-2',VCBaseAnimating::taMapInit>
_BSS	ENDS
CRT$XCU	SEGMENT
?g_DataMapHolder$initializer$@CBaseAnimating_DataDescInit@@3P6AXXZA DD FLAT:??__Eg_DataMapHolder@CBaseAnimating_DataDescInit@@YAXXZ ; CBaseAnimating_DataDescInit::g_DataMapHolder$initializer$
CRT$XCU	ENDS
;	COMDAT __xmm@80000000800000008000000080000000
CONST	SEGMENT
__xmm@80000000800000008000000080000000 DB 00H, 00H, 00H, 080H, 00H, 00H, 00H
	DB	080H, 00H, 00H, 00H, 080H, 00H, 00H, 00H, 080H
CONST	ENDS
;	COMDAT __xmm@80000000000000008000000000000000
CONST	SEGMENT
__xmm@80000000000000008000000000000000 DB 00H, 00H, 00H, 00H, 00H, 00H, 00H
	DB	080H, 00H, 00H, 00H, 00H, 00H, 00H, 00H, 080H
CONST	ENDS
;	COMDAT __real@c61c3c00
CONST	SEGMENT
__real@c61c3c00 DD 0c61c3c00r			; -9999
CONST	ENDS
;	COMDAT __real@c3340000
CONST	SEGMENT
__real@c3340000 DD 0c3340000r			; -180
CONST	ENDS
;	COMDAT __real@c2f00000
CONST	SEGMENT
__real@c2f00000 DD 0c2f00000r			; -120
CONST	ENDS
;	COMDAT __real@bf800000
CONST	SEGMENT
__real@bf800000 DD 0bf800000r			; -1
CONST	ENDS
;	COMDAT __real@80000000
CONST	SEGMENT
__real@80000000 DD 080000000r			; -0
CONST	ENDS
;	COMDAT __real@461c3c00
CONST	SEGMENT
__real@461c3c00 DD 0461c3c00r			; 9999
CONST	ENDS
;	COMDAT __real@43b40000
CONST	SEGMENT
__real@43b40000 DD 043b40000r			; 360
CONST	ENDS
;	COMDAT __real@43800000
CONST	SEGMENT
__real@43800000 DD 043800000r			; 256
CONST	ENDS
;	COMDAT __real@437f0000
CONST	SEGMENT
__real@437f0000 DD 0437f0000r			; 255
CONST	ENDS
;	COMDAT __real@43340000
CONST	SEGMENT
__real@43340000 DD 043340000r			; 180
CONST	ENDS
;	COMDAT __real@42f00000
CONST	SEGMENT
__real@42f00000 DD 042f00000r			; 120
CONST	ENDS
;	COMDAT __real@42652ee1
CONST	SEGMENT
__real@42652ee1 DD 042652ee1r			; 57.2958
CONST	ENDS
;	COMDAT __real@41f00000
CONST	SEGMENT
__real@41f00000 DD 041f00000r			; 30
CONST	ENDS
;	COMDAT __real@40800000
CONST	SEGMENT
__real@40800000 DD 040800000r			; 4
CONST	ENDS
;	COMDAT __real@4070000000000000
CONST	SEGMENT
__real@4070000000000000 DQ 04070000000000000r	; 256
CONST	ENDS
;	COMDAT __real@40400000
CONST	SEGMENT
__real@40400000 DD 040400000r			; 3
CONST	ENDS
;	COMDAT __real@3f91df46a2529d39
CONST	SEGMENT
__real@3f91df46a2529d39 DQ 03f91df46a2529d39r	; 0.0174533
CONST	ENDS
;	COMDAT __real@3f800000
CONST	SEGMENT
__real@3f800000 DD 03f800000r			; 1
CONST	ENDS
;	COMDAT __real@3f50624dd2f1a9fc
CONST	SEGMENT
__real@3f50624dd2f1a9fc DQ 03f50624dd2f1a9fcr	; 0.001
CONST	ENDS
;	COMDAT __real@3e800000
CONST	SEGMENT
__real@3e800000 DD 03e800000r			; 0.25
CONST	ENDS
;	COMDAT __real@3e70f0f1
CONST	SEGMENT
__real@3e70f0f1 DD 03e70f0f1r			; 0.235294
CONST	ENDS
;	COMDAT __real@3dcccccd
CONST	SEGMENT
__real@3dcccccd DD 03dcccccdr			; 0.1
CONST	ENDS
;	COMDAT __real@0000000000000000
CONST	SEGMENT
__real@0000000000000000 DQ 00000000000000000r	; 0
CONST	ENDS
;	COMDAT __real@00000000
CONST	SEGMENT
__real@00000000 DD 000000000r			; 0
CONST	ENDS
;	COMDAT ??_C@_1BM@CKILBAKK@?$AAI?$AAs?$AAI?$AAd?$AAx?$AAV?$AAa?$AAl?$AAi?$AAd?$AA?$CI?$AAi?$AA?$CJ@
CONST	SEGMENT
??_C@_1BM@CKILBAKK@?$AAI?$AAs?$AAI?$AAd?$AAx?$AAV?$AAa?$AAl?$AAi?$AAd?$AA?$CI?$AAi?$AA?$CJ@ DB 'I'
	DB	00H, 's', 00H, 'I', 00H, 'd', 00H, 'x', 00H, 'V', 00H, 'a', 00H
	DB	'l', 00H, 'i', 00H, 'd', 00H, '(', 00H, 'i', 00H, ')', 00H, 00H
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_1BM@PFNFCCHH@?$AA?$CB?$AAI?$AAs?$AAR?$AAe?$AAa?$AAd?$AAO?$AAn?$AAl?$AAy?$AA?$CI?$AA?$CJ@
CONST	SEGMENT
??_C@_1BM@PFNFCCHH@?$AA?$CB?$AAI?$AAs?$AAR?$AAe?$AAa?$AAd?$AAO?$AAn?$AAl?$AAy?$AA?$CI?$AA?$CJ@ DB '!'
	DB	00H, 'I', 00H, 's', 00H, 'R', 00H, 'e', 00H, 'a', 00H, 'd', 00H
	DB	'O', 00H, 'n', 00H, 'l', 00H, 'y', 00H, '(', 00H, ')', 00H, 00H
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_1MO@LCPOAHHB@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAu?$AAs?$AAe?$AAr?$AA?2?$AAd@
CONST	SEGMENT
??_C@_1MO@LCPOAHHB@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAu?$AAs?$AAe?$AAr?$AA?2?$AAd@ DB 'c'
	DB	00H, ':', 00H, '\', 00H, 'u', 00H, 's', 00H, 'e', 00H, 'r', 00H
	DB	's', 00H, '\', 00H, 'u', 00H, 's', 00H, 'e', 00H, 'r', 00H, '\'
	DB	00H, 'd', 00H, 'o', 00H, 'w', 00H, 'n', 00H, 'l', 00H, 'o', 00H
	DB	'a', 00H, 'd', 00H, 's', 00H, '\', 00H, 'x', 00H, 'a', 00H, 's'
	DB	00H, 'h', 00H, 'x', 00H, 't', 00H, '_', 00H, 'v', 00H, '0', 00H
	DB	'.', 00H, '8', 00H, '1', 00H, '_', 00H, 'r', 00H, 'e', 00H, 'v'
	DB	00H, '.', 00H, '1', 00H, '_', 00H, 'w', 00H, 'i', 00H, 't', 00H
	DB	'h', 00H, '_', 00H, 's', 00H, 'o', 00H, 'u', 00H, 'r', 00H, 'c'
	DB	00H, 'e', 00H, 's', 00H, '\', 00H, 'x', 00H, 'a', 00H, 's', 00H
	DB	'h', 00H, 'x', 00H, 't', 00H, '_', 00H, 'v', 00H, '0', 00H, '.'
	DB	00H, '8', 00H, '1', 00H, '_', 00H, 'r', 00H, 'e', 00H, 'v', 00H
	DB	'.', 00H, '1', 00H, '_', 00H, 's', 00H, 'r', 00H, 'c', 00H, '\'
	DB	00H, 'g', 00H, 'a', 00H, 'm', 00H, 'e', 00H, '_', 00H, 's', 00H
	DB	'h', 00H, 'a', 00H, 'r', 00H, 'e', 00H, 'd', 00H, '\', 00H, 'u'
	DB	00H, 't', 00H, 'l', 00H, 'm', 00H, 'e', 00H, 'm', 00H, 'o', 00H
	DB	'r', 00H, 'y', 00H, '.', 00H, 'h', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ?dataDesc@?1???$DataMapInit@VCBaseAnimating@@@@YAPAUdatamap_s@@PAVCBaseAnimating@@@Z@4PAUtypedescription_s@@A
_DATA	SEGMENT
?dataDesc@?1???$DataMapInit@VCBaseAnimating@@@@YAPAUdatamap_s@@PAVCBaseAnimating@@@Z@4PAUtypedescription_s@@A DD 012H ; `DataMapInit<CBaseAnimating>'::`2'::dataDesc
	DD	00H
	DD	00H
	DW	00H
	DW	00H
	DD	00H
	DD	00H
	DD	00H
	DD	FLAT:$SG74463
	DD	0690H
	DW	01H
	DW	02H
	DD	00H
	DD	00H
	DD	00H
	DD	FLAT:$SG74464
	DD	0694H
	DW	01H
	DW	02H
	DD	00H
	DD	00H
	DD	0fH
	DD	FLAT:$SG74465
	DD	0698H
	DW	01H
	DW	02H
	DD	00H
	DD	00H
	DD	0cH
	DD	FLAT:$SG74466
	DD	069cH
	DW	01H
	DW	02H
	DD	00H
	DD	00H
	DD	0cH
	DD	FLAT:$SG74467
	DD	06a0H
	DW	01H
	DW	02H
	DD	00H
	DD	00H
_DATA	ENDS
xdata$x	SEGMENT
__unwindtable$??$DataMapInit@VCBaseAnimating@@@@YAPAUdatamap_s@@PAVCBaseAnimating@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$DataMapInit@VCBaseAnimating@@@@YAPAUdatamap_s@@PAVCBaseAnimating@@@Z$0
__ehfuncinfo$??$DataMapInit@VCBaseAnimating@@@@YAPAUdatamap_s@@PAVCBaseAnimating@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$DataMapInit@VCBaseAnimating@@@@YAPAUdatamap_s@@PAVCBaseAnimating@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??1?$CUtlMemory@PADH@@QAE@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??1?$CUtlArray@PADV?$CUtlMemory@PADH@@@@QAE@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$CUtlArray@PADV?$CUtlMemory@PADH@@@@QAE@HH@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$CUtlArray@PADV?$CUtlMemory@PADH@@@@QAE@HH@Z$0
__ehfuncinfo$??0?$CUtlArray@PADV?$CUtlMemory@PADH@@@@QAE@HH@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$CUtlArray@PADV?$CUtlMemory@PADH@@@@QAE@HH@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??1CDatadescGeneratedNameHolder@@QAE@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xashxt_v0.81_rev.1_with_sources\xashxt_v0.81_rev.1_src\game_shared\utlmemory.h
;	COMDAT ??$Destruct@PAD@@YAXPAPAD@Z
_TEXT	SEGMENT
_pMemory$ = 8						; size = 4
??$Destruct@PAD@@YAXPAPAD@Z PROC			; Destruct<char *>, COMDAT

; 49   : {

	push	ebp
	mov	ebp, esp

; 50   : 	pMemory->~T();
; 51   : 
; 52   : #ifdef _DEBUG
; 53   : 	memset( pMemory, 0xDD, sizeof(T) );

	push	4
	push	221					; 000000ddH
	mov	eax, DWORD PTR _pMemory$[ebp]
	push	eax
	call	_memset
	add	esp, 12					; 0000000cH

; 54   : #endif
; 55   : }

	pop	ebp
	ret	0
??$Destruct@PAD@@YAXPAPAD@Z ENDP			; Destruct<char *>
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??__FnameHolder@?1???$DataMapInit@VCBaseAnimating@@@@YAPAUdatamap_s@@PAVCBaseAnimating@@@Z@YAXXZ
text$yd	SEGMENT
??__FnameHolder@?1???$DataMapInit@VCBaseAnimating@@@@YAPAUdatamap_s@@PAVCBaseAnimating@@@Z@YAXXZ PROC ; `DataMapInit<CBaseAnimating>'::`2'::`dynamic atexit destructor for 'nameHolder'', COMDAT
	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET ?nameHolder@?1???$DataMapInit@VCBaseAnimating@@@@YAPAUdatamap_s@@PAVCBaseAnimating@@@Z@4VCDatadescGeneratedNameHolder@@A
	call	??1CDatadescGeneratedNameHolder@@QAE@XZ	; CDatadescGeneratedNameHolder::~CDatadescGeneratedNameHolder
	pop	ebp
	ret	0
??__FnameHolder@?1???$DataMapInit@VCBaseAnimating@@@@YAPAUdatamap_s@@PAVCBaseAnimating@@@Z@YAXXZ ENDP ; `DataMapInit<CBaseAnimating>'::`2'::`dynamic atexit destructor for 'nameHolder''
text$yd	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xashxt_v0.81_rev.1_with_sources\xashxt_v0.81_rev.1_src\server\monsters\animating.cpp
;	COMDAT ??__Eg_DataMapHolder@CBaseAnimating_DataDescInit@@YAXXZ
text$di	SEGMENT
??__Eg_DataMapHolder@CBaseAnimating_DataDescInit@@YAXXZ PROC ; CBaseAnimating_DataDescInit::`dynamic initializer for 'g_DataMapHolder'', COMDAT

; 29   : BEGIN_DATADESC( CBaseAnimating )

	push	ebp
	mov	ebp, esp
	push	0
	call	??$DataMapInit@VCBaseAnimating@@@@YAPAUdatamap_s@@PAVCBaseAnimating@@@Z ; DataMapInit<CBaseAnimating>
	add	esp, 4
	mov	DWORD PTR ?g_DataMapHolder@CBaseAnimating_DataDescInit@@3PAUdatamap_s@@A, eax ; CBaseAnimating_DataDescInit::g_DataMapHolder
	pop	ebp
	ret	0
??__Eg_DataMapHolder@CBaseAnimating_DataDescInit@@YAXXZ ENDP ; CBaseAnimating_DataDescInit::`dynamic initializer for 'g_DataMapHolder''
text$di	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xashxt_v0.81_rev.1_with_sources\xashxt_v0.81_rev.1_src\server\monsters\animating.cpp
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
___formal$ = 8						; size = 4
??$DataMapInit@VCBaseAnimating@@@@YAPAUdatamap_s@@PAVCBaseAnimating@@@Z PROC ; DataMapInit<CBaseAnimating>

; 29   : BEGIN_DATADESC( CBaseAnimating )

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$DataMapInit@VCBaseAnimating@@@@YAPAUdatamap_s@@PAVCBaseAnimating@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	eax, DWORD PTR __tls_index
	mov	ecx, DWORD PTR fs:__tls_array
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR ?$TSS0@?1???$DataMapInit@VCBaseAnimating@@@@YAPAUdatamap_s@@PAVCBaseAnimating@@@Z@4HA
	cmp	eax, DWORD PTR __Init_thread_epoch[edx]
	jle	SHORT $LN2@DataMapIni
	push	OFFSET ?$TSS0@?1???$DataMapInit@VCBaseAnimating@@@@YAPAUdatamap_s@@PAVCBaseAnimating@@@Z@4HA
	call	__Init_thread_header
	add	esp, 4
	cmp	DWORD PTR ?$TSS0@?1???$DataMapInit@VCBaseAnimating@@@@YAPAUdatamap_s@@PAVCBaseAnimating@@@Z@4HA, -1
	jne	SHORT $LN2@DataMapIni
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	push	OFFSET $SG74468
	mov	ecx, OFFSET ?nameHolder@?1???$DataMapInit@VCBaseAnimating@@@@YAPAUdatamap_s@@PAVCBaseAnimating@@@Z@4VCDatadescGeneratedNameHolder@@A
	call	??0CDatadescGeneratedNameHolder@@QAE@PBD@Z ; CDatadescGeneratedNameHolder::CDatadescGeneratedNameHolder
	push	OFFSET ??__FnameHolder@?1???$DataMapInit@VCBaseAnimating@@@@YAPAUdatamap_s@@PAVCBaseAnimating@@@Z@YAXXZ ; `DataMapInit<CBaseAnimating>'::`2'::`dynamic atexit destructor for 'nameHolder''
	call	_atexit
	add	esp, 4
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	push	OFFSET ?$TSS0@?1???$DataMapInit@VCBaseAnimating@@@@YAPAUdatamap_s@@PAVCBaseAnimating@@@Z@4HA
	call	__Init_thread_footer
	add	esp, 4
$LN2@DataMapIni:
	call	?GetBaseMap@CBaseAnimating@@SAPAUdatamap_s@@XZ ; CBaseAnimating::GetBaseMap
	mov	DWORD PTR ?m_DataMap@CBaseAnimating@@2Udatamap_s@@A+12, eax

; 30   : 	DEFINE_FIELD( m_flFrameRate, FIELD_FLOAT ),
; 31   : 	DEFINE_FIELD( m_flGroundSpeed, FIELD_FLOAT ),
; 32   : 	DEFINE_FIELD( m_flLastEventCheck, FIELD_TIME ),
; 33   : 	DEFINE_FIELD( m_fSequenceFinished, FIELD_BOOLEAN ),
; 34   : 	DEFINE_FIELD( m_fSequenceLoops, FIELD_BOOLEAN ),
; 35   : END_DATADESC()

	mov	ecx, 1
	test	ecx, ecx
	je	SHORT $LN3@DataMapIni
	mov	DWORD PTR ?m_DataMap@CBaseAnimating@@2Udatamap_s@@A+4, 5
	mov	edx, 24					; 00000018H
	shl	edx, 0
	add	edx, OFFSET ?dataDesc@?1???$DataMapInit@VCBaseAnimating@@@@YAPAUdatamap_s@@PAVCBaseAnimating@@@Z@4PAUtypedescription_s@@A
	mov	DWORD PTR ?m_DataMap@CBaseAnimating@@2Udatamap_s@@A, edx
	jmp	SHORT $LN4@DataMapIni
$LN3@DataMapIni:
	mov	DWORD PTR ?m_DataMap@CBaseAnimating@@2Udatamap_s@@A+4, 1
	mov	DWORD PTR ?m_DataMap@CBaseAnimating@@2Udatamap_s@@A, OFFSET ?dataDesc@?1???$DataMapInit@VCBaseAnimating@@@@YAPAUdatamap_s@@PAVCBaseAnimating@@@Z@4PAUtypedescription_s@@A
$LN4@DataMapIni:
	mov	eax, OFFSET ?m_DataMap@CBaseAnimating@@2Udatamap_s@@A ; CBaseAnimating::m_DataMap
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$??$DataMapInit@VCBaseAnimating@@@@YAPAUdatamap_s@@PAVCBaseAnimating@@@Z$0:
	push	OFFSET ?$TSS0@?1???$DataMapInit@VCBaseAnimating@@@@YAPAUdatamap_s@@PAVCBaseAnimating@@@Z@4HA
	call	__Init_thread_abort
	pop	ecx
	ret	0
__ehhandler$??$DataMapInit@VCBaseAnimating@@@@YAPAUdatamap_s@@PAVCBaseAnimating@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-4]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$DataMapInit@VCBaseAnimating@@@@YAPAUdatamap_s@@PAVCBaseAnimating@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$DataMapInit@VCBaseAnimating@@@@YAPAUdatamap_s@@PAVCBaseAnimating@@@Z ENDP ; DataMapInit<CBaseAnimating>
; Function compile flags: /Odtp
; File c:\users\user\downloads\xashxt_v0.81_rev.1_with_sources\xashxt_v0.81_rev.1_src\common\datamap.h
;	COMDAT ??$DataMapAccess@VCBaseDelay@@@@YAXPAVCBaseDelay@@PAPAUdatamap_s@@@Z
_TEXT	SEGMENT
_ignored$ = 8						; size = 4
_p$ = 12						; size = 4
??$DataMapAccess@VCBaseDelay@@@@YAXPAVCBaseDelay@@PAPAUdatamap_s@@@Z PROC ; DataMapAccess<CBaseDelay>, COMDAT

; 182  : {

	push	ebp
	mov	ebp, esp

; 183  : 	*p = &T::m_DataMap;

	mov	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR [eax], OFFSET ?m_DataMap@CBaseDelay@@2Udatamap_s@@A ; CBaseDelay::m_DataMap

; 184  : }

	pop	ebp
	ret	0
??$DataMapAccess@VCBaseDelay@@@@YAXPAVCBaseDelay@@PAPAUdatamap_s@@@Z ENDP ; DataMapAccess<CBaseDelay>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xashxt_v0.81_rev.1_with_sources\xashxt_v0.81_rev.1_src\server\monsters\animating.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetDataDescMap@CBaseAnimating@@UAEPAUdatamap_s@@XZ PROC ; CBaseAnimating::GetDataDescMap
; _this$ = ecx

; 29   : BEGIN_DATADESC( CBaseAnimating )

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, OFFSET ?m_DataMap@CBaseAnimating@@2Udatamap_s@@A ; CBaseAnimating::m_DataMap
	mov	esp, ebp
	pop	ebp
	ret	0
?GetDataDescMap@CBaseAnimating@@UAEPAUdatamap_s@@XZ ENDP ; CBaseAnimating::GetDataDescMap
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xashxt_v0.81_rev.1_with_sources\xashxt_v0.81_rev.1_src\server\monsters\animating.cpp
_TEXT	SEGMENT
_pResult$ = -4						; size = 4
?GetBaseMap@CBaseAnimating@@SAPAUdatamap_s@@XZ PROC	; CBaseAnimating::GetBaseMap

; 29   : BEGIN_DATADESC( CBaseAnimating )

	push	ebp
	mov	ebp, esp
	push	ecx
	lea	eax, DWORD PTR _pResult$[ebp]
	push	eax
	push	0
	call	??$DataMapAccess@VCBaseDelay@@@@YAXPAVCBaseDelay@@PAPAUdatamap_s@@@Z ; DataMapAccess<CBaseDelay>
	add	esp, 8
	mov	eax, DWORD PTR _pResult$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetBaseMap@CBaseAnimating@@SAPAUdatamap_s@@XZ ENDP	; CBaseAnimating::GetBaseMap
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xashxt_v0.81_rev.1_with_sources\xashxt_v0.81_rev.1_src\server\monsters\animating.cpp
_TEXT	SEGMENT
_bounds$1 = -148					; size = 24
tv244 = -124						; size = 8
_yvector$2 = -116					; size = 12
_xvector$3 = -104					; size = 12
_maxs$ = -92						; size = 12
_mins$ = -80						; size = 12
_rmax$4 = -68						; size = 12
_base$5 = -56						; size = 12
_rmin$6 = -44						; size = 12
_this$ = -32						; size = 4
_k$7 = -28						; size = 4
_j$8 = -24						; size = 4
_i$9 = -20						; size = 4
_yaw$10 = -16						; size = 4
_transformed$11 = -12					; size = 12
?SetSequenceBox@CBaseAnimating@@QAEXXZ PROC		; CBaseAnimating::SetSequenceBox
; _this$ = ecx

; 367  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 148				; 00000094H
	mov	DWORD PTR _this$[ebp], ecx

; 368  : 	Vector mins, maxs;

	lea	ecx, DWORD PTR _mins$[ebp]
	call	??0Vector@@QAE@XZ			; Vector::Vector
	lea	ecx, DWORD PTR _maxs$[ebp]
	call	??0Vector@@QAE@XZ			; Vector::Vector

; 369  : 
; 370  : 	// Get sequence bbox
; 371  : 	if ( ExtractBbox( pev->sequence, mins, maxs ) )

	lea	eax, DWORD PTR _maxs$[ebp]
	push	eax
	lea	ecx, DWORD PTR _mins$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR [eax+296]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ExtractBbox@CBaseAnimating@@QAEHHAAVVector@@0@Z ; CBaseAnimating::ExtractBbox
	test	eax, eax
	je	$LN11@SetSequenc

; 372  : 	{
; 373  : 		// expand box for rotation
; 374  : 		// find min / max for rotations
; 375  : 		float yaw = GetAbsAngles().y * (M_PI / 180.0);

	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetAbsAngles@CBaseEntity@@QBEABVVector@@XZ ; CBaseEntity::GetAbsAngles
	cvtss2sd xmm0, DWORD PTR [eax+4]
	mulsd	xmm0, QWORD PTR __real@3f91df46a2529d39
	cvtsd2ss xmm0, xmm0
	movss	DWORD PTR _yaw$10[ebp], xmm0

; 376  : 		
; 377  : 		Vector xvector, yvector;

	lea	ecx, DWORD PTR _xvector$3[ebp]
	call	??0Vector@@QAE@XZ			; Vector::Vector
	lea	ecx, DWORD PTR _yvector$2[ebp]
	call	??0Vector@@QAE@XZ			; Vector::Vector

; 378  : 		xvector.x = cos(yaw);

	cvtss2sd xmm0, DWORD PTR _yaw$10[ebp]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	call	_cos
	add	esp, 8
	fstp	DWORD PTR _xvector$3[ebp]

; 379  : 		xvector.y = sin(yaw);

	cvtss2sd xmm0, DWORD PTR _yaw$10[ebp]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	call	_sin
	add	esp, 8
	fstp	DWORD PTR _xvector$3[ebp+4]

; 380  : 		yvector.x = -sin(yaw);

	cvtss2sd xmm0, DWORD PTR _yaw$10[ebp]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	call	_sin
	add	esp, 8
	fstp	QWORD PTR tv244[ebp]
	movsd	xmm0, QWORD PTR tv244[ebp]
	xorps	xmm0, QWORD PTR __xmm@80000000000000008000000000000000
	cvtsd2ss xmm0, xmm0
	movss	DWORD PTR _yvector$2[ebp], xmm0

; 381  : 		yvector.y = cos(yaw);

	cvtss2sd xmm0, DWORD PTR _yaw$10[ebp]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	call	_cos
	add	esp, 8
	fstp	DWORD PTR _yvector$2[ebp+4]

; 382  : 		Vector bounds[2];

	push	OFFSET ??0Vector@@QAE@XZ		; Vector::Vector
	push	2
	push	12					; 0000000cH
	lea	edx, DWORD PTR _bounds$1[ebp]
	push	edx
	call	??_H@YGXPAXIIP6EPAX0@Z@Z

; 383  : 
; 384  : 		bounds[0] = mins;

	mov	eax, 12					; 0000000cH
	imul	ecx, eax, 0
	lea	edx, DWORD PTR _bounds$1[ebp+ecx]
	mov	eax, DWORD PTR _mins$[ebp]
	mov	DWORD PTR [edx], eax
	mov	ecx, DWORD PTR _mins$[ebp+4]
	mov	DWORD PTR [edx+4], ecx
	mov	eax, DWORD PTR _mins$[ebp+8]
	mov	DWORD PTR [edx+8], eax

; 385  : 		bounds[1] = maxs;

	mov	ecx, 12					; 0000000cH
	shl	ecx, 0
	lea	edx, DWORD PTR _bounds$1[ebp+ecx]
	mov	eax, DWORD PTR _maxs$[ebp]
	mov	DWORD PTR [edx], eax
	mov	ecx, DWORD PTR _maxs$[ebp+4]
	mov	DWORD PTR [edx+4], ecx
	mov	eax, DWORD PTR _maxs$[ebp+8]
	mov	DWORD PTR [edx+8], eax

; 386  : 		
; 387  : 		Vector rmin( 9999, 9999, 9999 );

	push	ecx
	movss	xmm0, DWORD PTR __real@461c3c00
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@461c3c00
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@461c3c00
	movss	DWORD PTR [esp], xmm0
	lea	ecx, DWORD PTR _rmin$6[ebp]
	call	??0Vector@@QAE@MMM@Z			; Vector::Vector

; 388  : 		Vector rmax( -9999, -9999, -9999 );

	push	ecx
	movss	xmm0, DWORD PTR __real@c61c3c00
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@c61c3c00
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@c61c3c00
	movss	DWORD PTR [esp], xmm0
	lea	ecx, DWORD PTR _rmax$4[ebp]
	call	??0Vector@@QAE@MMM@Z			; Vector::Vector

; 389  : 		Vector base, transformed;

	lea	ecx, DWORD PTR _base$5[ebp]
	call	??0Vector@@QAE@XZ			; Vector::Vector
	lea	ecx, DWORD PTR _transformed$11[ebp]
	call	??0Vector@@QAE@XZ			; Vector::Vector

; 390  : 
; 391  : 		for (int i = 0; i <= 1; i++ )

	mov	DWORD PTR _i$9[ebp], 0
	jmp	SHORT $LN4@SetSequenc
$LN2@SetSequenc:
	mov	ecx, DWORD PTR _i$9[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$9[ebp], ecx
$LN4@SetSequenc:
	cmp	DWORD PTR _i$9[ebp], 1
	jg	$LN3@SetSequenc

; 392  : 		{
; 393  : 			base.x = bounds[i].x;

	imul	edx, DWORD PTR _i$9[ebp], 12
	movss	xmm0, DWORD PTR _bounds$1[ebp+edx]
	movss	DWORD PTR _base$5[ebp], xmm0

; 394  : 			for ( int j = 0; j <= 1; j++ )

	mov	DWORD PTR _j$8[ebp], 0
	jmp	SHORT $LN7@SetSequenc
$LN5@SetSequenc:
	mov	eax, DWORD PTR _j$8[ebp]
	add	eax, 1
	mov	DWORD PTR _j$8[ebp], eax
$LN7@SetSequenc:
	cmp	DWORD PTR _j$8[ebp], 1
	jg	$LN6@SetSequenc

; 395  : 			{
; 396  : 				base.y = bounds[j].y;

	imul	ecx, DWORD PTR _j$8[ebp], 12
	movss	xmm0, DWORD PTR _bounds$1[ebp+ecx+4]
	movss	DWORD PTR _base$5[ebp+4], xmm0

; 397  : 				for ( int k = 0; k <= 1; k++ )

	mov	DWORD PTR _k$7[ebp], 0
	jmp	SHORT $LN10@SetSequenc
$LN8@SetSequenc:
	mov	edx, DWORD PTR _k$7[ebp]
	add	edx, 1
	mov	DWORD PTR _k$7[ebp], edx
$LN10@SetSequenc:
	cmp	DWORD PTR _k$7[ebp], 1
	jg	$LN9@SetSequenc

; 398  : 				{
; 399  : 					base.z = bounds[k].z;

	imul	eax, DWORD PTR _k$7[ebp], 12
	movss	xmm0, DWORD PTR _bounds$1[ebp+eax+8]
	movss	DWORD PTR _base$5[ebp+8], xmm0

; 400  : 					
; 401  : 				// transform the point
; 402  : 					transformed.x = xvector.x*base.x + yvector.x*base.y;

	movss	xmm0, DWORD PTR _xvector$3[ebp]
	mulss	xmm0, DWORD PTR _base$5[ebp]
	movss	xmm1, DWORD PTR _yvector$2[ebp]
	mulss	xmm1, DWORD PTR _base$5[ebp+4]
	addss	xmm0, xmm1
	movss	DWORD PTR _transformed$11[ebp], xmm0

; 403  : 					transformed.y = xvector.y*base.x + yvector.y*base.y;

	movss	xmm0, DWORD PTR _xvector$3[ebp+4]
	mulss	xmm0, DWORD PTR _base$5[ebp]
	movss	xmm1, DWORD PTR _yvector$2[ebp+4]
	mulss	xmm1, DWORD PTR _base$5[ebp+4]
	addss	xmm0, xmm1
	movss	DWORD PTR _transformed$11[ebp+4], xmm0

; 404  : 					transformed.z = base.z;

	movss	xmm0, DWORD PTR _base$5[ebp+8]
	movss	DWORD PTR _transformed$11[ebp+8], xmm0

; 405  : 					
; 406  : 					if (transformed.x < rmin.x)

	movss	xmm0, DWORD PTR _rmin$6[ebp]
	comiss	xmm0, DWORD PTR _transformed$11[ebp]
	jbe	SHORT $LN12@SetSequenc

; 407  : 						rmin.x = transformed.x;

	movss	xmm0, DWORD PTR _transformed$11[ebp]
	movss	DWORD PTR _rmin$6[ebp], xmm0
$LN12@SetSequenc:

; 408  : 					if (transformed.x > rmax.x)

	movss	xmm0, DWORD PTR _transformed$11[ebp]
	comiss	xmm0, DWORD PTR _rmax$4[ebp]
	jbe	SHORT $LN13@SetSequenc

; 409  : 						rmax.x = transformed.x;

	movss	xmm0, DWORD PTR _transformed$11[ebp]
	movss	DWORD PTR _rmax$4[ebp], xmm0
$LN13@SetSequenc:

; 410  : 					if (transformed.y < rmin.y)

	movss	xmm0, DWORD PTR _rmin$6[ebp+4]
	comiss	xmm0, DWORD PTR _transformed$11[ebp+4]
	jbe	SHORT $LN14@SetSequenc

; 411  : 						rmin.y = transformed.y;

	movss	xmm0, DWORD PTR _transformed$11[ebp+4]
	movss	DWORD PTR _rmin$6[ebp+4], xmm0
$LN14@SetSequenc:

; 412  : 					if (transformed.y > rmax.y)

	movss	xmm0, DWORD PTR _transformed$11[ebp+4]
	comiss	xmm0, DWORD PTR _rmax$4[ebp+4]
	jbe	SHORT $LN15@SetSequenc

; 413  : 						rmax.y = transformed.y;

	movss	xmm0, DWORD PTR _transformed$11[ebp+4]
	movss	DWORD PTR _rmax$4[ebp+4], xmm0
$LN15@SetSequenc:

; 414  : 					if (transformed.z < rmin.z)

	movss	xmm0, DWORD PTR _rmin$6[ebp+8]
	comiss	xmm0, DWORD PTR _transformed$11[ebp+8]
	jbe	SHORT $LN16@SetSequenc

; 415  : 						rmin.z = transformed.z;

	movss	xmm0, DWORD PTR _transformed$11[ebp+8]
	movss	DWORD PTR _rmin$6[ebp+8], xmm0
$LN16@SetSequenc:

; 416  : 					if (transformed.z > rmax.z)

	movss	xmm0, DWORD PTR _transformed$11[ebp+8]
	comiss	xmm0, DWORD PTR _rmax$4[ebp+8]
	jbe	SHORT $LN17@SetSequenc

; 417  : 						rmax.z = transformed.z;

	movss	xmm0, DWORD PTR _transformed$11[ebp+8]
	movss	DWORD PTR _rmax$4[ebp+8], xmm0
$LN17@SetSequenc:

; 418  : 				}

	jmp	$LN8@SetSequenc
$LN9@SetSequenc:

; 419  : 			}

	jmp	$LN5@SetSequenc
$LN6@SetSequenc:

; 420  : 		}

	jmp	$LN2@SetSequenc
$LN3@SetSequenc:

; 421  : 		rmin.z = 0;

	xorps	xmm0, xmm0
	movss	DWORD PTR _rmin$6[ebp+8], xmm0

; 422  : 		rmax.z = rmin.z + 1;

	movss	xmm0, DWORD PTR _rmin$6[ebp+8]
	addss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR _rmax$4[ebp+8], xmm0

; 423  : 		UTIL_SetSize( pev, rmin, rmax );

	lea	ecx, DWORD PTR _rmax$4[ebp]
	push	ecx
	lea	edx, DWORD PTR _rmin$6[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	call	?UTIL_SetSize@@YAXPAUentvars_s@@ABVVector@@1@Z ; UTIL_SetSize
	add	esp, 12					; 0000000cH
$LN11@SetSequenc:

; 424  : 	}
; 425  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?SetSequenceBox@CBaseAnimating@@QAEXXZ ENDP		; CBaseAnimating::SetSequenceBox
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xashxt_v0.81_rev.1_with_sources\xashxt_v0.81_rev.1_src\server\monsters\animating.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
_sequence$ = 8						; size = 4
_mins$ = 12						; size = 4
_maxs$ = 16						; size = 4
?ExtractBbox@CBaseAnimating@@QAEHHAAVVector@@0@Z PROC	; CBaseAnimating::ExtractBbox
; _this$ = ecx

; 359  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 360  : 	return ::ExtractBbox( GET_MODEL_PTR( ENT(pev) ), sequence, mins, maxs );

	mov	eax, DWORD PTR _maxs$[ebp]
	push	eax
	mov	ecx, DWORD PTR _mins$[ebp]
	push	ecx
	mov	edx, DWORD PTR _sequence$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	call	?ENT@@YAPAUedict_s@@PBUentvars_s@@@Z	; ENT
	add	esp, 4
	push	eax
	call	DWORD PTR ?g_engfuncs@@3Uenginefuncs_s@@A+296
	add	esp, 4
	push	eax
	call	?ExtractBbox@@YAHPAXHAAVVector@@1@Z	; ExtractBbox
	add	esp, 16					; 00000010H

; 361  : }

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?ExtractBbox@CBaseAnimating@@QAEHHAAVVector@@0@Z ENDP	; CBaseAnimating::ExtractBbox
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xashxt_v0.81_rev.1_with_sources\xashxt_v0.81_rev.1_src\server\monsters\animating.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
_iGroup$ = 8						; size = 4
?GetBodygroup@CBaseAnimating@@QAEHH@Z PROC		; CBaseAnimating::GetBodygroup
; _this$ = ecx

; 353  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 354  : 	return ::GetBodygroup( GET_MODEL_PTR( ENT(pev) ), pev->body, iGroup );

	mov	eax, DWORD PTR _iGroup$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR [edx+276]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	call	?ENT@@YAPAUedict_s@@PBUentvars_s@@@Z	; ENT
	add	esp, 4
	push	eax
	call	DWORD PTR ?g_engfuncs@@3Uenginefuncs_s@@A+296
	add	esp, 4
	push	eax
	call	?GetBodygroup@@YAHPAXHH@Z		; GetBodygroup
	add	esp, 12					; 0000000cH

; 355  : }

	mov	esp, ebp
	pop	ebp
	ret	4
?GetBodygroup@CBaseAnimating@@QAEHH@Z ENDP		; CBaseAnimating::GetBodygroup
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xashxt_v0.81_rev.1_with_sources\xashxt_v0.81_rev.1_src\server\monsters\animating.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
_iGroup$ = 8						; size = 4
_iValue$ = 12						; size = 4
?SetBodygroup@CBaseAnimating@@QAEXHH@Z PROC		; CBaseAnimating::SetBodygroup
; _this$ = ecx

; 348  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 349  : 	::SetBodygroup( GET_MODEL_PTR( ENT(pev) ), pev->body, iGroup, iValue );

	mov	eax, DWORD PTR _iValue$[ebp]
	push	eax
	mov	ecx, DWORD PTR _iGroup$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	add	eax, 276				; 00000114H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	call	?ENT@@YAPAUedict_s@@PBUentvars_s@@@Z	; ENT
	add	esp, 4
	push	eax
	call	DWORD PTR ?g_engfuncs@@3Uenginefuncs_s@@A+296
	add	esp, 4
	push	eax
	call	?SetBodygroup@@YAXPAXAAHHH@Z		; SetBodygroup
	add	esp, 16					; 00000010H

; 350  : }

	mov	esp, ebp
	pop	ebp
	ret	8
?SetBodygroup@CBaseAnimating@@QAEXHH@Z ENDP		; CBaseAnimating::SetBodygroup
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xashxt_v0.81_rev.1_with_sources\xashxt_v0.81_rev.1_src\server\monsters\animating.cpp
_TEXT	SEGMENT
$T1 = -84						; size = 12
_this$ = -72						; size = 4
_parentSpace$2 = -68					; size = 64
__$ArrayPad$ = -4					; size = 4
_iAttachment$ = 8					; size = 4
_origin$ = 12						; size = 4
_angles$ = 16						; size = 4
?GetAttachment@CBaseAnimating@@QAEXHAAVVector@@0@Z PROC	; CBaseAnimating::GetAttachment
; _this$ = ecx

; 311  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 84					; 00000054H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	DWORD PTR _this$[ebp], ecx

; 312  : 	GET_ATTACHMENT( ENT(pev), iAttachment, origin, angles );

	mov	ecx, DWORD PTR _angles$[ebp]
	call	??BVector@@QAEPAMXZ			; Vector::operator float *
	push	eax
	mov	ecx, DWORD PTR _origin$[ebp]
	call	??BVector@@QAEPAMXZ			; Vector::operator float *
	push	eax
	mov	eax, DWORD PTR _iAttachment$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	call	?ENT@@YAPAUedict_s@@PBUentvars_s@@@Z	; ENT
	add	esp, 4
	push	eax
	call	DWORD PTR ?g_engfuncs@@3Uenginefuncs_s@@A+340
	add	esp, 16					; 00000010H

; 313  : 
; 314  : 	if( m_hParent != NULL )

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 148				; 00000094H
	call	??BEHANDLE@@QAEHXZ			; EHANDLE::operator int
	test	eax, eax
	je	SHORT $LN1@GetAttachm

; 315  : 	{
; 316  : 		matrix4x4 parentSpace = GetParentToWorldTransform();

	lea	eax, DWORD PTR _parentSpace$2[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetParentToWorldTransform@CBaseEntity@@QAE?AVmatrix4x4@@XZ ; CBaseEntity::GetParentToWorldTransform

; 317  : 		origin = parentSpace.VectorITransform( origin );

	mov	ecx, DWORD PTR _origin$[ebp]
	push	ecx
	lea	edx, DWORD PTR $T1[ebp]
	push	edx
	lea	ecx, DWORD PTR _parentSpace$2[ebp]
	call	?VectorITransform@matrix4x4@@QBE?AVVector@@ABV2@@Z ; matrix4x4::VectorITransform
	mov	ecx, DWORD PTR _origin$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	eax, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], eax
$LN1@GetAttachm:

; 318  : 	}
; 319  : }

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?GetAttachment@CBaseAnimating@@QAEXHAAVVector@@0@Z ENDP	; CBaseAnimating::GetAttachment
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xashxt_v0.81_rev.1_with_sources\xashxt_v0.81_rev.1_src\server\monsters\animating.cpp
_TEXT	SEGMENT
_sequence$1 = -16					; size = 4
_iDir$2 = -12						; size = 4
_this$ = -8						; size = 4
_pmodel$ = -4						; size = 4
_iEndingSequence$ = 8					; size = 4
_iGoalSequence$ = 12					; size = 4
_piDir$ = 16						; size = 4
?FindTransition@CBaseAnimating@@QAEHHHPAH@Z PROC	; CBaseAnimating::FindTransition
; _this$ = ecx

; 324  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx

; 325  : 	void *pmodel = GET_MODEL_PTR( ENT(pev) );

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	call	?ENT@@YAPAUedict_s@@PBUentvars_s@@@Z	; ENT
	add	esp, 4
	push	eax
	call	DWORD PTR ?g_engfuncs@@3Uenginefuncs_s@@A+296
	add	esp, 4
	mov	DWORD PTR _pmodel$[ebp], eax

; 326  : 	
; 327  : 	if (piDir == NULL)

	cmp	DWORD PTR _piDir$[ebp], 0
	jne	SHORT $LN2@FindTransi

; 328  : 	{
; 329  : 		int iDir;
; 330  : 		int sequence = ::FindTransition( pmodel, iEndingSequence, iGoalSequence, &iDir );

	lea	edx, DWORD PTR _iDir$2[ebp]
	push	edx
	mov	eax, DWORD PTR _iGoalSequence$[ebp]
	push	eax
	mov	ecx, DWORD PTR _iEndingSequence$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pmodel$[ebp]
	push	edx
	call	?FindTransition@@YAHPAXHHPAH@Z		; FindTransition
	add	esp, 16					; 00000010H
	mov	DWORD PTR _sequence$1[ebp], eax

; 331  : 		if (iDir != 1)

	cmp	DWORD PTR _iDir$2[ebp], 1
	je	SHORT $LN3@FindTransi

; 332  : 			return -1;

	or	eax, -1
	jmp	SHORT $LN1@FindTransi

; 333  : 		else

	jmp	SHORT $LN2@FindTransi
$LN3@FindTransi:

; 334  : 			return sequence;

	mov	eax, DWORD PTR _sequence$1[ebp]
	jmp	SHORT $LN1@FindTransi
$LN2@FindTransi:

; 335  : 	}
; 336  : 
; 337  : 	return ::FindTransition( pmodel, iEndingSequence, iGoalSequence, piDir );

	mov	eax, DWORD PTR _piDir$[ebp]
	push	eax
	mov	ecx, DWORD PTR _iGoalSequence$[ebp]
	push	ecx
	mov	edx, DWORD PTR _iEndingSequence$[ebp]
	push	edx
	mov	eax, DWORD PTR _pmodel$[ebp]
	push	eax
	call	?FindTransition@@YAHPAXHHPAH@Z		; FindTransition
	add	esp, 16					; 00000010H
$LN1@FindTransi:

; 338  : }

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?FindTransition@CBaseAnimating@@QAEHHHPAH@Z ENDP	; CBaseAnimating::FindTransition
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xashxt_v0.81_rev.1_with_sources\xashxt_v0.81_rev.1_src\server\monsters\animating.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
_origin$ = 8						; size = 4
_angles$ = 12						; size = 4
_flInterval$ = 16					; size = 4
?GetAutomovement@CBaseAnimating@@QAEXAAVVector@@0M@Z PROC ; CBaseAnimating::GetAutomovement
; _this$ = ecx

; 343  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 344  : 
; 345  : }

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?GetAutomovement@CBaseAnimating@@QAEXAAVVector@@0M@Z ENDP ; CBaseAnimating::GetAutomovement
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xashxt_v0.81_rev.1_with_sources\xashxt_v0.81_rev.1_src\server\monsters\animating.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
_iBone$ = 8						; size = 4
_origin$ = 12						; size = 4
_angles$ = 16						; size = 4
?GetBonePosition@CBaseAnimating@@QAEXHAAVVector@@0@Z PROC ; CBaseAnimating::GetBonePosition
; _this$ = ecx

; 304  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 305  : 	GET_BONE_POSITION( ENT(pev), iBone, origin, angles );

	mov	ecx, DWORD PTR _angles$[ebp]
	call	??BVector@@QAEPAMXZ			; Vector::operator float *
	push	eax
	mov	ecx, DWORD PTR _origin$[ebp]
	call	??BVector@@QAEPAMXZ			; Vector::operator float *
	push	eax
	mov	eax, DWORD PTR _iBone$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	call	?ENT@@YAPAUedict_s@@PBUentvars_s@@@Z	; ENT
	add	esp, 4
	push	eax
	call	DWORD PTR ?g_engfuncs@@3Uenginefuncs_s@@A+308
	add	esp, 16					; 00000010H

; 306  : }

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?GetBonePosition@CBaseAnimating@@QAEXHAAVVector@@0@Z ENDP ; CBaseAnimating::GetBonePosition
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xashxt_v0.81_rev.1_with_sources\xashxt_v0.81_rev.1_src\server\monsters\animating.cpp
_TEXT	SEGMENT
_pmodel$ = -8						; size = 4
_this$ = -4						; size = 4
_iBlender$ = 8						; size = 4
_flValue$ = 12						; size = 4
?SetBlending@CBaseAnimating@@QAEMHM@Z PROC		; CBaseAnimating::SetBlending
; _this$ = ecx

; 295  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 296  : 	void *pmodel = GET_MODEL_PTR( ENT(pev) );

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	call	?ENT@@YAPAUedict_s@@PBUentvars_s@@@Z	; ENT
	add	esp, 4
	push	eax
	call	DWORD PTR ?g_engfuncs@@3Uenginefuncs_s@@A+296
	add	esp, 4
	mov	DWORD PTR _pmodel$[ebp], eax

; 297  : 
; 298  : 	return ::SetBlending( pmodel, pev->sequence, pev->blending, iBlender, flValue );

	push	ecx
	movss	xmm0, DWORD PTR _flValue$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _iBlender$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, 320				; 00000140H
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR [eax+296]
	push	ecx
	mov	edx, DWORD PTR _pmodel$[ebp]
	push	edx
	call	?SetBlending@@YAMPAXHPAEHM@Z		; SetBlending
	add	esp, 20					; 00000014H

; 299  : }

	mov	esp, ebp
	pop	ebp
	ret	8
?SetBlending@CBaseAnimating@@QAEMHM@Z ENDP		; CBaseAnimating::SetBlending
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xashxt_v0.81_rev.1_with_sources\xashxt_v0.81_rev.1_src\server\monsters\animating.cpp
_TEXT	SEGMENT
_pmodel$ = -8						; size = 4
_this$ = -4						; size = 4
?InitBoneControllers@CBaseAnimating@@QAEXXZ PROC	; CBaseAnimating::InitBoneControllers
; _this$ = ecx

; 283  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 284  : 	void *pmodel = GET_MODEL_PTR( ENT(pev) );

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	call	?ENT@@YAPAUedict_s@@PBUentvars_s@@@Z	; ENT
	add	esp, 4
	push	eax
	call	DWORD PTR ?g_engfuncs@@3Uenginefuncs_s@@A+296
	add	esp, 4
	mov	DWORD PTR _pmodel$[ebp], eax

; 285  : 
; 286  : 	SetController( pmodel, pev->controller, 0, 0.0 );

	push	ecx
	xorps	xmm0, xmm0
	movss	DWORD PTR [esp], xmm0
	push	0
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	add	eax, 316				; 0000013cH
	push	eax
	mov	ecx, DWORD PTR _pmodel$[ebp]
	push	ecx
	call	?SetController@@YAMPAXPAEHM@Z		; SetController
	fstp	ST(0)

; 287  : 	SetController( pmodel, pev->controller, 1, 0.0 );

	add	esp, 12					; 0000000cH
	xorps	xmm0, xmm0
	movss	DWORD PTR [esp], xmm0
	push	1
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	add	eax, 316				; 0000013cH
	push	eax
	mov	ecx, DWORD PTR _pmodel$[ebp]
	push	ecx
	call	?SetController@@YAMPAXPAEHM@Z		; SetController
	fstp	ST(0)

; 288  : 	SetController( pmodel, pev->controller, 2, 0.0 );

	add	esp, 12					; 0000000cH
	xorps	xmm0, xmm0
	movss	DWORD PTR [esp], xmm0
	push	2
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	add	eax, 316				; 0000013cH
	push	eax
	mov	ecx, DWORD PTR _pmodel$[ebp]
	push	ecx
	call	?SetController@@YAMPAXPAEHM@Z		; SetController
	fstp	ST(0)

; 289  : 	SetController( pmodel, pev->controller, 3, 0.0 );

	add	esp, 12					; 0000000cH
	xorps	xmm0, xmm0
	movss	DWORD PTR [esp], xmm0
	push	3
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	add	eax, 316				; 0000013cH
	push	eax
	mov	ecx, DWORD PTR _pmodel$[ebp]
	push	ecx
	call	?SetController@@YAMPAXPAEHM@Z		; SetController
	fstp	ST(0)
	add	esp, 16					; 00000010H

; 290  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?InitBoneControllers@CBaseAnimating@@QAEXXZ ENDP	; CBaseAnimating::InitBoneControllers
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xashxt_v0.81_rev.1_with_sources\xashxt_v0.81_rev.1_src\server\monsters\animating.cpp
_TEXT	SEGMENT
_pmodel$ = -8						; size = 4
_this$ = -4						; size = 4
_iController$ = 8					; size = 4
_flValue$ = 12						; size = 4
?SetBoneController@CBaseAnimating@@QAEMHM@Z PROC	; CBaseAnimating::SetBoneController
; _this$ = ecx

; 274  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 275  : 	void *pmodel = GET_MODEL_PTR( ENT(pev) );

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	call	?ENT@@YAPAUedict_s@@PBUentvars_s@@@Z	; ENT
	add	esp, 4
	push	eax
	call	DWORD PTR ?g_engfuncs@@3Uenginefuncs_s@@A+296
	add	esp, 4
	mov	DWORD PTR _pmodel$[ebp], eax

; 276  : 
; 277  : 	return SetController( pmodel, pev->controller, iController, flValue );

	push	ecx
	movss	xmm0, DWORD PTR _flValue$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _iController$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, 316				; 0000013cH
	push	ecx
	mov	edx, DWORD PTR _pmodel$[ebp]
	push	edx
	call	?SetController@@YAMPAXPAEHM@Z		; SetController
	add	esp, 16					; 00000010H

; 278  : }

	mov	esp, ebp
	pop	ebp
	ret	8
?SetBoneController@CBaseAnimating@@QAEMHM@Z ENDP	; CBaseAnimating::SetBoneController
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xashxt_v0.81_rev.1_with_sources\xashxt_v0.81_rev.1_src\server\monsters\animating.cpp
_TEXT	SEGMENT
_event$ = -28						; size = 8
_flStart$ = -20						; size = 4
_pmodel$ = -16						; size = 4
_index$ = -12						; size = 4
_flEnd$ = -8						; size = 4
_this$ = -4						; size = 4
_flInterval$ = 8					; size = 4
?DispatchAnimEvents@CBaseAnimating@@QAEXM@Z PROC	; CBaseAnimating::DispatchAnimEvents
; _this$ = ecx

; 239  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH
	mov	DWORD PTR _this$[ebp], ecx

; 240  : 	MonsterEvent_t	event;
; 241  : 
; 242  : 	void *pmodel = GET_MODEL_PTR( ENT(pev) );

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	call	?ENT@@YAPAUedict_s@@PBUentvars_s@@@Z	; ENT
	add	esp, 4
	push	eax
	call	DWORD PTR ?g_engfuncs@@3Uenginefuncs_s@@A+296
	add	esp, 4
	mov	DWORD PTR _pmodel$[ebp], eax

; 243  : 
; 244  : 	if ( !pmodel )

	cmp	DWORD PTR _pmodel$[ebp], 0
	jne	SHORT $LN4@DispatchAn

; 245  : 	{
; 246  : 		ALERT( at_aiconsole, "Gibbed monster is thinking!\n" );

	push	OFFSET $SG74565
	push	2
	call	DWORD PTR ?g_engfuncs@@3Uenginefuncs_s@@A+244
	add	esp, 8

; 247  : 		return;

	jmp	$LN1@DispatchAn
$LN4@DispatchAn:

; 248  : 	}
; 249  : 
; 250  : 	// FIXME: I have to do this or some events get missed, and this is probably causing the problem below
; 251  : 	flInterval = 0.1;

	movss	xmm0, DWORD PTR __real@3dcccccd
	movss	DWORD PTR _flInterval$[ebp], xmm0

; 252  : 
; 253  : 	// FIX: this still sometimes hits events twice
; 254  : 	float flStart = pev->frame + (m_flLastEventCheck - pev->animtime) * m_flFrameRate * pev->framerate;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+1688]
	subss	xmm0, DWORD PTR [edx+308]
	mov	edx, DWORD PTR _this$[ebp]
	mulss	xmm0, DWORD PTR [edx+1680]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mulss	xmm0, DWORD PTR [edx+312]
	addss	xmm0, DWORD PTR [eax+304]
	movss	DWORD PTR _flStart$[ebp], xmm0

; 255  : 	float flEnd = pev->frame + flInterval * m_flFrameRate * pev->framerate;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _flInterval$[ebp]
	mulss	xmm0, DWORD PTR [edx+1680]
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+4]
	mulss	xmm0, DWORD PTR [edx+312]
	addss	xmm0, DWORD PTR [ecx+304]
	movss	DWORD PTR _flEnd$[ebp], xmm0

; 256  : 	m_flLastEventCheck = pev->animtime + flInterval;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	movss	xmm0, DWORD PTR [ecx+308]
	addss	xmm0, DWORD PTR _flInterval$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [edx+1688], xmm0

; 257  : 
; 258  : 	m_fSequenceFinished = FALSE;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+1692], 0

; 259  : 	if (flEnd >= 256 || flEnd <= 0.0) 

	movss	xmm0, DWORD PTR _flEnd$[ebp]
	comiss	xmm0, DWORD PTR __real@43800000
	jae	SHORT $LN6@DispatchAn
	cvtss2sd xmm0, DWORD PTR _flEnd$[ebp]
	xorps	xmm1, xmm1
	comisd	xmm1, xmm0
	jb	SHORT $LN5@DispatchAn
$LN6@DispatchAn:

; 260  : 		m_fSequenceFinished = TRUE;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+1692], 1
$LN5@DispatchAn:

; 261  : 
; 262  : 	int index = 0;

	mov	DWORD PTR _index$[ebp], 0
$LN2@DispatchAn:

; 263  : 
; 264  : 	while ( (index = GetAnimationEvent( pmodel, pev->sequence, &event, flStart, flEnd, index ) ) != 0 )

	mov	edx, DWORD PTR _index$[ebp]
	push	edx
	push	ecx
	movss	xmm0, DWORD PTR _flEnd$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _flStart$[ebp]
	movss	DWORD PTR [esp], xmm0
	lea	eax, DWORD PTR _event$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR [edx+296]
	push	eax
	mov	ecx, DWORD PTR _pmodel$[ebp]
	push	ecx
	call	?GetAnimationEvent@@YAHPAXHPAUMonsterEvent_t@@MMH@Z ; GetAnimationEvent
	add	esp, 24					; 00000018H
	mov	DWORD PTR _index$[ebp], eax
	cmp	DWORD PTR _index$[ebp], 0
	je	SHORT $LN3@DispatchAn

; 265  : 	{
; 266  : 		HandleAnimEvent( &event );

	lea	edx, DWORD PTR _event$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+336]
	call	eax

; 267  : 	}

	jmp	SHORT $LN2@DispatchAn
$LN3@DispatchAn:
$LN1@DispatchAn:

; 268  : }

	mov	esp, ebp
	pop	ebp
	ret	4
?DispatchAnimEvents@CBaseAnimating@@QAEXM@Z ENDP	; CBaseAnimating::DispatchAnimEvents
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xashxt_v0.81_rev.1_with_sources\xashxt_v0.81_rev.1_src\server\monsters\animating.cpp
_TEXT	SEGMENT
_pmodel$ = -12						; size = 4
tv90 = -8						; size = 4
_this$ = -4						; size = 4
?ResetSequenceInfo@CBaseAnimating@@QAEXXZ PROC		; CBaseAnimating::ResetSequenceInfo
; _this$ = ecx

; 213  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 214  : 	void *pmodel = GET_MODEL_PTR( ENT(pev) );

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	call	?ENT@@YAPAUedict_s@@PBUentvars_s@@@Z	; ENT
	add	esp, 4
	push	eax
	call	DWORD PTR ?g_engfuncs@@3Uenginefuncs_s@@A+296
	add	esp, 4
	mov	DWORD PTR _pmodel$[ebp], eax

; 215  : 
; 216  : 	GetSequenceInfo( pmodel, pev->sequence, &m_flFrameRate, &m_flGroundSpeed );

	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 1684				; 00000694H
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 1680				; 00000690H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR [edx+296]
	push	eax
	mov	ecx, DWORD PTR _pmodel$[ebp]
	push	ecx
	call	?GetSequenceInfo@@YAXPAXHPAM1@Z		; GetSequenceInfo
	add	esp, 16					; 00000010H

; 217  : 	m_fSequenceLoops = ((GetSequenceFlags() & STUDIO_LOOPING) != 0);

	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetSequenceFlags@CBaseAnimating@@QAEHXZ ; CBaseAnimating::GetSequenceFlags
	and	eax, 1
	je	SHORT $LN3@ResetSeque
	mov	DWORD PTR tv90[ebp], 1
	jmp	SHORT $LN4@ResetSeque
$LN3@ResetSeque:
	mov	DWORD PTR tv90[ebp], 0
$LN4@ResetSeque:
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR tv90[ebp]
	mov	DWORD PTR [edx+1696], eax

; 218  : 	pev->animtime = gpGlobals->time;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR ?gpGlobals@@3PAUglobalvars_t@@A ; gpGlobals
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR [edx+308], ecx

; 219  : 	pev->framerate = 1.0;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [eax+312], xmm0

; 220  : 	m_fSequenceFinished = FALSE;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+1692], 0

; 221  : 	m_flLastEventCheck = gpGlobals->time;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR ?gpGlobals@@3PAUglobalvars_t@@A ; gpGlobals
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR [edx+1688], ecx

; 222  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?ResetSequenceInfo@CBaseAnimating@@QAEXXZ ENDP		; CBaseAnimating::ResetSequenceInfo
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xashxt_v0.81_rev.1_with_sources\xashxt_v0.81_rev.1_src\server\monsters\animating.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetModelPtr@CBaseAnimating@@QAEPAXXZ PROC		; CBaseAnimating::GetModelPtr
; _this$ = ecx

; 38   : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 39   : 	return GET_MODEL_PTR( edict() );

	mov	ecx, DWORD PTR _this$[ebp]
	call	?edict@CBaseEntity@@QAEPAUedict_s@@XZ	; CBaseEntity::edict
	push	eax
	call	DWORD PTR ?g_engfuncs@@3Uenginefuncs_s@@A+296
	add	esp, 4

; 40   : }

	mov	esp, ebp
	pop	ebp
	ret	0
?GetModelPtr@CBaseAnimating@@QAEPAXXZ ENDP		; CBaseAnimating::GetModelPtr
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xashxt_v0.81_rev.1_with_sources\xashxt_v0.81_rev.1_src\server\monsters\animating.cpp
_TEXT	SEGMENT
_mod$ = -4						; size = 4
_modelindex$ = 8					; size = 4
?GetModelPtr@CBaseAnimating@@SAPAXH@Z PROC		; CBaseAnimating::GetModelPtr

; 43   : {

	push	ebp
	mov	ebp, esp
	push	ecx

; 44   : 	if( !g_fPhysicInitialized || modelindex <= 1 )

	cmp	DWORD PTR ?g_fPhysicInitialized@@3HA, 0	; g_fPhysicInitialized
	je	SHORT $LN3@GetModelPt
	cmp	DWORD PTR _modelindex$[ebp], 1
	jg	SHORT $LN2@GetModelPt
$LN3@GetModelPt:

; 45   : 		return NULL;

	xor	eax, eax
	jmp	SHORT $LN1@GetModelPt
$LN2@GetModelPt:

; 46   : 
; 47   : 	model_t *mod = (model_t *)MODEL_HANDLE( modelindex );

	mov	eax, DWORD PTR _modelindex$[ebp]
	push	eax
	call	DWORD PTR ?g_physfuncs@@3Userver_physics_api_s@@A+12
	add	esp, 4
	mov	DWORD PTR _mod$[ebp], eax

; 48   : 
; 49   : 	if( mod && mod->type == mod_studio )

	cmp	DWORD PTR _mod$[ebp], 0
	je	SHORT $LN4@GetModelPt
	mov	ecx, DWORD PTR _mod$[ebp]
	cmp	DWORD PTR [ecx+68], 3
	jne	SHORT $LN4@GetModelPt

; 50   : 		return mod->cache.data;

	mov	edx, DWORD PTR _mod$[ebp]
	mov	eax, DWORD PTR [edx+388]
	jmp	SHORT $LN1@GetModelPt
$LN4@GetModelPt:

; 51   : 	return NULL;

	xor	eax, eax
$LN1@GetModelPt:

; 52   : }

	mov	esp, ebp
	pop	ebp
	ret	0
?GetModelPtr@CBaseAnimating@@SAPAXH@Z ENDP		; CBaseAnimating::GetModelPtr
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xashxt_v0.81_rev.1_with_sources\xashxt_v0.81_rev.1_src\server\monsters\animating.cpp
_TEXT	SEGMENT
_pmodel$ = -8						; size = 4
_this$ = -4						; size = 4
_label$ = 8						; size = 4
?LookupSequence@CBaseAnimating@@QAEHPBD@Z PROC		; CBaseAnimating::LookupSequence
; _this$ = ecx

; 203  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 204  : 	void *pmodel = GET_MODEL_PTR( ENT(pev) );

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	call	?ENT@@YAPAUedict_s@@PBUentvars_s@@@Z	; ENT
	add	esp, 4
	push	eax
	call	DWORD PTR ?g_engfuncs@@3Uenginefuncs_s@@A+296
	add	esp, 4
	mov	DWORD PTR _pmodel$[ebp], eax

; 205  : 
; 206  : 	return ::LookupSequence( pmodel, label );

	mov	edx, DWORD PTR _label$[ebp]
	push	edx
	mov	eax, DWORD PTR _pmodel$[ebp]
	push	eax
	call	?LookupSequence@@YAHPAXPBD@Z		; LookupSequence
	add	esp, 8

; 207  : }

	mov	esp, ebp
	pop	ebp
	ret	4
?LookupSequence@CBaseAnimating@@QAEHPBD@Z ENDP		; CBaseAnimating::LookupSequence
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xashxt_v0.81_rev.1_with_sources\xashxt_v0.81_rev.1_src\server\monsters\animating.cpp
_TEXT	SEGMENT
_pmodel$ = -8						; size = 4
_this$ = -4						; size = 4
_activity$ = 8						; size = 4
?LookupActivityHeaviest@CBaseAnimating@@QAEHH@Z PROC	; CBaseAnimating::LookupActivityHeaviest
; _this$ = ecx

; 194  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 195  : 	void *pmodel = GET_MODEL_PTR( ENT(pev) );

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	call	?ENT@@YAPAUedict_s@@PBUentvars_s@@@Z	; ENT
	add	esp, 4
	push	eax
	call	DWORD PTR ?g_engfuncs@@3Uenginefuncs_s@@A+296
	add	esp, 4
	mov	DWORD PTR _pmodel$[ebp], eax

; 196  : 
; 197  : 	return ::LookupActivityHeaviest( pmodel, activity );

	mov	edx, DWORD PTR _activity$[ebp]
	push	edx
	mov	eax, DWORD PTR _pmodel$[ebp]
	push	eax
	call	?LookupActivityHeaviest@@YAHPAXH@Z	; LookupActivityHeaviest
	add	esp, 8

; 198  : }

	mov	esp, ebp
	pop	ebp
	ret	4
?LookupActivityHeaviest@CBaseAnimating@@QAEHH@Z ENDP	; CBaseAnimating::LookupActivityHeaviest
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xashxt_v0.81_rev.1_with_sources\xashxt_v0.81_rev.1_src\server\monsters\animating.cpp
_TEXT	SEGMENT
_pmodel$ = -12						; size = 4
_this$ = -8						; size = 4
tv69 = -4						; size = 4
_activity$ = 8						; size = 4
?LookupActivity@CBaseAnimating@@QAEHH@Z PROC		; CBaseAnimating::LookupActivity
; _this$ = ecx

; 180  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 181  : 	ASSERT( activity != 0 );

	cmp	DWORD PTR _activity$[ebp], 0
	je	SHORT $LN3@LookupActi
	mov	DWORD PTR tv69[ebp], 1
	jmp	SHORT $LN4@LookupActi
$LN3@LookupActi:
	mov	DWORD PTR tv69[ebp], 0
$LN4@LookupActi:
	push	0
	push	181					; 000000b5H
	push	OFFSET $SG74533
	push	OFFSET $SG74534
	mov	eax, DWORD PTR tv69[ebp]
	push	eax
	call	?DBG_AssertFunction@@YAXHPBD0H0@Z	; DBG_AssertFunction
	add	esp, 20					; 00000014H

; 182  : 	void *pmodel = GET_MODEL_PTR( ENT(pev) );

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	call	?ENT@@YAPAUedict_s@@PBUentvars_s@@@Z	; ENT
	add	esp, 4
	push	eax
	call	DWORD PTR ?g_engfuncs@@3Uenginefuncs_s@@A+296
	add	esp, 4
	mov	DWORD PTR _pmodel$[ebp], eax

; 183  : 
; 184  : 	return ::LookupActivity( pmodel, activity );

	mov	eax, DWORD PTR _activity$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pmodel$[ebp]
	push	ecx
	call	?LookupActivity@@YAHPAXH@Z		; LookupActivity
	add	esp, 8

; 185  : }

	mov	esp, ebp
	pop	ebp
	ret	4
?LookupActivity@CBaseAnimating@@QAEHH@Z ENDP		; CBaseAnimating::LookupActivity
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xashxt_v0.81_rev.1_with_sources\xashxt_v0.81_rev.1_src\server\monsters\animating.cpp
_TEXT	SEGMENT
_pmodel$ = -8						; size = 4
_this$ = -4						; size = 4
?GetSequenceFlags@CBaseAnimating@@QAEHXZ PROC		; CBaseAnimating::GetSequenceFlags
; _this$ = ecx

; 229  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 230  : 	void *pmodel = GET_MODEL_PTR( ENT(pev) );

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	call	?ENT@@YAPAUedict_s@@PBUentvars_s@@@Z	; ENT
	add	esp, 4
	push	eax
	call	DWORD PTR ?g_engfuncs@@3Uenginefuncs_s@@A+296
	add	esp, 4
	mov	DWORD PTR _pmodel$[ebp], eax

; 231  : 
; 232  : 	return ::GetSequenceFlags( pmodel, pev->sequence );

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR [eax+296]
	push	ecx
	mov	edx, DWORD PTR _pmodel$[ebp]
	push	edx
	call	?GetSequenceFlags@@YAHPAXH@Z		; GetSequenceFlags
	add	esp, 8

; 233  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?GetSequenceFlags@CBaseAnimating@@QAEHXZ ENDP		; CBaseAnimating::GetSequenceFlags
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xashxt_v0.81_rev.1_with_sources\xashxt_v0.81_rev.1_src\server\monsters\animating.cpp
_TEXT	SEGMENT
tv545 = -56						; size = 8
tv502 = -48						; size = 4
tv426 = -44						; size = 4
tv340 = -40						; size = 4
tv339 = -36						; size = 4
tv273 = -32						; size = 4
tv272 = -28						; size = 4
_gaityaw$1 = -24					; size = 4
_delta$ = -20						; size = 4
_flYawDiff$2 = -16					; size = 4
_flYaw$ = -12						; size = 4
_this$ = -8						; size = 4
_iTorsoAdjust$ = -1					; size = 1
?StudioGaitFrameAdvance@CBaseAnimating@@QAEMXZ PROC	; CBaseAnimating::StudioGaitFrameAdvance
; _this$ = ecx

; 88   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 56					; 00000038H
	mov	DWORD PTR _this$[ebp], ecx

; 89   : 	if( !pev->gaitsequence || ( IsNetClient() && FBitSet( pev->fixangle, 1 )))

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	cmp	DWORD PTR [ecx+300], 0
	je	SHORT $LN3@StudioGait
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+224]
	call	edx
	test	eax, eax
	je	$LN2@StudioGait
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [ecx+160]
	and	edx, 1
	je	SHORT $LN2@StudioGait
$LN3@StudioGait:

; 90   : 	{
; 91   : 		if( IsPlayer( ))

	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+220]
	call	eax
	test	eax, eax
	je	SHORT $LN4@StudioGait

; 92   : 		{
; 93   : 			// reset torso controllers
; 94   : 			pev->controller[0] = 0x7F;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, 1
	imul	ecx, eax, 0
	mov	BYTE PTR [edx+ecx+316], 127		; 0000007fH

; 95   : 			pev->controller[1] = 0x7F;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, 1
	shl	ecx, 0
	mov	BYTE PTR [eax+ecx+316], 127		; 0000007fH

; 96   : 			pev->controller[2] = 0x7F;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, 1
	shl	ecx, 1
	mov	BYTE PTR [eax+ecx+316], 127		; 0000007fH

; 97   : 			pev->controller[3] = 0x7F;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, 1
	imul	edx, ecx, 3
	mov	BYTE PTR [eax+edx+316], 127		; 0000007fH
$LN4@StudioGait:

; 98   : 		}
; 99   : 		return 0.0f;

	fldz
	jmp	$LN1@StudioGait
$LN2@StudioGait:

; 100  : 	}
; 101  : 
; 102  : 	float delta = gpGlobals->frametime;

	mov	eax, DWORD PTR ?gpGlobals@@3PAUglobalvars_t@@A ; gpGlobals
	movss	xmm0, DWORD PTR [eax+4]
	movss	DWORD PTR _delta$[ebp], xmm0

; 103  : 
; 104  : 	m_flGaitMovement = pev->velocity.Length() * delta;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	add	ecx, 32					; 00000020H
	call	?Length@Vector@@QBEMXZ			; Vector::Length
	fstp	DWORD PTR tv502[ebp]
	movss	xmm0, DWORD PTR tv502[ebp]
	mulss	xmm0, DWORD PTR _delta$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [edx+1700], xmm0

; 105  : 
; 106  : 	if( pev->velocity.x == 0.0f && pev->velocity.y == 0.0f )

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	movss	xmm0, DWORD PTR [ecx+32]
	ucomiss	xmm0, DWORD PTR __real@00000000
	lahf
	test	ah, 68					; 00000044H
	jp	$LN5@StudioGait
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	movss	xmm0, DWORD PTR [eax+36]
	ucomiss	xmm0, DWORD PTR __real@00000000
	lahf
	test	ah, 68					; 00000044H
	jp	$LN5@StudioGait

; 107  : 	{
; 108  : 		float flYawDiff = pev->angles[YAW] - m_flGaitYaw;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	add	ecx, 80					; 00000050H
	call	??BVector@@QAEPAMXZ			; Vector::operator float *
	mov	edx, 4
	shl	edx, 0
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+edx]
	subss	xmm0, DWORD PTR [ecx+48]
	movss	DWORD PTR _flYawDiff$2[ebp], xmm0

; 109  : 		flYawDiff = flYawDiff - (int)(flYawDiff / 360) * 360;

	movss	xmm0, DWORD PTR _flYawDiff$2[ebp]
	divss	xmm0, DWORD PTR __real@43b40000
	cvttss2si edx, xmm0
	imul	eax, edx, 360
	cvtsi2ss xmm0, eax
	movss	xmm1, DWORD PTR _flYawDiff$2[ebp]
	subss	xmm1, xmm0
	movss	DWORD PTR _flYawDiff$2[ebp], xmm1

; 110  : 
; 111  : 		if( flYawDiff > 180 ) flYawDiff -= 360;

	movss	xmm0, DWORD PTR _flYawDiff$2[ebp]
	comiss	xmm0, DWORD PTR __real@43340000
	jbe	SHORT $LN7@StudioGait
	movss	xmm0, DWORD PTR _flYawDiff$2[ebp]
	subss	xmm0, DWORD PTR __real@43b40000
	movss	DWORD PTR _flYawDiff$2[ebp], xmm0
$LN7@StudioGait:

; 112  : 		if( flYawDiff < -180 ) flYawDiff += 360;

	movss	xmm0, DWORD PTR __real@c3340000
	comiss	xmm0, DWORD PTR _flYawDiff$2[ebp]
	jbe	SHORT $LN8@StudioGait
	movss	xmm0, DWORD PTR _flYawDiff$2[ebp]
	addss	xmm0, DWORD PTR __real@43b40000
	movss	DWORD PTR _flYawDiff$2[ebp], xmm0
$LN8@StudioGait:

; 113  : 
; 114  : 		if( delta < 0.25f )

	movss	xmm0, DWORD PTR __real@3e800000
	comiss	xmm0, DWORD PTR _delta$[ebp]
	jbe	SHORT $LN9@StudioGait

; 115  : 			flYawDiff *= delta * 4.0f;

	movss	xmm0, DWORD PTR _delta$[ebp]
	mulss	xmm0, DWORD PTR __real@40800000
	mulss	xmm0, DWORD PTR _flYawDiff$2[ebp]
	movss	DWORD PTR _flYawDiff$2[ebp], xmm0
	jmp	SHORT $LN10@StudioGait
$LN9@StudioGait:

; 116  : 		else flYawDiff *= delta;

	movss	xmm0, DWORD PTR _flYawDiff$2[ebp]
	mulss	xmm0, DWORD PTR _delta$[ebp]
	movss	DWORD PTR _flYawDiff$2[ebp], xmm0
$LN10@StudioGait:

; 117  : 
; 118  : 		m_flGaitYaw += flYawDiff;

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+48]
	addss	xmm0, DWORD PTR _flYawDiff$2[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [edx+48], xmm0

; 119  : 		m_flGaitYaw -= (int)(m_flGaitYaw / 360) * 360;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+48]
	divss	xmm0, DWORD PTR __real@43b40000
	cvttss2si ecx, xmm0
	imul	edx, ecx, 360
	cvtsi2ss xmm0, edx
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [eax+48]
	subss	xmm1, xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [ecx+48], xmm1

; 120  : 
; 121  : 		m_flGaitMovement = 0.0f;

	mov	edx, DWORD PTR _this$[ebp]
	xorps	xmm0, xmm0
	movss	DWORD PTR [edx+1700], xmm0

; 122  : 	}
; 123  : 	else

	jmp	$LN6@StudioGait
$LN5@StudioGait:

; 124  : 	{
; 125  : 		float gaityaw = RAD2DEG( atan2( pev->velocity.y, pev->velocity.x ));

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	cvtss2sd xmm0, DWORD PTR [ecx+32]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	cvtss2sd xmm0, DWORD PTR [eax+36]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	call	_atan2
	add	esp, 16					; 00000010H
	fstp	QWORD PTR tv545[ebp]
	movsd	xmm0, QWORD PTR tv545[ebp]
	cvtsd2ss xmm0, xmm0
	mulss	xmm0, DWORD PTR __real@42652ee1
	movss	DWORD PTR _gaityaw$1[ebp], xmm0

; 126  : 		m_flGaitYaw = bound( -180.0f, gaityaw, 180.0f );

	movss	xmm0, DWORD PTR _gaityaw$1[ebp]
	comiss	xmm0, DWORD PTR __real@c3340000
	jb	SHORT $LN21@StudioGait
	movss	xmm0, DWORD PTR __real@43340000
	comiss	xmm0, DWORD PTR _gaityaw$1[ebp]
	jbe	SHORT $LN19@StudioGait
	movss	xmm0, DWORD PTR _gaityaw$1[ebp]
	movss	DWORD PTR tv272[ebp], xmm0
	jmp	SHORT $LN20@StudioGait
$LN19@StudioGait:
	movss	xmm0, DWORD PTR __real@43340000
	movss	DWORD PTR tv272[ebp], xmm0
$LN20@StudioGait:
	movss	xmm0, DWORD PTR tv272[ebp]
	movss	DWORD PTR tv273[ebp], xmm0
	jmp	SHORT $LN22@StudioGait
$LN21@StudioGait:
	movss	xmm0, DWORD PTR __real@c3340000
	movss	DWORD PTR tv273[ebp], xmm0
$LN22@StudioGait:
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR tv273[ebp]
	movss	DWORD PTR [ecx+48], xmm0
$LN6@StudioGait:

; 127  : 	}
; 128  : 
; 129  : 	// calc side to side turning
; 130  : 	float flYaw = pev->angles[YAW] - m_flGaitYaw; // view direction relative to movement

	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	add	ecx, 80					; 00000050H
	call	??BVector@@QAEPAMXZ			; Vector::operator float *
	mov	ecx, 4
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+ecx]
	subss	xmm0, DWORD PTR [edx+48]
	movss	DWORD PTR _flYaw$[ebp], xmm0

; 131  : 	flYaw -= (int)(flYaw / 360) * 360;

	movss	xmm0, DWORD PTR _flYaw$[ebp]
	divss	xmm0, DWORD PTR __real@43b40000
	cvttss2si eax, xmm0
	imul	ecx, eax, 360
	cvtsi2ss xmm0, ecx
	movss	xmm1, DWORD PTR _flYaw$[ebp]
	subss	xmm1, xmm0
	movss	DWORD PTR _flYaw$[ebp], xmm1

; 132  : 
; 133  : 	if( flYaw < -180.0f ) flYaw += 360.0f;

	movss	xmm0, DWORD PTR __real@c3340000
	comiss	xmm0, DWORD PTR _flYaw$[ebp]
	jbe	SHORT $LN11@StudioGait
	movss	xmm0, DWORD PTR _flYaw$[ebp]
	addss	xmm0, DWORD PTR __real@43b40000
	movss	DWORD PTR _flYaw$[ebp], xmm0
$LN11@StudioGait:

; 134  : 	if( flYaw > 180.0f ) flYaw -= 360.0f;

	movss	xmm0, DWORD PTR _flYaw$[ebp]
	comiss	xmm0, DWORD PTR __real@43340000
	jbe	SHORT $LN12@StudioGait
	movss	xmm0, DWORD PTR _flYaw$[ebp]
	subss	xmm0, DWORD PTR __real@43b40000
	movss	DWORD PTR _flYaw$[ebp], xmm0
$LN12@StudioGait:

; 135  : 
; 136  : 	flYaw = (int)flYaw;

	cvttss2si edx, DWORD PTR _flYaw$[ebp]
	cvtsi2ss xmm0, edx
	movss	DWORD PTR _flYaw$[ebp], xmm0

; 137  : 
; 138  : 	// kill the yaw jitter
; 139  : 	if( flYaw > -1.0f && flYaw < 1.0f )

	movss	xmm0, DWORD PTR _flYaw$[ebp]
	comiss	xmm0, DWORD PTR __real@bf800000
	jbe	SHORT $LN13@StudioGait
	movss	xmm0, DWORD PTR __real@3f800000
	comiss	xmm0, DWORD PTR _flYaw$[ebp]
	jbe	SHORT $LN13@StudioGait

; 140  : 		flYaw = 0.0f;

	xorps	xmm0, xmm0
	movss	DWORD PTR _flYaw$[ebp], xmm0
$LN13@StudioGait:

; 141  : 
; 142  : 	if( flYaw > 120.0f )

	movss	xmm0, DWORD PTR _flYaw$[ebp]
	comiss	xmm0, DWORD PTR __real@42f00000
	jbe	SHORT $LN14@StudioGait

; 143  : 	{
; 144  : 		m_flGaitYaw -= 180.0f;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+48]
	subss	xmm0, DWORD PTR __real@43340000
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [ecx+48], xmm0

; 145  : 		m_flGaitMovement = -m_flGaitMovement;

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+1700]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mov	eax, DWORD PTR _this$[ebp]
	movss	DWORD PTR [eax+1700], xmm0

; 146  : 		flYaw -= 180.0f;

	movss	xmm0, DWORD PTR _flYaw$[ebp]
	subss	xmm0, DWORD PTR __real@43340000
	movss	DWORD PTR _flYaw$[ebp], xmm0
	jmp	SHORT $LN16@StudioGait
$LN14@StudioGait:

; 147  : 	}
; 148  : 	else if( flYaw < -120.0f )

	movss	xmm0, DWORD PTR __real@c2f00000
	comiss	xmm0, DWORD PTR _flYaw$[ebp]
	jbe	SHORT $LN16@StudioGait

; 149  : 	{
; 150  : 		m_flGaitYaw += 180.0f;

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+48]
	addss	xmm0, DWORD PTR __real@43340000
	mov	edx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [edx+48], xmm0

; 151  : 		m_flGaitMovement = -m_flGaitMovement;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+1700]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [ecx+1700], xmm0

; 152  : 		flYaw += 180.0f;

	movss	xmm0, DWORD PTR _flYaw$[ebp]
	addss	xmm0, DWORD PTR __real@43340000
	movss	DWORD PTR _flYaw$[ebp], xmm0
$LN16@StudioGait:

; 153  : 	}
; 154  : 
; 155  : 	// classic Half-Life method
; 156  : 	byte iTorsoAdjust = (byte)bound( 0, ((flYaw / 4.0f) + 30) / (60.0f / 255.0f), 255 );

	movss	xmm0, DWORD PTR _flYaw$[ebp]
	divss	xmm0, DWORD PTR __real@40800000
	addss	xmm0, DWORD PTR __real@41f00000
	divss	xmm0, DWORD PTR __real@3e70f0f1
	comiss	xmm0, DWORD PTR __real@00000000
	jb	SHORT $LN25@StudioGait
	movss	xmm0, DWORD PTR _flYaw$[ebp]
	divss	xmm0, DWORD PTR __real@40800000
	addss	xmm0, DWORD PTR __real@41f00000
	divss	xmm0, DWORD PTR __real@3e70f0f1
	movss	xmm1, DWORD PTR __real@437f0000
	comiss	xmm1, xmm0
	jbe	SHORT $LN23@StudioGait
	movss	xmm0, DWORD PTR _flYaw$[ebp]
	divss	xmm0, DWORD PTR __real@40800000
	addss	xmm0, DWORD PTR __real@41f00000
	divss	xmm0, DWORD PTR __real@3e70f0f1
	movss	DWORD PTR tv339[ebp], xmm0
	jmp	SHORT $LN24@StudioGait
$LN23@StudioGait:
	movss	xmm0, DWORD PTR __real@437f0000
	movss	DWORD PTR tv339[ebp], xmm0
$LN24@StudioGait:
	movss	xmm0, DWORD PTR tv339[ebp]
	movss	DWORD PTR tv340[ebp], xmm0
	jmp	SHORT $LN26@StudioGait
$LN25@StudioGait:
	xorps	xmm0, xmm0
	movss	DWORD PTR tv340[ebp], xmm0
$LN26@StudioGait:
	cvttss2si edx, DWORD PTR tv340[ebp]
	mov	BYTE PTR _iTorsoAdjust$[ebp], dl

; 157  : 
; 158  : 	// value it's already in range 0-255
; 159  : 	pev->controller[0] = iTorsoAdjust;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, 1
	imul	eax, edx, 0
	mov	dl, BYTE PTR _iTorsoAdjust$[ebp]
	mov	BYTE PTR [ecx+eax+316], dl

; 160  : 	pev->controller[1] = iTorsoAdjust;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, 1
	shl	edx, 0
	mov	al, BYTE PTR _iTorsoAdjust$[ebp]
	mov	BYTE PTR [ecx+edx+316], al

; 161  : 	pev->controller[2] = iTorsoAdjust;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, 1
	shl	eax, 1
	mov	cl, BYTE PTR _iTorsoAdjust$[ebp]
	mov	BYTE PTR [edx+eax+316], cl

; 162  : 	pev->controller[3] = iTorsoAdjust;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, 1
	imul	edx, ecx, 3
	mov	cl, BYTE PTR _iTorsoAdjust$[ebp]
	mov	BYTE PTR [eax+edx+316], cl

; 163  : 
; 164  : 	SetBlending( 0, -(pev->angles[PITCH] * 3.0f));

	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	add	ecx, 80					; 00000050H
	call	??BVector@@QAEPAMXZ			; Vector::operator float *
	mov	ecx, 4
	imul	edx, ecx, 0
	movss	xmm0, DWORD PTR [eax+edx]
	mulss	xmm0, DWORD PTR __real@40400000
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetBlending@CBaseAnimating@@QAEMHM@Z	; CBaseAnimating::SetBlending
	fstp	ST(0)

; 165  : 	pev->angles[YAW] = m_flGaitYaw;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, 80					; 00000050H
	call	??BVector@@QAEPAMXZ			; Vector::operator float *
	mov	ecx, 4
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [edx+48]
	mov	DWORD PTR [eax+ecx], edx

; 166  : 
; 167  : 	if( pev->angles[YAW] < -0.0f )

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, 80					; 00000050H
	call	??BVector@@QAEPAMXZ			; Vector::operator float *
	mov	ecx, 4
	shl	ecx, 0
	movss	xmm0, DWORD PTR __real@80000000
	comiss	xmm0, DWORD PTR [eax+ecx]
	jbe	SHORT $LN17@StudioGait

; 168  : 		pev->angles[YAW] += 360.0f;

	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	add	ecx, 80					; 00000050H
	call	??BVector@@QAEPAMXZ			; Vector::operator float *
	mov	ecx, 4
	shl	ecx, 0
	add	eax, ecx
	mov	DWORD PTR tv426[ebp], eax
	mov	edx, DWORD PTR tv426[ebp]
	movss	xmm0, DWORD PTR [edx]
	addss	xmm0, DWORD PTR __real@43b40000
	mov	eax, DWORD PTR tv426[ebp]
	movss	DWORD PTR [eax], xmm0
$LN17@StudioGait:

; 169  : 
; 170  : 	CalcGaitFrame( GetModelPtr(), pev->gaitsequence, pev->fuser1, m_flGaitMovement );

	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [ecx+1700]
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	add	eax, 596				; 00000254H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	add	edx, 300				; 0000012cH
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetModelPtr@CBaseAnimating@@QAEPAXXZ	; CBaseAnimating::GetModelPtr
	push	eax
	call	?CalcGaitFrame@@YAXPAXAAHAAMM@Z		; CalcGaitFrame
	add	esp, 16					; 00000010H

; 171  : 
; 172  : 	return m_flGaitMovement;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+1700]
$LN1@StudioGait:

; 173  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?StudioGaitFrameAdvance@CBaseAnimating@@QAEMXZ ENDP	; CBaseAnimating::StudioGaitFrameAdvance
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xashxt_v0.81_rev.1_with_sources\xashxt_v0.81_rev.1_src\server\monsters\animating.cpp
_TEXT	SEGMENT
tv202 = -8						; size = 4
_this$ = -4						; size = 4
_flInterval$ = 8					; size = 4
?StudioFrameAdvance@CBaseAnimating@@QAEMM@Z PROC	; CBaseAnimating::StudioFrameAdvance
; _this$ = ecx

; 59   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 60   : 	if (flInterval == 0.0)

	cvtss2sd xmm0, DWORD PTR _flInterval$[ebp]
	ucomisd	xmm0, QWORD PTR __real@0000000000000000
	lahf
	test	ah, 68					; 00000044H
	jp	SHORT $LN3@StudioFram

; 61   : 	{
; 62   : 		flInterval = (gpGlobals->time - pev->animtime);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR ?gpGlobals@@3PAUglobalvars_t@@A ; gpGlobals
	movss	xmm0, DWORD PTR [edx]
	subss	xmm0, DWORD PTR [ecx+308]
	movss	DWORD PTR _flInterval$[ebp], xmm0

; 63   : 		if (flInterval <= 0.001)

	cvtss2sd xmm0, DWORD PTR _flInterval$[ebp]
	movsd	xmm1, QWORD PTR __real@3f50624dd2f1a9fc
	comisd	xmm1, xmm0
	jb	SHORT $LN3@StudioFram

; 64   : 		{
; 65   : 			pev->animtime = gpGlobals->time;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR ?gpGlobals@@3PAUglobalvars_t@@A ; gpGlobals
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR [ecx+308], eax

; 66   : 			return 0.0;

	fldz
	jmp	$LN1@StudioFram
$LN3@StudioFram:

; 67   : 		}
; 68   : 	}
; 69   : 	if (! pev->animtime)

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	movss	xmm0, DWORD PTR [edx+308]
	ucomiss	xmm0, DWORD PTR __real@00000000
	lahf
	test	ah, 68					; 00000044H
	jp	SHORT $LN4@StudioFram

; 70   : 		flInterval = 0.0;

	xorps	xmm0, xmm0
	movss	DWORD PTR _flInterval$[ebp], xmm0
$LN4@StudioFram:

; 71   : 	
; 72   : 	pev->frame += flInterval * m_flFrameRate * pev->framerate;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _flInterval$[ebp]
	mulss	xmm0, DWORD PTR [edx+1680]
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+4]
	mulss	xmm0, DWORD PTR [edx+312]
	addss	xmm0, DWORD PTR [ecx+304]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	movss	DWORD PTR [ecx+304], xmm0

; 73   : 	pev->animtime = gpGlobals->time;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR ?gpGlobals@@3PAUglobalvars_t@@A ; gpGlobals
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax+308], edx

; 74   : 
; 75   : 	if (pev->frame < 0.0 || pev->frame >= 256.0) 

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	cvtss2sd xmm0, DWORD PTR [ecx+304]
	xorps	xmm1, xmm1
	comisd	xmm1, xmm0
	ja	SHORT $LN6@StudioFram
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	cvtss2sd xmm0, DWORD PTR [eax+304]
	comisd	xmm0, QWORD PTR __real@4070000000000000
	jb	$LN5@StudioFram
$LN6@StudioFram:

; 76   : 	{
; 77   : 		if (m_fSequenceLoops)

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+1696], 0
	je	SHORT $LN7@StudioFram

; 78   : 			pev->frame -= (int)(pev->frame / 256.0) * 256.0;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	cvtss2sd xmm0, DWORD PTR [edx+304]
	divsd	xmm0, QWORD PTR __real@4070000000000000
	cvttsd2si ecx, xmm0
	cvtsi2sd xmm0, ecx
	mulsd	xmm0, QWORD PTR __real@4070000000000000
	cvtss2sd xmm1, DWORD PTR [eax+304]
	subsd	xmm1, xmm0
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	cvtsd2ss xmm0, xmm1
	movss	DWORD PTR [eax+304], xmm0

; 79   : 		else

	jmp	SHORT $LN8@StudioFram
$LN7@StudioFram:

; 80   : 			pev->frame = (pev->frame < 0.0) ? 0 : 255;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	cvtss2sd xmm0, DWORD PTR [edx+304]
	xorps	xmm1, xmm1
	comisd	xmm1, xmm0
	jbe	SHORT $LN10@StudioFram
	mov	DWORD PTR tv202[ebp], 0
	jmp	SHORT $LN11@StudioFram
$LN10@StudioFram:
	mov	DWORD PTR tv202[ebp], 255		; 000000ffH
$LN11@StudioFram:
	cvtsi2ss xmm0, DWORD PTR tv202[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	movss	DWORD PTR [ecx+304], xmm0
$LN8@StudioFram:

; 81   : 		m_fSequenceFinished = TRUE;	// just in case it wasn't caught in GetEvents

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+1692], 1
$LN5@StudioFram:

; 82   : 	}
; 83   : 
; 84   : 	return flInterval;

	fld	DWORD PTR _flInterval$[ebp]
$LN1@StudioFram:

; 85   : }

	mov	esp, ebp
	pop	ebp
	ret	4
?StudioFrameAdvance@CBaseAnimating@@QAEMM@Z ENDP	; CBaseAnimating::StudioFrameAdvance
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xashxt_v0.81_rev.1_with_sources\xashxt_v0.81_rev.1_src\server\cbase.h
;	COMDAT ?edict@CBaseEntity@@QAEPAUedict_s@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?edict@CBaseEntity@@QAEPAUedict_s@@XZ PROC		; CBaseEntity::edict, COMDAT
; _this$ = ecx

; 696  : 	edict_t *edict() { return ENT( pev ); };

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	call	?ENT@@YAPAUedict_s@@PBUentvars_s@@@Z	; ENT
	add	esp, 4
	mov	esp, ebp
	pop	ebp
	ret	0
?edict@CBaseEntity@@QAEPAUedict_s@@XZ ENDP		; CBaseEntity::edict
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xashxt_v0.81_rev.1_with_sources\xashxt_v0.81_rev.1_src\server\ehandle.h
;	COMDAT ??BEHANDLE@@QAEHXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv67 = -4						; size = 4
??BEHANDLE@@QAEHXZ PROC					; EHANDLE::operator int, COMDAT
; _this$ = ecx

; 85   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 86   : 	return Get() != NULL;

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Get@EHANDLE@@QAEPAUedict_s@@XZ		; EHANDLE::Get
	test	eax, eax
	je	SHORT $LN3@operator
	mov	DWORD PTR tv67[ebp], 1
	jmp	SHORT $LN4@operator
$LN3@operator:
	mov	DWORD PTR tv67[ebp], 0
$LN4@operator:
	mov	eax, DWORD PTR tv67[ebp]

; 87   : }

	mov	esp, ebp
	pop	ebp
	ret	0
??BEHANDLE@@QAEHXZ ENDP					; EHANDLE::operator int
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xashxt_v0.81_rev.1_with_sources\xashxt_v0.81_rev.1_src\server\ehandle.h
;	COMDAT ?Get@EHANDLE@@QAEPAUedict_s@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Get@EHANDLE@@QAEPAUedict_s@@XZ PROC			; EHANDLE::Get, COMDAT
; _this$ = ecx

; 40   : { 

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 41   : 	if( m_pent )

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN2@Get

; 42   : 	{
; 43   : #if 0
; 44   : 		// keep client entity always in actual state
; 45   : 		if( ENTINDEX( m_pent ) == 1 )
; 46   : 			m_serialnumber = m_pent->serialnumber;
; 47   : #endif
; 48   : 		if( m_pent->serialnumber == m_serialnumber ) 

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	cmp	ecx, DWORD PTR [eax+4]
	jne	SHORT $LN2@Get

; 49   : 			return m_pent; 

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	jmp	SHORT $LN1@Get
$LN2@Get:

; 50   : 	}
; 51   : 
; 52   : 	return NULL; 

	xor	eax, eax
$LN1@Get:

; 53   : }

	mov	esp, ebp
	pop	ebp
	ret	0
?Get@EHANDLE@@QAEPAUedict_s@@XZ ENDP			; EHANDLE::Get
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xashxt_v0.81_rev.1_with_sources\xashxt_v0.81_rev.1_src\server\util.h
;	COMDAT ?ENT@@YAPAUedict_s@@PBUentvars_s@@@Z
_TEXT	SEGMENT
_pev$ = 8						; size = 4
?ENT@@YAPAUedict_s@@PBUentvars_s@@@Z PROC		; ENT, COMDAT

; 151  : 	inline edict_t *ENT(const entvars_t *pev)	{ return DBG_EntOfVars(pev); }

	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR _pev$[ebp]
	push	eax
	call	?DBG_EntOfVars@@YAPAUedict_s@@PBUentvars_s@@@Z ; DBG_EntOfVars
	add	esp, 4
	pop	ebp
	ret	0
?ENT@@YAPAUedict_s@@PBUentvars_s@@@Z ENDP		; ENT
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xashxt_v0.81_rev.1_with_sources\xashxt_v0.81_rev.1_src\game_shared\utlarray.h
;	COMDAT ?ResetDbgInfo@?$CUtlArray@PADV?$CUtlMemory@PADH@@@@IAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?ResetDbgInfo@?$CUtlArray@PADV?$CUtlMemory@PADH@@@@IAEXXZ PROC ; CUtlArray<char *,CUtlMemory<char *,int> >::ResetDbgInfo, COMDAT
; _this$ = ecx

; 160  : 	{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 161  : 		m_pElements = Base();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Base@?$CUtlArray@PADV?$CUtlMemory@PADH@@@@QAEPAPADXZ ; CUtlArray<char *,CUtlMemory<char *,int> >::Base
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+16], eax

; 162  : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
?ResetDbgInfo@?$CUtlArray@PADV?$CUtlMemory@PADH@@@@IAEXXZ ENDP ; CUtlArray<char *,CUtlMemory<char *,int> >::ResetDbgInfo
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xashxt_v0.81_rev.1_with_sources\xashxt_v0.81_rev.1_src\game_shared\utlmemory.h
;	COMDAT ?ValidateGrowSize@?$CUtlMemory@PADH@@IAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?ValidateGrowSize@?$CUtlMemory@PADH@@IAEXXZ PROC	; CUtlMemory<char *,int>::ValidateGrowSize, COMDAT
; _this$ = ecx

; 148  : 	{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 149  : #ifdef _X360
; 150  : 		if ( m_nGrowSize && m_nGrowSize != EXTERNAL_BUFFER_MARKER )
; 151  : 		{
; 152  : 			// Max grow size at 128 bytes on XBOX
; 153  : 			const int MAX_GROW = 128;
; 154  : 			if ( m_nGrowSize * sizeof(T) > MAX_GROW )
; 155  : 			{
; 156  : 				m_nGrowSize = max( 1, MAX_GROW / sizeof(T) );
; 157  : 			}
; 158  : 		}
; 159  : #endif
; 160  : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
?ValidateGrowSize@?$CUtlMemory@PADH@@IAEXXZ ENDP	; CUtlMemory<char *,int>::ValidateGrowSize
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xashxt_v0.81_rev.1_with_sources\xashxt_v0.81_rev.1_src\game_shared\utlmemory.h
;	COMDAT ?IsReadOnly@?$CUtlMemory@PADH@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv66 = -4						; size = 4
?IsReadOnly@?$CUtlMemory@PADH@@QBE_NXZ PROC		; CUtlMemory<char *,int>::IsReadOnly, COMDAT
; _this$ = ecx

; 467  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 468  : 	return (m_nGrowSize == EXTERNAL_CONST_BUFFER_MARKER);

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+8], -2			; fffffffeH
	jne	SHORT $LN3@IsReadOnly
	mov	DWORD PTR tv66[ebp], 1
	jmp	SHORT $LN4@IsReadOnly
$LN3@IsReadOnly:
	mov	DWORD PTR tv66[ebp], 0
$LN4@IsReadOnly:
	mov	al, BYTE PTR tv66[ebp]

; 469  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?IsReadOnly@?$CUtlMemory@PADH@@QBE_NXZ ENDP		; CUtlMemory<char *,int>::IsReadOnly
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xashxt_v0.81_rev.1_with_sources\xashxt_v0.81_rev.1_src\game_shared\utlmemory.h
;	COMDAT ?IsExternallyAllocated@?$CUtlMemory@PADH@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv66 = -4						; size = 4
?IsExternallyAllocated@?$CUtlMemory@PADH@@QBE_NXZ PROC	; CUtlMemory<char *,int>::IsExternallyAllocated, COMDAT
; _this$ = ecx

; 457  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 458  : 	return (m_nGrowSize < 0);

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+8], 0
	jge	SHORT $LN3@IsExternal
	mov	DWORD PTR tv66[ebp], 1
	jmp	SHORT $LN4@IsExternal
$LN3@IsExternal:
	mov	DWORD PTR tv66[ebp], 0
$LN4@IsExternal:
	mov	al, BYTE PTR tv66[ebp]

; 459  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?IsExternallyAllocated@?$CUtlMemory@PADH@@QBE_NXZ ENDP	; CUtlMemory<char *,int>::IsExternallyAllocated
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xashxt_v0.81_rev.1_with_sources\xashxt_v0.81_rev.1_src\game_shared\utlmemory.h
;	COMDAT ?Purge@?$CUtlMemory@PADH@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Purge@?$CUtlMemory@PADH@@QAEXXZ PROC			; CUtlMemory<char *,int>::Purge, COMDAT
; _this$ = ecx

; 645  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 646  : 	if ( !IsExternallyAllocated() )

	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsExternallyAllocated@?$CUtlMemory@PADH@@QBE_NXZ ; CUtlMemory<char *,int>::IsExternallyAllocated
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN1@Purge

; 647  : 	{
; 648  : 		if (m_pMemory)

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx], 0
	je	SHORT $LN3@Purge

; 649  : 		{
; 650  : 			free( (void*)m_pMemory );

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	call	_free
	add	esp, 4

; 651  : 			m_pMemory = 0;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], 0
$LN3@Purge:

; 652  : 		}
; 653  : 		m_nAllocationCount = 0;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], 0
$LN1@Purge:

; 654  : 	}
; 655  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?Purge@?$CUtlMemory@PADH@@QAEXXZ ENDP			; CUtlMemory<char *,int>::Purge
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xashxt_v0.81_rev.1_with_sources\xashxt_v0.81_rev.1_src\game_shared\utlmemory.h
;	COMDAT ?Base@?$CUtlMemory@PADH@@QAEPAPADXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Base@?$CUtlMemory@PADH@@QAEPAPADXZ PROC		; CUtlMemory<char *,int>::Base, COMDAT
; _this$ = ecx

; 487  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 488  : 	assert( !IsReadOnly() );

	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsReadOnly@?$CUtlMemory@PADH@@QBE_NXZ	; CUtlMemory<char *,int>::IsReadOnly
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN3@Base
	push	488					; 000001e8H
	push	OFFSET ??_C@_1MO@LCPOAHHB@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAu?$AAs?$AAe?$AAr?$AA?2?$AAd@
	push	OFFSET ??_C@_1BM@PFNFCCHH@?$AA?$CB?$AAI?$AAs?$AAR?$AAe?$AAa?$AAd?$AAO?$AAn?$AAl?$AAy?$AA?$CI?$AA?$CJ@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN3@Base:

; 489  : 	return m_pMemory;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]

; 490  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?Base@?$CUtlMemory@PADH@@QAEPAPADXZ ENDP		; CUtlMemory<char *,int>::Base
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xashxt_v0.81_rev.1_with_sources\xashxt_v0.81_rev.1_src\game_shared\utlmemory.h
;	COMDAT ?IsIdxValid@?$CUtlMemory@PADH@@QBE_NH@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv67 = -4						; size = 4
_i$ = 8							; size = 4
?IsIdxValid@?$CUtlMemory@PADH@@QBE_NH@Z PROC		; CUtlMemory<char *,int>::IsIdxValid, COMDAT
; _this$ = ecx

; 520  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 521  : 	return ( ((int) i) >= 0 ) && ( ((int) i) < m_nAllocationCount );

	cmp	DWORD PTR _i$[ebp], 0
	jl	SHORT $LN3@IsIdxValid
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	cmp	ecx, DWORD PTR [eax+4]
	jge	SHORT $LN3@IsIdxValid
	mov	DWORD PTR tv67[ebp], 1
	jmp	SHORT $LN4@IsIdxValid
$LN3@IsIdxValid:
	mov	DWORD PTR tv67[ebp], 0
$LN4@IsIdxValid:
	mov	al, BYTE PTR tv67[ebp]

; 522  : }

	mov	esp, ebp
	pop	ebp
	ret	4
?IsIdxValid@?$CUtlMemory@PADH@@QBE_NH@Z ENDP		; CUtlMemory<char *,int>::IsIdxValid
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xashxt_v0.81_rev.1_with_sources\xashxt_v0.81_rev.1_src\game_shared\utlmemory.h
;	COMDAT ??A?$CUtlMemory@PADH@@QAEAAPADH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_i$ = 8							; size = 4
??A?$CUtlMemory@PADH@@QAEAAPADH@Z PROC			; CUtlMemory<char *,int>::operator[], COMDAT
; _this$ = ecx

; 423  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 424  : 	assert( !IsReadOnly() );

	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsReadOnly@?$CUtlMemory@PADH@@QBE_NXZ	; CUtlMemory<char *,int>::IsReadOnly
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN3@operator
	push	424					; 000001a8H
	push	OFFSET ??_C@_1MO@LCPOAHHB@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAu?$AAs?$AAe?$AAr?$AA?2?$AAd@
	push	OFFSET ??_C@_1BM@PFNFCCHH@?$AA?$CB?$AAI?$AAs?$AAR?$AAe?$AAa?$AAd?$AAO?$AAn?$AAl?$AAy?$AA?$CI?$AA?$CJ@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN3@operator:

; 425  : 	assert( IsIdxValid(i) );

	mov	edx, DWORD PTR _i$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsIdxValid@?$CUtlMemory@PADH@@QBE_NH@Z	; CUtlMemory<char *,int>::IsIdxValid
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN4@operator
	push	425					; 000001a9H
	push	OFFSET ??_C@_1MO@LCPOAHHB@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAu?$AAs?$AAe?$AAr?$AA?2?$AAd@
	push	OFFSET ??_C@_1BM@CKILBAKK@?$AAI?$AAs?$AAI?$AAd?$AAx?$AAV?$AAa?$AAl?$AAi?$AAd?$AA?$CI?$AAi?$AA?$CJ@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN4@operator:

; 426  : 	return m_pMemory[i];

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _i$[ebp]
	lea	eax, DWORD PTR [eax+ecx*4]

; 427  : }

	mov	esp, ebp
	pop	ebp
	ret	4
??A?$CUtlMemory@PADH@@QAEAAPADH@Z ENDP			; CUtlMemory<char *,int>::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xashxt_v0.81_rev.1_with_sources\xashxt_v0.81_rev.1_src\game_shared\utlmemory.h
;	COMDAT ??1?$CUtlMemory@PADH@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$CUtlMemory@PADH@@QAE@XZ PROC			; CUtlMemory<char *,int>::~CUtlMemory<char *,int>, COMDAT
; _this$ = ecx

; 322  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1?$CUtlMemory@PADH@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 323  : 	Purge();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Purge@?$CUtlMemory@PADH@@QAEXXZ	; CUtlMemory<char *,int>::Purge

; 324  : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??1?$CUtlMemory@PADH@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1?$CUtlMemory@PADH@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1?$CUtlMemory@PADH@@QAE@XZ ENDP			; CUtlMemory<char *,int>::~CUtlMemory<char *,int>
; Function compile flags: /Odtp
; File c:\users\user\downloads\xashxt_v0.81_rev.1_with_sources\xashxt_v0.81_rev.1_src\game_shared\utlmemory.h
;	COMDAT ??0?$CUtlMemory@PADH@@QAE@HH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_nGrowSize$ = 8						; size = 4
_nInitAllocationCount$ = 12				; size = 4
??0?$CUtlMemory@PADH@@QAE@HH@Z PROC			; CUtlMemory<char *,int>::CUtlMemory<char *,int>, COMDAT
; _this$ = ecx

; 295  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 293  : CUtlMemory<T,I>::CUtlMemory( int nGrowSize, int nInitAllocationCount ) : m_pMemory(0), 

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0

; 294  : 	m_nAllocationCount( nInitAllocationCount ), m_nGrowSize( nGrowSize )

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _nInitAllocationCount$[ebp]
	mov	DWORD PTR [ecx+4], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _nGrowSize$[ebp]
	mov	DWORD PTR [eax+8], ecx

; 296  : 	ValidateGrowSize();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?ValidateGrowSize@?$CUtlMemory@PADH@@IAEXXZ ; CUtlMemory<char *,int>::ValidateGrowSize

; 297  : 	assert( nGrowSize >= 0 );

	cmp	DWORD PTR _nGrowSize$[ebp], 0
	jge	SHORT $LN4@CUtlMemory
	push	297					; 00000129H
	push	OFFSET $SG74717
	push	OFFSET $SG74718
	call	__wassert
	add	esp, 12					; 0000000cH
$LN4@CUtlMemory:

; 298  : 	if (m_nAllocationCount)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 0
	je	SHORT $LN1@CUtlMemory

; 299  : 	{
; 300  : 		m_pMemory = (T*)malloc( m_nAllocationCount * sizeof(T) );

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	shl	edx, 2
	push	edx
	call	_malloc
	add	esp, 4
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], eax
$LN1@CUtlMemory:

; 301  : 	}
; 302  : }

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	8
??0?$CUtlMemory@PADH@@QAE@HH@Z ENDP			; CUtlMemory<char *,int>::CUtlMemory<char *,int>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xashxt_v0.81_rev.1_with_sources\xashxt_v0.81_rev.1_src\game_shared\utlarray.h
;	COMDAT ?Purge@?$CUtlArray@PADV?$CUtlMemory@PADH@@@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Purge@?$CUtlArray@PADV?$CUtlMemory@PADH@@@@QAEXXZ PROC	; CUtlArray<char *,CUtlMemory<char *,int> >::Purge, COMDAT
; _this$ = ecx

; 742  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 743  : 	RemoveAll();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?RemoveAll@?$CUtlArray@PADV?$CUtlMemory@PADH@@@@QAEXXZ ; CUtlArray<char *,CUtlMemory<char *,int> >::RemoveAll

; 744  : 	m_Memory.Purge();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Purge@?$CUtlMemory@PADH@@QAEXXZ	; CUtlMemory<char *,int>::Purge

; 745  : 	ResetDbgInfo();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?ResetDbgInfo@?$CUtlArray@PADV?$CUtlMemory@PADH@@@@IAEXXZ ; CUtlArray<char *,CUtlMemory<char *,int> >::ResetDbgInfo

; 746  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?Purge@?$CUtlArray@PADV?$CUtlMemory@PADH@@@@QAEXXZ ENDP	; CUtlArray<char *,CUtlMemory<char *,int> >::Purge
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xashxt_v0.81_rev.1_with_sources\xashxt_v0.81_rev.1_src\game_shared\utlarray.h
;	COMDAT ?RemoveAll@?$CUtlArray@PADV?$CUtlMemory@PADH@@@@QAEXXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
_i$1 = -4						; size = 4
?RemoveAll@?$CUtlArray@PADV?$CUtlMemory@PADH@@@@QAEXXZ PROC ; CUtlArray<char *,CUtlMemory<char *,int> >::RemoveAll, COMDAT
; _this$ = ecx

; 726  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 727  : 	for (int i = m_Size; --i >= 0; )

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR _i$1[ebp], ecx
$LN4@RemoveAll:
	mov	edx, DWORD PTR _i$1[ebp]
	sub	edx, 1
	mov	DWORD PTR _i$1[ebp], edx
	js	SHORT $LN3@RemoveAll

; 728  : 	{
; 729  : 		Destruct(&Element(i));

	mov	eax, DWORD PTR _i$1[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Element@?$CUtlArray@PADV?$CUtlMemory@PADH@@@@QAEAAPADH@Z ; CUtlArray<char *,CUtlMemory<char *,int> >::Element
	push	eax
	call	??$Destruct@PAD@@YAXPAPAD@Z		; Destruct<char *>
	add	esp, 4

; 730  : 	}

	jmp	SHORT $LN4@RemoveAll
$LN3@RemoveAll:

; 731  : 
; 732  : 	m_Size = 0;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+12], 0

; 733  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?RemoveAll@?$CUtlArray@PADV?$CUtlMemory@PADH@@@@QAEXXZ ENDP ; CUtlArray<char *,CUtlMemory<char *,int> >::RemoveAll
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xashxt_v0.81_rev.1_with_sources\xashxt_v0.81_rev.1_src\game_shared\utlarray.h
;	COMDAT ?Count@?$CUtlArray@PADV?$CUtlMemory@PADH@@@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Count@?$CUtlArray@PADV?$CUtlMemory@PADH@@@@QBEHXZ PROC	; CUtlArray<char *,CUtlMemory<char *,int> >::Count, COMDAT
; _this$ = ecx

; 344  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 345  : 	return m_Size;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+12]

; 346  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?Count@?$CUtlArray@PADV?$CUtlMemory@PADH@@@@QBEHXZ ENDP	; CUtlArray<char *,CUtlMemory<char *,int> >::Count
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xashxt_v0.81_rev.1_with_sources\xashxt_v0.81_rev.1_src\game_shared\utlarray.h
;	COMDAT ?Base@?$CUtlArray@PADV?$CUtlMemory@PADH@@@@QAEPAPADXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Base@?$CUtlArray@PADV?$CUtlMemory@PADH@@@@QAEPAPADXZ PROC ; CUtlArray<char *,CUtlMemory<char *,int> >::Base, COMDAT
; _this$ = ecx

; 60   : 	T* Base()								{ return m_Memory.Base(); }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Base@?$CUtlMemory@PADH@@QAEPAPADXZ	; CUtlMemory<char *,int>::Base
	mov	esp, ebp
	pop	ebp
	ret	0
?Base@?$CUtlArray@PADV?$CUtlMemory@PADH@@@@QAEPAPADXZ ENDP ; CUtlArray<char *,CUtlMemory<char *,int> >::Base
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xashxt_v0.81_rev.1_with_sources\xashxt_v0.81_rev.1_src\game_shared\utlarray.h
;	COMDAT ?Element@?$CUtlArray@PADV?$CUtlMemory@PADH@@@@QAEAAPADH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_i$ = 8							; size = 4
?Element@?$CUtlArray@PADV?$CUtlMemory@PADH@@@@QAEAAPADH@Z PROC ; CUtlArray<char *,CUtlMemory<char *,int> >::Element, COMDAT
; _this$ = ecx

; 294  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 295  : 	return m_Memory[ i ];

	mov	eax, DWORD PTR _i$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??A?$CUtlMemory@PADH@@QAEAAPADH@Z	; CUtlMemory<char *,int>::operator[]

; 296  : }

	mov	esp, ebp
	pop	ebp
	ret	4
?Element@?$CUtlArray@PADV?$CUtlMemory@PADH@@@@QAEAAPADH@Z ENDP ; CUtlArray<char *,CUtlMemory<char *,int> >::Element
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xashxt_v0.81_rev.1_with_sources\xashxt_v0.81_rev.1_src\game_shared\utlarray.h
;	COMDAT ??A?$CUtlArray@PADV?$CUtlMemory@PADH@@@@QAEAAPADH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_i$ = 8							; size = 4
??A?$CUtlArray@PADV?$CUtlMemory@PADH@@@@QAEAAPADH@Z PROC ; CUtlArray<char *,CUtlMemory<char *,int> >::operator[], COMDAT
; _this$ = ecx

; 282  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 283  : 	return m_Memory[ i ];

	mov	eax, DWORD PTR _i$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??A?$CUtlMemory@PADH@@QAEAAPADH@Z	; CUtlMemory<char *,int>::operator[]

; 284  : }

	mov	esp, ebp
	pop	ebp
	ret	4
??A?$CUtlArray@PADV?$CUtlMemory@PADH@@@@QAEAAPADH@Z ENDP ; CUtlArray<char *,CUtlMemory<char *,int> >::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xashxt_v0.81_rev.1_with_sources\xashxt_v0.81_rev.1_src\game_shared\utlarray.h
;	COMDAT ??1?$CUtlArray@PADV?$CUtlMemory@PADH@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$CUtlArray@PADV?$CUtlMemory@PADH@@@@QAE@XZ PROC	; CUtlArray<char *,CUtlMemory<char *,int> >::~CUtlArray<char *,CUtlMemory<char *,int> >, COMDAT
; _this$ = ecx

; 260  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1?$CUtlArray@PADV?$CUtlMemory@PADH@@@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 261  : 	Purge();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Purge@?$CUtlArray@PADV?$CUtlMemory@PADH@@@@QAEXXZ ; CUtlArray<char *,CUtlMemory<char *,int> >::Purge

; 262  : }

	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$CUtlMemory@PADH@@QAE@XZ		; CUtlMemory<char *,int>::~CUtlMemory<char *,int>
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??1?$CUtlArray@PADV?$CUtlMemory@PADH@@@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1?$CUtlArray@PADV?$CUtlMemory@PADH@@@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1?$CUtlArray@PADV?$CUtlMemory@PADH@@@@QAE@XZ ENDP	; CUtlArray<char *,CUtlMemory<char *,int> >::~CUtlArray<char *,CUtlMemory<char *,int> >
; Function compile flags: /Odtp
; File c:\users\user\downloads\xashxt_v0.81_rev.1_with_sources\xashxt_v0.81_rev.1_src\game_shared\utlarray.h
;	COMDAT ??0?$CUtlArray@PADV?$CUtlMemory@PADH@@@@QAE@HH@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_growSize$ = 8						; size = 4
_initSize$ = 12						; size = 4
??0?$CUtlArray@PADV?$CUtlMemory@PADH@@@@QAE@HH@Z PROC	; CUtlArray<char *,CUtlMemory<char *,int> >::CUtlArray<char *,CUtlMemory<char *,int> >, COMDAT
; _this$ = ecx

; 247  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0?$CUtlArray@PADV?$CUtlMemory@PADH@@@@QAE@HH@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 246  : 	m_Memory(growSize, initSize), m_Size(0)

	mov	eax, DWORD PTR _initSize$[ebp]
	push	eax
	mov	ecx, DWORD PTR _growSize$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$CUtlMemory@PADH@@QAE@HH@Z		; CUtlMemory<char *,int>::CUtlMemory<char *,int>
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+12], 0

; 248  : 	ResetDbgInfo();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?ResetDbgInfo@?$CUtlArray@PADV?$CUtlMemory@PADH@@@@IAEXXZ ; CUtlArray<char *,CUtlMemory<char *,int> >::ResetDbgInfo

; 249  : }

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$CUtlArray@PADV?$CUtlMemory@PADH@@@@QAE@HH@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$CUtlMemory@PADH@@QAE@XZ		; CUtlMemory<char *,int>::~CUtlMemory<char *,int>
__ehhandler$??0?$CUtlArray@PADV?$CUtlMemory@PADH@@@@QAE@HH@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0?$CUtlArray@PADV?$CUtlMemory@PADH@@@@QAE@HH@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0?$CUtlArray@PADV?$CUtlMemory@PADH@@@@QAE@HH@Z ENDP	; CUtlArray<char *,CUtlMemory<char *,int> >::CUtlArray<char *,CUtlMemory<char *,int> >
; Function compile flags: /Odtp
; File c:\users\user\downloads\xashxt_v0.81_rev.1_with_sources\xashxt_v0.81_rev.1_src\common\datamap.h
;	COMDAT ??1CDatadescGeneratedNameHolder@@QAE@XZ
_TEXT	SEGMENT
$T2 = -24						; size = 4
_this$ = -20						; size = 4
_i$3 = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1CDatadescGeneratedNameHolder@@QAE@XZ PROC		; CDatadescGeneratedNameHolder::~CDatadescGeneratedNameHolder, COMDAT
; _this$ = ecx

; 197  : 	{

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1CDatadescGeneratedNameHolder@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 12					; 0000000cH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 198  : 		for( int i = 0; i < m_Names.Count(); i++ )

	mov	DWORD PTR _i$3[ebp], 0
	jmp	SHORT $LN4@CDatadescG
$LN2@CDatadescG:
	mov	eax, DWORD PTR _i$3[ebp]
	add	eax, 1
	mov	DWORD PTR _i$3[ebp], eax
$LN4@CDatadescG:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	?Count@?$CUtlArray@PADV?$CUtlMemory@PADH@@@@QBEHXZ ; CUtlArray<char *,CUtlMemory<char *,int> >::Count
	cmp	DWORD PTR _i$3[ebp], eax
	jge	SHORT $LN1@CDatadescG

; 199  : 		{
; 200  : 			delete m_Names[i];

	mov	ecx, DWORD PTR _i$3[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??A?$CUtlArray@PADV?$CUtlMemory@PADH@@@@QAEAAPADH@Z ; CUtlArray<char *,CUtlMemory<char *,int> >::operator[]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR $T2[ebp], edx
	push	1
	mov	eax, DWORD PTR $T2[ebp]
	push	eax
	call	??3@YAXPAXI@Z				; operator delete
	add	esp, 8

; 201  : 		}

	jmp	SHORT $LN2@CDatadescG
$LN1@CDatadescG:

; 202  : 	}

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??1?$CUtlArray@PADV?$CUtlMemory@PADH@@@@QAE@XZ ; CUtlArray<char *,CUtlMemory<char *,int> >::~CUtlArray<char *,CUtlMemory<char *,int> >
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??1CDatadescGeneratedNameHolder@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-16]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1CDatadescGeneratedNameHolder@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1CDatadescGeneratedNameHolder@@QAE@XZ ENDP		; CDatadescGeneratedNameHolder::~CDatadescGeneratedNameHolder
; Function compile flags: /Odtp
; File c:\users\user\downloads\xashxt_v0.81_rev.1_with_sources\xashxt_v0.81_rev.1_src\common\datamap.h
;	COMDAT ??0CDatadescGeneratedNameHolder@@QAE@PBD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_pszBase$ = 8						; size = 4
??0CDatadescGeneratedNameHolder@@QAE@PBD@Z PROC		; CDatadescGeneratedNameHolder::CDatadescGeneratedNameHolder, COMDAT
; _this$ = ecx

; 192  : 	{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 191  : 	CDatadescGeneratedNameHolder( const char *pszBase ) : m_pszBase(pszBase)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _pszBase$[ebp]
	mov	DWORD PTR [eax], ecx

; 192  : 	{

	push	0
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??0?$CUtlArray@PADV?$CUtlMemory@PADH@@@@QAE@HH@Z ; CUtlArray<char *,CUtlMemory<char *,int> >::CUtlArray<char *,CUtlMemory<char *,int> >

; 193  : 		m_nLenBase = strlen( m_pszBase ) + 2;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	call	_strlen
	add	esp, 4
	add	eax, 2
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax

; 194  : 	}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0CDatadescGeneratedNameHolder@@QAE@PBD@Z ENDP		; CDatadescGeneratedNameHolder::CDatadescGeneratedNameHolder
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xashxt_v0.81_rev.1_with_sources\xashxt_v0.81_rev.1_src\game_shared\vector.h
;	COMDAT ??BVector@@QAEPAMXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??BVector@@QAEPAMXZ PROC				; Vector::operator float *, COMDAT
; _this$ = ecx

; 225  : 	operator float *()				{ return &x; } // Vectors will now automatically convert to float * when needed

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??BVector@@QAEPAMXZ ENDP				; Vector::operator float *
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xashxt_v0.81_rev.1_with_sources\xashxt_v0.81_rev.1_src\game_shared\vector.h
;	COMDAT ?Length@Vector@@QBEMXZ
_TEXT	SEGMENT
tv91 = -8						; size = 4
_this$ = -4						; size = 4
?Length@Vector@@QBEMXZ PROC				; Vector::Length, COMDAT
; _this$ = ecx

; 223  : 	inline float Length(void) const		{ return sqrt( x*x + y*y + z*z ); }

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR [ecx]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [edx+4]
	mulss	xmm1, DWORD PTR [eax+4]
	addss	xmm0, xmm1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [ecx+8]
	mulss	xmm1, DWORD PTR [edx+8]
	addss	xmm0, xmm1
	cvtss2sd xmm0, xmm0
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	call	_sqrt
	add	esp, 8
	fstp	DWORD PTR tv91[ebp]
	fld	DWORD PTR tv91[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
?Length@Vector@@QBEMXZ ENDP				; Vector::Length
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xashxt_v0.81_rev.1_with_sources\xashxt_v0.81_rev.1_src\game_shared\vector.h
;	COMDAT ??0Vector@@QAE@MMM@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_X$ = 8							; size = 4
_Y$ = 12						; size = 4
_Z$ = 16						; size = 4
??0Vector@@QAE@MMM@Z PROC				; Vector::Vector, COMDAT
; _this$ = ecx

; 132  : 	inline Vector(float X, float Y, float Z)	{ x = X; y = Y; z = Z;                     }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _X$[ebp]
	movss	DWORD PTR [eax], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _Y$[ebp]
	movss	DWORD PTR [ecx+4], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _Z$[ebp]
	movss	DWORD PTR [edx+8], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
??0Vector@@QAE@MMM@Z ENDP				; Vector::Vector
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xashxt_v0.81_rev.1_with_sources\xashxt_v0.81_rev.1_src\game_shared\vector.h
;	COMDAT ??0Vector@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0Vector@@QAE@XZ PROC					; Vector::Vector, COMDAT
; _this$ = ecx

; 131  : 	inline Vector(void)				{ }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0Vector@@QAE@XZ ENDP					; Vector::Vector
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??__G@YGXPAX0IIP6EPAX00@Z@Z
_TEXT	SEGMENT
tv66 = -4						; size = 4
___t$ = 8						; size = 4
___u$ = 12						; size = 4
___s$ = 16						; size = 4
___n$ = 20						; size = 4
___f$ = 24						; size = 4
??__G@YGXPAX0IIP6EPAX00@Z@Z PROC			; `vector copy constructor iterator', COMDAT
	push	ebp
	mov	ebp, esp
	push	ecx
$LN2@vector:
	mov	eax, DWORD PTR ___n$[ebp]
	mov	DWORD PTR tv66[ebp], eax
	mov	ecx, DWORD PTR ___n$[ebp]
	sub	ecx, 1
	mov	DWORD PTR ___n$[ebp], ecx
	cmp	DWORD PTR tv66[ebp], 0
	jbe	SHORT $LN1@vector
	mov	edx, DWORD PTR ___u$[ebp]
	push	edx
	mov	ecx, DWORD PTR ___t$[ebp]
	call	DWORD PTR ___f$[ebp]
	mov	eax, DWORD PTR ___t$[ebp]
	add	eax, DWORD PTR ___s$[ebp]
	mov	DWORD PTR ___t$[ebp], eax
	mov	ecx, DWORD PTR ___u$[ebp]
	add	ecx, DWORD PTR ___s$[ebp]
	mov	DWORD PTR ___u$[ebp], ecx
	jmp	SHORT $LN2@vector
$LN1@vector:
	mov	esp, ebp
	pop	ebp
	ret	20					; 00000014H
??__G@YGXPAX0IIP6EPAX00@Z@Z ENDP			; `vector copy constructor iterator'
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_H@YGXPAXIIP6EPAX0@Z@Z
_TEXT	SEGMENT
tv66 = -4						; size = 4
___t$ = 8						; size = 4
___s$ = 12						; size = 4
___n$ = 16						; size = 4
___f$ = 20						; size = 4
??_H@YGXPAXIIP6EPAX0@Z@Z PROC				; `vector constructor iterator', COMDAT
	push	ebp
	mov	ebp, esp
	push	ecx
$LN2@vector:
	mov	eax, DWORD PTR ___n$[ebp]
	mov	DWORD PTR tv66[ebp], eax
	mov	ecx, DWORD PTR ___n$[ebp]
	sub	ecx, 1
	mov	DWORD PTR ___n$[ebp], ecx
	cmp	DWORD PTR tv66[ebp], 0
	jbe	SHORT $LN1@vector
	mov	ecx, DWORD PTR ___t$[ebp]
	call	DWORD PTR ___f$[ebp]
	mov	edx, DWORD PTR ___t$[ebp]
	add	edx, DWORD PTR ___s$[ebp]
	mov	DWORD PTR ___t$[ebp], edx
	jmp	SHORT $LN2@vector
$LN1@vector:
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
??_H@YGXPAXIIP6EPAX0@Z@Z ENDP				; `vector constructor iterator'
_TEXT	ENDS
END
