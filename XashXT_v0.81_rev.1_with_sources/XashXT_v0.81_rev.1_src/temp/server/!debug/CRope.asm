; Listing generated by Microsoft (R) Optimizing Compiler Version 19.16.27045.0 

	TITLE	C:\Users\USER\Downloads\XashXT_v0.81_rev.1_with_sources\XashXT_v0.81_rev.1_src\server\ropes\CRope.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	?m_DataMap@CRope@@2Udatamap_s@@A		; CRope::m_DataMap
CONST	SEGMENT
?g_pszCreakSounds@@3QBQBDB DD FLAT:$SG76446		; g_pszCreakSounds
	DD	FLAT:$SG76447
	DD	FLAT:$SG76448
$SG76446 DB	'items/rope1.wav', 00H
$SG76447 DB	'items/rope2.wav', 00H
$SG76448 DB	'items/rope3.wav', 00H
$SG76455 DB	'CRope', 00H
	ORG $+2
$SG76509 DB	'm_iSegments', 00H
$SG76510 DB	'm_vecLastEndPos', 00H
$SG76511 DB	'm_vecGravity', 00H
	ORG $+3
$SG76512 DB	'm_iNumSamples', 00H
	ORG $+2
$SG76513 DB	'm_bSimulateBones', 00H
	ORG $+3
$SG76514 DB	'm_bObjectAttached', 00H
	ORG $+2
$SG76515 DB	'm_iAttachedObjectsSegment', 00H
	ORG $+2
$SG76516 DB	'm_flDetachTime', 00H
	ORG $+1
$SG76517 DB	'm_pSegments', 00H
$SG76518 DB	'm_bDisallowPlayerAttachment', 00H
$SG76519 DB	'm_iszBodyModel', 00H
	ORG $+1
$SG76520 DB	'm_iszEndingModel', 00H
	ORG $+3
$SG76521 DB	'm_flAttachedObjectsOffset', 00H
	ORG $+2
$SG76522 DB	'm_bMakeSound', 00H
	ORG $+3
$SG76523 DB	'CRope', 00H
	ORG $+2
$SG76552 DB	'env_rope', 00H
	ORG $+3
$SG76557 DB	'models/rope16.mdl', 00H
	ORG $+2
$SG76558 DB	'models/rope16.mdl', 00H
	ORG $+2
$SG76573 DB	'segments', 00H
	ORG $+3
$SG76577 DB	'bodymodel', 00H
	ORG $+2
$SG76580 DB	'endingmodel', 00H
$SG76583 DB	'disable', 00H
$SG77280 DB	'0', 00H, 00H, 00H
$SG77110 DB	'c', 00H, ':', 00H, '\', 00H, 'u', 00H, 's', 00H, 'e', 00H
	DB	'r', 00H, 's', 00H, '\', 00H, 'u', 00H, 's', 00H, 'e', 00H, 'r'
	DB	00H, '\', 00H, 'd', 00H, 'o', 00H, 'w', 00H, 'n', 00H, 'l', 00H
	DB	'o', 00H, 'a', 00H, 'd', 00H, 's', 00H, '\', 00H, 'x', 00H, 'a'
	DB	00H, 's', 00H, 'h', 00H, 'x', 00H, 't', 00H, '_', 00H, 'v', 00H
	DB	'0', 00H, '.', 00H, '8', 00H, '1', 00H, '_', 00H, 'r', 00H, 'e'
	DB	00H, 'v', 00H, '.', 00H, '1', 00H, '_', 00H, 'w', 00H, 'i', 00H
	DB	't', 00H, 'h', 00H, '_', 00H, 's', 00H, 'o', 00H, 'u', 00H, 'r'
	DB	00H, 'c', 00H, 'e', 00H, 's', 00H, '\', 00H, 'x', 00H, 'a', 00H
	DB	's', 00H, 'h', 00H, 'x', 00H, 't', 00H, '_', 00H, 'v', 00H, '0'
	DB	00H, '.', 00H, '8', 00H, '1', 00H, '_', 00H, 'r', 00H, 'e', 00H
	DB	'v', 00H, '.', 00H, '1', 00H, '_', 00H, 's', 00H, 'r', 00H, 'c'
	DB	00H, '\', 00H, 'g', 00H, 'a', 00H, 'm', 00H, 'e', 00H, '_', 00H
	DB	's', 00H, 'h', 00H, 'a', 00H, 'r', 00H, 'e', 00H, 'd', 00H, '\'
	DB	00H, 'u', 00H, 't', 00H, 'l', 00H, 'm', 00H, 'e', 00H, 'm', 00H
	DB	'o', 00H, 'r', 00H, 'y', 00H, '.', 00H, 'h', 00H, 00H, 00H
	ORG $+2
$SG77111 DB	'n', 00H, 'G', 00H, 'r', 00H, 'o', 00H, 'w', 00H, 'S', 00H
	DB	'i', 00H, 'z', 00H, 'e', 00H, ' ', 00H, '>', 00H, '=', 00H, ' '
	DB	00H, '0', 00H, 00H, 00H
	ORG $+2
$SG77154 DB	'c', 00H, ':', 00H, '\', 00H, 'u', 00H, 's', 00H, 'e', 00H
	DB	'r', 00H, 's', 00H, '\', 00H, 'u', 00H, 's', 00H, 'e', 00H, 'r'
	DB	00H, '\', 00H, 'd', 00H, 'o', 00H, 'w', 00H, 'n', 00H, 'l', 00H
	DB	'o', 00H, 'a', 00H, 'd', 00H, 's', 00H, '\', 00H, 'x', 00H, 'a'
	DB	00H, 's', 00H, 'h', 00H, 'x', 00H, 't', 00H, '_', 00H, 'v', 00H
	DB	'0', 00H, '.', 00H, '8', 00H, '1', 00H, '_', 00H, 'r', 00H, 'e'
	DB	00H, 'v', 00H, '.', 00H, '1', 00H, '_', 00H, 'w', 00H, 'i', 00H
	DB	't', 00H, 'h', 00H, '_', 00H, 's', 00H, 'o', 00H, 'u', 00H, 'r'
	DB	00H, 'c', 00H, 'e', 00H, 's', 00H, '\', 00H, 'x', 00H, 'a', 00H
	DB	's', 00H, 'h', 00H, 'x', 00H, 't', 00H, '_', 00H, 'v', 00H, '0'
	DB	00H, '.', 00H, '8', 00H, '1', 00H, '_', 00H, 'r', 00H, 'e', 00H
	DB	'v', 00H, '.', 00H, '1', 00H, '_', 00H, 's', 00H, 'r', 00H, 'c'
	DB	00H, '\', 00H, 'g', 00H, 'a', 00H, 'm', 00H, 'e', 00H, '_', 00H
	DB	's', 00H, 'h', 00H, 'a', 00H, 'r', 00H, 'e', 00H, 'd', 00H, '\'
	DB	00H, 'u', 00H, 't', 00H, 'l', 00H, 'a', 00H, 'r', 00H, 'r', 00H
	DB	'a', 00H, 'y', 00H, '.', 00H, 'h', 00H, 00H, 00H
$SG77286 DB	'0', 00H, 00H, 00H
$SG77155 DB	'(', 00H, 'B', 00H, 'a', 00H, 's', 00H, 'e', 00H, '(', 00H
	DB	')', 00H, ' ', 00H, '=', 00H, '=', 00H, ' ', 00H, 'N', 00H, 'U'
	DB	00H, 'L', 00H, 'L', 00H, ')', 00H, ' ', 00H, '|', 00H, '|', 00H
	DB	' ', 00H, '(', 00H, '&', 00H, 's', 00H, 'r', 00H, 'c', 00H, ' '
	DB	00H, '<', 00H, ' ', 00H, 'B', 00H, 'a', 00H, 's', 00H, 'e', 00H
	DB	'(', 00H, ')', 00H, ')', 00H, ' ', 00H, '|', 00H, '|', 00H, ' '
	DB	00H, '(', 00H, '&', 00H, 's', 00H, 'r', 00H, 'c', 00H, ' ', 00H
	DB	'>', 00H, '=', 00H, ' ', 00H, '(', 00H, 'B', 00H, 'a', 00H, 's'
	DB	00H, 'e', 00H, '(', 00H, ')', 00H, ' ', 00H, '+', 00H, ' ', 00H
	DB	'C', 00H, 'o', 00H, 'u', 00H, 'n', 00H, 't', 00H, '(', 00H, ')'
	DB	00H, ')', 00H, ' ', 00H, ')', 00H, 00H, 00H
	ORG $+2
$SG77277 DB	'n', 00H, 'u', 00H, 'm', 00H, ' ', 00H, '>', 00H, ' ', 00H
	DB	'0', 00H, 00H, 00H
$SG77290 DB	'm', 00H, '_', 00H, 'p', 00H, 'M', 00H, 'e', 00H, 'm', 00H
	DB	'o', 00H, 'r', 00H, 'y', 00H, 00H, 00H
$SG77156 DB	'c', 00H, ':', 00H, '\', 00H, 'u', 00H, 's', 00H, 'e', 00H
	DB	'r', 00H, 's', 00H, '\', 00H, 'u', 00H, 's', 00H, 'e', 00H, 'r'
	DB	00H, '\', 00H, 'd', 00H, 'o', 00H, 'w', 00H, 'n', 00H, 'l', 00H
	DB	'o', 00H, 'a', 00H, 'd', 00H, 's', 00H, '\', 00H, 'x', 00H, 'a'
	DB	00H, 's', 00H, 'h', 00H, 'x', 00H, 't', 00H, '_', 00H, 'v', 00H
	DB	'0', 00H, '.', 00H, '8', 00H, '1', 00H, '_', 00H, 'r', 00H, 'e'
	DB	00H, 'v', 00H, '.', 00H, '1', 00H, '_', 00H, 'w', 00H, 'i', 00H
	DB	't', 00H, 'h', 00H, '_', 00H, 's', 00H, 'o', 00H, 'u', 00H, 'r'
	DB	00H, 'c', 00H, 'e', 00H, 's', 00H, '\', 00H, 'x', 00H, 'a', 00H
	DB	's', 00H, 'h', 00H, 'x', 00H, 't', 00H, '_', 00H, 'v', 00H, '0'
	DB	00H, '.', 00H, '8', 00H, '1', 00H, '_', 00H, 'r', 00H, 'e', 00H
	DB	'v', 00H, '.', 00H, '1', 00H, '_', 00H, 's', 00H, 'r', 00H, 'c'
	DB	00H, '\', 00H, 'g', 00H, 'a', 00H, 'm', 00H, 'e', 00H, '_', 00H
	DB	's', 00H, 'h', 00H, 'a', 00H, 'r', 00H, 'e', 00H, 'd', 00H, '\'
	DB	00H, 'u', 00H, 't', 00H, 'l', 00H, 'a', 00H, 'r', 00H, 'r', 00H
	DB	'a', 00H, 'y', 00H, '.', 00H, 'h', 00H, 00H, 00H
$SG77292 DB	'm', 00H, '_', 00H, 'p', 00H, 'M', 00H, 'e', 00H, 'm', 00H
	DB	'o', 00H, 'r', 00H, 'y', 00H, 00H, 00H
$SG77157 DB	'(', 00H, 'e', 00H, 'l', 00H, 'e', 00H, 'm', 00H, ' ', 00H
	DB	'=', 00H, '=', 00H, ' ', 00H, 'C', 00H, 'o', 00H, 'u', 00H, 'n'
	DB	00H, 't', 00H, '(', 00H, ')', 00H, ')', 00H, ' ', 00H, '|', 00H
	DB	'|', 00H, ' ', 00H, 'I', 00H, 's', 00H, 'V', 00H, 'a', 00H, 'l'
	DB	00H, 'i', 00H, 'd', 00H, 'I', 00H, 'n', 00H, 'd', 00H, 'e', 00H
	DB	'x', 00H, '(', 00H, 'e', 00H, 'l', 00H, 'e', 00H, 'm', 00H, ')'
	DB	00H, 00H, 00H
$SG77229 DB	'c', 00H, ':', 00H, '\', 00H, 'u', 00H, 's', 00H, 'e', 00H
	DB	'r', 00H, 's', 00H, '\', 00H, 'u', 00H, 's', 00H, 'e', 00H, 'r'
	DB	00H, '\', 00H, 'd', 00H, 'o', 00H, 'w', 00H, 'n', 00H, 'l', 00H
	DB	'o', 00H, 'a', 00H, 'd', 00H, 's', 00H, '\', 00H, 'x', 00H, 'a'
	DB	00H, 's', 00H, 'h', 00H, 'x', 00H, 't', 00H, '_', 00H, 'v', 00H
	DB	'0', 00H, '.', 00H, '8', 00H, '1', 00H, '_', 00H, 'r', 00H, 'e'
	DB	00H, 'v', 00H, '.', 00H, '1', 00H, '_', 00H, 'w', 00H, 'i', 00H
	DB	't', 00H, 'h', 00H, '_', 00H, 's', 00H, 'o', 00H, 'u', 00H, 'r'
	DB	00H, 'c', 00H, 'e', 00H, 's', 00H, '\', 00H, 'x', 00H, 'a', 00H
	DB	's', 00H, 'h', 00H, 'x', 00H, 't', 00H, '_', 00H, 'v', 00H, '0'
	DB	00H, '.', 00H, '8', 00H, '1', 00H, '_', 00H, 'r', 00H, 'e', 00H
	DB	'v', 00H, '.', 00H, '1', 00H, '_', 00H, 's', 00H, 'r', 00H, 'c'
	DB	00H, '\', 00H, 'g', 00H, 'a', 00H, 'm', 00H, 'e', 00H, '_', 00H
	DB	's', 00H, 'h', 00H, 'a', 00H, 'r', 00H, 'e', 00H, 'd', 00H, '\'
	DB	00H, 'u', 00H, 't', 00H, 'l', 00H, 'a', 00H, 'r', 00H, 'r', 00H
	DB	'a', 00H, 'y', 00H, '.', 00H, 'h', 00H, 00H, 00H
	ORG $+4
$SG77230 DB	'I', 00H, 's', 00H, 'V', 00H, 'a', 00H, 'l', 00H, 'i', 00H
	DB	'd', 00H, 'I', 00H, 'n', 00H, 'd', 00H, 'e', 00H, 'x', 00H, '('
	DB	00H, 'e', 00H, 'l', 00H, 'e', 00H, 'm', 00H, ')', 00H, ' ', 00H
	DB	'|', 00H, '|', 00H, ' ', 00H, '(', 00H, ' ', 00H, 'm', 00H, '_'
	DB	00H, 'S', 00H, 'i', 00H, 'z', 00H, 'e', 00H, ' ', 00H, '=', 00H
	DB	'=', 00H, ' ', 00H, '0', 00H, ' ', 00H, ')', 00H, ' ', 00H, '|'
	DB	00H, '|', 00H, ' ', 00H, '(', 00H, ' ', 00H, 'n', 00H, 'u', 00H
	DB	'm', 00H, ' ', 00H, '=', 00H, '=', 00H, ' ', 00H, '0', 00H, ' '
	DB	00H, ')', 00H, 00H, 00H
	ORG $+4
$SG77276 DB	'c', 00H, ':', 00H, '\', 00H, 'u', 00H, 's', 00H, 'e', 00H
	DB	'r', 00H, 's', 00H, '\', 00H, 'u', 00H, 's', 00H, 'e', 00H, 'r'
	DB	00H, '\', 00H, 'd', 00H, 'o', 00H, 'w', 00H, 'n', 00H, 'l', 00H
	DB	'o', 00H, 'a', 00H, 'd', 00H, 's', 00H, '\', 00H, 'x', 00H, 'a'
	DB	00H, 's', 00H, 'h', 00H, 'x', 00H, 't', 00H, '_', 00H, 'v', 00H
	DB	'0', 00H, '.', 00H, '8', 00H, '1', 00H, '_', 00H, 'r', 00H, 'e'
	DB	00H, 'v', 00H, '.', 00H, '1', 00H, '_', 00H, 'w', 00H, 'i', 00H
	DB	't', 00H, 'h', 00H, '_', 00H, 's', 00H, 'o', 00H, 'u', 00H, 'r'
	DB	00H, 'c', 00H, 'e', 00H, 's', 00H, '\', 00H, 'x', 00H, 'a', 00H
	DB	's', 00H, 'h', 00H, 'x', 00H, 't', 00H, '_', 00H, 'v', 00H, '0'
	DB	00H, '.', 00H, '8', 00H, '1', 00H, '_', 00H, 'r', 00H, 'e', 00H
	DB	'v', 00H, '.', 00H, '1', 00H, '_', 00H, 's', 00H, 'r', 00H, 'c'
	DB	00H, '\', 00H, 'g', 00H, 'a', 00H, 'm', 00H, 'e', 00H, '_', 00H
	DB	's', 00H, 'h', 00H, 'a', 00H, 'r', 00H, 'e', 00H, 'd', 00H, '\'
	DB	00H, 'u', 00H, 't', 00H, 'l', 00H, 'm', 00H, 'e', 00H, 'm', 00H
	DB	'o', 00H, 'r', 00H, 'y', 00H, '.', 00H, 'h', 00H, 00H, 00H
	ORG $+2
$SG77279 DB	'c', 00H, ':', 00H, '\', 00H, 'u', 00H, 's', 00H, 'e', 00H
	DB	'r', 00H, 's', 00H, '\', 00H, 'u', 00H, 's', 00H, 'e', 00H, 'r'
	DB	00H, '\', 00H, 'd', 00H, 'o', 00H, 'w', 00H, 'n', 00H, 'l', 00H
	DB	'o', 00H, 'a', 00H, 'd', 00H, 's', 00H, '\', 00H, 'x', 00H, 'a'
	DB	00H, 's', 00H, 'h', 00H, 'x', 00H, 't', 00H, '_', 00H, 'v', 00H
	DB	'0', 00H, '.', 00H, '8', 00H, '1', 00H, '_', 00H, 'r', 00H, 'e'
	DB	00H, 'v', 00H, '.', 00H, '1', 00H, '_', 00H, 'w', 00H, 'i', 00H
	DB	't', 00H, 'h', 00H, '_', 00H, 's', 00H, 'o', 00H, 'u', 00H, 'r'
	DB	00H, 'c', 00H, 'e', 00H, 's', 00H, '\', 00H, 'x', 00H, 'a', 00H
	DB	's', 00H, 'h', 00H, 'x', 00H, 't', 00H, '_', 00H, 'v', 00H, '0'
	DB	00H, '.', 00H, '8', 00H, '1', 00H, '_', 00H, 'r', 00H, 'e', 00H
	DB	'v', 00H, '.', 00H, '1', 00H, '_', 00H, 's', 00H, 'r', 00H, 'c'
	DB	00H, '\', 00H, 'g', 00H, 'a', 00H, 'm', 00H, 'e', 00H, '_', 00H
	DB	's', 00H, 'h', 00H, 'a', 00H, 'r', 00H, 'e', 00H, 'd', 00H, '\'
	DB	00H, 'u', 00H, 't', 00H, 'l', 00H, 'm', 00H, 'e', 00H, 'm', 00H
	DB	'o', 00H, 'r', 00H, 'y', 00H, '.', 00H, 'h', 00H, 00H, 00H
	ORG $+2
$SG77285 DB	'c', 00H, ':', 00H, '\', 00H, 'u', 00H, 's', 00H, 'e', 00H
	DB	'r', 00H, 's', 00H, '\', 00H, 'u', 00H, 's', 00H, 'e', 00H, 'r'
	DB	00H, '\', 00H, 'd', 00H, 'o', 00H, 'w', 00H, 'n', 00H, 'l', 00H
	DB	'o', 00H, 'a', 00H, 'd', 00H, 's', 00H, '\', 00H, 'x', 00H, 'a'
	DB	00H, 's', 00H, 'h', 00H, 'x', 00H, 't', 00H, '_', 00H, 'v', 00H
	DB	'0', 00H, '.', 00H, '8', 00H, '1', 00H, '_', 00H, 'r', 00H, 'e'
	DB	00H, 'v', 00H, '.', 00H, '1', 00H, '_', 00H, 'w', 00H, 'i', 00H
	DB	't', 00H, 'h', 00H, '_', 00H, 's', 00H, 'o', 00H, 'u', 00H, 'r'
	DB	00H, 'c', 00H, 'e', 00H, 's', 00H, '\', 00H, 'x', 00H, 'a', 00H
	DB	's', 00H, 'h', 00H, 'x', 00H, 't', 00H, '_', 00H, 'v', 00H, '0'
	DB	00H, '.', 00H, '8', 00H, '1', 00H, '_', 00H, 'r', 00H, 'e', 00H
	DB	'v', 00H, '.', 00H, '1', 00H, '_', 00H, 's', 00H, 'r', 00H, 'c'
	DB	00H, '\', 00H, 'g', 00H, 'a', 00H, 'm', 00H, 'e', 00H, '_', 00H
	DB	's', 00H, 'h', 00H, 'a', 00H, 'r', 00H, 'e', 00H, 'd', 00H, '\'
	DB	00H, 'u', 00H, 't', 00H, 'l', 00H, 'm', 00H, 'e', 00H, 'm', 00H
	DB	'o', 00H, 'r', 00H, 'y', 00H, '.', 00H, 'h', 00H, 00H, 00H
	ORG $+2
$SG77289 DB	'c', 00H, ':', 00H, '\', 00H, 'u', 00H, 's', 00H, 'e', 00H
	DB	'r', 00H, 's', 00H, '\', 00H, 'u', 00H, 's', 00H, 'e', 00H, 'r'
	DB	00H, '\', 00H, 'd', 00H, 'o', 00H, 'w', 00H, 'n', 00H, 'l', 00H
	DB	'o', 00H, 'a', 00H, 'd', 00H, 's', 00H, '\', 00H, 'x', 00H, 'a'
	DB	00H, 's', 00H, 'h', 00H, 'x', 00H, 't', 00H, '_', 00H, 'v', 00H
	DB	'0', 00H, '.', 00H, '8', 00H, '1', 00H, '_', 00H, 'r', 00H, 'e'
	DB	00H, 'v', 00H, '.', 00H, '1', 00H, '_', 00H, 'w', 00H, 'i', 00H
	DB	't', 00H, 'h', 00H, '_', 00H, 's', 00H, 'o', 00H, 'u', 00H, 'r'
	DB	00H, 'c', 00H, 'e', 00H, 's', 00H, '\', 00H, 'x', 00H, 'a', 00H
	DB	's', 00H, 'h', 00H, 'x', 00H, 't', 00H, '_', 00H, 'v', 00H, '0'
	DB	00H, '.', 00H, '8', 00H, '1', 00H, '_', 00H, 'r', 00H, 'e', 00H
	DB	'v', 00H, '.', 00H, '1', 00H, '_', 00H, 's', 00H, 'r', 00H, 'c'
	DB	00H, '\', 00H, 'g', 00H, 'a', 00H, 'm', 00H, 'e', 00H, '_', 00H
	DB	's', 00H, 'h', 00H, 'a', 00H, 'r', 00H, 'e', 00H, 'd', 00H, '\'
	DB	00H, 'u', 00H, 't', 00H, 'l', 00H, 'm', 00H, 'e', 00H, 'm', 00H
	DB	'o', 00H, 'r', 00H, 'y', 00H, '.', 00H, 'h', 00H, 00H, 00H
	ORG $+2
$SG77291 DB	'c', 00H, ':', 00H, '\', 00H, 'u', 00H, 's', 00H, 'e', 00H
	DB	'r', 00H, 's', 00H, '\', 00H, 'u', 00H, 's', 00H, 'e', 00H, 'r'
	DB	00H, '\', 00H, 'd', 00H, 'o', 00H, 'w', 00H, 'n', 00H, 'l', 00H
	DB	'o', 00H, 'a', 00H, 'd', 00H, 's', 00H, '\', 00H, 'x', 00H, 'a'
	DB	00H, 's', 00H, 'h', 00H, 'x', 00H, 't', 00H, '_', 00H, 'v', 00H
	DB	'0', 00H, '.', 00H, '8', 00H, '1', 00H, '_', 00H, 'r', 00H, 'e'
	DB	00H, 'v', 00H, '.', 00H, '1', 00H, '_', 00H, 'w', 00H, 'i', 00H
	DB	't', 00H, 'h', 00H, '_', 00H, 's', 00H, 'o', 00H, 'u', 00H, 'r'
	DB	00H, 'c', 00H, 'e', 00H, 's', 00H, '\', 00H, 'x', 00H, 'a', 00H
	DB	's', 00H, 'h', 00H, 'x', 00H, 't', 00H, '_', 00H, 'v', 00H, '0'
	DB	00H, '.', 00H, '8', 00H, '1', 00H, '_', 00H, 'r', 00H, 'e', 00H
	DB	'v', 00H, '.', 00H, '1', 00H, '_', 00H, 's', 00H, 'r', 00H, 'c'
	DB	00H, '\', 00H, 'g', 00H, 'a', 00H, 'm', 00H, 'e', 00H, '_', 00H
	DB	's', 00H, 'h', 00H, 'a', 00H, 'r', 00H, 'e', 00H, 'd', 00H, '\'
	DB	00H, 'u', 00H, 't', 00H, 'l', 00H, 'm', 00H, 'e', 00H, 'm', 00H
	DB	'o', 00H, 'r', 00H, 'y', 00H, '.', 00H, 'h', 00H, 00H, 00H
CONST	ENDS
_DATA	SEGMENT
?m_DataMap@CRope@@2Udatamap_s@@A DD 00H			; CRope::m_DataMap
	DD	00H
	DD	FLAT:$SG76455
	DD	00H
_DATA	ENDS
PUBLIC	??_H@YGXPAXIIP6EPAX0@Z@Z			; `vector constructor iterator'
PUBLIC	??__G@YGXPAX0IIP6EPAX00@Z@Z			; `vector copy constructor iterator'
PUBLIC	?SinCos@@YAXMPAM0@Z				; SinCos
PUBLIC	??0Vector@@QAE@XZ				; Vector::Vector
PUBLIC	??0Vector@@QAE@MMM@Z				; Vector::Vector
PUBLIC	??0Vector@@QAE@ABV0@@Z				; Vector::Vector
PUBLIC	??0Vector@@QAE@QAM@Z				; Vector::Vector
PUBLIC	??8Vector@@QBEHABV0@@Z				; Vector::operator==
PUBLIC	??9Vector@@QBEHABV0@@Z				; Vector::operator!=
PUBLIC	??HVector@@QBE?AV0@ABV0@@Z			; Vector::operator+
PUBLIC	??GVector@@QBE?AV0@ABV0@@Z			; Vector::operator-
PUBLIC	??HVector@@QBE?AV0@M@Z				; Vector::operator+
PUBLIC	??DVector@@QBE?AV0@M@Z				; Vector::operator*
PUBLIC	??KVector@@QBE?AV0@M@Z				; Vector::operator/
PUBLIC	??YVector@@QAEAAV0@ABV0@@Z			; Vector::operator+=
PUBLIC	??ZVector@@QAEAAV0@ABV0@@Z			; Vector::operator-=
PUBLIC	?Length@Vector@@QBEMXZ				; Vector::Length
PUBLIC	??BVector@@QAEPAMXZ				; Vector::operator float *
PUBLIC	??BVector@@QBEPBMXZ				; Vector::operator float const *
PUBLIC	?Normalize@Vector@@QBE?AV1@XZ			; Vector::Normalize
PUBLIC	??D@YA?AVVector@@MABV0@@Z			; operator*
PUBLIC	?DotProduct@@YAMABVVector@@0@Z			; DotProduct
PUBLIC	??0Vector4D@@QAE@XZ				; Vector4D::Vector4D
PUBLIC	??0Vector4D@@QAE@ABV0@@Z			; Vector4D::Vector4D
PUBLIC	??BVector4D@@QAEPAMXZ				; Vector4D::operator float *
PUBLIC	??BVector4D@@QAE?AVVector@@XZ			; Vector4D::operator Vector
PUBLIC	??0Radian@@QAE@XZ				; Radian::Radian
PUBLIC	??0matrix4x4@@QAE@ABVVector@@0M@Z		; matrix4x4::matrix4x4
PUBLIC	?GetStudioTransform@matrix4x4@@QAEXAAVVector@@AAVRadian@@@Z ; matrix4x4::GetStudioTransform
PUBLIC	??0matrix4x4@@QAE@ABV0@@Z			; matrix4x4::matrix4x4
PUBLIC	??0gametrace_s@@QAE@XZ				; gametrace_s::gametrace_s
PUBLIC	?MESSAGE_BEGIN@@YAXHHPBMPAUedict_s@@@Z		; MESSAGE_BEGIN
PUBLIC	?GET_PRIVATE@@YAPAXPAUedict_s@@@Z		; GET_PRIVATE
PUBLIC	??0CDatadescGeneratedNameHolder@@QAE@PBD@Z	; CDatadescGeneratedNameHolder::CDatadescGeneratedNameHolder
PUBLIC	??1CDatadescGeneratedNameHolder@@QAE@XZ		; CDatadescGeneratedNameHolder::~CDatadescGeneratedNameHolder
PUBLIC	??0?$CUtlArray@PADV?$CUtlMemory@PADH@@@@QAE@HH@Z ; CUtlArray<char *,CUtlMemory<char *,int> >::CUtlArray<char *,CUtlMemory<char *,int> >
PUBLIC	??1?$CUtlArray@PADV?$CUtlMemory@PADH@@@@QAE@XZ	; CUtlArray<char *,CUtlMemory<char *,int> >::~CUtlArray<char *,CUtlMemory<char *,int> >
PUBLIC	??A?$CUtlArray@PADV?$CUtlMemory@PADH@@@@QAEAAPADH@Z ; CUtlArray<char *,CUtlMemory<char *,int> >::operator[]
PUBLIC	?Element@?$CUtlArray@PADV?$CUtlMemory@PADH@@@@QAEAAPADH@Z ; CUtlArray<char *,CUtlMemory<char *,int> >::Element
PUBLIC	?Base@?$CUtlArray@PADV?$CUtlMemory@PADH@@@@QAEPAPADXZ ; CUtlArray<char *,CUtlMemory<char *,int> >::Base
PUBLIC	?Count@?$CUtlArray@PADV?$CUtlMemory@PADH@@@@QBEHXZ ; CUtlArray<char *,CUtlMemory<char *,int> >::Count
PUBLIC	?RemoveAll@?$CUtlArray@PADV?$CUtlMemory@PADH@@@@QAEXXZ ; CUtlArray<char *,CUtlMemory<char *,int> >::RemoveAll
PUBLIC	?Purge@?$CUtlArray@PADV?$CUtlMemory@PADH@@@@QAEXXZ ; CUtlArray<char *,CUtlMemory<char *,int> >::Purge
PUBLIC	??0?$CUtlMemory@PADH@@QAE@HH@Z			; CUtlMemory<char *,int>::CUtlMemory<char *,int>
PUBLIC	??1?$CUtlMemory@PADH@@QAE@XZ			; CUtlMemory<char *,int>::~CUtlMemory<char *,int>
PUBLIC	??A?$CUtlMemory@PADH@@QAEAAPADH@Z		; CUtlMemory<char *,int>::operator[]
PUBLIC	?IsIdxValid@?$CUtlMemory@PADH@@QBE_NH@Z		; CUtlMemory<char *,int>::IsIdxValid
PUBLIC	?Base@?$CUtlMemory@PADH@@QAEPAPADXZ		; CUtlMemory<char *,int>::Base
PUBLIC	?Purge@?$CUtlMemory@PADH@@QAEXXZ		; CUtlMemory<char *,int>::Purge
PUBLIC	?IsExternallyAllocated@?$CUtlMemory@PADH@@QBE_NXZ ; CUtlMemory<char *,int>::IsExternallyAllocated
PUBLIC	?IsReadOnly@?$CUtlMemory@PADH@@QBE_NXZ		; CUtlMemory<char *,int>::IsReadOnly
PUBLIC	?ValidateGrowSize@?$CUtlMemory@PADH@@IAEXXZ	; CUtlMemory<char *,int>::ValidateGrowSize
PUBLIC	?ResetDbgInfo@?$CUtlArray@PADV?$CUtlMemory@PADH@@@@IAEXXZ ; CUtlArray<char *,CUtlMemory<char *,int> >::ResetDbgInfo
PUBLIC	??0IEntityFactory@@QAE@XZ			; IEntityFactory::IEntityFactory
PUBLIC	?ENT@@YAPAUedict_s@@PBUentvars_s@@@Z		; ENT
PUBLIC	?VARS@@YAPAUentvars_s@@PAUedict_s@@@Z		; VARS
PUBLIC	?ENTINDEX@@YAHPAUedict_s@@@Z			; ENTINDEX
PUBLIC	?FStrEq@@YAHPBD0@Z				; FStrEq
PUBLIC	?EMIT_SOUND@@YAXPAUedict_s@@HPBDMM@Z		; EMIT_SOUND
PUBLIC	?Get@EHANDLE@@QAEPAUedict_s@@XZ			; EHANDLE::Get
PUBLIC	??BEHANDLE@@QAEHXZ				; EHANDLE::operator int
PUBLIC	??CEHANDLE@@QAEPAVCBaseEntity@@XZ		; EHANDLE::operator->
PUBLIC	?EntityToWorldTransform@CBaseEntity@@QAEAAVmatrix4x4@@XZ ; CBaseEntity::EntityToWorldTransform
PUBLIC	?SetClassname@CBaseEntity@@QAEXPBD@Z		; CBaseEntity::SetClassname
PUBLIC	?Spawn@CBaseEntity@@UAEXXZ			; CBaseEntity::Spawn
PUBLIC	?Precache@CBaseEntity@@UAEXXZ			; CBaseEntity::Precache
PUBLIC	?KeyValue@CBaseEntity@@UAEXPAUKeyValueData_s@@@Z ; CBaseEntity::KeyValue
PUBLIC	?ObjectCaps@CBaseEntity@@UAEHXZ			; CBaseEntity::ObjectCaps
PUBLIC	?Activate@CBaseEntity@@UAEXXZ			; CBaseEntity::Activate
PUBLIC	?OnChangeLevel@CBaseEntity@@UAEXXZ		; CBaseEntity::OnChangeLevel
PUBLIC	?OnTeleport@CBaseEntity@@UAEXXZ			; CBaseEntity::OnTeleport
PUBLIC	?PortalSleep@CBaseEntity@@UAEXM@Z		; CBaseEntity::PortalSleep
PUBLIC	?StartMessage@CBaseEntity@@UAEXPAVCBasePlayer@@@Z ; CBaseEntity::StartMessage
PUBLIC	?GetPosition@CBaseEntity@@UAEMXZ		; CBaseEntity::GetPosition
PUBLIC	?OnChangeParent@CBaseEntity@@UAEXXZ		; CBaseEntity::OnChangeParent
PUBLIC	?OnClearParent@CBaseEntity@@UAEXXZ		; CBaseEntity::OnClearParent
PUBLIC	?OnRemove@CBaseEntity@@UAEXXZ			; CBaseEntity::OnRemove
PUBLIC	?Classify@CBaseEntity@@UAEHXZ			; CBaseEntity::Classify
PUBLIC	?DeathNotice@CBaseEntity@@UAEXPAUentvars_s@@@Z	; CBaseEntity::DeathNotice
PUBLIC	?IsRigidBody@CBaseEntity@@UAEHXZ		; CBaseEntity::IsRigidBody
PUBLIC	?GetState@CBaseEntity@@UAE?AW4STATE@@XZ		; CBaseEntity::GetState
PUBLIC	?GetState@CBaseEntity@@UAE?AW4STATE@@PAV1@@Z	; CBaseEntity::GetState
PUBLIC	?BloodColor@CBaseEntity@@UAEHXZ			; CBaseEntity::BloodColor
PUBLIC	?IsTriggered@CBaseEntity@@UAEHPAV1@@Z		; CBaseEntity::IsTriggered
PUBLIC	?MyMonsterPointer@CBaseEntity@@UAEPAVCBaseMonster@@XZ ; CBaseEntity::MyMonsterPointer
PUBLIC	?MySquadMonsterPointer@CBaseEntity@@UAEPAVCSquadMonster@@XZ ; CBaseEntity::MySquadMonsterPointer
PUBLIC	?GetToggleState@CBaseEntity@@UAEHXZ		; CBaseEntity::GetToggleState
PUBLIC	?AddPoints@CBaseEntity@@UAEXHH@Z		; CBaseEntity::AddPoints
PUBLIC	?AddPointsToTeam@CBaseEntity@@UAEXHH@Z		; CBaseEntity::AddPointsToTeam
PUBLIC	?AddPlayerItem@CBaseEntity@@UAEHPAVCBasePlayerItem@@@Z ; CBaseEntity::AddPlayerItem
PUBLIC	?RemovePlayerItem@CBaseEntity@@UAEHPAVCBasePlayerItem@@@Z ; CBaseEntity::RemovePlayerItem
PUBLIC	?GiveAmmo@CBaseEntity@@UAEHHPADH@Z		; CBaseEntity::GiveAmmo
PUBLIC	?GetDelay@CBaseEntity@@UAEMXZ			; CBaseEntity::GetDelay
PUBLIC	?IsMoving@CBaseEntity@@UAEHXZ			; CBaseEntity::IsMoving
PUBLIC	?OverrideReset@CBaseEntity@@UAEXXZ		; CBaseEntity::OverrideReset
PUBLIC	?TransferReset@CBaseEntity@@UAEXXZ		; CBaseEntity::TransferReset
PUBLIC	?SetToggleState@CBaseEntity@@UAEXH@Z		; CBaseEntity::SetToggleState
PUBLIC	?StartSneaking@CBaseEntity@@UAEXXZ		; CBaseEntity::StartSneaking
PUBLIC	?StopSneaking@CBaseEntity@@UAEXXZ		; CBaseEntity::StopSneaking
PUBLIC	?OnControls@CBaseEntity@@UAEHPAV1@@Z		; CBaseEntity::OnControls
PUBLIC	?IsSneaking@CBaseEntity@@UAEHXZ			; CBaseEntity::IsSneaking
PUBLIC	?IsAlive@CBaseEntity@@UAEHXZ			; CBaseEntity::IsAlive
PUBLIC	?IsBSPModel@CBaseEntity@@UAEHXZ			; CBaseEntity::IsBSPModel
PUBLIC	?IsCustomModel@CBaseEntity@@UAEHXZ		; CBaseEntity::IsCustomModel
PUBLIC	?ReflectGauss@CBaseEntity@@UAEHXZ		; CBaseEntity::ReflectGauss
PUBLIC	?HasTarget@CBaseEntity@@UAEHH@Z			; CBaseEntity::HasTarget
PUBLIC	?IsPlayer@CBaseEntity@@UAEHXZ			; CBaseEntity::IsPlayer
PUBLIC	?IsNetClient@CBaseEntity@@UAEHXZ		; CBaseEntity::IsNetClient
PUBLIC	?IsMonster@CBaseEntity@@UAEHXZ			; CBaseEntity::IsMonster
PUBLIC	?IsPushable@CBaseEntity@@UAEHXZ			; CBaseEntity::IsPushable
PUBLIC	?IsProjectile@CBaseEntity@@UAEHXZ		; CBaseEntity::IsProjectile
PUBLIC	?IsFuncScreen@CBaseEntity@@UAEHXZ		; CBaseEntity::IsFuncScreen
PUBLIC	?IsPortal@CBaseEntity@@UAEHXZ			; CBaseEntity::IsPortal
PUBLIC	?IsTank@CBaseEntity@@UAEHXZ			; CBaseEntity::IsTank
PUBLIC	?IsMover@CBaseEntity@@UAEHXZ			; CBaseEntity::IsMover
PUBLIC	?IsBreakable@CBaseEntity@@UAEHXZ		; CBaseEntity::IsBreakable
PUBLIC	?TeamID@CBaseEntity@@UAEPBDXZ			; CBaseEntity::TeamID
PUBLIC	?Think@CBaseEntity@@UAEXXZ			; CBaseEntity::Think
PUBLIC	?Use@CBaseEntity@@UAEXPAV1@0W4USE_TYPE@@M@Z	; CBaseEntity::Use
PUBLIC	?Touch@CBaseEntity@@UAEXPAV1@@Z			; CBaseEntity::Touch
PUBLIC	?Blocked@CBaseEntity@@UAEXPAV1@@Z		; CBaseEntity::Blocked
PUBLIC	?MoveDone@CBaseEntity@@UAEXXZ			; CBaseEntity::MoveDone
PUBLIC	??2CBaseEntity@@SAPAXIPAUentvars_s@@@Z		; CBaseEntity::operator new
PUBLIC	??3CBaseEntity@@SAXPAXPAUentvars_s@@@Z		; CBaseEntity::operator delete
PUBLIC	?Respawn@CBaseEntity@@UAEPAV1@XZ		; CBaseEntity::Respawn
PUBLIC	?UpdateOwner@CBaseEntity@@UAEXXZ		; CBaseEntity::UpdateOwner
PUBLIC	?FBecomeProne@CBaseEntity@@UAEHXZ		; CBaseEntity::FBecomeProne
PUBLIC	?edict@CBaseEntity@@QAEPAUedict_s@@XZ		; CBaseEntity::edict
PUBLIC	?Center@CBaseEntity@@UAE?AVVector@@XZ		; CBaseEntity::Center
PUBLIC	?EyePosition@CBaseEntity@@UAE?AVVector@@XZ	; CBaseEntity::EyePosition
PUBLIC	?EarPosition@CBaseEntity@@UAE?AVVector@@XZ	; CBaseEntity::EarPosition
PUBLIC	?BodyTarget@CBaseEntity@@UAE?AVVector@@ABV2@@Z	; CBaseEntity::BodyTarget
PUBLIC	?IsPointSized@CBaseEntity@@UBEHXZ		; CBaseEntity::IsPointSized
PUBLIC	?Illumination@CBaseEntity@@UAEHXZ		; CBaseEntity::Illumination
PUBLIC	??0CBaseEntity@@QAE@XZ				; CBaseEntity::CBaseEntity
PUBLIC	??1CBaseEntity@@QAE@XZ				; CBaseEntity::~CBaseEntity
PUBLIC	?GetState@CBaseDelay@@UAE?AW4STATE@@XZ		; CBaseDelay::GetState
PUBLIC	??0CBaseDelay@@QAE@XZ				; CBaseDelay::CBaseDelay
PUBLIC	??1CBaseDelay@@QAE@XZ				; CBaseDelay::~CBaseDelay
PUBLIC	?GetBaseMap@CRope@@SAPAUdatamap_s@@XZ		; CRope::GetBaseMap
PUBLIC	?GetDataDescMap@CRope@@UAEPAUdatamap_s@@XZ	; CRope::GetDataDescMap
PUBLIC	??0CRope@@QAE@XZ				; CRope::CRope
PUBLIC	?KeyValue@CRope@@UAEXPAUKeyValueData_s@@@Z	; CRope::KeyValue
PUBLIC	?Precache@CRope@@UAEXXZ				; CRope::Precache
PUBLIC	?Spawn@CRope@@UAEXXZ				; CRope::Spawn
PUBLIC	?Think@CRope@@UAEXXZ				; CRope::Think
PUBLIC	?ComputeForces@CRope@@QAEXPAURopeSampleData@@@Z	; CRope::ComputeForces
PUBLIC	?ComputeForces@CRope@@QAEXPAPAVCRopeSegment@@@Z	; CRope::ComputeForces
PUBLIC	?ComputeSampleForce@CRope@@QAEXAAURopeSampleData@@@Z ; CRope::ComputeSampleForce
PUBLIC	?ComputeSpringForce@CRope@@QAEXAAURopeSampleData@@0@Z ; CRope::ComputeSpringForce
PUBLIC	?RK4Integrate@CRope@@QAEXM@Z			; CRope::RK4Integrate
PUBLIC	?TraceModels@CRope@@QAEXXZ			; CRope::TraceModels
PUBLIC	?MoveUp@CRope@@QAE_NM@Z				; CRope::MoveUp
PUBLIC	?MoveDown@CRope@@QAE_NM@Z			; CRope::MoveDown
PUBLIC	?GetAttachedObjectsVelocity@CRope@@QBE?AVVector@@XZ ; CRope::GetAttachedObjectsVelocity
PUBLIC	?ApplyForceFromPlayer@CRope@@QAEXABVVector@@@Z	; CRope::ApplyForceFromPlayer
PUBLIC	?ApplyForceToSegment@CRope@@QAEXABVVector@@H@Z	; CRope::ApplyForceToSegment
PUBLIC	?AttachObjectToSegment@CRope@@QAEXPAVCRopeSegment@@@Z ; CRope::AttachObjectToSegment
PUBLIC	?DetachObject@CRope@@QAEXXZ			; CRope::DetachObject
PUBLIC	?IsAcceptingAttachment@CRope@@QBE_NXZ		; CRope::IsAcceptingAttachment
PUBLIC	?ShouldCreak@CRope@@QBE_NXZ			; CRope::ShouldCreak
PUBLIC	?GetBodyModel@CRope@@QBEHXZ			; CRope::GetBodyModel
PUBLIC	?GetEndingModel@CRope@@QBEHXZ			; CRope::GetEndingModel
PUBLIC	?GetAlignmentAngles@CRope@@QAEXABVVector@@0AAV2@@Z ; CRope::GetAlignmentAngles
PUBLIC	?GetSegmentLength@CRope@@QBEMH@Z		; CRope::GetSegmentLength
PUBLIC	?GetRopeLength@CRope@@QBEMXZ			; CRope::GetRopeLength
PUBLIC	?GetRopeOrigin@CRope@@QBE?AVVector@@XZ		; CRope::GetRopeOrigin
PUBLIC	?IsValidSegmentIndex@CRope@@QBE_NH@Z		; CRope::IsValidSegmentIndex
PUBLIC	?GetSegmentOrigin@CRope@@QBE?AVVector@@H@Z	; CRope::GetSegmentOrigin
PUBLIC	?GetSegmentAttachmentPoint@CRope@@QBE?AVVector@@H@Z ; CRope::GetSegmentAttachmentPoint
PUBLIC	?SetAttachedObjectsSegment@CRope@@QAEXPAVCRopeSegment@@@Z ; CRope::SetAttachedObjectsSegment
PUBLIC	?GetSegmentDirFromOrigin@CRope@@QBE?AVVector@@H@Z ; CRope::GetSegmentDirFromOrigin
PUBLIC	?GetAttachedObjectsPosition@CRope@@QBE?AVVector@@XZ ; CRope::GetAttachedObjectsPosition
PUBLIC	?SetSegmentOrigin@CRope@@QAEXPAVCRopeSegment@@0@Z ; CRope::SetSegmentOrigin
PUBLIC	?SetSegmentAngles@CRope@@QAEXPAVCRopeSegment@@0@Z ; CRope::SetSegmentAngles
PUBLIC	?SendUpdateBones@CRope@@QAEXXZ			; CRope::SendUpdateBones
PUBLIC	??0RopeSampleData@@QAE@XZ			; RopeSampleData::RopeSampleData
PUBLIC	?TruncateEpsilon@@YAXAAVVector@@@Z		; TruncateEpsilon
PUBLIC	??$DataMapAccess@VCBaseDelay@@@@YAXPAVCBaseDelay@@PAPAUdatamap_s@@@Z ; DataMapAccess<CBaseDelay>
PUBLIC	??$DataMapInit@VCRope@@@@YAPAUdatamap_s@@PAVCRope@@@Z ; DataMapInit<CRope>
PUBLIC	??0?$CEntityFactory@VCRope@@@@QAE@PBD@Z		; CEntityFactory<CRope>::CEntityFactory<CRope>
PUBLIC	?Create@?$CEntityFactory@VCRope@@@@UAEPAVCBaseEntity@@PBDPAUentvars_s@@@Z ; CEntityFactory<CRope>::Create
PUBLIC	?Destroy@?$CEntityFactory@VCRope@@@@UAEXPAVCBaseEntity@@@Z ; CEntityFactory<CRope>::Destroy
PUBLIC	?GetEntitySize@?$CEntityFactory@VCRope@@@@UAEIXZ ; CEntityFactory<CRope>::GetEntitySize
PUBLIC	??$GetClassPtr@VCRope@@@@YAPAVCRope@@PAV0@PBD@Z	; GetClassPtr<CRope>
PUBLIC	??$Destruct@PAD@@YAXPAPAD@Z			; Destruct<char *>
PUBLIC	??_7IEntityFactory@@6B@				; IEntityFactory::`vftable'
PUBLIC	??_7CBaseEntity@@6B@				; CBaseEntity::`vftable'
PUBLIC	??_C@_06MLKDMCBD@parent@			; `string'
PUBLIC	??_C@_08JJJAOBDI@movewith@			; `string'
PUBLIC	??_C@_0M@EAELDHJO@parentflags@			; `string'
PUBLIC	??_C@_05IAKJCFIM@style@				; `string'
PUBLIC	??_C@_0L@IKCANML@reflection@			; `string'
PUBLIC	??_C@_0N@JILDNHAP@vlight_cache@			; `string'
PUBLIC	??_C@_00CNPNBAHC@@				; `string'
PUBLIC	??_7CBaseDelay@@6B@				; CBaseDelay::`vftable'
PUBLIC	??_7CRope@@6B@					; CRope::`vftable'
PUBLIC	?g_pTempList@@3PAY0EA@URopeSampleData@@A	; g_pTempList
PUBLIC	?g_DataMapHolder@CRope_DataDescInit@@3PAUdatamap_s@@A ; CRope_DataDescInit::g_DataMapHolder
PUBLIC	??_7?$CEntityFactory@VCRope@@@@6B@		; CEntityFactory<CRope>::`vftable'
PUBLIC	??_C@_1MO@LCPOAHHB@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAu?$AAs?$AAe?$AAr?$AA?2?$AAd@ ; `string'
PUBLIC	??_C@_1BM@PFNFCCHH@?$AA?$CB?$AAI?$AAs?$AAR?$AAe?$AAa?$AAd?$AAO?$AAn?$AAl?$AAy?$AA?$CI?$AA?$CJ@ ; `string'
PUBLIC	??_C@_1BM@CKILBAKK@?$AAI?$AAs?$AAI?$AAd?$AAx?$AAV?$AAa?$AAl?$AAi?$AAd?$AA?$CI?$AAi?$AA?$CJ@ ; `string'
PUBLIC	??_R4CBaseEntity@@6B@				; CBaseEntity::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCBaseEntity@@@8				; CBaseEntity `RTTI Type Descriptor'
PUBLIC	??_R3CBaseEntity@@8				; CBaseEntity::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CBaseEntity@@8				; CBaseEntity::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CBaseEntity@@8			; CBaseEntity::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4IEntityFactory@@6B@			; IEntityFactory::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVIEntityFactory@@@8			; IEntityFactory `RTTI Type Descriptor'
PUBLIC	??_R3IEntityFactory@@8				; IEntityFactory::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2IEntityFactory@@8				; IEntityFactory::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@IEntityFactory@@8			; IEntityFactory::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4CBaseDelay@@6B@				; CBaseDelay::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCBaseDelay@@@8				; CBaseDelay `RTTI Type Descriptor'
PUBLIC	??_R3CBaseDelay@@8				; CBaseDelay::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CBaseDelay@@8				; CBaseDelay::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CBaseDelay@@8			; CBaseDelay::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4CRope@@6B@					; CRope::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCRope@@@8				; CRope `RTTI Type Descriptor'
PUBLIC	??_R3CRope@@8					; CRope::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CRope@@8					; CRope::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CRope@@8				; CRope::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4?$CEntityFactory@VCRope@@@@6B@		; CEntityFactory<CRope>::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$CEntityFactory@VCRope@@@@@8		; CEntityFactory<CRope> `RTTI Type Descriptor'
PUBLIC	??_R3?$CEntityFactory@VCRope@@@@8		; CEntityFactory<CRope>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$CEntityFactory@VCRope@@@@8		; CEntityFactory<CRope>::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$CEntityFactory@VCRope@@@@8	; CEntityFactory<CRope>::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	__real@00000000
PUBLIC	__real@0000000000000000
PUBLIC	__real@3a83126f
PUBLIC	__real@3ca3d70a
PUBLIC	__real@3dcccccd
PUBLIC	__real@3e2aaaab
PUBLIC	__real@3e4ccccd
PUBLIC	__real@3f000000
PUBLIC	__real@3f4ccccd
PUBLIC	__real@3f800000
PUBLIC	__real@3f91df46a2529d39
PUBLIC	__real@3ff0000000000000
PUBLIC	__real@40000000
PUBLIC	__real@4000000000000000
PUBLIC	__real@4034000000000000
PUBLIC	__real@403a000000000000
PUBLIC	__real@40a3880000000000
PUBLIC	__real@41200000
PUBLIC	__real@42652ee1
PUBLIC	__real@42b40000
PUBLIC	__real@42c80000
PUBLIC	__real@43000000
PUBLIC	__real@44000000
PUBLIC	__real@469c4000
PUBLIC	__real@471c4000
PUBLIC	__real@bd23d70a
PUBLIC	__real@bf800000
PUBLIC	__real@c2480000
PUBLIC	__xmm@80000000000000008000000000000000
PUBLIC	__xmm@80000000800000008000000080000000
EXTRN	__purecall:PROC
EXTRN	??3@YAXPAXI@Z:PROC				; operator delete
EXTRN	_atexit:PROC
EXTRN	__Init_thread_header:PROC
EXTRN	__Init_thread_abort:PROC
EXTRN	__Init_thread_footer:PROC
EXTRN	_memset:PROC
EXTRN	_strlen:PROC
EXTRN	_free:PROC
EXTRN	_malloc:PROC
EXTRN	_atoi:PROC
EXTRN	_acos:PROC
EXTRN	_atan2:PROC
EXTRN	_sqrt:PROC
EXTRN	??0matrix4x4@@QAE@XZ:PROC			; matrix4x4::matrix4x4
EXTRN	??4matrix4x4@@QAEAAV0@ABV0@@Z:PROC		; matrix4x4::operator=
EXTRN	?Invert@matrix4x4@@QBE?AV1@XZ:PROC		; matrix4x4::Invert
EXTRN	?ConcatTransforms@matrix4x4@@QAE?AV1@V1@@Z:PROC	; matrix4x4::ConcatTransforms
EXTRN	?ClearBounds@@YAXAAVVector@@0@Z:PROC		; ClearBounds
EXTRN	?ExpandBounds@@YAXAAVVector@@0M@Z:PROC		; ExpandBounds
EXTRN	?AddPointToBounds@@YAXABVVector@@AAV1@1M@Z:PROC	; AddPointToBounds
EXTRN	?Q_atoi@@YAHPBD@Z:PROC				; Q_atoi
EXTRN	?Q_strncmp@@YAHPBD0H@Z:PROC			; Q_strncmp
EXTRN	__wassert:PROC
EXTRN	?UTIL_Remove@@YAXPAVCBaseEntity@@@Z:PROC	; UTIL_Remove
EXTRN	?EntityFactoryDictionary@@YAPAVIEntityFactoryDictionary@@XZ:PROC ; EntityFactoryDictionary
EXTRN	?DBG_EntOfVars@@YAPAUedict_s@@PBUentvars_s@@@Z:PROC ; DBG_EntOfVars
EXTRN	?UTIL_SetSize@@YAXPAUentvars_s@@ABVVector@@1@Z:PROC ; UTIL_SetSize
EXTRN	?UTIL_TraceLine@@YAXABVVector@@0W4IGNORE_MONSTERS@@PAUedict_s@@PAUgametrace_s@@@Z:PROC ; UTIL_TraceLine
EXTRN	?EMIT_SOUND_DYN@@YAXPAUedict_s@@HPBDMMHH@Z:PROC	; EMIT_SOUND_DYN
EXTRN	?UTIL_GetModelType@@YA?AW4modtype_t@@H@Z:PROC	; UTIL_GetModelType
EXTRN	??0CMeshDesc@@QAE@XZ:PROC			; CMeshDesc::CMeshDesc
EXTRN	??1CMeshDesc@@QAE@XZ:PROC			; CMeshDesc::~CMeshDesc
EXTRN	?GetDataDescMap@CBaseEntity@@UAEPAUdatamap_s@@XZ:PROC ; CBaseEntity::GetDataDescMap
EXTRN	?SetAbsOrigin@CBaseEntity@@QAEXABVVector@@@Z:PROC ; CBaseEntity::SetAbsOrigin
EXTRN	?GetAbsOrigin@CBaseEntity@@QBEABVVector@@XZ:PROC ; CBaseEntity::GetAbsOrigin
EXTRN	?SetAbsAngles@CBaseEntity@@QAEXABVVector@@@Z:PROC ; CBaseEntity::SetAbsAngles
EXTRN	?GetAbsVelocity@CBaseEntity@@QBEABVVector@@XZ:PROC ; CBaseEntity::GetAbsVelocity
EXTRN	?CalcAbsolutePosition@CBaseEntity@@QAEXXZ:PROC	; CBaseEntity::CalcAbsolutePosition
EXTRN	?Save@CBaseEntity@@UAEHAAVCSave@@@Z:PROC	; CBaseEntity::Save
EXTRN	?Restore@CBaseEntity@@UAEHAAVCRestore@@@Z:PROC	; CBaseEntity::Restore
EXTRN	?SetObjectCollisionBox@CBaseEntity@@UAEXXZ:PROC	; CBaseEntity::SetObjectCollisionBox
EXTRN	?SetNextThink@CBaseEntity@@UAEXM@Z:PROC		; CBaseEntity::SetNextThink
EXTRN	?TraceAttack@CBaseEntity@@UAEXPAUentvars_s@@MVVector@@PAUgametrace_s@@H@Z:PROC ; CBaseEntity::TraceAttack
EXTRN	?TakeDamage@CBaseEntity@@UAEHPAUentvars_s@@0MH@Z:PROC ; CBaseEntity::TakeDamage
EXTRN	?TakeHealth@CBaseEntity@@UAEHMH@Z:PROC		; CBaseEntity::TakeHealth
EXTRN	?TakeArmor@CBaseEntity@@UAEHMH@Z:PROC		; CBaseEntity::TakeArmor
EXTRN	?Killed@CBaseEntity@@UAEXPAUentvars_s@@H@Z:PROC	; CBaseEntity::Killed
EXTRN	?TraceBleed@CBaseEntity@@UAEXMVVector@@PAUgametrace_s@@H@Z:PROC ; CBaseEntity::TraceBleed
EXTRN	?DamageDecal@CBaseEntity@@UAEHH@Z:PROC		; CBaseEntity::DamageDecal
EXTRN	?IsInWorld@CBaseEntity@@UAEHH@Z:PROC		; CBaseEntity::IsInWorld
EXTRN	?GetNextTarget@CBaseEntity@@UAEPAV1@XZ:PROC	; CBaseEntity::GetNextTarget
EXTRN	?FVisible@CBaseEntity@@UAEHPAV1@@Z:PROC		; CBaseEntity::FVisible
EXTRN	?FVisible@CBaseEntity@@UAEHABVVector@@@Z:PROC	; CBaseEntity::FVisible
EXTRN	?ShouldCollide@CBaseEntity@@UAEHPAV1@@Z:PROC	; CBaseEntity::ShouldCollide
EXTRN	?KeyValue@CBaseDelay@@UAEXPAUKeyValueData_s@@@Z:PROC ; CBaseDelay::KeyValue
EXTRN	?GetDataDescMap@CBaseDelay@@UAEPAUdatamap_s@@XZ:PROC ; CBaseDelay::GetDataDescMap
EXTRN	?GetModelPtr@CBaseAnimating@@SAPAXH@Z:PROC	; CBaseAnimating::GetModelPtr
EXTRN	?GetAttachment@CBaseAnimating@@QAEXHAAVVector@@0@Z:PROC ; CBaseAnimating::GetAttachment
EXTRN	?CreateSegment@CRopeSegment@@SAPAV1@HM@Z:PROC	; CRopeSegment::CreateSegment
EXTRN	?ApplyExternalForce@CRopeSegment@@QAEXABVVector@@@Z:PROC ; CRopeSegment::ApplyExternalForce
EXTRN	?SetCanBeGrabbed@CRopeSegment@@QAEX_N@Z:PROC	; CRopeSegment::SetCanBeGrabbed
EXTRN	?SetMasterRope@CRopeSegment@@QAEXPAVCRope@@@Z:PROC ; CRopeSegment::SetMasterRope
EXTRN	@__security_check_cookie@4:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	__Init_thread_epoch:DWORD
EXTRN	?g_vecZero@@3VVector@@B:BYTE			; g_vecZero
EXTRN	?g_engfuncs@@3Uenginefuncs_s@@A:BYTE		; g_engfuncs
EXTRN	?gpGlobals@@3PAUglobalvars_t@@A:DWORD		; gpGlobals
EXTRN	?m_DataMap@CBaseDelay@@2Udatamap_s@@A:BYTE	; CBaseDelay::m_DataMap
EXTRN	?gmsgSetupBones@@3HA:DWORD			; gmsgSetupBones
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
EXTRN	__tls_array:DWORD
EXTRN	__tls_index:DWORD
_BSS	SEGMENT
?g_pTempList@@3PAY0EA@URopeSampleData@@A DB 04b00H DUP (?) ; g_pTempList
?g_DataMapHolder@CRope_DataDescInit@@3PAUdatamap_s@@A DD 01H DUP (?) ; CRope_DataDescInit::g_DataMapHolder
_BSS	ENDS
;	COMDAT ?nameHolder@?1???$DataMapInit@VCRope@@@@YAPAUdatamap_s@@PAVCRope@@@Z@4VCDatadescGeneratedNameHolder@@A
_BSS	SEGMENT
?nameHolder@?1???$DataMapInit@VCRope@@@@YAPAUdatamap_s@@PAVCRope@@@Z@4VCDatadescGeneratedNameHolder@@A DB 01cH DUP (?) ; `DataMapInit<CRope>'::`2'::nameHolder
_BSS	ENDS
;	COMDAT ?$TSS0@?1???$DataMapInit@VCRope@@@@YAPAUdatamap_s@@PAVCRope@@@Z@4HA
_BSS	SEGMENT
?$TSS0@?1???$DataMapInit@VCRope@@@@YAPAUdatamap_s@@PAVCRope@@@Z@4HA DD 01H DUP (?) ; TSS0<`template-parameter-2',VCRope::taMapInit>
_BSS	ENDS
_BSS	SEGMENT
?env_rope@@3V?$CEntityFactory@VCRope@@@@A DD 01H DUP (?) ; env_rope
_BSS	ENDS
CRT$XCU	SEGMENT
?g_pTempList$initializer$@@3P6AXXZA DD FLAT:??__Eg_pTempList@@YAXXZ ; g_pTempList$initializer$
CRT$XCU	ENDS
;	COMDAT __xmm@80000000800000008000000080000000
CONST	SEGMENT
__xmm@80000000800000008000000080000000 DB 00H, 00H, 00H, 080H, 00H, 00H, 00H
	DB	080H, 00H, 00H, 00H, 080H, 00H, 00H, 00H, 080H
CONST	ENDS
;	COMDAT __xmm@80000000000000008000000000000000
CONST	SEGMENT
__xmm@80000000000000008000000000000000 DB 00H, 00H, 00H, 00H, 00H, 00H, 00H
	DB	080H, 00H, 00H, 00H, 00H, 00H, 00H, 00H, 080H
CONST	ENDS
;	COMDAT __real@c2480000
CONST	SEGMENT
__real@c2480000 DD 0c2480000r			; -50
CONST	ENDS
;	COMDAT __real@bf800000
CONST	SEGMENT
__real@bf800000 DD 0bf800000r			; -1
CONST	ENDS
;	COMDAT __real@bd23d70a
CONST	SEGMENT
__real@bd23d70a DD 0bd23d70ar			; -0.04
CONST	ENDS
;	COMDAT __real@471c4000
CONST	SEGMENT
__real@471c4000 DD 0471c4000r			; 40000
CONST	ENDS
;	COMDAT __real@469c4000
CONST	SEGMENT
__real@469c4000 DD 0469c4000r			; 20000
CONST	ENDS
;	COMDAT __real@44000000
CONST	SEGMENT
__real@44000000 DD 044000000r			; 512
CONST	ENDS
;	COMDAT __real@43000000
CONST	SEGMENT
__real@43000000 DD 043000000r			; 128
CONST	ENDS
;	COMDAT __real@42c80000
CONST	SEGMENT
__real@42c80000 DD 042c80000r			; 100
CONST	ENDS
;	COMDAT __real@42b40000
CONST	SEGMENT
__real@42b40000 DD 042b40000r			; 90
CONST	ENDS
;	COMDAT __real@42652ee1
CONST	SEGMENT
__real@42652ee1 DD 042652ee1r			; 57.2958
CONST	ENDS
;	COMDAT __real@41200000
CONST	SEGMENT
__real@41200000 DD 041200000r			; 10
CONST	ENDS
;	COMDAT __real@40a3880000000000
CONST	SEGMENT
__real@40a3880000000000 DQ 040a3880000000000r	; 2500
CONST	ENDS
;	COMDAT __real@403a000000000000
CONST	SEGMENT
__real@403a000000000000 DQ 0403a000000000000r	; 26
CONST	ENDS
;	COMDAT __real@4034000000000000
CONST	SEGMENT
__real@4034000000000000 DQ 04034000000000000r	; 20
CONST	ENDS
;	COMDAT __real@4000000000000000
CONST	SEGMENT
__real@4000000000000000 DQ 04000000000000000r	; 2
CONST	ENDS
;	COMDAT __real@40000000
CONST	SEGMENT
__real@40000000 DD 040000000r			; 2
CONST	ENDS
;	COMDAT __real@3ff0000000000000
CONST	SEGMENT
__real@3ff0000000000000 DQ 03ff0000000000000r	; 1
CONST	ENDS
;	COMDAT __real@3f91df46a2529d39
CONST	SEGMENT
__real@3f91df46a2529d39 DQ 03f91df46a2529d39r	; 0.0174533
CONST	ENDS
;	COMDAT __real@3f800000
CONST	SEGMENT
__real@3f800000 DD 03f800000r			; 1
CONST	ENDS
;	COMDAT __real@3f4ccccd
CONST	SEGMENT
__real@3f4ccccd DD 03f4ccccdr			; 0.8
CONST	ENDS
;	COMDAT __real@3f000000
CONST	SEGMENT
__real@3f000000 DD 03f000000r			; 0.5
CONST	ENDS
;	COMDAT __real@3e4ccccd
CONST	SEGMENT
__real@3e4ccccd DD 03e4ccccdr			; 0.2
CONST	ENDS
;	COMDAT __real@3e2aaaab
CONST	SEGMENT
__real@3e2aaaab DD 03e2aaaabr			; 0.166667
CONST	ENDS
;	COMDAT __real@3dcccccd
CONST	SEGMENT
__real@3dcccccd DD 03dcccccdr			; 0.1
CONST	ENDS
;	COMDAT __real@3ca3d70a
CONST	SEGMENT
__real@3ca3d70a DD 03ca3d70ar			; 0.02
CONST	ENDS
;	COMDAT __real@3a83126f
CONST	SEGMENT
__real@3a83126f DD 03a83126fr			; 0.001
CONST	ENDS
;	COMDAT __real@0000000000000000
CONST	SEGMENT
__real@0000000000000000 DQ 00000000000000000r	; 0
CONST	ENDS
;	COMDAT __real@00000000
CONST	SEGMENT
__real@00000000 DD 000000000r			; 0
CONST	ENDS
;	COMDAT ??_R1A@?0A@EA@?$CEntityFactory@VCRope@@@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$CEntityFactory@VCRope@@@@8 DD FLAT:??_R0?AV?$CEntityFactory@VCRope@@@@@8 ; CEntityFactory<CRope>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$CEntityFactory@VCRope@@@@8
rdata$r	ENDS
;	COMDAT ??_R2?$CEntityFactory@VCRope@@@@8
rdata$r	SEGMENT
??_R2?$CEntityFactory@VCRope@@@@8 DD FLAT:??_R1A@?0A@EA@?$CEntityFactory@VCRope@@@@8 ; CEntityFactory<CRope>::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@IEntityFactory@@8
rdata$r	ENDS
;	COMDAT ??_R3?$CEntityFactory@VCRope@@@@8
rdata$r	SEGMENT
??_R3?$CEntityFactory@VCRope@@@@8 DD 00H		; CEntityFactory<CRope>::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2?$CEntityFactory@VCRope@@@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$CEntityFactory@VCRope@@@@@8
data$r	SEGMENT
??_R0?AV?$CEntityFactory@VCRope@@@@@8 DD FLAT:??_7type_info@@6B@ ; CEntityFactory<CRope> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$CEntityFactory@VCRope@@@@', 00H
data$r	ENDS
;	COMDAT ??_R4?$CEntityFactory@VCRope@@@@6B@
rdata$r	SEGMENT
??_R4?$CEntityFactory@VCRope@@@@6B@ DD 00H		; CEntityFactory<CRope>::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$CEntityFactory@VCRope@@@@@8
	DD	FLAT:??_R3?$CEntityFactory@VCRope@@@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@CRope@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CRope@@8 DD FLAT:??_R0?AVCRope@@@8	; CRope::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CRope@@8
rdata$r	ENDS
;	COMDAT ??_R2CRope@@8
rdata$r	SEGMENT
??_R2CRope@@8 DD FLAT:??_R1A@?0A@EA@CRope@@8		; CRope::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@CBaseDelay@@8
	DD	FLAT:??_R1A@?0A@EA@CBaseEntity@@8
rdata$r	ENDS
;	COMDAT ??_R3CRope@@8
rdata$r	SEGMENT
??_R3CRope@@8 DD 00H					; CRope::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2CRope@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCRope@@@8
data$r	SEGMENT
??_R0?AVCRope@@@8 DD FLAT:??_7type_info@@6B@		; CRope `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCRope@@', 00H
data$r	ENDS
;	COMDAT ??_R4CRope@@6B@
rdata$r	SEGMENT
??_R4CRope@@6B@ DD 00H					; CRope::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCRope@@@8
	DD	FLAT:??_R3CRope@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@CBaseDelay@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CBaseDelay@@8 DD FLAT:??_R0?AVCBaseDelay@@@8 ; CBaseDelay::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CBaseDelay@@8
rdata$r	ENDS
;	COMDAT ??_R2CBaseDelay@@8
rdata$r	SEGMENT
??_R2CBaseDelay@@8 DD FLAT:??_R1A@?0A@EA@CBaseDelay@@8	; CBaseDelay::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@CBaseEntity@@8
rdata$r	ENDS
;	COMDAT ??_R3CBaseDelay@@8
rdata$r	SEGMENT
??_R3CBaseDelay@@8 DD 00H				; CBaseDelay::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2CBaseDelay@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCBaseDelay@@@8
data$r	SEGMENT
??_R0?AVCBaseDelay@@@8 DD FLAT:??_7type_info@@6B@	; CBaseDelay `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCBaseDelay@@', 00H
data$r	ENDS
;	COMDAT ??_R4CBaseDelay@@6B@
rdata$r	SEGMENT
??_R4CBaseDelay@@6B@ DD 00H				; CBaseDelay::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCBaseDelay@@@8
	DD	FLAT:??_R3CBaseDelay@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@IEntityFactory@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@IEntityFactory@@8 DD FLAT:??_R0?AVIEntityFactory@@@8 ; IEntityFactory::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3IEntityFactory@@8
rdata$r	ENDS
;	COMDAT ??_R2IEntityFactory@@8
rdata$r	SEGMENT
??_R2IEntityFactory@@8 DD FLAT:??_R1A@?0A@EA@IEntityFactory@@8 ; IEntityFactory::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3IEntityFactory@@8
rdata$r	SEGMENT
??_R3IEntityFactory@@8 DD 00H				; IEntityFactory::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2IEntityFactory@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVIEntityFactory@@@8
data$r	SEGMENT
??_R0?AVIEntityFactory@@@8 DD FLAT:??_7type_info@@6B@	; IEntityFactory `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVIEntityFactory@@', 00H
data$r	ENDS
;	COMDAT ??_R4IEntityFactory@@6B@
rdata$r	SEGMENT
??_R4IEntityFactory@@6B@ DD 00H				; IEntityFactory::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVIEntityFactory@@@8
	DD	FLAT:??_R3IEntityFactory@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@CBaseEntity@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CBaseEntity@@8 DD FLAT:??_R0?AVCBaseEntity@@@8 ; CBaseEntity::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CBaseEntity@@8
rdata$r	ENDS
;	COMDAT ??_R2CBaseEntity@@8
rdata$r	SEGMENT
??_R2CBaseEntity@@8 DD FLAT:??_R1A@?0A@EA@CBaseEntity@@8 ; CBaseEntity::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3CBaseEntity@@8
rdata$r	SEGMENT
??_R3CBaseEntity@@8 DD 00H				; CBaseEntity::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2CBaseEntity@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCBaseEntity@@@8
data$r	SEGMENT
??_R0?AVCBaseEntity@@@8 DD FLAT:??_7type_info@@6B@	; CBaseEntity `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCBaseEntity@@', 00H
data$r	ENDS
;	COMDAT ??_R4CBaseEntity@@6B@
rdata$r	SEGMENT
??_R4CBaseEntity@@6B@ DD 00H				; CBaseEntity::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCBaseEntity@@@8
	DD	FLAT:??_R3CBaseEntity@@8
rdata$r	ENDS
;	COMDAT ??_C@_1BM@CKILBAKK@?$AAI?$AAs?$AAI?$AAd?$AAx?$AAV?$AAa?$AAl?$AAi?$AAd?$AA?$CI?$AAi?$AA?$CJ@
CONST	SEGMENT
??_C@_1BM@CKILBAKK@?$AAI?$AAs?$AAI?$AAd?$AAx?$AAV?$AAa?$AAl?$AAi?$AAd?$AA?$CI?$AAi?$AA?$CJ@ DB 'I'
	DB	00H, 's', 00H, 'I', 00H, 'd', 00H, 'x', 00H, 'V', 00H, 'a', 00H
	DB	'l', 00H, 'i', 00H, 'd', 00H, '(', 00H, 'i', 00H, ')', 00H, 00H
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_1BM@PFNFCCHH@?$AA?$CB?$AAI?$AAs?$AAR?$AAe?$AAa?$AAd?$AAO?$AAn?$AAl?$AAy?$AA?$CI?$AA?$CJ@
CONST	SEGMENT
??_C@_1BM@PFNFCCHH@?$AA?$CB?$AAI?$AAs?$AAR?$AAe?$AAa?$AAd?$AAO?$AAn?$AAl?$AAy?$AA?$CI?$AA?$CJ@ DB '!'
	DB	00H, 'I', 00H, 's', 00H, 'R', 00H, 'e', 00H, 'a', 00H, 'd', 00H
	DB	'O', 00H, 'n', 00H, 'l', 00H, 'y', 00H, '(', 00H, ')', 00H, 00H
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_1MO@LCPOAHHB@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAu?$AAs?$AAe?$AAr?$AA?2?$AAd@
CONST	SEGMENT
??_C@_1MO@LCPOAHHB@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAu?$AAs?$AAe?$AAr?$AA?2?$AAd@ DB 'c'
	DB	00H, ':', 00H, '\', 00H, 'u', 00H, 's', 00H, 'e', 00H, 'r', 00H
	DB	's', 00H, '\', 00H, 'u', 00H, 's', 00H, 'e', 00H, 'r', 00H, '\'
	DB	00H, 'd', 00H, 'o', 00H, 'w', 00H, 'n', 00H, 'l', 00H, 'o', 00H
	DB	'a', 00H, 'd', 00H, 's', 00H, '\', 00H, 'x', 00H, 'a', 00H, 's'
	DB	00H, 'h', 00H, 'x', 00H, 't', 00H, '_', 00H, 'v', 00H, '0', 00H
	DB	'.', 00H, '8', 00H, '1', 00H, '_', 00H, 'r', 00H, 'e', 00H, 'v'
	DB	00H, '.', 00H, '1', 00H, '_', 00H, 'w', 00H, 'i', 00H, 't', 00H
	DB	'h', 00H, '_', 00H, 's', 00H, 'o', 00H, 'u', 00H, 'r', 00H, 'c'
	DB	00H, 'e', 00H, 's', 00H, '\', 00H, 'x', 00H, 'a', 00H, 's', 00H
	DB	'h', 00H, 'x', 00H, 't', 00H, '_', 00H, 'v', 00H, '0', 00H, '.'
	DB	00H, '8', 00H, '1', 00H, '_', 00H, 'r', 00H, 'e', 00H, 'v', 00H
	DB	'.', 00H, '1', 00H, '_', 00H, 's', 00H, 'r', 00H, 'c', 00H, '\'
	DB	00H, 'g', 00H, 'a', 00H, 'm', 00H, 'e', 00H, '_', 00H, 's', 00H
	DB	'h', 00H, 'a', 00H, 'r', 00H, 'e', 00H, 'd', 00H, '\', 00H, 'u'
	DB	00H, 't', 00H, 'l', 00H, 'm', 00H, 'e', 00H, 'm', 00H, 'o', 00H
	DB	'r', 00H, 'y', 00H, '.', 00H, 'h', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_7?$CEntityFactory@VCRope@@@@6B@
CONST	SEGMENT
??_7?$CEntityFactory@VCRope@@@@6B@ DD FLAT:??_R4?$CEntityFactory@VCRope@@@@6B@ ; CEntityFactory<CRope>::`vftable'
	DD	FLAT:?Create@?$CEntityFactory@VCRope@@@@UAEPAVCBaseEntity@@PBDPAUentvars_s@@@Z
	DD	FLAT:?Destroy@?$CEntityFactory@VCRope@@@@UAEXPAVCBaseEntity@@@Z
	DD	FLAT:?GetEntitySize@?$CEntityFactory@VCRope@@@@UAEIXZ
CONST	ENDS
;	COMDAT ?dataDesc@?1???$DataMapInit@VCRope@@@@YAPAUdatamap_s@@PAVCRope@@@Z@4PAUtypedescription_s@@A
_DATA	SEGMENT
?dataDesc@?1???$DataMapInit@VCRope@@@@YAPAUdatamap_s@@PAVCRope@@@Z@4PAUtypedescription_s@@A DD 012H ; `DataMapInit<CRope>'::`2'::dataDesc
	DD	00H
	DD	00H
	DW	00H
	DW	00H
	DD	00H
	DD	00H
	DD	0aH
	DD	FLAT:$SG76509
	DD	0690H
	DW	01H
	DW	02H
	DD	00H
	DD	00H
	DD	08H
	DD	FLAT:$SG76510
	DD	0698H
	DW	01H
	DW	02H
	DD	00H
	DD	00H
	DD	07H
	DD	FLAT:$SG76511
	DD	06a4H
	DW	01H
	DW	02H
	DD	00H
	DD	00H
	DD	0aH
	DD	FLAT:$SG76512
	DD	0694H
	DW	01H
	DW	02H
	DD	00H
	DD	00H
	DD	0cH
	DD	FLAT:$SG76513
	DD	07ccH
	DW	01H
	DW	02H
	DD	00H
	DD	00H
	DD	0cH
	DD	FLAT:$SG76514
	DD	07bcH
	DW	01H
	DW	02H
	DD	00H
	DD	00H
	DD	0aH
	DD	FLAT:$SG76515
	DD	07b0H
	DW	01H
	DW	02H
	DD	00H
	DD	00H
	DD	0fH
	DD	FLAT:$SG76516
	DD	07c0H
	DW	01H
	DW	02H
	DD	00H
	DD	00H
	DD	03H
	DD	FLAT:$SG76517
	DD	06b0H
	DW	040H
	DW	02H
	DD	00H
	DD	00H
	DD	0cH
	DD	FLAT:$SG76518
	DD	07b4H
	DW	01H
	DW	02H
	DD	00H
	DD	00H
	DD	01H
	DD	FLAT:$SG76519
	DD	07c4H
	DW	01H
	DW	02H
	DD	00H
	DD	00H
	DD	01H
	DD	FLAT:$SG76520
	DD	07c8H
	DW	01H
	DW	02H
	DD	00H
	DD	00H
	DD	00H
	DD	FLAT:$SG76521
	DD	07b8H
	DW	01H
	DW	02H
	DD	00H
	DD	00H
	DD	0cH
	DD	FLAT:$SG76522
	DD	07cdH
	DW	01H
	DW	02H
	DD	00H
	DD	00H
_DATA	ENDS
;	COMDAT ??_7CRope@@6B@
CONST	SEGMENT
??_7CRope@@6B@ DD FLAT:??_R4CRope@@6B@			; CRope::`vftable'
	DD	FLAT:?GetDataDescMap@CRope@@UAEPAUdatamap_s@@XZ
	DD	FLAT:?Spawn@CRope@@UAEXXZ
	DD	FLAT:?Precache@CRope@@UAEXXZ
	DD	FLAT:?KeyValue@CRope@@UAEXPAUKeyValueData_s@@@Z
	DD	FLAT:?Save@CBaseEntity@@UAEHAAVCSave@@@Z
	DD	FLAT:?Restore@CBaseEntity@@UAEHAAVCRestore@@@Z
	DD	FLAT:?ObjectCaps@CBaseEntity@@UAEHXZ
	DD	FLAT:?Activate@CBaseEntity@@UAEXXZ
	DD	FLAT:?OnChangeLevel@CBaseEntity@@UAEXXZ
	DD	FLAT:?OnTeleport@CBaseEntity@@UAEXXZ
	DD	FLAT:?PortalSleep@CBaseEntity@@UAEXM@Z
	DD	FLAT:?StartMessage@CBaseEntity@@UAEXPAVCBasePlayer@@@Z
	DD	FLAT:?GetPosition@CBaseEntity@@UAEMXZ
	DD	FLAT:?OnChangeParent@CBaseEntity@@UAEXXZ
	DD	FLAT:?OnClearParent@CBaseEntity@@UAEXXZ
	DD	FLAT:?OnRemove@CBaseEntity@@UAEXXZ
	DD	FLAT:?SetObjectCollisionBox@CBaseEntity@@UAEXXZ
	DD	FLAT:?Classify@CBaseEntity@@UAEHXZ
	DD	FLAT:?DeathNotice@CBaseEntity@@UAEXPAUentvars_s@@@Z
	DD	FLAT:?IsRigidBody@CBaseEntity@@UAEHXZ
	DD	FLAT:?SetNextThink@CBaseEntity@@UAEXM@Z
	DD	FLAT:?GetState@CBaseEntity@@UAE?AW4STATE@@PAV1@@Z
	DD	FLAT:?GetState@CBaseDelay@@UAE?AW4STATE@@XZ
	DD	FLAT:?TraceAttack@CBaseEntity@@UAEXPAUentvars_s@@MVVector@@PAUgametrace_s@@H@Z
	DD	FLAT:?TakeDamage@CBaseEntity@@UAEHPAUentvars_s@@0MH@Z
	DD	FLAT:?TakeHealth@CBaseEntity@@UAEHMH@Z
	DD	FLAT:?TakeArmor@CBaseEntity@@UAEHMH@Z
	DD	FLAT:?Killed@CBaseEntity@@UAEXPAUentvars_s@@H@Z
	DD	FLAT:?BloodColor@CBaseEntity@@UAEHXZ
	DD	FLAT:?TraceBleed@CBaseEntity@@UAEXMVVector@@PAUgametrace_s@@H@Z
	DD	FLAT:?IsTriggered@CBaseEntity@@UAEHPAV1@@Z
	DD	FLAT:?MyMonsterPointer@CBaseEntity@@UAEPAVCBaseMonster@@XZ
	DD	FLAT:?MySquadMonsterPointer@CBaseEntity@@UAEPAVCSquadMonster@@XZ
	DD	FLAT:?GetToggleState@CBaseEntity@@UAEHXZ
	DD	FLAT:?AddPoints@CBaseEntity@@UAEXHH@Z
	DD	FLAT:?AddPointsToTeam@CBaseEntity@@UAEXHH@Z
	DD	FLAT:?AddPlayerItem@CBaseEntity@@UAEHPAVCBasePlayerItem@@@Z
	DD	FLAT:?RemovePlayerItem@CBaseEntity@@UAEHPAVCBasePlayerItem@@@Z
	DD	FLAT:?GiveAmmo@CBaseEntity@@UAEHHPADH@Z
	DD	FLAT:?GetDelay@CBaseEntity@@UAEMXZ
	DD	FLAT:?IsMoving@CBaseEntity@@UAEHXZ
	DD	FLAT:?OverrideReset@CBaseEntity@@UAEXXZ
	DD	FLAT:?TransferReset@CBaseEntity@@UAEXXZ
	DD	FLAT:?DamageDecal@CBaseEntity@@UAEHH@Z
	DD	FLAT:?SetToggleState@CBaseEntity@@UAEXH@Z
	DD	FLAT:?StartSneaking@CBaseEntity@@UAEXXZ
	DD	FLAT:?StopSneaking@CBaseEntity@@UAEXXZ
	DD	FLAT:?OnControls@CBaseEntity@@UAEHPAV1@@Z
	DD	FLAT:?IsSneaking@CBaseEntity@@UAEHXZ
	DD	FLAT:?IsAlive@CBaseEntity@@UAEHXZ
	DD	FLAT:?IsBSPModel@CBaseEntity@@UAEHXZ
	DD	FLAT:?IsCustomModel@CBaseEntity@@UAEHXZ
	DD	FLAT:?ReflectGauss@CBaseEntity@@UAEHXZ
	DD	FLAT:?HasTarget@CBaseEntity@@UAEHH@Z
	DD	FLAT:?IsInWorld@CBaseEntity@@UAEHH@Z
	DD	FLAT:?IsPlayer@CBaseEntity@@UAEHXZ
	DD	FLAT:?IsNetClient@CBaseEntity@@UAEHXZ
	DD	FLAT:?IsMonster@CBaseEntity@@UAEHXZ
	DD	FLAT:?IsPushable@CBaseEntity@@UAEHXZ
	DD	FLAT:?IsProjectile@CBaseEntity@@UAEHXZ
	DD	FLAT:?IsFuncScreen@CBaseEntity@@UAEHXZ
	DD	FLAT:?IsPortal@CBaseEntity@@UAEHXZ
	DD	FLAT:?IsTank@CBaseEntity@@UAEHXZ
	DD	FLAT:?IsMover@CBaseEntity@@UAEHXZ
	DD	FLAT:?IsBreakable@CBaseEntity@@UAEHXZ
	DD	FLAT:?TeamID@CBaseEntity@@UAEPBDXZ
	DD	FLAT:?GetNextTarget@CBaseEntity@@UAEPAV1@XZ
	DD	FLAT:?Think@CRope@@UAEXXZ
	DD	FLAT:?Use@CBaseEntity@@UAEXPAV1@0W4USE_TYPE@@M@Z
	DD	FLAT:?Touch@CBaseEntity@@UAEXPAV1@@Z
	DD	FLAT:?Blocked@CBaseEntity@@UAEXPAV1@@Z
	DD	FLAT:?MoveDone@CBaseEntity@@UAEXXZ
	DD	FLAT:?Respawn@CBaseEntity@@UAEPAV1@XZ
	DD	FLAT:?UpdateOwner@CBaseEntity@@UAEXXZ
	DD	FLAT:?FBecomeProne@CBaseEntity@@UAEHXZ
	DD	FLAT:?Center@CBaseEntity@@UAE?AVVector@@XZ
	DD	FLAT:?EyePosition@CBaseEntity@@UAE?AVVector@@XZ
	DD	FLAT:?EarPosition@CBaseEntity@@UAE?AVVector@@XZ
	DD	FLAT:?BodyTarget@CBaseEntity@@UAE?AVVector@@ABV2@@Z
	DD	FLAT:?IsPointSized@CBaseEntity@@UBEHXZ
	DD	FLAT:?Illumination@CBaseEntity@@UAEHXZ
	DD	FLAT:?FVisible@CBaseEntity@@UAEHABVVector@@@Z
	DD	FLAT:?FVisible@CBaseEntity@@UAEHPAV1@@Z
	DD	FLAT:?ShouldCollide@CBaseEntity@@UAEHPAV1@@Z
CONST	ENDS
;	COMDAT ??_7CBaseDelay@@6B@
CONST	SEGMENT
??_7CBaseDelay@@6B@ DD FLAT:??_R4CBaseDelay@@6B@	; CBaseDelay::`vftable'
	DD	FLAT:?GetDataDescMap@CBaseDelay@@UAEPAUdatamap_s@@XZ
	DD	FLAT:?Spawn@CBaseEntity@@UAEXXZ
	DD	FLAT:?Precache@CBaseEntity@@UAEXXZ
	DD	FLAT:?KeyValue@CBaseDelay@@UAEXPAUKeyValueData_s@@@Z
	DD	FLAT:?Save@CBaseEntity@@UAEHAAVCSave@@@Z
	DD	FLAT:?Restore@CBaseEntity@@UAEHAAVCRestore@@@Z
	DD	FLAT:?ObjectCaps@CBaseEntity@@UAEHXZ
	DD	FLAT:?Activate@CBaseEntity@@UAEXXZ
	DD	FLAT:?OnChangeLevel@CBaseEntity@@UAEXXZ
	DD	FLAT:?OnTeleport@CBaseEntity@@UAEXXZ
	DD	FLAT:?PortalSleep@CBaseEntity@@UAEXM@Z
	DD	FLAT:?StartMessage@CBaseEntity@@UAEXPAVCBasePlayer@@@Z
	DD	FLAT:?GetPosition@CBaseEntity@@UAEMXZ
	DD	FLAT:?OnChangeParent@CBaseEntity@@UAEXXZ
	DD	FLAT:?OnClearParent@CBaseEntity@@UAEXXZ
	DD	FLAT:?OnRemove@CBaseEntity@@UAEXXZ
	DD	FLAT:?SetObjectCollisionBox@CBaseEntity@@UAEXXZ
	DD	FLAT:?Classify@CBaseEntity@@UAEHXZ
	DD	FLAT:?DeathNotice@CBaseEntity@@UAEXPAUentvars_s@@@Z
	DD	FLAT:?IsRigidBody@CBaseEntity@@UAEHXZ
	DD	FLAT:?SetNextThink@CBaseEntity@@UAEXM@Z
	DD	FLAT:?GetState@CBaseEntity@@UAE?AW4STATE@@PAV1@@Z
	DD	FLAT:?GetState@CBaseDelay@@UAE?AW4STATE@@XZ
	DD	FLAT:?TraceAttack@CBaseEntity@@UAEXPAUentvars_s@@MVVector@@PAUgametrace_s@@H@Z
	DD	FLAT:?TakeDamage@CBaseEntity@@UAEHPAUentvars_s@@0MH@Z
	DD	FLAT:?TakeHealth@CBaseEntity@@UAEHMH@Z
	DD	FLAT:?TakeArmor@CBaseEntity@@UAEHMH@Z
	DD	FLAT:?Killed@CBaseEntity@@UAEXPAUentvars_s@@H@Z
	DD	FLAT:?BloodColor@CBaseEntity@@UAEHXZ
	DD	FLAT:?TraceBleed@CBaseEntity@@UAEXMVVector@@PAUgametrace_s@@H@Z
	DD	FLAT:?IsTriggered@CBaseEntity@@UAEHPAV1@@Z
	DD	FLAT:?MyMonsterPointer@CBaseEntity@@UAEPAVCBaseMonster@@XZ
	DD	FLAT:?MySquadMonsterPointer@CBaseEntity@@UAEPAVCSquadMonster@@XZ
	DD	FLAT:?GetToggleState@CBaseEntity@@UAEHXZ
	DD	FLAT:?AddPoints@CBaseEntity@@UAEXHH@Z
	DD	FLAT:?AddPointsToTeam@CBaseEntity@@UAEXHH@Z
	DD	FLAT:?AddPlayerItem@CBaseEntity@@UAEHPAVCBasePlayerItem@@@Z
	DD	FLAT:?RemovePlayerItem@CBaseEntity@@UAEHPAVCBasePlayerItem@@@Z
	DD	FLAT:?GiveAmmo@CBaseEntity@@UAEHHPADH@Z
	DD	FLAT:?GetDelay@CBaseEntity@@UAEMXZ
	DD	FLAT:?IsMoving@CBaseEntity@@UAEHXZ
	DD	FLAT:?OverrideReset@CBaseEntity@@UAEXXZ
	DD	FLAT:?TransferReset@CBaseEntity@@UAEXXZ
	DD	FLAT:?DamageDecal@CBaseEntity@@UAEHH@Z
	DD	FLAT:?SetToggleState@CBaseEntity@@UAEXH@Z
	DD	FLAT:?StartSneaking@CBaseEntity@@UAEXXZ
	DD	FLAT:?StopSneaking@CBaseEntity@@UAEXXZ
	DD	FLAT:?OnControls@CBaseEntity@@UAEHPAV1@@Z
	DD	FLAT:?IsSneaking@CBaseEntity@@UAEHXZ
	DD	FLAT:?IsAlive@CBaseEntity@@UAEHXZ
	DD	FLAT:?IsBSPModel@CBaseEntity@@UAEHXZ
	DD	FLAT:?IsCustomModel@CBaseEntity@@UAEHXZ
	DD	FLAT:?ReflectGauss@CBaseEntity@@UAEHXZ
	DD	FLAT:?HasTarget@CBaseEntity@@UAEHH@Z
	DD	FLAT:?IsInWorld@CBaseEntity@@UAEHH@Z
	DD	FLAT:?IsPlayer@CBaseEntity@@UAEHXZ
	DD	FLAT:?IsNetClient@CBaseEntity@@UAEHXZ
	DD	FLAT:?IsMonster@CBaseEntity@@UAEHXZ
	DD	FLAT:?IsPushable@CBaseEntity@@UAEHXZ
	DD	FLAT:?IsProjectile@CBaseEntity@@UAEHXZ
	DD	FLAT:?IsFuncScreen@CBaseEntity@@UAEHXZ
	DD	FLAT:?IsPortal@CBaseEntity@@UAEHXZ
	DD	FLAT:?IsTank@CBaseEntity@@UAEHXZ
	DD	FLAT:?IsMover@CBaseEntity@@UAEHXZ
	DD	FLAT:?IsBreakable@CBaseEntity@@UAEHXZ
	DD	FLAT:?TeamID@CBaseEntity@@UAEPBDXZ
	DD	FLAT:?GetNextTarget@CBaseEntity@@UAEPAV1@XZ
	DD	FLAT:?Think@CBaseEntity@@UAEXXZ
	DD	FLAT:?Use@CBaseEntity@@UAEXPAV1@0W4USE_TYPE@@M@Z
	DD	FLAT:?Touch@CBaseEntity@@UAEXPAV1@@Z
	DD	FLAT:?Blocked@CBaseEntity@@UAEXPAV1@@Z
	DD	FLAT:?MoveDone@CBaseEntity@@UAEXXZ
	DD	FLAT:?Respawn@CBaseEntity@@UAEPAV1@XZ
	DD	FLAT:?UpdateOwner@CBaseEntity@@UAEXXZ
	DD	FLAT:?FBecomeProne@CBaseEntity@@UAEHXZ
	DD	FLAT:?Center@CBaseEntity@@UAE?AVVector@@XZ
	DD	FLAT:?EyePosition@CBaseEntity@@UAE?AVVector@@XZ
	DD	FLAT:?EarPosition@CBaseEntity@@UAE?AVVector@@XZ
	DD	FLAT:?BodyTarget@CBaseEntity@@UAE?AVVector@@ABV2@@Z
	DD	FLAT:?IsPointSized@CBaseEntity@@UBEHXZ
	DD	FLAT:?Illumination@CBaseEntity@@UAEHXZ
	DD	FLAT:?FVisible@CBaseEntity@@UAEHABVVector@@@Z
	DD	FLAT:?FVisible@CBaseEntity@@UAEHPAV1@@Z
	DD	FLAT:?ShouldCollide@CBaseEntity@@UAEHPAV1@@Z
CONST	ENDS
;	COMDAT ??_C@_00CNPNBAHC@@
CONST	SEGMENT
??_C@_00CNPNBAHC@@ DB 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@JILDNHAP@vlight_cache@
CONST	SEGMENT
??_C@_0N@JILDNHAP@vlight_cache@ DB 'vlight_cache', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@IKCANML@reflection@
CONST	SEGMENT
??_C@_0L@IKCANML@reflection@ DB 'reflection', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_05IAKJCFIM@style@
CONST	SEGMENT
??_C@_05IAKJCFIM@style@ DB 'style', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@EAELDHJO@parentflags@
CONST	SEGMENT
??_C@_0M@EAELDHJO@parentflags@ DB 'parentflags', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08JJJAOBDI@movewith@
CONST	SEGMENT
??_C@_08JJJAOBDI@movewith@ DB 'movewith', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06MLKDMCBD@parent@
CONST	SEGMENT
??_C@_06MLKDMCBD@parent@ DB 'parent', 00H		; `string'
CONST	ENDS
;	COMDAT ??_7CBaseEntity@@6B@
CONST	SEGMENT
??_7CBaseEntity@@6B@ DD FLAT:??_R4CBaseEntity@@6B@	; CBaseEntity::`vftable'
	DD	FLAT:?GetDataDescMap@CBaseEntity@@UAEPAUdatamap_s@@XZ
	DD	FLAT:?Spawn@CBaseEntity@@UAEXXZ
	DD	FLAT:?Precache@CBaseEntity@@UAEXXZ
	DD	FLAT:?KeyValue@CBaseEntity@@UAEXPAUKeyValueData_s@@@Z
	DD	FLAT:?Save@CBaseEntity@@UAEHAAVCSave@@@Z
	DD	FLAT:?Restore@CBaseEntity@@UAEHAAVCRestore@@@Z
	DD	FLAT:?ObjectCaps@CBaseEntity@@UAEHXZ
	DD	FLAT:?Activate@CBaseEntity@@UAEXXZ
	DD	FLAT:?OnChangeLevel@CBaseEntity@@UAEXXZ
	DD	FLAT:?OnTeleport@CBaseEntity@@UAEXXZ
	DD	FLAT:?PortalSleep@CBaseEntity@@UAEXM@Z
	DD	FLAT:?StartMessage@CBaseEntity@@UAEXPAVCBasePlayer@@@Z
	DD	FLAT:?GetPosition@CBaseEntity@@UAEMXZ
	DD	FLAT:?OnChangeParent@CBaseEntity@@UAEXXZ
	DD	FLAT:?OnClearParent@CBaseEntity@@UAEXXZ
	DD	FLAT:?OnRemove@CBaseEntity@@UAEXXZ
	DD	FLAT:?SetObjectCollisionBox@CBaseEntity@@UAEXXZ
	DD	FLAT:?Classify@CBaseEntity@@UAEHXZ
	DD	FLAT:?DeathNotice@CBaseEntity@@UAEXPAUentvars_s@@@Z
	DD	FLAT:?IsRigidBody@CBaseEntity@@UAEHXZ
	DD	FLAT:?SetNextThink@CBaseEntity@@UAEXM@Z
	DD	FLAT:?GetState@CBaseEntity@@UAE?AW4STATE@@PAV1@@Z
	DD	FLAT:?GetState@CBaseEntity@@UAE?AW4STATE@@XZ
	DD	FLAT:?TraceAttack@CBaseEntity@@UAEXPAUentvars_s@@MVVector@@PAUgametrace_s@@H@Z
	DD	FLAT:?TakeDamage@CBaseEntity@@UAEHPAUentvars_s@@0MH@Z
	DD	FLAT:?TakeHealth@CBaseEntity@@UAEHMH@Z
	DD	FLAT:?TakeArmor@CBaseEntity@@UAEHMH@Z
	DD	FLAT:?Killed@CBaseEntity@@UAEXPAUentvars_s@@H@Z
	DD	FLAT:?BloodColor@CBaseEntity@@UAEHXZ
	DD	FLAT:?TraceBleed@CBaseEntity@@UAEXMVVector@@PAUgametrace_s@@H@Z
	DD	FLAT:?IsTriggered@CBaseEntity@@UAEHPAV1@@Z
	DD	FLAT:?MyMonsterPointer@CBaseEntity@@UAEPAVCBaseMonster@@XZ
	DD	FLAT:?MySquadMonsterPointer@CBaseEntity@@UAEPAVCSquadMonster@@XZ
	DD	FLAT:?GetToggleState@CBaseEntity@@UAEHXZ
	DD	FLAT:?AddPoints@CBaseEntity@@UAEXHH@Z
	DD	FLAT:?AddPointsToTeam@CBaseEntity@@UAEXHH@Z
	DD	FLAT:?AddPlayerItem@CBaseEntity@@UAEHPAVCBasePlayerItem@@@Z
	DD	FLAT:?RemovePlayerItem@CBaseEntity@@UAEHPAVCBasePlayerItem@@@Z
	DD	FLAT:?GiveAmmo@CBaseEntity@@UAEHHPADH@Z
	DD	FLAT:?GetDelay@CBaseEntity@@UAEMXZ
	DD	FLAT:?IsMoving@CBaseEntity@@UAEHXZ
	DD	FLAT:?OverrideReset@CBaseEntity@@UAEXXZ
	DD	FLAT:?TransferReset@CBaseEntity@@UAEXXZ
	DD	FLAT:?DamageDecal@CBaseEntity@@UAEHH@Z
	DD	FLAT:?SetToggleState@CBaseEntity@@UAEXH@Z
	DD	FLAT:?StartSneaking@CBaseEntity@@UAEXXZ
	DD	FLAT:?StopSneaking@CBaseEntity@@UAEXXZ
	DD	FLAT:?OnControls@CBaseEntity@@UAEHPAV1@@Z
	DD	FLAT:?IsSneaking@CBaseEntity@@UAEHXZ
	DD	FLAT:?IsAlive@CBaseEntity@@UAEHXZ
	DD	FLAT:?IsBSPModel@CBaseEntity@@UAEHXZ
	DD	FLAT:?IsCustomModel@CBaseEntity@@UAEHXZ
	DD	FLAT:?ReflectGauss@CBaseEntity@@UAEHXZ
	DD	FLAT:?HasTarget@CBaseEntity@@UAEHH@Z
	DD	FLAT:?IsInWorld@CBaseEntity@@UAEHH@Z
	DD	FLAT:?IsPlayer@CBaseEntity@@UAEHXZ
	DD	FLAT:?IsNetClient@CBaseEntity@@UAEHXZ
	DD	FLAT:?IsMonster@CBaseEntity@@UAEHXZ
	DD	FLAT:?IsPushable@CBaseEntity@@UAEHXZ
	DD	FLAT:?IsProjectile@CBaseEntity@@UAEHXZ
	DD	FLAT:?IsFuncScreen@CBaseEntity@@UAEHXZ
	DD	FLAT:?IsPortal@CBaseEntity@@UAEHXZ
	DD	FLAT:?IsTank@CBaseEntity@@UAEHXZ
	DD	FLAT:?IsMover@CBaseEntity@@UAEHXZ
	DD	FLAT:?IsBreakable@CBaseEntity@@UAEHXZ
	DD	FLAT:?TeamID@CBaseEntity@@UAEPBDXZ
	DD	FLAT:?GetNextTarget@CBaseEntity@@UAEPAV1@XZ
	DD	FLAT:?Think@CBaseEntity@@UAEXXZ
	DD	FLAT:?Use@CBaseEntity@@UAEXPAV1@0W4USE_TYPE@@M@Z
	DD	FLAT:?Touch@CBaseEntity@@UAEXPAV1@@Z
	DD	FLAT:?Blocked@CBaseEntity@@UAEXPAV1@@Z
	DD	FLAT:?MoveDone@CBaseEntity@@UAEXXZ
	DD	FLAT:?Respawn@CBaseEntity@@UAEPAV1@XZ
	DD	FLAT:?UpdateOwner@CBaseEntity@@UAEXXZ
	DD	FLAT:?FBecomeProne@CBaseEntity@@UAEHXZ
	DD	FLAT:?Center@CBaseEntity@@UAE?AVVector@@XZ
	DD	FLAT:?EyePosition@CBaseEntity@@UAE?AVVector@@XZ
	DD	FLAT:?EarPosition@CBaseEntity@@UAE?AVVector@@XZ
	DD	FLAT:?BodyTarget@CBaseEntity@@UAE?AVVector@@ABV2@@Z
	DD	FLAT:?IsPointSized@CBaseEntity@@UBEHXZ
	DD	FLAT:?Illumination@CBaseEntity@@UAEHXZ
	DD	FLAT:?FVisible@CBaseEntity@@UAEHABVVector@@@Z
	DD	FLAT:?FVisible@CBaseEntity@@UAEHPAV1@@Z
	DD	FLAT:?ShouldCollide@CBaseEntity@@UAEHPAV1@@Z
CONST	ENDS
;	COMDAT ??_7IEntityFactory@@6B@
CONST	SEGMENT
??_7IEntityFactory@@6B@ DD FLAT:??_R4IEntityFactory@@6B@ ; IEntityFactory::`vftable'
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$GetClassPtr@VCRope@@@@YAPAVCRope@@PAV0@PBD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$GetClassPtr@VCRope@@@@YAPAVCRope@@PAV0@PBD@Z$0
__ehfuncinfo$??$GetClassPtr@VCRope@@@@YAPAVCRope@@PAV0@PBD@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$GetClassPtr@VCRope@@@@YAPAVCRope@@PAV0@PBD@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
xdata$x	SEGMENT
__unwindtable$??$DataMapInit@VCRope@@@@YAPAUdatamap_s@@PAVCRope@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$DataMapInit@VCRope@@@@YAPAUdatamap_s@@PAVCRope@@@Z$0
__unwindtable$??0CRope@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0CRope@@QAE@XZ$0
__ehfuncinfo$??$DataMapInit@VCRope@@@@YAPAUdatamap_s@@PAVCRope@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$DataMapInit@VCRope@@@@YAPAUdatamap_s@@PAVCRope@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__ehfuncinfo$??0CRope@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0CRope@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??1?$CUtlMemory@PADH@@QAE@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??1?$CUtlArray@PADV?$CUtlMemory@PADH@@@@QAE@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$CUtlArray@PADV?$CUtlMemory@PADH@@@@QAE@HH@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$CUtlArray@PADV?$CUtlMemory@PADH@@@@QAE@HH@Z$0
__ehfuncinfo$??0?$CUtlArray@PADV?$CUtlMemory@PADH@@@@QAE@HH@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$CUtlArray@PADV?$CUtlMemory@PADH@@@@QAE@HH@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??1CDatadescGeneratedNameHolder@@QAE@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
CRT$XCU	SEGMENT
?g_DataMapHolder$initializer$@CRope_DataDescInit@@3P6AXXZA DD FLAT:??__Eg_DataMapHolder@CRope_DataDescInit@@YAXXZ ; CRope_DataDescInit::g_DataMapHolder$initializer$
CRT$XCU	ENDS
CRT$XCU	SEGMENT
?env_rope$initializer$@@3P6AXXZA DD FLAT:??__Eenv_rope@@YAXXZ ; env_rope$initializer$
CRT$XCU	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xashxt_v0.81_rev.1_with_sources\xashxt_v0.81_rev.1_src\game_shared\utlmemory.h
;	COMDAT ??$Destruct@PAD@@YAXPAPAD@Z
_TEXT	SEGMENT
_pMemory$ = 8						; size = 4
??$Destruct@PAD@@YAXPAPAD@Z PROC			; Destruct<char *>, COMDAT

; 49   : {

	push	ebp
	mov	ebp, esp

; 50   : 	pMemory->~T();
; 51   : 
; 52   : #ifdef _DEBUG
; 53   : 	memset( pMemory, 0xDD, sizeof(T) );

	push	4
	push	221					; 000000ddH
	mov	eax, DWORD PTR _pMemory$[ebp]
	push	eax
	call	_memset
	add	esp, 12					; 0000000cH

; 54   : #endif
; 55   : }

	pop	ebp
	ret	0
??$Destruct@PAD@@YAXPAPAD@Z ENDP			; Destruct<char *>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xashxt_v0.81_rev.1_with_sources\xashxt_v0.81_rev.1_src\server\cbase.h
;	COMDAT ??$GetClassPtr@VCRope@@@@YAPAVCRope@@PAV0@PBD@Z
_TEXT	SEGMENT
$T2 = -28						; size = 4
tv85 = -24						; size = 4
$T3 = -20						; size = 4
_pev$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_newEnt$ = 8						; size = 4
_className$ = 12					; size = 4
??$GetClassPtr@VCRope@@@@YAPAVCRope@@PAV0@PBD@Z PROC	; GetClassPtr<CRope>, COMDAT

; 1076 : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$GetClassPtr@VCRope@@@@YAPAVCRope@@PAV0@PBD@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 16					; 00000010H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax

; 1077 : 	entvars_t *pev = (entvars_t *)newEnt;

	mov	eax, DWORD PTR _newEnt$[ebp]
	mov	DWORD PTR _pev$[ebp], eax

; 1078 : 
; 1079 : 	// allocate entity if necessary
; 1080 : 	if (pev == NULL)

	cmp	DWORD PTR _pev$[ebp], 0
	jne	SHORT $LN2@GetClassPt

; 1081 : 		pev = VARS(CREATE_ENTITY());

	call	DWORD PTR ?g_engfuncs@@3Uenginefuncs_s@@A+84
	push	eax
	call	?VARS@@YAPAUentvars_s@@PAUedict_s@@@Z	; VARS
	add	esp, 4
	mov	DWORD PTR _pev$[ebp], eax
$LN2@GetClassPt:

; 1082 : 
; 1083 : 	// get the private data
; 1084 : 	newEnt = (T *)GET_PRIVATE(ENT(pev));

	mov	ecx, DWORD PTR _pev$[ebp]
	push	ecx
	call	?ENT@@YAPAUedict_s@@PBUentvars_s@@@Z	; ENT
	add	esp, 4
	push	eax
	call	?GET_PRIVATE@@YAPAXPAUedict_s@@@Z	; GET_PRIVATE
	add	esp, 4
	mov	DWORD PTR _newEnt$[ebp], eax

; 1085 : 
; 1086 : 	if (newEnt == NULL) 

	cmp	DWORD PTR _newEnt$[ebp], 0
	jne	SHORT $LN3@GetClassPt

; 1087 : 	{
; 1088 : 		// allocate private data 
; 1089 : 		newEnt = new(pev) T;

	mov	edx, DWORD PTR _pev$[ebp]
	push	edx
	push	2000					; 000007d0H
	call	??2CBaseEntity@@SAPAXIPAUentvars_s@@@Z	; CBaseEntity::operator new
	add	esp, 8
	mov	DWORD PTR $T3[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T3[ebp], 0
	je	SHORT $LN5@GetClassPt
	mov	ecx, DWORD PTR $T3[ebp]
	call	??0CRope@@QAE@XZ			; CRope::CRope
	mov	DWORD PTR tv85[ebp], eax
	jmp	SHORT $LN6@GetClassPt
$LN5@GetClassPt:
	mov	DWORD PTR tv85[ebp], 0
$LN6@GetClassPt:
	mov	eax, DWORD PTR tv85[ebp]
	mov	DWORD PTR $T2[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR $T2[ebp]
	mov	DWORD PTR _newEnt$[ebp], ecx

; 1090 : 		newEnt->pev = pev;

	mov	edx, DWORD PTR _newEnt$[ebp]
	mov	eax, DWORD PTR _pev$[ebp]
	mov	DWORD PTR [edx+4], eax
$LN3@GetClassPt:

; 1091 : 	}
; 1092 : 	newEnt->SetClassname( className );

	mov	ecx, DWORD PTR _className$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _newEnt$[ebp]
	call	?SetClassname@CBaseEntity@@QAEXPBD@Z	; CBaseEntity::SetClassname

; 1093 : 
; 1094 : 	return newEnt;

	mov	eax, DWORD PTR _newEnt$[ebp]

; 1095 : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$GetClassPtr@VCRope@@@@YAPAVCRope@@PAV0@PBD@Z$0:
	mov	eax, DWORD PTR _pev$[ebp]
	push	eax
	mov	eax, DWORD PTR $T3[ebp]
	push	eax
	call	??3CBaseEntity@@SAXPAXPAUentvars_s@@@Z	; CBaseEntity::operator delete
	add	esp, 8
	ret	0
__ehhandler$??$GetClassPtr@VCRope@@@@YAPAVCRope@@PAV0@PBD@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-20]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$GetClassPtr@VCRope@@@@YAPAVCRope@@PAV0@PBD@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$GetClassPtr@VCRope@@@@YAPAVCRope@@PAV0@PBD@Z ENDP	; GetClassPtr<CRope>
; Function compile flags: /Odtp
; File c:\users\user\downloads\xashxt_v0.81_rev.1_with_sources\xashxt_v0.81_rev.1_src\server\ropes\crope.cpp
;	COMDAT ??__Eenv_rope@@YAXXZ
text$di	SEGMENT
??__Eenv_rope@@YAXXZ PROC				; `dynamic initializer for 'env_rope'', COMDAT

; 60   : LINK_ENTITY_TO_CLASS( env_rope, CRope );

	push	ebp
	mov	ebp, esp
	push	OFFSET $SG76552
	mov	ecx, OFFSET ?env_rope@@3V?$CEntityFactory@VCRope@@@@A
	call	??0?$CEntityFactory@VCRope@@@@QAE@PBD@Z	; CEntityFactory<CRope>::CEntityFactory<CRope>
	pop	ebp
	ret	0
??__Eenv_rope@@YAXXZ ENDP				; `dynamic initializer for 'env_rope''
text$di	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xashxt_v0.81_rev.1_with_sources\xashxt_v0.81_rev.1_src\server\util.h
;	COMDAT ?GetEntitySize@?$CEntityFactory@VCRope@@@@UAEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetEntitySize@?$CEntityFactory@VCRope@@@@UAEIXZ PROC	; CEntityFactory<CRope>::GetEntitySize, COMDAT
; _this$ = ecx

; 103  : 	{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 104  : 		return sizeof(T);

	mov	eax, 2000				; 000007d0H

; 105  : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
?GetEntitySize@?$CEntityFactory@VCRope@@@@UAEIXZ ENDP	; CEntityFactory<CRope>::GetEntitySize
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xashxt_v0.81_rev.1_with_sources\xashxt_v0.81_rev.1_src\server\util.h
;	COMDAT ?Destroy@?$CEntityFactory@VCRope@@@@UAEXPAVCBaseEntity@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_pEntity$ = 8						; size = 4
?Destroy@?$CEntityFactory@VCRope@@@@UAEXPAVCBaseEntity@@@Z PROC ; CEntityFactory<CRope>::Destroy, COMDAT
; _this$ = ecx

; 98   : 	{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 99   : 		UTIL_Remove( pEntity );

	mov	eax, DWORD PTR _pEntity$[ebp]
	push	eax
	call	?UTIL_Remove@@YAXPAVCBaseEntity@@@Z	; UTIL_Remove
	add	esp, 4

; 100  : 	}

	mov	esp, ebp
	pop	ebp
	ret	4
?Destroy@?$CEntityFactory@VCRope@@@@UAEXPAVCBaseEntity@@@Z ENDP ; CEntityFactory<CRope>::Destroy
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xashxt_v0.81_rev.1_with_sources\xashxt_v0.81_rev.1_src\server\util.h
;	COMDAT ?Create@?$CEntityFactory@VCRope@@@@UAEPAVCBaseEntity@@PBDPAUentvars_s@@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_pEnt$ = -4						; size = 4
_pClassName$ = 8					; size = 4
_pev$ = 12						; size = 4
?Create@?$CEntityFactory@VCRope@@@@UAEPAVCBaseEntity@@PBDPAUentvars_s@@@Z PROC ; CEntityFactory<CRope>::Create, COMDAT
; _this$ = ecx

; 92   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 93   : 		T* pEnt = GetClassPtr((T*)pev, pClassName);

	mov	eax, DWORD PTR _pClassName$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pev$[ebp]
	push	ecx
	call	??$GetClassPtr@VCRope@@@@YAPAVCRope@@PAV0@PBD@Z ; GetClassPtr<CRope>
	add	esp, 8
	mov	DWORD PTR _pEnt$[ebp], eax

; 94   : 		return pEnt;

	mov	eax, DWORD PTR _pEnt$[ebp]

; 95   : 	}

	mov	esp, ebp
	pop	ebp
	ret	8
?Create@?$CEntityFactory@VCRope@@@@UAEPAVCBaseEntity@@PBDPAUentvars_s@@@Z ENDP ; CEntityFactory<CRope>::Create
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xashxt_v0.81_rev.1_with_sources\xashxt_v0.81_rev.1_src\server\util.h
;	COMDAT ??0?$CEntityFactory@VCRope@@@@QAE@PBD@Z
_TEXT	SEGMENT
tv76 = -8						; size = 4
_this$ = -4						; size = 4
_pClassName$ = 8					; size = 4
??0?$CEntityFactory@VCRope@@@@QAE@PBD@Z PROC		; CEntityFactory<CRope>::CEntityFactory<CRope>, COMDAT
; _this$ = ecx

; 86   : 	CEntityFactory( const char *pClassName )

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 87   : 	{

	mov	ecx, DWORD PTR _this$[ebp]
	call	??0IEntityFactory@@QAE@XZ
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7?$CEntityFactory@VCRope@@@@6B@

; 88   : 		EntityFactoryDictionary()->InstallFactory( this, pClassName );

	call	?EntityFactoryDictionary@@YAPAVIEntityFactoryDictionary@@XZ ; EntityFactoryDictionary
	mov	DWORD PTR tv76[ebp], eax
	mov	ecx, DWORD PTR _pClassName$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	mov	eax, DWORD PTR tv76[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR tv76[ebp]
	mov	eax, DWORD PTR [edx]
	call	eax

; 89   : 	}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$CEntityFactory@VCRope@@@@QAE@PBD@Z ENDP		; CEntityFactory<CRope>::CEntityFactory<CRope>
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??__FnameHolder@?1???$DataMapInit@VCRope@@@@YAPAUdatamap_s@@PAVCRope@@@Z@YAXXZ
text$yd	SEGMENT
??__FnameHolder@?1???$DataMapInit@VCRope@@@@YAPAUdatamap_s@@PAVCRope@@@Z@YAXXZ PROC ; `DataMapInit<CRope>'::`2'::`dynamic atexit destructor for 'nameHolder'', COMDAT
	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET ?nameHolder@?1???$DataMapInit@VCRope@@@@YAPAUdatamap_s@@PAVCRope@@@Z@4VCDatadescGeneratedNameHolder@@A
	call	??1CDatadescGeneratedNameHolder@@QAE@XZ	; CDatadescGeneratedNameHolder::~CDatadescGeneratedNameHolder
	pop	ebp
	ret	0
??__FnameHolder@?1???$DataMapInit@VCRope@@@@YAPAUdatamap_s@@PAVCRope@@@Z@YAXXZ ENDP ; `DataMapInit<CRope>'::`2'::`dynamic atexit destructor for 'nameHolder''
text$yd	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xashxt_v0.81_rev.1_with_sources\xashxt_v0.81_rev.1_src\server\ropes\crope.cpp
;	COMDAT ??__Eg_DataMapHolder@CRope_DataDescInit@@YAXXZ
text$di	SEGMENT
??__Eg_DataMapHolder@CRope_DataDescInit@@YAXXZ PROC	; CRope_DataDescInit::`dynamic initializer for 'g_DataMapHolder'', COMDAT

; 43   : BEGIN_DATADESC( CRope )

	push	ebp
	mov	ebp, esp
	push	0
	call	??$DataMapInit@VCRope@@@@YAPAUdatamap_s@@PAVCRope@@@Z ; DataMapInit<CRope>
	add	esp, 4
	mov	DWORD PTR ?g_DataMapHolder@CRope_DataDescInit@@3PAUdatamap_s@@A, eax ; CRope_DataDescInit::g_DataMapHolder
	pop	ebp
	ret	0
??__Eg_DataMapHolder@CRope_DataDescInit@@YAXXZ ENDP	; CRope_DataDescInit::`dynamic initializer for 'g_DataMapHolder''
text$di	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xashxt_v0.81_rev.1_with_sources\xashxt_v0.81_rev.1_src\server\ropes\crope.cpp
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
___formal$ = 8						; size = 4
??$DataMapInit@VCRope@@@@YAPAUdatamap_s@@PAVCRope@@@Z PROC ; DataMapInit<CRope>

; 43   : BEGIN_DATADESC( CRope )

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$DataMapInit@VCRope@@@@YAPAUdatamap_s@@PAVCRope@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	eax, DWORD PTR __tls_index
	mov	ecx, DWORD PTR fs:__tls_array
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR ?$TSS0@?1???$DataMapInit@VCRope@@@@YAPAUdatamap_s@@PAVCRope@@@Z@4HA
	cmp	eax, DWORD PTR __Init_thread_epoch[edx]
	jle	SHORT $LN2@DataMapIni
	push	OFFSET ?$TSS0@?1???$DataMapInit@VCRope@@@@YAPAUdatamap_s@@PAVCRope@@@Z@4HA
	call	__Init_thread_header
	add	esp, 4
	cmp	DWORD PTR ?$TSS0@?1???$DataMapInit@VCRope@@@@YAPAUdatamap_s@@PAVCRope@@@Z@4HA, -1
	jne	SHORT $LN2@DataMapIni
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	push	OFFSET $SG76523
	mov	ecx, OFFSET ?nameHolder@?1???$DataMapInit@VCRope@@@@YAPAUdatamap_s@@PAVCRope@@@Z@4VCDatadescGeneratedNameHolder@@A
	call	??0CDatadescGeneratedNameHolder@@QAE@PBD@Z ; CDatadescGeneratedNameHolder::CDatadescGeneratedNameHolder
	push	OFFSET ??__FnameHolder@?1???$DataMapInit@VCRope@@@@YAPAUdatamap_s@@PAVCRope@@@Z@YAXXZ ; `DataMapInit<CRope>'::`2'::`dynamic atexit destructor for 'nameHolder''
	call	_atexit
	add	esp, 4
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	push	OFFSET ?$TSS0@?1???$DataMapInit@VCRope@@@@YAPAUdatamap_s@@PAVCRope@@@Z@4HA
	call	__Init_thread_footer
	add	esp, 4
$LN2@DataMapIni:
	call	?GetBaseMap@CRope@@SAPAUdatamap_s@@XZ	; CRope::GetBaseMap
	mov	DWORD PTR ?m_DataMap@CRope@@2Udatamap_s@@A+12, eax

; 44   : 	DEFINE_FIELD( m_iSegments, FIELD_INTEGER ),
; 45   : 	DEFINE_FIELD( m_vecLastEndPos, FIELD_POSITION_VECTOR ),
; 46   : 	DEFINE_FIELD( m_vecGravity, FIELD_VECTOR ),
; 47   : 	DEFINE_FIELD( m_iNumSamples, FIELD_INTEGER ),
; 48   : 	DEFINE_FIELD( m_bSimulateBones, FIELD_BOOLEAN ),
; 49   : 	DEFINE_FIELD( m_bObjectAttached, FIELD_BOOLEAN ),
; 50   : 	DEFINE_FIELD( m_iAttachedObjectsSegment, FIELD_INTEGER ),
; 51   : 	DEFINE_FIELD( m_flDetachTime, FIELD_TIME ),
; 52   : 	DEFINE_ARRAY( m_pSegments, FIELD_CLASSPTR, MAX_SEGMENTS ),
; 53   : 	DEFINE_FIELD( m_bDisallowPlayerAttachment, FIELD_BOOLEAN ),
; 54   : 	DEFINE_FIELD( m_iszBodyModel, FIELD_STRING ),
; 55   : 	DEFINE_FIELD( m_iszEndingModel, FIELD_STRING ),
; 56   : 	DEFINE_FIELD( m_flAttachedObjectsOffset, FIELD_FLOAT ),
; 57   : 	DEFINE_FIELD( m_bMakeSound, FIELD_BOOLEAN ),
; 58   : END_DATADESC()

	mov	ecx, 1
	test	ecx, ecx
	je	SHORT $LN3@DataMapIni
	mov	DWORD PTR ?m_DataMap@CRope@@2Udatamap_s@@A+4, 14 ; 0000000eH
	mov	edx, 24					; 00000018H
	shl	edx, 0
	add	edx, OFFSET ?dataDesc@?1???$DataMapInit@VCRope@@@@YAPAUdatamap_s@@PAVCRope@@@Z@4PAUtypedescription_s@@A
	mov	DWORD PTR ?m_DataMap@CRope@@2Udatamap_s@@A, edx
	jmp	SHORT $LN4@DataMapIni
$LN3@DataMapIni:
	mov	DWORD PTR ?m_DataMap@CRope@@2Udatamap_s@@A+4, 1
	mov	DWORD PTR ?m_DataMap@CRope@@2Udatamap_s@@A, OFFSET ?dataDesc@?1???$DataMapInit@VCRope@@@@YAPAUdatamap_s@@PAVCRope@@@Z@4PAUtypedescription_s@@A
$LN4@DataMapIni:
	mov	eax, OFFSET ?m_DataMap@CRope@@2Udatamap_s@@A ; CRope::m_DataMap
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$??$DataMapInit@VCRope@@@@YAPAUdatamap_s@@PAVCRope@@@Z$0:
	push	OFFSET ?$TSS0@?1???$DataMapInit@VCRope@@@@YAPAUdatamap_s@@PAVCRope@@@Z@4HA
	call	__Init_thread_abort
	pop	ecx
	ret	0
__ehhandler$??$DataMapInit@VCRope@@@@YAPAUdatamap_s@@PAVCRope@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-4]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$DataMapInit@VCRope@@@@YAPAUdatamap_s@@PAVCRope@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$DataMapInit@VCRope@@@@YAPAUdatamap_s@@PAVCRope@@@Z ENDP ; DataMapInit<CRope>
; Function compile flags: /Odtp
; File c:\users\user\downloads\xashxt_v0.81_rev.1_with_sources\xashxt_v0.81_rev.1_src\common\datamap.h
;	COMDAT ??$DataMapAccess@VCBaseDelay@@@@YAXPAVCBaseDelay@@PAPAUdatamap_s@@@Z
_TEXT	SEGMENT
_ignored$ = 8						; size = 4
_p$ = 12						; size = 4
??$DataMapAccess@VCBaseDelay@@@@YAXPAVCBaseDelay@@PAPAUdatamap_s@@@Z PROC ; DataMapAccess<CBaseDelay>, COMDAT

; 182  : {

	push	ebp
	mov	ebp, esp

; 183  : 	*p = &T::m_DataMap;

	mov	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR [eax], OFFSET ?m_DataMap@CBaseDelay@@2Udatamap_s@@A ; CBaseDelay::m_DataMap

; 184  : }

	pop	ebp
	ret	0
??$DataMapAccess@VCBaseDelay@@@@YAXPAVCBaseDelay@@PAPAUdatamap_s@@@Z ENDP ; DataMapAccess<CBaseDelay>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xashxt_v0.81_rev.1_with_sources\xashxt_v0.81_rev.1_src\server\ropes\crope.cpp
_TEXT	SEGMENT
$T1 = -36						; size = 12
$T2 = -24						; size = 12
$T3 = -12						; size = 12
_vec$ = 8						; size = 4
?TruncateEpsilon@@YAXAAVVector@@@Z PROC			; TruncateEpsilon

; 39   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 36					; 00000024H

; 40   : 	vec = ( vec * 10.0f + 0.5f ) / 10.0f;

	push	ecx
	movss	xmm0, DWORD PTR __real@41200000
	movss	DWORD PTR [esp], xmm0
	lea	eax, DWORD PTR $T3[ebp]
	push	eax
	push	ecx
	movss	xmm0, DWORD PTR __real@3f000000
	movss	DWORD PTR [esp], xmm0
	lea	ecx, DWORD PTR $T2[ebp]
	push	ecx
	push	ecx
	movss	xmm0, DWORD PTR __real@41200000
	movss	DWORD PTR [esp], xmm0
	lea	edx, DWORD PTR $T1[ebp]
	push	edx
	mov	ecx, DWORD PTR _vec$[ebp]
	call	??DVector@@QBE?AV0@M@Z			; Vector::operator*
	mov	ecx, eax
	call	??HVector@@QBE?AV0@M@Z			; Vector::operator+
	mov	ecx, eax
	call	??KVector@@QBE?AV0@M@Z			; Vector::operator/
	mov	ecx, DWORD PTR _vec$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	eax, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], eax

; 41   : }

	mov	esp, ebp
	pop	ebp
	ret	0
?TruncateEpsilon@@YAXAAVVector@@@Z ENDP			; TruncateEpsilon
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xashxt_v0.81_rev.1_with_sources\xashxt_v0.81_rev.1_src\server\ropes\crope.cpp
;	COMDAT ??__Eg_pTempList@@YAXXZ
text$di	SEGMENT
??__Eg_pTempList@@YAXXZ PROC				; `dynamic initializer for 'g_pTempList'', COMDAT

; 29   : RopeSampleData g_pTempList[MAX_LIST_SEGMENTS][MAX_SEGMENTS];

	push	ebp
	mov	ebp, esp
	push	OFFSET ??0RopeSampleData@@QAE@XZ
	push	320					; 00000140H
	push	60					; 0000003cH
	push	OFFSET ?g_pTempList@@3PAY0EA@URopeSampleData@@A ; g_pTempList
	call	??_H@YGXPAXIIP6EPAX0@Z@Z
	pop	ebp
	ret	0
??__Eg_pTempList@@YAXXZ ENDP				; `dynamic initializer for 'g_pTempList''
text$di	ENDS
; Function compile flags: /Odtp
;	COMDAT ??0RopeSampleData@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0RopeSampleData@@QAE@XZ PROC				; RopeSampleData::RopeSampleData, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0Vector@@QAE@XZ			; Vector::Vector
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	??0Vector@@QAE@XZ			; Vector::Vector
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 24					; 00000018H
	call	??0Vector@@QAE@XZ			; Vector::Vector
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 36					; 00000024H
	call	??0Vector@@QAE@XZ			; Vector::Vector
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0RopeSampleData@@QAE@XZ ENDP				; RopeSampleData::RopeSampleData
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xashxt_v0.81_rev.1_with_sources\xashxt_v0.81_rev.1_src\server\ropes\crope.cpp
_TEXT	SEGMENT
_mins$ = -256						; size = 12
_maxs$ = -244						; size = 12
_ang$ = -232						; size = 12
_pos$ = -220						; size = 12
_phdr$ = -208						; size = 4
_i$1 = -204						; size = 4
_this$ = -200						; size = 4
$T2 = -196						; size = 64
_localSpace$ = -132					; size = 64
_local$3 = -68						; size = 64
__$ArrayPad$ = -4					; size = 4
?SendUpdateBones@CRope@@QAEXXZ PROC			; CRope::SendUpdateBones
; _this$ = ecx

; 217  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 256				; 00000100H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	DWORD PTR _this$[ebp], ecx

; 218  : 	if( !m_bSimulateBones )

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+1996]
	test	ecx, ecx
	jne	SHORT $LN5@SendUpdate

; 219  : 		return;

	jmp	$LN1@SendUpdate
$LN5@SendUpdate:

; 220  : 
; 221  : 	studiohdr_t *phdr = (studiohdr_t *)CBaseAnimating::GetModelPtr( pev->modelindex );

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR [eax+180]
	push	ecx
	call	?GetModelPtr@CBaseAnimating@@SAPAXH@Z	; CBaseAnimating::GetModelPtr
	add	esp, 4
	mov	DWORD PTR _phdr$[ebp], eax

; 222  : 	if( !phdr ) return;

	cmp	DWORD PTR _phdr$[ebp], 0
	jne	SHORT $LN6@SendUpdate
	jmp	$LN1@SendUpdate
$LN6@SendUpdate:

; 223  : 
; 224  : 	matrix4x4 localSpace = EntityToWorldTransform().Invert();

	lea	edx, DWORD PTR _localSpace$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?EntityToWorldTransform@CBaseEntity@@QAEAAVmatrix4x4@@XZ ; CBaseEntity::EntityToWorldTransform
	mov	ecx, eax
	call	?Invert@matrix4x4@@QBE?AV1@XZ		; matrix4x4::Invert

; 225  : 	Vector pos, mins, maxs;

	lea	ecx, DWORD PTR _pos$[ebp]
	call	??0Vector@@QAE@XZ			; Vector::Vector
	lea	ecx, DWORD PTR _mins$[ebp]
	call	??0Vector@@QAE@XZ			; Vector::Vector
	lea	ecx, DWORD PTR _maxs$[ebp]
	call	??0Vector@@QAE@XZ			; Vector::Vector

; 226  : 	Radian ang;

	lea	ecx, DWORD PTR _ang$[ebp]
	call	??0Radian@@QAE@XZ			; Radian::Radian

; 227  : 
; 228  : 	ClearBounds( mins, maxs );

	lea	eax, DWORD PTR _maxs$[ebp]
	push	eax
	lea	ecx, DWORD PTR _mins$[ebp]
	push	ecx
	call	?ClearBounds@@YAXAAVVector@@0@Z		; ClearBounds
	add	esp, 8

; 229  : 
; 230  : 	// TEST MESSAGE TO SETUP PROCEDURAL BONES
; 231  : 	// TODO: replace it with special delta-message in engine
; 232  : 	MESSAGE_BEGIN( MSG_PVS, gmsgSetupBones, pev->origin );

	push	0
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	add	ecx, 8
	call	??BVector@@QAEPAMXZ			; Vector::operator float *
	push	eax
	mov	eax, DWORD PTR ?gmsgSetupBones@@3HA	; gmsgSetupBones
	push	eax
	push	4
	call	?MESSAGE_BEGIN@@YAXHHPBMPAUedict_s@@@Z	; MESSAGE_BEGIN
	add	esp, 16					; 00000010H

; 233  : 		WRITE_ENTITY( (short)ENTINDEX( edict() ) );

	mov	ecx, DWORD PTR _this$[ebp]
	call	?edict@CBaseEntity@@QAEPAUedict_s@@XZ	; CBaseEntity::edict
	push	eax
	call	?ENTINDEX@@YAHPAUedict_s@@@Z		; ENTINDEX
	add	esp, 4
	movsx	ecx, ax
	push	ecx
	call	DWORD PTR ?g_engfuncs@@3Uenginefuncs_s@@A+220
	add	esp, 4

; 234  : 		WRITE_BYTE( phdr->numbones );

	mov	edx, DWORD PTR _phdr$[ebp]
	mov	eax, DWORD PTR [edx+140]
	push	eax
	call	DWORD PTR ?g_engfuncs@@3Uenginefuncs_s@@A+192
	add	esp, 4

; 235  : 
; 236  : 		for( int i = 0; i < phdr->numbones; i++ )

	mov	DWORD PTR _i$1[ebp], 0
	jmp	SHORT $LN4@SendUpdate
$LN2@SendUpdate:
	mov	ecx, DWORD PTR _i$1[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$1[ebp], ecx
$LN4@SendUpdate:
	mov	edx, DWORD PTR _phdr$[ebp]
	mov	eax, DWORD PTR _i$1[ebp]
	cmp	eax, DWORD PTR [edx+140]
	jge	$LN3@SendUpdate

; 237  : 		{
; 238  : 			matrix4x4 local = m_pSegments[i]->EntityToWorldTransform();

	mov	ecx, DWORD PTR _i$1[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+ecx*4+1712]
	call	?EntityToWorldTransform@CBaseEntity@@QAEAAVmatrix4x4@@XZ ; CBaseEntity::EntityToWorldTransform
	push	eax
	lea	ecx, DWORD PTR _local$3[ebp]
	call	??0matrix4x4@@QAE@ABV0@@Z

; 239  : 			local = localSpace.ConcatTransforms( local );

	sub	esp, 64					; 00000040H
	mov	ecx, esp
	lea	eax, DWORD PTR _local$3[ebp]
	push	eax
	call	??0matrix4x4@@QAE@ABV0@@Z
	lea	ecx, DWORD PTR $T2[ebp]
	push	ecx
	lea	ecx, DWORD PTR _localSpace$[ebp]
	call	?ConcatTransforms@matrix4x4@@QAE?AV1@V1@@Z ; matrix4x4::ConcatTransforms
	push	eax
	lea	ecx, DWORD PTR _local$3[ebp]
	call	??4matrix4x4@@QAEAAV0@ABV0@@Z		; matrix4x4::operator=

; 240  : 			local.GetStudioTransform( pos, ang );

	lea	edx, DWORD PTR _ang$[ebp]
	push	edx
	lea	eax, DWORD PTR _pos$[ebp]
	push	eax
	lea	ecx, DWORD PTR _local$3[ebp]
	call	?GetStudioTransform@matrix4x4@@QAEXAAVVector@@AAVRadian@@@Z ; matrix4x4::GetStudioTransform

; 241  : 			AddPointToBounds( pos, mins, maxs );

	push	ecx
	xorps	xmm0, xmm0
	movss	DWORD PTR [esp], xmm0
	lea	ecx, DWORD PTR _maxs$[ebp]
	push	ecx
	lea	edx, DWORD PTR _mins$[ebp]
	push	edx
	lea	eax, DWORD PTR _pos$[ebp]
	push	eax
	call	?AddPointToBounds@@YAXABVVector@@AAV1@1M@Z ; AddPointToBounds
	add	esp, 16					; 00000010H

; 242  : 			WRITE_SHORT( pos.x * 128 );

	movss	xmm0, DWORD PTR _pos$[ebp]
	mulss	xmm0, DWORD PTR __real@43000000
	cvttss2si ecx, xmm0
	push	ecx
	call	DWORD PTR ?g_engfuncs@@3Uenginefuncs_s@@A+200
	add	esp, 4

; 243  : 			WRITE_SHORT( pos.y * 128 );

	movss	xmm0, DWORD PTR _pos$[ebp+4]
	mulss	xmm0, DWORD PTR __real@43000000
	cvttss2si edx, xmm0
	push	edx
	call	DWORD PTR ?g_engfuncs@@3Uenginefuncs_s@@A+200
	add	esp, 4

; 244  : 			WRITE_SHORT( pos.z * 128 );

	movss	xmm0, DWORD PTR _pos$[ebp+8]
	mulss	xmm0, DWORD PTR __real@43000000
	cvttss2si eax, xmm0
	push	eax
	call	DWORD PTR ?g_engfuncs@@3Uenginefuncs_s@@A+200
	add	esp, 4

; 245  : 			WRITE_SHORT( ang.x * 512 );

	movss	xmm0, DWORD PTR _ang$[ebp]
	mulss	xmm0, DWORD PTR __real@44000000
	cvttss2si ecx, xmm0
	push	ecx
	call	DWORD PTR ?g_engfuncs@@3Uenginefuncs_s@@A+200
	add	esp, 4

; 246  : 			WRITE_SHORT( ang.y * 512 );

	movss	xmm0, DWORD PTR _ang$[ebp+4]
	mulss	xmm0, DWORD PTR __real@44000000
	cvttss2si edx, xmm0
	push	edx
	call	DWORD PTR ?g_engfuncs@@3Uenginefuncs_s@@A+200
	add	esp, 4

; 247  : 			WRITE_SHORT( ang.z * 512 );

	movss	xmm0, DWORD PTR _ang$[ebp+8]
	mulss	xmm0, DWORD PTR __real@44000000
	cvttss2si eax, xmm0
	push	eax
	call	DWORD PTR ?g_engfuncs@@3Uenginefuncs_s@@A+200
	add	esp, 4

; 248  : 		}

	jmp	$LN2@SendUpdate
$LN3@SendUpdate:

; 249  : 
; 250  : 	MESSAGE_END();

	call	DWORD PTR ?g_engfuncs@@3Uenginefuncs_s@@A+188

; 251  : 	ExpandBounds( mins, maxs, 2.0f );

	push	ecx
	movss	xmm0, DWORD PTR __real@40000000
	movss	DWORD PTR [esp], xmm0
	lea	ecx, DWORD PTR _maxs$[ebp]
	push	ecx
	lea	edx, DWORD PTR _mins$[ebp]
	push	edx
	call	?ExpandBounds@@YAXAAVVector@@0M@Z	; ExpandBounds
	add	esp, 12					; 0000000cH

; 252  : 	UTIL_SetSize( pev, mins, maxs );

	lea	eax, DWORD PTR _maxs$[ebp]
	push	eax
	lea	ecx, DWORD PTR _mins$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	push	eax
	call	?UTIL_SetSize@@YAXPAUentvars_s@@ABVVector@@1@Z ; UTIL_SetSize
	add	esp, 12					; 0000000cH
$LN1@SendUpdate:

; 253  : }

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
?SendUpdateBones@CRope@@QAEXXZ ENDP			; CRope::SendUpdateBones
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xashxt_v0.81_rev.1_with_sources\xashxt_v0.81_rev.1_src\server\ropes\crope.cpp
_TEXT	SEGMENT
$T1 = -28						; size = 12
_vecAngles$ = -16					; size = 12
_this$ = -4						; size = 4
_pCurr$ = 8						; size = 4
_pNext$ = 12						; size = 4
?SetSegmentAngles@CRope@@QAEXPAVCRopeSegment@@0@Z PROC	; CRope::SetSegmentAngles
; _this$ = ecx

; 448  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH
	mov	DWORD PTR _this$[ebp], ecx

; 449  : 	Vector vecAngles;

	lea	ecx, DWORD PTR _vecAngles$[ebp]
	call	??0Vector@@QAE@XZ			; Vector::Vector

; 450  : 
; 451  : 	GetAlignmentAngles( pCurr->m_Data.mPosition, pNext->m_Data.mPosition, vecAngles );

	lea	eax, DWORD PTR _vecAngles$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pNext$[ebp]
	add	ecx, 1704				; 000006a8H
	push	ecx
	mov	edx, DWORD PTR _pCurr$[ebp]
	add	edx, 1704				; 000006a8H
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetAlignmentAngles@CRope@@QAEXABVVector@@0AAV2@@Z ; CRope::GetAlignmentAngles

; 452  : 
; 453  : 	if( UTIL_GetModelType( pCurr->pev->modelindex ) == mod_sprite )

	mov	eax, DWORD PTR _pCurr$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [ecx+180]
	push	edx
	call	?UTIL_GetModelType@@YA?AW4modtype_t@@H@Z ; UTIL_GetModelType
	add	esp, 4
	cmp	eax, 1
	jne	SHORT $LN2@SetSegment

; 454  : 		pCurr->SetAbsAngles( Vector( 0.0f, 0.0f, -vecAngles.x ));

	movss	xmm0, DWORD PTR _vecAngles$[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	push	ecx
	xorps	xmm0, xmm0
	movss	DWORD PTR [esp], xmm0
	push	ecx
	xorps	xmm0, xmm0
	movss	DWORD PTR [esp], xmm0
	lea	ecx, DWORD PTR $T1[ebp]
	call	??0Vector@@QAE@MMM@Z			; Vector::Vector
	push	eax
	mov	ecx, DWORD PTR _pCurr$[ebp]
	call	?SetAbsAngles@CBaseEntity@@QAEXABVVector@@@Z ; CBaseEntity::SetAbsAngles
	jmp	SHORT $LN3@SetSegment
$LN2@SetSegment:

; 455  : 	else pCurr->SetAbsAngles( vecAngles );

	lea	eax, DWORD PTR _vecAngles$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pCurr$[ebp]
	call	?SetAbsAngles@CBaseEntity@@QAEXABVVector@@@Z ; CBaseEntity::SetAbsAngles
$LN3@SetSegment:

; 456  : }

	mov	esp, ebp
	pop	ebp
	ret	8
?SetSegmentAngles@CRope@@QAEXPAVCRopeSegment@@0@Z ENDP	; CRope::SetSegmentAngles
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xashxt_v0.81_rev.1_with_sources\xashxt_v0.81_rev.1_src\server\ropes\crope.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
_pCurr$ = 8						; size = 4
_pNext$ = 12						; size = 4
?SetSegmentOrigin@CRope@@QAEXPAVCRopeSegment@@0@Z PROC	; CRope::SetSegmentOrigin
; _this$ = ecx

; 444  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 445  : }

	mov	esp, ebp
	pop	ebp
	ret	8
?SetSegmentOrigin@CRope@@QAEXPAVCRopeSegment@@0@Z ENDP	; CRope::SetSegmentOrigin
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xashxt_v0.81_rev.1_with_sources\xashxt_v0.81_rev.1_src\server\ropes\crope.cpp
_TEXT	SEGMENT
$T1 = -52						; size = 12
$T2 = -40						; size = 12
$T3 = -28						; size = 12
_vecResult$ = -16					; size = 12
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?GetAttachedObjectsPosition@CRope@@QBE?AVVector@@XZ PROC ; CRope::GetAttachedObjectsPosition
; _this$ = ecx

; 814  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 52					; 00000034H
	mov	DWORD PTR _this$[ebp], ecx

; 815  : 	if( !m_bObjectAttached )

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+1980]
	test	ecx, ecx
	jne	SHORT $LN2@GetAttache

; 816  : 		return g_vecZero;

	push	OFFSET ?g_vecZero@@3VVector@@B		; g_vecZero
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0Vector@@QAE@ABV0@@Z			; Vector::Vector
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	$LN1@GetAttache
$LN2@GetAttache:

; 817  : 
; 818  : 	Vector vecResult;

	lea	ecx, DWORD PTR _vecResult$[ebp]
	call	??0Vector@@QAE@XZ			; Vector::Vector

; 819  : 
; 820  : 	if( m_iAttachedObjectsSegment < m_iSegments )

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1968]
	cmp	ecx, DWORD PTR [eax+1680]
	jge	SHORT $LN3@GetAttache

; 821  : 		vecResult = m_pSegments[m_iAttachedObjectsSegment]->m_Data.mPosition;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+1968]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4+1712]
	add	edx, 1704				; 000006a8H
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR _vecResult$[ebp], eax
	mov	ecx, DWORD PTR [edx+4]
	mov	DWORD PTR _vecResult$[ebp+4], ecx
	mov	edx, DWORD PTR [edx+8]
	mov	DWORD PTR _vecResult$[ebp+8], edx
$LN3@GetAttache:

; 822  : 
; 823  : 	vecResult = vecResult + ( m_flAttachedObjectsOffset * GetSegmentDirFromOrigin( m_iAttachedObjectsSegment ));

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1968]
	push	ecx
	lea	edx, DWORD PTR $T3[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetSegmentDirFromOrigin@CRope@@QBE?AVVector@@H@Z ; CRope::GetSegmentDirFromOrigin
	push	eax
	mov	eax, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [eax+1976]
	movss	DWORD PTR [esp], xmm0
	lea	ecx, DWORD PTR $T2[ebp]
	push	ecx
	call	??D@YA?AVVector@@MABV0@@Z		; operator*
	add	esp, 12					; 0000000cH
	push	eax
	lea	edx, DWORD PTR $T1[ebp]
	push	edx
	lea	ecx, DWORD PTR _vecResult$[ebp]
	call	??HVector@@QBE?AV0@ABV0@@Z		; Vector::operator+
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _vecResult$[ebp], ecx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR _vecResult$[ebp+4], edx
	mov	eax, DWORD PTR [eax+8]
	mov	DWORD PTR _vecResult$[ebp+8], eax

; 824  : 
; 825  : 	return vecResult;

	lea	ecx, DWORD PTR _vecResult$[ebp]
	push	ecx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0Vector@@QAE@ABV0@@Z			; Vector::Vector
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
$LN1@GetAttache:

; 826  : }

	mov	esp, ebp
	pop	ebp
	ret	4
?GetAttachedObjectsPosition@CRope@@QBE?AVVector@@XZ ENDP ; CRope::GetAttachedObjectsPosition
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xashxt_v0.81_rev.1_with_sources\xashxt_v0.81_rev.1_src\server\ropes\crope.cpp
_TEXT	SEGMENT
_vecResult$ = -16					; size = 12
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
_iSegmentIndex$ = 12					; size = 4
?GetSegmentDirFromOrigin@CRope@@QBE?AVVector@@H@Z PROC	; CRope::GetSegmentDirFromOrigin
; _this$ = ecx

; 803  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx

; 804  : 	if( iSegmentIndex >= m_iSegments )

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _iSegmentIndex$[ebp]
	cmp	ecx, DWORD PTR [eax+1680]
	jl	SHORT $LN2@GetSegment

; 805  : 		return g_vecZero;

	push	OFFSET ?g_vecZero@@3VVector@@B		; g_vecZero
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0Vector@@QAE@ABV0@@Z			; Vector::Vector
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	SHORT $LN1@GetSegment
$LN2@GetSegment:

; 806  : 
; 807  : 	// there is one more sample than there are segments, so this is fine.
; 808  : 	const Vector vecResult = m_pSegments[iSegmentIndex + 1]->m_Data.mPosition - m_pSegments[iSegmentIndex]->m_Data.mPosition;

	mov	edx, DWORD PTR _iSegmentIndex$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+edx*4+1712]
	add	ecx, 1704				; 000006a8H
	push	ecx
	lea	edx, DWORD PTR _vecResult$[ebp]
	push	edx
	mov	eax, DWORD PTR _iSegmentIndex$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+eax*4+1716]
	add	ecx, 1704				; 000006a8H
	call	??GVector@@QBE?AV0@ABV0@@Z		; Vector::operator-

; 809  : 
; 810  : 	return vecResult.Normalize();

	mov	edx, DWORD PTR ___$ReturnUdt$[ebp]
	push	edx
	lea	ecx, DWORD PTR _vecResult$[ebp]
	call	?Normalize@Vector@@QBE?AV1@XZ		; Vector::Normalize
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
$LN1@GetSegment:

; 811  : }

	mov	esp, ebp
	pop	ebp
	ret	8
?GetSegmentDirFromOrigin@CRope@@QBE?AVVector@@H@Z ENDP	; CRope::GetSegmentDirFromOrigin
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xashxt_v0.81_rev.1_with_sources\xashxt_v0.81_rev.1_src\server\ropes\crope.cpp
_TEXT	SEGMENT
_this$ = -8						; size = 4
_i$1 = -4						; size = 4
_pSegment$ = 8						; size = 4
?SetAttachedObjectsSegment@CRope@@QAEXPAVCRopeSegment@@@Z PROC ; CRope::SetAttachedObjectsSegment
; _this$ = ecx

; 791  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 792  : 	for( int i = 0; i < m_iSegments; i++ )

	mov	DWORD PTR _i$1[ebp], 0
	jmp	SHORT $LN4@SetAttache
$LN2@SetAttache:
	mov	eax, DWORD PTR _i$1[ebp]
	add	eax, 1
	mov	DWORD PTR _i$1[ebp], eax
$LN4@SetAttache:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _i$1[ebp]
	cmp	edx, DWORD PTR [ecx+1680]
	jge	SHORT $LN1@SetAttache

; 793  : 	{
; 794  : 		if( m_pSegments[i] == pSegment )

	mov	eax, DWORD PTR _i$1[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4+1712]
	cmp	edx, DWORD PTR _pSegment$[ebp]
	jne	SHORT $LN5@SetAttache

; 795  : 		{
; 796  : 			m_iAttachedObjectsSegment = i;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _i$1[ebp]
	mov	DWORD PTR [eax+1968], ecx

; 797  : 			break;

	jmp	SHORT $LN1@SetAttache
$LN5@SetAttache:

; 798  : 		}
; 799  : 	}

	jmp	SHORT $LN2@SetAttache
$LN1@SetAttache:

; 800  : }

	mov	esp, ebp
	pop	ebp
	ret	4
?SetAttachedObjectsSegment@CRope@@QAEXPAVCRopeSegment@@@Z ENDP ; CRope::SetAttachedObjectsSegment
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xashxt_v0.81_rev.1_with_sources\xashxt_v0.81_rev.1_src\server\ropes\crope.cpp
_TEXT	SEGMENT
_vecAngles$ = -32					; size = 12
_vecOrigin$ = -20					; size = 12
_pSegment$ = -8						; size = 4
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
_iSegment$ = 12						; size = 4
?GetSegmentAttachmentPoint@CRope@@QBE?AVVector@@H@Z PROC ; CRope::GetSegmentAttachmentPoint
; _this$ = ecx

; 772  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 32					; 00000020H
	mov	DWORD PTR _this$[ebp], ecx

; 773  : 	if( !IsValidSegmentIndex( iSegment ) )

	mov	eax, DWORD PTR _iSegment$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsValidSegmentIndex@CRope@@QBE_NH@Z	; CRope::IsValidSegmentIndex
	movzx	ecx, al
	test	ecx, ecx
	jne	SHORT $LN2@GetSegment

; 774  : 		return g_vecZero;

	push	OFFSET ?g_vecZero@@3VVector@@B		; g_vecZero
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0Vector@@QAE@ABV0@@Z			; Vector::Vector
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	SHORT $LN1@GetSegment
$LN2@GetSegment:

; 775  : 
; 776  : 	Vector vecOrigin, vecAngles;

	lea	ecx, DWORD PTR _vecOrigin$[ebp]
	call	??0Vector@@QAE@XZ			; Vector::Vector
	lea	ecx, DWORD PTR _vecAngles$[ebp]
	call	??0Vector@@QAE@XZ			; Vector::Vector

; 777  : 
; 778  : 	if( m_bSimulateBones )

	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+1996]
	test	eax, eax
	je	SHORT $LN3@GetSegment

; 779  : 	{
; 780  : 		return m_pSegments[iSegment]->pev->origin;

	mov	ecx, DWORD PTR _iSegment$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+ecx*4+1712]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, 8
	push	ecx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0Vector@@QAE@ABV0@@Z			; Vector::Vector
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	SHORT $LN1@GetSegment
$LN3@GetSegment:

; 781  : 	}
; 782  : 
; 783  : 	CRopeSegment* pSegment = m_pSegments[iSegment];

	mov	edx, DWORD PTR _iSegment$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+edx*4+1712]
	mov	DWORD PTR _pSegment$[ebp], ecx

; 784  : 
; 785  : 	pSegment->GetAttachment( 0, vecOrigin, vecAngles );

	lea	edx, DWORD PTR _vecAngles$[ebp]
	push	edx
	lea	eax, DWORD PTR _vecOrigin$[ebp]
	push	eax
	push	0
	mov	ecx, DWORD PTR _pSegment$[ebp]
	call	?GetAttachment@CBaseAnimating@@QAEXHAAVVector@@0@Z ; CBaseAnimating::GetAttachment

; 786  : 
; 787  : 	return vecOrigin;

	lea	ecx, DWORD PTR _vecOrigin$[ebp]
	push	ecx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0Vector@@QAE@ABV0@@Z			; Vector::Vector
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
$LN1@GetSegment:

; 788  : }

	mov	esp, ebp
	pop	ebp
	ret	8
?GetSegmentAttachmentPoint@CRope@@QBE?AVVector@@H@Z ENDP ; CRope::GetSegmentAttachmentPoint
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xashxt_v0.81_rev.1_with_sources\xashxt_v0.81_rev.1_src\server\ropes\crope.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
_iSegment$ = 12						; size = 4
?GetSegmentOrigin@CRope@@QBE?AVVector@@H@Z PROC		; CRope::GetSegmentOrigin
; _this$ = ecx

; 764  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 765  : 	if( !IsValidSegmentIndex( iSegment ))

	mov	eax, DWORD PTR _iSegment$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsValidSegmentIndex@CRope@@QBE_NH@Z	; CRope::IsValidSegmentIndex
	movzx	ecx, al
	test	ecx, ecx
	jne	SHORT $LN2@GetSegment

; 766  : 		return g_vecZero;

	push	OFFSET ?g_vecZero@@3VVector@@B		; g_vecZero
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0Vector@@QAE@ABV0@@Z			; Vector::Vector
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	SHORT $LN1@GetSegment
$LN2@GetSegment:

; 767  : 
; 768  : 	return m_pSegments[iSegment]->m_Data.mPosition;

	mov	edx, DWORD PTR _iSegment$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+edx*4+1712]
	add	ecx, 1704				; 000006a8H
	push	ecx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0Vector@@QAE@ABV0@@Z			; Vector::Vector
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
$LN1@GetSegment:

; 769  : }

	mov	esp, ebp
	pop	ebp
	ret	8
?GetSegmentOrigin@CRope@@QBE?AVVector@@H@Z ENDP		; CRope::GetSegmentOrigin
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xashxt_v0.81_rev.1_with_sources\xashxt_v0.81_rev.1_src\server\ropes\crope.cpp
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv66 = -4						; size = 4
_iSegment$ = 8						; size = 4
?IsValidSegmentIndex@CRope@@QBE_NH@Z PROC		; CRope::IsValidSegmentIndex
; _this$ = ecx

; 759  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 760  : 	return iSegment < m_iSegments;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _iSegment$[ebp]
	cmp	ecx, DWORD PTR [eax+1680]
	jge	SHORT $LN3@IsValidSeg
	mov	DWORD PTR tv66[ebp], 1
	jmp	SHORT $LN4@IsValidSeg
$LN3@IsValidSeg:
	mov	DWORD PTR tv66[ebp], 0
$LN4@IsValidSeg:
	mov	al, BYTE PTR tv66[ebp]

; 761  : }

	mov	esp, ebp
	pop	ebp
	ret	4
?IsValidSegmentIndex@CRope@@QBE_NH@Z ENDP		; CRope::IsValidSegmentIndex
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xashxt_v0.81_rev.1_with_sources\xashxt_v0.81_rev.1_src\server\ropes\crope.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?GetRopeOrigin@CRope@@QBE?AVVector@@XZ PROC		; CRope::GetRopeOrigin
; _this$ = ecx

; 754  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 755  : 	return m_pSegments[0]->m_Data.mPosition;

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+ecx+1712]
	add	eax, 1704				; 000006a8H
	push	eax
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0Vector@@QAE@ABV0@@Z			; Vector::Vector
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 756  : }

	mov	esp, ebp
	pop	ebp
	ret	4
?GetRopeOrigin@CRope@@QBE?AVVector@@XZ ENDP		; CRope::GetRopeOrigin
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xashxt_v0.81_rev.1_with_sources\xashxt_v0.81_rev.1_src\server\ropes\crope.cpp
_TEXT	SEGMENT
_this$ = -12						; size = 4
_flLength$ = -8						; size = 4
_i$1 = -4						; size = 4
?GetRopeLength@CRope@@QBEMXZ PROC			; CRope::GetRopeLength
; _this$ = ecx

; 744  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 745  : 	float flLength = 0;

	xorps	xmm0, xmm0
	movss	DWORD PTR _flLength$[ebp], xmm0

; 746  : 
; 747  : 	for( int i = 0; i < m_iSegments; i++ )

	mov	DWORD PTR _i$1[ebp], 0
	jmp	SHORT $LN4@GetRopeLen
$LN2@GetRopeLen:
	mov	eax, DWORD PTR _i$1[ebp]
	add	eax, 1
	mov	DWORD PTR _i$1[ebp], eax
$LN4@GetRopeLen:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _i$1[ebp]
	cmp	edx, DWORD PTR [ecx+1680]
	jge	SHORT $LN3@GetRopeLen

; 748  : 		flLength += m_pSegments[i]->m_Data.restLength;

	mov	eax, DWORD PTR _i$1[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4+1712]
	movss	xmm0, DWORD PTR _flLength$[ebp]
	addss	xmm0, DWORD PTR [edx+1760]
	movss	DWORD PTR _flLength$[ebp], xmm0
	jmp	SHORT $LN2@GetRopeLen
$LN3@GetRopeLen:

; 749  : 
; 750  : 	return flLength;

	fld	DWORD PTR _flLength$[ebp]

; 751  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?GetRopeLength@CRope@@QBEMXZ ENDP			; CRope::GetRopeLength
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xashxt_v0.81_rev.1_with_sources\xashxt_v0.81_rev.1_src\server\ropes\crope.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
_iSegmentIndex$ = 8					; size = 4
?GetSegmentLength@CRope@@QBEMH@Z PROC			; CRope::GetSegmentLength
; _this$ = ecx

; 737  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 738  : 	if( iSegmentIndex < m_iSegments )

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _iSegmentIndex$[ebp]
	cmp	ecx, DWORD PTR [eax+1680]
	jge	SHORT $LN2@GetSegment

; 739  : 		return m_pSegments[iSegmentIndex]->m_Data.restLength;

	mov	edx, DWORD PTR _iSegmentIndex$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+edx*4+1712]
	fld	DWORD PTR [ecx+1760]
	jmp	SHORT $LN1@GetSegment
$LN2@GetSegment:

; 740  : 	return 0;

	fldz
$LN1@GetSegment:

; 741  : }

	mov	esp, ebp
	pop	ebp
	ret	4
?GetSegmentLength@CRope@@QBEMH@Z ENDP			; CRope::GetSegmentLength
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xashxt_v0.81_rev.1_with_sources\xashxt_v0.81_rev.1_src\server\ropes\crope.cpp
_TEXT	SEGMENT
$T1 = -92						; size = 12
$T2 = -80						; size = 12
$T3 = -68						; size = 12
_vecDist$ = -56						; size = 12
_vecResult$ = -44					; size = 12
tv192 = -32						; size = 8
tv163 = -24						; size = 8
_this$ = -16						; size = 4
_flRoll$ = -12						; size = 4
tv137 = -8						; size = 4
_flPitch$ = -4						; size = 4
_vecTop$ = 8						; size = 4
_vecBottom$ = 12					; size = 4
_vecOut$ = 16						; size = 4
?GetAlignmentAngles@CRope@@QAEXABVVector@@0AAV2@@Z PROC	; CRope::GetAlignmentAngles
; _this$ = ecx

; 198  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 92					; 0000005cH
	mov	DWORD PTR _this$[ebp], ecx

; 199  : 	Vector vecDist = vecBottom - vecTop;

	mov	eax, DWORD PTR _vecTop$[ebp]
	push	eax
	lea	ecx, DWORD PTR _vecDist$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _vecBottom$[ebp]
	call	??GVector@@QBE?AV0@ABV0@@Z		; Vector::operator-

; 200  : 
; 201  : 	Vector vecResult = vecDist.Normalize();

	lea	edx, DWORD PTR _vecResult$[ebp]
	push	edx
	lea	ecx, DWORD PTR _vecDist$[ebp]
	call	?Normalize@Vector@@QBE?AV1@XZ		; Vector::Normalize

; 202  : 
; 203  : 	const float flRoll = RAD2DEG( acos( DotProduct( vecResult, Vector( 0.0f, 1.0f, 0.0f ))) );

	push	ecx
	xorps	xmm0, xmm0
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	xorps	xmm0, xmm0
	movss	DWORD PTR [esp], xmm0
	lea	ecx, DWORD PTR $T3[ebp]
	call	??0Vector@@QAE@MMM@Z			; Vector::Vector
	push	eax
	lea	eax, DWORD PTR _vecResult$[ebp]
	push	eax
	call	?DotProduct@@YAMABVVector@@0@Z		; DotProduct
	fstp	QWORD PTR [esp]
	call	_acos
	add	esp, 8
	fstp	QWORD PTR tv163[ebp]
	movsd	xmm0, QWORD PTR tv163[ebp]
	cvtsd2ss xmm0, xmm0
	mulss	xmm0, DWORD PTR __real@42652ee1
	movss	DWORD PTR _flRoll$[ebp], xmm0

; 204  : 
; 205  : 	vecDist.y = 0;

	xorps	xmm0, xmm0
	movss	DWORD PTR _vecDist$[ebp+4], xmm0

; 206  : 
; 207  : 	vecResult = vecDist.Normalize();

	lea	ecx, DWORD PTR $T2[ebp]
	push	ecx
	lea	ecx, DWORD PTR _vecDist$[ebp]
	call	?Normalize@Vector@@QBE?AV1@XZ		; Vector::Normalize
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR _vecResult$[ebp], edx
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _vecResult$[ebp+4], ecx
	mov	edx, DWORD PTR [eax+8]
	mov	DWORD PTR _vecResult$[ebp+8], edx

; 208  : 
; 209  : 	const float flPitch = RAD2DEG( acos( DotProduct( vecResult, Vector( 0.0f, 0.0f, -1.0f ))) );

	push	ecx
	movss	xmm0, DWORD PTR __real@bf800000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	xorps	xmm0, xmm0
	movss	DWORD PTR [esp], xmm0
	push	ecx
	xorps	xmm0, xmm0
	movss	DWORD PTR [esp], xmm0
	lea	ecx, DWORD PTR $T1[ebp]
	call	??0Vector@@QAE@MMM@Z			; Vector::Vector
	push	eax
	lea	eax, DWORD PTR _vecResult$[ebp]
	push	eax
	call	?DotProduct@@YAMABVVector@@0@Z		; DotProduct
	fstp	QWORD PTR [esp]
	call	_acos
	add	esp, 8
	fstp	QWORD PTR tv192[ebp]
	movsd	xmm0, QWORD PTR tv192[ebp]
	cvtsd2ss xmm0, xmm0
	mulss	xmm0, DWORD PTR __real@42652ee1
	movss	DWORD PTR _flPitch$[ebp], xmm0

; 210  : 
; 211  : 	vecOut.x = ( vecResult.x >= 0.0 ) ? -flPitch : flPitch;

	cvtss2sd xmm0, DWORD PTR _vecResult$[ebp]
	comisd	xmm0, QWORD PTR __real@0000000000000000
	jb	SHORT $LN3@GetAlignme
	movss	xmm0, DWORD PTR _flPitch$[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	movss	DWORD PTR tv137[ebp], xmm0
	jmp	SHORT $LN4@GetAlignme
$LN3@GetAlignme:
	movss	xmm0, DWORD PTR _flPitch$[ebp]
	movss	DWORD PTR tv137[ebp], xmm0
$LN4@GetAlignme:
	mov	ecx, DWORD PTR _vecOut$[ebp]
	movss	xmm0, DWORD PTR tv137[ebp]
	movss	DWORD PTR [ecx], xmm0

; 212  : 	vecOut.y = 0.0f;

	mov	edx, DWORD PTR _vecOut$[ebp]
	xorps	xmm0, xmm0
	movss	DWORD PTR [edx+4], xmm0

; 213  : 	vecOut.z = -flRoll;

	movss	xmm0, DWORD PTR _flRoll$[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mov	eax, DWORD PTR _vecOut$[ebp]
	movss	DWORD PTR [eax+8], xmm0

; 214  : }

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?GetAlignmentAngles@CRope@@QAEXABVVector@@0AAV2@@Z ENDP	; CRope::GetAlignmentAngles
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xashxt_v0.81_rev.1_with_sources\xashxt_v0.81_rev.1_src\server\ropes\crope.h
;	COMDAT ?GetEndingModel@CRope@@QBEHXZ
_TEXT	SEGMENT
tv72 = -8						; size = 4
_this$ = -4						; size = 4
?GetEndingModel@CRope@@QBEHXZ PROC			; CRope::GetEndingModel, COMDAT
; _this$ = ecx

; 72   : 	string_t GetEndingModel() const { return (pev->modelindex) ? NULL_STRING : m_iszEndingModel; }

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	cmp	DWORD PTR [ecx+180], 0
	je	SHORT $LN3@GetEndingM
	mov	DWORD PTR tv72[ebp], 0
	jmp	SHORT $LN4@GetEndingM
$LN3@GetEndingM:
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+1992]
	mov	DWORD PTR tv72[ebp], eax
$LN4@GetEndingM:
	mov	eax, DWORD PTR tv72[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetEndingModel@CRope@@QBEHXZ ENDP			; CRope::GetEndingModel
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xashxt_v0.81_rev.1_with_sources\xashxt_v0.81_rev.1_src\server\ropes\crope.h
;	COMDAT ?GetBodyModel@CRope@@QBEHXZ
_TEXT	SEGMENT
tv72 = -8						; size = 4
_this$ = -4						; size = 4
?GetBodyModel@CRope@@QBEHXZ PROC			; CRope::GetBodyModel, COMDAT
; _this$ = ecx

; 71   : 	string_t GetBodyModel() const { return (pev->modelindex) ? NULL_STRING : m_iszBodyModel; }

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	cmp	DWORD PTR [ecx+180], 0
	je	SHORT $LN3@GetBodyMod
	mov	DWORD PTR tv72[ebp], 0
	jmp	SHORT $LN4@GetBodyMod
$LN3@GetBodyMod:
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+1988]
	mov	DWORD PTR tv72[ebp], eax
$LN4@GetBodyMod:
	mov	eax, DWORD PTR tv72[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetBodyModel@CRope@@QBEHXZ ENDP			; CRope::GetBodyModel
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xashxt_v0.81_rev.1_with_sources\xashxt_v0.81_rev.1_src\server\ropes\crope.cpp
_TEXT	SEGMENT
tv130 = -20						; size = 8
_data$1 = -12						; size = 4
tv85 = -8						; size = 4
_this$ = -4						; size = 4
?ShouldCreak@CRope@@QBE_NXZ PROC			; CRope::ShouldCreak
; _this$ = ecx

; 724  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	mov	DWORD PTR _this$[ebp], ecx

; 725  : 	if( m_bObjectAttached && m_bMakeSound )

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+1980]
	test	ecx, ecx
	je	SHORT $LN3@ShouldCrea
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+1997]
	test	eax, eax
	je	SHORT $LN3@ShouldCrea

; 726  : 	{
; 727  : 		RopeSampleData& data = m_pSegments[m_iAttachedObjectsSegment]->m_Data;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+1968]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+edx*4+1712]
	add	ecx, 1704				; 000006a8H
	mov	DWORD PTR _data$1[ebp], ecx

; 728  : 
; 729  : 		if( data.mVelocity.Length() > 20.0 )

	mov	ecx, DWORD PTR _data$1[ebp]
	add	ecx, 12					; 0000000cH
	call	?Length@Vector@@QBEMXZ			; Vector::Length
	fstp	QWORD PTR tv130[ebp]
	movsd	xmm0, QWORD PTR tv130[ebp]
	comisd	xmm0, QWORD PTR __real@4034000000000000
	jbe	SHORT $LN3@ShouldCrea

; 730  : 			return RANDOM_LONG( 1, 5 ) == 1;

	push	5
	push	1
	call	DWORD PTR ?g_engfuncs@@3Uenginefuncs_s@@A+360
	add	esp, 8
	cmp	eax, 1
	jne	SHORT $LN5@ShouldCrea
	mov	DWORD PTR tv85[ebp], 1
	jmp	SHORT $LN6@ShouldCrea
$LN5@ShouldCrea:
	mov	DWORD PTR tv85[ebp], 0
$LN6@ShouldCrea:
	mov	al, BYTE PTR tv85[ebp]
	jmp	SHORT $LN1@ShouldCrea
$LN3@ShouldCrea:

; 731  : 	}
; 732  : 
; 733  : 	return false;

	xor	al, al
$LN1@ShouldCrea:

; 734  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?ShouldCreak@CRope@@QBE_NXZ ENDP			; CRope::ShouldCreak
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xashxt_v0.81_rev.1_with_sources\xashxt_v0.81_rev.1_src\server\ropes\crope.cpp
_TEXT	SEGMENT
tv75 = -8						; size = 4
_this$ = -4						; size = 4
?IsAcceptingAttachment@CRope@@QBE_NXZ PROC		; CRope::IsAcceptingAttachment
; _this$ = ecx

; 717  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 718  : 	if( gpGlobals->time - m_flDetachTime > 2.0 && !m_bObjectAttached )

	mov	eax, DWORD PTR ?gpGlobals@@3PAUglobalvars_t@@A ; gpGlobals
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax]
	subss	xmm0, DWORD PTR [ecx+1984]
	cvtss2sd xmm0, xmm0
	comisd	xmm0, QWORD PTR __real@4000000000000000
	jbe	SHORT $LN2@IsAcceptin
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+1980]
	test	eax, eax
	jne	SHORT $LN2@IsAcceptin

; 719  : 		return !m_bDisallowPlayerAttachment;

	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+1972]
	test	edx, edx
	jne	SHORT $LN4@IsAcceptin
	mov	DWORD PTR tv75[ebp], 1
	jmp	SHORT $LN5@IsAcceptin
$LN4@IsAcceptin:
	mov	DWORD PTR tv75[ebp], 0
$LN5@IsAcceptin:
	mov	al, BYTE PTR tv75[ebp]
	jmp	SHORT $LN1@IsAcceptin
$LN2@IsAcceptin:

; 720  : 	return false;

	xor	al, al
$LN1@IsAcceptin:

; 721  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?IsAcceptingAttachment@CRope@@QBE_NXZ ENDP		; CRope::IsAcceptingAttachment
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xashxt_v0.81_rev.1_with_sources\xashxt_v0.81_rev.1_src\server\ropes\crope.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
?DetachObject@CRope@@QAEXXZ PROC			; CRope::DetachObject
; _this$ = ecx

; 711  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 712  : 	m_flDetachTime = gpGlobals->time;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ?gpGlobals@@3PAUglobalvars_t@@A ; gpGlobals
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax+1984], edx

; 713  : 	m_bObjectAttached = false;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+1980], 0

; 714  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?DetachObject@CRope@@QAEXXZ ENDP			; CRope::DetachObject
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xashxt_v0.81_rev.1_with_sources\xashxt_v0.81_rev.1_src\server\ropes\crope.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
_pSegment$ = 8						; size = 4
?AttachObjectToSegment@CRope@@QAEXPAVCRopeSegment@@@Z PROC ; CRope::AttachObjectToSegment
; _this$ = ecx

; 702  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 703  : 	SetAttachedObjectsSegment( pSegment );

	mov	eax, DWORD PTR _pSegment$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetAttachedObjectsSegment@CRope@@QAEXPAVCRopeSegment@@@Z ; CRope::SetAttachedObjectsSegment

; 704  : 
; 705  : 	m_flAttachedObjectsOffset = 0;

	mov	ecx, DWORD PTR _this$[ebp]
	xorps	xmm0, xmm0
	movss	DWORD PTR [ecx+1976], xmm0

; 706  : 	m_bObjectAttached = true;

	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+1980], 1

; 707  : 	m_flDetachTime = 0;

	mov	eax, DWORD PTR _this$[ebp]
	xorps	xmm0, xmm0
	movss	DWORD PTR [eax+1984], xmm0

; 708  : }

	mov	esp, ebp
	pop	ebp
	ret	4
?AttachObjectToSegment@CRope@@QAEXPAVCRopeSegment@@@Z ENDP ; CRope::AttachObjectToSegment
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xashxt_v0.81_rev.1_with_sources\xashxt_v0.81_rev.1_src\server\ropes\crope.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
_vecForce$ = 8						; size = 4
_iSegment$ = 12						; size = 4
?ApplyForceToSegment@CRope@@QAEXABVVector@@H@Z PROC	; CRope::ApplyForceToSegment
; _this$ = ecx

; 689  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 690  : 	if( iSegment < m_iSegments )

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _iSegment$[ebp]
	cmp	ecx, DWORD PTR [eax+1680]
	jge	SHORT $LN2@ApplyForce

; 691  : 	{
; 692  : 		m_pSegments[iSegment]->ApplyExternalForce( vecForce );

	mov	edx, DWORD PTR _vecForce$[ebp]
	push	edx
	mov	eax, DWORD PTR _iSegment$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+eax*4+1712]
	call	?ApplyExternalForce@CRopeSegment@@QAEXABVVector@@@Z ; CRopeSegment::ApplyExternalForce
	jmp	SHORT $LN1@ApplyForce
$LN2@ApplyForce:

; 693  : 	}
; 694  : 	else if( iSegment == m_iSegments )

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _iSegment$[ebp]
	cmp	eax, DWORD PTR [edx+1680]
	jne	SHORT $LN1@ApplyForce

; 695  : 	{
; 696  : 		// Apply force to the last sample.
; 697  : 		m_pSegments[iSegment - 1]->ApplyExternalForce( vecForce );

	mov	ecx, DWORD PTR _vecForce$[ebp]
	push	ecx
	mov	edx, DWORD PTR _iSegment$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+edx*4+1708]
	call	?ApplyExternalForce@CRopeSegment@@QAEXABVVector@@@Z ; CRopeSegment::ApplyExternalForce
$LN1@ApplyForce:

; 698  : 	}
; 699  : }

	mov	esp, ebp
	pop	ebp
	ret	8
?ApplyForceToSegment@CRope@@QAEXABVVector@@H@Z ENDP	; CRope::ApplyForceToSegment
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xashxt_v0.81_rev.1_with_sources\xashxt_v0.81_rev.1_src\server\ropes\crope.cpp
_TEXT	SEGMENT
_vecScaledForce$ = -20					; size = 12
_flForce$ = -8						; size = 4
_this$ = -4						; size = 4
_vecForce$ = 8						; size = 4
?ApplyForceFromPlayer@CRope@@QAEXABVVector@@@Z PROC	; CRope::ApplyForceFromPlayer
; _this$ = ecx

; 674  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	mov	DWORD PTR _this$[ebp], ecx

; 675  : 	if( !m_bObjectAttached )

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+1980]
	test	ecx, ecx
	jne	SHORT $LN2@ApplyForce

; 676  : 		return;

	jmp	SHORT $LN1@ApplyForce
$LN2@ApplyForce:

; 677  : 
; 678  : 	float flForce = 20000.0;

	movss	xmm0, DWORD PTR __real@469c4000
	movss	DWORD PTR _flForce$[ebp], xmm0

; 679  : 
; 680  : 	if( m_iSegments < 26 )

	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+1680], 26		; 0000001aH
	jge	SHORT $LN3@ApplyForce

; 681  : 		flForce *= ( m_iSegments / 26.0 );

	mov	eax, DWORD PTR _this$[ebp]
	cvtsi2sd xmm0, DWORD PTR [eax+1680]
	divsd	xmm0, QWORD PTR __real@403a000000000000
	cvtss2sd xmm1, DWORD PTR _flForce$[ebp]
	mulsd	xmm1, xmm0
	cvtsd2ss xmm0, xmm1
	movss	DWORD PTR _flForce$[ebp], xmm0
$LN3@ApplyForce:

; 682  : 
; 683  : 	const Vector vecScaledForce = vecForce * flForce;

	push	ecx
	movss	xmm0, DWORD PTR _flForce$[ebp]
	movss	DWORD PTR [esp], xmm0
	lea	ecx, DWORD PTR _vecScaledForce$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _vecForce$[ebp]
	call	??DVector@@QBE?AV0@M@Z			; Vector::operator*

; 684  : 
; 685  : 	ApplyForceToSegment( vecScaledForce, m_iAttachedObjectsSegment );

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+1968]
	push	eax
	lea	ecx, DWORD PTR _vecScaledForce$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ApplyForceToSegment@CRope@@QAEXABVVector@@H@Z ; CRope::ApplyForceToSegment
$LN1@ApplyForce:

; 686  : }

	mov	esp, ebp
	pop	ebp
	ret	4
?ApplyForceFromPlayer@CRope@@QAEXABVVector@@@Z ENDP	; CRope::ApplyForceFromPlayer
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xashxt_v0.81_rev.1_with_sources\xashxt_v0.81_rev.1_src\server\ropes\crope.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?GetAttachedObjectsVelocity@CRope@@QBE?AVVector@@XZ PROC ; CRope::GetAttachedObjectsVelocity
; _this$ = ecx

; 666  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 667  : 	if( !m_bObjectAttached )

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+1980]
	test	ecx, ecx
	jne	SHORT $LN2@GetAttache

; 668  : 		return g_vecZero;

	push	OFFSET ?g_vecZero@@3VVector@@B		; g_vecZero
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0Vector@@QAE@ABV0@@Z			; Vector::Vector
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	SHORT $LN1@GetAttache
$LN2@GetAttache:

; 669  : 
; 670  : 	return m_pSegments[m_iAttachedObjectsSegment]->m_Data.mVelocity;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+1968]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4+1712]
	add	edx, 1716				; 000006b4H
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0Vector@@QAE@ABV0@@Z			; Vector::Vector
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
$LN1@GetAttache:

; 671  : }

	mov	esp, ebp
	pop	ebp
	ret	4
?GetAttachedObjectsVelocity@CRope@@QBE?AVVector@@XZ ENDP ; CRope::GetAttachedObjectsVelocity
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xashxt_v0.81_rev.1_with_sources\xashxt_v0.81_rev.1_src\server\ropes\crope.cpp
_TEXT	SEGMENT
_flOffset$1 = -24					; size = 4
_flSegLength$2 = -20					; size = 4
_flDistance$ = -16					; size = 4
_flNewDist$3 = -12					; size = 4
_this$ = -8						; size = 4
_bOnRope$ = -2						; size = 1
_bDoIteration$ = -1					; size = 1
_flDeltaTime$ = 8					; size = 4
?MoveDown@CRope@@QAE_NM@Z PROC				; CRope::MoveDown
; _this$ = ecx

; 615  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	mov	DWORD PTR _this$[ebp], ecx

; 616  : 	if( !m_bObjectAttached )

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+1980]
	test	ecx, ecx
	jne	SHORT $LN6@MoveDown

; 617  : 		return false;

	xor	al, al
	jmp	$LN1@MoveDown
$LN6@MoveDown:

; 618  : 
; 619  : 	float flDistance = flDeltaTime * 128.0f;

	movss	xmm0, DWORD PTR _flDeltaTime$[ebp]
	mulss	xmm0, DWORD PTR __real@43000000
	movss	DWORD PTR _flDistance$[ebp], xmm0

; 620  : 	bool bDoIteration = true;

	mov	BYTE PTR _bDoIteration$[ebp], 1

; 621  : 	bool bOnRope = true;

	mov	BYTE PTR _bOnRope$[ebp], 1
$LN2@MoveDown:

; 622  : 
; 623  : 	while( bDoIteration )

	movzx	edx, BYTE PTR _bDoIteration$[ebp]
	test	edx, edx
	je	$LN3@MoveDown

; 624  : 	{
; 625  : 		bDoIteration = false;

	mov	BYTE PTR _bDoIteration$[ebp], 0

; 626  : 
; 627  : 		if( flDistance > 0.0f )

	movss	xmm0, DWORD PTR _flDistance$[ebp]
	comiss	xmm0, DWORD PTR __real@00000000
	jbe	$LN5@MoveDown

; 628  : 		{
; 629  : 			float flNewDist = flDistance;

	movss	xmm0, DWORD PTR _flDistance$[ebp]
	movss	DWORD PTR _flNewDist$3[ebp], xmm0

; 630  : 			float flSegLength = 0.0f;

	xorps	xmm0, xmm0
	movss	DWORD PTR _flSegLength$2[ebp], xmm0
$LN4@MoveDown:

; 631  : 
; 632  : 			while( bOnRope )

	movzx	eax, BYTE PTR _bOnRope$[ebp]
	test	eax, eax
	je	$LN5@MoveDown

; 633  : 			{
; 634  : 				if( m_iAttachedObjectsSegment < m_iSegments )

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+1968]
	cmp	eax, DWORD PTR [edx+1680]
	jge	SHORT $LN8@MoveDown

; 635  : 					flSegLength = m_pSegments[m_iAttachedObjectsSegment]->m_Data.restLength;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+1968]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+edx*4+1712]
	movss	xmm0, DWORD PTR [ecx+1760]
	movss	DWORD PTR _flSegLength$2[ebp], xmm0
$LN8@MoveDown:

; 636  : 
; 637  : 				const float flOffset = flSegLength - m_flAttachedObjectsOffset;

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _flSegLength$2[ebp]
	subss	xmm0, DWORD PTR [edx+1976]
	movss	DWORD PTR _flOffset$1[ebp], xmm0

; 638  : 
; 639  : 				if( flNewDist <= flOffset )

	movss	xmm0, DWORD PTR _flOffset$1[ebp]
	comiss	xmm0, DWORD PTR _flNewDist$3[ebp]
	jb	SHORT $LN9@MoveDown

; 640  : 				{
; 641  : 					m_flAttachedObjectsOffset += flNewDist;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+1976]
	addss	xmm0, DWORD PTR _flNewDist$3[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [ecx+1976], xmm0

; 642  : 					flDistance = 0;

	xorps	xmm0, xmm0
	movss	DWORD PTR _flDistance$[ebp], xmm0

; 643  : 					bDoIteration = true;

	mov	BYTE PTR _bDoIteration$[ebp], 1

; 644  : 					break;

	jmp	SHORT $LN5@MoveDown
$LN9@MoveDown:

; 645  : 				}
; 646  : 
; 647  : 				if( m_iAttachedObjectsSegment + 1 == m_iSegments )

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+1968]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	eax, DWORD PTR [ecx+1680]
	jne	SHORT $LN10@MoveDown

; 648  : 					bOnRope = false;

	mov	BYTE PTR _bOnRope$[ebp], 0
	jmp	SHORT $LN11@MoveDown
$LN10@MoveDown:

; 649  : 				else m_iAttachedObjectsSegment++;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+1968]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+1968], eax
$LN11@MoveDown:

; 650  : 
; 651  : 				flNewDist -= flOffset;

	movss	xmm0, DWORD PTR _flNewDist$3[ebp]
	subss	xmm0, DWORD PTR _flOffset$1[ebp]
	movss	DWORD PTR _flNewDist$3[ebp], xmm0

; 652  : 				flSegLength = 0;

	xorps	xmm0, xmm0
	movss	DWORD PTR _flSegLength$2[ebp], xmm0

; 653  : 
; 654  : 				m_flAttachedObjectsOffset = 0;

	mov	edx, DWORD PTR _this$[ebp]
	xorps	xmm0, xmm0
	movss	DWORD PTR [edx+1976], xmm0

; 655  : 
; 656  : 				if( flNewDist <= 0 )

	xorps	xmm0, xmm0
	comiss	xmm0, DWORD PTR _flNewDist$3[ebp]
	jb	SHORT $LN12@MoveDown

; 657  : 					break;

	jmp	SHORT $LN5@MoveDown
$LN12@MoveDown:

; 658  : 			}

	jmp	$LN4@MoveDown
$LN5@MoveDown:

; 659  : 		}
; 660  : 	}

	jmp	$LN2@MoveDown
$LN3@MoveDown:

; 661  : 
; 662  : 	return bOnRope;

	mov	al, BYTE PTR _bOnRope$[ebp]
$LN1@MoveDown:

; 663  : }

	mov	esp, ebp
	pop	ebp
	ret	4
?MoveDown@CRope@@QAE_NM@Z ENDP				; CRope::MoveDown
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xashxt_v0.81_rev.1_with_sources\xashxt_v0.81_rev.1_src\server\ropes\crope.cpp
_TEXT	SEGMENT
_flNewOffset$1 = -16					; size = 4
_flDistance$2 = -12					; size = 4
_flOldDist$3 = -8					; size = 4
_this$ = -4						; size = 4
_flDeltaTime$ = 8					; size = 4
?MoveUp@CRope@@QAE_NM@Z PROC				; CRope::MoveUp
; _this$ = ecx

; 575  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx

; 576  : 	if( m_iAttachedObjectsSegment > ROPE_IGNORE_SAMPLES )

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+1968], 4
	jle	$LN3@MoveUp

; 577  : 	{
; 578  : 		float flDistance = flDeltaTime * 128.0f;

	movss	xmm0, DWORD PTR _flDeltaTime$[ebp]
	mulss	xmm0, DWORD PTR __real@43000000
	movss	DWORD PTR _flDistance$2[ebp], xmm0
$LN2@MoveUp:

; 579  : 
; 580  : 		while( 1 )

	mov	ecx, 1
	test	ecx, ecx
	je	$LN3@MoveUp

; 581  : 		{
; 582  : 			float flOldDist = flDistance;

	movss	xmm0, DWORD PTR _flDistance$2[ebp]
	movss	DWORD PTR _flOldDist$3[ebp], xmm0

; 583  : 
; 584  : 			flDistance = 0;

	xorps	xmm0, xmm0
	movss	DWORD PTR _flDistance$2[ebp], xmm0

; 585  : 
; 586  : 			if( flOldDist <= 0 )

	xorps	xmm0, xmm0
	comiss	xmm0, DWORD PTR _flOldDist$3[ebp]
	jb	SHORT $LN5@MoveUp

; 587  : 				break;

	jmp	$LN3@MoveUp
$LN5@MoveUp:

; 588  : 
; 589  : 			if( m_iAttachedObjectsSegment <= 3 )

	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+1968], 3
	jg	SHORT $LN6@MoveUp

; 590  : 				break;

	jmp	$LN3@MoveUp
$LN6@MoveUp:

; 591  : 
; 592  : 			if( flOldDist > m_flAttachedObjectsOffset )

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _flOldDist$3[ebp]
	comiss	xmm0, DWORD PTR [eax+1976]
	jbe	SHORT $LN7@MoveUp

; 593  : 			{
; 594  : 				flDistance = flOldDist - m_flAttachedObjectsOffset;

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _flOldDist$3[ebp]
	subss	xmm0, DWORD PTR [ecx+1976]
	movss	DWORD PTR _flDistance$2[ebp], xmm0

; 595  : 
; 596  : 				m_iAttachedObjectsSegment--;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+1968]
	sub	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+1968], eax

; 597  : 
; 598  : 				float flNewOffset = 0.0f;

	xorps	xmm0, xmm0
	movss	DWORD PTR _flNewOffset$1[ebp], xmm0

; 599  : 
; 600  : 				if( m_iAttachedObjectsSegment < m_iSegments )

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1968]
	cmp	ecx, DWORD PTR [eax+1680]
	jge	SHORT $LN9@MoveUp

; 601  : 					flNewOffset = m_pSegments[m_iAttachedObjectsSegment]->m_Data.restLength;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+1968]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4+1712]
	movss	xmm0, DWORD PTR [edx+1760]
	movss	DWORD PTR _flNewOffset$1[ebp], xmm0
$LN9@MoveUp:

; 602  : 				m_flAttachedObjectsOffset = flNewOffset;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _flNewOffset$1[ebp]
	movss	DWORD PTR [eax+1976], xmm0

; 603  : 			}
; 604  : 			else

	jmp	SHORT $LN8@MoveUp
$LN7@MoveUp:

; 605  : 			{
; 606  : 				m_flAttachedObjectsOffset -= flOldDist;

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+1976]
	subss	xmm0, DWORD PTR _flOldDist$3[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [edx+1976], xmm0
$LN8@MoveUp:

; 607  : 			}
; 608  : 		}

	jmp	$LN2@MoveUp
$LN3@MoveUp:

; 609  : 	}
; 610  : 
; 611  : 	return true;

	mov	al, 1

; 612  : }

	mov	esp, ebp
	pop	ebp
	ret	4
?MoveUp@CRope@@QAE_NM@Z ENDP				; CRope::MoveUp
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xashxt_v0.81_rev.1_with_sources\xashxt_v0.81_rev.1_src\server\ropes\crope.cpp
_TEXT	SEGMENT
$T1 = -288						; size = 12
$T2 = -276						; size = 12
_vecAngles$ = -264					; size = 12
$T3 = -252						; size = 12
$T4 = -240						; size = 12
$T5 = -228						; size = 12
$T6 = -216						; size = 12
_vecEnd$7 = -204					; size = 12
_vecNormal$8 = -192					; size = 12
_vecOrigin$9 = -180					; size = 12
_vecOrigin$10 = -168					; size = 12
_vecOrigin$11 = -156					; size = 12
_vecOrigin$12 = -144					; size = 12
_vecTraceDist$13 = -132					; size = 12
_vecNormal$14 = -120					; size = 12
_tr$ = -108						; size = 56
_vecDist$15 = -52					; size = 12
_flTraceDist$16 = -40					; size = 4
tv141 = -36						; size = 4
_data$17 = -32						; size = 4
_pSegment$18 = -28					; size = 4
_iSeg$19 = -24						; size = 4
_iSeg$20 = -20						; size = 4
_iSeg$21 = -16						; size = 4
_pSegment$22 = -12					; size = 4
_pSegment$23 = -8					; size = 4
_this$ = -4						; size = 4
?TraceModels@CRope@@QAEXXZ PROC				; CRope::TraceModels
; _this$ = ecx

; 459  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 288				; 00000120H
	mov	DWORD PTR _this$[ebp], ecx

; 460  : 	if( m_iSegments <= 0 )

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+1680], 0
	jg	SHORT $LN11@TraceModel

; 461  : 		return;

	jmp	$LN1@TraceModel
$LN11@TraceModel:

; 462  : 
; 463  : 	if( m_iSegments > 1 )

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+1680], 1
	jle	SHORT $LN12@TraceModel

; 464  : 		SetSegmentAngles( m_pSegments[0], m_pSegments[1] );

	mov	edx, 4
	shl	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+edx+1712]
	push	ecx
	mov	edx, 4
	imul	eax, edx, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+eax+1712]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetSegmentAngles@CRope@@QAEXPAVCRopeSegment@@0@Z ; CRope::SetSegmentAngles
$LN12@TraceModel:

; 465  : 
; 466  : 	TraceResult tr;

	lea	ecx, DWORD PTR _tr$[ebp]
	call	??0gametrace_s@@QAE@XZ

; 467  : 
; 468  : 	if( m_bObjectAttached )

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+1980]
	test	ecx, ecx
	je	$LN13@TraceModel

; 469  : 	{
; 470  : 		for( int iSeg = 1; iSeg < m_iNumSamples; iSeg++ )

	mov	DWORD PTR _iSeg$21[ebp], 1
	jmp	SHORT $LN4@TraceModel
$LN2@TraceModel:
	mov	edx, DWORD PTR _iSeg$21[ebp]
	add	edx, 1
	mov	DWORD PTR _iSeg$21[ebp], edx
$LN4@TraceModel:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _iSeg$21[ebp]
	cmp	ecx, DWORD PTR [eax+1684]
	jge	$LN3@TraceModel

; 471  : 		{
; 472  : 			CRopeSegment* pSegment = m_pSegments[iSeg];

	mov	edx, DWORD PTR _iSeg$21[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+edx*4+1712]
	mov	DWORD PTR _pSegment$23[ebp], ecx

; 473  : 
; 474  : 			Vector vecDist = pSegment->m_Data.mPosition - m_pSegments[iSeg]->GetAbsOrigin();

	mov	edx, DWORD PTR _iSeg$21[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+edx*4+1712]
	call	?GetAbsOrigin@CBaseEntity@@QBEABVVector@@XZ ; CBaseEntity::GetAbsOrigin
	push	eax
	lea	ecx, DWORD PTR _vecDist$15[ebp]
	push	ecx
	mov	ecx, DWORD PTR _pSegment$23[ebp]
	add	ecx, 1704				; 000006a8H
	call	??GVector@@QBE?AV0@ABV0@@Z		; Vector::operator-

; 475  : 			
; 476  : 			vecDist = vecDist.Normalize();

	lea	edx, DWORD PTR $T6[ebp]
	push	edx
	lea	ecx, DWORD PTR _vecDist$15[ebp]
	call	?Normalize@Vector@@QBE?AV1@XZ		; Vector::Normalize
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _vecDist$15[ebp], ecx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR _vecDist$15[ebp+4], edx
	mov	eax, DWORD PTR [eax+8]
	mov	DWORD PTR _vecDist$15[ebp+8], eax

; 477  : 
; 478  : 			const float flTraceDist = ( iSeg - m_iAttachedObjectsSegment + 2 ) < 5 ? 50 : 10;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _iSeg$21[ebp]
	sub	edx, DWORD PTR [ecx+1968]
	add	edx, 2
	cmp	edx, 5
	jge	SHORT $LN25@TraceModel
	mov	DWORD PTR tv141[ebp], 50		; 00000032H
	jmp	SHORT $LN26@TraceModel
$LN25@TraceModel:
	mov	DWORD PTR tv141[ebp], 10		; 0000000aH
$LN26@TraceModel:
	cvtsi2ss xmm0, DWORD PTR tv141[ebp]
	movss	DWORD PTR _flTraceDist$16[ebp], xmm0

; 479  : 
; 480  : 			const Vector vecTraceDist = vecDist * flTraceDist;

	push	ecx
	movss	xmm0, DWORD PTR _flTraceDist$16[ebp]
	movss	DWORD PTR [esp], xmm0
	lea	eax, DWORD PTR _vecTraceDist$13[ebp]
	push	eax
	lea	ecx, DWORD PTR _vecDist$15[ebp]
	call	??DVector@@QBE?AV0@M@Z			; Vector::operator*

; 481  : 
; 482  : 			const Vector vecEnd = pSegment->m_Data.mPosition + vecTraceDist;

	lea	ecx, DWORD PTR _vecTraceDist$13[ebp]
	push	ecx
	lea	edx, DWORD PTR _vecEnd$7[ebp]
	push	edx
	mov	ecx, DWORD PTR _pSegment$23[ebp]
	add	ecx, 1704				; 000006a8H
	call	??HVector@@QBE?AV0@ABV0@@Z		; Vector::operator+

; 483  : 
; 484  : 			UTIL_TraceLine( pSegment->GetAbsOrigin(), vecEnd, ignore_monsters, edict(), &tr );

	lea	eax, DWORD PTR _tr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?edict@CBaseEntity@@QAEPAUedict_s@@XZ	; CBaseEntity::edict
	push	eax
	push	1
	lea	ecx, DWORD PTR _vecEnd$7[ebp]
	push	ecx
	mov	ecx, DWORD PTR _pSegment$23[ebp]
	call	?GetAbsOrigin@CBaseEntity@@QBEABVVector@@XZ ; CBaseEntity::GetAbsOrigin
	push	eax
	call	?UTIL_TraceLine@@YAXABVVector@@0W4IGNORE_MONSTERS@@PAUedict_s@@PAUgametrace_s@@@Z ; UTIL_TraceLine
	add	esp, 20					; 00000014H

; 485  : 			
; 486  : 			if( tr.flFraction == 1.0 && tr.fAllSolid )

	cvtss2sd xmm0, DWORD PTR _tr$[ebp+16]
	ucomisd	xmm0, QWORD PTR __real@3ff0000000000000
	lahf
	test	ah, 68					; 00000044H
	jp	SHORT $LN15@TraceModel
	cmp	DWORD PTR _tr$[ebp], 0
	je	SHORT $LN15@TraceModel

; 487  : 			{
; 488  : 				break;

	jmp	$LN3@TraceModel
$LN15@TraceModel:

; 489  : 			}
; 490  : 
; 491  : 			if( tr.flFraction != 1.0 || tr.fStartSolid || !tr.fInOpen )

	cvtss2sd xmm0, DWORD PTR _tr$[ebp+16]
	ucomisd	xmm0, QWORD PTR __real@3ff0000000000000
	lahf
	test	ah, 68					; 00000044H
	jp	SHORT $LN18@TraceModel
	cmp	DWORD PTR _tr$[ebp+4], 0
	jne	SHORT $LN18@TraceModel
	cmp	DWORD PTR _tr$[ebp+8], 0
	jne	$LN16@TraceModel
$LN18@TraceModel:

; 492  : 			{
; 493  : 				Vector vecOrigin = tr.vecEndPos - vecTraceDist;

	lea	edx, DWORD PTR _vecTraceDist$13[ebp]
	push	edx
	lea	eax, DWORD PTR _vecOrigin$12[ebp]
	push	eax
	lea	ecx, DWORD PTR _tr$[ebp+20]
	call	??GVector@@QBE?AV0@ABV0@@Z		; Vector::operator-

; 494  : 
; 495  : 				TruncateEpsilon( vecOrigin );

	lea	ecx, DWORD PTR _vecOrigin$12[ebp]
	push	ecx
	call	?TruncateEpsilon@@YAXAAVVector@@@Z	; TruncateEpsilon
	add	esp, 4

; 496  : 
; 497  : 				pSegment->SetAbsOrigin( vecOrigin );

	lea	edx, DWORD PTR _vecOrigin$12[ebp]
	push	edx
	mov	ecx, DWORD PTR _pSegment$23[ebp]
	call	?SetAbsOrigin@CBaseEntity@@QAEXABVVector@@@Z ; CBaseEntity::SetAbsOrigin

; 498  : 				
; 499  : 				Vector vecNormal = tr.vecPlaneNormal.Normalize() * 20000.0;

	push	ecx
	movss	xmm0, DWORD PTR __real@469c4000
	movss	DWORD PTR [esp], xmm0
	lea	eax, DWORD PTR _vecNormal$14[ebp]
	push	eax
	lea	ecx, DWORD PTR $T5[ebp]
	push	ecx
	lea	ecx, DWORD PTR _tr$[ebp+36]
	call	?Normalize@Vector@@QBE?AV1@XZ		; Vector::Normalize
	mov	ecx, eax
	call	??DVector@@QBE?AV0@M@Z			; Vector::operator*

; 500  : 
; 501  : 				RopeSampleData& data = pSegment->m_Data;

	mov	edx, DWORD PTR _pSegment$23[ebp]
	add	edx, 1704				; 000006a8H
	mov	DWORD PTR _data$17[ebp], edx

; 502  : 
; 503  : 				data.mApplyExternalForce = true;

	mov	eax, DWORD PTR _data$17[ebp]
	mov	BYTE PTR [eax+48], 1

; 504  : 				data.mExternalForce = vecNormal;

	mov	ecx, DWORD PTR _data$17[ebp]
	add	ecx, 36					; 00000024H
	mov	edx, DWORD PTR _vecNormal$14[ebp]
	mov	DWORD PTR [ecx], edx
	mov	eax, DWORD PTR _vecNormal$14[ebp+4]
	mov	DWORD PTR [ecx+4], eax
	mov	edx, DWORD PTR _vecNormal$14[ebp+8]
	mov	DWORD PTR [ecx+8], edx

; 505  : 				data.mVelocity = g_vecZero;

	mov	eax, DWORD PTR _data$17[ebp]
	add	eax, 12					; 0000000cH
	mov	ecx, DWORD PTR ?g_vecZero@@3VVector@@B
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR ?g_vecZero@@3VVector@@B+4
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR ?g_vecZero@@3VVector@@B+8
	mov	DWORD PTR [eax+8], ecx

; 506  : 			}
; 507  : 			else

	jmp	SHORT $LN17@TraceModel
$LN16@TraceModel:

; 508  : 			{
; 509  : 				Vector vecOrigin = pSegment->m_Data.mPosition;

	mov	edx, DWORD PTR _pSegment$23[ebp]
	add	edx, 1704				; 000006a8H
	push	edx
	lea	ecx, DWORD PTR _vecOrigin$11[ebp]
	call	??0Vector@@QAE@ABV0@@Z			; Vector::Vector

; 510  : 
; 511  : 				TruncateEpsilon( vecOrigin );

	lea	eax, DWORD PTR _vecOrigin$11[ebp]
	push	eax
	call	?TruncateEpsilon@@YAXAAVVector@@@Z	; TruncateEpsilon
	add	esp, 4

; 512  : 
; 513  : 				pSegment->SetAbsOrigin( vecOrigin );

	lea	ecx, DWORD PTR _vecOrigin$11[ebp]
	push	ecx
	mov	ecx, DWORD PTR _pSegment$23[ebp]
	call	?SetAbsOrigin@CBaseEntity@@QAEXABVVector@@@Z ; CBaseEntity::SetAbsOrigin
$LN17@TraceModel:

; 514  : 			}
; 515  : 		}

	jmp	$LN2@TraceModel
$LN3@TraceModel:

; 516  : 	}
; 517  : 	else

	jmp	$LN6@TraceModel
$LN13@TraceModel:

; 518  : 	{
; 519  : 		for( int iSeg = 1; iSeg < m_iNumSamples; iSeg++ )

	mov	DWORD PTR _iSeg$19[ebp], 1
	jmp	SHORT $LN7@TraceModel
$LN5@TraceModel:
	mov	edx, DWORD PTR _iSeg$19[ebp]
	add	edx, 1
	mov	DWORD PTR _iSeg$19[ebp], edx
$LN7@TraceModel:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _iSeg$19[ebp]
	cmp	ecx, DWORD PTR [eax+1684]
	jge	$LN6@TraceModel

; 520  : 		{
; 521  : 			CRopeSegment* pSegment = m_pSegments[iSeg];

	mov	edx, DWORD PTR _iSeg$19[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+edx*4+1712]
	mov	DWORD PTR _pSegment$22[ebp], ecx

; 522  : 
; 523  : 			UTIL_TraceLine( pSegment->GetAbsOrigin(), pSegment->m_Data.mPosition, ignore_monsters, edict(), &tr );

	lea	edx, DWORD PTR _tr$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?edict@CBaseEntity@@QAEPAUedict_s@@XZ	; CBaseEntity::edict
	push	eax
	push	1
	mov	eax, DWORD PTR _pSegment$22[ebp]
	add	eax, 1704				; 000006a8H
	push	eax
	mov	ecx, DWORD PTR _pSegment$22[ebp]
	call	?GetAbsOrigin@CBaseEntity@@QBEABVVector@@XZ ; CBaseEntity::GetAbsOrigin
	push	eax
	call	?UTIL_TraceLine@@YAXABVVector@@0W4IGNORE_MONSTERS@@PAUedict_s@@PAUgametrace_s@@@Z ; UTIL_TraceLine
	add	esp, 20					; 00000014H

; 524  : 
; 525  : 			if( tr.flFraction == 1.0 )

	cvtss2sd xmm0, DWORD PTR _tr$[ebp+16]
	ucomisd	xmm0, QWORD PTR __real@3ff0000000000000
	lahf
	test	ah, 68					; 00000044H
	jp	SHORT $LN19@TraceModel

; 526  : 			{
; 527  : 				Vector vecOrigin = pSegment->m_Data.mPosition;

	mov	ecx, DWORD PTR _pSegment$22[ebp]
	add	ecx, 1704				; 000006a8H
	push	ecx
	lea	ecx, DWORD PTR _vecOrigin$10[ebp]
	call	??0Vector@@QAE@ABV0@@Z			; Vector::Vector

; 528  : 
; 529  : 				TruncateEpsilon( vecOrigin );

	lea	edx, DWORD PTR _vecOrigin$10[ebp]
	push	edx
	call	?TruncateEpsilon@@YAXAAVVector@@@Z	; TruncateEpsilon
	add	esp, 4

; 530  : 
; 531  : 				pSegment->SetAbsOrigin( vecOrigin );

	lea	eax, DWORD PTR _vecOrigin$10[ebp]
	push	eax
	mov	ecx, DWORD PTR _pSegment$22[ebp]
	call	?SetAbsOrigin@CBaseEntity@@QAEXABVVector@@@Z ; CBaseEntity::SetAbsOrigin

; 532  : 			}
; 533  : 			else

	jmp	$LN20@TraceModel
$LN19@TraceModel:

; 534  : 			{
; 535  : 				const Vector vecNormal = tr.vecPlaneNormal.Normalize();

	lea	ecx, DWORD PTR _vecNormal$8[ebp]
	push	ecx
	lea	ecx, DWORD PTR _tr$[ebp+36]
	call	?Normalize@Vector@@QBE?AV1@XZ		; Vector::Normalize

; 536  : 
; 537  : 				Vector vecOrigin = tr.vecEndPos + vecNormal * 10.0;

	push	ecx
	movss	xmm0, DWORD PTR __real@41200000
	movss	DWORD PTR [esp], xmm0
	lea	edx, DWORD PTR $T4[ebp]
	push	edx
	lea	ecx, DWORD PTR _vecNormal$8[ebp]
	call	??DVector@@QBE?AV0@M@Z			; Vector::operator*
	push	eax
	lea	eax, DWORD PTR _vecOrigin$9[ebp]
	push	eax
	lea	ecx, DWORD PTR _tr$[ebp+20]
	call	??HVector@@QBE?AV0@ABV0@@Z		; Vector::operator+

; 538  : 
; 539  : 				TruncateEpsilon( vecOrigin );

	lea	ecx, DWORD PTR _vecOrigin$9[ebp]
	push	ecx
	call	?TruncateEpsilon@@YAXAAVVector@@@Z	; TruncateEpsilon
	add	esp, 4

; 540  : 
; 541  : 				pSegment->SetAbsOrigin( vecOrigin );

	lea	edx, DWORD PTR _vecOrigin$9[ebp]
	push	edx
	mov	ecx, DWORD PTR _pSegment$22[ebp]
	call	?SetAbsOrigin@CBaseEntity@@QAEXABVVector@@@Z ; CBaseEntity::SetAbsOrigin

; 542  : 				pSegment->m_Data.mApplyExternalForce = true;

	mov	eax, DWORD PTR _pSegment$22[ebp]
	mov	BYTE PTR [eax+1752], 1

; 543  : 				pSegment->m_Data.mExternalForce = vecNormal * 40000.0;

	push	ecx
	movss	xmm0, DWORD PTR __real@471c4000
	movss	DWORD PTR [esp], xmm0
	lea	ecx, DWORD PTR $T3[ebp]
	push	ecx
	lea	ecx, DWORD PTR _vecNormal$8[ebp]
	call	??DVector@@QBE?AV0@M@Z			; Vector::operator*
	mov	edx, DWORD PTR _pSegment$22[ebp]
	add	edx, 1740				; 000006ccH
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR [edx], ecx
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR [edx+4], ecx
	mov	eax, DWORD PTR [eax+8]
	mov	DWORD PTR [edx+8], eax
$LN20@TraceModel:

; 544  : 			}
; 545  : 		}

	jmp	$LN5@TraceModel
$LN6@TraceModel:

; 546  : 	}
; 547  : 
; 548  : 	Vector vecAngles;

	lea	ecx, DWORD PTR _vecAngles$[ebp]
	call	??0Vector@@QAE@XZ			; Vector::Vector

; 549  : 
; 550  : 	for( int iSeg = 1; iSeg < m_iNumSamples; iSeg++ )

	mov	DWORD PTR _iSeg$20[ebp], 1
	jmp	SHORT $LN10@TraceModel
$LN8@TraceModel:
	mov	ecx, DWORD PTR _iSeg$20[ebp]
	add	ecx, 1
	mov	DWORD PTR _iSeg$20[ebp], ecx
$LN10@TraceModel:
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _iSeg$20[ebp]
	cmp	eax, DWORD PTR [edx+1684]
	jge	SHORT $LN9@TraceModel

; 551  : 	{
; 552  : 		SetSegmentAngles( m_pSegments[iSeg - 1], m_pSegments[iSeg] );

	mov	ecx, DWORD PTR _iSeg$20[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+ecx*4+1712]
	push	eax
	mov	ecx, DWORD PTR _iSeg$20[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+ecx*4+1708]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetSegmentAngles@CRope@@QAEXPAVCRopeSegment@@0@Z ; CRope::SetSegmentAngles

; 553  : 	}

	jmp	SHORT $LN8@TraceModel
$LN9@TraceModel:

; 554  : 
; 555  : 	if( m_iSegments > 1 )

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+1680], 1
	jle	$LN23@TraceModel

; 556  : 	{
; 557  : 		CRopeSegment *pSegment = m_pSegments[m_iNumSamples - 1];

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+1684]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4+1708]
	mov	DWORD PTR _pSegment$18[ebp], edx

; 558  : 
; 559  : 		UTIL_TraceLine( m_vecLastEndPos, pSegment->m_Data.mPosition, ignore_monsters, edict(), &tr );

	lea	eax, DWORD PTR _tr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?edict@CBaseEntity@@QAEPAUedict_s@@XZ	; CBaseEntity::edict
	push	eax
	push	1
	mov	ecx, DWORD PTR _pSegment$18[ebp]
	add	ecx, 1704				; 000006a8H
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 1688				; 00000698H
	push	edx
	call	?UTIL_TraceLine@@YAXABVVector@@0W4IGNORE_MONSTERS@@PAUedict_s@@PAUgametrace_s@@@Z ; UTIL_TraceLine
	add	esp, 20					; 00000014H

; 560  : 	
; 561  : 		if( tr.flFraction == 1.0 )

	cvtss2sd xmm0, DWORD PTR _tr$[ebp+16]
	ucomisd	xmm0, QWORD PTR __real@3ff0000000000000
	lahf
	test	ah, 68					; 00000044H
	jp	SHORT $LN22@TraceModel

; 562  : 		{
; 563  : 			m_vecLastEndPos = pSegment->m_Data.mPosition;

	mov	eax, DWORD PTR _pSegment$18[ebp]
	add	eax, 1704				; 000006a8H
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 1688				; 00000698H
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	eax, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], eax

; 564  : 		}
; 565  : 		else

	jmp	SHORT $LN23@TraceModel
$LN22@TraceModel:

; 566  : 		{
; 567  : 			m_vecLastEndPos = tr.vecEndPos;

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 1688				; 00000698H
	mov	edx, DWORD PTR _tr$[ebp+20]
	mov	DWORD PTR [ecx], edx
	mov	eax, DWORD PTR _tr$[ebp+24]
	mov	DWORD PTR [ecx+4], eax
	mov	edx, DWORD PTR _tr$[ebp+28]
	mov	DWORD PTR [ecx+8], edx

; 568  : 			pSegment->m_Data.mApplyExternalForce = true;

	mov	eax, DWORD PTR _pSegment$18[ebp]
	mov	BYTE PTR [eax+1752], 1

; 569  : 			pSegment->m_Data.mExternalForce = tr.vecPlaneNormal.Normalize() * 40000.0;

	push	ecx
	movss	xmm0, DWORD PTR __real@471c4000
	movss	DWORD PTR [esp], xmm0
	lea	ecx, DWORD PTR $T2[ebp]
	push	ecx
	lea	edx, DWORD PTR $T1[ebp]
	push	edx
	lea	ecx, DWORD PTR _tr$[ebp+36]
	call	?Normalize@Vector@@QBE?AV1@XZ		; Vector::Normalize
	mov	ecx, eax
	call	??DVector@@QBE?AV0@M@Z			; Vector::operator*
	mov	ecx, DWORD PTR _pSegment$18[ebp]
	add	ecx, 1740				; 000006ccH
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	eax, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], eax
$LN23@TraceModel:
$LN1@TraceModel:

; 570  : 		}
; 571  : 	}
; 572  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?TraceModels@CRope@@QAEXXZ ENDP				; CRope::TraceModels
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xashxt_v0.81_rev.1_with_sources\xashxt_v0.81_rev.1_src\server\ropes\crope.cpp
_TEXT	SEGMENT
$T1 = -340						; size = 12
$T2 = -328						; size = 12
$T3 = -316						; size = 12
$T4 = -304						; size = 12
$T5 = -292						; size = 12
$T6 = -280						; size = 12
$T7 = -268						; size = 12
$T8 = -256						; size = 12
$T9 = -244						; size = 12
$T10 = -232						; size = 12
$T11 = -220						; size = 12
$T12 = -208						; size = 12
$T13 = -196						; size = 12
$T14 = -184						; size = 12
$T15 = -172						; size = 12
$T16 = -160						; size = 12
$T17 = -148						; size = 12
$T18 = -136						; size = 12
$T19 = -124						; size = 12
$T20 = -112						; size = 12
$T21 = -100						; size = 12
_vecVelChange$22 = -88					; size = 12
_vecPosChange$23 = -76					; size = 12
_data$24 = -64						; size = 4
_pSegment$25 = -60					; size = 4
_pTemp3$ = -56						; size = 4
_pTemp4$ = -52						; size = 4
_data$26 = -48						; size = 4
_iStep$27 = -44						; size = 4
_data$28 = -40						; size = 4
_this$ = -36						; size = 4
_i$ = -32						; size = 4
_pTemp2$ = -28						; size = 4
_pTemp1$ = -24						; size = 4
_flDeltas$ = -20					; size = 16
__$ArrayPad$ = -4					; size = 4
_flDeltaTime$ = 8					; size = 4
?RK4Integrate@CRope@@QAEXM@Z PROC			; CRope::RK4Integrate
; _this$ = ecx

; 362  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 340				; 00000154H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	DWORD PTR _this$[ebp], ecx

; 363  : 	const float flDeltas[MAX_LIST_SEGMENTS - 1] = 
; 364  : 	{
; 365  : 		flDeltaTime * 0.5f,

	movss	xmm0, DWORD PTR _flDeltaTime$[ebp]
	mulss	xmm0, DWORD PTR __real@3f000000
	movss	DWORD PTR _flDeltas$[ebp], xmm0

; 366  : 		flDeltaTime * 0.5f,

	movss	xmm0, DWORD PTR _flDeltaTime$[ebp]
	mulss	xmm0, DWORD PTR __real@3f000000
	movss	DWORD PTR _flDeltas$[ebp+4], xmm0

; 367  : 		flDeltaTime * 0.5f,

	movss	xmm0, DWORD PTR _flDeltaTime$[ebp]
	mulss	xmm0, DWORD PTR __real@3f000000
	movss	DWORD PTR _flDeltas$[ebp+8], xmm0

; 368  : 		flDeltaTime

	movss	xmm0, DWORD PTR _flDeltaTime$[ebp]
	movss	DWORD PTR _flDeltas$[ebp+12], xmm0

; 369  : 	};
; 370  : 
; 371  : 	RopeSampleData *pTemp1, *pTemp2, *pTemp3, *pTemp4;
; 372  : 	int i;
; 373  : 
; 374  : 	pTemp1 = g_pTempList[0];

	mov	eax, 3840				; 00000f00H
	imul	ecx, eax, 0
	add	ecx, OFFSET ?g_pTempList@@3PAY0EA@URopeSampleData@@A ; g_pTempList
	mov	DWORD PTR _pTemp1$[ebp], ecx

; 375  : 	pTemp2 = g_pTempList[1];

	mov	edx, 3840				; 00000f00H
	shl	edx, 0
	add	edx, OFFSET ?g_pTempList@@3PAY0EA@URopeSampleData@@A ; g_pTempList
	mov	DWORD PTR _pTemp2$[ebp], edx

; 376  : 
; 377  : 	for( i = 0; i < m_iNumSamples; i++, pTemp1++, pTemp2++ )

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN4@RK4Integra
$LN2@RK4Integra:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
	mov	ecx, DWORD PTR _pTemp1$[ebp]
	add	ecx, 60					; 0000003cH
	mov	DWORD PTR _pTemp1$[ebp], ecx
	mov	edx, DWORD PTR _pTemp2$[ebp]
	add	edx, 60					; 0000003cH
	mov	DWORD PTR _pTemp2$[ebp], edx
$LN4@RK4Integra:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	cmp	ecx, DWORD PTR [eax+1684]
	jge	$LN3@RK4Integra

; 378  : 	{
; 379  : 		const RopeSampleData& data = m_pSegments[i]->m_Data;

	mov	edx, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+edx*4+1712]
	add	ecx, 1704				; 000006a8H
	mov	DWORD PTR _data$28[ebp], ecx

; 380  : 
; 381  : 		pTemp2->mForce = data.mMassReciprocal * data.mForce * flDeltas[0];

	mov	edx, 4
	imul	eax, edx, 0
	push	ecx
	movss	xmm0, DWORD PTR _flDeltas$[ebp+eax]
	movss	DWORD PTR [esp], xmm0
	lea	ecx, DWORD PTR $T21[ebp]
	push	ecx
	mov	edx, DWORD PTR _data$28[ebp]
	add	edx, 24					; 00000018H
	push	edx
	mov	eax, DWORD PTR _data$28[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [eax+52]
	movss	DWORD PTR [esp], xmm0
	lea	ecx, DWORD PTR $T20[ebp]
	push	ecx
	call	??D@YA?AVVector@@MABV0@@Z		; operator*
	add	esp, 12					; 0000000cH
	mov	ecx, eax
	call	??DVector@@QBE?AV0@M@Z			; Vector::operator*
	mov	edx, DWORD PTR _pTemp2$[ebp]
	add	edx, 24					; 00000018H
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR [edx], ecx
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR [edx+4], ecx
	mov	eax, DWORD PTR [eax+8]
	mov	DWORD PTR [edx+8], eax

; 382  : 		pTemp2->mVelocity = data.mVelocity * flDeltas[0];

	mov	ecx, 4
	imul	edx, ecx, 0
	push	ecx
	movss	xmm0, DWORD PTR _flDeltas$[ebp+edx]
	movss	DWORD PTR [esp], xmm0
	lea	eax, DWORD PTR $T19[ebp]
	push	eax
	mov	ecx, DWORD PTR _data$28[ebp]
	add	ecx, 12					; 0000000cH
	call	??DVector@@QBE?AV0@M@Z			; Vector::operator*
	mov	ecx, DWORD PTR _pTemp2$[ebp]
	add	ecx, 12					; 0000000cH
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	eax, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], eax

; 383  : 		pTemp2->restLength = data.restLength;

	mov	ecx, DWORD PTR _pTemp2$[ebp]
	mov	edx, DWORD PTR _data$28[ebp]
	mov	eax, DWORD PTR [edx+56]
	mov	DWORD PTR [ecx+56], eax

; 384  : 
; 385  : 		pTemp1->mMassReciprocal = data.mMassReciprocal;

	mov	ecx, DWORD PTR _pTemp1$[ebp]
	mov	edx, DWORD PTR _data$28[ebp]
	mov	eax, DWORD PTR [edx+52]
	mov	DWORD PTR [ecx+52], eax

; 386  : 		pTemp1->mVelocity = data.mVelocity + pTemp2->mForce;

	mov	ecx, DWORD PTR _pTemp2$[ebp]
	add	ecx, 24					; 00000018H
	push	ecx
	lea	edx, DWORD PTR $T18[ebp]
	push	edx
	mov	ecx, DWORD PTR _data$28[ebp]
	add	ecx, 12					; 0000000cH
	call	??HVector@@QBE?AV0@ABV0@@Z		; Vector::operator+
	mov	ecx, DWORD PTR _pTemp1$[ebp]
	add	ecx, 12					; 0000000cH
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	eax, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], eax

; 387  : 		pTemp1->mPosition = data.mPosition + pTemp2->mVelocity;

	mov	ecx, DWORD PTR _pTemp2$[ebp]
	add	ecx, 12					; 0000000cH
	push	ecx
	lea	edx, DWORD PTR $T1[ebp]
	push	edx
	mov	ecx, DWORD PTR _data$28[ebp]
	call	??HVector@@QBE?AV0@ABV0@@Z		; Vector::operator+
	mov	ecx, DWORD PTR _pTemp1$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	eax, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], eax

; 388  : 		pTemp1->restLength = data.restLength;

	mov	ecx, DWORD PTR _pTemp1$[ebp]
	mov	edx, DWORD PTR _data$28[ebp]
	mov	eax, DWORD PTR [edx+56]
	mov	DWORD PTR [ecx+56], eax

; 389  : 	}

	jmp	$LN2@RK4Integra
$LN3@RK4Integra:

; 390  : 
; 391  : 	ComputeForces( g_pTempList[0] );

	mov	ecx, 3840				; 00000f00H
	imul	edx, ecx, 0
	add	edx, OFFSET ?g_pTempList@@3PAY0EA@URopeSampleData@@A ; g_pTempList
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ComputeForces@CRope@@QAEXPAURopeSampleData@@@Z ; CRope::ComputeForces

; 392  : 
; 393  : 	for( int iStep = 2; iStep < MAX_LIST_SEGMENTS - 1; iStep++ )

	mov	DWORD PTR _iStep$27[ebp], 2
	jmp	SHORT $LN7@RK4Integra
$LN5@RK4Integra:
	mov	eax, DWORD PTR _iStep$27[ebp]
	add	eax, 1
	mov	DWORD PTR _iStep$27[ebp], eax
$LN7@RK4Integra:
	cmp	DWORD PTR _iStep$27[ebp], 4
	jge	$LN6@RK4Integra

; 394  : 	{
; 395  : 		pTemp1 = g_pTempList[0];

	mov	ecx, 3840				; 00000f00H
	imul	edx, ecx, 0
	add	edx, OFFSET ?g_pTempList@@3PAY0EA@URopeSampleData@@A ; g_pTempList
	mov	DWORD PTR _pTemp1$[ebp], edx

; 396  : 		pTemp2 = g_pTempList[iStep];

	imul	eax, DWORD PTR _iStep$27[ebp], 3840
	add	eax, OFFSET ?g_pTempList@@3PAY0EA@URopeSampleData@@A ; g_pTempList
	mov	DWORD PTR _pTemp2$[ebp], eax

; 397  : 
; 398  : 		for( i = 0; i < m_iNumSamples; i++, pTemp1++, pTemp2++ )

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN10@RK4Integra
$LN8@RK4Integra:
	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
	mov	edx, DWORD PTR _pTemp1$[ebp]
	add	edx, 60					; 0000003cH
	mov	DWORD PTR _pTemp1$[ebp], edx
	mov	eax, DWORD PTR _pTemp2$[ebp]
	add	eax, 60					; 0000003cH
	mov	DWORD PTR _pTemp2$[ebp], eax
$LN10@RK4Integra:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _i$[ebp]
	cmp	edx, DWORD PTR [ecx+1684]
	jge	$LN9@RK4Integra

; 399  : 		{
; 400  : 			const RopeSampleData& data = m_pSegments[i]->m_Data;

	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4+1712]
	add	edx, 1704				; 000006a8H
	mov	DWORD PTR _data$26[ebp], edx

; 401  : 
; 402  : 			pTemp2->mForce = data.mMassReciprocal * pTemp1->mForce * flDeltas[iStep - 1];

	mov	eax, DWORD PTR _iStep$27[ebp]
	push	ecx
	movss	xmm0, DWORD PTR _flDeltas$[ebp+eax*4-4]
	movss	DWORD PTR [esp], xmm0
	lea	ecx, DWORD PTR $T17[ebp]
	push	ecx
	mov	edx, DWORD PTR _pTemp1$[ebp]
	add	edx, 24					; 00000018H
	push	edx
	mov	eax, DWORD PTR _data$26[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [eax+52]
	movss	DWORD PTR [esp], xmm0
	lea	ecx, DWORD PTR $T16[ebp]
	push	ecx
	call	??D@YA?AVVector@@MABV0@@Z		; operator*
	add	esp, 12					; 0000000cH
	mov	ecx, eax
	call	??DVector@@QBE?AV0@M@Z			; Vector::operator*
	mov	edx, DWORD PTR _pTemp2$[ebp]
	add	edx, 24					; 00000018H
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR [edx], ecx
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR [edx+4], ecx
	mov	eax, DWORD PTR [eax+8]
	mov	DWORD PTR [edx+8], eax

; 403  : 			pTemp2->mVelocity = pTemp1->mVelocity * flDeltas[iStep - 1];

	mov	ecx, DWORD PTR _iStep$27[ebp]
	push	ecx
	movss	xmm0, DWORD PTR _flDeltas$[ebp+ecx*4-4]
	movss	DWORD PTR [esp], xmm0
	lea	edx, DWORD PTR $T15[ebp]
	push	edx
	mov	ecx, DWORD PTR _pTemp1$[ebp]
	add	ecx, 12					; 0000000cH
	call	??DVector@@QBE?AV0@M@Z			; Vector::operator*
	mov	ecx, DWORD PTR _pTemp2$[ebp]
	add	ecx, 12					; 0000000cH
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	eax, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], eax

; 404  : 			pTemp2->restLength = data.restLength;

	mov	ecx, DWORD PTR _pTemp2$[ebp]
	mov	edx, DWORD PTR _data$26[ebp]
	mov	eax, DWORD PTR [edx+56]
	mov	DWORD PTR [ecx+56], eax

; 405  : 
; 406  : 			pTemp1->mMassReciprocal = data.mMassReciprocal;

	mov	ecx, DWORD PTR _pTemp1$[ebp]
	mov	edx, DWORD PTR _data$26[ebp]
	mov	eax, DWORD PTR [edx+52]
	mov	DWORD PTR [ecx+52], eax

; 407  : 			pTemp1->mVelocity = data.mVelocity + pTemp2->mForce;

	mov	ecx, DWORD PTR _pTemp2$[ebp]
	add	ecx, 24					; 00000018H
	push	ecx
	lea	edx, DWORD PTR $T14[ebp]
	push	edx
	mov	ecx, DWORD PTR _data$26[ebp]
	add	ecx, 12					; 0000000cH
	call	??HVector@@QBE?AV0@ABV0@@Z		; Vector::operator+
	mov	ecx, DWORD PTR _pTemp1$[ebp]
	add	ecx, 12					; 0000000cH
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	eax, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], eax

; 408  : 			pTemp1->mPosition = data.mPosition + pTemp2->mVelocity;

	mov	ecx, DWORD PTR _pTemp2$[ebp]
	add	ecx, 12					; 0000000cH
	push	ecx
	lea	edx, DWORD PTR $T13[ebp]
	push	edx
	mov	ecx, DWORD PTR _data$26[ebp]
	call	??HVector@@QBE?AV0@ABV0@@Z		; Vector::operator+
	mov	ecx, DWORD PTR _pTemp1$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	eax, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], eax

; 409  : 			pTemp1->restLength = data.restLength;

	mov	ecx, DWORD PTR _pTemp1$[ebp]
	mov	edx, DWORD PTR _data$26[ebp]
	mov	eax, DWORD PTR [edx+56]
	mov	DWORD PTR [ecx+56], eax

; 410  : 		}

	jmp	$LN8@RK4Integra
$LN9@RK4Integra:

; 411  : 
; 412  : 		ComputeForces( g_pTempList[0] );

	mov	ecx, 3840				; 00000f00H
	imul	edx, ecx, 0
	add	edx, OFFSET ?g_pTempList@@3PAY0EA@URopeSampleData@@A ; g_pTempList
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ComputeForces@CRope@@QAEXPAURopeSampleData@@@Z ; CRope::ComputeForces

; 413  : 	}

	jmp	$LN5@RK4Integra
$LN6@RK4Integra:

; 414  : 
; 415  : 	pTemp1 = g_pTempList[0];

	mov	eax, 3840				; 00000f00H
	imul	ecx, eax, 0
	add	ecx, OFFSET ?g_pTempList@@3PAY0EA@URopeSampleData@@A ; g_pTempList
	mov	DWORD PTR _pTemp1$[ebp], ecx

; 416  : 	pTemp2 = g_pTempList[4];

	mov	edx, 3840				; 00000f00H
	shl	edx, 2
	add	edx, OFFSET ?g_pTempList@@3PAY0EA@URopeSampleData@@A ; g_pTempList
	mov	DWORD PTR _pTemp2$[ebp], edx

; 417  : 
; 418  : 	for( i = 0; i < m_iNumSamples; i++, pTemp1++, pTemp2++ )

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN13@RK4Integra
$LN11@RK4Integra:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
	mov	ecx, DWORD PTR _pTemp1$[ebp]
	add	ecx, 60					; 0000003cH
	mov	DWORD PTR _pTemp1$[ebp], ecx
	mov	edx, DWORD PTR _pTemp2$[ebp]
	add	edx, 60					; 0000003cH
	mov	DWORD PTR _pTemp2$[ebp], edx
$LN13@RK4Integra:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	cmp	ecx, DWORD PTR [eax+1684]
	jge	$LN12@RK4Integra

; 419  : 	{
; 420  : 		const RopeSampleData& data = m_pSegments[i]->m_Data;

	mov	edx, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+edx*4+1712]
	add	ecx, 1704				; 000006a8H
	mov	DWORD PTR _data$24[ebp], ecx

; 421  : 
; 422  : 		pTemp2->mForce = data.mMassReciprocal * pTemp1->mForce * flDeltas[3];

	mov	edx, 4
	imul	eax, edx, 3
	push	ecx
	movss	xmm0, DWORD PTR _flDeltas$[ebp+eax]
	movss	DWORD PTR [esp], xmm0
	lea	ecx, DWORD PTR $T12[ebp]
	push	ecx
	mov	edx, DWORD PTR _pTemp1$[ebp]
	add	edx, 24					; 00000018H
	push	edx
	mov	eax, DWORD PTR _data$24[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [eax+52]
	movss	DWORD PTR [esp], xmm0
	lea	ecx, DWORD PTR $T11[ebp]
	push	ecx
	call	??D@YA?AVVector@@MABV0@@Z		; operator*
	add	esp, 12					; 0000000cH
	mov	ecx, eax
	call	??DVector@@QBE?AV0@M@Z			; Vector::operator*
	mov	edx, DWORD PTR _pTemp2$[ebp]
	add	edx, 24					; 00000018H
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR [edx], ecx
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR [edx+4], ecx
	mov	eax, DWORD PTR [eax+8]
	mov	DWORD PTR [edx+8], eax

; 423  : 		pTemp2->mVelocity = pTemp1->mVelocity * flDeltas[3];

	mov	ecx, 4
	imul	edx, ecx, 3
	push	ecx
	movss	xmm0, DWORD PTR _flDeltas$[ebp+edx]
	movss	DWORD PTR [esp], xmm0
	lea	eax, DWORD PTR $T10[ebp]
	push	eax
	mov	ecx, DWORD PTR _pTemp1$[ebp]
	add	ecx, 12					; 0000000cH
	call	??DVector@@QBE?AV0@M@Z			; Vector::operator*
	mov	ecx, DWORD PTR _pTemp2$[ebp]
	add	ecx, 12					; 0000000cH
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	eax, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], eax

; 424  : 	}

	jmp	$LN11@RK4Integra
$LN12@RK4Integra:

; 425  : 
; 426  : 	pTemp1 = g_pTempList[1];

	mov	ecx, 3840				; 00000f00H
	shl	ecx, 0
	add	ecx, OFFSET ?g_pTempList@@3PAY0EA@URopeSampleData@@A ; g_pTempList
	mov	DWORD PTR _pTemp1$[ebp], ecx

; 427  : 	pTemp2 = g_pTempList[2];

	mov	edx, 3840				; 00000f00H
	shl	edx, 1
	add	edx, OFFSET ?g_pTempList@@3PAY0EA@URopeSampleData@@A ; g_pTempList
	mov	DWORD PTR _pTemp2$[ebp], edx

; 428  : 	pTemp3 = g_pTempList[3];

	mov	eax, 3840				; 00000f00H
	imul	ecx, eax, 3
	add	ecx, OFFSET ?g_pTempList@@3PAY0EA@URopeSampleData@@A ; g_pTempList
	mov	DWORD PTR _pTemp3$[ebp], ecx

; 429  : 	pTemp4 = g_pTempList[4];

	mov	edx, 3840				; 00000f00H
	shl	edx, 2
	add	edx, OFFSET ?g_pTempList@@3PAY0EA@URopeSampleData@@A ; g_pTempList
	mov	DWORD PTR _pTemp4$[ebp], edx

; 430  : 
; 431  : 	for( i = 0; i < m_iNumSamples; i++, pTemp1++, pTemp2++, pTemp3++, pTemp4++ )

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN16@RK4Integra
$LN14@RK4Integra:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
	mov	ecx, DWORD PTR _pTemp1$[ebp]
	add	ecx, 60					; 0000003cH
	mov	DWORD PTR _pTemp1$[ebp], ecx
	mov	edx, DWORD PTR _pTemp2$[ebp]
	add	edx, 60					; 0000003cH
	mov	DWORD PTR _pTemp2$[ebp], edx
	mov	eax, DWORD PTR _pTemp3$[ebp]
	add	eax, 60					; 0000003cH
	mov	DWORD PTR _pTemp3$[ebp], eax
	mov	ecx, DWORD PTR _pTemp4$[ebp]
	add	ecx, 60					; 0000003cH
	mov	DWORD PTR _pTemp4$[ebp], ecx
$LN16@RK4Integra:
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR [edx+1684]
	jge	$LN15@RK4Integra

; 432  : 	{
; 433  : 		CRopeSegment *pSegment = m_pSegments[i];

	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+ecx*4+1712]
	mov	DWORD PTR _pSegment$25[ebp], eax

; 434  : 		const Vector vecPosChange = 1.0f / 6.0f * ( pTemp1->mVelocity + ( pTemp2->mVelocity + pTemp3->mVelocity ) * 2 + pTemp4->mVelocity );

	mov	ecx, DWORD PTR _pTemp4$[ebp]
	add	ecx, 12					; 0000000cH
	push	ecx
	lea	edx, DWORD PTR $T9[ebp]
	push	edx
	push	ecx
	movss	xmm0, DWORD PTR __real@40000000
	movss	DWORD PTR [esp], xmm0
	lea	eax, DWORD PTR $T8[ebp]
	push	eax
	mov	ecx, DWORD PTR _pTemp3$[ebp]
	add	ecx, 12					; 0000000cH
	push	ecx
	lea	edx, DWORD PTR $T7[ebp]
	push	edx
	mov	ecx, DWORD PTR _pTemp2$[ebp]
	add	ecx, 12					; 0000000cH
	call	??HVector@@QBE?AV0@ABV0@@Z		; Vector::operator+
	mov	ecx, eax
	call	??DVector@@QBE?AV0@M@Z			; Vector::operator*
	push	eax
	lea	eax, DWORD PTR $T6[ebp]
	push	eax
	mov	ecx, DWORD PTR _pTemp1$[ebp]
	add	ecx, 12					; 0000000cH
	call	??HVector@@QBE?AV0@ABV0@@Z		; Vector::operator+
	mov	ecx, eax
	call	??HVector@@QBE?AV0@ABV0@@Z		; Vector::operator+
	push	eax
	push	ecx
	movss	xmm0, DWORD PTR __real@3e2aaaab
	movss	DWORD PTR [esp], xmm0
	lea	ecx, DWORD PTR _vecPosChange$23[ebp]
	push	ecx
	call	??D@YA?AVVector@@MABV0@@Z		; operator*
	add	esp, 12					; 0000000cH

; 435  : 		const Vector vecVelChange = 1.0f / 6.0f * ( pTemp1->mForce + ( pTemp2->mForce + pTemp3->mForce ) * 2 + pTemp4->mForce );

	mov	edx, DWORD PTR _pTemp4$[ebp]
	add	edx, 24					; 00000018H
	push	edx
	lea	eax, DWORD PTR $T5[ebp]
	push	eax
	push	ecx
	movss	xmm0, DWORD PTR __real@40000000
	movss	DWORD PTR [esp], xmm0
	lea	ecx, DWORD PTR $T4[ebp]
	push	ecx
	mov	edx, DWORD PTR _pTemp3$[ebp]
	add	edx, 24					; 00000018H
	push	edx
	lea	eax, DWORD PTR $T3[ebp]
	push	eax
	mov	ecx, DWORD PTR _pTemp2$[ebp]
	add	ecx, 24					; 00000018H
	call	??HVector@@QBE?AV0@ABV0@@Z		; Vector::operator+
	mov	ecx, eax
	call	??DVector@@QBE?AV0@M@Z			; Vector::operator*
	push	eax
	lea	ecx, DWORD PTR $T2[ebp]
	push	ecx
	mov	ecx, DWORD PTR _pTemp1$[ebp]
	add	ecx, 24					; 00000018H
	call	??HVector@@QBE?AV0@ABV0@@Z		; Vector::operator+
	mov	ecx, eax
	call	??HVector@@QBE?AV0@ABV0@@Z		; Vector::operator+
	push	eax
	push	ecx
	movss	xmm0, DWORD PTR __real@3e2aaaab
	movss	DWORD PTR [esp], xmm0
	lea	edx, DWORD PTR _vecVelChange$22[ebp]
	push	edx
	call	??D@YA?AVVector@@MABV0@@Z		; operator*
	add	esp, 12					; 0000000cH

; 436  : 
; 437  : 		// store final changes for each segment
; 438  : 		pSegment->m_Data.mPosition += vecPosChange;

	lea	eax, DWORD PTR _vecPosChange$23[ebp]
	push	eax
	mov	ecx, DWORD PTR _pSegment$25[ebp]
	add	ecx, 1704				; 000006a8H
	call	??YVector@@QAEAAV0@ABV0@@Z		; Vector::operator+=

; 439  : 		pSegment->m_Data.mVelocity += vecVelChange;

	lea	ecx, DWORD PTR _vecVelChange$22[ebp]
	push	ecx
	mov	ecx, DWORD PTR _pSegment$25[ebp]
	add	ecx, 1716				; 000006b4H
	call	??YVector@@QAEAAV0@ABV0@@Z		; Vector::operator+=

; 440  : 	}

	jmp	$LN14@RK4Integra
$LN15@RK4Integra:

; 441  : }

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	4
?RK4Integrate@CRope@@QAEXM@Z ENDP			; CRope::RK4Integrate
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xashxt_v0.81_rev.1_with_sources\xashxt_v0.81_rev.1_src\server\ropes\crope.cpp
_TEXT	SEGMENT
$T1 = -88						; size = 12
$T2 = -76						; size = 12
_vecForce$ = -64					; size = 12
_vecDist$ = -52						; size = 12
_flSpringFactor$ = -40					; size = 8
_flForce$ = -32						; size = 8
_flNewRelativeDist$ = -24				; size = 8
_flDistance$ = -16					; size = 8
_this$ = -8						; size = 4
tv151 = -4						; size = 4
_first$ = 8						; size = 4
_second$ = 12						; size = 4
?ComputeSpringForce@CRope@@QAEXAAURopeSampleData@@0@Z PROC ; CRope::ComputeSpringForce
; _this$ = ecx

; 329  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 88					; 00000058H
	mov	DWORD PTR _this$[ebp], ecx

; 330  : 	Vector vecDist = first.mPosition - second.mPosition;

	mov	eax, DWORD PTR _second$[ebp]
	push	eax
	lea	ecx, DWORD PTR _vecDist$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _first$[ebp]
	call	??GVector@@QBE?AV0@ABV0@@Z		; Vector::operator-

; 331  : 
; 332  : 	const double flDistance = vecDist.Length();

	lea	ecx, DWORD PTR _vecDist$[ebp]
	call	?Length@Vector@@QBEMXZ			; Vector::Length
	fstp	QWORD PTR _flDistance$[ebp]

; 333  : 	const double flForce = ( flDistance - first.restLength ) * HOOK_CONSTANT;

	mov	edx, DWORD PTR _first$[ebp]
	cvtss2sd xmm0, DWORD PTR [edx+56]
	movsd	xmm1, QWORD PTR _flDistance$[ebp]
	subsd	xmm1, xmm0
	mulsd	xmm1, QWORD PTR __real@40a3880000000000
	movsd	QWORD PTR _flForce$[ebp], xmm1

; 334  : 
; 335  : 	const double flNewRelativeDist = DotProduct( first.mVelocity - second.mVelocity, vecDist ) * SPRING_DAMPING;

	lea	eax, DWORD PTR _vecDist$[ebp]
	push	eax
	mov	ecx, DWORD PTR _second$[ebp]
	add	ecx, 12					; 0000000cH
	push	ecx
	lea	edx, DWORD PTR $T2[ebp]
	push	edx
	mov	ecx, DWORD PTR _first$[ebp]
	add	ecx, 12					; 0000000cH
	call	??GVector@@QBE?AV0@ABV0@@Z		; Vector::operator-
	push	eax
	call	?DotProduct@@YAMABVVector@@0@Z		; DotProduct
	add	esp, 8
	fstp	DWORD PTR tv151[ebp]
	movss	xmm0, DWORD PTR tv151[ebp]
	mulss	xmm0, DWORD PTR __real@3dcccccd
	cvtss2sd xmm0, xmm0
	movsd	QWORD PTR _flNewRelativeDist$[ebp], xmm0

; 336  : 
; 337  : 	vecDist = vecDist.Normalize();

	lea	eax, DWORD PTR $T1[ebp]
	push	eax
	lea	ecx, DWORD PTR _vecDist$[ebp]
	call	?Normalize@Vector@@QBE?AV1@XZ		; Vector::Normalize
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _vecDist$[ebp], ecx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR _vecDist$[ebp+4], edx
	mov	eax, DWORD PTR [eax+8]
	mov	DWORD PTR _vecDist$[ebp+8], eax

; 338  : 
; 339  : 	const double flSpringFactor = -( flNewRelativeDist / flDistance + flForce );

	movsd	xmm0, QWORD PTR _flNewRelativeDist$[ebp]
	divsd	xmm0, QWORD PTR _flDistance$[ebp]
	addsd	xmm0, QWORD PTR _flForce$[ebp]
	xorps	xmm0, QWORD PTR __xmm@80000000000000008000000000000000
	movsd	QWORD PTR _flSpringFactor$[ebp], xmm0

; 340  : 	const Vector vecForce = flSpringFactor * vecDist;

	lea	ecx, DWORD PTR _vecDist$[ebp]
	push	ecx
	cvtsd2ss xmm0, QWORD PTR _flSpringFactor$[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	lea	edx, DWORD PTR _vecForce$[ebp]
	push	edx
	call	??D@YA?AVVector@@MABV0@@Z		; operator*
	add	esp, 12					; 0000000cH

; 341  : 
; 342  : 	first.mForce += vecForce;

	lea	eax, DWORD PTR _vecForce$[ebp]
	push	eax
	mov	ecx, DWORD PTR _first$[ebp]
	add	ecx, 24					; 00000018H
	call	??YVector@@QAEAAV0@ABV0@@Z		; Vector::operator+=

; 343  : 	second.mForce -= vecForce;

	lea	ecx, DWORD PTR _vecForce$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _second$[ebp]
	add	ecx, 24					; 00000018H
	call	??ZVector@@QAEAAV0@ABV0@@Z		; Vector::operator-=

; 344  : }

	mov	esp, ebp
	pop	ebp
	ret	8
?ComputeSpringForce@CRope@@QAEXAAURopeSampleData@@0@Z ENDP ; CRope::ComputeSpringForce
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xashxt_v0.81_rev.1_with_sources\xashxt_v0.81_rev.1_src\server\ropes\crope.cpp
_TEXT	SEGMENT
$T1 = -44						; size = 12
$T2 = -32						; size = 12
$T3 = -20						; size = 12
tv190 = -8						; size = 4
_this$ = -4						; size = 4
_data$ = 8						; size = 4
?ComputeSampleForce@CRope@@QAEXAAURopeSampleData@@@Z PROC ; CRope::ComputeSampleForce
; _this$ = ecx

; 303  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 44					; 0000002cH
	mov	DWORD PTR _this$[ebp], ecx

; 304  : 	data.mForce = g_vecZero;

	mov	eax, DWORD PTR _data$[ebp]
	add	eax, 24					; 00000018H
	mov	ecx, DWORD PTR ?g_vecZero@@3VVector@@B
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR ?g_vecZero@@3VVector@@B+4
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR ?g_vecZero@@3VVector@@B+8
	mov	DWORD PTR [eax+8], ecx

; 305  : 
; 306  : 	if( data.mMassReciprocal != 0.0 )

	mov	edx, DWORD PTR _data$[ebp]
	cvtss2sd xmm0, DWORD PTR [edx+52]
	ucomisd	xmm0, QWORD PTR __real@0000000000000000
	lahf
	test	ah, 68					; 00000044H
	jnp	SHORT $LN2@ComputeSam

; 307  : 	{
; 308  : 		data.mForce = data.mForce + ( m_vecGravity / data.mMassReciprocal );

	mov	eax, DWORD PTR _data$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [eax+52]
	movss	DWORD PTR [esp], xmm0
	lea	ecx, DWORD PTR $T3[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 1700				; 000006a4H
	call	??KVector@@QBE?AV0@M@Z			; Vector::operator/
	push	eax
	lea	edx, DWORD PTR $T2[ebp]
	push	edx
	mov	ecx, DWORD PTR _data$[ebp]
	add	ecx, 24					; 00000018H
	call	??HVector@@QBE?AV0@ABV0@@Z		; Vector::operator+
	mov	ecx, DWORD PTR _data$[ebp]
	add	ecx, 24					; 00000018H
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	eax, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], eax
$LN2@ComputeSam:

; 309  : 	}
; 310  : 
; 311  : 	if( data.mApplyExternalForce )

	mov	ecx, DWORD PTR _data$[ebp]
	movzx	edx, BYTE PTR [ecx+48]
	test	edx, edx
	je	SHORT $LN3@ComputeSam

; 312  : 	{
; 313  : 		data.mForce += data.mExternalForce;

	mov	eax, DWORD PTR _data$[ebp]
	add	eax, 36					; 00000024H
	push	eax
	mov	ecx, DWORD PTR _data$[ebp]
	add	ecx, 24					; 00000018H
	call	??YVector@@QAEAAV0@ABV0@@Z		; Vector::operator+=

; 314  : 		data.mApplyExternalForce = false;

	mov	ecx, DWORD PTR _data$[ebp]
	mov	BYTE PTR [ecx+48], 0

; 315  : 		data.mExternalForce = g_vecZero;

	mov	edx, DWORD PTR _data$[ebp]
	add	edx, 36					; 00000024H
	mov	eax, DWORD PTR ?g_vecZero@@3VVector@@B
	mov	DWORD PTR [edx], eax
	mov	ecx, DWORD PTR ?g_vecZero@@3VVector@@B+4
	mov	DWORD PTR [edx+4], ecx
	mov	eax, DWORD PTR ?g_vecZero@@3VVector@@B+8
	mov	DWORD PTR [edx+8], eax
$LN3@ComputeSam:

; 316  : 	}
; 317  : 
; 318  : 	if( DotProduct( m_vecGravity, data.mVelocity ) >= 0 )

	mov	ecx, DWORD PTR _data$[ebp]
	add	ecx, 12					; 0000000cH
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 1700				; 000006a4H
	push	edx
	call	?DotProduct@@YAMABVVector@@0@Z		; DotProduct
	add	esp, 8
	fstp	DWORD PTR tv190[ebp]
	movss	xmm0, DWORD PTR tv190[ebp]
	comiss	xmm0, DWORD PTR __real@00000000
	jb	SHORT $LN4@ComputeSam

; 319  : 	{
; 320  : 		data.mForce += data.mVelocity * -0.04;

	push	ecx
	movss	xmm0, DWORD PTR __real@bd23d70a
	movss	DWORD PTR [esp], xmm0
	lea	eax, DWORD PTR $T1[ebp]
	push	eax
	mov	ecx, DWORD PTR _data$[ebp]
	add	ecx, 12					; 0000000cH
	call	??DVector@@QBE?AV0@M@Z			; Vector::operator*
	push	eax
	mov	ecx, DWORD PTR _data$[ebp]
	add	ecx, 24					; 00000018H
	call	??YVector@@QAEAAV0@ABV0@@Z		; Vector::operator+=

; 321  : 	}
; 322  : 	else

	jmp	SHORT $LN5@ComputeSam
$LN4@ComputeSam:

; 323  : 	{
; 324  : 		data.mForce -= data.mVelocity;

	mov	ecx, DWORD PTR _data$[ebp]
	add	ecx, 12					; 0000000cH
	push	ecx
	mov	ecx, DWORD PTR _data$[ebp]
	add	ecx, 24					; 00000018H
	call	??ZVector@@QAEAAV0@ABV0@@Z		; Vector::operator-=
$LN5@ComputeSam:

; 325  : 	}
; 326  : }

	mov	esp, ebp
	pop	ebp
	ret	4
?ComputeSampleForce@CRope@@QAEXAAURopeSampleData@@@Z ENDP ; CRope::ComputeSampleForce
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xashxt_v0.81_rev.1_with_sources\xashxt_v0.81_rev.1_src\server\ropes\crope.cpp
_TEXT	SEGMENT
_this$ = -8						; size = 4
_i$ = -4						; size = 4
_ppSystem$ = 8						; size = 4
?ComputeForces@CRope@@QAEXPAPAVCRopeSegment@@@Z PROC	; CRope::ComputeForces
; _this$ = ecx

; 347  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 348  : 	int i;
; 349  : 
; 350  : 	for( i = 0; i < m_iNumSamples; i++ )

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN4@ComputeFor
$LN2@ComputeFor:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN4@ComputeFor:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _i$[ebp]
	cmp	edx, DWORD PTR [ecx+1684]
	jge	SHORT $LN3@ComputeFor

; 351  : 	{
; 352  : 		ComputeSampleForce( ppSystem[i]->m_Data );

	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _ppSystem$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	add	edx, 1704				; 000006a8H
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ComputeSampleForce@CRope@@QAEXAAURopeSampleData@@@Z ; CRope::ComputeSampleForce

; 353  : 	}

	jmp	SHORT $LN2@ComputeFor
$LN3@ComputeFor:

; 354  : 
; 355  : 	for( i = 0; i < m_iSegments; i++ )

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN7@ComputeFor
$LN5@ComputeFor:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN7@ComputeFor:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _i$[ebp]
	cmp	edx, DWORD PTR [ecx+1680]
	jge	SHORT $LN1@ComputeFor

; 356  : 	{
; 357  : 		ComputeSpringForce( ppSystem[i+0]->m_Data, ppSystem[i+1]->m_Data );

	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _ppSystem$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4+4]
	add	edx, 1704				; 000006a8H
	push	edx
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _ppSystem$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	add	edx, 1704				; 000006a8H
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ComputeSpringForce@CRope@@QAEXAAURopeSampleData@@0@Z ; CRope::ComputeSpringForce

; 358  : 	}

	jmp	SHORT $LN5@ComputeFor
$LN1@ComputeFor:

; 359  : }

	mov	esp, ebp
	pop	ebp
	ret	4
?ComputeForces@CRope@@QAEXPAPAVCRopeSegment@@@Z ENDP	; CRope::ComputeForces
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xashxt_v0.81_rev.1_with_sources\xashxt_v0.81_rev.1_src\server\ropes\crope.cpp
_TEXT	SEGMENT
_this$ = -8						; size = 4
_i$ = -4						; size = 4
_pSystem$ = 8						; size = 4
?ComputeForces@CRope@@QAEXPAURopeSampleData@@@Z PROC	; CRope::ComputeForces
; _this$ = ecx

; 288  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 289  : 	int i;
; 290  : 
; 291  : 	for( i = 0; i < m_iNumSamples; i++ )

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN4@ComputeFor
$LN2@ComputeFor:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN4@ComputeFor:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _i$[ebp]
	cmp	edx, DWORD PTR [ecx+1684]
	jge	SHORT $LN3@ComputeFor

; 292  : 	{
; 293  : 		ComputeSampleForce( pSystem[i] );

	imul	eax, DWORD PTR _i$[ebp], 60
	add	eax, DWORD PTR _pSystem$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ComputeSampleForce@CRope@@QAEXAAURopeSampleData@@@Z ; CRope::ComputeSampleForce

; 294  : 	}

	jmp	SHORT $LN2@ComputeFor
$LN3@ComputeFor:

; 295  : 
; 296  : 	for( i = 0; i < m_iSegments; i++ )

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN7@ComputeFor
$LN5@ComputeFor:
	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
$LN7@ComputeFor:
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR [edx+1680]
	jge	SHORT $LN1@ComputeFor

; 297  : 	{
; 298  : 		ComputeSpringForce( pSystem[i+0], pSystem[i+1] );

	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, 1
	imul	edx, ecx, 60
	add	edx, DWORD PTR _pSystem$[ebp]
	push	edx
	imul	eax, DWORD PTR _i$[ebp], 60
	add	eax, DWORD PTR _pSystem$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ComputeSpringForce@CRope@@QAEXAAURopeSampleData@@0@Z ; CRope::ComputeSpringForce

; 299  : 	}

	jmp	SHORT $LN5@ComputeFor
$LN1@ComputeFor:

; 300  : }

	mov	esp, ebp
	pop	ebp
	ret	4
?ComputeForces@CRope@@QAEXPAURopeSampleData@@@Z ENDP	; CRope::ComputeForces
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xashxt_v0.81_rev.1_with_sources\xashxt_v0.81_rev.1_src\server\ropes\crope.cpp
_TEXT	SEGMENT
_delta$ = -32						; size = 4
_pSegment$1 = -28					; size = 4
tv82 = -24						; size = 4
tv81 = -20						; size = 4
tv77 = -16						; size = 4
_idx$2 = -12						; size = 4
_subSteps$ = -8						; size = 4
_this$ = -4						; size = 4
?Think@CRope@@UAEXXZ PROC				; CRope::Think
; _this$ = ecx

; 256  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 32					; 00000020H
	mov	DWORD PTR _this$[ebp], ecx

; 257  : 	int subSteps = Q_rint( 100.0f * gpGlobals->frametime ) * 2;

	mov	eax, DWORD PTR ?gpGlobals@@3PAUglobalvars_t@@A ; gpGlobals
	movss	xmm0, DWORD PTR __real@42c80000
	mulss	xmm0, DWORD PTR [eax+4]
	xorps	xmm1, xmm1
	comiss	xmm1, xmm0
	jbe	SHORT $LN8@Think
	mov	ecx, DWORD PTR ?gpGlobals@@3PAUglobalvars_t@@A ; gpGlobals
	movss	xmm0, DWORD PTR __real@42c80000
	mulss	xmm0, DWORD PTR [ecx+4]
	subss	xmm0, DWORD PTR __real@3f000000
	cvttss2si edx, xmm0
	mov	DWORD PTR tv77[ebp], edx
	jmp	SHORT $LN9@Think
$LN8@Think:
	mov	eax, DWORD PTR ?gpGlobals@@3PAUglobalvars_t@@A ; gpGlobals
	movss	xmm0, DWORD PTR __real@42c80000
	mulss	xmm0, DWORD PTR [eax+4]
	addss	xmm0, DWORD PTR __real@3f000000
	cvttss2si ecx, xmm0
	mov	DWORD PTR tv77[ebp], ecx
$LN9@Think:
	mov	edx, DWORD PTR tv77[ebp]
	shl	edx, 1
	mov	DWORD PTR _subSteps$[ebp], edx

; 258  : 	float delta = (1.0f / 100.0f) * 2.0f;

	movss	xmm0, DWORD PTR __real@3ca3d70a
	movss	DWORD PTR _delta$[ebp], xmm0

; 259  : 	subSteps = bound( 2, subSteps, 10 );

	cmp	DWORD PTR _subSteps$[ebp], 2
	jl	SHORT $LN12@Think
	cmp	DWORD PTR _subSteps$[ebp], 10		; 0000000aH
	jge	SHORT $LN10@Think
	mov	eax, DWORD PTR _subSteps$[ebp]
	mov	DWORD PTR tv81[ebp], eax
	jmp	SHORT $LN11@Think
$LN10@Think:
	mov	DWORD PTR tv81[ebp], 10			; 0000000aH
$LN11@Think:
	mov	ecx, DWORD PTR tv81[ebp]
	mov	DWORD PTR tv82[ebp], ecx
	jmp	SHORT $LN13@Think
$LN12@Think:
	mov	DWORD PTR tv82[ebp], 2
$LN13@Think:
	mov	edx, DWORD PTR tv82[ebp]
	mov	DWORD PTR _subSteps$[ebp], edx

; 260  : 
; 261  : 	if( m_hParent != NULL )

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 148				; 00000094H
	call	??BEHANDLE@@QAEHXZ			; EHANDLE::operator int
	test	eax, eax
	je	SHORT $LN5@Think

; 262  : 	{
; 263  : 		// get move origin from parent class
; 264  : 		CRopeSegment* pSegment = m_pSegments[0];

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+ecx+1712]
	mov	DWORD PTR _pSegment$1[ebp], eax

; 265  : 		pSegment->SetAbsOrigin( GetAbsOrigin() );

	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetAbsOrigin@CBaseEntity@@QBEABVVector@@XZ ; CBaseEntity::GetAbsOrigin
	push	eax
	mov	ecx, DWORD PTR _pSegment$1[ebp]
	call	?SetAbsOrigin@CBaseEntity@@QAEXABVVector@@@Z ; CBaseEntity::SetAbsOrigin

; 266  : 		pSegment->m_Data.mPosition = GetAbsOrigin();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetAbsOrigin@CBaseEntity@@QBEABVVector@@XZ ; CBaseEntity::GetAbsOrigin
	mov	ecx, DWORD PTR _pSegment$1[ebp]
	add	ecx, 1704				; 000006a8H
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	eax, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], eax
$LN5@Think:

; 267  : 	}
; 268  : 
; 269  : 	// make ropes nonsense to sv_fps
; 270  : 	for( int idx = 0; idx < subSteps; idx++ )

	mov	DWORD PTR _idx$2[ebp], 0
	jmp	SHORT $LN4@Think
$LN2@Think:
	mov	ecx, DWORD PTR _idx$2[ebp]
	add	ecx, 1
	mov	DWORD PTR _idx$2[ebp], ecx
$LN4@Think:
	mov	edx, DWORD PTR _idx$2[ebp]
	cmp	edx, DWORD PTR _subSteps$[ebp]
	jge	SHORT $LN3@Think

; 271  : 	{
; 272  : 		ComputeForces( m_pSegments );

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 1712				; 000006b0H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ComputeForces@CRope@@QAEXPAPAVCRopeSegment@@@Z ; CRope::ComputeForces

; 273  : 		RK4Integrate( delta );

	push	ecx
	movss	xmm0, DWORD PTR _delta$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?RK4Integrate@CRope@@QAEXM@Z		; CRope::RK4Integrate

; 274  : 	}

	jmp	SHORT $LN2@Think
$LN3@Think:

; 275  : 
; 276  : 	TraceModels();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?TraceModels@CRope@@QAEXXZ		; CRope::TraceModels

; 277  : 
; 278  : 	if( ShouldCreak() )

	mov	ecx, DWORD PTR _this$[ebp]
	call	?ShouldCreak@CRope@@QBE_NXZ		; CRope::ShouldCreak
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN6@Think

; 279  : 	{
; 280  : 		EMIT_SOUND( edict(), CHAN_BODY, g_pszCreakSounds[RANDOM_LONG( 0, ARRAYSIZE( g_pszCreakSounds ) - 1 )], VOL_NORM, ATTN_NORM );

	push	ecx
	movss	xmm0, DWORD PTR __real@3f4ccccd
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [esp], xmm0
	push	2
	push	0
	call	DWORD PTR ?g_engfuncs@@3Uenginefuncs_s@@A+360
	add	esp, 8
	mov	edx, DWORD PTR ?g_pszCreakSounds@@3QBQBDB[eax*4]
	push	edx
	push	4
	mov	ecx, DWORD PTR _this$[ebp]
	call	?edict@CBaseEntity@@QAEPAUedict_s@@XZ	; CBaseEntity::edict
	push	eax
	call	?EMIT_SOUND@@YAXPAUedict_s@@HPBDMM@Z	; EMIT_SOUND
	add	esp, 20					; 00000014H
$LN6@Think:

; 281  : 	}
; 282  : 
; 283  : 	SendUpdateBones();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?SendUpdateBones@CRope@@QAEXXZ		; CRope::SendUpdateBones

; 284  : 	SetNextThink( 0.0f );

	push	ecx
	xorps	xmm0, xmm0
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+80]
	call	eax

; 285  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?Think@CRope@@UAEXXZ ENDP				; CRope::Think
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xashxt_v0.81_rev.1_with_sources\xashxt_v0.81_rev.1_src\server\ropes\crope.cpp
_TEXT	SEGMENT
$T1 = -184						; size = 12
$T2 = -172						; size = 12
_angles$ = -160						; size = 12
$T3 = -148						; size = 12
$T4 = -136						; size = 12
$T5 = -124						; size = 12
_vecGravity$ = -112					; size = 12
_p1$6 = -100						; size = 12
_p0$7 = -88						; size = 12
_vecOrigin$ = -76					; size = 12
_modelindex$ = -64					; size = 4
_origin$ = -60						; size = 12
_pSegment$8 = -48					; size = 4
_pCurr$9 = -44						; size = 4
_pbone$10 = -40						; size = 4
tv169 = -36						; size = 4
_pPrev$11 = -32						; size = 4
_iSeg$12 = -28						; size = 4
_iSeg$13 = -24						; size = 4
_pSample$14 = -20					; size = 4
_phdr$ = -16						; size = 4
_i$15 = -12						; size = 4
_i$16 = -8						; size = 4
_this$ = -4						; size = 4
?Spawn@CRope@@UAEXXZ PROC				; CRope::Spawn
; _this$ = ecx

; 105  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 184				; 000000b8H
	mov	DWORD PTR _this$[ebp], ecx

; 106  : 	if( m_iszEndingModel == NULL_STRING )

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+1992], 0
	jne	SHORT $LN14@Spawn

; 107  : 		m_iszEndingModel = m_iszBodyModel;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+1988]
	mov	DWORD PTR [ecx+1992], eax
$LN14@Spawn:

; 108  : 	m_bMakeSound = true;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+1997], 1

; 109  : 
; 110  : 	int modelindex = PRECACHE_MODEL( STRING( m_iszBodyModel ));

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+1988]
	push	eax
	call	DWORD PTR ?g_engfuncs@@3Uenginefuncs_s@@A+264
	add	esp, 4
	push	eax
	call	DWORD PTR ?g_engfuncs@@3Uenginefuncs_s@@A
	add	esp, 4
	mov	DWORD PTR _modelindex$[ebp], eax

; 111  : 	studiohdr_t *phdr = (studiohdr_t *)CBaseAnimating::GetModelPtr( modelindex );

	mov	ecx, DWORD PTR _modelindex$[ebp]
	push	ecx
	call	?GetModelPtr@CBaseAnimating@@SAPAXH@Z	; CBaseAnimating::GetModelPtr
	add	esp, 4
	mov	DWORD PTR _phdr$[ebp], eax

; 112  : 
; 113  : 	if( phdr && phdr->numbones > 4 )

	cmp	DWORD PTR _phdr$[ebp], 0
	je	SHORT $LN15@Spawn
	mov	edx, DWORD PTR _phdr$[ebp]
	cmp	DWORD PTR [edx+140], 4
	jle	SHORT $LN15@Spawn

; 114  : 	{
; 115  : 		SET_MODEL( edict(), STRING( m_iszBodyModel ));

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1988]
	push	ecx
	call	DWORD PTR ?g_engfuncs@@3Uenginefuncs_s@@A+264
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?edict@CBaseEntity@@QAEPAUedict_s@@XZ	; CBaseEntity::edict
	push	eax
	call	DWORD PTR ?g_engfuncs@@3Uenginefuncs_s@@A+8
	add	esp, 8

; 116  : 		m_iSegments = phdr->numbones;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _phdr$[ebp]
	mov	ecx, DWORD PTR [eax+140]
	mov	DWORD PTR [edx+1680], ecx

; 117  : 		m_bSimulateBones = true;

	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+1996], 1
$LN15@Spawn:

; 118  : 	}
; 119  : 
; 120  : 	Precache();

	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	call	eax

; 121  : 
; 122  : 	Vector vecOrigin = GetAbsOrigin();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetAbsOrigin@CBaseEntity@@QBEABVVector@@XZ ; CBaseEntity::GetAbsOrigin
	push	eax
	lea	ecx, DWORD PTR _vecOrigin$[ebp]
	call	??0Vector@@QAE@ABV0@@Z			; Vector::Vector

; 123  : 	m_vecGravity = Vector( 0.0f, 0.0f, -50.0f );

	push	ecx
	movss	xmm0, DWORD PTR __real@c2480000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	xorps	xmm0, xmm0
	movss	DWORD PTR [esp], xmm0
	push	ecx
	xorps	xmm0, xmm0
	movss	DWORD PTR [esp], xmm0
	lea	ecx, DWORD PTR $T5[ebp]
	call	??0Vector@@QAE@MMM@Z			; Vector::Vector
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 1700				; 000006a4H
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	eax, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], eax

; 124  : 	m_iNumSamples = m_iSegments + 1;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+1680]
	add	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+1684], edx

; 125  : 
; 126  : 	for( int i = 0; i < m_iNumSamples; i++ )

	mov	DWORD PTR _i$15[ebp], 0
	jmp	SHORT $LN4@Spawn
$LN2@Spawn:
	mov	ecx, DWORD PTR _i$15[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$15[ebp], ecx
$LN4@Spawn:
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _i$15[ebp]
	cmp	eax, DWORD PTR [edx+1684]
	jge	$LN3@Spawn

; 127  : 	{
; 128  : 		CRopeSegment *pSample;
; 129  : 
; 130  : 		// NOTE: last segment are invisible, first segment have an infinity mass
; 131  : 		if( i == m_iNumSamples - 2 )

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+1684]
	sub	edx, 2
	cmp	DWORD PTR _i$15[ebp], edx
	jne	SHORT $LN16@Spawn

; 132  : 			pSample = CRopeSegment :: CreateSegment( GetEndingModel( ), 1.0f );

	push	ecx
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetEndingModel@CRope@@QBEHXZ		; CRope::GetEndingModel
	push	eax
	call	?CreateSegment@CRopeSegment@@SAPAV1@HM@Z ; CRopeSegment::CreateSegment
	add	esp, 8
	mov	DWORD PTR _pSample$14[ebp], eax
	jmp	SHORT $LN19@Spawn
$LN16@Spawn:

; 133  : 		else if( i == m_iNumSamples - 1 )

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1684]
	sub	ecx, 1
	cmp	DWORD PTR _i$15[ebp], ecx
	jne	SHORT $LN18@Spawn

; 134  : 			pSample = CRopeSegment :: CreateSegment( NULL_STRING, 0.2f );

	push	ecx
	movss	xmm0, DWORD PTR __real@3e4ccccd
	movss	DWORD PTR [esp], xmm0
	push	0
	call	?CreateSegment@CRopeSegment@@SAPAV1@HM@Z ; CRopeSegment::CreateSegment
	add	esp, 8
	mov	DWORD PTR _pSample$14[ebp], eax
	jmp	SHORT $LN19@Spawn
$LN18@Spawn:

; 135  : 		else pSample = CRopeSegment :: CreateSegment( GetBodyModel( ), i == 0 ? 0.0f : 1.0f );

	cmp	DWORD PTR _i$15[ebp], 0
	jne	SHORT $LN27@Spawn
	xorps	xmm0, xmm0
	movss	DWORD PTR tv169[ebp], xmm0
	jmp	SHORT $LN28@Spawn
$LN27@Spawn:
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR tv169[ebp], xmm0
$LN28@Spawn:
	push	ecx
	movss	xmm0, DWORD PTR tv169[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetBodyModel@CRope@@QBEHXZ		; CRope::GetBodyModel
	push	eax
	call	?CreateSegment@CRopeSegment@@SAPAV1@HM@Z ; CRopeSegment::CreateSegment
	add	esp, 8
	mov	DWORD PTR _pSample$14[ebp], eax
$LN19@Spawn:

; 136  : 		if( i < ROPE_IGNORE_SAMPLES ) pSample->SetCanBeGrabbed( false );

	cmp	DWORD PTR _i$15[ebp], 4
	jge	SHORT $LN20@Spawn
	push	0
	mov	ecx, DWORD PTR _pSample$14[ebp]
	call	?SetCanBeGrabbed@CRopeSegment@@QAEX_N@Z	; CRopeSegment::SetCanBeGrabbed
$LN20@Spawn:

; 137  : 
; 138  : 		// just to have something valid here
; 139  : 		pSample->SetAbsOrigin( vecOrigin );

	lea	edx, DWORD PTR _vecOrigin$[ebp]
	push	edx
	mov	ecx, DWORD PTR _pSample$14[ebp]
	call	?SetAbsOrigin@CBaseEntity@@QAEXABVVector@@@Z ; CBaseEntity::SetAbsOrigin

; 140  : 		pSample->SetMasterRope( this );

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pSample$14[ebp]
	call	?SetMasterRope@CRopeSegment@@QAEXPAVCRope@@@Z ; CRopeSegment::SetMasterRope

; 141  : 		m_pSegments[i] = pSample;

	mov	ecx, DWORD PTR _i$15[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _pSample$14[ebp]
	mov	DWORD PTR [edx+ecx*4+1712], eax

; 142  : 	}

	jmp	$LN2@Spawn
$LN3@Spawn:

; 143  : 
; 144  : 	if( m_bSimulateBones )

	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+1996]
	test	edx, edx
	je	$LN21@Spawn

; 145  : 	{
; 146  : 		mstudiobone_t *pbone = (mstudiobone_t *)((byte *)phdr + phdr->boneindex);

	mov	eax, DWORD PTR _phdr$[ebp]
	mov	ecx, DWORD PTR _phdr$[ebp]
	add	ecx, DWORD PTR [eax+144]
	mov	DWORD PTR _pbone$10[ebp], ecx

; 147  : 
; 148  : 		for( int i = 0; i < m_iNumSamples; i++ )

	mov	DWORD PTR _i$16[ebp], 0
	jmp	SHORT $LN7@Spawn
$LN5@Spawn:
	mov	edx, DWORD PTR _i$16[ebp]
	add	edx, 1
	mov	DWORD PTR _i$16[ebp], edx
$LN7@Spawn:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _i$16[ebp]
	cmp	ecx, DWORD PTR [eax+1684]
	jge	$LN6@Spawn

; 149  : 		{
; 150  : 			if( i < ( phdr->numbones - 1 ))

	mov	edx, DWORD PTR _phdr$[ebp]
	mov	eax, DWORD PTR [edx+140]
	sub	eax, 1
	cmp	DWORD PTR _i$16[ebp], eax
	jge	SHORT $LN22@Spawn

; 151  : 			{
; 152  : 				Vector p0 = Vector( pbone[i].value );

	imul	ecx, DWORD PTR _i$16[ebp], 112
	mov	edx, DWORD PTR _pbone$10[ebp]
	lea	eax, DWORD PTR [edx+ecx+64]
	push	eax
	lea	ecx, DWORD PTR _p0$7[ebp]
	call	??0Vector@@QAE@QAM@Z			; Vector::Vector

; 153  : 				Vector p1 = Vector( pbone[i+1].value );

	mov	ecx, DWORD PTR _i$16[ebp]
	add	ecx, 1
	imul	edx, ecx, 112
	mov	eax, DWORD PTR _pbone$10[ebp]
	lea	ecx, DWORD PTR [eax+edx+64]
	push	ecx
	lea	ecx, DWORD PTR _p1$6[ebp]
	call	??0Vector@@QAE@QAM@Z			; Vector::Vector

; 154  : 				m_pSegments[i]->m_Data.restLength = (p1 - p0).Length();

	lea	edx, DWORD PTR _p0$7[ebp]
	push	edx
	lea	eax, DWORD PTR $T4[ebp]
	push	eax
	lea	ecx, DWORD PTR _p1$6[ebp]
	call	??GVector@@QBE?AV0@ABV0@@Z		; Vector::operator-
	mov	ecx, eax
	call	?Length@Vector@@QBEMXZ			; Vector::Length
	mov	ecx, DWORD PTR _i$16[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+ecx*4+1712]
	fstp	DWORD PTR [eax+1760]
	jmp	SHORT $LN24@Spawn
$LN22@Spawn:

; 155  : 			}
; 156  : 			else if( i < phdr->numbones )

	mov	ecx, DWORD PTR _phdr$[ebp]
	mov	edx, DWORD PTR _i$16[ebp]
	cmp	edx, DWORD PTR [ecx+140]
	jge	SHORT $LN24@Spawn

; 157  : 				m_pSegments[i]->m_Data.restLength = m_pSegments[i-1]->m_Data.restLength;

	mov	eax, DWORD PTR _i$16[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4+1708]
	mov	eax, DWORD PTR _i$16[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+eax*4+1712]
	mov	ecx, DWORD PTR [edx+1760]
	mov	DWORD PTR [eax+1760], ecx
$LN24@Spawn:

; 158  : 			// last segment is equal 0
; 159  : 		}

	jmp	$LN5@Spawn
$LN6@Spawn:

; 160  : 
; 161  : 		SET_MODEL( edict(), STRING( m_iszBodyModel ));

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+1988]
	push	eax
	call	DWORD PTR ?g_engfuncs@@3Uenginefuncs_s@@A+264
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?edict@CBaseEntity@@QAEPAUedict_s@@XZ	; CBaseEntity::edict
	push	eax
	call	DWORD PTR ?g_engfuncs@@3Uenginefuncs_s@@A+8
	add	esp, 8

; 162  : 		SetAbsAngles( Vector( 90.0f, 0.0f, 0.0f ));

	push	ecx
	xorps	xmm0, xmm0
	movss	DWORD PTR [esp], xmm0
	push	ecx
	xorps	xmm0, xmm0
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@42b40000
	movss	DWORD PTR [esp], xmm0
	lea	ecx, DWORD PTR $T3[ebp]
	call	??0Vector@@QAE@MMM@Z			; Vector::Vector
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetAbsAngles@CBaseEntity@@QAEXABVVector@@@Z ; CBaseEntity::SetAbsAngles
$LN21@Spawn:

; 163  : 	}
; 164  : 
; 165  : 	Vector origin, angles;

	lea	ecx, DWORD PTR _origin$[ebp]
	call	??0Vector@@QAE@XZ			; Vector::Vector
	lea	ecx, DWORD PTR _angles$[ebp]
	call	??0Vector@@QAE@XZ			; Vector::Vector

; 166  : 	const Vector vecGravity = m_vecGravity.Normalize();

	lea	ecx, DWORD PTR _vecGravity$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 1700				; 000006a4H
	call	?Normalize@Vector@@QBE?AV1@XZ		; Vector::Normalize

; 167  : 
; 168  : 	// setup the segments position
; 169  : 	if( m_iNumSamples > 2 )

	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+1684], 2
	jle	$LN9@Spawn

; 170  : 	{
; 171  : 		CRopeSegment *pPrev, *pCurr;
; 172  : 
; 173  : 		for( int iSeg = 1; iSeg < m_iNumSamples; iSeg++ )

	mov	DWORD PTR _iSeg$13[ebp], 1
	jmp	SHORT $LN10@Spawn
$LN8@Spawn:
	mov	eax, DWORD PTR _iSeg$13[ebp]
	add	eax, 1
	mov	DWORD PTR _iSeg$13[ebp], eax
$LN10@Spawn:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _iSeg$13[ebp]
	cmp	edx, DWORD PTR [ecx+1684]
	jge	$LN9@Spawn

; 174  : 		{
; 175  : 			pPrev = m_pSegments[iSeg - 1];

	mov	eax, DWORD PTR _iSeg$13[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4+1708]
	mov	DWORD PTR _pPrev$11[ebp], edx

; 176  : 			pCurr = m_pSegments[iSeg - 0];

	mov	eax, DWORD PTR _iSeg$13[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4+1712]
	mov	DWORD PTR _pCurr$9[ebp], edx

; 177  : 
; 178  : 			// calc direction from previous sample origin and attachment
; 179  : 			origin = pPrev->GetAbsOrigin() + pPrev->m_Data.restLength * vecGravity;

	lea	eax, DWORD PTR _vecGravity$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pPrev$11[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [ecx+1760]
	movss	DWORD PTR [esp], xmm0
	lea	edx, DWORD PTR $T2[ebp]
	push	edx
	call	??D@YA?AVVector@@MABV0@@Z		; operator*
	add	esp, 12					; 0000000cH
	push	eax
	lea	eax, DWORD PTR $T1[ebp]
	push	eax
	mov	ecx, DWORD PTR _pPrev$11[ebp]
	call	?GetAbsOrigin@CBaseEntity@@QBEABVVector@@XZ ; CBaseEntity::GetAbsOrigin
	mov	ecx, eax
	call	??HVector@@QBE?AV0@ABV0@@Z		; Vector::operator+
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _origin$[ebp], ecx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR _origin$[ebp+4], edx
	mov	eax, DWORD PTR [eax+8]
	mov	DWORD PTR _origin$[ebp+8], eax

; 180  : 
; 181  : 			pCurr->SetAbsOrigin( origin );

	lea	ecx, DWORD PTR _origin$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _pCurr$9[ebp]
	call	?SetAbsOrigin@CBaseEntity@@QAEXABVVector@@@Z ; CBaseEntity::SetAbsOrigin

; 182  : 			m_vecLastEndPos = origin;

	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 1688				; 00000698H
	mov	eax, DWORD PTR _origin$[ebp]
	mov	DWORD PTR [edx], eax
	mov	ecx, DWORD PTR _origin$[ebp+4]
	mov	DWORD PTR [edx+4], ecx
	mov	eax, DWORD PTR _origin$[ebp+8]
	mov	DWORD PTR [edx+8], eax

; 183  : 			SetSegmentAngles( pPrev, pCurr );

	mov	ecx, DWORD PTR _pCurr$9[ebp]
	push	ecx
	mov	edx, DWORD PTR _pPrev$11[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetSegmentAngles@CRope@@QAEXPAVCRopeSegment@@0@Z ; CRope::SetSegmentAngles

; 184  : 		}

	jmp	$LN8@Spawn
$LN9@Spawn:

; 185  : 	}
; 186  : 
; 187  : 	// initialize position data
; 188  : 	for( int iSeg = 0; iSeg < m_iNumSamples; iSeg++ )

	mov	DWORD PTR _iSeg$12[ebp], 0
	jmp	SHORT $LN13@Spawn
$LN11@Spawn:
	mov	eax, DWORD PTR _iSeg$12[ebp]
	add	eax, 1
	mov	DWORD PTR _iSeg$12[ebp], eax
$LN13@Spawn:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _iSeg$12[ebp]
	cmp	edx, DWORD PTR [ecx+1684]
	jge	SHORT $LN12@Spawn

; 189  : 	{
; 190  : 		CRopeSegment* pSegment = m_pSegments[iSeg];

	mov	eax, DWORD PTR _iSeg$12[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4+1712]
	mov	DWORD PTR _pSegment$8[ebp], edx

; 191  : 		pSegment->m_Data.mPosition = pSegment->GetAbsOrigin();

	mov	ecx, DWORD PTR _pSegment$8[ebp]
	call	?GetAbsOrigin@CBaseEntity@@QBEABVVector@@XZ ; CBaseEntity::GetAbsOrigin
	mov	ecx, DWORD PTR _pSegment$8[ebp]
	add	ecx, 1704				; 000006a8H
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	eax, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], eax

; 192  : 	}

	jmp	SHORT $LN11@Spawn
$LN12@Spawn:

; 193  : 
; 194  : 	SetNextThink( 0.1 );

	push	ecx
	movss	xmm0, DWORD PTR __real@3dcccccd
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+80]
	call	eax

; 195  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?Spawn@CRope@@UAEXXZ ENDP				; CRope::Spawn
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xashxt_v0.81_rev.1_with_sources\xashxt_v0.81_rev.1_src\server\ropes\crope.cpp
_TEXT	SEGMENT
_this$ = -8						; size = 4
_i$1 = -4						; size = 4
?Precache@CRope@@UAEXXZ PROC				; CRope::Precache
; _this$ = ecx

; 98   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 99   : 	BaseClass::Precache();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Precache@CBaseEntity@@UAEXXZ		; CBaseEntity::Precache

; 100  : 
; 101  : 	PRECACHE_SOUND_ARRAY( g_pszCreakSounds );

	mov	DWORD PTR _i$1[ebp], 0
	jmp	SHORT $LN4@Precache
$LN2@Precache:
	mov	eax, DWORD PTR _i$1[ebp]
	add	eax, 1
	mov	DWORD PTR _i$1[ebp], eax
$LN4@Precache:
	cmp	DWORD PTR _i$1[ebp], 3
	jae	SHORT $LN1@Precache
	mov	ecx, DWORD PTR _i$1[ebp]
	mov	edx, DWORD PTR ?g_pszCreakSounds@@3QBQBDB[ecx*4]
	push	edx
	call	DWORD PTR ?g_engfuncs@@3Uenginefuncs_s@@A+4
	add	esp, 4
	jmp	SHORT $LN2@Precache
$LN1@Precache:

; 102  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?Precache@CRope@@UAEXXZ ENDP				; CRope::Precache
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xashxt_v0.81_rev.1_with_sources\xashxt_v0.81_rev.1_src\server\ropes\crope.cpp
_TEXT	SEGMENT
tv139 = -8						; size = 4
_this$ = -4						; size = 4
_pkvd$ = 8						; size = 4
?KeyValue@CRope@@UAEXPAUKeyValueData_s@@@Z PROC		; CRope::KeyValue
; _this$ = ecx

; 69   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 70   : 	if( FStrEq( pkvd->szKeyName, "segments" ))

	push	OFFSET $SG76573
	mov	eax, DWORD PTR _pkvd$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	call	?FStrEq@@YAHPBD0@Z			; FStrEq
	add	esp, 8
	test	eax, eax
	je	SHORT $LN2@KeyValue

; 71   : 	{
; 72   : 		m_iSegments = atoi( pkvd->szValue );

	mov	edx, DWORD PTR _pkvd$[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	call	_atoi
	add	esp, 4
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+1680], eax

; 73   : 
; 74   : 		if( m_iSegments >= MAX_SEGMENTS )

	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+1680], 64		; 00000040H
	jl	SHORT $LN4@KeyValue

; 75   : 			m_iSegments = MAX_SEGMENTS - 1;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+1680], 63		; 0000003fH
$LN4@KeyValue:

; 76   : 		pkvd->fHandled = true;

	mov	ecx, DWORD PTR _pkvd$[ebp]
	mov	DWORD PTR [ecx+12], 1
	jmp	$LN1@KeyValue
$LN2@KeyValue:

; 77   : 	}
; 78   : 	else if( FStrEq( pkvd->szKeyName, "bodymodel" ))

	push	OFFSET $SG76577
	mov	edx, DWORD PTR _pkvd$[ebp]
	mov	eax, DWORD PTR [edx+4]
	push	eax
	call	?FStrEq@@YAHPBD0@Z			; FStrEq
	add	esp, 8
	test	eax, eax
	je	SHORT $LN5@KeyValue

; 79   : 	{
; 80   : 		m_iszBodyModel = ALLOC_STRING( pkvd->szValue );

	mov	ecx, DWORD PTR _pkvd$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	call	DWORD PTR ?g_engfuncs@@3Uenginefuncs_s@@A+268
	add	esp, 4
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+1988], eax

; 81   : 		pkvd->fHandled = true;

	mov	edx, DWORD PTR _pkvd$[ebp]
	mov	DWORD PTR [edx+12], 1
	jmp	$LN1@KeyValue
$LN5@KeyValue:

; 82   : 	}
; 83   : 	else if( FStrEq( pkvd->szKeyName, "endingmodel" ))

	push	OFFSET $SG76580
	mov	eax, DWORD PTR _pkvd$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	call	?FStrEq@@YAHPBD0@Z			; FStrEq
	add	esp, 8
	test	eax, eax
	je	SHORT $LN7@KeyValue

; 84   : 	{
; 85   : 		m_iszEndingModel = ALLOC_STRING( pkvd->szValue );

	mov	edx, DWORD PTR _pkvd$[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	call	DWORD PTR ?g_engfuncs@@3Uenginefuncs_s@@A+268
	add	esp, 4
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+1992], eax

; 86   : 		pkvd->fHandled = true;

	mov	edx, DWORD PTR _pkvd$[ebp]
	mov	DWORD PTR [edx+12], 1
	jmp	SHORT $LN1@KeyValue
$LN7@KeyValue:

; 87   : 	}
; 88   : 	else if( FStrEq( pkvd->szKeyName, "disable" ))

	push	OFFSET $SG76583
	mov	eax, DWORD PTR _pkvd$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	call	?FStrEq@@YAHPBD0@Z			; FStrEq
	add	esp, 8
	test	eax, eax
	je	SHORT $LN9@KeyValue

; 89   : 	{
; 90   : 		m_bDisallowPlayerAttachment = atoi( pkvd->szValue ) != 0;

	mov	edx, DWORD PTR _pkvd$[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	call	_atoi
	add	esp, 4
	test	eax, eax
	je	SHORT $LN12@KeyValue
	mov	DWORD PTR tv139[ebp], 1
	jmp	SHORT $LN13@KeyValue
$LN12@KeyValue:
	mov	DWORD PTR tv139[ebp], 0
$LN13@KeyValue:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dl, BYTE PTR tv139[ebp]
	mov	BYTE PTR [ecx+1972], dl

; 91   : 		pkvd->fHandled = true;

	mov	eax, DWORD PTR _pkvd$[ebp]
	mov	DWORD PTR [eax+12], 1

; 92   : 	}
; 93   : 	else

	jmp	SHORT $LN1@KeyValue
$LN9@KeyValue:

; 94   : 		BaseClass::KeyValue( pkvd );

	mov	ecx, DWORD PTR _pkvd$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?KeyValue@CBaseDelay@@UAEXPAUKeyValueData_s@@@Z ; CBaseDelay::KeyValue
$LN1@KeyValue:

; 95   : }

	mov	esp, ebp
	pop	ebp
	ret	4
?KeyValue@CRope@@UAEXPAUKeyValueData_s@@@Z ENDP		; CRope::KeyValue
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xashxt_v0.81_rev.1_with_sources\xashxt_v0.81_rev.1_src\server\ropes\crope.cpp
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0CRope@@QAE@XZ PROC					; CRope::CRope
; _this$ = ecx

; 63   : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0CRope@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0CBaseDelay@@QAE@XZ
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7CRope@@6B@
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 1688				; 00000698H
	call	??0Vector@@QAE@XZ			; Vector::Vector
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 1700				; 000006a4H
	call	??0Vector@@QAE@XZ			; Vector::Vector

; 64   : 	m_iszBodyModel = MAKE_STRING( "models/rope16.mdl" );

	push	OFFSET $SG76557
	call	DWORD PTR ?g_engfuncs@@3Uenginefuncs_s@@A+268
	add	esp, 4
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+1988], eax

; 65   : 	m_iszEndingModel = MAKE_STRING( "models/rope16.mdl" );

	push	OFFSET $SG76558
	call	DWORD PTR ?g_engfuncs@@3Uenginefuncs_s@@A+268
	add	esp, 4
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+1992], eax

; 66   : }

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$??0CRope@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1CBaseDelay@@QAE@XZ
__ehhandler$??0CRope@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0CRope@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??0CRope@@QAE@XZ ENDP					; CRope::CRope
; Function compile flags: /Odtp
; File c:\users\user\downloads\xashxt_v0.81_rev.1_with_sources\xashxt_v0.81_rev.1_src\server\ropes\crope.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetDataDescMap@CRope@@UAEPAUdatamap_s@@XZ PROC		; CRope::GetDataDescMap
; _this$ = ecx

; 43   : BEGIN_DATADESC( CRope )

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, OFFSET ?m_DataMap@CRope@@2Udatamap_s@@A ; CRope::m_DataMap
	mov	esp, ebp
	pop	ebp
	ret	0
?GetDataDescMap@CRope@@UAEPAUdatamap_s@@XZ ENDP		; CRope::GetDataDescMap
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xashxt_v0.81_rev.1_with_sources\xashxt_v0.81_rev.1_src\server\ropes\crope.cpp
_TEXT	SEGMENT
_pResult$ = -4						; size = 4
?GetBaseMap@CRope@@SAPAUdatamap_s@@XZ PROC		; CRope::GetBaseMap

; 43   : BEGIN_DATADESC( CRope )

	push	ebp
	mov	ebp, esp
	push	ecx
	lea	eax, DWORD PTR _pResult$[ebp]
	push	eax
	push	0
	call	??$DataMapAccess@VCBaseDelay@@@@YAXPAVCBaseDelay@@PAPAUdatamap_s@@@Z ; DataMapAccess<CBaseDelay>
	add	esp, 8
	mov	eax, DWORD PTR _pResult$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetBaseMap@CRope@@SAPAUdatamap_s@@XZ ENDP		; CRope::GetBaseMap
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??1CBaseDelay@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1CBaseDelay@@QAE@XZ PROC				; CBaseDelay::~CBaseDelay, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1CBaseEntity@@QAE@XZ
	mov	esp, ebp
	pop	ebp
	ret	0
??1CBaseDelay@@QAE@XZ ENDP				; CBaseDelay::~CBaseDelay
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??0CBaseDelay@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CBaseDelay@@QAE@XZ PROC				; CBaseDelay::CBaseDelay, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0CBaseEntity@@QAE@XZ
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7CBaseDelay@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0CBaseDelay@@QAE@XZ ENDP				; CBaseDelay::CBaseDelay
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xashxt_v0.81_rev.1_with_sources\xashxt_v0.81_rev.1_src\server\cbase.h
;	COMDAT ?GetState@CBaseDelay@@UAE?AW4STATE@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetState@CBaseDelay@@UAE?AW4STATE@@XZ PROC		; CBaseDelay::GetState, COMDAT
; _this$ = ecx

; 867  : 	virtual STATE GetState( void ) { return m_iState; };

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+1676]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetState@CBaseDelay@@UAE?AW4STATE@@XZ ENDP		; CBaseDelay::GetState
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??1CBaseEntity@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1CBaseEntity@@QAE@XZ PROC				; CBaseEntity::~CBaseEntity, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 248				; 000000f8H
	call	??1CMeshDesc@@QAE@XZ			; CMeshDesc::~CMeshDesc
	mov	esp, ebp
	pop	ebp
	ret	0
??1CBaseEntity@@QAE@XZ ENDP				; CBaseEntity::~CBaseEntity
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??0CBaseEntity@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CBaseEntity@@QAE@XZ PROC				; CBaseEntity::CBaseEntity, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7CBaseEntity@@6B@
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 76					; 0000004cH
	call	??0Vector@@QAE@XZ			; Vector::Vector
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 88					; 00000058H
	call	??0Vector@@QAE@XZ			; Vector::Vector
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 100				; 00000064H
	call	??0Vector@@QAE@XZ			; Vector::Vector
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 112				; 00000070H
	call	??0Vector@@QAE@XZ			; Vector::Vector
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 124				; 0000007cH
	call	??0Vector@@QAE@XZ			; Vector::Vector
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 136				; 00000088H
	call	??0Vector@@QAE@XZ			; Vector::Vector
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 180				; 000000b4H
	call	??0matrix4x4@@QAE@XZ			; matrix4x4::matrix4x4
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 248				; 000000f8H
	call	??0CMeshDesc@@QAE@XZ			; CMeshDesc::CMeshDesc
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0CBaseEntity@@QAE@XZ ENDP				; CBaseEntity::CBaseEntity
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xashxt_v0.81_rev.1_with_sources\xashxt_v0.81_rev.1_src\server\cbase.h
;	COMDAT ?Illumination@CBaseEntity@@UAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Illumination@CBaseEntity@@UAEHXZ PROC			; CBaseEntity::Illumination, COMDAT
; _this$ = ecx

; 706  : 	virtual int Illumination( ) { return GETENTITYILLUM( ENT( pev ) ); };

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	call	?ENT@@YAPAUedict_s@@PBUentvars_s@@@Z	; ENT
	add	esp, 4
	push	eax
	call	DWORD PTR ?g_engfuncs@@3Uenginefuncs_s@@A+60
	add	esp, 4
	mov	esp, ebp
	pop	ebp
	ret	0
?Illumination@CBaseEntity@@UAEHXZ ENDP			; CBaseEntity::Illumination
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xashxt_v0.81_rev.1_with_sources\xashxt_v0.81_rev.1_src\server\cbase.h
;	COMDAT ?IsPointSized@CBaseEntity@@UBEHXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv70 = -1						; size = 1
?IsPointSized@CBaseEntity@@UBEHXZ PROC			; CBaseEntity::IsPointSized, COMDAT
; _this$ = ecx

; 704  : 	virtual BOOL IsPointSized() const { return (pev->size == g_vecZero) ? true : false; }

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
	push	OFFSET ?g_vecZero@@3VVector@@B		; g_vecZero
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, 244				; 000000f4H
	call	??8Vector@@QBEHABV0@@Z			; Vector::operator==
	test	eax, eax
	je	SHORT $LN3@IsPointSiz
	mov	BYTE PTR tv70[ebp], 1
	jmp	SHORT $LN4@IsPointSiz
$LN3@IsPointSiz:
	mov	BYTE PTR tv70[ebp], 0
$LN4@IsPointSiz:
	movzx	eax, BYTE PTR tv70[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
?IsPointSized@CBaseEntity@@UBEHXZ ENDP			; CBaseEntity::IsPointSized
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xashxt_v0.81_rev.1_with_sources\xashxt_v0.81_rev.1_src\server\cbase.h
;	COMDAT ?BodyTarget@CBaseEntity@@UAE?AVVector@@ABV2@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
_posSrc$ = 12						; size = 4
?BodyTarget@CBaseEntity@@UAE?AVVector@@ABV2@@Z PROC	; CBaseEntity::BodyTarget, COMDAT
; _this$ = ecx

; 703  : 	virtual Vector BodyTarget( const Vector &posSrc ) { return Center( ); };		// position to shoot at

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+300]
	call	eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	8
?BodyTarget@CBaseEntity@@UAE?AVVector@@ABV2@@Z ENDP	; CBaseEntity::BodyTarget
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xashxt_v0.81_rev.1_with_sources\xashxt_v0.81_rev.1_src\server\cbase.h
;	COMDAT ?EarPosition@CBaseEntity@@UAE?AVVector@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?EarPosition@CBaseEntity@@UAE?AVVector@@XZ PROC		; CBaseEntity::EarPosition, COMDAT
; _this$ = ecx

; 702  : 	virtual Vector EarPosition( ) { return GetAbsOrigin() + pev->view_ofs; };			// position of ears

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, 372				; 00000174H
	push	ecx
	mov	edx, DWORD PTR ___$ReturnUdt$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetAbsOrigin@CBaseEntity@@QBEABVVector@@XZ ; CBaseEntity::GetAbsOrigin
	mov	ecx, eax
	call	??HVector@@QBE?AV0@ABV0@@Z		; Vector::operator+
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
?EarPosition@CBaseEntity@@UAE?AVVector@@XZ ENDP		; CBaseEntity::EarPosition
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xashxt_v0.81_rev.1_with_sources\xashxt_v0.81_rev.1_src\server\cbase.h
;	COMDAT ?EyePosition@CBaseEntity@@UAE?AVVector@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?EyePosition@CBaseEntity@@UAE?AVVector@@XZ PROC		; CBaseEntity::EyePosition, COMDAT
; _this$ = ecx

; 701  : 	virtual Vector EyePosition( ) { return GetAbsOrigin() + pev->view_ofs; };			// position of eyes

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, 372				; 00000174H
	push	ecx
	mov	edx, DWORD PTR ___$ReturnUdt$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetAbsOrigin@CBaseEntity@@QBEABVVector@@XZ ; CBaseEntity::GetAbsOrigin
	mov	ecx, eax
	call	??HVector@@QBE?AV0@ABV0@@Z		; Vector::operator+
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
?EyePosition@CBaseEntity@@UAE?AVVector@@XZ ENDP		; CBaseEntity::EyePosition
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xashxt_v0.81_rev.1_with_sources\xashxt_v0.81_rev.1_src\server\cbase.h
;	COMDAT ?Center@CBaseEntity@@UAE?AVVector@@XZ
_TEXT	SEGMENT
$T1 = -16						; size = 12
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?Center@CBaseEntity@@UAE?AVVector@@XZ PROC		; CBaseEntity::Center, COMDAT
; _this$ = ecx

; 700  : 	virtual Vector Center( ) { return (pev->absmax + pev->absmin) * 0.5; }; // center point of entity

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx
	push	ecx
	movss	xmm0, DWORD PTR __real@3f000000
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	add	edx, 196				; 000000c4H
	push	edx
	lea	eax, DWORD PTR $T1[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	add	ecx, 208				; 000000d0H
	call	??HVector@@QBE?AV0@ABV0@@Z		; Vector::operator+
	mov	ecx, eax
	call	??DVector@@QBE?AV0@M@Z			; Vector::operator*
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
?Center@CBaseEntity@@UAE?AVVector@@XZ ENDP		; CBaseEntity::Center
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xashxt_v0.81_rev.1_with_sources\xashxt_v0.81_rev.1_src\server\cbase.h
;	COMDAT ?edict@CBaseEntity@@QAEPAUedict_s@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?edict@CBaseEntity@@QAEPAUedict_s@@XZ PROC		; CBaseEntity::edict, COMDAT
; _this$ = ecx

; 696  : 	edict_t *edict() { return ENT( pev ); };

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	call	?ENT@@YAPAUedict_s@@PBUentvars_s@@@Z	; ENT
	add	esp, 4
	mov	esp, ebp
	pop	ebp
	ret	0
?edict@CBaseEntity@@QAEPAUedict_s@@XZ ENDP		; CBaseEntity::edict
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xashxt_v0.81_rev.1_with_sources\xashxt_v0.81_rev.1_src\server\cbase.h
;	COMDAT ?FBecomeProne@CBaseEntity@@UAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?FBecomeProne@CBaseEntity@@UAEHXZ PROC			; CBaseEntity::FBecomeProne, COMDAT
; _this$ = ecx

; 695  : 	virtual BOOL FBecomeProne( void ) {return FALSE;};

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	0
?FBecomeProne@CBaseEntity@@UAEHXZ ENDP			; CBaseEntity::FBecomeProne
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xashxt_v0.81_rev.1_with_sources\xashxt_v0.81_rev.1_src\server\cbase.h
;	COMDAT ?UpdateOwner@CBaseEntity@@UAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?UpdateOwner@CBaseEntity@@UAEXXZ PROC			; CBaseEntity::UpdateOwner, COMDAT
; _this$ = ecx

; 691  : 	virtual	void UpdateOwner( void ) { return; };

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esp, ebp
	pop	ebp
	ret	0
?UpdateOwner@CBaseEntity@@UAEXXZ ENDP			; CBaseEntity::UpdateOwner
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xashxt_v0.81_rev.1_with_sources\xashxt_v0.81_rev.1_src\server\cbase.h
;	COMDAT ?Respawn@CBaseEntity@@UAEPAV1@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Respawn@CBaseEntity@@UAEPAV1@XZ PROC			; CBaseEntity::Respawn, COMDAT
; _this$ = ecx

; 499  : 	virtual CBaseEntity *Respawn( void ) { return NULL; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	0
?Respawn@CBaseEntity@@UAEPAV1@XZ ENDP			; CBaseEntity::Respawn
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xashxt_v0.81_rev.1_with_sources\xashxt_v0.81_rev.1_src\server\cbase.h
;	COMDAT ??3CBaseEntity@@SAXPAXPAUentvars_s@@@Z
_TEXT	SEGMENT
_pMem$ = 8						; size = 4
_pev$ = 12						; size = 4
??3CBaseEntity@@SAXPAXPAUentvars_s@@@Z PROC		; CBaseEntity::operator delete, COMDAT

; 482  : 	{

	push	ebp
	mov	ebp, esp

; 483  : 		pev->flags |= FL_KILLME;

	mov	eax, DWORD PTR _pev$[ebp]
	mov	ecx, DWORD PTR [eax+420]
	or	ecx, 1073741824				; 40000000H
	mov	edx, DWORD PTR _pev$[ebp]
	mov	DWORD PTR [edx+420], ecx

; 484  : 	};

	pop	ebp
	ret	0
??3CBaseEntity@@SAXPAXPAUentvars_s@@@Z ENDP		; CBaseEntity::operator delete
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xashxt_v0.81_rev.1_with_sources\xashxt_v0.81_rev.1_src\server\cbase.h
;	COMDAT ??2CBaseEntity@@SAPAXIPAUentvars_s@@@Z
_TEXT	SEGMENT
_stAllocateBlock$ = 8					; size = 4
_pev$ = 12						; size = 4
??2CBaseEntity@@SAPAXIPAUentvars_s@@@Z PROC		; CBaseEntity::operator new, COMDAT

; 475  : 	{

	push	ebp
	mov	ebp, esp

; 476  : 		return (void *)ALLOC_PRIVATE(ENT(pev), stAllocateBlock);

	mov	eax, DWORD PTR _stAllocateBlock$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pev$[ebp]
	push	ecx
	call	?ENT@@YAPAUedict_s@@PBUentvars_s@@@Z	; ENT
	add	esp, 4
	push	eax
	call	DWORD PTR ?g_engfuncs@@3Uenginefuncs_s@@A+252
	add	esp, 8

; 477  : 	};

	pop	ebp
	ret	0
??2CBaseEntity@@SAPAXIPAUentvars_s@@@Z ENDP		; CBaseEntity::operator new
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xashxt_v0.81_rev.1_with_sources\xashxt_v0.81_rev.1_src\server\cbase.h
;	COMDAT ?MoveDone@CBaseEntity@@UAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?MoveDone@CBaseEntity@@UAEXXZ PROC			; CBaseEntity::MoveDone, COMDAT
; _this$ = ecx

; 471  : 	virtual void MoveDone( void ) { if( m_pfnMoveDone )(this->*m_pfnMoveDone)(); };

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+1648], 0
	je	SHORT $LN1@MoveDone
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+1648]
	call	eax
$LN1@MoveDone:
	mov	esp, ebp
	pop	ebp
	ret	0
?MoveDone@CBaseEntity@@UAEXXZ ENDP			; CBaseEntity::MoveDone
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xashxt_v0.81_rev.1_with_sources\xashxt_v0.81_rev.1_src\server\cbase.h
;	COMDAT ?Blocked@CBaseEntity@@UAEXPAV1@@Z
_TEXT	SEGMENT
tv77 = -8						; size = 4
_this$ = -4						; size = 4
_pOther$ = 8						; size = 4
?Blocked@CBaseEntity@@UAEXPAV1@@Z PROC			; CBaseEntity::Blocked, COMDAT
; _this$ = ecx

; 462  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 463  : 		if( m_pfnBlocked )

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+1644], 0
	je	SHORT $LN2@Blocked

; 464  : 			(this->*m_pfnBlocked)( pOther );

	mov	ecx, DWORD PTR _pOther$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+1644]
	call	eax
$LN2@Blocked:

; 465  : 
; 466  : 		// forward the blocked event to our parent, if any.
; 467  : 		if( m_hParent != NULL )

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 148				; 00000094H
	call	??BEHANDLE@@QAEHXZ			; EHANDLE::operator int
	test	eax, eax
	je	SHORT $LN1@Blocked

; 468  : 			m_hParent->Blocked( pOther );

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 148				; 00000094H
	call	??CEHANDLE@@QAEPAVCBaseEntity@@XZ	; EHANDLE::operator->
	mov	DWORD PTR tv77[ebp], eax
	mov	ecx, DWORD PTR _pOther$[ebp]
	push	ecx
	mov	edx, DWORD PTR tv77[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR tv77[ebp]
	mov	edx, DWORD PTR [eax+280]
	call	edx
$LN1@Blocked:

; 469  : 	}

	mov	esp, ebp
	pop	ebp
	ret	4
?Blocked@CBaseEntity@@UAEXPAV1@@Z ENDP			; CBaseEntity::Blocked
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xashxt_v0.81_rev.1_with_sources\xashxt_v0.81_rev.1_src\server\cbase.h
;	COMDAT ?Touch@CBaseEntity@@UAEXPAV1@@Z
_TEXT	SEGMENT
tv77 = -8						; size = 4
_this$ = -4						; size = 4
_pOther$ = 8						; size = 4
?Touch@CBaseEntity@@UAEXPAV1@@Z PROC			; CBaseEntity::Touch, COMDAT
; _this$ = ecx

; 452  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 453  : 		if( m_pfnTouch )

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+1636], 0
	je	SHORT $LN2@Touch

; 454  : 			(this->*m_pfnTouch)( pOther );

	mov	ecx, DWORD PTR _pOther$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+1636]
	call	eax
$LN2@Touch:

; 455  : 
; 456  : 		// forward the blocked event to our parent, if any.
; 457  : 		if( m_hParent != NULL )

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 148				; 00000094H
	call	??BEHANDLE@@QAEHXZ			; EHANDLE::operator int
	test	eax, eax
	je	SHORT $LN1@Touch

; 458  : 			m_hParent->Touch( pOther );

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 148				; 00000094H
	call	??CEHANDLE@@QAEPAVCBaseEntity@@XZ	; EHANDLE::operator->
	mov	DWORD PTR tv77[ebp], eax
	mov	ecx, DWORD PTR _pOther$[ebp]
	push	ecx
	mov	edx, DWORD PTR tv77[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR tv77[ebp]
	mov	edx, DWORD PTR [eax+276]
	call	edx
$LN1@Touch:

; 459  : 	}

	mov	esp, ebp
	pop	ebp
	ret	4
?Touch@CBaseEntity@@UAEXPAV1@@Z ENDP			; CBaseEntity::Touch
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xashxt_v0.81_rev.1_with_sources\xashxt_v0.81_rev.1_src\server\cbase.h
;	COMDAT ?Use@CBaseEntity@@UAEXPAV1@0W4USE_TYPE@@M@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_pActivator$ = 8					; size = 4
_pCaller$ = 12						; size = 4
_useType$ = 16						; size = 4
_value$ = 20						; size = 4
?Use@CBaseEntity@@UAEXPAV1@0W4USE_TYPE@@M@Z PROC	; CBaseEntity::Use, COMDAT
; _this$ = ecx

; 447  : 	{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 448  : 		if (m_pfnUse) (this->*m_pfnUse)( pActivator, pCaller, useType, value );

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+1640], 0
	je	SHORT $LN2@Use
	push	ecx
	movss	xmm0, DWORD PTR _value$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _useType$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pCaller$[ebp]
	push	edx
	mov	eax, DWORD PTR _pActivator$[ebp]
	push	eax
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+1640]
	call	eax
$LN2@Use:

; 449  : 	}

	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
?Use@CBaseEntity@@UAEXPAV1@0W4USE_TYPE@@M@Z ENDP	; CBaseEntity::Use
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xashxt_v0.81_rev.1_with_sources\xashxt_v0.81_rev.1_src\server\cbase.h
;	COMDAT ?Think@CBaseEntity@@UAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Think@CBaseEntity@@UAEXXZ PROC				; CBaseEntity::Think, COMDAT
; _this$ = ecx

; 444  : 	virtual void Think( void ) { if (m_pfnThink) (this->*m_pfnThink)(); };

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+1632], 0
	je	SHORT $LN1@Think
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+1632]
	call	eax
$LN1@Think:
	mov	esp, ebp
	pop	ebp
	ret	0
?Think@CBaseEntity@@UAEXXZ ENDP				; CBaseEntity::Think
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xashxt_v0.81_rev.1_with_sources\xashxt_v0.81_rev.1_src\server\cbase.h
;	COMDAT ?TeamID@CBaseEntity@@UAEPBDXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?TeamID@CBaseEntity@@UAEPBDXZ PROC			; CBaseEntity::TeamID, COMDAT
; _this$ = ecx

; 433  : 	virtual const char	*TeamID( void ) { return ""; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, OFFSET ??_C@_00CNPNBAHC@@
	mov	esp, ebp
	pop	ebp
	ret	0
?TeamID@CBaseEntity@@UAEPBDXZ ENDP			; CBaseEntity::TeamID
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xashxt_v0.81_rev.1_with_sources\xashxt_v0.81_rev.1_src\server\cbase.h
;	COMDAT ?IsBreakable@CBaseEntity@@UAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsBreakable@CBaseEntity@@UAEHXZ PROC			; CBaseEntity::IsBreakable, COMDAT
; _this$ = ecx

; 432  : 	virtual BOOL	IsBreakable( void ) { return FALSE; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	0
?IsBreakable@CBaseEntity@@UAEHXZ ENDP			; CBaseEntity::IsBreakable
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xashxt_v0.81_rev.1_with_sources\xashxt_v0.81_rev.1_src\server\cbase.h
;	COMDAT ?IsMover@CBaseEntity@@UAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsMover@CBaseEntity@@UAEHXZ PROC			; CBaseEntity::IsMover, COMDAT
; _this$ = ecx

; 431  : 	virtual BOOL	IsMover( void ) { return FALSE; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	0
?IsMover@CBaseEntity@@UAEHXZ ENDP			; CBaseEntity::IsMover
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xashxt_v0.81_rev.1_with_sources\xashxt_v0.81_rev.1_src\server\cbase.h
;	COMDAT ?IsTank@CBaseEntity@@UAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsTank@CBaseEntity@@UAEHXZ PROC			; CBaseEntity::IsTank, COMDAT
; _this$ = ecx

; 430  : 	virtual BOOL	IsTank( void ) { return FALSE; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	0
?IsTank@CBaseEntity@@UAEHXZ ENDP			; CBaseEntity::IsTank
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xashxt_v0.81_rev.1_with_sources\xashxt_v0.81_rev.1_src\server\cbase.h
;	COMDAT ?IsPortal@CBaseEntity@@UAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsPortal@CBaseEntity@@UAEHXZ PROC			; CBaseEntity::IsPortal, COMDAT
; _this$ = ecx

; 429  : 	virtual BOOL	IsPortal( void ) { return FALSE; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	0
?IsPortal@CBaseEntity@@UAEHXZ ENDP			; CBaseEntity::IsPortal
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xashxt_v0.81_rev.1_with_sources\xashxt_v0.81_rev.1_src\server\cbase.h
;	COMDAT ?IsFuncScreen@CBaseEntity@@UAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsFuncScreen@CBaseEntity@@UAEHXZ PROC			; CBaseEntity::IsFuncScreen, COMDAT
; _this$ = ecx

; 428  : 	virtual BOOL	IsFuncScreen( void ) { return FALSE; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	0
?IsFuncScreen@CBaseEntity@@UAEHXZ ENDP			; CBaseEntity::IsFuncScreen
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xashxt_v0.81_rev.1_with_sources\xashxt_v0.81_rev.1_src\server\cbase.h
;	COMDAT ?IsProjectile@CBaseEntity@@UAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsProjectile@CBaseEntity@@UAEHXZ PROC			; CBaseEntity::IsProjectile, COMDAT
; _this$ = ecx

; 427  : 	virtual BOOL	IsProjectile( void ) { return FALSE; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	0
?IsProjectile@CBaseEntity@@UAEHXZ ENDP			; CBaseEntity::IsProjectile
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xashxt_v0.81_rev.1_with_sources\xashxt_v0.81_rev.1_src\server\cbase.h
;	COMDAT ?IsPushable@CBaseEntity@@UAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsPushable@CBaseEntity@@UAEHXZ PROC			; CBaseEntity::IsPushable, COMDAT
; _this$ = ecx

; 426  : 	virtual BOOL	IsPushable( void ) { return FALSE; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	0
?IsPushable@CBaseEntity@@UAEHXZ ENDP			; CBaseEntity::IsPushable
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xashxt_v0.81_rev.1_with_sources\xashxt_v0.81_rev.1_src\server\cbase.h
;	COMDAT ?IsMonster@CBaseEntity@@UAEHXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv68 = -4						; size = 4
?IsMonster@CBaseEntity@@UAEHXZ PROC			; CBaseEntity::IsMonster, COMDAT
; _this$ = ecx

; 425  : 	virtual BOOL	IsMonster( void ) { return (pev->flags & FL_MONSTER ? TRUE : FALSE); }

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [ecx+420]
	and	edx, 32					; 00000020H
	je	SHORT $LN3@IsMonster
	mov	DWORD PTR tv68[ebp], 1
	jmp	SHORT $LN4@IsMonster
$LN3@IsMonster:
	mov	DWORD PTR tv68[ebp], 0
$LN4@IsMonster:
	mov	eax, DWORD PTR tv68[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
?IsMonster@CBaseEntity@@UAEHXZ ENDP			; CBaseEntity::IsMonster
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xashxt_v0.81_rev.1_with_sources\xashxt_v0.81_rev.1_src\server\cbase.h
;	COMDAT ?IsNetClient@CBaseEntity@@UAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsNetClient@CBaseEntity@@UAEHXZ PROC			; CBaseEntity::IsNetClient, COMDAT
; _this$ = ecx

; 424  : 	virtual BOOL	IsNetClient( void ) { return FALSE; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	0
?IsNetClient@CBaseEntity@@UAEHXZ ENDP			; CBaseEntity::IsNetClient
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xashxt_v0.81_rev.1_with_sources\xashxt_v0.81_rev.1_src\server\cbase.h
;	COMDAT ?IsPlayer@CBaseEntity@@UAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsPlayer@CBaseEntity@@UAEHXZ PROC			; CBaseEntity::IsPlayer, COMDAT
; _this$ = ecx

; 423  : 	virtual BOOL	IsPlayer( void ) { return FALSE; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	0
?IsPlayer@CBaseEntity@@UAEHXZ ENDP			; CBaseEntity::IsPlayer
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xashxt_v0.81_rev.1_with_sources\xashxt_v0.81_rev.1_src\server\cbase.h
;	COMDAT ?HasTarget@CBaseEntity@@UAEHH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_targetname$ = 8					; size = 4
?HasTarget@CBaseEntity@@UAEHH@Z PROC			; CBaseEntity::HasTarget, COMDAT
; _this$ = ecx

; 421  : 	virtual BOOL	HasTarget( string_t targetname ) { return FStrEq(STRING(targetname), STRING(pev->targetname) ); }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [ecx+460]
	push	edx
	call	DWORD PTR ?g_engfuncs@@3Uenginefuncs_s@@A+264
	add	esp, 4
	push	eax
	mov	eax, DWORD PTR _targetname$[ebp]
	push	eax
	call	DWORD PTR ?g_engfuncs@@3Uenginefuncs_s@@A+264
	add	esp, 4
	push	eax
	call	?FStrEq@@YAHPBD0@Z			; FStrEq
	add	esp, 8
	mov	esp, ebp
	pop	ebp
	ret	4
?HasTarget@CBaseEntity@@UAEHH@Z ENDP			; CBaseEntity::HasTarget
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xashxt_v0.81_rev.1_with_sources\xashxt_v0.81_rev.1_src\server\cbase.h
;	COMDAT ?ReflectGauss@CBaseEntity@@UAEHXZ
_TEXT	SEGMENT
tv77 = -8						; size = 4
_this$ = -4						; size = 4
?ReflectGauss@CBaseEntity@@UAEHXZ PROC			; CBaseEntity::ReflectGauss, COMDAT
; _this$ = ecx

; 420  : 	virtual BOOL	ReflectGauss( void ) { return (( IsBSPModel() || IsCustomModel()) && !pev->takedamage ); }

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+200]
	call	eax
	test	eax, eax
	jne	SHORT $LN3@ReflectGau
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+204]
	call	eax
	test	eax, eax
	je	SHORT $LN4@ReflectGau
$LN3@ReflectGau:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	movss	xmm0, DWORD PTR [edx+364]
	ucomiss	xmm0, DWORD PTR __real@00000000
	lahf
	test	ah, 68					; 00000044H
	jp	SHORT $LN4@ReflectGau
	mov	DWORD PTR tv77[ebp], 1
	jmp	SHORT $LN5@ReflectGau
$LN4@ReflectGau:
	mov	DWORD PTR tv77[ebp], 0
$LN5@ReflectGau:
	mov	eax, DWORD PTR tv77[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
?ReflectGauss@CBaseEntity@@UAEHXZ ENDP			; CBaseEntity::ReflectGauss
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xashxt_v0.81_rev.1_with_sources\xashxt_v0.81_rev.1_src\server\cbase.h
;	COMDAT ?IsCustomModel@CBaseEntity@@UAEHXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv67 = -4						; size = 4
?IsCustomModel@CBaseEntity@@UAEHXZ PROC			; CBaseEntity::IsCustomModel, COMDAT
; _this$ = ecx

; 419  : 	virtual BOOL	IsCustomModel( void ) { return pev->solid == SOLID_CUSTOM; }

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	cmp	DWORD PTR [ecx+268], 5
	jne	SHORT $LN3@IsCustomMo
	mov	DWORD PTR tv67[ebp], 1
	jmp	SHORT $LN4@IsCustomMo
$LN3@IsCustomMo:
	mov	DWORD PTR tv67[ebp], 0
$LN4@IsCustomMo:
	mov	eax, DWORD PTR tv67[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
?IsCustomModel@CBaseEntity@@UAEHXZ ENDP			; CBaseEntity::IsCustomModel
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xashxt_v0.81_rev.1_with_sources\xashxt_v0.81_rev.1_src\server\cbase.h
;	COMDAT ?IsBSPModel@CBaseEntity@@UAEHXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv69 = -4						; size = 4
?IsBSPModel@CBaseEntity@@UAEHXZ PROC			; CBaseEntity::IsBSPModel, COMDAT
; _this$ = ecx

; 418  : 	virtual BOOL	IsBSPModel( void ) { return UTIL_GetModelType( pev->modelindex ) == mod_brush; }

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [ecx+180]
	push	edx
	call	?UTIL_GetModelType@@YA?AW4modtype_t@@H@Z ; UTIL_GetModelType
	add	esp, 4
	test	eax, eax
	jne	SHORT $LN3@IsBSPModel
	mov	DWORD PTR tv69[ebp], 1
	jmp	SHORT $LN4@IsBSPModel
$LN3@IsBSPModel:
	mov	DWORD PTR tv69[ebp], 0
$LN4@IsBSPModel:
	mov	eax, DWORD PTR tv69[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
?IsBSPModel@CBaseEntity@@UAEHXZ ENDP			; CBaseEntity::IsBSPModel
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xashxt_v0.81_rev.1_with_sources\xashxt_v0.81_rev.1_src\server\cbase.h
;	COMDAT ?IsAlive@CBaseEntity@@UAEHXZ
_TEXT	SEGMENT
tv70 = -8						; size = 4
_this$ = -4						; size = 4
?IsAlive@CBaseEntity@@UAEHXZ PROC			; CBaseEntity::IsAlive, COMDAT
; _this$ = ecx

; 417  : 	virtual BOOL	IsAlive( void ) { return (pev->deadflag == DEAD_NO) && pev->health > 0; }

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	cmp	DWORD PTR [ecx+368], 0
	jne	SHORT $LN3@IsAlive
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	movss	xmm0, DWORD PTR [eax+352]
	comiss	xmm0, DWORD PTR __real@00000000
	jbe	SHORT $LN3@IsAlive
	mov	DWORD PTR tv70[ebp], 1
	jmp	SHORT $LN4@IsAlive
$LN3@IsAlive:
	mov	DWORD PTR tv70[ebp], 0
$LN4@IsAlive:
	mov	eax, DWORD PTR tv70[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
?IsAlive@CBaseEntity@@UAEHXZ ENDP			; CBaseEntity::IsAlive
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xashxt_v0.81_rev.1_with_sources\xashxt_v0.81_rev.1_src\server\cbase.h
;	COMDAT ?IsSneaking@CBaseEntity@@UAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsSneaking@CBaseEntity@@UAEHXZ PROC			; CBaseEntity::IsSneaking, COMDAT
; _this$ = ecx

; 416  : 	virtual BOOL	IsSneaking( void ) { return FALSE; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	0
?IsSneaking@CBaseEntity@@UAEHXZ ENDP			; CBaseEntity::IsSneaking
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xashxt_v0.81_rev.1_with_sources\xashxt_v0.81_rev.1_src\server\cbase.h
;	COMDAT ?OnControls@CBaseEntity@@UAEHPAV1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_pTest$ = 8						; size = 4
?OnControls@CBaseEntity@@UAEHPAV1@@Z PROC		; CBaseEntity::OnControls, COMDAT
; _this$ = ecx

; 415  : 	virtual BOOL	OnControls( CBaseEntity *pTest ) { return FALSE; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	4
?OnControls@CBaseEntity@@UAEHPAV1@@Z ENDP		; CBaseEntity::OnControls
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xashxt_v0.81_rev.1_with_sources\xashxt_v0.81_rev.1_src\server\cbase.h
;	COMDAT ?StopSneaking@CBaseEntity@@UAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?StopSneaking@CBaseEntity@@UAEXXZ PROC			; CBaseEntity::StopSneaking, COMDAT
; _this$ = ecx

; 414  : 	virtual void	StopSneaking( void ) {}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esp, ebp
	pop	ebp
	ret	0
?StopSneaking@CBaseEntity@@UAEXXZ ENDP			; CBaseEntity::StopSneaking
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xashxt_v0.81_rev.1_with_sources\xashxt_v0.81_rev.1_src\server\cbase.h
;	COMDAT ?StartSneaking@CBaseEntity@@UAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?StartSneaking@CBaseEntity@@UAEXXZ PROC			; CBaseEntity::StartSneaking, COMDAT
; _this$ = ecx

; 413  : 	virtual void	StartSneaking( void ) {}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esp, ebp
	pop	ebp
	ret	0
?StartSneaking@CBaseEntity@@UAEXXZ ENDP			; CBaseEntity::StartSneaking
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xashxt_v0.81_rev.1_with_sources\xashxt_v0.81_rev.1_src\server\cbase.h
;	COMDAT ?SetToggleState@CBaseEntity@@UAEXH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_state$ = 8						; size = 4
?SetToggleState@CBaseEntity@@UAEXH@Z PROC		; CBaseEntity::SetToggleState, COMDAT
; _this$ = ecx

; 412  : 	virtual void	SetToggleState( int state ) {}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esp, ebp
	pop	ebp
	ret	4
?SetToggleState@CBaseEntity@@UAEXH@Z ENDP		; CBaseEntity::SetToggleState
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xashxt_v0.81_rev.1_with_sources\xashxt_v0.81_rev.1_src\server\cbase.h
;	COMDAT ?TransferReset@CBaseEntity@@UAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?TransferReset@CBaseEntity@@UAEXXZ PROC			; CBaseEntity::TransferReset, COMDAT
; _this$ = ecx

; 409  : 	virtual void	TransferReset( void ) {}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esp, ebp
	pop	ebp
	ret	0
?TransferReset@CBaseEntity@@UAEXXZ ENDP			; CBaseEntity::TransferReset
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xashxt_v0.81_rev.1_with_sources\xashxt_v0.81_rev.1_src\server\cbase.h
;	COMDAT ?OverrideReset@CBaseEntity@@UAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?OverrideReset@CBaseEntity@@UAEXXZ PROC			; CBaseEntity::OverrideReset, COMDAT
; _this$ = ecx

; 408  : 	virtual void	OverrideReset( void ) {}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esp, ebp
	pop	ebp
	ret	0
?OverrideReset@CBaseEntity@@UAEXXZ ENDP			; CBaseEntity::OverrideReset
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xashxt_v0.81_rev.1_with_sources\xashxt_v0.81_rev.1_src\server\cbase.h
;	COMDAT ?IsMoving@CBaseEntity@@UAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsMoving@CBaseEntity@@UAEHXZ PROC			; CBaseEntity::IsMoving, COMDAT
; _this$ = ecx

; 407  : 	virtual int	IsMoving( void ) { return GetAbsVelocity() != g_vecZero; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	push	OFFSET ?g_vecZero@@3VVector@@B		; g_vecZero
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetAbsVelocity@CBaseEntity@@QBEABVVector@@XZ ; CBaseEntity::GetAbsVelocity
	mov	ecx, eax
	call	??9Vector@@QBEHABV0@@Z			; Vector::operator!=
	mov	esp, ebp
	pop	ebp
	ret	0
?IsMoving@CBaseEntity@@UAEHXZ ENDP			; CBaseEntity::IsMoving
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xashxt_v0.81_rev.1_with_sources\xashxt_v0.81_rev.1_src\server\cbase.h
;	COMDAT ?GetDelay@CBaseEntity@@UAEMXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetDelay@CBaseEntity@@UAEMXZ PROC			; CBaseEntity::GetDelay, COMDAT
; _this$ = ecx

; 406  : 	virtual float	GetDelay( void ) { return 0; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	fldz
	mov	esp, ebp
	pop	ebp
	ret	0
?GetDelay@CBaseEntity@@UAEMXZ ENDP			; CBaseEntity::GetDelay
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xashxt_v0.81_rev.1_with_sources\xashxt_v0.81_rev.1_src\server\cbase.h
;	COMDAT ?GiveAmmo@CBaseEntity@@UAEHHPADH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_iAmount$ = 8						; size = 4
_szName$ = 12						; size = 4
_iMax$ = 16						; size = 4
?GiveAmmo@CBaseEntity@@UAEHHPADH@Z PROC			; CBaseEntity::GiveAmmo, COMDAT
; _this$ = ecx

; 405  : 	virtual int 	GiveAmmo( int iAmount, char *szName, int iMax ) { return -1; };

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	or	eax, -1
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?GiveAmmo@CBaseEntity@@UAEHHPADH@Z ENDP			; CBaseEntity::GiveAmmo
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xashxt_v0.81_rev.1_with_sources\xashxt_v0.81_rev.1_src\server\cbase.h
;	COMDAT ?RemovePlayerItem@CBaseEntity@@UAEHPAVCBasePlayerItem@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_pItem$ = 8						; size = 4
?RemovePlayerItem@CBaseEntity@@UAEHPAVCBasePlayerItem@@@Z PROC ; CBaseEntity::RemovePlayerItem, COMDAT
; _this$ = ecx

; 404  : 	virtual BOOL	RemovePlayerItem( CBasePlayerItem *pItem ) { return 0; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	4
?RemovePlayerItem@CBaseEntity@@UAEHPAVCBasePlayerItem@@@Z ENDP ; CBaseEntity::RemovePlayerItem
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xashxt_v0.81_rev.1_with_sources\xashxt_v0.81_rev.1_src\server\cbase.h
;	COMDAT ?AddPlayerItem@CBaseEntity@@UAEHPAVCBasePlayerItem@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_pItem$ = 8						; size = 4
?AddPlayerItem@CBaseEntity@@UAEHPAVCBasePlayerItem@@@Z PROC ; CBaseEntity::AddPlayerItem, COMDAT
; _this$ = ecx

; 403  : 	virtual BOOL	AddPlayerItem( CBasePlayerItem *pItem ) { return 0; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	4
?AddPlayerItem@CBaseEntity@@UAEHPAVCBasePlayerItem@@@Z ENDP ; CBaseEntity::AddPlayerItem
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xashxt_v0.81_rev.1_with_sources\xashxt_v0.81_rev.1_src\server\cbase.h
;	COMDAT ?AddPointsToTeam@CBaseEntity@@UAEXHH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_score$ = 8						; size = 4
_bAllowNegativeScore$ = 12				; size = 4
?AddPointsToTeam@CBaseEntity@@UAEXHH@Z PROC		; CBaseEntity::AddPointsToTeam, COMDAT
; _this$ = ecx

; 402  : 	virtual void	AddPointsToTeam( int score, BOOL bAllowNegativeScore ) {}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esp, ebp
	pop	ebp
	ret	8
?AddPointsToTeam@CBaseEntity@@UAEXHH@Z ENDP		; CBaseEntity::AddPointsToTeam
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xashxt_v0.81_rev.1_with_sources\xashxt_v0.81_rev.1_src\server\cbase.h
;	COMDAT ?AddPoints@CBaseEntity@@UAEXHH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_score$ = 8						; size = 4
_bAllowNegativeScore$ = 12				; size = 4
?AddPoints@CBaseEntity@@UAEXHH@Z PROC			; CBaseEntity::AddPoints, COMDAT
; _this$ = ecx

; 401  : 	virtual void	AddPoints( int score, BOOL bAllowNegativeScore ) {}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esp, ebp
	pop	ebp
	ret	8
?AddPoints@CBaseEntity@@UAEXHH@Z ENDP			; CBaseEntity::AddPoints
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xashxt_v0.81_rev.1_with_sources\xashxt_v0.81_rev.1_src\server\cbase.h
;	COMDAT ?GetToggleState@CBaseEntity@@UAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetToggleState@CBaseEntity@@UAEHXZ PROC		; CBaseEntity::GetToggleState, COMDAT
; _this$ = ecx

; 400  : 	virtual int	GetToggleState( void ) { return TS_AT_TOP; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	0
?GetToggleState@CBaseEntity@@UAEHXZ ENDP		; CBaseEntity::GetToggleState
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xashxt_v0.81_rev.1_with_sources\xashxt_v0.81_rev.1_src\server\cbase.h
;	COMDAT ?MySquadMonsterPointer@CBaseEntity@@UAEPAVCSquadMonster@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?MySquadMonsterPointer@CBaseEntity@@UAEPAVCSquadMonster@@XZ PROC ; CBaseEntity::MySquadMonsterPointer, COMDAT
; _this$ = ecx

; 399  : 	virtual CSquadMonster *MySquadMonsterPointer( void ) { return NULL;}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	0
?MySquadMonsterPointer@CBaseEntity@@UAEPAVCSquadMonster@@XZ ENDP ; CBaseEntity::MySquadMonsterPointer
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xashxt_v0.81_rev.1_with_sources\xashxt_v0.81_rev.1_src\server\cbase.h
;	COMDAT ?MyMonsterPointer@CBaseEntity@@UAEPAVCBaseMonster@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?MyMonsterPointer@CBaseEntity@@UAEPAVCBaseMonster@@XZ PROC ; CBaseEntity::MyMonsterPointer, COMDAT
; _this$ = ecx

; 398  : 	virtual CBaseMonster *MyMonsterPointer( void ) { return NULL;}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	0
?MyMonsterPointer@CBaseEntity@@UAEPAVCBaseMonster@@XZ ENDP ; CBaseEntity::MyMonsterPointer
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xashxt_v0.81_rev.1_with_sources\xashxt_v0.81_rev.1_src\server\cbase.h
;	COMDAT ?IsTriggered@CBaseEntity@@UAEHPAV1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_pActivator$ = 8					; size = 4
?IsTriggered@CBaseEntity@@UAEHPAV1@@Z PROC		; CBaseEntity::IsTriggered, COMDAT
; _this$ = ecx

; 397  : 	virtual BOOL	IsTriggered( CBaseEntity *pActivator ) {return TRUE;}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, 1
	mov	esp, ebp
	pop	ebp
	ret	4
?IsTriggered@CBaseEntity@@UAEHPAV1@@Z ENDP		; CBaseEntity::IsTriggered
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xashxt_v0.81_rev.1_with_sources\xashxt_v0.81_rev.1_src\server\cbase.h
;	COMDAT ?BloodColor@CBaseEntity@@UAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?BloodColor@CBaseEntity@@UAEHXZ PROC			; CBaseEntity::BloodColor, COMDAT
; _this$ = ecx

; 395  : 	virtual int	BloodColor( void ) { return DONT_BLEED; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	or	eax, -1
	mov	esp, ebp
	pop	ebp
	ret	0
?BloodColor@CBaseEntity@@UAEHXZ ENDP			; CBaseEntity::BloodColor
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xashxt_v0.81_rev.1_with_sources\xashxt_v0.81_rev.1_src\server\cbase.h
;	COMDAT ?GetState@CBaseEntity@@UAE?AW4STATE@@PAV1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_pEnt$ = 8						; size = 4
?GetState@CBaseEntity@@UAE?AW4STATE@@PAV1@@Z PROC	; CBaseEntity::GetState, COMDAT
; _this$ = ecx

; 388  : 	virtual STATE GetState ( CBaseEntity* pEnt ) { return GetState(); };

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+88]
	call	eax
	mov	esp, ebp
	pop	ebp
	ret	4
?GetState@CBaseEntity@@UAE?AW4STATE@@PAV1@@Z ENDP	; CBaseEntity::GetState
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xashxt_v0.81_rev.1_with_sources\xashxt_v0.81_rev.1_src\server\cbase.h
;	COMDAT ?GetState@CBaseEntity@@UAE?AW4STATE@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetState@CBaseEntity@@UAE?AW4STATE@@XZ PROC		; CBaseEntity::GetState, COMDAT
; _this$ = ecx

; 385  : 	virtual STATE GetState ( void ) { return STATE_OFF; };

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	0
?GetState@CBaseEntity@@UAE?AW4STATE@@XZ ENDP		; CBaseEntity::GetState
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xashxt_v0.81_rev.1_with_sources\xashxt_v0.81_rev.1_src\server\cbase.h
;	COMDAT ?IsRigidBody@CBaseEntity@@UAEHXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv67 = -4						; size = 4
?IsRigidBody@CBaseEntity@@UAEHXZ PROC			; CBaseEntity::IsRigidBody, COMDAT
; _this$ = ecx

; 374  : 	virtual BOOL IsRigidBody( void ) { return (m_iActorType == ACTOR_DYNAMIC); } 

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+1604]
	cmp	ecx, 1
	jne	SHORT $LN3@IsRigidBod
	mov	DWORD PTR tv67[ebp], 1
	jmp	SHORT $LN4@IsRigidBod
$LN3@IsRigidBod:
	mov	DWORD PTR tv67[ebp], 0
$LN4@IsRigidBod:
	mov	eax, DWORD PTR tv67[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
?IsRigidBody@CBaseEntity@@UAEHXZ ENDP			; CBaseEntity::IsRigidBody
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xashxt_v0.81_rev.1_with_sources\xashxt_v0.81_rev.1_src\server\cbase.h
;	COMDAT ?DeathNotice@CBaseEntity@@UAEXPAUentvars_s@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_pevChild$ = 8						; size = 4
?DeathNotice@CBaseEntity@@UAEXPAUentvars_s@@@Z PROC	; CBaseEntity::DeathNotice, COMDAT
; _this$ = ecx

; 373  : 	virtual void DeathNotice ( entvars_t *pevChild ) { } // monster maker children use this to tell the monster maker that they have died.

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esp, ebp
	pop	ebp
	ret	4
?DeathNotice@CBaseEntity@@UAEXPAUentvars_s@@@Z ENDP	; CBaseEntity::DeathNotice
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xashxt_v0.81_rev.1_with_sources\xashxt_v0.81_rev.1_src\server\cbase.h
;	COMDAT ?Classify@CBaseEntity@@UAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Classify@CBaseEntity@@UAEHXZ PROC			; CBaseEntity::Classify, COMDAT
; _this$ = ecx

; 372  : 	virtual int Classify ( void ) { return CLASS_NONE; };

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	0
?Classify@CBaseEntity@@UAEHXZ ENDP			; CBaseEntity::Classify
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xashxt_v0.81_rev.1_with_sources\xashxt_v0.81_rev.1_src\server\cbase.h
;	COMDAT ?OnRemove@CBaseEntity@@UAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?OnRemove@CBaseEntity@@UAEXXZ PROC			; CBaseEntity::OnRemove, COMDAT
; _this$ = ecx

; 360  : 	virtual void	OnRemove( void ) {}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esp, ebp
	pop	ebp
	ret	0
?OnRemove@CBaseEntity@@UAEXXZ ENDP			; CBaseEntity::OnRemove
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xashxt_v0.81_rev.1_with_sources\xashxt_v0.81_rev.1_src\server\cbase.h
;	COMDAT ?OnClearParent@CBaseEntity@@UAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?OnClearParent@CBaseEntity@@UAEXXZ PROC			; CBaseEntity::OnClearParent, COMDAT
; _this$ = ecx

; 359  : 	virtual void	OnClearParent( void ) {}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esp, ebp
	pop	ebp
	ret	0
?OnClearParent@CBaseEntity@@UAEXXZ ENDP			; CBaseEntity::OnClearParent
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xashxt_v0.81_rev.1_with_sources\xashxt_v0.81_rev.1_src\server\cbase.h
;	COMDAT ?OnChangeParent@CBaseEntity@@UAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?OnChangeParent@CBaseEntity@@UAEXXZ PROC		; CBaseEntity::OnChangeParent, COMDAT
; _this$ = ecx

; 358  : 	virtual void	OnChangeParent( void ) {}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esp, ebp
	pop	ebp
	ret	0
?OnChangeParent@CBaseEntity@@UAEXXZ ENDP		; CBaseEntity::OnChangeParent
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xashxt_v0.81_rev.1_with_sources\xashxt_v0.81_rev.1_src\server\cbase.h
;	COMDAT ?GetPosition@CBaseEntity@@UAEMXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetPosition@CBaseEntity@@UAEMXZ PROC			; CBaseEntity::GetPosition, COMDAT
; _this$ = ecx

; 357  : 	virtual float	GetPosition( void ) { return 0.0f; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	fldz
	mov	esp, ebp
	pop	ebp
	ret	0
?GetPosition@CBaseEntity@@UAEMXZ ENDP			; CBaseEntity::GetPosition
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xashxt_v0.81_rev.1_with_sources\xashxt_v0.81_rev.1_src\server\cbase.h
;	COMDAT ?StartMessage@CBaseEntity@@UAEXPAVCBasePlayer@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_pPlayer$ = 8						; size = 4
?StartMessage@CBaseEntity@@UAEXPAVCBasePlayer@@@Z PROC	; CBaseEntity::StartMessage, COMDAT
; _this$ = ecx

; 356  :           virtual void	StartMessage( CBasePlayer *pPlayer ) {}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esp, ebp
	pop	ebp
	ret	4
?StartMessage@CBaseEntity@@UAEXPAVCBasePlayer@@@Z ENDP	; CBaseEntity::StartMessage
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xashxt_v0.81_rev.1_with_sources\xashxt_v0.81_rev.1_src\server\cbase.h
;	COMDAT ?PortalSleep@CBaseEntity@@UAEXM@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_seconds$ = 8						; size = 4
?PortalSleep@CBaseEntity@@UAEXM@Z PROC			; CBaseEntity::PortalSleep, COMDAT
; _this$ = ecx

; 355  : 	virtual void	PortalSleep( float seconds ) {}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esp, ebp
	pop	ebp
	ret	4
?PortalSleep@CBaseEntity@@UAEXM@Z ENDP			; CBaseEntity::PortalSleep
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xashxt_v0.81_rev.1_with_sources\xashxt_v0.81_rev.1_src\server\cbase.h
;	COMDAT ?OnTeleport@CBaseEntity@@UAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?OnTeleport@CBaseEntity@@UAEXXZ PROC			; CBaseEntity::OnTeleport, COMDAT
; _this$ = ecx

; 354  : 	virtual void	OnTeleport( void ) {}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esp, ebp
	pop	ebp
	ret	0
?OnTeleport@CBaseEntity@@UAEXXZ ENDP			; CBaseEntity::OnTeleport
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xashxt_v0.81_rev.1_with_sources\xashxt_v0.81_rev.1_src\server\cbase.h
;	COMDAT ?OnChangeLevel@CBaseEntity@@UAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?OnChangeLevel@CBaseEntity@@UAEXXZ PROC			; CBaseEntity::OnChangeLevel, COMDAT
; _this$ = ecx

; 353  : 	virtual void	OnChangeLevel( void ) {}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esp, ebp
	pop	ebp
	ret	0
?OnChangeLevel@CBaseEntity@@UAEXXZ ENDP			; CBaseEntity::OnChangeLevel
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xashxt_v0.81_rev.1_with_sources\xashxt_v0.81_rev.1_src\server\cbase.h
;	COMDAT ?Activate@CBaseEntity@@UAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Activate@CBaseEntity@@UAEXXZ PROC			; CBaseEntity::Activate, COMDAT
; _this$ = ecx

; 352  : 	virtual void	Activate( void ) {}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esp, ebp
	pop	ebp
	ret	0
?Activate@CBaseEntity@@UAEXXZ ENDP			; CBaseEntity::Activate
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xashxt_v0.81_rev.1_with_sources\xashxt_v0.81_rev.1_src\server\cbase.h
;	COMDAT ?ObjectCaps@CBaseEntity@@UAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?ObjectCaps@CBaseEntity@@UAEHXZ PROC			; CBaseEntity::ObjectCaps, COMDAT
; _this$ = ecx

; 351  : 	virtual int	ObjectCaps( void ) { return FCAP_ACROSS_TRANSITION; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, 2
	mov	esp, ebp
	pop	ebp
	ret	0
?ObjectCaps@CBaseEntity@@UAEHXZ ENDP			; CBaseEntity::ObjectCaps
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xashxt_v0.81_rev.1_with_sources\xashxt_v0.81_rev.1_src\server\cbase.h
;	COMDAT ?KeyValue@CBaseEntity@@UAEXPAUKeyValueData_s@@@Z
_TEXT	SEGMENT
tv139 = -8						; size = 4
_this$ = -4						; size = 4
_pkvd$ = 8						; size = 4
?KeyValue@CBaseEntity@@UAEXPAUKeyValueData_s@@@Z PROC	; CBaseEntity::KeyValue, COMDAT
; _this$ = ecx

; 315  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 316  : 		// get support for spirit field too
; 317  : 		if( FStrEq( pkvd->szKeyName, "parent" ) || FStrEq( pkvd->szKeyName, "movewith" ))

	push	OFFSET ??_C@_06MLKDMCBD@parent@
	mov	eax, DWORD PTR _pkvd$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	call	?FStrEq@@YAHPBD0@Z			; FStrEq
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN6@KeyValue
	push	OFFSET ??_C@_08JJJAOBDI@movewith@
	mov	edx, DWORD PTR _pkvd$[ebp]
	mov	eax, DWORD PTR [edx+4]
	push	eax
	call	?FStrEq@@YAHPBD0@Z			; FStrEq
	add	esp, 8
	test	eax, eax
	je	SHORT $LN4@KeyValue
$LN6@KeyValue:

; 318  : 		{
; 319  : 			m_iParent = ALLOC_STRING(pkvd->szValue);

	mov	ecx, DWORD PTR _pkvd$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	call	DWORD PTR ?g_engfuncs@@3Uenginefuncs_s@@A+268
	add	esp, 4
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+172], eax

; 320  : 			pkvd->fHandled = TRUE;

	mov	edx, DWORD PTR _pkvd$[ebp]
	mov	DWORD PTR [edx+12], 1
	jmp	$LN1@KeyValue
$LN4@KeyValue:

; 321  : 		}
; 322  : 		else if( FStrEq( pkvd->szKeyName, "parentflags" ))

	push	OFFSET ??_C@_0M@EAELDHJO@parentflags@
	mov	eax, DWORD PTR _pkvd$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	call	?FStrEq@@YAHPBD0@Z			; FStrEq
	add	esp, 8
	test	eax, eax
	je	SHORT $LN7@KeyValue

; 323  : 		{
; 324  : 			m_iParentFlags = Q_atoi( pkvd->szValue );

	mov	edx, DWORD PTR _pkvd$[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	call	?Q_atoi@@YAHPBD@Z			; Q_atoi
	add	esp, 4
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+176], eax

; 325  : 			pkvd->fHandled = TRUE;

	mov	edx, DWORD PTR _pkvd$[ebp]
	mov	DWORD PTR [edx+12], 1
	jmp	$LN1@KeyValue
$LN7@KeyValue:

; 326  : 		}
; 327  : 		else if( FStrEq( pkvd->szKeyName, "style" ))

	push	OFFSET ??_C@_05IAKJCFIM@style@
	mov	eax, DWORD PTR _pkvd$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	call	?FStrEq@@YAHPBD0@Z			; FStrEq
	add	esp, 8
	test	eax, eax
	je	SHORT $LN9@KeyValue

; 328  : 		{
; 329  : 			m_iStyle = Q_atoi( pkvd->szValue );

	mov	edx, DWORD PTR _pkvd$[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	call	?Q_atoi@@YAHPBD@Z			; Q_atoi
	add	esp, 4
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+64], eax

; 330  : 			pkvd->fHandled = TRUE;

	mov	edx, DWORD PTR _pkvd$[ebp]
	mov	DWORD PTR [edx+12], 1
	jmp	$LN1@KeyValue
$LN9@KeyValue:

; 331  : 		}
; 332  : 		else if( FStrEq( pkvd->szKeyName, "reflection" ))

	push	OFFSET ??_C@_0L@IKCANML@reflection@
	mov	eax, DWORD PTR _pkvd$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	call	?FStrEq@@YAHPBD0@Z			; FStrEq
	add	esp, 8
	test	eax, eax
	je	SHORT $LN11@KeyValue

; 333  : 		{
; 334  : 			switch( Q_atoi( pkvd->szValue ))

	mov	edx, DWORD PTR _pkvd$[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	call	?Q_atoi@@YAHPBD@Z			; Q_atoi
	add	esp, 4
	mov	DWORD PTR tv139[ebp], eax
	cmp	DWORD PTR tv139[ebp], 1
	je	SHORT $LN13@KeyValue
	cmp	DWORD PTR tv139[ebp], 2
	je	SHORT $LN14@KeyValue
	jmp	SHORT $LN2@KeyValue
$LN13@KeyValue:

; 335  : 			{
; 336  : 			case 1: pev->effects |= EF_NOREFLECT; break;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR [edx+280]
	or	eax, 16777216				; 01000000H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [edx+280], eax
	jmp	SHORT $LN2@KeyValue
$LN14@KeyValue:

; 337  : 			case 2: pev->effects |= EF_REFLECTONLY; break;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [ecx+280]
	or	edx, 33554432				; 02000000H
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+280], edx
$LN2@KeyValue:

; 338  : 			}
; 339  : 			pkvd->fHandled = TRUE;

	mov	edx, DWORD PTR _pkvd$[ebp]
	mov	DWORD PTR [edx+12], 1
	jmp	SHORT $LN1@KeyValue
$LN11@KeyValue:

; 340  : 		}
; 341  : 		else if( FStrEq(pkvd->szKeyName, "vlight_cache"))

	push	OFFSET ??_C@_0N@JILDNHAP@vlight_cache@
	mov	eax, DWORD PTR _pkvd$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	call	?FStrEq@@YAHPBD0@Z			; FStrEq
	add	esp, 8
	test	eax, eax
	je	SHORT $LN15@KeyValue

; 342  : 		{
; 343  : 			pev->iuser3 = atoi( pkvd->szValue );

	mov	edx, DWORD PTR _pkvd$[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	call	_atoi
	add	esp, 4
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [edx+588], eax

; 344  : 			pkvd->fHandled = TRUE;

	mov	eax, DWORD PTR _pkvd$[ebp]
	mov	DWORD PTR [eax+12], 1
	jmp	SHORT $LN1@KeyValue
$LN15@KeyValue:

; 345  : 		}
; 346  : 		else pkvd->fHandled = FALSE;

	mov	ecx, DWORD PTR _pkvd$[ebp]
	mov	DWORD PTR [ecx+12], 0
$LN1@KeyValue:

; 347  : 	}

	mov	esp, ebp
	pop	ebp
	ret	4
?KeyValue@CBaseEntity@@UAEXPAUKeyValueData_s@@@Z ENDP	; CBaseEntity::KeyValue
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xashxt_v0.81_rev.1_with_sources\xashxt_v0.81_rev.1_src\server\cbase.h
;	COMDAT ?Precache@CBaseEntity@@UAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Precache@CBaseEntity@@UAEXXZ PROC			; CBaseEntity::Precache, COMDAT
; _this$ = ecx

; 313  : 	virtual void	Precache( void ) { }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esp, ebp
	pop	ebp
	ret	0
?Precache@CBaseEntity@@UAEXXZ ENDP			; CBaseEntity::Precache
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xashxt_v0.81_rev.1_with_sources\xashxt_v0.81_rev.1_src\server\cbase.h
;	COMDAT ?Spawn@CBaseEntity@@UAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Spawn@CBaseEntity@@UAEXXZ PROC				; CBaseEntity::Spawn, COMDAT
; _this$ = ecx

; 312  : 	virtual void	Spawn( void ) { }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esp, ebp
	pop	ebp
	ret	0
?Spawn@CBaseEntity@@UAEXXZ ENDP				; CBaseEntity::Spawn
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xashxt_v0.81_rev.1_with_sources\xashxt_v0.81_rev.1_src\server\cbase.h
;	COMDAT ?SetClassname@CBaseEntity@@QAEXPBD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_pszClassName$ = 8					; size = 4
?SetClassname@CBaseEntity@@QAEXPBD@Z PROC		; CBaseEntity::SetClassname, COMDAT
; _this$ = ecx

; 294  : 	void		SetClassname( const char *pszClassName ) { pev->classname = MAKE_STRING( pszClassName ); }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _pszClassName$[ebp]
	push	eax
	call	DWORD PTR ?g_engfuncs@@3Uenginefuncs_s@@A+268
	add	esp, 4
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [edx], eax
	mov	esp, ebp
	pop	ebp
	ret	4
?SetClassname@CBaseEntity@@QAEXPBD@Z ENDP		; CBaseEntity::SetClassname
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xashxt_v0.81_rev.1_with_sources\xashxt_v0.81_rev.1_src\server\cbase.h
;	COMDAT ?EntityToWorldTransform@CBaseEntity@@QAEAAVmatrix4x4@@XZ
_TEXT	SEGMENT
$T1 = -84						; size = 12
_this$ = -72						; size = 4
$T2 = -68						; size = 64
__$ArrayPad$ = -4					; size = 4
?EntityToWorldTransform@CBaseEntity@@QAEAAVmatrix4x4@@XZ PROC ; CBaseEntity::EntityToWorldTransform, COMDAT
; _this$ = ecx

; 718  : { 

	push	ebp
	mov	ebp, esp
	sub	esp, 84					; 00000054H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	DWORD PTR _this$[ebp], ecx

; 719  : 	if( IsPlayer( ))

	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+220]
	call	eax
	test	eax, eax
	je	SHORT $LN2@EntityToWo

; 720  : 	{
; 721  : 		m_local = matrix4x4( pev->origin, Vector( 0.0f, pev->angles.y, 0.0f ));

	push	ecx
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	xorps	xmm0, xmm0
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	push	ecx
	movss	xmm0, DWORD PTR [edx+84]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	xorps	xmm0, xmm0
	movss	DWORD PTR [esp], xmm0
	lea	ecx, DWORD PTR $T1[ebp]
	call	??0Vector@@QAE@MMM@Z			; Vector::Vector
	push	eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, 8
	push	ecx
	lea	ecx, DWORD PTR $T2[ebp]
	call	??0matrix4x4@@QAE@ABVVector@@0M@Z	; matrix4x4::matrix4x4
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 180				; 000000b4H
	call	??4matrix4x4@@QAEAAV0@ABV0@@Z		; matrix4x4::operator=
	jmp	SHORT $LN4@EntityToWo
$LN2@EntityToWo:

; 722  : 	}
; 723  : 	else if( pev->flags & FL_ABSTRANSFORM )

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR [eax+420]
	and	ecx, 131072				; 00020000H
	je	SHORT $LN4@EntityToWo

; 724  : 	{
; 725  : 		CalcAbsolutePosition();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?CalcAbsolutePosition@CBaseEntity@@QAEXXZ ; CBaseEntity::CalcAbsolutePosition
$LN4@EntityToWo:

; 726  : 	}
; 727  : 	return m_local; 

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 180				; 000000b4H

; 728  : }

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
?EntityToWorldTransform@CBaseEntity@@QAEAAVmatrix4x4@@XZ ENDP ; CBaseEntity::EntityToWorldTransform
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xashxt_v0.81_rev.1_with_sources\xashxt_v0.81_rev.1_src\server\ehandle.h
;	COMDAT ??CEHANDLE@@QAEPAVCBaseEntity@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??CEHANDLE@@QAEPAVCBaseEntity@@XZ PROC			; EHANDLE::operator->, COMDAT
; _this$ = ecx

; 90   : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 91   : 	return (CBaseEntity *)GET_PRIVATE( Get( ) ); 

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Get@EHANDLE@@QAEPAUedict_s@@XZ		; EHANDLE::Get
	push	eax
	call	?GET_PRIVATE@@YAPAXPAUedict_s@@@Z	; GET_PRIVATE
	add	esp, 4

; 92   : }

	mov	esp, ebp
	pop	ebp
	ret	0
??CEHANDLE@@QAEPAVCBaseEntity@@XZ ENDP			; EHANDLE::operator->
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xashxt_v0.81_rev.1_with_sources\xashxt_v0.81_rev.1_src\server\ehandle.h
;	COMDAT ??BEHANDLE@@QAEHXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv67 = -4						; size = 4
??BEHANDLE@@QAEHXZ PROC					; EHANDLE::operator int, COMDAT
; _this$ = ecx

; 85   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 86   : 	return Get() != NULL;

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Get@EHANDLE@@QAEPAUedict_s@@XZ		; EHANDLE::Get
	test	eax, eax
	je	SHORT $LN3@operator
	mov	DWORD PTR tv67[ebp], 1
	jmp	SHORT $LN4@operator
$LN3@operator:
	mov	DWORD PTR tv67[ebp], 0
$LN4@operator:
	mov	eax, DWORD PTR tv67[ebp]

; 87   : }

	mov	esp, ebp
	pop	ebp
	ret	0
??BEHANDLE@@QAEHXZ ENDP					; EHANDLE::operator int
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xashxt_v0.81_rev.1_with_sources\xashxt_v0.81_rev.1_src\server\ehandle.h
;	COMDAT ?Get@EHANDLE@@QAEPAUedict_s@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Get@EHANDLE@@QAEPAUedict_s@@XZ PROC			; EHANDLE::Get, COMDAT
; _this$ = ecx

; 40   : { 

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 41   : 	if( m_pent )

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN2@Get

; 42   : 	{
; 43   : #if 0
; 44   : 		// keep client entity always in actual state
; 45   : 		if( ENTINDEX( m_pent ) == 1 )
; 46   : 			m_serialnumber = m_pent->serialnumber;
; 47   : #endif
; 48   : 		if( m_pent->serialnumber == m_serialnumber ) 

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	cmp	ecx, DWORD PTR [eax+4]
	jne	SHORT $LN2@Get

; 49   : 			return m_pent; 

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	jmp	SHORT $LN1@Get
$LN2@Get:

; 50   : 	}
; 51   : 
; 52   : 	return NULL; 

	xor	eax, eax
$LN1@Get:

; 53   : }

	mov	esp, ebp
	pop	ebp
	ret	0
?Get@EHANDLE@@QAEPAUedict_s@@XZ ENDP			; EHANDLE::Get
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xashxt_v0.81_rev.1_with_sources\xashxt_v0.81_rev.1_src\server\util.h
;	COMDAT ?EMIT_SOUND@@YAXPAUedict_s@@HPBDMM@Z
_TEXT	SEGMENT
_entity$ = 8						; size = 4
_channel$ = 12						; size = 4
_sample$ = 16						; size = 4
_volume$ = 20						; size = 4
_attenuation$ = 24					; size = 4
?EMIT_SOUND@@YAXPAUedict_s@@HPBDMM@Z PROC		; EMIT_SOUND, COMDAT

; 609  : {

	push	ebp
	mov	ebp, esp

; 610  : 	EMIT_SOUND_DYN( entity, channel, sample, volume, attenuation, 0, PITCH_NORM );

	push	100					; 00000064H
	push	0
	push	ecx
	movss	xmm0, DWORD PTR _attenuation$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _volume$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _sample$[ebp]
	push	eax
	mov	ecx, DWORD PTR _channel$[ebp]
	push	ecx
	mov	edx, DWORD PTR _entity$[ebp]
	push	edx
	call	?EMIT_SOUND_DYN@@YAXPAUedict_s@@HPBDMMHH@Z ; EMIT_SOUND_DYN
	add	esp, 28					; 0000001cH

; 611  : }

	pop	ebp
	ret	0
?EMIT_SOUND@@YAXPAUedict_s@@HPBDMM@Z ENDP		; EMIT_SOUND
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xashxt_v0.81_rev.1_with_sources\xashxt_v0.81_rev.1_src\server\util.h
;	COMDAT ?FStrEq@@YAHPBD0@Z
_TEXT	SEGMENT
tv69 = -4						; size = 4
_sz1$ = 8						; size = 4
_sz2$ = 12						; size = 4
?FStrEq@@YAHPBD0@Z PROC					; FStrEq, COMDAT

; 286  : 	{ return (Q_strcmp( sz1, sz2 ) == 0); }

	push	ebp
	mov	ebp, esp
	push	ecx
	push	99999					; 0001869fH
	mov	eax, DWORD PTR _sz2$[ebp]
	push	eax
	mov	ecx, DWORD PTR _sz1$[ebp]
	push	ecx
	call	?Q_strncmp@@YAHPBD0H@Z			; Q_strncmp
	add	esp, 12					; 0000000cH
	test	eax, eax
	jne	SHORT $LN3@FStrEq
	mov	DWORD PTR tv69[ebp], 1
	jmp	SHORT $LN4@FStrEq
$LN3@FStrEq:
	mov	DWORD PTR tv69[ebp], 0
$LN4@FStrEq:
	mov	eax, DWORD PTR tv69[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
?FStrEq@@YAHPBD0@Z ENDP					; FStrEq
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xashxt_v0.81_rev.1_with_sources\xashxt_v0.81_rev.1_src\server\util.h
;	COMDAT ?ENTINDEX@@YAHPAUedict_s@@@Z
_TEXT	SEGMENT
_pEdict$ = 8						; size = 4
?ENTINDEX@@YAHPAUedict_s@@@Z PROC			; ENTINDEX, COMDAT

; 186  : inline int	  ENTINDEX(edict_t *pEdict)			{ return (*g_engfuncs.pfnIndexOfEdict)(pEdict); }

	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR _pEdict$[ebp]
	push	eax
	call	DWORD PTR ?g_engfuncs@@3Uenginefuncs_s@@A+284
	add	esp, 4
	pop	ebp
	ret	0
?ENTINDEX@@YAHPAUedict_s@@@Z ENDP			; ENTINDEX
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xashxt_v0.81_rev.1_with_sources\xashxt_v0.81_rev.1_src\server\util.h
;	COMDAT ?VARS@@YAPAUentvars_s@@PAUedict_s@@@Z
_TEXT	SEGMENT
_pent$ = 8						; size = 4
?VARS@@YAPAUentvars_s@@PAUedict_s@@@Z PROC		; VARS, COMDAT

; 178  : { 

	push	ebp
	mov	ebp, esp

; 179  : 	if ( !pent )

	cmp	DWORD PTR _pent$[ebp], 0
	jne	SHORT $LN2@VARS

; 180  : 		return NULL;

	xor	eax, eax
	jmp	SHORT $LN1@VARS
$LN2@VARS:

; 181  : 
; 182  : 	return &pent->v; 

	mov	eax, DWORD PTR _pent$[ebp]
	add	eax, 128				; 00000080H
$LN1@VARS:

; 183  : }

	pop	ebp
	ret	0
?VARS@@YAPAUentvars_s@@PAUedict_s@@@Z ENDP		; VARS
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xashxt_v0.81_rev.1_with_sources\xashxt_v0.81_rev.1_src\server\util.h
;	COMDAT ?ENT@@YAPAUedict_s@@PBUentvars_s@@@Z
_TEXT	SEGMENT
_pev$ = 8						; size = 4
?ENT@@YAPAUedict_s@@PBUentvars_s@@@Z PROC		; ENT, COMDAT

; 151  : 	inline edict_t *ENT(const entvars_t *pev)	{ return DBG_EntOfVars(pev); }

	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR _pev$[ebp]
	push	eax
	call	?DBG_EntOfVars@@YAPAUedict_s@@PBUentvars_s@@@Z ; DBG_EntOfVars
	add	esp, 4
	pop	ebp
	ret	0
?ENT@@YAPAUedict_s@@PBUentvars_s@@@Z ENDP		; ENT
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??0IEntityFactory@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0IEntityFactory@@QAE@XZ PROC				; IEntityFactory::IEntityFactory, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7IEntityFactory@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0IEntityFactory@@QAE@XZ ENDP				; IEntityFactory::IEntityFactory
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xashxt_v0.81_rev.1_with_sources\xashxt_v0.81_rev.1_src\game_shared\utlarray.h
;	COMDAT ?ResetDbgInfo@?$CUtlArray@PADV?$CUtlMemory@PADH@@@@IAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?ResetDbgInfo@?$CUtlArray@PADV?$CUtlMemory@PADH@@@@IAEXXZ PROC ; CUtlArray<char *,CUtlMemory<char *,int> >::ResetDbgInfo, COMDAT
; _this$ = ecx

; 160  : 	{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 161  : 		m_pElements = Base();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Base@?$CUtlArray@PADV?$CUtlMemory@PADH@@@@QAEPAPADXZ ; CUtlArray<char *,CUtlMemory<char *,int> >::Base
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+16], eax

; 162  : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
?ResetDbgInfo@?$CUtlArray@PADV?$CUtlMemory@PADH@@@@IAEXXZ ENDP ; CUtlArray<char *,CUtlMemory<char *,int> >::ResetDbgInfo
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xashxt_v0.81_rev.1_with_sources\xashxt_v0.81_rev.1_src\game_shared\utlmemory.h
;	COMDAT ?ValidateGrowSize@?$CUtlMemory@PADH@@IAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?ValidateGrowSize@?$CUtlMemory@PADH@@IAEXXZ PROC	; CUtlMemory<char *,int>::ValidateGrowSize, COMDAT
; _this$ = ecx

; 148  : 	{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 149  : #ifdef _X360
; 150  : 		if ( m_nGrowSize && m_nGrowSize != EXTERNAL_BUFFER_MARKER )
; 151  : 		{
; 152  : 			// Max grow size at 128 bytes on XBOX
; 153  : 			const int MAX_GROW = 128;
; 154  : 			if ( m_nGrowSize * sizeof(T) > MAX_GROW )
; 155  : 			{
; 156  : 				m_nGrowSize = max( 1, MAX_GROW / sizeof(T) );
; 157  : 			}
; 158  : 		}
; 159  : #endif
; 160  : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
?ValidateGrowSize@?$CUtlMemory@PADH@@IAEXXZ ENDP	; CUtlMemory<char *,int>::ValidateGrowSize
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xashxt_v0.81_rev.1_with_sources\xashxt_v0.81_rev.1_src\game_shared\utlmemory.h
;	COMDAT ?IsReadOnly@?$CUtlMemory@PADH@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv66 = -4						; size = 4
?IsReadOnly@?$CUtlMemory@PADH@@QBE_NXZ PROC		; CUtlMemory<char *,int>::IsReadOnly, COMDAT
; _this$ = ecx

; 467  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 468  : 	return (m_nGrowSize == EXTERNAL_CONST_BUFFER_MARKER);

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+8], -2			; fffffffeH
	jne	SHORT $LN3@IsReadOnly
	mov	DWORD PTR tv66[ebp], 1
	jmp	SHORT $LN4@IsReadOnly
$LN3@IsReadOnly:
	mov	DWORD PTR tv66[ebp], 0
$LN4@IsReadOnly:
	mov	al, BYTE PTR tv66[ebp]

; 469  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?IsReadOnly@?$CUtlMemory@PADH@@QBE_NXZ ENDP		; CUtlMemory<char *,int>::IsReadOnly
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xashxt_v0.81_rev.1_with_sources\xashxt_v0.81_rev.1_src\game_shared\utlmemory.h
;	COMDAT ?IsExternallyAllocated@?$CUtlMemory@PADH@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv66 = -4						; size = 4
?IsExternallyAllocated@?$CUtlMemory@PADH@@QBE_NXZ PROC	; CUtlMemory<char *,int>::IsExternallyAllocated, COMDAT
; _this$ = ecx

; 457  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 458  : 	return (m_nGrowSize < 0);

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+8], 0
	jge	SHORT $LN3@IsExternal
	mov	DWORD PTR tv66[ebp], 1
	jmp	SHORT $LN4@IsExternal
$LN3@IsExternal:
	mov	DWORD PTR tv66[ebp], 0
$LN4@IsExternal:
	mov	al, BYTE PTR tv66[ebp]

; 459  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?IsExternallyAllocated@?$CUtlMemory@PADH@@QBE_NXZ ENDP	; CUtlMemory<char *,int>::IsExternallyAllocated
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xashxt_v0.81_rev.1_with_sources\xashxt_v0.81_rev.1_src\game_shared\utlmemory.h
;	COMDAT ?Purge@?$CUtlMemory@PADH@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Purge@?$CUtlMemory@PADH@@QAEXXZ PROC			; CUtlMemory<char *,int>::Purge, COMDAT
; _this$ = ecx

; 645  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 646  : 	if ( !IsExternallyAllocated() )

	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsExternallyAllocated@?$CUtlMemory@PADH@@QBE_NXZ ; CUtlMemory<char *,int>::IsExternallyAllocated
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN1@Purge

; 647  : 	{
; 648  : 		if (m_pMemory)

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx], 0
	je	SHORT $LN3@Purge

; 649  : 		{
; 650  : 			free( (void*)m_pMemory );

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	call	_free
	add	esp, 4

; 651  : 			m_pMemory = 0;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], 0
$LN3@Purge:

; 652  : 		}
; 653  : 		m_nAllocationCount = 0;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], 0
$LN1@Purge:

; 654  : 	}
; 655  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?Purge@?$CUtlMemory@PADH@@QAEXXZ ENDP			; CUtlMemory<char *,int>::Purge
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xashxt_v0.81_rev.1_with_sources\xashxt_v0.81_rev.1_src\game_shared\utlmemory.h
;	COMDAT ?Base@?$CUtlMemory@PADH@@QAEPAPADXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Base@?$CUtlMemory@PADH@@QAEPAPADXZ PROC		; CUtlMemory<char *,int>::Base, COMDAT
; _this$ = ecx

; 487  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 488  : 	assert( !IsReadOnly() );

	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsReadOnly@?$CUtlMemory@PADH@@QBE_NXZ	; CUtlMemory<char *,int>::IsReadOnly
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN3@Base
	push	488					; 000001e8H
	push	OFFSET ??_C@_1MO@LCPOAHHB@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAu?$AAs?$AAe?$AAr?$AA?2?$AAd@
	push	OFFSET ??_C@_1BM@PFNFCCHH@?$AA?$CB?$AAI?$AAs?$AAR?$AAe?$AAa?$AAd?$AAO?$AAn?$AAl?$AAy?$AA?$CI?$AA?$CJ@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN3@Base:

; 489  : 	return m_pMemory;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]

; 490  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?Base@?$CUtlMemory@PADH@@QAEPAPADXZ ENDP		; CUtlMemory<char *,int>::Base
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xashxt_v0.81_rev.1_with_sources\xashxt_v0.81_rev.1_src\game_shared\utlmemory.h
;	COMDAT ?IsIdxValid@?$CUtlMemory@PADH@@QBE_NH@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv67 = -4						; size = 4
_i$ = 8							; size = 4
?IsIdxValid@?$CUtlMemory@PADH@@QBE_NH@Z PROC		; CUtlMemory<char *,int>::IsIdxValid, COMDAT
; _this$ = ecx

; 520  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 521  : 	return ( ((int) i) >= 0 ) && ( ((int) i) < m_nAllocationCount );

	cmp	DWORD PTR _i$[ebp], 0
	jl	SHORT $LN3@IsIdxValid
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	cmp	ecx, DWORD PTR [eax+4]
	jge	SHORT $LN3@IsIdxValid
	mov	DWORD PTR tv67[ebp], 1
	jmp	SHORT $LN4@IsIdxValid
$LN3@IsIdxValid:
	mov	DWORD PTR tv67[ebp], 0
$LN4@IsIdxValid:
	mov	al, BYTE PTR tv67[ebp]

; 522  : }

	mov	esp, ebp
	pop	ebp
	ret	4
?IsIdxValid@?$CUtlMemory@PADH@@QBE_NH@Z ENDP		; CUtlMemory<char *,int>::IsIdxValid
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xashxt_v0.81_rev.1_with_sources\xashxt_v0.81_rev.1_src\game_shared\utlmemory.h
;	COMDAT ??A?$CUtlMemory@PADH@@QAEAAPADH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_i$ = 8							; size = 4
??A?$CUtlMemory@PADH@@QAEAAPADH@Z PROC			; CUtlMemory<char *,int>::operator[], COMDAT
; _this$ = ecx

; 423  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 424  : 	assert( !IsReadOnly() );

	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsReadOnly@?$CUtlMemory@PADH@@QBE_NXZ	; CUtlMemory<char *,int>::IsReadOnly
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN3@operator
	push	424					; 000001a8H
	push	OFFSET ??_C@_1MO@LCPOAHHB@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAu?$AAs?$AAe?$AAr?$AA?2?$AAd@
	push	OFFSET ??_C@_1BM@PFNFCCHH@?$AA?$CB?$AAI?$AAs?$AAR?$AAe?$AAa?$AAd?$AAO?$AAn?$AAl?$AAy?$AA?$CI?$AA?$CJ@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN3@operator:

; 425  : 	assert( IsIdxValid(i) );

	mov	edx, DWORD PTR _i$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsIdxValid@?$CUtlMemory@PADH@@QBE_NH@Z	; CUtlMemory<char *,int>::IsIdxValid
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN4@operator
	push	425					; 000001a9H
	push	OFFSET ??_C@_1MO@LCPOAHHB@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAu?$AAs?$AAe?$AAr?$AA?2?$AAd@
	push	OFFSET ??_C@_1BM@CKILBAKK@?$AAI?$AAs?$AAI?$AAd?$AAx?$AAV?$AAa?$AAl?$AAi?$AAd?$AA?$CI?$AAi?$AA?$CJ@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN4@operator:

; 426  : 	return m_pMemory[i];

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _i$[ebp]
	lea	eax, DWORD PTR [eax+ecx*4]

; 427  : }

	mov	esp, ebp
	pop	ebp
	ret	4
??A?$CUtlMemory@PADH@@QAEAAPADH@Z ENDP			; CUtlMemory<char *,int>::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xashxt_v0.81_rev.1_with_sources\xashxt_v0.81_rev.1_src\game_shared\utlmemory.h
;	COMDAT ??1?$CUtlMemory@PADH@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$CUtlMemory@PADH@@QAE@XZ PROC			; CUtlMemory<char *,int>::~CUtlMemory<char *,int>, COMDAT
; _this$ = ecx

; 322  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1?$CUtlMemory@PADH@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 323  : 	Purge();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Purge@?$CUtlMemory@PADH@@QAEXXZ	; CUtlMemory<char *,int>::Purge

; 324  : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??1?$CUtlMemory@PADH@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1?$CUtlMemory@PADH@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1?$CUtlMemory@PADH@@QAE@XZ ENDP			; CUtlMemory<char *,int>::~CUtlMemory<char *,int>
; Function compile flags: /Odtp
; File c:\users\user\downloads\xashxt_v0.81_rev.1_with_sources\xashxt_v0.81_rev.1_src\game_shared\utlmemory.h
;	COMDAT ??0?$CUtlMemory@PADH@@QAE@HH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_nGrowSize$ = 8						; size = 4
_nInitAllocationCount$ = 12				; size = 4
??0?$CUtlMemory@PADH@@QAE@HH@Z PROC			; CUtlMemory<char *,int>::CUtlMemory<char *,int>, COMDAT
; _this$ = ecx

; 295  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 293  : CUtlMemory<T,I>::CUtlMemory( int nGrowSize, int nInitAllocationCount ) : m_pMemory(0), 

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0

; 294  : 	m_nAllocationCount( nInitAllocationCount ), m_nGrowSize( nGrowSize )

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _nInitAllocationCount$[ebp]
	mov	DWORD PTR [ecx+4], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _nGrowSize$[ebp]
	mov	DWORD PTR [eax+8], ecx

; 296  : 	ValidateGrowSize();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?ValidateGrowSize@?$CUtlMemory@PADH@@IAEXXZ ; CUtlMemory<char *,int>::ValidateGrowSize

; 297  : 	assert( nGrowSize >= 0 );

	cmp	DWORD PTR _nGrowSize$[ebp], 0
	jge	SHORT $LN4@CUtlMemory
	push	297					; 00000129H
	push	OFFSET $SG77110
	push	OFFSET $SG77111
	call	__wassert
	add	esp, 12					; 0000000cH
$LN4@CUtlMemory:

; 298  : 	if (m_nAllocationCount)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 0
	je	SHORT $LN1@CUtlMemory

; 299  : 	{
; 300  : 		m_pMemory = (T*)malloc( m_nAllocationCount * sizeof(T) );

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	shl	edx, 2
	push	edx
	call	_malloc
	add	esp, 4
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], eax
$LN1@CUtlMemory:

; 301  : 	}
; 302  : }

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	8
??0?$CUtlMemory@PADH@@QAE@HH@Z ENDP			; CUtlMemory<char *,int>::CUtlMemory<char *,int>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xashxt_v0.81_rev.1_with_sources\xashxt_v0.81_rev.1_src\game_shared\utlarray.h
;	COMDAT ?Purge@?$CUtlArray@PADV?$CUtlMemory@PADH@@@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Purge@?$CUtlArray@PADV?$CUtlMemory@PADH@@@@QAEXXZ PROC	; CUtlArray<char *,CUtlMemory<char *,int> >::Purge, COMDAT
; _this$ = ecx

; 742  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 743  : 	RemoveAll();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?RemoveAll@?$CUtlArray@PADV?$CUtlMemory@PADH@@@@QAEXXZ ; CUtlArray<char *,CUtlMemory<char *,int> >::RemoveAll

; 744  : 	m_Memory.Purge();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Purge@?$CUtlMemory@PADH@@QAEXXZ	; CUtlMemory<char *,int>::Purge

; 745  : 	ResetDbgInfo();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?ResetDbgInfo@?$CUtlArray@PADV?$CUtlMemory@PADH@@@@IAEXXZ ; CUtlArray<char *,CUtlMemory<char *,int> >::ResetDbgInfo

; 746  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?Purge@?$CUtlArray@PADV?$CUtlMemory@PADH@@@@QAEXXZ ENDP	; CUtlArray<char *,CUtlMemory<char *,int> >::Purge
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xashxt_v0.81_rev.1_with_sources\xashxt_v0.81_rev.1_src\game_shared\utlarray.h
;	COMDAT ?RemoveAll@?$CUtlArray@PADV?$CUtlMemory@PADH@@@@QAEXXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
_i$1 = -4						; size = 4
?RemoveAll@?$CUtlArray@PADV?$CUtlMemory@PADH@@@@QAEXXZ PROC ; CUtlArray<char *,CUtlMemory<char *,int> >::RemoveAll, COMDAT
; _this$ = ecx

; 726  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 727  : 	for (int i = m_Size; --i >= 0; )

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR _i$1[ebp], ecx
$LN4@RemoveAll:
	mov	edx, DWORD PTR _i$1[ebp]
	sub	edx, 1
	mov	DWORD PTR _i$1[ebp], edx
	js	SHORT $LN3@RemoveAll

; 728  : 	{
; 729  : 		Destruct(&Element(i));

	mov	eax, DWORD PTR _i$1[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Element@?$CUtlArray@PADV?$CUtlMemory@PADH@@@@QAEAAPADH@Z ; CUtlArray<char *,CUtlMemory<char *,int> >::Element
	push	eax
	call	??$Destruct@PAD@@YAXPAPAD@Z		; Destruct<char *>
	add	esp, 4

; 730  : 	}

	jmp	SHORT $LN4@RemoveAll
$LN3@RemoveAll:

; 731  : 
; 732  : 	m_Size = 0;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+12], 0

; 733  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?RemoveAll@?$CUtlArray@PADV?$CUtlMemory@PADH@@@@QAEXXZ ENDP ; CUtlArray<char *,CUtlMemory<char *,int> >::RemoveAll
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xashxt_v0.81_rev.1_with_sources\xashxt_v0.81_rev.1_src\game_shared\utlarray.h
;	COMDAT ?Count@?$CUtlArray@PADV?$CUtlMemory@PADH@@@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Count@?$CUtlArray@PADV?$CUtlMemory@PADH@@@@QBEHXZ PROC	; CUtlArray<char *,CUtlMemory<char *,int> >::Count, COMDAT
; _this$ = ecx

; 344  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 345  : 	return m_Size;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+12]

; 346  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?Count@?$CUtlArray@PADV?$CUtlMemory@PADH@@@@QBEHXZ ENDP	; CUtlArray<char *,CUtlMemory<char *,int> >::Count
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xashxt_v0.81_rev.1_with_sources\xashxt_v0.81_rev.1_src\game_shared\utlarray.h
;	COMDAT ?Base@?$CUtlArray@PADV?$CUtlMemory@PADH@@@@QAEPAPADXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Base@?$CUtlArray@PADV?$CUtlMemory@PADH@@@@QAEPAPADXZ PROC ; CUtlArray<char *,CUtlMemory<char *,int> >::Base, COMDAT
; _this$ = ecx

; 60   : 	T* Base()								{ return m_Memory.Base(); }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Base@?$CUtlMemory@PADH@@QAEPAPADXZ	; CUtlMemory<char *,int>::Base
	mov	esp, ebp
	pop	ebp
	ret	0
?Base@?$CUtlArray@PADV?$CUtlMemory@PADH@@@@QAEPAPADXZ ENDP ; CUtlArray<char *,CUtlMemory<char *,int> >::Base
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xashxt_v0.81_rev.1_with_sources\xashxt_v0.81_rev.1_src\game_shared\utlarray.h
;	COMDAT ?Element@?$CUtlArray@PADV?$CUtlMemory@PADH@@@@QAEAAPADH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_i$ = 8							; size = 4
?Element@?$CUtlArray@PADV?$CUtlMemory@PADH@@@@QAEAAPADH@Z PROC ; CUtlArray<char *,CUtlMemory<char *,int> >::Element, COMDAT
; _this$ = ecx

; 294  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 295  : 	return m_Memory[ i ];

	mov	eax, DWORD PTR _i$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??A?$CUtlMemory@PADH@@QAEAAPADH@Z	; CUtlMemory<char *,int>::operator[]

; 296  : }

	mov	esp, ebp
	pop	ebp
	ret	4
?Element@?$CUtlArray@PADV?$CUtlMemory@PADH@@@@QAEAAPADH@Z ENDP ; CUtlArray<char *,CUtlMemory<char *,int> >::Element
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xashxt_v0.81_rev.1_with_sources\xashxt_v0.81_rev.1_src\game_shared\utlarray.h
;	COMDAT ??A?$CUtlArray@PADV?$CUtlMemory@PADH@@@@QAEAAPADH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_i$ = 8							; size = 4
??A?$CUtlArray@PADV?$CUtlMemory@PADH@@@@QAEAAPADH@Z PROC ; CUtlArray<char *,CUtlMemory<char *,int> >::operator[], COMDAT
; _this$ = ecx

; 282  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 283  : 	return m_Memory[ i ];

	mov	eax, DWORD PTR _i$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??A?$CUtlMemory@PADH@@QAEAAPADH@Z	; CUtlMemory<char *,int>::operator[]

; 284  : }

	mov	esp, ebp
	pop	ebp
	ret	4
??A?$CUtlArray@PADV?$CUtlMemory@PADH@@@@QAEAAPADH@Z ENDP ; CUtlArray<char *,CUtlMemory<char *,int> >::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xashxt_v0.81_rev.1_with_sources\xashxt_v0.81_rev.1_src\game_shared\utlarray.h
;	COMDAT ??1?$CUtlArray@PADV?$CUtlMemory@PADH@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$CUtlArray@PADV?$CUtlMemory@PADH@@@@QAE@XZ PROC	; CUtlArray<char *,CUtlMemory<char *,int> >::~CUtlArray<char *,CUtlMemory<char *,int> >, COMDAT
; _this$ = ecx

; 260  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1?$CUtlArray@PADV?$CUtlMemory@PADH@@@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 261  : 	Purge();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Purge@?$CUtlArray@PADV?$CUtlMemory@PADH@@@@QAEXXZ ; CUtlArray<char *,CUtlMemory<char *,int> >::Purge

; 262  : }

	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$CUtlMemory@PADH@@QAE@XZ		; CUtlMemory<char *,int>::~CUtlMemory<char *,int>
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??1?$CUtlArray@PADV?$CUtlMemory@PADH@@@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1?$CUtlArray@PADV?$CUtlMemory@PADH@@@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1?$CUtlArray@PADV?$CUtlMemory@PADH@@@@QAE@XZ ENDP	; CUtlArray<char *,CUtlMemory<char *,int> >::~CUtlArray<char *,CUtlMemory<char *,int> >
; Function compile flags: /Odtp
; File c:\users\user\downloads\xashxt_v0.81_rev.1_with_sources\xashxt_v0.81_rev.1_src\game_shared\utlarray.h
;	COMDAT ??0?$CUtlArray@PADV?$CUtlMemory@PADH@@@@QAE@HH@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_growSize$ = 8						; size = 4
_initSize$ = 12						; size = 4
??0?$CUtlArray@PADV?$CUtlMemory@PADH@@@@QAE@HH@Z PROC	; CUtlArray<char *,CUtlMemory<char *,int> >::CUtlArray<char *,CUtlMemory<char *,int> >, COMDAT
; _this$ = ecx

; 247  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0?$CUtlArray@PADV?$CUtlMemory@PADH@@@@QAE@HH@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 246  : 	m_Memory(growSize, initSize), m_Size(0)

	mov	eax, DWORD PTR _initSize$[ebp]
	push	eax
	mov	ecx, DWORD PTR _growSize$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$CUtlMemory@PADH@@QAE@HH@Z		; CUtlMemory<char *,int>::CUtlMemory<char *,int>
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+12], 0

; 248  : 	ResetDbgInfo();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?ResetDbgInfo@?$CUtlArray@PADV?$CUtlMemory@PADH@@@@IAEXXZ ; CUtlArray<char *,CUtlMemory<char *,int> >::ResetDbgInfo

; 249  : }

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$CUtlArray@PADV?$CUtlMemory@PADH@@@@QAE@HH@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$CUtlMemory@PADH@@QAE@XZ		; CUtlMemory<char *,int>::~CUtlMemory<char *,int>
__ehhandler$??0?$CUtlArray@PADV?$CUtlMemory@PADH@@@@QAE@HH@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0?$CUtlArray@PADV?$CUtlMemory@PADH@@@@QAE@HH@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0?$CUtlArray@PADV?$CUtlMemory@PADH@@@@QAE@HH@Z ENDP	; CUtlArray<char *,CUtlMemory<char *,int> >::CUtlArray<char *,CUtlMemory<char *,int> >
; Function compile flags: /Odtp
; File c:\users\user\downloads\xashxt_v0.81_rev.1_with_sources\xashxt_v0.81_rev.1_src\common\datamap.h
;	COMDAT ??1CDatadescGeneratedNameHolder@@QAE@XZ
_TEXT	SEGMENT
$T2 = -24						; size = 4
_this$ = -20						; size = 4
_i$3 = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1CDatadescGeneratedNameHolder@@QAE@XZ PROC		; CDatadescGeneratedNameHolder::~CDatadescGeneratedNameHolder, COMDAT
; _this$ = ecx

; 197  : 	{

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1CDatadescGeneratedNameHolder@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 12					; 0000000cH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 198  : 		for( int i = 0; i < m_Names.Count(); i++ )

	mov	DWORD PTR _i$3[ebp], 0
	jmp	SHORT $LN4@CDatadescG
$LN2@CDatadescG:
	mov	eax, DWORD PTR _i$3[ebp]
	add	eax, 1
	mov	DWORD PTR _i$3[ebp], eax
$LN4@CDatadescG:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	?Count@?$CUtlArray@PADV?$CUtlMemory@PADH@@@@QBEHXZ ; CUtlArray<char *,CUtlMemory<char *,int> >::Count
	cmp	DWORD PTR _i$3[ebp], eax
	jge	SHORT $LN1@CDatadescG

; 199  : 		{
; 200  : 			delete m_Names[i];

	mov	ecx, DWORD PTR _i$3[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??A?$CUtlArray@PADV?$CUtlMemory@PADH@@@@QAEAAPADH@Z ; CUtlArray<char *,CUtlMemory<char *,int> >::operator[]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR $T2[ebp], edx
	push	1
	mov	eax, DWORD PTR $T2[ebp]
	push	eax
	call	??3@YAXPAXI@Z				; operator delete
	add	esp, 8

; 201  : 		}

	jmp	SHORT $LN2@CDatadescG
$LN1@CDatadescG:

; 202  : 	}

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??1?$CUtlArray@PADV?$CUtlMemory@PADH@@@@QAE@XZ ; CUtlArray<char *,CUtlMemory<char *,int> >::~CUtlArray<char *,CUtlMemory<char *,int> >
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??1CDatadescGeneratedNameHolder@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-16]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1CDatadescGeneratedNameHolder@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1CDatadescGeneratedNameHolder@@QAE@XZ ENDP		; CDatadescGeneratedNameHolder::~CDatadescGeneratedNameHolder
; Function compile flags: /Odtp
; File c:\users\user\downloads\xashxt_v0.81_rev.1_with_sources\xashxt_v0.81_rev.1_src\common\datamap.h
;	COMDAT ??0CDatadescGeneratedNameHolder@@QAE@PBD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_pszBase$ = 8						; size = 4
??0CDatadescGeneratedNameHolder@@QAE@PBD@Z PROC		; CDatadescGeneratedNameHolder::CDatadescGeneratedNameHolder, COMDAT
; _this$ = ecx

; 192  : 	{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 191  : 	CDatadescGeneratedNameHolder( const char *pszBase ) : m_pszBase(pszBase)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _pszBase$[ebp]
	mov	DWORD PTR [eax], ecx

; 192  : 	{

	push	0
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??0?$CUtlArray@PADV?$CUtlMemory@PADH@@@@QAE@HH@Z ; CUtlArray<char *,CUtlMemory<char *,int> >::CUtlArray<char *,CUtlMemory<char *,int> >

; 193  : 		m_nLenBase = strlen( m_pszBase ) + 2;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	call	_strlen
	add	esp, 4
	add	eax, 2
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax

; 194  : 	}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0CDatadescGeneratedNameHolder@@QAE@PBD@Z ENDP		; CDatadescGeneratedNameHolder::CDatadescGeneratedNameHolder
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xashxt_v0.81_rev.1_with_sources\xashxt_v0.81_rev.1_src\server\enginecallback.h
;	COMDAT ?GET_PRIVATE@@YAPAXPAUedict_s@@@Z
_TEXT	SEGMENT
_pent$ = 8						; size = 4
?GET_PRIVATE@@YAPAXPAUedict_s@@@Z PROC			; GET_PRIVATE, COMDAT

; 101  : {

	push	ebp
	mov	ebp, esp

; 102  : 	if ( pent )

	cmp	DWORD PTR _pent$[ebp], 0
	je	SHORT $LN2@GET_PRIVAT

; 103  : 		return pent->pvPrivateData;

	mov	eax, DWORD PTR _pent$[ebp]
	mov	eax, DWORD PTR [eax+124]
	jmp	SHORT $LN1@GET_PRIVAT
$LN2@GET_PRIVAT:

; 104  : 	return NULL;

	xor	eax, eax
$LN1@GET_PRIVAT:

; 105  : }

	pop	ebp
	ret	0
?GET_PRIVATE@@YAPAXPAUedict_s@@@Z ENDP			; GET_PRIVATE
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xashxt_v0.81_rev.1_with_sources\xashxt_v0.81_rev.1_src\server\enginecallback.h
;	COMDAT ?MESSAGE_BEGIN@@YAXHHPBMPAUedict_s@@@Z
_TEXT	SEGMENT
_msg_dest$ = 8						; size = 4
_msg_type$ = 12						; size = 4
_pOrigin$ = 16						; size = 4
_ed$ = 20						; size = 4
?MESSAGE_BEGIN@@YAXHHPBMPAUedict_s@@@Z PROC		; MESSAGE_BEGIN, COMDAT

; 72   : inline void MESSAGE_BEGIN( int msg_dest, int msg_type, const float *pOrigin = NULL, edict_t *ed = NULL ) {

	push	ebp
	mov	ebp, esp

; 73   : 	(*g_engfuncs.pfnMessageBegin)(msg_dest, msg_type, pOrigin, ed);

	mov	eax, DWORD PTR _ed$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pOrigin$[ebp]
	push	ecx
	mov	edx, DWORD PTR _msg_type$[ebp]
	push	edx
	mov	eax, DWORD PTR _msg_dest$[ebp]
	push	eax
	call	DWORD PTR ?g_engfuncs@@3Uenginefuncs_s@@A+184
	add	esp, 16					; 00000010H

; 74   : }

	pop	ebp
	ret	0
?MESSAGE_BEGIN@@YAXHHPBMPAUedict_s@@@Z ENDP		; MESSAGE_BEGIN
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??0gametrace_s@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0gametrace_s@@QAE@XZ PROC				; gametrace_s::gametrace_s, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 20					; 00000014H
	call	??0Vector@@QAE@XZ			; Vector::Vector
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 36					; 00000024H
	call	??0Vector@@QAE@XZ			; Vector::Vector
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0gametrace_s@@QAE@XZ ENDP				; gametrace_s::gametrace_s
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??0matrix4x4@@QAE@ABV0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??0matrix4x4@@QAE@ABV0@@Z PROC				; matrix4x4::matrix4x4, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	push	OFFSET ??0Vector4D@@QAE@ABV0@@Z		; Vector4D::Vector4D
	push	4
	push	16					; 00000010H
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??__G@YGXPAX0IIP6EPAX00@Z@Z
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0matrix4x4@@QAE@ABV0@@Z ENDP				; matrix4x4::matrix4x4
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xashxt_v0.81_rev.1_with_sources\xashxt_v0.81_rev.1_src\game_shared\matrix.h
;	COMDAT ?GetStudioTransform@matrix4x4@@QAEXAAVVector@@AAVRadian@@@Z
_TEXT	SEGMENT
$T1 = -24						; size = 12
tv321 = -12						; size = 4
_xyDist$ = -8						; size = 4
_this$ = -4						; size = 4
_position$ = 8						; size = 4
_angles$ = 12						; size = 4
?GetStudioTransform@matrix4x4@@QAEXAAVVector@@AAVRadian@@@Z PROC ; matrix4x4::GetStudioTransform, COMDAT
; _this$ = ecx

; 1006 : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 1007 : 		float xyDist = sqrt( mat[0][0] * mat[0][0] + mat[0][1] * mat[0][1] );

	mov	eax, 16					; 00000010H
	imul	ecx, eax, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	esi, eax
	mov	ecx, 4
	imul	edi, ecx, 0
	mov	edx, 16					; 00000010H
	imul	ecx, edx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	ecx, 4
	imul	edx, ecx, 0
	movss	xmm0, DWORD PTR [esi+edi]
	mulss	xmm0, DWORD PTR [eax+edx]
	mov	eax, 16					; 00000010H
	imul	ecx, eax, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv321[ebp], xmm0
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	esi, eax
	mov	edi, 4
	shl	edi, 0
	mov	ecx, 16					; 00000010H
	imul	ecx, ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	edx, 4
	shl	edx, 0
	movss	xmm0, DWORD PTR [esi+edi]
	mulss	xmm0, DWORD PTR [eax+edx]
	movss	xmm1, DWORD PTR tv321[ebp]
	addss	xmm1, xmm0
	cvtss2sd xmm0, xmm1
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	call	_sqrt
	add	esp, 8
	fstp	DWORD PTR _xyDist$[ebp]

; 1008 : 
; 1009 : 		// enough here to get angles?
; 1010 : 		if( xyDist > 0.001f )

	movss	xmm0, DWORD PTR _xyDist$[ebp]
	comiss	xmm0, DWORD PTR __real@3a83126f
	jbe	$LN2@GetStudioT

; 1011 : 		{
; 1012 : 			angles.y = atan2( -mat[0][2], xyDist );

	cvtss2sd xmm0, DWORD PTR _xyDist$[ebp]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	mov	eax, 16					; 00000010H
	imul	ecx, eax, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	ecx, 4
	shl	ecx, 1
	movss	xmm0, DWORD PTR [eax+ecx]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	cvtss2sd xmm0, xmm0
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	call	_atan2
	add	esp, 16					; 00000010H
	mov	edx, DWORD PTR _angles$[ebp]
	fstp	DWORD PTR [edx+4]

; 1013 : 			angles.z = atan2( mat[0][1], mat[0][0] );

	mov	eax, 16					; 00000010H
	imul	ecx, eax, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	ecx, 4
	imul	edx, ecx, 0
	cvtss2sd xmm0, DWORD PTR [eax+edx]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	mov	eax, 16					; 00000010H
	imul	ecx, eax, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	ecx, 4
	shl	ecx, 0
	cvtss2sd xmm0, DWORD PTR [eax+ecx]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	call	_atan2
	add	esp, 16					; 00000010H
	mov	edx, DWORD PTR _angles$[ebp]
	fstp	DWORD PTR [edx+8]

; 1014 : 			angles.x = atan2( mat[1][2], mat[2][2] );

	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	ecx, 4
	shl	ecx, 1
	cvtss2sd xmm0, DWORD PTR [eax+ecx]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	edx, 4
	shl	edx, 1
	cvtss2sd xmm0, DWORD PTR [eax+edx]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	call	_atan2
	add	esp, 16					; 00000010H
	mov	eax, DWORD PTR _angles$[ebp]
	fstp	DWORD PTR [eax]

; 1015 : 		}
; 1016 : 		else	// forward is mostly Z, gimbal lock

	jmp	$LN3@GetStudioT
$LN2@GetStudioT:

; 1017 : 		{
; 1018 : 			angles.y = atan2( -mat[0][2], xyDist );

	cvtss2sd xmm0, DWORD PTR _xyDist$[ebp]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	mov	ecx, 16					; 00000010H
	imul	ecx, ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	edx, 4
	shl	edx, 1
	movss	xmm0, DWORD PTR [eax+edx]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	cvtss2sd xmm0, xmm0
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	call	_atan2
	add	esp, 16					; 00000010H
	mov	eax, DWORD PTR _angles$[ebp]
	fstp	DWORD PTR [eax+4]

; 1019 : 			angles.z = atan2( -mat[1][0], mat[1][1] );

	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	ecx, 4
	shl	ecx, 0
	cvtss2sd xmm0, DWORD PTR [eax+ecx]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	edx, 4
	imul	ecx, edx, 0
	movss	xmm0, DWORD PTR [eax+ecx]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	cvtss2sd xmm0, xmm0
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	call	_atan2
	add	esp, 16					; 00000010H
	mov	edx, DWORD PTR _angles$[ebp]
	fstp	DWORD PTR [edx+8]

; 1020 : 			angles.x = 0.0f;

	mov	eax, DWORD PTR _angles$[ebp]
	xorps	xmm0, xmm0
	movss	DWORD PTR [eax], xmm0
$LN3@GetStudioT:

; 1021 : 		}
; 1022 : 
; 1023 : 		position = mat[3];

	lea	ecx, DWORD PTR $T1[ebp]
	push	ecx
	mov	edx, 16					; 00000010H
	imul	ecx, edx, 3
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector4D@@QAE?AVVector@@XZ		; Vector4D::operator Vector
	mov	eax, DWORD PTR _position$[ebp]
	mov	ecx, DWORD PTR $T1[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR $T1[ebp+4]
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR $T1[ebp+8]
	mov	DWORD PTR [eax+8], ecx

; 1024 : 	}

	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	8
?GetStudioTransform@matrix4x4@@QAEXAAVVector@@AAVRadian@@@Z ENDP ; matrix4x4::GetStudioTransform
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xashxt_v0.81_rev.1_with_sources\xashxt_v0.81_rev.1_src\game_shared\matrix.h
;	COMDAT ??0matrix4x4@@QAE@ABVVector@@0M@Z
_TEXT	SEGMENT
tv1056 = -116						; size = 4
tv1054 = -112						; size = 4
tv1052 = -108						; size = 4
tv1050 = -104						; size = 4
tv1048 = -100						; size = 4
tv1046 = -96						; size = 4
tv1044 = -92						; size = 4
tv1042 = -88						; size = 4
tv1040 = -84						; size = 4
tv1038 = -80						; size = 4
tv1036 = -76						; size = 4
tv1034 = -72						; size = 4
tv1032 = -68						; size = 4
tv1030 = -64						; size = 4
tv1028 = -60						; size = 4
tv1026 = -56						; size = 4
tv1024 = -52						; size = 4
tv1022 = -48						; size = 4
tv1020 = -44						; size = 4
tv1018 = -40						; size = 4
tv1016 = -36						; size = 4
_cr$ = -32						; size = 4
_sr$ = -28						; size = 4
_cp$ = -24						; size = 4
_sp$ = -20						; size = 4
_angle$ = -16						; size = 4
_cy$ = -12						; size = 4
_sy$ = -8						; size = 4
_this$ = -4						; size = 4
_origin$ = 8						; size = 4
_angles$ = 12						; size = 4
_scale$ = 16						; size = 4
??0matrix4x4@@QAE@ABVVector@@0M@Z PROC			; matrix4x4::matrix4x4, COMDAT
; _this$ = ecx

; 690  : 	_forceinline matrix4x4( const Vector &origin, const Vector &angles, float scale = 1.0f )

	push	ebp
	mov	ebp, esp
	sub	esp, 116				; 00000074H
	mov	DWORD PTR _this$[ebp], ecx
	push	OFFSET ??0Vector4D@@QAE@XZ		; Vector4D::Vector4D
	push	4
	push	16					; 00000010H
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??_H@YGXPAXIIP6EPAX0@Z@Z

; 691  : 	{
; 692  : 		float	angle, sr, sp, sy, cr, cp, cy;
; 693  : 
; 694  : 		if( angles[ROLL] )

	mov	ecx, DWORD PTR _angles$[ebp]
	call	??BVector@@QBEPBMXZ			; Vector::operator float const *
	mov	ecx, 4
	shl	ecx, 1
	movss	xmm0, DWORD PTR [eax+ecx]
	ucomiss	xmm0, DWORD PTR __real@00000000
	lahf
	test	ah, 68					; 00000044H
	jnp	$LN2@matrix4x4

; 695  : 		{
; 696  : 			angle = angles[YAW] * (M_PI*2 / 360);

	mov	ecx, DWORD PTR _angles$[ebp]
	call	??BVector@@QBEPBMXZ			; Vector::operator float const *
	mov	edx, 4
	shl	edx, 0
	cvtss2sd xmm0, DWORD PTR [eax+edx]
	mulsd	xmm0, QWORD PTR __real@3f91df46a2529d39
	cvtsd2ss xmm0, xmm0
	movss	DWORD PTR _angle$[ebp], xmm0

; 697  : 			SinCos( angle, &sy, &cy );

	lea	eax, DWORD PTR _cy$[ebp]
	push	eax
	lea	ecx, DWORD PTR _sy$[ebp]
	push	ecx
	push	ecx
	movss	xmm0, DWORD PTR _angle$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	?SinCos@@YAXMPAM0@Z			; SinCos
	add	esp, 12					; 0000000cH

; 698  : 			angle = angles[PITCH] * (M_PI*2 / 360);

	mov	ecx, DWORD PTR _angles$[ebp]
	call	??BVector@@QBEPBMXZ			; Vector::operator float const *
	mov	edx, 4
	imul	ecx, edx, 0
	cvtss2sd xmm0, DWORD PTR [eax+ecx]
	mulsd	xmm0, QWORD PTR __real@3f91df46a2529d39
	cvtsd2ss xmm0, xmm0
	movss	DWORD PTR _angle$[ebp], xmm0

; 699  : 			SinCos( angle, &sp, &cp );

	lea	edx, DWORD PTR _cp$[ebp]
	push	edx
	lea	eax, DWORD PTR _sp$[ebp]
	push	eax
	push	ecx
	movss	xmm0, DWORD PTR _angle$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	?SinCos@@YAXMPAM0@Z			; SinCos
	add	esp, 12					; 0000000cH

; 700  : 			angle = angles[ROLL] * (M_PI*2 / 360);

	mov	ecx, DWORD PTR _angles$[ebp]
	call	??BVector@@QBEPBMXZ			; Vector::operator float const *
	mov	ecx, 4
	shl	ecx, 1
	cvtss2sd xmm0, DWORD PTR [eax+ecx]
	mulsd	xmm0, QWORD PTR __real@3f91df46a2529d39
	cvtsd2ss xmm0, xmm0
	movss	DWORD PTR _angle$[ebp], xmm0

; 701  : 			SinCos( angle, &sr, &cr );

	lea	edx, DWORD PTR _cr$[ebp]
	push	edx
	lea	eax, DWORD PTR _sr$[ebp]
	push	eax
	push	ecx
	movss	xmm0, DWORD PTR _angle$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	?SinCos@@YAXMPAM0@Z			; SinCos
	add	esp, 12					; 0000000cH

; 702  : 
; 703  : 			mat[0][0] = (cp*cy) * scale;

	movss	xmm0, DWORD PTR _cp$[ebp]
	mulss	xmm0, DWORD PTR _cy$[ebp]
	mulss	xmm0, DWORD PTR _scale$[ebp]
	mov	ecx, 16					; 00000010H
	imul	ecx, ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv1016[ebp], xmm0
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	edx, 4
	imul	ecx, edx, 0
	movss	xmm0, DWORD PTR tv1016[ebp]
	movss	DWORD PTR [eax+ecx], xmm0

; 704  : 			mat[1][0] = (sr*sp*cy+cr*-sy) * scale;

	movss	xmm0, DWORD PTR _sr$[ebp]
	mulss	xmm0, DWORD PTR _sp$[ebp]
	mulss	xmm0, DWORD PTR _cy$[ebp]
	movss	xmm1, DWORD PTR _sy$[ebp]
	xorps	xmm1, DWORD PTR __xmm@80000000800000008000000080000000
	mulss	xmm1, DWORD PTR _cr$[ebp]
	addss	xmm0, xmm1
	mulss	xmm0, DWORD PTR _scale$[ebp]
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv1018[ebp], xmm0
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	edx, 4
	imul	ecx, edx, 0
	movss	xmm0, DWORD PTR tv1018[ebp]
	movss	DWORD PTR [eax+ecx], xmm0

; 705  : 			mat[2][0] = (cr*sp*cy+-sr*-sy) * scale;

	movss	xmm0, DWORD PTR _cr$[ebp]
	mulss	xmm0, DWORD PTR _sp$[ebp]
	mulss	xmm0, DWORD PTR _cy$[ebp]
	movss	xmm1, DWORD PTR _sr$[ebp]
	xorps	xmm1, DWORD PTR __xmm@80000000800000008000000080000000
	movss	xmm2, DWORD PTR _sy$[ebp]
	xorps	xmm2, DWORD PTR __xmm@80000000800000008000000080000000
	mulss	xmm1, xmm2
	addss	xmm0, xmm1
	mulss	xmm0, DWORD PTR _scale$[ebp]
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv1020[ebp], xmm0
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	edx, 4
	imul	ecx, edx, 0
	movss	xmm0, DWORD PTR tv1020[ebp]
	movss	DWORD PTR [eax+ecx], xmm0

; 706  : 			mat[3][0] = origin.x;

	mov	edx, 16					; 00000010H
	imul	ecx, edx, 3
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	ecx, 4
	imul	edx, ecx, 0
	mov	ecx, DWORD PTR _origin$[ebp]
	mov	ecx, DWORD PTR [ecx]
	mov	DWORD PTR [eax+edx], ecx

; 707  : 			mat[0][1] = (cp*sy) * scale;

	movss	xmm0, DWORD PTR _cp$[ebp]
	mulss	xmm0, DWORD PTR _sy$[ebp]
	mulss	xmm0, DWORD PTR _scale$[ebp]
	mov	edx, 16					; 00000010H
	imul	ecx, edx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv1022[ebp], xmm0
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	ecx, 4
	shl	ecx, 0
	movss	xmm0, DWORD PTR tv1022[ebp]
	movss	DWORD PTR [eax+ecx], xmm0

; 708  : 			mat[1][1] = (sr*sp*sy+cr*cy) * scale;

	movss	xmm0, DWORD PTR _sr$[ebp]
	mulss	xmm0, DWORD PTR _sp$[ebp]
	mulss	xmm0, DWORD PTR _sy$[ebp]
	movss	xmm1, DWORD PTR _cr$[ebp]
	mulss	xmm1, DWORD PTR _cy$[ebp]
	addss	xmm0, xmm1
	mulss	xmm0, DWORD PTR _scale$[ebp]
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv1024[ebp], xmm0
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	edx, 4
	shl	edx, 0
	movss	xmm0, DWORD PTR tv1024[ebp]
	movss	DWORD PTR [eax+edx], xmm0

; 709  : 			mat[2][1] = (cr*sp*sy+-sr*cy) * scale;

	movss	xmm0, DWORD PTR _cr$[ebp]
	mulss	xmm0, DWORD PTR _sp$[ebp]
	mulss	xmm0, DWORD PTR _sy$[ebp]
	movss	xmm1, DWORD PTR _sr$[ebp]
	xorps	xmm1, DWORD PTR __xmm@80000000800000008000000080000000
	mulss	xmm1, DWORD PTR _cy$[ebp]
	addss	xmm0, xmm1
	mulss	xmm0, DWORD PTR _scale$[ebp]
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv1026[ebp], xmm0
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	ecx, 4
	shl	ecx, 0
	movss	xmm0, DWORD PTR tv1026[ebp]
	movss	DWORD PTR [eax+ecx], xmm0

; 710  : 			mat[3][1] = origin.y;

	mov	edx, 16					; 00000010H
	imul	ecx, edx, 3
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	ecx, 4
	shl	ecx, 0
	mov	edx, DWORD PTR _origin$[ebp]
	mov	edx, DWORD PTR [edx+4]
	mov	DWORD PTR [eax+ecx], edx

; 711  : 			mat[0][2] = (-sp) * scale;

	movss	xmm0, DWORD PTR _sp$[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mulss	xmm0, DWORD PTR _scale$[ebp]
	mov	eax, 16					; 00000010H
	imul	ecx, eax, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv1028[ebp], xmm0
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	ecx, 4
	shl	ecx, 1
	movss	xmm0, DWORD PTR tv1028[ebp]
	movss	DWORD PTR [eax+ecx], xmm0

; 712  : 			mat[1][2] = (sr*cp) * scale;

	movss	xmm0, DWORD PTR _sr$[ebp]
	mulss	xmm0, DWORD PTR _cp$[ebp]
	mulss	xmm0, DWORD PTR _scale$[ebp]
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv1030[ebp], xmm0
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	edx, 4
	shl	edx, 1
	movss	xmm0, DWORD PTR tv1030[ebp]
	movss	DWORD PTR [eax+edx], xmm0

; 713  : 			mat[2][2] = (cr*cp) * scale;

	movss	xmm0, DWORD PTR _cr$[ebp]
	mulss	xmm0, DWORD PTR _cp$[ebp]
	mulss	xmm0, DWORD PTR _scale$[ebp]
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv1032[ebp], xmm0
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	ecx, 4
	shl	ecx, 1
	movss	xmm0, DWORD PTR tv1032[ebp]
	movss	DWORD PTR [eax+ecx], xmm0

; 714  : 			mat[3][2] = origin.z;

	mov	edx, 16					; 00000010H
	imul	ecx, edx, 3
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	ecx, 4
	shl	ecx, 1
	mov	edx, DWORD PTR _origin$[ebp]
	mov	edx, DWORD PTR [edx+8]
	mov	DWORD PTR [eax+ecx], edx

; 715  : 			mat[0][3] = 0;

	mov	eax, 16					; 00000010H
	imul	ecx, eax, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	ecx, 4
	imul	edx, ecx, 3
	xorps	xmm0, xmm0
	movss	DWORD PTR [eax+edx], xmm0

; 716  : 			mat[1][3] = 0;

	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	ecx, 4
	imul	edx, ecx, 3
	xorps	xmm0, xmm0
	movss	DWORD PTR [eax+edx], xmm0

; 717  : 			mat[2][3] = 0;

	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	ecx, 4
	imul	edx, ecx, 3
	xorps	xmm0, xmm0
	movss	DWORD PTR [eax+edx], xmm0

; 718  : 			mat[3][3] = 1;

	mov	eax, 16					; 00000010H
	imul	ecx, eax, 3
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	ecx, 4
	imul	edx, ecx, 3
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [eax+edx], xmm0
	jmp	$LN7@matrix4x4
$LN2@matrix4x4:

; 719  : 		}
; 720  : 		else if( angles[PITCH] )

	mov	ecx, DWORD PTR _angles$[ebp]
	call	??BVector@@QBEPBMXZ			; Vector::operator float const *
	mov	ecx, 4
	imul	edx, ecx, 0
	movss	xmm0, DWORD PTR [eax+edx]
	ucomiss	xmm0, DWORD PTR __real@00000000
	lahf
	test	ah, 68					; 00000044H
	jnp	$LN4@matrix4x4

; 721  : 		{
; 722  : 			angle = angles[YAW] * (M_PI*2 / 360);

	mov	ecx, DWORD PTR _angles$[ebp]
	call	??BVector@@QBEPBMXZ			; Vector::operator float const *
	mov	ecx, 4
	shl	ecx, 0
	cvtss2sd xmm0, DWORD PTR [eax+ecx]
	mulsd	xmm0, QWORD PTR __real@3f91df46a2529d39
	cvtsd2ss xmm0, xmm0
	movss	DWORD PTR _angle$[ebp], xmm0

; 723  : 			SinCos( angle, &sy, &cy );

	lea	edx, DWORD PTR _cy$[ebp]
	push	edx
	lea	eax, DWORD PTR _sy$[ebp]
	push	eax
	push	ecx
	movss	xmm0, DWORD PTR _angle$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	?SinCos@@YAXMPAM0@Z			; SinCos
	add	esp, 12					; 0000000cH

; 724  : 			angle = angles[PITCH] * (M_PI*2 / 360);

	mov	ecx, DWORD PTR _angles$[ebp]
	call	??BVector@@QBEPBMXZ			; Vector::operator float const *
	mov	ecx, 4
	imul	edx, ecx, 0
	cvtss2sd xmm0, DWORD PTR [eax+edx]
	mulsd	xmm0, QWORD PTR __real@3f91df46a2529d39
	cvtsd2ss xmm0, xmm0
	movss	DWORD PTR _angle$[ebp], xmm0

; 725  : 			SinCos( angle, &sp, &cp );

	lea	eax, DWORD PTR _cp$[ebp]
	push	eax
	lea	ecx, DWORD PTR _sp$[ebp]
	push	ecx
	push	ecx
	movss	xmm0, DWORD PTR _angle$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	?SinCos@@YAXMPAM0@Z			; SinCos
	add	esp, 12					; 0000000cH

; 726  : 
; 727  : 			mat[0][0] = (cp*cy) * scale;

	movss	xmm0, DWORD PTR _cp$[ebp]
	mulss	xmm0, DWORD PTR _cy$[ebp]
	mulss	xmm0, DWORD PTR _scale$[ebp]
	mov	edx, 16					; 00000010H
	imul	ecx, edx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv1034[ebp], xmm0
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	ecx, 4
	imul	edx, ecx, 0
	movss	xmm0, DWORD PTR tv1034[ebp]
	movss	DWORD PTR [eax+edx], xmm0

; 728  : 			mat[1][0] = (-sy) * scale;

	movss	xmm0, DWORD PTR _sy$[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mulss	xmm0, DWORD PTR _scale$[ebp]
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv1036[ebp], xmm0
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	ecx, 4
	imul	edx, ecx, 0
	movss	xmm0, DWORD PTR tv1036[ebp]
	movss	DWORD PTR [eax+edx], xmm0

; 729  : 			mat[2][0] = (sp*cy) * scale;

	movss	xmm0, DWORD PTR _sp$[ebp]
	mulss	xmm0, DWORD PTR _cy$[ebp]
	mulss	xmm0, DWORD PTR _scale$[ebp]
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv1038[ebp], xmm0
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	ecx, 4
	imul	edx, ecx, 0
	movss	xmm0, DWORD PTR tv1038[ebp]
	movss	DWORD PTR [eax+edx], xmm0

; 730  : 			mat[3][0] = origin.x;

	mov	eax, 16					; 00000010H
	imul	ecx, eax, 3
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	ecx, 4
	imul	edx, ecx, 0
	mov	ecx, DWORD PTR _origin$[ebp]
	mov	ecx, DWORD PTR [ecx]
	mov	DWORD PTR [eax+edx], ecx

; 731  : 			mat[0][1] = (cp*sy) * scale;

	movss	xmm0, DWORD PTR _cp$[ebp]
	mulss	xmm0, DWORD PTR _sy$[ebp]
	mulss	xmm0, DWORD PTR _scale$[ebp]
	mov	edx, 16					; 00000010H
	imul	ecx, edx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv1040[ebp], xmm0
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	ecx, 4
	shl	ecx, 0
	movss	xmm0, DWORD PTR tv1040[ebp]
	movss	DWORD PTR [eax+ecx], xmm0

; 732  : 			mat[1][1] = (cy) * scale;

	movss	xmm0, DWORD PTR _cy$[ebp]
	mulss	xmm0, DWORD PTR _scale$[ebp]
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv1042[ebp], xmm0
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	edx, 4
	shl	edx, 0
	movss	xmm0, DWORD PTR tv1042[ebp]
	movss	DWORD PTR [eax+edx], xmm0

; 733  : 			mat[2][1] = (sp*sy) * scale;

	movss	xmm0, DWORD PTR _sp$[ebp]
	mulss	xmm0, DWORD PTR _sy$[ebp]
	mulss	xmm0, DWORD PTR _scale$[ebp]
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv1044[ebp], xmm0
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	ecx, 4
	shl	ecx, 0
	movss	xmm0, DWORD PTR tv1044[ebp]
	movss	DWORD PTR [eax+ecx], xmm0

; 734  : 			mat[3][1] = origin.y;

	mov	edx, 16					; 00000010H
	imul	ecx, edx, 3
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	ecx, 4
	shl	ecx, 0
	mov	edx, DWORD PTR _origin$[ebp]
	mov	edx, DWORD PTR [edx+4]
	mov	DWORD PTR [eax+ecx], edx

; 735  : 			mat[0][2] = (-sp) * scale;

	movss	xmm0, DWORD PTR _sp$[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mulss	xmm0, DWORD PTR _scale$[ebp]
	mov	eax, 16					; 00000010H
	imul	ecx, eax, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv1046[ebp], xmm0
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	ecx, 4
	shl	ecx, 1
	movss	xmm0, DWORD PTR tv1046[ebp]
	movss	DWORD PTR [eax+ecx], xmm0

; 736  : 			mat[1][2] = 0;

	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	edx, 4
	shl	edx, 1
	xorps	xmm0, xmm0
	movss	DWORD PTR [eax+edx], xmm0

; 737  : 			mat[2][2] = (cp) * scale;

	movss	xmm0, DWORD PTR _cp$[ebp]
	mulss	xmm0, DWORD PTR _scale$[ebp]
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv1048[ebp], xmm0
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	ecx, 4
	shl	ecx, 1
	movss	xmm0, DWORD PTR tv1048[ebp]
	movss	DWORD PTR [eax+ecx], xmm0

; 738  : 			mat[3][2] = origin.z;

	mov	edx, 16					; 00000010H
	imul	ecx, edx, 3
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	ecx, 4
	shl	ecx, 1
	mov	edx, DWORD PTR _origin$[ebp]
	mov	edx, DWORD PTR [edx+8]
	mov	DWORD PTR [eax+ecx], edx

; 739  : 			mat[0][3] = 0;

	mov	eax, 16					; 00000010H
	imul	ecx, eax, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	ecx, 4
	imul	edx, ecx, 3
	xorps	xmm0, xmm0
	movss	DWORD PTR [eax+edx], xmm0

; 740  : 			mat[1][3] = 0;

	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	ecx, 4
	imul	edx, ecx, 3
	xorps	xmm0, xmm0
	movss	DWORD PTR [eax+edx], xmm0

; 741  : 			mat[2][3] = 0;

	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	ecx, 4
	imul	edx, ecx, 3
	xorps	xmm0, xmm0
	movss	DWORD PTR [eax+edx], xmm0

; 742  : 			mat[3][3] = 1;

	mov	eax, 16					; 00000010H
	imul	ecx, eax, 3
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	ecx, 4
	imul	edx, ecx, 3
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [eax+edx], xmm0
	jmp	$LN7@matrix4x4
$LN4@matrix4x4:

; 743  : 		}
; 744  : 		else if( angles[YAW] )

	mov	ecx, DWORD PTR _angles$[ebp]
	call	??BVector@@QBEPBMXZ			; Vector::operator float const *
	mov	ecx, 4
	shl	ecx, 0
	movss	xmm0, DWORD PTR [eax+ecx]
	ucomiss	xmm0, DWORD PTR __real@00000000
	lahf
	test	ah, 68					; 00000044H
	jnp	$LN6@matrix4x4

; 745  : 		{
; 746  : 			angle = angles[YAW] * (M_PI*2 / 360);

	mov	ecx, DWORD PTR _angles$[ebp]
	call	??BVector@@QBEPBMXZ			; Vector::operator float const *
	mov	edx, 4
	shl	edx, 0
	cvtss2sd xmm0, DWORD PTR [eax+edx]
	mulsd	xmm0, QWORD PTR __real@3f91df46a2529d39
	cvtsd2ss xmm0, xmm0
	movss	DWORD PTR _angle$[ebp], xmm0

; 747  : 			SinCos( angle, &sy, &cy );

	lea	eax, DWORD PTR _cy$[ebp]
	push	eax
	lea	ecx, DWORD PTR _sy$[ebp]
	push	ecx
	push	ecx
	movss	xmm0, DWORD PTR _angle$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	?SinCos@@YAXMPAM0@Z			; SinCos
	add	esp, 12					; 0000000cH

; 748  : 
; 749  : 			mat[0][0] = (cy) * scale;

	movss	xmm0, DWORD PTR _cy$[ebp]
	mulss	xmm0, DWORD PTR _scale$[ebp]
	mov	edx, 16					; 00000010H
	imul	ecx, edx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv1050[ebp], xmm0
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	ecx, 4
	imul	edx, ecx, 0
	movss	xmm0, DWORD PTR tv1050[ebp]
	movss	DWORD PTR [eax+edx], xmm0

; 750  : 			mat[1][0] = (-sy) * scale;

	movss	xmm0, DWORD PTR _sy$[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mulss	xmm0, DWORD PTR _scale$[ebp]
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv1052[ebp], xmm0
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	ecx, 4
	imul	edx, ecx, 0
	movss	xmm0, DWORD PTR tv1052[ebp]
	movss	DWORD PTR [eax+edx], xmm0

; 751  : 			mat[2][0] = 0;

	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	ecx, 4
	imul	edx, ecx, 0
	xorps	xmm0, xmm0
	movss	DWORD PTR [eax+edx], xmm0

; 752  : 			mat[3][0] = origin.x;

	mov	eax, 16					; 00000010H
	imul	ecx, eax, 3
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	ecx, 4
	imul	edx, ecx, 0
	mov	ecx, DWORD PTR _origin$[ebp]
	mov	ecx, DWORD PTR [ecx]
	mov	DWORD PTR [eax+edx], ecx

; 753  : 			mat[0][1] = (sy) * scale;

	movss	xmm0, DWORD PTR _sy$[ebp]
	mulss	xmm0, DWORD PTR _scale$[ebp]
	mov	edx, 16					; 00000010H
	imul	ecx, edx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv1054[ebp], xmm0
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	ecx, 4
	shl	ecx, 0
	movss	xmm0, DWORD PTR tv1054[ebp]
	movss	DWORD PTR [eax+ecx], xmm0

; 754  : 			mat[1][1] = (cy) * scale;

	movss	xmm0, DWORD PTR _cy$[ebp]
	mulss	xmm0, DWORD PTR _scale$[ebp]
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv1056[ebp], xmm0
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	edx, 4
	shl	edx, 0
	movss	xmm0, DWORD PTR tv1056[ebp]
	movss	DWORD PTR [eax+edx], xmm0

; 755  : 			mat[2][1] = 0;

	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	ecx, 4
	shl	ecx, 0
	xorps	xmm0, xmm0
	movss	DWORD PTR [eax+ecx], xmm0

; 756  : 			mat[3][1] = origin.y;

	mov	edx, 16					; 00000010H
	imul	ecx, edx, 3
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	ecx, 4
	shl	ecx, 0
	mov	edx, DWORD PTR _origin$[ebp]
	mov	edx, DWORD PTR [edx+4]
	mov	DWORD PTR [eax+ecx], edx

; 757  : 			mat[0][2] = 0;

	mov	eax, 16					; 00000010H
	imul	ecx, eax, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	ecx, 4
	shl	ecx, 1
	xorps	xmm0, xmm0
	movss	DWORD PTR [eax+ecx], xmm0

; 758  : 			mat[1][2] = 0;

	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	edx, 4
	shl	edx, 1
	xorps	xmm0, xmm0
	movss	DWORD PTR [eax+edx], xmm0

; 759  : 			mat[2][2] = scale;

	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	ecx, 4
	shl	ecx, 1
	movss	xmm0, DWORD PTR _scale$[ebp]
	movss	DWORD PTR [eax+ecx], xmm0

; 760  : 			mat[3][2] = origin.z;

	mov	edx, 16					; 00000010H
	imul	ecx, edx, 3
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	ecx, 4
	shl	ecx, 1
	mov	edx, DWORD PTR _origin$[ebp]
	mov	edx, DWORD PTR [edx+8]
	mov	DWORD PTR [eax+ecx], edx

; 761  : 			mat[0][3] = 0;

	mov	eax, 16					; 00000010H
	imul	ecx, eax, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	ecx, 4
	imul	edx, ecx, 3
	xorps	xmm0, xmm0
	movss	DWORD PTR [eax+edx], xmm0

; 762  : 			mat[1][3] = 0;

	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	ecx, 4
	imul	edx, ecx, 3
	xorps	xmm0, xmm0
	movss	DWORD PTR [eax+edx], xmm0

; 763  : 			mat[2][3] = 0;

	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	ecx, 4
	imul	edx, ecx, 3
	xorps	xmm0, xmm0
	movss	DWORD PTR [eax+edx], xmm0

; 764  : 			mat[3][3] = 1;

	mov	eax, 16					; 00000010H
	imul	ecx, eax, 3
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	ecx, 4
	imul	edx, ecx, 3
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [eax+edx], xmm0

; 765  : 		}
; 766  : 		else

	jmp	$LN7@matrix4x4
$LN6@matrix4x4:

; 767  : 		{
; 768  : 			mat[0][0] = scale;

	mov	eax, 16					; 00000010H
	imul	ecx, eax, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	ecx, 4
	imul	edx, ecx, 0
	movss	xmm0, DWORD PTR _scale$[ebp]
	movss	DWORD PTR [eax+edx], xmm0

; 769  : 			mat[1][0] = 0;

	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	ecx, 4
	imul	edx, ecx, 0
	xorps	xmm0, xmm0
	movss	DWORD PTR [eax+edx], xmm0

; 770  : 			mat[2][0] = 0;

	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	ecx, 4
	imul	edx, ecx, 0
	xorps	xmm0, xmm0
	movss	DWORD PTR [eax+edx], xmm0

; 771  : 			mat[3][0] = origin.x;

	mov	eax, 16					; 00000010H
	imul	ecx, eax, 3
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	ecx, 4
	imul	edx, ecx, 0
	mov	ecx, DWORD PTR _origin$[ebp]
	mov	ecx, DWORD PTR [ecx]
	mov	DWORD PTR [eax+edx], ecx

; 772  : 			mat[0][1] = 0;

	mov	edx, 16					; 00000010H
	imul	ecx, edx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	ecx, 4
	shl	ecx, 0
	xorps	xmm0, xmm0
	movss	DWORD PTR [eax+ecx], xmm0

; 773  : 			mat[1][1] = scale;

	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	edx, 4
	shl	edx, 0
	movss	xmm0, DWORD PTR _scale$[ebp]
	movss	DWORD PTR [eax+edx], xmm0

; 774  : 			mat[2][1] = 0;

	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	ecx, 4
	shl	ecx, 0
	xorps	xmm0, xmm0
	movss	DWORD PTR [eax+ecx], xmm0

; 775  : 			mat[3][1] = origin.y;

	mov	edx, 16					; 00000010H
	imul	ecx, edx, 3
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	ecx, 4
	shl	ecx, 0
	mov	edx, DWORD PTR _origin$[ebp]
	mov	edx, DWORD PTR [edx+4]
	mov	DWORD PTR [eax+ecx], edx

; 776  : 			mat[0][2] = 0;

	mov	eax, 16					; 00000010H
	imul	ecx, eax, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	ecx, 4
	shl	ecx, 1
	xorps	xmm0, xmm0
	movss	DWORD PTR [eax+ecx], xmm0

; 777  : 			mat[1][2] = 0;

	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	edx, 4
	shl	edx, 1
	xorps	xmm0, xmm0
	movss	DWORD PTR [eax+edx], xmm0

; 778  : 			mat[2][2] = scale;

	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	ecx, 4
	shl	ecx, 1
	movss	xmm0, DWORD PTR _scale$[ebp]
	movss	DWORD PTR [eax+ecx], xmm0

; 779  : 			mat[3][2] = origin.z;

	mov	edx, 16					; 00000010H
	imul	ecx, edx, 3
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	ecx, 4
	shl	ecx, 1
	mov	edx, DWORD PTR _origin$[ebp]
	mov	edx, DWORD PTR [edx+8]
	mov	DWORD PTR [eax+ecx], edx

; 780  : 			mat[0][3] = 0;

	mov	eax, 16					; 00000010H
	imul	ecx, eax, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	ecx, 4
	imul	edx, ecx, 3
	xorps	xmm0, xmm0
	movss	DWORD PTR [eax+edx], xmm0

; 781  : 			mat[1][3] = 0;

	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	ecx, 4
	imul	edx, ecx, 3
	xorps	xmm0, xmm0
	movss	DWORD PTR [eax+edx], xmm0

; 782  : 			mat[2][3] = 0;

	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	ecx, 4
	imul	edx, ecx, 3
	xorps	xmm0, xmm0
	movss	DWORD PTR [eax+edx], xmm0

; 783  : 			mat[3][3] = 1;

	mov	eax, 16					; 00000010H
	imul	ecx, eax, 3
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	ecx, 4
	imul	edx, ecx, 3
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [eax+edx], xmm0
$LN7@matrix4x4:

; 784  : 		}
; 785  : 	}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
??0matrix4x4@@QAE@ABVVector@@0M@Z ENDP			; matrix4x4::matrix4x4
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xashxt_v0.81_rev.1_with_sources\xashxt_v0.81_rev.1_src\game_shared\vector.h
;	COMDAT ??0Radian@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0Radian@@QAE@XZ PROC					; Radian::Radian, COMDAT
; _this$ = ecx

; 351  : 	inline Radian( void ) { }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0Radian@@QAE@XZ ENDP					; Radian::Radian
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xashxt_v0.81_rev.1_with_sources\xashxt_v0.81_rev.1_src\game_shared\vector.h
;	COMDAT ??BVector4D@@QAE?AVVector@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
??BVector4D@@QAE?AVVector@@XZ PROC			; Vector4D::operator Vector, COMDAT
; _this$ = ecx

; 318  : 	operator Vector()					{ return Vector( x, y, z ); }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [eax+8]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [ecx+4]
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [edx]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0Vector@@QAE@MMM@Z			; Vector::Vector
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??BVector4D@@QAE?AVVector@@XZ ENDP			; Vector4D::operator Vector
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xashxt_v0.81_rev.1_with_sources\xashxt_v0.81_rev.1_src\game_shared\vector.h
;	COMDAT ??BVector4D@@QAEPAMXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??BVector4D@@QAEPAMXZ PROC				; Vector4D::operator float *, COMDAT
; _this$ = ecx

; 314  : 	operator float *()					{ return &x; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??BVector4D@@QAEPAMXZ ENDP				; Vector4D::operator float *
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xashxt_v0.81_rev.1_with_sources\xashxt_v0.81_rev.1_src\game_shared\vector.h
;	COMDAT ??0Vector4D@@QAE@ABV0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_v$ = 8							; size = 4
??0Vector4D@@QAE@ABV0@@Z PROC				; Vector4D::Vector4D, COMDAT
; _this$ = ecx

; 302  : 	inline Vector4D( const Vector4D& v ) { x = v.x; y = v.y; z = v.z, w = v.w; } 

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _v$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _v$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _v$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR [eax+8], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _v$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR [eax+12], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0Vector4D@@QAE@ABV0@@Z ENDP				; Vector4D::Vector4D
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xashxt_v0.81_rev.1_with_sources\xashxt_v0.81_rev.1_src\game_shared\vector.h
;	COMDAT ??0Vector4D@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0Vector4D@@QAE@XZ PROC				; Vector4D::Vector4D, COMDAT
; _this$ = ecx

; 300  : 	inline Vector4D( void ) { }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0Vector4D@@QAE@XZ ENDP				; Vector4D::Vector4D
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xashxt_v0.81_rev.1_with_sources\xashxt_v0.81_rev.1_src\game_shared\vector.h
;	COMDAT ?DotProduct@@YAMABVVector@@0@Z
_TEXT	SEGMENT
tv86 = -4						; size = 4
_a$ = 8							; size = 4
_b$ = 12						; size = 4
?DotProduct@@YAMABVVector@@0@Z PROC			; DotProduct, COMDAT

; 278  : inline float DotProduct(const Vector& a, const Vector& b ) { return( a.x * b.x + a.y * b.y + a.z * b.z ); }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	eax, DWORD PTR _a$[ebp]
	mov	ecx, DWORD PTR _b$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR [ecx]
	mov	edx, DWORD PTR _a$[ebp]
	mov	eax, DWORD PTR _b$[ebp]
	movss	xmm1, DWORD PTR [edx+4]
	mulss	xmm1, DWORD PTR [eax+4]
	addss	xmm0, xmm1
	mov	ecx, DWORD PTR _a$[ebp]
	mov	edx, DWORD PTR _b$[ebp]
	movss	xmm1, DWORD PTR [ecx+8]
	mulss	xmm1, DWORD PTR [edx+8]
	addss	xmm0, xmm1
	movss	DWORD PTR tv86[ebp], xmm0
	fld	DWORD PTR tv86[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
?DotProduct@@YAMABVVector@@0@Z ENDP			; DotProduct
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xashxt_v0.81_rev.1_with_sources\xashxt_v0.81_rev.1_src\game_shared\vector.h
;	COMDAT ??D@YA?AVVector@@MABV0@@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
_fl$ = 12						; size = 4
_v$ = 16						; size = 4
??D@YA?AVVector@@MABV0@@Z PROC				; operator*, COMDAT

; 277  : inline Vector operator* ( float fl, const Vector& v ) { return v * fl; }

	push	ebp
	mov	ebp, esp
	push	ecx
	movss	xmm0, DWORD PTR _fl$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	push	eax
	mov	ecx, DWORD PTR _v$[ebp]
	call	??DVector@@QBE?AV0@M@Z			; Vector::operator*
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	pop	ebp
	ret	0
??D@YA?AVVector@@MABV0@@Z ENDP				; operator*
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xashxt_v0.81_rev.1_with_sources\xashxt_v0.81_rev.1_src\game_shared\vector.h
;	COMDAT ?Normalize@Vector@@QBE?AV1@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
_flLen$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?Normalize@Vector@@QBE?AV1@XZ PROC			; Vector::Normalize, COMDAT
; _this$ = ecx

; 229  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 230  : 		float flLen = Length();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Length@Vector@@QBEMXZ			; Vector::Length
	fstp	DWORD PTR _flLen$[ebp]

; 231  : 
; 232  : 		if( flLen )

	movss	xmm0, DWORD PTR _flLen$[ebp]
	ucomiss	xmm0, DWORD PTR __real@00000000
	lahf
	test	ah, 68					; 00000044H
	jnp	SHORT $LN2@Normalize

; 233  : 		{
; 234  : 			flLen = 1.0f / flLen;

	movss	xmm0, DWORD PTR __real@3f800000
	divss	xmm0, DWORD PTR _flLen$[ebp]
	movss	DWORD PTR _flLen$[ebp], xmm0

; 235  : 			return Vector( x * flLen, y * flLen, z * flLen );

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+8]
	mulss	xmm0, DWORD PTR _flLen$[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+4]
	mulss	xmm0, DWORD PTR _flLen$[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx]
	mulss	xmm0, DWORD PTR _flLen$[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0Vector@@QAE@MMM@Z			; Vector::Vector
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	SHORT $LN1@Normalize
$LN2@Normalize:

; 236  : 		}
; 237  : 
; 238  : 		return *this; // can't normalize

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0Vector@@QAE@ABV0@@Z			; Vector::Vector
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
$LN1@Normalize:

; 239  : 	}

	mov	esp, ebp
	pop	ebp
	ret	4
?Normalize@Vector@@QBE?AV1@XZ ENDP			; Vector::Normalize
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xashxt_v0.81_rev.1_with_sources\xashxt_v0.81_rev.1_src\game_shared\vector.h
;	COMDAT ??BVector@@QBEPBMXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??BVector@@QBEPBMXZ PROC				; Vector::operator float const *, COMDAT
; _this$ = ecx

; 226  : 	operator const float *() const		{ return &x; } 

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??BVector@@QBEPBMXZ ENDP				; Vector::operator float const *
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xashxt_v0.81_rev.1_with_sources\xashxt_v0.81_rev.1_src\game_shared\vector.h
;	COMDAT ??BVector@@QAEPAMXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??BVector@@QAEPAMXZ PROC				; Vector::operator float *, COMDAT
; _this$ = ecx

; 225  : 	operator float *()				{ return &x; } // Vectors will now automatically convert to float * when needed

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??BVector@@QAEPAMXZ ENDP				; Vector::operator float *
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xashxt_v0.81_rev.1_with_sources\xashxt_v0.81_rev.1_src\game_shared\vector.h
;	COMDAT ?Length@Vector@@QBEMXZ
_TEXT	SEGMENT
tv91 = -8						; size = 4
_this$ = -4						; size = 4
?Length@Vector@@QBEMXZ PROC				; Vector::Length, COMDAT
; _this$ = ecx

; 223  : 	inline float Length(void) const		{ return sqrt( x*x + y*y + z*z ); }

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR [ecx]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [edx+4]
	mulss	xmm1, DWORD PTR [eax+4]
	addss	xmm0, xmm1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [ecx+8]
	mulss	xmm1, DWORD PTR [edx+8]
	addss	xmm0, xmm1
	cvtss2sd xmm0, xmm0
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	call	_sqrt
	add	esp, 8
	fstp	DWORD PTR tv91[ebp]
	fld	DWORD PTR tv91[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
?Length@Vector@@QBEMXZ ENDP				; Vector::Length
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xashxt_v0.81_rev.1_with_sources\xashxt_v0.81_rev.1_src\game_shared\vector.h
;	COMDAT ??ZVector@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_v$ = 8							; size = 4
??ZVector@@QAEAAV0@ABV0@@Z PROC				; Vector::operator-=, COMDAT
; _this$ = ecx

; 161  : 	{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 162  : 		x-=v.x; y-=v.y; z -= v.z;	

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [eax]
	subss	xmm0, DWORD PTR [ecx]
	mov	edx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [edx], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [eax+4]
	subss	xmm0, DWORD PTR [ecx+4]
	mov	edx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [edx+4], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [eax+8]
	subss	xmm0, DWORD PTR [ecx+8]
	mov	edx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [edx+8], xmm0

; 163  : 		return *this;

	mov	eax, DWORD PTR _this$[ebp]

; 164  : 	}		

	mov	esp, ebp
	pop	ebp
	ret	4
??ZVector@@QAEAAV0@ABV0@@Z ENDP				; Vector::operator-=
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xashxt_v0.81_rev.1_with_sources\xashxt_v0.81_rev.1_src\game_shared\vector.h
;	COMDAT ??YVector@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_v$ = 8							; size = 4
??YVector@@QAEAAV0@ABV0@@Z PROC				; Vector::operator+=, COMDAT
; _this$ = ecx

; 156  : 	{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 157  : 		x+=v.x; y+=v.y; z += v.z;	

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [eax]
	addss	xmm0, DWORD PTR [ecx]
	mov	edx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [edx], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [eax+4]
	addss	xmm0, DWORD PTR [ecx+4]
	mov	edx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [edx+4], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [eax+8]
	addss	xmm0, DWORD PTR [ecx+8]
	mov	edx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [edx+8], xmm0

; 158  : 		return *this;

	mov	eax, DWORD PTR _this$[ebp]

; 159  : 	}			

	mov	esp, ebp
	pop	ebp
	ret	4
??YVector@@QAEAAV0@ABV0@@Z ENDP				; Vector::operator+=
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xashxt_v0.81_rev.1_with_sources\xashxt_v0.81_rev.1_src\game_shared\vector.h
;	COMDAT ??KVector@@QBE?AV0@M@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
_fl$ = 12						; size = 4
??KVector@@QBE?AV0@M@Z PROC				; Vector::operator/, COMDAT
; _this$ = ecx

; 151  : 	inline Vector operator/(float fl) const		{ return Vector(x/fl, y/fl, z/fl);	   }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+8]
	divss	xmm0, DWORD PTR _fl$[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+4]
	divss	xmm0, DWORD PTR _fl$[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx]
	divss	xmm0, DWORD PTR _fl$[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0Vector@@QAE@MMM@Z			; Vector::Vector
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	8
??KVector@@QBE?AV0@M@Z ENDP				; Vector::operator/
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xashxt_v0.81_rev.1_with_sources\xashxt_v0.81_rev.1_src\game_shared\vector.h
;	COMDAT ??DVector@@QBE?AV0@M@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
_fl$ = 12						; size = 4
??DVector@@QBE?AV0@M@Z PROC				; Vector::operator*, COMDAT
; _this$ = ecx

; 150  : 	inline Vector operator*(float fl) const		{ return Vector(x*fl, y*fl, z*fl);	   }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+8]
	mulss	xmm0, DWORD PTR _fl$[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+4]
	mulss	xmm0, DWORD PTR _fl$[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx]
	mulss	xmm0, DWORD PTR _fl$[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0Vector@@QAE@MMM@Z			; Vector::Vector
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	8
??DVector@@QBE?AV0@M@Z ENDP				; Vector::operator*
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xashxt_v0.81_rev.1_with_sources\xashxt_v0.81_rev.1_src\game_shared\vector.h
;	COMDAT ??HVector@@QBE?AV0@M@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
_fl$ = 12						; size = 4
??HVector@@QBE?AV0@M@Z PROC				; Vector::operator+, COMDAT
; _this$ = ecx

; 148  : 	inline Vector operator+(float fl) const		{ return Vector(x+fl, y+fl, z+fl);	   }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+8]
	addss	xmm0, DWORD PTR _fl$[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+4]
	addss	xmm0, DWORD PTR _fl$[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx]
	addss	xmm0, DWORD PTR _fl$[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0Vector@@QAE@MMM@Z			; Vector::Vector
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	8
??HVector@@QBE?AV0@M@Z ENDP				; Vector::operator+
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xashxt_v0.81_rev.1_with_sources\xashxt_v0.81_rev.1_src\game_shared\vector.h
;	COMDAT ??GVector@@QBE?AV0@ABV0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
_v$ = 12						; size = 4
??GVector@@QBE?AV0@ABV0@@Z PROC				; Vector::operator-, COMDAT
; _this$ = ecx

; 147  : 	inline Vector operator-(const Vector& v) const	{ return Vector(x-v.x, y-v.y, z-v.z);	   }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [eax+8]
	subss	xmm0, DWORD PTR [ecx+8]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [edx+4]
	subss	xmm0, DWORD PTR [eax+4]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [ecx]
	subss	xmm0, DWORD PTR [edx]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0Vector@@QAE@MMM@Z			; Vector::Vector
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	8
??GVector@@QBE?AV0@ABV0@@Z ENDP				; Vector::operator-
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xashxt_v0.81_rev.1_with_sources\xashxt_v0.81_rev.1_src\game_shared\vector.h
;	COMDAT ??HVector@@QBE?AV0@ABV0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
_v$ = 12						; size = 4
??HVector@@QBE?AV0@ABV0@@Z PROC				; Vector::operator+, COMDAT
; _this$ = ecx

; 146  : 	inline Vector operator+(const Vector& v) const	{ return Vector(x+v.x, y+v.y, z+v.z);	   }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [eax+8]
	addss	xmm0, DWORD PTR [ecx+8]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [edx+4]
	addss	xmm0, DWORD PTR [eax+4]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [ecx]
	addss	xmm0, DWORD PTR [edx]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0Vector@@QAE@MMM@Z			; Vector::Vector
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	8
??HVector@@QBE?AV0@ABV0@@Z ENDP				; Vector::operator+
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xashxt_v0.81_rev.1_with_sources\xashxt_v0.81_rev.1_src\game_shared\vector.h
;	COMDAT ??9Vector@@QBEHABV0@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv68 = -4						; size = 4
_v$ = 8							; size = 4
??9Vector@@QBEHABV0@@Z PROC				; Vector::operator!=, COMDAT
; _this$ = ecx

; 145  : 	inline int operator!=(const Vector& v) const	{ return !(*this==v);		   }

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _v$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??8Vector@@QBEHABV0@@Z			; Vector::operator==
	test	eax, eax
	jne	SHORT $LN3@operator
	mov	DWORD PTR tv68[ebp], 1
	jmp	SHORT $LN4@operator
$LN3@operator:
	mov	DWORD PTR tv68[ebp], 0
$LN4@operator:
	mov	eax, DWORD PTR tv68[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??9Vector@@QBEHABV0@@Z ENDP				; Vector::operator!=
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xashxt_v0.81_rev.1_with_sources\xashxt_v0.81_rev.1_src\game_shared\vector.h
;	COMDAT ??8Vector@@QBEHABV0@@Z
_TEXT	SEGMENT
tv73 = -8						; size = 4
_this$ = -4						; size = 4
_v$ = 8							; size = 4
??8Vector@@QBEHABV0@@Z PROC				; Vector::operator==, COMDAT
; _this$ = ecx

; 144  : 	inline int operator==(const Vector& v) const	{ return x==v.x && y==v.y && z==v.z;	   }

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [eax]
	ucomiss	xmm0, DWORD PTR [ecx]
	lahf
	test	ah, 68					; 00000044H
	jp	SHORT $LN3@operator
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [edx+4]
	ucomiss	xmm0, DWORD PTR [eax+4]
	lahf
	test	ah, 68					; 00000044H
	jp	SHORT $LN3@operator
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [ecx+8]
	ucomiss	xmm0, DWORD PTR [edx+8]
	lahf
	test	ah, 68					; 00000044H
	jp	SHORT $LN3@operator
	mov	DWORD PTR tv73[ebp], 1
	jmp	SHORT $LN4@operator
$LN3@operator:
	mov	DWORD PTR tv73[ebp], 0
$LN4@operator:
	mov	eax, DWORD PTR tv73[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??8Vector@@QBEHABV0@@Z ENDP				; Vector::operator==
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xashxt_v0.81_rev.1_with_sources\xashxt_v0.81_rev.1_src\game_shared\vector.h
;	COMDAT ??0Vector@@QAE@QAM@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_rgfl$ = 8						; size = 4
??0Vector@@QAE@QAM@Z PROC				; Vector::Vector, COMDAT
; _this$ = ecx

; 135  : 	inline Vector(float rgfl[3])			{ x = rgfl[0]; y = rgfl[1]; z = rgfl[2];   }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _rgfl$[ebp]
	mov	ecx, DWORD PTR [eax+ecx]
	mov	DWORD PTR [edx], ecx
	mov	edx, 4
	shl	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _rgfl$[ebp]
	mov	edx, DWORD PTR [ecx+edx]
	mov	DWORD PTR [eax+4], edx
	mov	eax, 4
	shl	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _rgfl$[ebp]
	mov	eax, DWORD PTR [edx+eax]
	mov	DWORD PTR [ecx+8], eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0Vector@@QAE@QAM@Z ENDP				; Vector::Vector
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xashxt_v0.81_rev.1_with_sources\xashxt_v0.81_rev.1_src\game_shared\vector.h
;	COMDAT ??0Vector@@QAE@ABV0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_v$ = 8							; size = 4
??0Vector@@QAE@ABV0@@Z PROC				; Vector::Vector, COMDAT
; _this$ = ecx

; 133  : 	inline Vector(const Vector& v)		{ x = v.x; y = v.y; z = v.z;		   }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _v$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _v$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _v$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR [eax+8], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0Vector@@QAE@ABV0@@Z ENDP				; Vector::Vector
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xashxt_v0.81_rev.1_with_sources\xashxt_v0.81_rev.1_src\game_shared\vector.h
;	COMDAT ??0Vector@@QAE@MMM@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_X$ = 8							; size = 4
_Y$ = 12						; size = 4
_Z$ = 16						; size = 4
??0Vector@@QAE@MMM@Z PROC				; Vector::Vector, COMDAT
; _this$ = ecx

; 132  : 	inline Vector(float X, float Y, float Z)	{ x = X; y = Y; z = Z;                     }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _X$[ebp]
	movss	DWORD PTR [eax], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _Y$[ebp]
	movss	DWORD PTR [ecx+4], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _Z$[ebp]
	movss	DWORD PTR [edx+8], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
??0Vector@@QAE@MMM@Z ENDP				; Vector::Vector
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xashxt_v0.81_rev.1_with_sources\xashxt_v0.81_rev.1_src\game_shared\vector.h
;	COMDAT ??0Vector@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0Vector@@QAE@XZ PROC					; Vector::Vector, COMDAT
; _this$ = ecx

; 131  : 	inline Vector(void)				{ }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0Vector@@QAE@XZ ENDP					; Vector::Vector
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xashxt_v0.81_rev.1_with_sources\xashxt_v0.81_rev.1_src\game_shared\vector.h
;	COMDAT ?SinCos@@YAXMPAM0@Z
_TEXT	SEGMENT
_angle$ = 8						; size = 4
_sine$ = 12						; size = 4
_cosine$ = 16						; size = 4
?SinCos@@YAXMPAM0@Z PROC				; SinCos, COMDAT

; 33   : {

	push	ebp
	mov	ebp, esp

; 34   : 	__asm
; 35   : 	{
; 36   : 		push	ecx

	push	ecx

; 37   : 		fld	dword ptr angle

	fld	DWORD PTR _angle$[ebp]

; 38   : 		fsincos

	fsincos

; 39   : 		mov	ecx, dword ptr[cosine]

	mov	ecx, DWORD PTR _cosine$[ebp]

; 40   : 		fstp      dword ptr [ecx]

	fstp	DWORD PTR [ecx]

; 41   : 		mov 	ecx, dword ptr[sine]

	mov	ecx, DWORD PTR _sine$[ebp]

; 42   : 		fstp	dword ptr [ecx]

	fstp	DWORD PTR [ecx]

; 43   : 		pop	ecx

	pop	ecx

; 44   : 	}
; 45   : }

	pop	ebp
	ret	0
?SinCos@@YAXMPAM0@Z ENDP				; SinCos
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??__G@YGXPAX0IIP6EPAX00@Z@Z
_TEXT	SEGMENT
tv66 = -4						; size = 4
___t$ = 8						; size = 4
___u$ = 12						; size = 4
___s$ = 16						; size = 4
___n$ = 20						; size = 4
___f$ = 24						; size = 4
??__G@YGXPAX0IIP6EPAX00@Z@Z PROC			; `vector copy constructor iterator', COMDAT
	push	ebp
	mov	ebp, esp
	push	ecx
$LN2@vector:
	mov	eax, DWORD PTR ___n$[ebp]
	mov	DWORD PTR tv66[ebp], eax
	mov	ecx, DWORD PTR ___n$[ebp]
	sub	ecx, 1
	mov	DWORD PTR ___n$[ebp], ecx
	cmp	DWORD PTR tv66[ebp], 0
	jbe	SHORT $LN1@vector
	mov	edx, DWORD PTR ___u$[ebp]
	push	edx
	mov	ecx, DWORD PTR ___t$[ebp]
	call	DWORD PTR ___f$[ebp]
	mov	eax, DWORD PTR ___t$[ebp]
	add	eax, DWORD PTR ___s$[ebp]
	mov	DWORD PTR ___t$[ebp], eax
	mov	ecx, DWORD PTR ___u$[ebp]
	add	ecx, DWORD PTR ___s$[ebp]
	mov	DWORD PTR ___u$[ebp], ecx
	jmp	SHORT $LN2@vector
$LN1@vector:
	mov	esp, ebp
	pop	ebp
	ret	20					; 00000014H
??__G@YGXPAX0IIP6EPAX00@Z@Z ENDP			; `vector copy constructor iterator'
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_H@YGXPAXIIP6EPAX0@Z@Z
_TEXT	SEGMENT
tv66 = -4						; size = 4
___t$ = 8						; size = 4
___s$ = 12						; size = 4
___n$ = 16						; size = 4
___f$ = 20						; size = 4
??_H@YGXPAXIIP6EPAX0@Z@Z PROC				; `vector constructor iterator', COMDAT
	push	ebp
	mov	ebp, esp
	push	ecx
$LN2@vector:
	mov	eax, DWORD PTR ___n$[ebp]
	mov	DWORD PTR tv66[ebp], eax
	mov	ecx, DWORD PTR ___n$[ebp]
	sub	ecx, 1
	mov	DWORD PTR ___n$[ebp], ecx
	cmp	DWORD PTR tv66[ebp], 0
	jbe	SHORT $LN1@vector
	mov	ecx, DWORD PTR ___t$[ebp]
	call	DWORD PTR ___f$[ebp]
	mov	edx, DWORD PTR ___t$[ebp]
	add	edx, DWORD PTR ___s$[ebp]
	mov	DWORD PTR ___t$[ebp], edx
	jmp	SHORT $LN2@vector
$LN1@vector:
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
??_H@YGXPAXIIP6EPAX0@Z@Z ENDP				; `vector constructor iterator'
_TEXT	ENDS
END
