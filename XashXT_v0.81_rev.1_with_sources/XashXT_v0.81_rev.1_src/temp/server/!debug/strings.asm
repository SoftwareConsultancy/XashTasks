; Listing generated by Microsoft (R) Optimizing Compiler Version 19.16.27045.0 

	TITLE	C:\Users\USER\Downloads\XashXT_v0.81_rev.1_with_sources\XashXT_v0.81_rev.1_src\server\strings.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

CONST	SEGMENT
$SG71471 DB	00H
	ORG $+3
$SG71473 DB	'Empty string has bad index %i!', 0aH, 00H
$SG71490 DB	'  %d (0x%x) : %s', 0aH, 00H
	ORG $+2
$SG71491 DB	0aH, 'Size:  %d items', 0aH, 00H
	ORG $+2
$SG71500 DB	'  %d (0x%x) : %s', 0aH, 00H
	ORG $+2
$SG71501 DB	0aH, 'Size:  %d items', 0aH, 00H
	ORG $+2
$SG71616 DB	'&', 00H, 'm', 00H, '_', 00H, 'L', 00H, 'e', 00H, 's', 00H
	DB	's', 00H, 'F', 00H, 'u', 00H, 'n', 00H, 'c', 00H, 00H, 00H
$SG71888 DB	'm', 00H, '_', 00H, 'R', 00H, 'o', 00H, 'o', 00H, 't', 00H
	DB	' ', 00H, '=', 00H, '=', 00H, ' ', 00H, 'I', 00H, 'n', 00H, 'v'
	DB	00H, 'a', 00H, 'l', 00H, 'i', 00H, 'd', 00H, 'I', 00H, 'n', 00H
	DB	'd', 00H, 'e', 00H, 'x', 00H, '(', 00H, ')', 00H, 00H, 00H
	ORG $+2
$SG71615 DB	'c', 00H, ':', 00H, '\', 00H, 'u', 00H, 's', 00H, 'e', 00H
	DB	'r', 00H, 's', 00H, '\', 00H, 'u', 00H, 's', 00H, 'e', 00H, 'r'
	DB	00H, '\', 00H, 'd', 00H, 'o', 00H, 'w', 00H, 'n', 00H, 'l', 00H
	DB	'o', 00H, 'a', 00H, 'd', 00H, 's', 00H, '\', 00H, 'x', 00H, 'a'
	DB	00H, 's', 00H, 'h', 00H, 'x', 00H, 't', 00H, '_', 00H, 'v', 00H
	DB	'0', 00H, '.', 00H, '8', 00H, '1', 00H, '_', 00H, 'r', 00H, 'e'
	DB	00H, 'v', 00H, '.', 00H, '1', 00H, '_', 00H, 'w', 00H, 'i', 00H
	DB	't', 00H, 'h', 00H, '_', 00H, 's', 00H, 'o', 00H, 'u', 00H, 'r'
	DB	00H, 'c', 00H, 'e', 00H, 's', 00H, '\', 00H, 'x', 00H, 'a', 00H
	DB	's', 00H, 'h', 00H, 'x', 00H, 't', 00H, '_', 00H, 'v', 00H, '0'
	DB	00H, '.', 00H, '8', 00H, '1', 00H, '_', 00H, 'r', 00H, 'e', 00H
	DB	'v', 00H, '.', 00H, '1', 00H, '_', 00H, 's', 00H, 'r', 00H, 'c'
	DB	00H, '\', 00H, 'g', 00H, 'a', 00H, 'm', 00H, 'e', 00H, '_', 00H
	DB	's', 00H, 'h', 00H, 'a', 00H, 'r', 00H, 'e', 00H, 'd', 00H, '\'
	DB	00H, 'u', 00H, 't', 00H, 'l', 00H, 'r', 00H, 'b', 00H, 't', 00H
	DB	'r', 00H, 'e', 00H, 'e', 00H, '.', 00H, 'h', 00H, 00H, 00H
	ORG $+2
$SG71654 DB	'c', 00H, ':', 00H, '\', 00H, 'u', 00H, 's', 00H, 'e', 00H
	DB	'r', 00H, 's', 00H, '\', 00H, 'u', 00H, 's', 00H, 'e', 00H, 'r'
	DB	00H, '\', 00H, 'd', 00H, 'o', 00H, 'w', 00H, 'n', 00H, 'l', 00H
	DB	'o', 00H, 'a', 00H, 'd', 00H, 's', 00H, '\', 00H, 'x', 00H, 'a'
	DB	00H, 's', 00H, 'h', 00H, 'x', 00H, 't', 00H, '_', 00H, 'v', 00H
	DB	'0', 00H, '.', 00H, '8', 00H, '1', 00H, '_', 00H, 'r', 00H, 'e'
	DB	00H, 'v', 00H, '.', 00H, '1', 00H, '_', 00H, 'w', 00H, 'i', 00H
	DB	't', 00H, 'h', 00H, '_', 00H, 's', 00H, 'o', 00H, 'u', 00H, 'r'
	DB	00H, 'c', 00H, 'e', 00H, 's', 00H, '\', 00H, 'x', 00H, 'a', 00H
	DB	's', 00H, 'h', 00H, 'x', 00H, 't', 00H, '_', 00H, 'v', 00H, '0'
	DB	00H, '.', 00H, '8', 00H, '1', 00H, '_', 00H, 'r', 00H, 'e', 00H
	DB	'v', 00H, '.', 00H, '1', 00H, '_', 00H, 's', 00H, 'r', 00H, 'c'
	DB	00H, '\', 00H, 'g', 00H, 'a', 00H, 'm', 00H, 'e', 00H, '_', 00H
	DB	's', 00H, 'h', 00H, 'a', 00H, 'r', 00H, 'e', 00H, 'd', 00H, '\'
	DB	00H, 'u', 00H, 't', 00H, 'l', 00H, 'r', 00H, 'b', 00H, 't', 00H
	DB	'r', 00H, 'e', 00H, 'e', 00H, '.', 00H, 'h', 00H, 00H, 00H
	ORG $+2
$SG71655 DB	'I', 00H, 's', 00H, 'V', 00H, 'a', 00H, 'l', 00H, 'i', 00H
	DB	'd', 00H, 'I', 00H, 'n', 00H, 'd', 00H, 'e', 00H, 'x', 00H, '('
	DB	00H, 'i', 00H, ')', 00H, 00H, 00H
$SG71686 DB	'c', 00H, ':', 00H, '\', 00H, 'u', 00H, 's', 00H, 'e', 00H
	DB	'r', 00H, 's', 00H, '\', 00H, 'u', 00H, 's', 00H, 'e', 00H, 'r'
	DB	00H, '\', 00H, 'd', 00H, 'o', 00H, 'w', 00H, 'n', 00H, 'l', 00H
	DB	'o', 00H, 'a', 00H, 'd', 00H, 's', 00H, '\', 00H, 'x', 00H, 'a'
	DB	00H, 's', 00H, 'h', 00H, 'x', 00H, 't', 00H, '_', 00H, 'v', 00H
	DB	'0', 00H, '.', 00H, '8', 00H, '1', 00H, '_', 00H, 'r', 00H, 'e'
	DB	00H, 'v', 00H, '.', 00H, '1', 00H, '_', 00H, 'w', 00H, 'i', 00H
	DB	't', 00H, 'h', 00H, '_', 00H, 's', 00H, 'o', 00H, 'u', 00H, 'r'
	DB	00H, 'c', 00H, 'e', 00H, 's', 00H, '\', 00H, 'x', 00H, 'a', 00H
	DB	's', 00H, 'h', 00H, 'x', 00H, 't', 00H, '_', 00H, 'v', 00H, '0'
	DB	00H, '.', 00H, '8', 00H, '1', 00H, '_', 00H, 'r', 00H, 'e', 00H
	DB	'v', 00H, '.', 00H, '1', 00H, '_', 00H, 's', 00H, 'r', 00H, 'c'
	DB	00H, '\', 00H, 'g', 00H, 'a', 00H, 'm', 00H, 'e', 00H, '_', 00H
	DB	's', 00H, 'h', 00H, 'a', 00H, 'r', 00H, 'e', 00H, 'd', 00H, '\'
	DB	00H, 'u', 00H, 't', 00H, 'l', 00H, 'm', 00H, 'e', 00H, 'm', 00H
	DB	'o', 00H, 'r', 00H, 'y', 00H, '.', 00H, 'h', 00H, 00H, 00H
	ORG $+2
$SG71687 DB	'n', 00H, 'G', 00H, 'r', 00H, 'o', 00H, 'w', 00H, 'S', 00H
	DB	'i', 00H, 'z', 00H, 'e', 00H, ' ', 00H, '>', 00H, '=', 00H, ' '
	DB	00H, '0', 00H, 00H, 00H
	ORG $+2
$SG71730 DB	'c', 00H, ':', 00H, '\', 00H, 'u', 00H, 's', 00H, 'e', 00H
	DB	'r', 00H, 's', 00H, '\', 00H, 'u', 00H, 's', 00H, 'e', 00H, 'r'
	DB	00H, '\', 00H, 'd', 00H, 'o', 00H, 'w', 00H, 'n', 00H, 'l', 00H
	DB	'o', 00H, 'a', 00H, 'd', 00H, 's', 00H, '\', 00H, 'x', 00H, 'a'
	DB	00H, 's', 00H, 'h', 00H, 'x', 00H, 't', 00H, '_', 00H, 'v', 00H
	DB	'0', 00H, '.', 00H, '8', 00H, '1', 00H, '_', 00H, 'r', 00H, 'e'
	DB	00H, 'v', 00H, '.', 00H, '1', 00H, '_', 00H, 'w', 00H, 'i', 00H
	DB	't', 00H, 'h', 00H, '_', 00H, 's', 00H, 'o', 00H, 'u', 00H, 'r'
	DB	00H, 'c', 00H, 'e', 00H, 's', 00H, '\', 00H, 'x', 00H, 'a', 00H
	DB	's', 00H, 'h', 00H, 'x', 00H, 't', 00H, '_', 00H, 'v', 00H, '0'
	DB	00H, '.', 00H, '8', 00H, '1', 00H, '_', 00H, 'r', 00H, 'e', 00H
	DB	'v', 00H, '.', 00H, '1', 00H, '_', 00H, 's', 00H, 'r', 00H, 'c'
	DB	00H, '\', 00H, 'g', 00H, 'a', 00H, 'm', 00H, 'e', 00H, '_', 00H
	DB	's', 00H, 'h', 00H, 'a', 00H, 'r', 00H, 'e', 00H, 'd', 00H, '\'
	DB	00H, 'u', 00H, 't', 00H, 'l', 00H, 'a', 00H, 'r', 00H, 'r', 00H
	DB	'a', 00H, 'y', 00H, '.', 00H, 'h', 00H, 00H, 00H
$SG71890 DB	'm', 00H, '_', 00H, 'F', 00H, 'i', 00H, 'r', 00H, 's', 00H
	DB	't', 00H, 'F', 00H, 'r', 00H, 'e', 00H, 'e', 00H, ' ', 00H, '='
	DB	00H, '=', 00H, ' ', 00H, 'I', 00H, 'n', 00H, 'v', 00H, 'a', 00H
	DB	'l', 00H, 'i', 00H, 'd', 00H, 'I', 00H, 'n', 00H, 'd', 00H, 'e'
	DB	00H, 'x', 00H, '(', 00H, ')', 00H, 00H, 00H
$SG71731 DB	'(', 00H, 'B', 00H, 'a', 00H, 's', 00H, 'e', 00H, '(', 00H
	DB	')', 00H, ' ', 00H, '=', 00H, '=', 00H, ' ', 00H, 'N', 00H, 'U'
	DB	00H, 'L', 00H, 'L', 00H, ')', 00H, ' ', 00H, '|', 00H, '|', 00H
	DB	' ', 00H, '(', 00H, '&', 00H, 's', 00H, 'r', 00H, 'c', 00H, ' '
	DB	00H, '<', 00H, ' ', 00H, 'B', 00H, 'a', 00H, 's', 00H, 'e', 00H
	DB	'(', 00H, ')', 00H, ')', 00H, ' ', 00H, '|', 00H, '|', 00H, ' '
	DB	00H, '(', 00H, '&', 00H, 's', 00H, 'r', 00H, 'c', 00H, ' ', 00H
	DB	'>', 00H, '=', 00H, ' ', 00H, '(', 00H, 'B', 00H, 'a', 00H, 's'
	DB	00H, 'e', 00H, '(', 00H, ')', 00H, ' ', 00H, '+', 00H, ' ', 00H
	DB	'C', 00H, 'o', 00H, 'u', 00H, 'n', 00H, 't', 00H, '(', 00H, ')'
	DB	00H, ')', 00H, ' ', 00H, ')', 00H, 00H, 00H
	ORG $+2
$SG71896 DB	'I', 00H, 's', 00H, 'V', 00H, 'a', 00H, 'l', 00H, 'i', 00H
	DB	'd', 00H, '(', 00H, ')', 00H, 00H, 00H
$SG71732 DB	'c', 00H, ':', 00H, '\', 00H, 'u', 00H, 's', 00H, 'e', 00H
	DB	'r', 00H, 's', 00H, '\', 00H, 'u', 00H, 's', 00H, 'e', 00H, 'r'
	DB	00H, '\', 00H, 'd', 00H, 'o', 00H, 'w', 00H, 'n', 00H, 'l', 00H
	DB	'o', 00H, 'a', 00H, 'd', 00H, 's', 00H, '\', 00H, 'x', 00H, 'a'
	DB	00H, 's', 00H, 'h', 00H, 'x', 00H, 't', 00H, '_', 00H, 'v', 00H
	DB	'0', 00H, '.', 00H, '8', 00H, '1', 00H, '_', 00H, 'r', 00H, 'e'
	DB	00H, 'v', 00H, '.', 00H, '1', 00H, '_', 00H, 'w', 00H, 'i', 00H
	DB	't', 00H, 'h', 00H, '_', 00H, 's', 00H, 'o', 00H, 'u', 00H, 'r'
	DB	00H, 'c', 00H, 'e', 00H, 's', 00H, '\', 00H, 'x', 00H, 'a', 00H
	DB	's', 00H, 'h', 00H, 'x', 00H, 't', 00H, '_', 00H, 'v', 00H, '0'
	DB	00H, '.', 00H, '8', 00H, '1', 00H, '_', 00H, 'r', 00H, 'e', 00H
	DB	'v', 00H, '.', 00H, '1', 00H, '_', 00H, 's', 00H, 'r', 00H, 'c'
	DB	00H, '\', 00H, 'g', 00H, 'a', 00H, 'm', 00H, 'e', 00H, '_', 00H
	DB	's', 00H, 'h', 00H, 'a', 00H, 'r', 00H, 'e', 00H, 'd', 00H, '\'
	DB	00H, 'u', 00H, 't', 00H, 'l', 00H, 'a', 00H, 'r', 00H, 'r', 00H
	DB	'a', 00H, 'y', 00H, '.', 00H, 'h', 00H, 00H, 00H
$SG71910 DB	'I', 00H, 's', 00H, 'V', 00H, 'a', 00H, 'l', 00H, 'i', 00H
	DB	'd', 00H, '(', 00H, ')', 00H, 00H, 00H
$SG71733 DB	'(', 00H, 'e', 00H, 'l', 00H, 'e', 00H, 'm', 00H, ' ', 00H
	DB	'=', 00H, '=', 00H, ' ', 00H, 'C', 00H, 'o', 00H, 'u', 00H, 'n'
	DB	00H, 't', 00H, '(', 00H, ')', 00H, ')', 00H, ' ', 00H, '|', 00H
	DB	'|', 00H, ' ', 00H, 'I', 00H, 's', 00H, 'V', 00H, 'a', 00H, 'l'
	DB	00H, 'i', 00H, 'd', 00H, 'I', 00H, 'n', 00H, 'd', 00H, 'e', 00H
	DB	'x', 00H, '(', 00H, 'e', 00H, 'l', 00H, 'e', 00H, 'm', 00H, ')'
	DB	00H, 00H, 00H
$SG71778 DB	'c', 00H, ':', 00H, '\', 00H, 'u', 00H, 's', 00H, 'e', 00H
	DB	'r', 00H, 's', 00H, '\', 00H, 'u', 00H, 's', 00H, 'e', 00H, 'r'
	DB	00H, '\', 00H, 'd', 00H, 'o', 00H, 'w', 00H, 'n', 00H, 'l', 00H
	DB	'o', 00H, 'a', 00H, 'd', 00H, 's', 00H, '\', 00H, 'x', 00H, 'a'
	DB	00H, 's', 00H, 'h', 00H, 'x', 00H, 't', 00H, '_', 00H, 'v', 00H
	DB	'0', 00H, '.', 00H, '8', 00H, '1', 00H, '_', 00H, 'r', 00H, 'e'
	DB	00H, 'v', 00H, '.', 00H, '1', 00H, '_', 00H, 'w', 00H, 'i', 00H
	DB	't', 00H, 'h', 00H, '_', 00H, 's', 00H, 'o', 00H, 'u', 00H, 'r'
	DB	00H, 'c', 00H, 'e', 00H, 's', 00H, '\', 00H, 'x', 00H, 'a', 00H
	DB	's', 00H, 'h', 00H, 'x', 00H, 't', 00H, '_', 00H, 'v', 00H, '0'
	DB	00H, '.', 00H, '8', 00H, '1', 00H, '_', 00H, 'r', 00H, 'e', 00H
	DB	'v', 00H, '.', 00H, '1', 00H, '_', 00H, 's', 00H, 'r', 00H, 'c'
	DB	00H, '\', 00H, 'g', 00H, 'a', 00H, 'm', 00H, 'e', 00H, '_', 00H
	DB	's', 00H, 'h', 00H, 'a', 00H, 'r', 00H, 'e', 00H, 'd', 00H, '\'
	DB	00H, 'u', 00H, 't', 00H, 'l', 00H, 'm', 00H, 'e', 00H, 'm', 00H
	DB	'o', 00H, 'r', 00H, 'y', 00H, '.', 00H, 'h', 00H, 00H, 00H
	ORG $+2
$SG71779 DB	'n', 00H, 'G', 00H, 'r', 00H, 'o', 00H, 'w', 00H, 'S', 00H
	DB	'i', 00H, 'z', 00H, 'e', 00H, ' ', 00H, '>', 00H, '=', 00H, ' '
	DB	00H, '0', 00H, 00H, 00H
	ORG $+2
$SG71887 DB	'c', 00H, ':', 00H, '\', 00H, 'u', 00H, 's', 00H, 'e', 00H
	DB	'r', 00H, 's', 00H, '\', 00H, 'u', 00H, 's', 00H, 'e', 00H, 'r'
	DB	00H, '\', 00H, 'd', 00H, 'o', 00H, 'w', 00H, 'n', 00H, 'l', 00H
	DB	'o', 00H, 'a', 00H, 'd', 00H, 's', 00H, '\', 00H, 'x', 00H, 'a'
	DB	00H, 's', 00H, 'h', 00H, 'x', 00H, 't', 00H, '_', 00H, 'v', 00H
	DB	'0', 00H, '.', 00H, '8', 00H, '1', 00H, '_', 00H, 'r', 00H, 'e'
	DB	00H, 'v', 00H, '.', 00H, '1', 00H, '_', 00H, 'w', 00H, 'i', 00H
	DB	't', 00H, 'h', 00H, '_', 00H, 's', 00H, 'o', 00H, 'u', 00H, 'r'
	DB	00H, 'c', 00H, 'e', 00H, 's', 00H, '\', 00H, 'x', 00H, 'a', 00H
	DB	's', 00H, 'h', 00H, 'x', 00H, 't', 00H, '_', 00H, 'v', 00H, '0'
	DB	00H, '.', 00H, '8', 00H, '1', 00H, '_', 00H, 'r', 00H, 'e', 00H
	DB	'v', 00H, '.', 00H, '1', 00H, '_', 00H, 's', 00H, 'r', 00H, 'c'
	DB	00H, '\', 00H, 'g', 00H, 'a', 00H, 'm', 00H, 'e', 00H, '_', 00H
	DB	's', 00H, 'h', 00H, 'a', 00H, 'r', 00H, 'e', 00H, 'd', 00H, '\'
	DB	00H, 'u', 00H, 't', 00H, 'l', 00H, 'r', 00H, 'b', 00H, 't', 00H
	DB	'r', 00H, 'e', 00H, 'e', 00H, '.', 00H, 'h', 00H, 00H, 00H
	ORG $+2
$SG71889 DB	'c', 00H, ':', 00H, '\', 00H, 'u', 00H, 's', 00H, 'e', 00H
	DB	'r', 00H, 's', 00H, '\', 00H, 'u', 00H, 's', 00H, 'e', 00H, 'r'
	DB	00H, '\', 00H, 'd', 00H, 'o', 00H, 'w', 00H, 'n', 00H, 'l', 00H
	DB	'o', 00H, 'a', 00H, 'd', 00H, 's', 00H, '\', 00H, 'x', 00H, 'a'
	DB	00H, 's', 00H, 'h', 00H, 'x', 00H, 't', 00H, '_', 00H, 'v', 00H
	DB	'0', 00H, '.', 00H, '8', 00H, '1', 00H, '_', 00H, 'r', 00H, 'e'
	DB	00H, 'v', 00H, '.', 00H, '1', 00H, '_', 00H, 'w', 00H, 'i', 00H
	DB	't', 00H, 'h', 00H, '_', 00H, 's', 00H, 'o', 00H, 'u', 00H, 'r'
	DB	00H, 'c', 00H, 'e', 00H, 's', 00H, '\', 00H, 'x', 00H, 'a', 00H
	DB	's', 00H, 'h', 00H, 'x', 00H, 't', 00H, '_', 00H, 'v', 00H, '0'
	DB	00H, '.', 00H, '8', 00H, '1', 00H, '_', 00H, 'r', 00H, 'e', 00H
	DB	'v', 00H, '.', 00H, '1', 00H, '_', 00H, 's', 00H, 'r', 00H, 'c'
	DB	00H, '\', 00H, 'g', 00H, 'a', 00H, 'm', 00H, 'e', 00H, '_', 00H
	DB	's', 00H, 'h', 00H, 'a', 00H, 'r', 00H, 'e', 00H, 'd', 00H, '\'
	DB	00H, 'u', 00H, 't', 00H, 'l', 00H, 'r', 00H, 'b', 00H, 't', 00H
	DB	'r', 00H, 'e', 00H, 'e', 00H, '.', 00H, 'h', 00H, 00H, 00H
	ORG $+2
$SG71891 DB	'c', 00H, ':', 00H, '\', 00H, 'u', 00H, 's', 00H, 'e', 00H
	DB	'r', 00H, 's', 00H, '\', 00H, 'u', 00H, 's', 00H, 'e', 00H, 'r'
	DB	00H, '\', 00H, 'd', 00H, 'o', 00H, 'w', 00H, 'n', 00H, 'l', 00H
	DB	'o', 00H, 'a', 00H, 'd', 00H, 's', 00H, '\', 00H, 'x', 00H, 'a'
	DB	00H, 's', 00H, 'h', 00H, 'x', 00H, 't', 00H, '_', 00H, 'v', 00H
	DB	'0', 00H, '.', 00H, '8', 00H, '1', 00H, '_', 00H, 'r', 00H, 'e'
	DB	00H, 'v', 00H, '.', 00H, '1', 00H, '_', 00H, 'w', 00H, 'i', 00H
	DB	't', 00H, 'h', 00H, '_', 00H, 's', 00H, 'o', 00H, 'u', 00H, 'r'
	DB	00H, 'c', 00H, 'e', 00H, 's', 00H, '\', 00H, 'x', 00H, 'a', 00H
	DB	's', 00H, 'h', 00H, 'x', 00H, 't', 00H, '_', 00H, 'v', 00H, '0'
	DB	00H, '.', 00H, '8', 00H, '1', 00H, '_', 00H, 'r', 00H, 'e', 00H
	DB	'v', 00H, '.', 00H, '1', 00H, '_', 00H, 's', 00H, 'r', 00H, 'c'
	DB	00H, '\', 00H, 'g', 00H, 'a', 00H, 'm', 00H, 'e', 00H, '_', 00H
	DB	's', 00H, 'h', 00H, 'a', 00H, 'r', 00H, 'e', 00H, 'd', 00H, '\'
	DB	00H, 'u', 00H, 't', 00H, 'l', 00H, 'r', 00H, 'b', 00H, 't', 00H
	DB	'r', 00H, 'e', 00H, 'e', 00H, '.', 00H, 'h', 00H, 00H, 00H
	ORG $+2
$SG71892 DB	'm', 00H, '_', 00H, 'N', 00H, 'u', 00H, 'm', 00H, 'E', 00H
	DB	'l', 00H, 'e', 00H, 'm', 00H, 'e', 00H, 'n', 00H, 't', 00H, 's'
	DB	00H, ' ', 00H, '=', 00H, '=', 00H, ' ', 00H, '0', 00H, 00H, 00H
	ORG $+2
$SG71895 DB	'c', 00H, ':', 00H, '\', 00H, 'u', 00H, 's', 00H, 'e', 00H
	DB	'r', 00H, 's', 00H, '\', 00H, 'u', 00H, 's', 00H, 'e', 00H, 'r'
	DB	00H, '\', 00H, 'd', 00H, 'o', 00H, 'w', 00H, 'n', 00H, 'l', 00H
	DB	'o', 00H, 'a', 00H, 'd', 00H, 's', 00H, '\', 00H, 'x', 00H, 'a'
	DB	00H, 's', 00H, 'h', 00H, 'x', 00H, 't', 00H, '_', 00H, 'v', 00H
	DB	'0', 00H, '.', 00H, '8', 00H, '1', 00H, '_', 00H, 'r', 00H, 'e'
	DB	00H, 'v', 00H, '.', 00H, '1', 00H, '_', 00H, 'w', 00H, 'i', 00H
	DB	't', 00H, 'h', 00H, '_', 00H, 's', 00H, 'o', 00H, 'u', 00H, 'r'
	DB	00H, 'c', 00H, 'e', 00H, 's', 00H, '\', 00H, 'x', 00H, 'a', 00H
	DB	's', 00H, 'h', 00H, 'x', 00H, 't', 00H, '_', 00H, 'v', 00H, '0'
	DB	00H, '.', 00H, '8', 00H, '1', 00H, '_', 00H, 'r', 00H, 'e', 00H
	DB	'v', 00H, '.', 00H, '1', 00H, '_', 00H, 's', 00H, 'r', 00H, 'c'
	DB	00H, '\', 00H, 'g', 00H, 'a', 00H, 'm', 00H, 'e', 00H, '_', 00H
	DB	's', 00H, 'h', 00H, 'a', 00H, 'r', 00H, 'e', 00H, 'd', 00H, '\'
	DB	00H, 'u', 00H, 't', 00H, 'l', 00H, 'r', 00H, 'b', 00H, 't', 00H
	DB	'r', 00H, 'e', 00H, 'e', 00H, '.', 00H, 'h', 00H, 00H, 00H
	ORG $+2
$SG71909 DB	'c', 00H, ':', 00H, '\', 00H, 'u', 00H, 's', 00H, 'e', 00H
	DB	'r', 00H, 's', 00H, '\', 00H, 'u', 00H, 's', 00H, 'e', 00H, 'r'
	DB	00H, '\', 00H, 'd', 00H, 'o', 00H, 'w', 00H, 'n', 00H, 'l', 00H
	DB	'o', 00H, 'a', 00H, 'd', 00H, 's', 00H, '\', 00H, 'x', 00H, 'a'
	DB	00H, 's', 00H, 'h', 00H, 'x', 00H, 't', 00H, '_', 00H, 'v', 00H
	DB	'0', 00H, '.', 00H, '8', 00H, '1', 00H, '_', 00H, 'r', 00H, 'e'
	DB	00H, 'v', 00H, '.', 00H, '1', 00H, '_', 00H, 'w', 00H, 'i', 00H
	DB	't', 00H, 'h', 00H, '_', 00H, 's', 00H, 'o', 00H, 'u', 00H, 'r'
	DB	00H, 'c', 00H, 'e', 00H, 's', 00H, '\', 00H, 'x', 00H, 'a', 00H
	DB	's', 00H, 'h', 00H, 'x', 00H, 't', 00H, '_', 00H, 'v', 00H, '0'
	DB	00H, '.', 00H, '8', 00H, '1', 00H, '_', 00H, 'r', 00H, 'e', 00H
	DB	'v', 00H, '.', 00H, '1', 00H, '_', 00H, 's', 00H, 'r', 00H, 'c'
	DB	00H, '\', 00H, 'g', 00H, 'a', 00H, 'm', 00H, 'e', 00H, '_', 00H
	DB	's', 00H, 'h', 00H, 'a', 00H, 'r', 00H, 'e', 00H, 'd', 00H, '\'
	DB	00H, 'u', 00H, 't', 00H, 'l', 00H, 'r', 00H, 'b', 00H, 't', 00H
	DB	'r', 00H, 'e', 00H, 'e', 00H, '.', 00H, 'h', 00H, 00H, 00H
	ORG $+2
$SG71926 DB	'c', 00H, ':', 00H, '\', 00H, 'u', 00H, 's', 00H, 'e', 00H
	DB	'r', 00H, 's', 00H, '\', 00H, 'u', 00H, 's', 00H, 'e', 00H, 'r'
	DB	00H, '\', 00H, 'd', 00H, 'o', 00H, 'w', 00H, 'n', 00H, 'l', 00H
	DB	'o', 00H, 'a', 00H, 'd', 00H, 's', 00H, '\', 00H, 'x', 00H, 'a'
	DB	00H, 's', 00H, 'h', 00H, 'x', 00H, 't', 00H, '_', 00H, 'v', 00H
	DB	'0', 00H, '.', 00H, '8', 00H, '1', 00H, '_', 00H, 'r', 00H, 'e'
	DB	00H, 'v', 00H, '.', 00H, '1', 00H, '_', 00H, 'w', 00H, 'i', 00H
	DB	't', 00H, 'h', 00H, '_', 00H, 's', 00H, 'o', 00H, 'u', 00H, 'r'
	DB	00H, 'c', 00H, 'e', 00H, 's', 00H, '\', 00H, 'x', 00H, 'a', 00H
	DB	's', 00H, 'h', 00H, 'x', 00H, 't', 00H, '_', 00H, 'v', 00H, '0'
	DB	00H, '.', 00H, '8', 00H, '1', 00H, '_', 00H, 'r', 00H, 'e', 00H
	DB	'v', 00H, '.', 00H, '1', 00H, '_', 00H, 's', 00H, 'r', 00H, 'c'
	DB	00H, '\', 00H, 'g', 00H, 'a', 00H, 'm', 00H, 'e', 00H, '_', 00H
	DB	's', 00H, 'h', 00H, 'a', 00H, 'r', 00H, 'e', 00H, 'd', 00H, '\'
	DB	00H, 'u', 00H, 't', 00H, 'l', 00H, 'r', 00H, 'b', 00H, 't', 00H
	DB	'r', 00H, 'e', 00H, 'e', 00H, '.', 00H, 'h', 00H, 00H, 00H
	ORG $+2
$SG71927 DB	'&', 00H, 'm', 00H, '_', 00H, 'L', 00H, 'e', 00H, 's', 00H
	DB	's', 00H, 'F', 00H, 'u', 00H, 'n', 00H, 'c', 00H, 00H, 00H
$SG72017 DB	'c', 00H, ':', 00H, '\', 00H, 'u', 00H, 's', 00H, 'e', 00H
	DB	'r', 00H, 's', 00H, '\', 00H, 'u', 00H, 's', 00H, 'e', 00H, 'r'
	DB	00H, '\', 00H, 'd', 00H, 'o', 00H, 'w', 00H, 'n', 00H, 'l', 00H
	DB	'o', 00H, 'a', 00H, 'd', 00H, 's', 00H, '\', 00H, 'x', 00H, 'a'
	DB	00H, 's', 00H, 'h', 00H, 'x', 00H, 't', 00H, '_', 00H, 'v', 00H
	DB	'0', 00H, '.', 00H, '8', 00H, '1', 00H, '_', 00H, 'r', 00H, 'e'
	DB	00H, 'v', 00H, '.', 00H, '1', 00H, '_', 00H, 'w', 00H, 'i', 00H
	DB	't', 00H, 'h', 00H, '_', 00H, 's', 00H, 'o', 00H, 'u', 00H, 'r'
	DB	00H, 'c', 00H, 'e', 00H, 's', 00H, '\', 00H, 'x', 00H, 'a', 00H
	DB	's', 00H, 'h', 00H, 'x', 00H, 't', 00H, '_', 00H, 'v', 00H, '0'
	DB	00H, '.', 00H, '8', 00H, '1', 00H, '_', 00H, 'r', 00H, 'e', 00H
	DB	'v', 00H, '.', 00H, '1', 00H, '_', 00H, 's', 00H, 'r', 00H, 'c'
	DB	00H, '\', 00H, 'g', 00H, 'a', 00H, 'm', 00H, 'e', 00H, '_', 00H
	DB	's', 00H, 'h', 00H, 'a', 00H, 'r', 00H, 'e', 00H, 'd', 00H, '\'
	DB	00H, 'u', 00H, 't', 00H, 'l', 00H, 'a', 00H, 'r', 00H, 'r', 00H
	DB	'a', 00H, 'y', 00H, '.', 00H, 'h', 00H, 00H, 00H
$SG72203 DB	'0', 00H, 00H, 00H
$SG72018 DB	'I', 00H, 's', 00H, 'V', 00H, 'a', 00H, 'l', 00H, 'i', 00H
	DB	'd', 00H, 'I', 00H, 'n', 00H, 'd', 00H, 'e', 00H, 'x', 00H, '('
	DB	00H, 'e', 00H, 'l', 00H, 'e', 00H, 'm', 00H, ')', 00H, ' ', 00H
	DB	'|', 00H, '|', 00H, ' ', 00H, '(', 00H, ' ', 00H, 'm', 00H, '_'
	DB	00H, 'S', 00H, 'i', 00H, 'z', 00H, 'e', 00H, ' ', 00H, '=', 00H
	DB	'=', 00H, ' ', 00H, '0', 00H, ' ', 00H, ')', 00H, ' ', 00H, '|'
	DB	00H, '|', 00H, ' ', 00H, '(', 00H, ' ', 00H, 'n', 00H, 'u', 00H
	DB	'm', 00H, ' ', 00H, '=', 00H, '=', 00H, ' ', 00H, '0', 00H, ' '
	DB	00H, ')', 00H, 00H, 00H
$SG72209 DB	'0', 00H, 00H, 00H
$SG72092 DB	'c', 00H, ':', 00H, '\', 00H, 'u', 00H, 's', 00H, 'e', 00H
	DB	'r', 00H, 's', 00H, '\', 00H, 'u', 00H, 's', 00H, 'e', 00H, 'r'
	DB	00H, '\', 00H, 'd', 00H, 'o', 00H, 'w', 00H, 'n', 00H, 'l', 00H
	DB	'o', 00H, 'a', 00H, 'd', 00H, 's', 00H, '\', 00H, 'x', 00H, 'a'
	DB	00H, 's', 00H, 'h', 00H, 'x', 00H, 't', 00H, '_', 00H, 'v', 00H
	DB	'0', 00H, '.', 00H, '8', 00H, '1', 00H, '_', 00H, 'r', 00H, 'e'
	DB	00H, 'v', 00H, '.', 00H, '1', 00H, '_', 00H, 'w', 00H, 'i', 00H
	DB	't', 00H, 'h', 00H, '_', 00H, 's', 00H, 'o', 00H, 'u', 00H, 'r'
	DB	00H, 'c', 00H, 'e', 00H, 's', 00H, '\', 00H, 'x', 00H, 'a', 00H
	DB	's', 00H, 'h', 00H, 'x', 00H, 't', 00H, '_', 00H, 'v', 00H, '0'
	DB	00H, '.', 00H, '8', 00H, '1', 00H, '_', 00H, 'r', 00H, 'e', 00H
	DB	'v', 00H, '.', 00H, '1', 00H, '_', 00H, 's', 00H, 'r', 00H, 'c'
	DB	00H, '\', 00H, 'g', 00H, 'a', 00H, 'm', 00H, 'e', 00H, '_', 00H
	DB	's', 00H, 'h', 00H, 'a', 00H, 'r', 00H, 'e', 00H, 'd', 00H, '\'
	DB	00H, 'u', 00H, 't', 00H, 'l', 00H, 'r', 00H, 'b', 00H, 't', 00H
	DB	'r', 00H, 'e', 00H, 'e', 00H, '.', 00H, 'h', 00H, 00H, 00H
	ORG $+2
$SG72093 DB	'm', 00H, '_', 00H, 'E', 00H, 'l', 00H, 'e', 00H, 'm', 00H
	DB	'e', 00H, 'n', 00H, 't', 00H, 's', 00H, '.', 00H, 'I', 00H, 's'
	DB	00H, 'V', 00H, 'a', 00H, 'l', 00H, 'i', 00H, 'd', 00H, 'I', 00H
	DB	't', 00H, 'e', 00H, 'r', 00H, 'a', 00H, 't', 00H, 'o', 00H, 'r'
	DB	00H, '(', 00H, ' ', 00H, 'm', 00H, '_', 00H, 'L', 00H, 'a', 00H
	DB	's', 00H, 't', 00H, 'A', 00H, 'l', 00H, 'l', 00H, 'o', 00H, 'c'
	DB	00H, ' ', 00H, ')', 00H, ' ', 00H, '|', 00H, '|', 00H, ' ', 00H
	DB	'm', 00H, '_', 00H, 'N', 00H, 'u', 00H, 'm', 00H, 'E', 00H, 'l'
	DB	00H, 'e', 00H, 'm', 00H, 'e', 00H, 'n', 00H, 't', 00H, 's', 00H
	DB	' ', 00H, '=', 00H, '=', 00H, ' ', 00H, '0', 00H, 00H, 00H
$SG72095 DB	'c', 00H, ':', 00H, '\', 00H, 'u', 00H, 's', 00H, 'e', 00H
	DB	'r', 00H, 's', 00H, '\', 00H, 'u', 00H, 's', 00H, 'e', 00H, 'r'
	DB	00H, '\', 00H, 'd', 00H, 'o', 00H, 'w', 00H, 'n', 00H, 'l', 00H
	DB	'o', 00H, 'a', 00H, 'd', 00H, 's', 00H, '\', 00H, 'x', 00H, 'a'
	DB	00H, 's', 00H, 'h', 00H, 'x', 00H, 't', 00H, '_', 00H, 'v', 00H
	DB	'0', 00H, '.', 00H, '8', 00H, '1', 00H, '_', 00H, 'r', 00H, 'e'
	DB	00H, 'v', 00H, '.', 00H, '1', 00H, '_', 00H, 'w', 00H, 'i', 00H
	DB	't', 00H, 'h', 00H, '_', 00H, 's', 00H, 'o', 00H, 'u', 00H, 'r'
	DB	00H, 'c', 00H, 'e', 00H, 's', 00H, '\', 00H, 'x', 00H, 'a', 00H
	DB	's', 00H, 'h', 00H, 'x', 00H, 't', 00H, '_', 00H, 'v', 00H, '0'
	DB	00H, '.', 00H, '8', 00H, '1', 00H, '_', 00H, 'r', 00H, 'e', 00H
	DB	'v', 00H, '.', 00H, '1', 00H, '_', 00H, 's', 00H, 'r', 00H, 'c'
	DB	00H, '\', 00H, 'g', 00H, 'a', 00H, 'm', 00H, 'e', 00H, '_', 00H
	DB	's', 00H, 'h', 00H, 'a', 00H, 'r', 00H, 'e', 00H, 'd', 00H, '\'
	DB	00H, 'u', 00H, 't', 00H, 'l', 00H, 'r', 00H, 'b', 00H, 't', 00H
	DB	'r', 00H, 'e', 00H, 'e', 00H, '.', 00H, 'h', 00H, 00H, 00H
	ORG $+2
$SG72096 DB	'm', 00H, '_', 00H, 'E', 00H, 'l', 00H, 'e', 00H, 'm', 00H
	DB	'e', 00H, 'n', 00H, 't', 00H, 's', 00H, '.', 00H, 'I', 00H, 's'
	DB	00H, 'V', 00H, 'a', 00H, 'l', 00H, 'i', 00H, 'd', 00H, 'I', 00H
	DB	't', 00H, 'e', 00H, 'r', 00H, 'a', 00H, 't', 00H, 'o', 00H, 'r'
	DB	00H, '(', 00H, ' ', 00H, 'i', 00H, 't', 00H, ' ', 00H, ')', 00H
	DB	00H, 00H
	ORG $+2
$SG72098 DB	'CUtlRBTree overflow!', 0aH, 00H
	ORG $+2
$SG72200 DB	'n', 00H, 'u', 00H, 'm', 00H, ' ', 00H, '>', 00H, ' ', 00H
	DB	'0', 00H, 00H, 00H
$SG72213 DB	'm', 00H, '_', 00H, 'p', 00H, 'M', 00H, 'e', 00H, 'm', 00H
	DB	'o', 00H, 'r', 00H, 'y', 00H, 00H, 00H
$SG72099 DB	'c', 00H, ':', 00H, '\', 00H, 'u', 00H, 's', 00H, 'e', 00H
	DB	'r', 00H, 's', 00H, '\', 00H, 'u', 00H, 's', 00H, 'e', 00H, 'r'
	DB	00H, '\', 00H, 'd', 00H, 'o', 00H, 'w', 00H, 'n', 00H, 'l', 00H
	DB	'o', 00H, 'a', 00H, 'd', 00H, 's', 00H, '\', 00H, 'x', 00H, 'a'
	DB	00H, 's', 00H, 'h', 00H, 'x', 00H, 't', 00H, '_', 00H, 'v', 00H
	DB	'0', 00H, '.', 00H, '8', 00H, '1', 00H, '_', 00H, 'r', 00H, 'e'
	DB	00H, 'v', 00H, '.', 00H, '1', 00H, '_', 00H, 'w', 00H, 'i', 00H
	DB	't', 00H, 'h', 00H, '_', 00H, 's', 00H, 'o', 00H, 'u', 00H, 'r'
	DB	00H, 'c', 00H, 'e', 00H, 's', 00H, '\', 00H, 'x', 00H, 'a', 00H
	DB	's', 00H, 'h', 00H, 'x', 00H, 't', 00H, '_', 00H, 'v', 00H, '0'
	DB	00H, '.', 00H, '8', 00H, '1', 00H, '_', 00H, 'r', 00H, 'e', 00H
	DB	'v', 00H, '.', 00H, '1', 00H, '_', 00H, 's', 00H, 'r', 00H, 'c'
	DB	00H, '\', 00H, 'g', 00H, 'a', 00H, 'm', 00H, 'e', 00H, '_', 00H
	DB	's', 00H, 'h', 00H, 'a', 00H, 'r', 00H, 'e', 00H, 'd', 00H, '\'
	DB	00H, 'u', 00H, 't', 00H, 'l', 00H, 'r', 00H, 'b', 00H, 't', 00H
	DB	'r', 00H, 'e', 00H, 'e', 00H, '.', 00H, 'h', 00H, 00H, 00H
	ORG $+2
$SG72100 DB	'm', 00H, '_', 00H, 'E', 00H, 'l', 00H, 'e', 00H, 'm', 00H
	DB	'e', 00H, 'n', 00H, 't', 00H, 's', 00H, '.', 00H, 'I', 00H, 's'
	DB	00H, 'V', 00H, 'a', 00H, 'l', 00H, 'i', 00H, 'd', 00H, 'I', 00H
	DB	't', 00H, 'e', 00H, 'r', 00H, 'a', 00H, 't', 00H, 'o', 00H, 'r'
	DB	00H, '(', 00H, ' ', 00H, 'm', 00H, '_', 00H, 'L', 00H, 'a', 00H
	DB	's', 00H, 't', 00H, 'A', 00H, 'l', 00H, 'l', 00H, 'o', 00H, 'c'
	DB	00H, ' ', 00H, ')', 00H, 00H, 00H
$SG72215 DB	'm', 00H, '_', 00H, 'p', 00H, 'M', 00H, 'e', 00H, 'm', 00H
	DB	'o', 00H, 'r', 00H, 'y', 00H, 00H, 00H
$SG72199 DB	'c', 00H, ':', 00H, '\', 00H, 'u', 00H, 's', 00H, 'e', 00H
	DB	'r', 00H, 's', 00H, '\', 00H, 'u', 00H, 's', 00H, 'e', 00H, 'r'
	DB	00H, '\', 00H, 'd', 00H, 'o', 00H, 'w', 00H, 'n', 00H, 'l', 00H
	DB	'o', 00H, 'a', 00H, 'd', 00H, 's', 00H, '\', 00H, 'x', 00H, 'a'
	DB	00H, 's', 00H, 'h', 00H, 'x', 00H, 't', 00H, '_', 00H, 'v', 00H
	DB	'0', 00H, '.', 00H, '8', 00H, '1', 00H, '_', 00H, 'r', 00H, 'e'
	DB	00H, 'v', 00H, '.', 00H, '1', 00H, '_', 00H, 'w', 00H, 'i', 00H
	DB	't', 00H, 'h', 00H, '_', 00H, 's', 00H, 'o', 00H, 'u', 00H, 'r'
	DB	00H, 'c', 00H, 'e', 00H, 's', 00H, '\', 00H, 'x', 00H, 'a', 00H
	DB	's', 00H, 'h', 00H, 'x', 00H, 't', 00H, '_', 00H, 'v', 00H, '0'
	DB	00H, '.', 00H, '8', 00H, '1', 00H, '_', 00H, 'r', 00H, 'e', 00H
	DB	'v', 00H, '.', 00H, '1', 00H, '_', 00H, 's', 00H, 'r', 00H, 'c'
	DB	00H, '\', 00H, 'g', 00H, 'a', 00H, 'm', 00H, 'e', 00H, '_', 00H
	DB	's', 00H, 'h', 00H, 'a', 00H, 'r', 00H, 'e', 00H, 'd', 00H, '\'
	DB	00H, 'u', 00H, 't', 00H, 'l', 00H, 'm', 00H, 'e', 00H, 'm', 00H
	DB	'o', 00H, 'r', 00H, 'y', 00H, '.', 00H, 'h', 00H, 00H, 00H
	ORG $+2
$SG72202 DB	'c', 00H, ':', 00H, '\', 00H, 'u', 00H, 's', 00H, 'e', 00H
	DB	'r', 00H, 's', 00H, '\', 00H, 'u', 00H, 's', 00H, 'e', 00H, 'r'
	DB	00H, '\', 00H, 'd', 00H, 'o', 00H, 'w', 00H, 'n', 00H, 'l', 00H
	DB	'o', 00H, 'a', 00H, 'd', 00H, 's', 00H, '\', 00H, 'x', 00H, 'a'
	DB	00H, 's', 00H, 'h', 00H, 'x', 00H, 't', 00H, '_', 00H, 'v', 00H
	DB	'0', 00H, '.', 00H, '8', 00H, '1', 00H, '_', 00H, 'r', 00H, 'e'
	DB	00H, 'v', 00H, '.', 00H, '1', 00H, '_', 00H, 'w', 00H, 'i', 00H
	DB	't', 00H, 'h', 00H, '_', 00H, 's', 00H, 'o', 00H, 'u', 00H, 'r'
	DB	00H, 'c', 00H, 'e', 00H, 's', 00H, '\', 00H, 'x', 00H, 'a', 00H
	DB	's', 00H, 'h', 00H, 'x', 00H, 't', 00H, '_', 00H, 'v', 00H, '0'
	DB	00H, '.', 00H, '8', 00H, '1', 00H, '_', 00H, 'r', 00H, 'e', 00H
	DB	'v', 00H, '.', 00H, '1', 00H, '_', 00H, 's', 00H, 'r', 00H, 'c'
	DB	00H, '\', 00H, 'g', 00H, 'a', 00H, 'm', 00H, 'e', 00H, '_', 00H
	DB	's', 00H, 'h', 00H, 'a', 00H, 'r', 00H, 'e', 00H, 'd', 00H, '\'
	DB	00H, 'u', 00H, 't', 00H, 'l', 00H, 'm', 00H, 'e', 00H, 'm', 00H
	DB	'o', 00H, 'r', 00H, 'y', 00H, '.', 00H, 'h', 00H, 00H, 00H
	ORG $+2
$SG72208 DB	'c', 00H, ':', 00H, '\', 00H, 'u', 00H, 's', 00H, 'e', 00H
	DB	'r', 00H, 's', 00H, '\', 00H, 'u', 00H, 's', 00H, 'e', 00H, 'r'
	DB	00H, '\', 00H, 'd', 00H, 'o', 00H, 'w', 00H, 'n', 00H, 'l', 00H
	DB	'o', 00H, 'a', 00H, 'd', 00H, 's', 00H, '\', 00H, 'x', 00H, 'a'
	DB	00H, 's', 00H, 'h', 00H, 'x', 00H, 't', 00H, '_', 00H, 'v', 00H
	DB	'0', 00H, '.', 00H, '8', 00H, '1', 00H, '_', 00H, 'r', 00H, 'e'
	DB	00H, 'v', 00H, '.', 00H, '1', 00H, '_', 00H, 'w', 00H, 'i', 00H
	DB	't', 00H, 'h', 00H, '_', 00H, 's', 00H, 'o', 00H, 'u', 00H, 'r'
	DB	00H, 'c', 00H, 'e', 00H, 's', 00H, '\', 00H, 'x', 00H, 'a', 00H
	DB	's', 00H, 'h', 00H, 'x', 00H, 't', 00H, '_', 00H, 'v', 00H, '0'
	DB	00H, '.', 00H, '8', 00H, '1', 00H, '_', 00H, 'r', 00H, 'e', 00H
	DB	'v', 00H, '.', 00H, '1', 00H, '_', 00H, 's', 00H, 'r', 00H, 'c'
	DB	00H, '\', 00H, 'g', 00H, 'a', 00H, 'm', 00H, 'e', 00H, '_', 00H
	DB	's', 00H, 'h', 00H, 'a', 00H, 'r', 00H, 'e', 00H, 'd', 00H, '\'
	DB	00H, 'u', 00H, 't', 00H, 'l', 00H, 'm', 00H, 'e', 00H, 'm', 00H
	DB	'o', 00H, 'r', 00H, 'y', 00H, '.', 00H, 'h', 00H, 00H, 00H
	ORG $+2
$SG72212 DB	'c', 00H, ':', 00H, '\', 00H, 'u', 00H, 's', 00H, 'e', 00H
	DB	'r', 00H, 's', 00H, '\', 00H, 'u', 00H, 's', 00H, 'e', 00H, 'r'
	DB	00H, '\', 00H, 'd', 00H, 'o', 00H, 'w', 00H, 'n', 00H, 'l', 00H
	DB	'o', 00H, 'a', 00H, 'd', 00H, 's', 00H, '\', 00H, 'x', 00H, 'a'
	DB	00H, 's', 00H, 'h', 00H, 'x', 00H, 't', 00H, '_', 00H, 'v', 00H
	DB	'0', 00H, '.', 00H, '8', 00H, '1', 00H, '_', 00H, 'r', 00H, 'e'
	DB	00H, 'v', 00H, '.', 00H, '1', 00H, '_', 00H, 'w', 00H, 'i', 00H
	DB	't', 00H, 'h', 00H, '_', 00H, 's', 00H, 'o', 00H, 'u', 00H, 'r'
	DB	00H, 'c', 00H, 'e', 00H, 's', 00H, '\', 00H, 'x', 00H, 'a', 00H
	DB	's', 00H, 'h', 00H, 'x', 00H, 't', 00H, '_', 00H, 'v', 00H, '0'
	DB	00H, '.', 00H, '8', 00H, '1', 00H, '_', 00H, 'r', 00H, 'e', 00H
	DB	'v', 00H, '.', 00H, '1', 00H, '_', 00H, 's', 00H, 'r', 00H, 'c'
	DB	00H, '\', 00H, 'g', 00H, 'a', 00H, 'm', 00H, 'e', 00H, '_', 00H
	DB	's', 00H, 'h', 00H, 'a', 00H, 'r', 00H, 'e', 00H, 'd', 00H, '\'
	DB	00H, 'u', 00H, 't', 00H, 'l', 00H, 'm', 00H, 'e', 00H, 'm', 00H
	DB	'o', 00H, 'r', 00H, 'y', 00H, '.', 00H, 'h', 00H, 00H, 00H
	ORG $+2
$SG72214 DB	'c', 00H, ':', 00H, '\', 00H, 'u', 00H, 's', 00H, 'e', 00H
	DB	'r', 00H, 's', 00H, '\', 00H, 'u', 00H, 's', 00H, 'e', 00H, 'r'
	DB	00H, '\', 00H, 'd', 00H, 'o', 00H, 'w', 00H, 'n', 00H, 'l', 00H
	DB	'o', 00H, 'a', 00H, 'd', 00H, 's', 00H, '\', 00H, 'x', 00H, 'a'
	DB	00H, 's', 00H, 'h', 00H, 'x', 00H, 't', 00H, '_', 00H, 'v', 00H
	DB	'0', 00H, '.', 00H, '8', 00H, '1', 00H, '_', 00H, 'r', 00H, 'e'
	DB	00H, 'v', 00H, '.', 00H, '1', 00H, '_', 00H, 'w', 00H, 'i', 00H
	DB	't', 00H, 'h', 00H, '_', 00H, 's', 00H, 'o', 00H, 'u', 00H, 'r'
	DB	00H, 'c', 00H, 'e', 00H, 's', 00H, '\', 00H, 'x', 00H, 'a', 00H
	DB	's', 00H, 'h', 00H, 'x', 00H, 't', 00H, '_', 00H, 'v', 00H, '0'
	DB	00H, '.', 00H, '8', 00H, '1', 00H, '_', 00H, 'r', 00H, 'e', 00H
	DB	'v', 00H, '.', 00H, '1', 00H, '_', 00H, 's', 00H, 'r', 00H, 'c'
	DB	00H, '\', 00H, 'g', 00H, 'a', 00H, 'm', 00H, 'e', 00H, '_', 00H
	DB	's', 00H, 'h', 00H, 'a', 00H, 'r', 00H, 'e', 00H, 'd', 00H, '\'
	DB	00H, 'u', 00H, 't', 00H, 'l', 00H, 'm', 00H, 'e', 00H, 'm', 00H
	DB	'o', 00H, 'r', 00H, 'y', 00H, '.', 00H, 'h', 00H, 00H, 00H
	ORG $+2
$SG72255 DB	'c', 00H, ':', 00H, '\', 00H, 'u', 00H, 's', 00H, 'e', 00H
	DB	'r', 00H, 's', 00H, '\', 00H, 'u', 00H, 's', 00H, 'e', 00H, 'r'
	DB	00H, '\', 00H, 'd', 00H, 'o', 00H, 'w', 00H, 'n', 00H, 'l', 00H
	DB	'o', 00H, 'a', 00H, 'd', 00H, 's', 00H, '\', 00H, 'x', 00H, 'a'
	DB	00H, 's', 00H, 'h', 00H, 'x', 00H, 't', 00H, '_', 00H, 'v', 00H
	DB	'0', 00H, '.', 00H, '8', 00H, '1', 00H, '_', 00H, 'r', 00H, 'e'
	DB	00H, 'v', 00H, '.', 00H, '1', 00H, '_', 00H, 'w', 00H, 'i', 00H
	DB	't', 00H, 'h', 00H, '_', 00H, 's', 00H, 'o', 00H, 'u', 00H, 'r'
	DB	00H, 'c', 00H, 'e', 00H, 's', 00H, '\', 00H, 'x', 00H, 'a', 00H
	DB	's', 00H, 'h', 00H, 'x', 00H, 't', 00H, '_', 00H, 'v', 00H, '0'
	DB	00H, '.', 00H, '8', 00H, '1', 00H, '_', 00H, 'r', 00H, 'e', 00H
	DB	'v', 00H, '.', 00H, '1', 00H, '_', 00H, 's', 00H, 'r', 00H, 'c'
	DB	00H, '\', 00H, 'g', 00H, 'a', 00H, 'm', 00H, 'e', 00H, '_', 00H
	DB	's', 00H, 'h', 00H, 'a', 00H, 'r', 00H, 'e', 00H, 'd', 00H, '\'
	DB	00H, 'u', 00H, 't', 00H, 'l', 00H, 'm', 00H, 'e', 00H, 'm', 00H
	DB	'o', 00H, 'r', 00H, 'y', 00H, '.', 00H, 'h', 00H, 00H, 00H
	ORG $+2
$SG72256 DB	'n', 00H, 'u', 00H, 'm', 00H, ' ', 00H, '>', 00H, ' ', 00H
	DB	'0', 00H, 00H, 00H
$SG72258 DB	'c', 00H, ':', 00H, '\', 00H, 'u', 00H, 's', 00H, 'e', 00H
	DB	'r', 00H, 's', 00H, '\', 00H, 'u', 00H, 's', 00H, 'e', 00H, 'r'
	DB	00H, '\', 00H, 'd', 00H, 'o', 00H, 'w', 00H, 'n', 00H, 'l', 00H
	DB	'o', 00H, 'a', 00H, 'd', 00H, 's', 00H, '\', 00H, 'x', 00H, 'a'
	DB	00H, 's', 00H, 'h', 00H, 'x', 00H, 't', 00H, '_', 00H, 'v', 00H
	DB	'0', 00H, '.', 00H, '8', 00H, '1', 00H, '_', 00H, 'r', 00H, 'e'
	DB	00H, 'v', 00H, '.', 00H, '1', 00H, '_', 00H, 'w', 00H, 'i', 00H
	DB	't', 00H, 'h', 00H, '_', 00H, 's', 00H, 'o', 00H, 'u', 00H, 'r'
	DB	00H, 'c', 00H, 'e', 00H, 's', 00H, '\', 00H, 'x', 00H, 'a', 00H
	DB	's', 00H, 'h', 00H, 'x', 00H, 't', 00H, '_', 00H, 'v', 00H, '0'
	DB	00H, '.', 00H, '8', 00H, '1', 00H, '_', 00H, 'r', 00H, 'e', 00H
	DB	'v', 00H, '.', 00H, '1', 00H, '_', 00H, 's', 00H, 'r', 00H, 'c'
	DB	00H, '\', 00H, 'g', 00H, 'a', 00H, 'm', 00H, 'e', 00H, '_', 00H
	DB	's', 00H, 'h', 00H, 'a', 00H, 'r', 00H, 'e', 00H, 'd', 00H, '\'
	DB	00H, 'u', 00H, 't', 00H, 'l', 00H, 'm', 00H, 'e', 00H, 'm', 00H
	DB	'o', 00H, 'r', 00H, 'y', 00H, '.', 00H, 'h', 00H, 00H, 00H
	ORG $+2
$SG72259 DB	'0', 00H, 00H, 00H
$SG72265 DB	'0', 00H, 00H, 00H
$SG72264 DB	'c', 00H, ':', 00H, '\', 00H, 'u', 00H, 's', 00H, 'e', 00H
	DB	'r', 00H, 's', 00H, '\', 00H, 'u', 00H, 's', 00H, 'e', 00H, 'r'
	DB	00H, '\', 00H, 'd', 00H, 'o', 00H, 'w', 00H, 'n', 00H, 'l', 00H
	DB	'o', 00H, 'a', 00H, 'd', 00H, 's', 00H, '\', 00H, 'x', 00H, 'a'
	DB	00H, 's', 00H, 'h', 00H, 'x', 00H, 't', 00H, '_', 00H, 'v', 00H
	DB	'0', 00H, '.', 00H, '8', 00H, '1', 00H, '_', 00H, 'r', 00H, 'e'
	DB	00H, 'v', 00H, '.', 00H, '1', 00H, '_', 00H, 'w', 00H, 'i', 00H
	DB	't', 00H, 'h', 00H, '_', 00H, 's', 00H, 'o', 00H, 'u', 00H, 'r'
	DB	00H, 'c', 00H, 'e', 00H, 's', 00H, '\', 00H, 'x', 00H, 'a', 00H
	DB	's', 00H, 'h', 00H, 'x', 00H, 't', 00H, '_', 00H, 'v', 00H, '0'
	DB	00H, '.', 00H, '8', 00H, '1', 00H, '_', 00H, 'r', 00H, 'e', 00H
	DB	'v', 00H, '.', 00H, '1', 00H, '_', 00H, 's', 00H, 'r', 00H, 'c'
	DB	00H, '\', 00H, 'g', 00H, 'a', 00H, 'm', 00H, 'e', 00H, '_', 00H
	DB	's', 00H, 'h', 00H, 'a', 00H, 'r', 00H, 'e', 00H, 'd', 00H, '\'
	DB	00H, 'u', 00H, 't', 00H, 'l', 00H, 'm', 00H, 'e', 00H, 'm', 00H
	DB	'o', 00H, 'r', 00H, 'y', 00H, '.', 00H, 'h', 00H, 00H, 00H
	ORG $+2
$SG72268 DB	'c', 00H, ':', 00H, '\', 00H, 'u', 00H, 's', 00H, 'e', 00H
	DB	'r', 00H, 's', 00H, '\', 00H, 'u', 00H, 's', 00H, 'e', 00H, 'r'
	DB	00H, '\', 00H, 'd', 00H, 'o', 00H, 'w', 00H, 'n', 00H, 'l', 00H
	DB	'o', 00H, 'a', 00H, 'd', 00H, 's', 00H, '\', 00H, 'x', 00H, 'a'
	DB	00H, 's', 00H, 'h', 00H, 'x', 00H, 't', 00H, '_', 00H, 'v', 00H
	DB	'0', 00H, '.', 00H, '8', 00H, '1', 00H, '_', 00H, 'r', 00H, 'e'
	DB	00H, 'v', 00H, '.', 00H, '1', 00H, '_', 00H, 'w', 00H, 'i', 00H
	DB	't', 00H, 'h', 00H, '_', 00H, 's', 00H, 'o', 00H, 'u', 00H, 'r'
	DB	00H, 'c', 00H, 'e', 00H, 's', 00H, '\', 00H, 'x', 00H, 'a', 00H
	DB	's', 00H, 'h', 00H, 'x', 00H, 't', 00H, '_', 00H, 'v', 00H, '0'
	DB	00H, '.', 00H, '8', 00H, '1', 00H, '_', 00H, 'r', 00H, 'e', 00H
	DB	'v', 00H, '.', 00H, '1', 00H, '_', 00H, 's', 00H, 'r', 00H, 'c'
	DB	00H, '\', 00H, 'g', 00H, 'a', 00H, 'm', 00H, 'e', 00H, '_', 00H
	DB	's', 00H, 'h', 00H, 'a', 00H, 'r', 00H, 'e', 00H, 'd', 00H, '\'
	DB	00H, 'u', 00H, 't', 00H, 'l', 00H, 'm', 00H, 'e', 00H, 'm', 00H
	DB	'o', 00H, 'r', 00H, 'y', 00H, '.', 00H, 'h', 00H, 00H, 00H
	ORG $+2
$SG72269 DB	'm', 00H, '_', 00H, 'p', 00H, 'M', 00H, 'e', 00H, 'm', 00H
	DB	'o', 00H, 'r', 00H, 'y', 00H, 00H, 00H
$SG72271 DB	'm', 00H, '_', 00H, 'p', 00H, 'M', 00H, 'e', 00H, 'm', 00H
	DB	'o', 00H, 'r', 00H, 'y', 00H, 00H, 00H
$SG72270 DB	'c', 00H, ':', 00H, '\', 00H, 'u', 00H, 's', 00H, 'e', 00H
	DB	'r', 00H, 's', 00H, '\', 00H, 'u', 00H, 's', 00H, 'e', 00H, 'r'
	DB	00H, '\', 00H, 'd', 00H, 'o', 00H, 'w', 00H, 'n', 00H, 'l', 00H
	DB	'o', 00H, 'a', 00H, 'd', 00H, 's', 00H, '\', 00H, 'x', 00H, 'a'
	DB	00H, 's', 00H, 'h', 00H, 'x', 00H, 't', 00H, '_', 00H, 'v', 00H
	DB	'0', 00H, '.', 00H, '8', 00H, '1', 00H, '_', 00H, 'r', 00H, 'e'
	DB	00H, 'v', 00H, '.', 00H, '1', 00H, '_', 00H, 'w', 00H, 'i', 00H
	DB	't', 00H, 'h', 00H, '_', 00H, 's', 00H, 'o', 00H, 'u', 00H, 'r'
	DB	00H, 'c', 00H, 'e', 00H, 's', 00H, '\', 00H, 'x', 00H, 'a', 00H
	DB	's', 00H, 'h', 00H, 'x', 00H, 't', 00H, '_', 00H, 'v', 00H, '0'
	DB	00H, '.', 00H, '8', 00H, '1', 00H, '_', 00H, 'r', 00H, 'e', 00H
	DB	'v', 00H, '.', 00H, '1', 00H, '_', 00H, 's', 00H, 'r', 00H, 'c'
	DB	00H, '\', 00H, 'g', 00H, 'a', 00H, 'm', 00H, 'e', 00H, '_', 00H
	DB	's', 00H, 'h', 00H, 'a', 00H, 'r', 00H, 'e', 00H, 'd', 00H, '\'
	DB	00H, 'u', 00H, 't', 00H, 'l', 00H, 'm', 00H, 'e', 00H, 'm', 00H
	DB	'o', 00H, 'r', 00H, 'y', 00H, '.', 00H, 'h', 00H, 00H, 00H
CONST	ENDS
PUBLIC	??_H@YGXPAXIIP6EPAX0@Z@Z			; `vector constructor iterator'
PUBLIC	??__G@YGXPAX0IIP6EPAX00@Z@Z			; `vector copy constructor iterator'
PUBLIC	??2@YAPAXIPAX@Z					; operator new
PUBLIC	?UtlMemory_CalcNewAllocationCount@@YAHHHHH@Z	; UtlMemory_CalcNewAllocationCount
PUBLIC	??0CStringPool@@QAE@XZ				; CStringPool::CStringPool
PUBLIC	??1CStringPool@@QAE@XZ				; CStringPool::~CStringPool
PUBLIC	?Count@CStringPool@@QBEIXZ			; CStringPool::Count
PUBLIC	?AllocString@CStringPool@@QAEHPBD@Z		; CStringPool::AllocString
PUBLIC	?FindString@CStringPool@@QAEPBDH@Z		; CStringPool::FindString
PUBLIC	?MakeEmptyString@CStringPool@@QAEXXZ		; CStringPool::MakeEmptyString
PUBLIC	?FreeAll@CStringPool@@QAEXXZ			; CStringPool::FreeAll
PUBLIC	?Dump@CStringPool@@QAEXXZ			; CStringPool::Dump
PUBLIC	?DumpSorted@CStringPool@@QAEXXZ			; CStringPool::DumpSorted
PUBLIC	??0?$CUtlRBTree@PBDGP6A_NABQBD0@ZV?$CUtlMemory@U?$UtlRBTreeNode_t@PBDG@@G@@@@QAE@HHABQ6A_NABQBD0@Z@Z ; CUtlRBTree<char const *,unsigned short,bool (__cdecl*)(char const * const &,char const * const &),CUtlMemory<UtlRBTreeNode_t<char const *,unsigned short>,unsigned short> >::CUtlRBTree<char const *,unsigned short,bool (__cdecl*)(char const * const &,char const * const &),CUtlMemory<UtlRBTreeNode_t<char const *,unsigned short>,unsigned short> >
PUBLIC	??1?$CUtlRBTree@PBDGP6A_NABQBD0@ZV?$CUtlMemory@U?$UtlRBTreeNode_t@PBDG@@G@@@@QAE@XZ ; CUtlRBTree<char const *,unsigned short,bool (__cdecl*)(char const * const &,char const * const &),CUtlMemory<UtlRBTreeNode_t<char const *,unsigned short>,unsigned short> >::~CUtlRBTree<char const *,unsigned short,bool (__cdecl*)(char const * const &,char const * const &),CUtlMemory<UtlRBTreeNode_t<char const *,unsigned short>,unsigned short> >
PUBLIC	?Element@?$CUtlRBTree@PBDGP6A_NABQBD0@ZV?$CUtlMemory@U?$UtlRBTreeNode_t@PBDG@@G@@@@QAEAAPBDG@Z ; CUtlRBTree<char const *,unsigned short,bool (__cdecl*)(char const * const &,char const * const &),CUtlMemory<UtlRBTreeNode_t<char const *,unsigned short>,unsigned short> >::Element
PUBLIC	?Element@?$CUtlRBTree@PBDGP6A_NABQBD0@ZV?$CUtlMemory@U?$UtlRBTreeNode_t@PBDG@@G@@@@QBEABQBDG@Z ; CUtlRBTree<char const *,unsigned short,bool (__cdecl*)(char const * const &,char const * const &),CUtlMemory<UtlRBTreeNode_t<char const *,unsigned short>,unsigned short> >::Element
PUBLIC	??A?$CUtlRBTree@PBDGP6A_NABQBD0@ZV?$CUtlMemory@U?$UtlRBTreeNode_t@PBDG@@G@@@@QAEAAPBDG@Z ; CUtlRBTree<char const *,unsigned short,bool (__cdecl*)(char const * const &,char const * const &),CUtlMemory<UtlRBTreeNode_t<char const *,unsigned short>,unsigned short> >::operator[]
PUBLIC	?Root@?$CUtlRBTree@PBDGP6A_NABQBD0@ZV?$CUtlMemory@U?$UtlRBTreeNode_t@PBDG@@G@@@@QBEGXZ ; CUtlRBTree<char const *,unsigned short,bool (__cdecl*)(char const * const &,char const * const &),CUtlMemory<UtlRBTreeNode_t<char const *,unsigned short>,unsigned short> >::Root
PUBLIC	?Count@?$CUtlRBTree@PBDGP6A_NABQBD0@ZV?$CUtlMemory@U?$UtlRBTreeNode_t@PBDG@@G@@@@QBEIXZ ; CUtlRBTree<char const *,unsigned short,bool (__cdecl*)(char const * const &,char const * const &),CUtlMemory<UtlRBTreeNode_t<char const *,unsigned short>,unsigned short> >::Count
PUBLIC	?Parent@?$CUtlRBTree@PBDGP6A_NABQBD0@ZV?$CUtlMemory@U?$UtlRBTreeNode_t@PBDG@@G@@@@QBEGG@Z ; CUtlRBTree<char const *,unsigned short,bool (__cdecl*)(char const * const &,char const * const &),CUtlMemory<UtlRBTreeNode_t<char const *,unsigned short>,unsigned short> >::Parent
PUBLIC	?LeftChild@?$CUtlRBTree@PBDGP6A_NABQBD0@ZV?$CUtlMemory@U?$UtlRBTreeNode_t@PBDG@@G@@@@QBEGG@Z ; CUtlRBTree<char const *,unsigned short,bool (__cdecl*)(char const * const &,char const * const &),CUtlMemory<UtlRBTreeNode_t<char const *,unsigned short>,unsigned short> >::LeftChild
PUBLIC	?RightChild@?$CUtlRBTree@PBDGP6A_NABQBD0@ZV?$CUtlMemory@U?$UtlRBTreeNode_t@PBDG@@G@@@@QBEGG@Z ; CUtlRBTree<char const *,unsigned short,bool (__cdecl*)(char const * const &,char const * const &),CUtlMemory<UtlRBTreeNode_t<char const *,unsigned short>,unsigned short> >::RightChild
PUBLIC	?IsLeftChild@?$CUtlRBTree@PBDGP6A_NABQBD0@ZV?$CUtlMemory@U?$UtlRBTreeNode_t@PBDG@@G@@@@QBE_NG@Z ; CUtlRBTree<char const *,unsigned short,bool (__cdecl*)(char const * const &,char const * const &),CUtlMemory<UtlRBTreeNode_t<char const *,unsigned short>,unsigned short> >::IsLeftChild
PUBLIC	?IsRightChild@?$CUtlRBTree@PBDGP6A_NABQBD0@ZV?$CUtlMemory@U?$UtlRBTreeNode_t@PBDG@@G@@@@QBE_NG@Z ; CUtlRBTree<char const *,unsigned short,bool (__cdecl*)(char const * const &,char const * const &),CUtlMemory<UtlRBTreeNode_t<char const *,unsigned short>,unsigned short> >::IsRightChild
PUBLIC	?IsRoot@?$CUtlRBTree@PBDGP6A_NABQBD0@ZV?$CUtlMemory@U?$UtlRBTreeNode_t@PBDG@@G@@@@QBE_NG@Z ; CUtlRBTree<char const *,unsigned short,bool (__cdecl*)(char const * const &,char const * const &),CUtlMemory<UtlRBTreeNode_t<char const *,unsigned short>,unsigned short> >::IsRoot
PUBLIC	?IsValidIndex@?$CUtlRBTree@PBDGP6A_NABQBD0@ZV?$CUtlMemory@U?$UtlRBTreeNode_t@PBDG@@G@@@@QBE_NG@Z ; CUtlRBTree<char const *,unsigned short,bool (__cdecl*)(char const * const &,char const * const &),CUtlMemory<UtlRBTreeNode_t<char const *,unsigned short>,unsigned short> >::IsValidIndex
PUBLIC	?IsValid@?$CUtlRBTree@PBDGP6A_NABQBD0@ZV?$CUtlMemory@U?$UtlRBTreeNode_t@PBDG@@G@@@@QBE_NXZ ; CUtlRBTree<char const *,unsigned short,bool (__cdecl*)(char const * const &,char const * const &),CUtlMemory<UtlRBTreeNode_t<char const *,unsigned short>,unsigned short> >::IsValid
PUBLIC	?InvalidIndex@?$CUtlRBTree@PBDGP6A_NABQBD0@ZV?$CUtlMemory@U?$UtlRBTreeNode_t@PBDG@@G@@@@SAGXZ ; CUtlRBTree<char const *,unsigned short,bool (__cdecl*)(char const * const &,char const * const &),CUtlMemory<UtlRBTreeNode_t<char const *,unsigned short>,unsigned short> >::InvalidIndex
PUBLIC	?NewNode@?$CUtlRBTree@PBDGP6A_NABQBD0@ZV?$CUtlMemory@U?$UtlRBTreeNode_t@PBDG@@G@@@@QAEGXZ ; CUtlRBTree<char const *,unsigned short,bool (__cdecl*)(char const * const &,char const * const &),CUtlMemory<UtlRBTreeNode_t<char const *,unsigned short>,unsigned short> >::NewNode
PUBLIC	?Insert@?$CUtlRBTree@PBDGP6A_NABQBD0@ZV?$CUtlMemory@U?$UtlRBTreeNode_t@PBDG@@G@@@@QAEGABQBD@Z ; CUtlRBTree<char const *,unsigned short,bool (__cdecl*)(char const * const &,char const * const &),CUtlMemory<UtlRBTreeNode_t<char const *,unsigned short>,unsigned short> >::Insert
PUBLIC	?Find@?$CUtlRBTree@PBDGP6A_NABQBD0@ZV?$CUtlMemory@U?$UtlRBTreeNode_t@PBDG@@G@@@@QBEGABQBD@Z ; CUtlRBTree<char const *,unsigned short,bool (__cdecl*)(char const * const &,char const * const &),CUtlMemory<UtlRBTreeNode_t<char const *,unsigned short>,unsigned short> >::Find
PUBLIC	?RemoveAll@?$CUtlRBTree@PBDGP6A_NABQBD0@ZV?$CUtlMemory@U?$UtlRBTreeNode_t@PBDG@@G@@@@QAEXXZ ; CUtlRBTree<char const *,unsigned short,bool (__cdecl*)(char const * const &,char const * const &),CUtlMemory<UtlRBTreeNode_t<char const *,unsigned short>,unsigned short> >::RemoveAll
PUBLIC	?Purge@?$CUtlRBTree@PBDGP6A_NABQBD0@ZV?$CUtlMemory@U?$UtlRBTreeNode_t@PBDG@@G@@@@QAEXXZ ; CUtlRBTree<char const *,unsigned short,bool (__cdecl*)(char const * const &,char const * const &),CUtlMemory<UtlRBTreeNode_t<char const *,unsigned short>,unsigned short> >::Purge
PUBLIC	?FirstInorder@?$CUtlRBTree@PBDGP6A_NABQBD0@ZV?$CUtlMemory@U?$UtlRBTreeNode_t@PBDG@@G@@@@QBEGXZ ; CUtlRBTree<char const *,unsigned short,bool (__cdecl*)(char const * const &,char const * const &),CUtlMemory<UtlRBTreeNode_t<char const *,unsigned short>,unsigned short> >::FirstInorder
PUBLIC	?NextInorder@?$CUtlRBTree@PBDGP6A_NABQBD0@ZV?$CUtlMemory@U?$UtlRBTreeNode_t@PBDG@@G@@@@QBEGG@Z ; CUtlRBTree<char const *,unsigned short,bool (__cdecl*)(char const * const &,char const * const &),CUtlMemory<UtlRBTreeNode_t<char const *,unsigned short>,unsigned short> >::NextInorder
PUBLIC	?SetParent@?$CUtlRBTree@PBDGP6A_NABQBD0@ZV?$CUtlMemory@U?$UtlRBTreeNode_t@PBDG@@G@@@@IAEXGG@Z ; CUtlRBTree<char const *,unsigned short,bool (__cdecl*)(char const * const &,char const * const &),CUtlMemory<UtlRBTreeNode_t<char const *,unsigned short>,unsigned short> >::SetParent
PUBLIC	?SetLeftChild@?$CUtlRBTree@PBDGP6A_NABQBD0@ZV?$CUtlMemory@U?$UtlRBTreeNode_t@PBDG@@G@@@@IAEXGG@Z ; CUtlRBTree<char const *,unsigned short,bool (__cdecl*)(char const * const &,char const * const &),CUtlMemory<UtlRBTreeNode_t<char const *,unsigned short>,unsigned short> >::SetLeftChild
PUBLIC	?SetRightChild@?$CUtlRBTree@PBDGP6A_NABQBD0@ZV?$CUtlMemory@U?$UtlRBTreeNode_t@PBDG@@G@@@@IAEXGG@Z ; CUtlRBTree<char const *,unsigned short,bool (__cdecl*)(char const * const &,char const * const &),CUtlMemory<UtlRBTreeNode_t<char const *,unsigned short>,unsigned short> >::SetRightChild
PUBLIC	?LinkToParent@?$CUtlRBTree@PBDGP6A_NABQBD0@ZV?$CUtlMemory@U?$UtlRBTreeNode_t@PBDG@@G@@@@IAEXGG_N@Z ; CUtlRBTree<char const *,unsigned short,bool (__cdecl*)(char const * const &,char const * const &),CUtlMemory<UtlRBTreeNode_t<char const *,unsigned short>,unsigned short> >::LinkToParent
PUBLIC	?Links@?$CUtlRBTree@PBDGP6A_NABQBD0@ZV?$CUtlMemory@U?$UtlRBTreeNode_t@PBDG@@G@@@@IBEABU?$UtlRBTreeLinks_t@G@@G@Z ; CUtlRBTree<char const *,unsigned short,bool (__cdecl*)(char const * const &,char const * const &),CUtlMemory<UtlRBTreeNode_t<char const *,unsigned short>,unsigned short> >::Links
PUBLIC	?Links@?$CUtlRBTree@PBDGP6A_NABQBD0@ZV?$CUtlMemory@U?$UtlRBTreeNode_t@PBDG@@G@@@@IAEAAU?$UtlRBTreeLinks_t@G@@G@Z ; CUtlRBTree<char const *,unsigned short,bool (__cdecl*)(char const * const &,char const * const &),CUtlMemory<UtlRBTreeNode_t<char const *,unsigned short>,unsigned short> >::Links
PUBLIC	?IsRed@?$CUtlRBTree@PBDGP6A_NABQBD0@ZV?$CUtlMemory@U?$UtlRBTreeNode_t@PBDG@@G@@@@IBE_NG@Z ; CUtlRBTree<char const *,unsigned short,bool (__cdecl*)(char const * const &,char const * const &),CUtlMemory<UtlRBTreeNode_t<char const *,unsigned short>,unsigned short> >::IsRed
PUBLIC	?Color@?$CUtlRBTree@PBDGP6A_NABQBD0@ZV?$CUtlMemory@U?$UtlRBTreeNode_t@PBDG@@G@@@@IBE?AW4NodeColor_t@1@G@Z ; CUtlRBTree<char const *,unsigned short,bool (__cdecl*)(char const * const &,char const * const &),CUtlMemory<UtlRBTreeNode_t<char const *,unsigned short>,unsigned short> >::Color
PUBLIC	?SetColor@?$CUtlRBTree@PBDGP6A_NABQBD0@ZV?$CUtlMemory@U?$UtlRBTreeNode_t@PBDG@@G@@@@IAEXGW4NodeColor_t@1@@Z ; CUtlRBTree<char const *,unsigned short,bool (__cdecl*)(char const * const &,char const * const &),CUtlMemory<UtlRBTreeNode_t<char const *,unsigned short>,unsigned short> >::SetColor
PUBLIC	?RotateLeft@?$CUtlRBTree@PBDGP6A_NABQBD0@ZV?$CUtlMemory@U?$UtlRBTreeNode_t@PBDG@@G@@@@IAEXG@Z ; CUtlRBTree<char const *,unsigned short,bool (__cdecl*)(char const * const &,char const * const &),CUtlMemory<UtlRBTreeNode_t<char const *,unsigned short>,unsigned short> >::RotateLeft
PUBLIC	?RotateRight@?$CUtlRBTree@PBDGP6A_NABQBD0@ZV?$CUtlMemory@U?$UtlRBTreeNode_t@PBDG@@G@@@@IAEXG@Z ; CUtlRBTree<char const *,unsigned short,bool (__cdecl*)(char const * const &,char const * const &),CUtlMemory<UtlRBTreeNode_t<char const *,unsigned short>,unsigned short> >::RotateRight
PUBLIC	?InsertRebalance@?$CUtlRBTree@PBDGP6A_NABQBD0@ZV?$CUtlMemory@U?$UtlRBTreeNode_t@PBDG@@G@@@@IAEXG@Z ; CUtlRBTree<char const *,unsigned short,bool (__cdecl*)(char const * const &,char const * const &),CUtlMemory<UtlRBTreeNode_t<char const *,unsigned short>,unsigned short> >::InsertRebalance
PUBLIC	?InsertAt@?$CUtlRBTree@PBDGP6A_NABQBD0@ZV?$CUtlMemory@U?$UtlRBTreeNode_t@PBDG@@G@@@@IAEGG_N@Z ; CUtlRBTree<char const *,unsigned short,bool (__cdecl*)(char const * const &,char const * const &),CUtlMemory<UtlRBTreeNode_t<char const *,unsigned short>,unsigned short> >::InsertAt
PUBLIC	?FindInsertionPosition@?$CUtlRBTree@PBDGP6A_NABQBD0@ZV?$CUtlMemory@U?$UtlRBTreeNode_t@PBDG@@G@@@@IAEXABQBDAAGAA_N@Z ; CUtlRBTree<char const *,unsigned short,bool (__cdecl*)(char const * const &,char const * const &),CUtlMemory<UtlRBTreeNode_t<char const *,unsigned short>,unsigned short> >::FindInsertionPosition
PUBLIC	??0?$CUtlMemory@U?$UtlRBTreeNode_t@PBDG@@G@@QAE@HH@Z ; CUtlMemory<UtlRBTreeNode_t<char const *,unsigned short>,unsigned short>::CUtlMemory<UtlRBTreeNode_t<char const *,unsigned short>,unsigned short>
PUBLIC	??1?$CUtlMemory@U?$UtlRBTreeNode_t@PBDG@@G@@QAE@XZ ; CUtlMemory<UtlRBTreeNode_t<char const *,unsigned short>,unsigned short>::~CUtlMemory<UtlRBTreeNode_t<char const *,unsigned short>,unsigned short>
PUBLIC	?First@?$CUtlMemory@U?$UtlRBTreeNode_t@PBDG@@G@@QBE?AVIterator_t@1@XZ ; CUtlMemory<UtlRBTreeNode_t<char const *,unsigned short>,unsigned short>::First
PUBLIC	?Next@?$CUtlMemory@U?$UtlRBTreeNode_t@PBDG@@G@@QBE?AVIterator_t@1@ABV21@@Z ; CUtlMemory<UtlRBTreeNode_t<char const *,unsigned short>,unsigned short>::Next
PUBLIC	?GetIndex@?$CUtlMemory@U?$UtlRBTreeNode_t@PBDG@@G@@QBEGABVIterator_t@1@@Z ; CUtlMemory<UtlRBTreeNode_t<char const *,unsigned short>,unsigned short>::GetIndex
PUBLIC	?IsIdxAfter@?$CUtlMemory@U?$UtlRBTreeNode_t@PBDG@@G@@QBE_NGABVIterator_t@1@@Z ; CUtlMemory<UtlRBTreeNode_t<char const *,unsigned short>,unsigned short>::IsIdxAfter
PUBLIC	?IsValidIterator@?$CUtlMemory@U?$UtlRBTreeNode_t@PBDG@@G@@QBE_NABVIterator_t@1@@Z ; CUtlMemory<UtlRBTreeNode_t<char const *,unsigned short>,unsigned short>::IsValidIterator
PUBLIC	?InvalidIterator@?$CUtlMemory@U?$UtlRBTreeNode_t@PBDG@@G@@QBE?AVIterator_t@1@XZ ; CUtlMemory<UtlRBTreeNode_t<char const *,unsigned short>,unsigned short>::InvalidIterator
PUBLIC	??A?$CUtlMemory@U?$UtlRBTreeNode_t@PBDG@@G@@QAEAAU?$UtlRBTreeNode_t@PBDG@@G@Z ; CUtlMemory<UtlRBTreeNode_t<char const *,unsigned short>,unsigned short>::operator[]
PUBLIC	??A?$CUtlMemory@U?$UtlRBTreeNode_t@PBDG@@G@@QBEABU?$UtlRBTreeNode_t@PBDG@@G@Z ; CUtlMemory<UtlRBTreeNode_t<char const *,unsigned short>,unsigned short>::operator[]
PUBLIC	?IsIdxValid@?$CUtlMemory@U?$UtlRBTreeNode_t@PBDG@@G@@QBE_NG@Z ; CUtlMemory<UtlRBTreeNode_t<char const *,unsigned short>,unsigned short>::IsIdxValid
PUBLIC	?InvalidIndex@?$CUtlMemory@U?$UtlRBTreeNode_t@PBDG@@G@@SAGXZ ; CUtlMemory<UtlRBTreeNode_t<char const *,unsigned short>,unsigned short>::InvalidIndex
PUBLIC	?Base@?$CUtlMemory@U?$UtlRBTreeNode_t@PBDG@@G@@QAEPAU?$UtlRBTreeNode_t@PBDG@@XZ ; CUtlMemory<UtlRBTreeNode_t<char const *,unsigned short>,unsigned short>::Base
PUBLIC	?Grow@?$CUtlMemory@U?$UtlRBTreeNode_t@PBDG@@G@@QAEXH@Z ; CUtlMemory<UtlRBTreeNode_t<char const *,unsigned short>,unsigned short>::Grow
PUBLIC	?Purge@?$CUtlMemory@U?$UtlRBTreeNode_t@PBDG@@G@@QAEXXZ ; CUtlMemory<UtlRBTreeNode_t<char const *,unsigned short>,unsigned short>::Purge
PUBLIC	?IsExternallyAllocated@?$CUtlMemory@U?$UtlRBTreeNode_t@PBDG@@G@@QBE_NXZ ; CUtlMemory<UtlRBTreeNode_t<char const *,unsigned short>,unsigned short>::IsExternallyAllocated
PUBLIC	?IsReadOnly@?$CUtlMemory@U?$UtlRBTreeNode_t@PBDG@@G@@QBE_NXZ ; CUtlMemory<UtlRBTreeNode_t<char const *,unsigned short>,unsigned short>::IsReadOnly
PUBLIC	?ValidateGrowSize@?$CUtlMemory@U?$UtlRBTreeNode_t@PBDG@@G@@IAEXXZ ; CUtlMemory<UtlRBTreeNode_t<char const *,unsigned short>,unsigned short>::ValidateGrowSize
PUBLIC	??0Iterator_t@?$CUtlMemory@U?$UtlRBTreeNode_t@PBDG@@G@@QAE@G@Z ; CUtlMemory<UtlRBTreeNode_t<char const *,unsigned short>,unsigned short>::Iterator_t::Iterator_t
PUBLIC	??8Iterator_t@?$CUtlMemory@U?$UtlRBTreeNode_t@PBDG@@G@@QBE_NV01@@Z ; CUtlMemory<UtlRBTreeNode_t<char const *,unsigned short>,unsigned short>::Iterator_t::operator==
PUBLIC	??9Iterator_t@?$CUtlMemory@U?$UtlRBTreeNode_t@PBDG@@G@@QBE_NV01@@Z ; CUtlMemory<UtlRBTreeNode_t<char const *,unsigned short>,unsigned short>::Iterator_t::operator!=
PUBLIC	?ResetDbgInfo@?$CUtlRBTree@PBDGP6A_NABQBD0@ZV?$CUtlMemory@U?$UtlRBTreeNode_t@PBDG@@G@@@@IAEXXZ ; CUtlRBTree<char const *,unsigned short,bool (__cdecl*)(char const * const &,char const * const &),CUtlMemory<UtlRBTreeNode_t<char const *,unsigned short>,unsigned short> >::ResetDbgInfo
PUBLIC	??$CopyConstruct@PBD@@YAXPAPBDABQBD@Z		; CopyConstruct<char const *>
PUBLIC	??$Destruct@PBD@@YAXPAPBD@Z			; Destruct<char const *>
PUBLIC	??$Construct@PBD@@YAXPAPBD@Z			; Construct<char const *>
PUBLIC	?g_GameStringPool@@3VCStringPool@@A		; g_GameStringPool
PUBLIC	??_C@_1MO@LCPOAHHB@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAu?$AAs?$AAe?$AAr?$AA?2?$AAd@ ; `string'
PUBLIC	??_C@_1BM@PFNFCCHH@?$AA?$CB?$AAI?$AAs?$AAR?$AAe?$AAa?$AAd?$AAO?$AAn?$AAl?$AAy?$AA?$CI?$AA?$CJ@ ; `string'
PUBLIC	??_C@_1BM@CKILBAKK@?$AAI?$AAs?$AAI?$AAd?$AAx?$AAV?$AAa?$AAl?$AAi?$AAd?$AA?$CI?$AAi?$AA?$CJ@ ; `string'
PUBLIC	?s_Sentinel@?1??Links@?$CUtlRBTree@PBDGP6A_NABQBD0@ZV?$CUtlMemory@U?$UtlRBTreeNode_t@PBDG@@G@@@@IBEABU?$UtlRBTreeLinks_t@G@@G@Z@4U3@A ; `CUtlRBTree<char const *,unsigned short,bool (__cdecl*)(char const * const &,char const * const &),CUtlMemory<UtlRBTreeNode_t<char const *,unsigned short>,unsigned short> >::Links'::`2'::s_Sentinel
PUBLIC	?$TSS0@?1??Links@?$CUtlRBTree@PBDGP6A_NABQBD0@ZV?$CUtlMemory@U?$UtlRBTreeNode_t@PBDG@@G@@@@IBEABU?$UtlRBTreeLinks_t@G@@G@Z@4HA ; TSS0<`template-parameter-2',CUtlRBTree<char const *,unsigned short,bool (__cdecl*)(char const * const &,char const * const &),CUtlMemory<UtlRBTreeNode_t<char const *,unsigned short>,unsigned short> >::nks,unsigned int,`generic-class-parameter-0',G::lRBTreeLinks_t,unsigned short>
PUBLIC	??_C@_1MO@CDOOJGLP@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAu?$AAs?$AAe?$AAr?$AA?2?$AAd@ ; `string'
PUBLIC	??_C@_1CI@BLCAOE@?$AAi?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AAI?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AAI?$AAn?$AAd@ ; `string'
EXTRN	_atexit:PROC
EXTRN	__Init_thread_header:PROC
EXTRN	__Init_thread_abort:PROC
EXTRN	__Init_thread_footer:PROC
EXTRN	_memset:PROC
EXTRN	_strdup:PROC
EXTRN	_free:PROC
EXTRN	_malloc:PROC
EXTRN	_realloc:PROC
EXTRN	?Q_strncmp@@YAHPBD0H@Z:PROC			; Q_strncmp
EXTRN	?Msg@@YAXPBDZZ:PROC				; Msg
EXTRN	__wassert:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	__Init_thread_epoch:DWORD
EXTRN	?g_engfuncs@@3Uenginefuncs_s@@A:BYTE		; g_engfuncs
EXTRN	?g_physfuncs@@3Userver_physics_api_s@@A:BYTE	; g_physfuncs
EXTRN	___security_cookie:DWORD
EXTRN	__tls_array:DWORD
EXTRN	__tls_index:DWORD
_BSS	SEGMENT
?g_GameStringPool@@3VCStringPool@@A DB 01cH DUP (?)	; g_GameStringPool
_BSS	ENDS
;	COMDAT ?s_Sentinel@?1??Links@?$CUtlRBTree@PBDGP6A_NABQBD0@ZV?$CUtlMemory@U?$UtlRBTreeNode_t@PBDG@@G@@@@IBEABU?$UtlRBTreeLinks_t@G@@G@Z@4U3@A
_BSS	SEGMENT
?s_Sentinel@?1??Links@?$CUtlRBTree@PBDGP6A_NABQBD0@ZV?$CUtlMemory@U?$UtlRBTreeNode_t@PBDG@@G@@@@IBEABU?$UtlRBTreeLinks_t@G@@G@Z@4U3@A DQ 01H DUP (?) ; `CUtlRBTree<char const *,unsigned short,bool (__cdecl*)(char const * const &,char const * const &),CUtlMemory<UtlRBTreeNode_t<char const *,unsigned short>,unsigned short> >::Links'::`2'::s_Sentinel
_BSS	ENDS
;	COMDAT ?$TSS0@?1??Links@?$CUtlRBTree@PBDGP6A_NABQBD0@ZV?$CUtlMemory@U?$UtlRBTreeNode_t@PBDG@@G@@@@IBEABU?$UtlRBTreeLinks_t@G@@G@Z@4HA
_BSS	SEGMENT
?$TSS0@?1??Links@?$CUtlRBTree@PBDGP6A_NABQBD0@ZV?$CUtlMemory@U?$UtlRBTreeNode_t@PBDG@@G@@@@IBEABU?$UtlRBTreeLinks_t@G@@G@Z@4HA DD 01H DUP (?) ; TSS0<`template-parameter-2',CUtlRBTree<char const *,unsigned short,bool (__cdecl*)(char const * const &,char const * const &),CUtlMemory<UtlRBTreeNode_t<char const *,unsigned short>,unsigned short> >::nks,unsigned int,`generic-class-parameter-0',G::lRBTreeLinks_t,unsigned short>
_BSS	ENDS
CRT$XCU	SEGMENT
?g_GameStringPool$initializer$@@3P6AXXZA DD FLAT:??__Eg_GameStringPool@@YAXXZ ; g_GameStringPool$initializer$
CRT$XCU	ENDS
;	COMDAT ??_C@_1CI@BLCAOE@?$AAi?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AAI?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AAI?$AAn?$AAd@
CONST	SEGMENT
??_C@_1CI@BLCAOE@?$AAi?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AAI?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AAI?$AAn?$AAd@ DB 'i'
	DB	00H, ' ', 00H, '!', 00H, '=', 00H, ' ', 00H, 'I', 00H, 'n', 00H
	DB	'v', 00H, 'a', 00H, 'l', 00H, 'i', 00H, 'd', 00H, 'I', 00H, 'n'
	DB	00H, 'd', 00H, 'e', 00H, 'x', 00H, '(', 00H, ')', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1MO@CDOOJGLP@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAu?$AAs?$AAe?$AAr?$AA?2?$AAd@
CONST	SEGMENT
??_C@_1MO@CDOOJGLP@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAu?$AAs?$AAe?$AAr?$AA?2?$AAd@ DB 'c'
	DB	00H, ':', 00H, '\', 00H, 'u', 00H, 's', 00H, 'e', 00H, 'r', 00H
	DB	's', 00H, '\', 00H, 'u', 00H, 's', 00H, 'e', 00H, 'r', 00H, '\'
	DB	00H, 'd', 00H, 'o', 00H, 'w', 00H, 'n', 00H, 'l', 00H, 'o', 00H
	DB	'a', 00H, 'd', 00H, 's', 00H, '\', 00H, 'x', 00H, 'a', 00H, 's'
	DB	00H, 'h', 00H, 'x', 00H, 't', 00H, '_', 00H, 'v', 00H, '0', 00H
	DB	'.', 00H, '8', 00H, '1', 00H, '_', 00H, 'r', 00H, 'e', 00H, 'v'
	DB	00H, '.', 00H, '1', 00H, '_', 00H, 'w', 00H, 'i', 00H, 't', 00H
	DB	'h', 00H, '_', 00H, 's', 00H, 'o', 00H, 'u', 00H, 'r', 00H, 'c'
	DB	00H, 'e', 00H, 's', 00H, '\', 00H, 'x', 00H, 'a', 00H, 's', 00H
	DB	'h', 00H, 'x', 00H, 't', 00H, '_', 00H, 'v', 00H, '0', 00H, '.'
	DB	00H, '8', 00H, '1', 00H, '_', 00H, 'r', 00H, 'e', 00H, 'v', 00H
	DB	'.', 00H, '1', 00H, '_', 00H, 's', 00H, 'r', 00H, 'c', 00H, '\'
	DB	00H, 'g', 00H, 'a', 00H, 'm', 00H, 'e', 00H, '_', 00H, 's', 00H
	DB	'h', 00H, 'a', 00H, 'r', 00H, 'e', 00H, 'd', 00H, '\', 00H, 'u'
	DB	00H, 't', 00H, 'l', 00H, 'r', 00H, 'b', 00H, 't', 00H, 'r', 00H
	DB	'e', 00H, 'e', 00H, '.', 00H, 'h', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1BM@CKILBAKK@?$AAI?$AAs?$AAI?$AAd?$AAx?$AAV?$AAa?$AAl?$AAi?$AAd?$AA?$CI?$AAi?$AA?$CJ@
CONST	SEGMENT
??_C@_1BM@CKILBAKK@?$AAI?$AAs?$AAI?$AAd?$AAx?$AAV?$AAa?$AAl?$AAi?$AAd?$AA?$CI?$AAi?$AA?$CJ@ DB 'I'
	DB	00H, 's', 00H, 'I', 00H, 'd', 00H, 'x', 00H, 'V', 00H, 'a', 00H
	DB	'l', 00H, 'i', 00H, 'd', 00H, '(', 00H, 'i', 00H, ')', 00H, 00H
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_1BM@PFNFCCHH@?$AA?$CB?$AAI?$AAs?$AAR?$AAe?$AAa?$AAd?$AAO?$AAn?$AAl?$AAy?$AA?$CI?$AA?$CJ@
CONST	SEGMENT
??_C@_1BM@PFNFCCHH@?$AA?$CB?$AAI?$AAs?$AAR?$AAe?$AAa?$AAd?$AAO?$AAn?$AAl?$AAy?$AA?$CI?$AA?$CJ@ DB '!'
	DB	00H, 'I', 00H, 's', 00H, 'R', 00H, 'e', 00H, 'a', 00H, 'd', 00H
	DB	'O', 00H, 'n', 00H, 'l', 00H, 'y', 00H, '(', 00H, ')', 00H, 00H
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_1MO@LCPOAHHB@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAu?$AAs?$AAe?$AAr?$AA?2?$AAd@
CONST	SEGMENT
??_C@_1MO@LCPOAHHB@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAu?$AAs?$AAe?$AAr?$AA?2?$AAd@ DB 'c'
	DB	00H, ':', 00H, '\', 00H, 'u', 00H, 's', 00H, 'e', 00H, 'r', 00H
	DB	's', 00H, '\', 00H, 'u', 00H, 's', 00H, 'e', 00H, 'r', 00H, '\'
	DB	00H, 'd', 00H, 'o', 00H, 'w', 00H, 'n', 00H, 'l', 00H, 'o', 00H
	DB	'a', 00H, 'd', 00H, 's', 00H, '\', 00H, 'x', 00H, 'a', 00H, 's'
	DB	00H, 'h', 00H, 'x', 00H, 't', 00H, '_', 00H, 'v', 00H, '0', 00H
	DB	'.', 00H, '8', 00H, '1', 00H, '_', 00H, 'r', 00H, 'e', 00H, 'v'
	DB	00H, '.', 00H, '1', 00H, '_', 00H, 'w', 00H, 'i', 00H, 't', 00H
	DB	'h', 00H, '_', 00H, 's', 00H, 'o', 00H, 'u', 00H, 'r', 00H, 'c'
	DB	00H, 'e', 00H, 's', 00H, '\', 00H, 'x', 00H, 'a', 00H, 's', 00H
	DB	'h', 00H, 'x', 00H, 't', 00H, '_', 00H, 'v', 00H, '0', 00H, '.'
	DB	00H, '8', 00H, '1', 00H, '_', 00H, 'r', 00H, 'e', 00H, 'v', 00H
	DB	'.', 00H, '1', 00H, '_', 00H, 's', 00H, 'r', 00H, 'c', 00H, '\'
	DB	00H, 'g', 00H, 'a', 00H, 'm', 00H, 'e', 00H, '_', 00H, 's', 00H
	DB	'h', 00H, 'a', 00H, 'r', 00H, 'e', 00H, 'd', 00H, '\', 00H, 'u'
	DB	00H, 't', 00H, 'l', 00H, 'm', 00H, 'e', 00H, 'm', 00H, 'o', 00H
	DB	'r', 00H, 'y', 00H, '.', 00H, 'h', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??1?$CUtlMemory@U?$UtlRBTreeNode_t@PBDG@@G@@QAE@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?Links@?$CUtlRBTree@PBDGP6A_NABQBD0@ZV?$CUtlMemory@U?$UtlRBTreeNode_t@PBDG@@G@@@@IBEABU?$UtlRBTreeLinks_t@G@@G@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?Links@?$CUtlRBTree@PBDGP6A_NABQBD0@ZV?$CUtlMemory@U?$UtlRBTreeNode_t@PBDG@@G@@@@IBEABU?$UtlRBTreeLinks_t@G@@G@Z$0
__ehfuncinfo$?Links@?$CUtlRBTree@PBDGP6A_NABQBD0@ZV?$CUtlMemory@U?$UtlRBTreeNode_t@PBDG@@G@@@@IBEABU?$UtlRBTreeLinks_t@G@@G@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?Links@?$CUtlRBTree@PBDGP6A_NABQBD0@ZV?$CUtlMemory@U?$UtlRBTreeNode_t@PBDG@@G@@@@IBEABU?$UtlRBTreeLinks_t@G@@G@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??1?$CUtlRBTree@PBDGP6A_NABQBD0@ZV?$CUtlMemory@U?$UtlRBTreeNode_t@PBDG@@G@@@@QAE@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$CUtlRBTree@PBDGP6A_NABQBD0@ZV?$CUtlMemory@U?$UtlRBTreeNode_t@PBDG@@G@@@@QAE@HHABQ6A_NABQBD0@Z@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$CUtlRBTree@PBDGP6A_NABQBD0@ZV?$CUtlMemory@U?$UtlRBTreeNode_t@PBDG@@G@@@@QAE@HHABQ6A_NABQBD0@Z@Z$0
__ehfuncinfo$??0?$CUtlRBTree@PBDGP6A_NABQBD0@ZV?$CUtlMemory@U?$UtlRBTreeNode_t@PBDG@@G@@@@QAE@HHABQ6A_NABQBD0@Z@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$CUtlRBTree@PBDGP6A_NABQBD0@ZV?$CUtlMemory@U?$UtlRBTreeNode_t@PBDG@@G@@@@QAE@HHABQ6A_NABQBD0@Z@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
xdata$x	SEGMENT
__unwindtable$??0CStringPool@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0CStringPool@@QAE@XZ$0
__ehfuncinfo$??1CStringPool@@QAE@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
__ehfuncinfo$??0CStringPool@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0CStringPool@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xashxt_v0.81_rev.1_with_sources\xashxt_v0.81_rev.1_src\game_shared\utlmemory.h
;	COMDAT ??$Construct@PBD@@YAXPAPBD@Z
_TEXT	SEGMENT
$T1 = -4						; size = 4
_pMemory$ = 8						; size = 4
??$Construct@PBD@@YAXPAPBD@Z PROC			; Construct<char const *>, COMDAT

; 37   : {

	push	ebp
	mov	ebp, esp
	push	ecx

; 38   : 	new( pMemory ) T;

	mov	eax, DWORD PTR _pMemory$[ebp]
	push	eax
	push	4
	call	??2@YAPAXIPAX@Z				; operator new
	add	esp, 8
	mov	DWORD PTR $T1[ebp], eax

; 39   : }

	mov	esp, ebp
	pop	ebp
	ret	0
??$Construct@PBD@@YAXPAPBD@Z ENDP			; Construct<char const *>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xashxt_v0.81_rev.1_with_sources\xashxt_v0.81_rev.1_src\game_shared\utlmemory.h
;	COMDAT ??$Destruct@PBD@@YAXPAPBD@Z
_TEXT	SEGMENT
_pMemory$ = 8						; size = 4
??$Destruct@PBD@@YAXPAPBD@Z PROC			; Destruct<char const *>, COMDAT

; 49   : {

	push	ebp
	mov	ebp, esp

; 50   : 	pMemory->~T();
; 51   : 
; 52   : #ifdef _DEBUG
; 53   : 	memset( pMemory, 0xDD, sizeof(T) );

	push	4
	push	221					; 000000ddH
	mov	eax, DWORD PTR _pMemory$[ebp]
	push	eax
	call	_memset
	add	esp, 12					; 0000000cH

; 54   : #endif
; 55   : }

	pop	ebp
	ret	0
??$Destruct@PBD@@YAXPAPBD@Z ENDP			; Destruct<char const *>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xashxt_v0.81_rev.1_with_sources\xashxt_v0.81_rev.1_src\game_shared\utlmemory.h
;	COMDAT ??$CopyConstruct@PBD@@YAXPAPBDABQBD@Z
_TEXT	SEGMENT
$T1 = -4						; size = 4
_pMemory$ = 8						; size = 4
_src$ = 12						; size = 4
??$CopyConstruct@PBD@@YAXPAPBDABQBD@Z PROC		; CopyConstruct<char const *>, COMDAT

; 43   : {

	push	ebp
	mov	ebp, esp
	push	ecx

; 44   : 	new( pMemory ) T(src);

	mov	eax, DWORD PTR _pMemory$[ebp]
	push	eax
	push	4
	call	??2@YAPAXIPAX@Z				; operator new
	add	esp, 8
	mov	DWORD PTR $T1[ebp], eax
	mov	ecx, DWORD PTR $T1[ebp]
	mov	edx, DWORD PTR _src$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR [ecx], eax

; 45   : }

	mov	esp, ebp
	pop	ebp
	ret	0
??$CopyConstruct@PBD@@YAXPAPBDABQBD@Z ENDP		; CopyConstruct<char const *>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xashxt_v0.81_rev.1_with_sources\xashxt_v0.81_rev.1_src\server\strings.cpp
_TEXT	SEGMENT
tv69 = -4						; size = 4
_pszLeft$ = 8						; size = 4
_pszRight$ = 12						; size = 4
?StrLess@@YA_NABQBD0@Z PROC				; StrLess

; 23   : {

	push	ebp
	mov	ebp, esp
	push	ecx

; 24   : 	return ( Q_strcmp( pszLeft, pszRight) < 0 );

	push	99999					; 0001869fH
	mov	eax, DWORD PTR _pszRight$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	edx, DWORD PTR _pszLeft$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	call	?Q_strncmp@@YAHPBD0H@Z			; Q_strncmp
	add	esp, 12					; 0000000cH
	test	eax, eax
	jge	SHORT $LN3@StrLess
	mov	DWORD PTR tv69[ebp], 1
	jmp	SHORT $LN4@StrLess
$LN3@StrLess:
	mov	DWORD PTR tv69[ebp], 0
$LN4@StrLess:
	mov	al, BYTE PTR tv69[ebp]

; 25   : }

	mov	esp, ebp
	pop	ebp
	ret	0
?StrLess@@YA_NABQBD0@Z ENDP				; StrLess
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??__Fg_GameStringPool@@YAXXZ
text$yd	SEGMENT
??__Fg_GameStringPool@@YAXXZ PROC			; `dynamic atexit destructor for 'g_GameStringPool'', COMDAT
	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET ?g_GameStringPool@@3VCStringPool@@A ; g_GameStringPool
	call	??1CStringPool@@QAE@XZ			; CStringPool::~CStringPool
	pop	ebp
	ret	0
??__Fg_GameStringPool@@YAXXZ ENDP			; `dynamic atexit destructor for 'g_GameStringPool''
text$yd	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xashxt_v0.81_rev.1_with_sources\xashxt_v0.81_rev.1_src\server\strings.cpp
;	COMDAT ??__Eg_GameStringPool@@YAXXZ
text$di	SEGMENT
??__Eg_GameStringPool@@YAXXZ PROC			; `dynamic initializer for 'g_GameStringPool'', COMDAT

; 20   : CStringPool g_GameStringPool;

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET ?g_GameStringPool@@3VCStringPool@@A ; g_GameStringPool
	call	??0CStringPool@@QAE@XZ			; CStringPool::CStringPool
	push	OFFSET ??__Fg_GameStringPool@@YAXXZ	; `dynamic atexit destructor for 'g_GameStringPool''
	call	_atexit
	add	esp, 4
	pop	ebp
	ret	0
??__Eg_GameStringPool@@YAXXZ ENDP			; `dynamic initializer for 'g_GameStringPool''
text$di	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xashxt_v0.81_rev.1_with_sources\xashxt_v0.81_rev.1_src\game_shared\utlrbtree.h
;	COMDAT ?ResetDbgInfo@?$CUtlRBTree@PBDGP6A_NABQBD0@ZV?$CUtlMemory@U?$UtlRBTreeNode_t@PBDG@@G@@@@IAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?ResetDbgInfo@?$CUtlRBTree@PBDGP6A_NABQBD0@ZV?$CUtlMemory@U?$UtlRBTreeNode_t@PBDG@@G@@@@IAEXXZ PROC ; CUtlRBTree<char const *,unsigned short,bool (__cdecl*)(char const * const &,char const * const &),CUtlMemory<UtlRBTreeNode_t<char const *,unsigned short>,unsigned short> >::ResetDbgInfo, COMDAT
; _this$ = ecx

; 293  : 	{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 294  : 		m_pElements = (Node_t*)m_Elements.Base();

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	?Base@?$CUtlMemory@U?$UtlRBTreeNode_t@PBDG@@G@@QAEPAU?$UtlRBTreeNode_t@PBDG@@XZ ; CUtlMemory<UtlRBTreeNode_t<char const *,unsigned short>,unsigned short>::Base
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+24], eax

; 295  : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
?ResetDbgInfo@?$CUtlRBTree@PBDGP6A_NABQBD0@ZV?$CUtlMemory@U?$UtlRBTreeNode_t@PBDG@@G@@@@IAEXXZ ENDP ; CUtlRBTree<char const *,unsigned short,bool (__cdecl*)(char const * const &,char const * const &),CUtlMemory<UtlRBTreeNode_t<char const *,unsigned short>,unsigned short> >::ResetDbgInfo
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xashxt_v0.81_rev.1_with_sources\xashxt_v0.81_rev.1_src\game_shared\utlmemory.h
;	COMDAT ??9Iterator_t@?$CUtlMemory@U?$UtlRBTreeNode_t@PBDG@@G@@QBE_NV01@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv68 = -4						; size = 4
_it$ = 8						; size = 2
??9Iterator_t@?$CUtlMemory@U?$UtlRBTreeNode_t@PBDG@@G@@QBE_NV01@@Z PROC ; CUtlMemory<UtlRBTreeNode_t<char const *,unsigned short>,unsigned short>::Iterator_t::operator!=, COMDAT
; _this$ = ecx

; 86   : 		bool operator!=( const Iterator_t it ) const	{ return index != it.index; }

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax]
	movzx	edx, WORD PTR _it$[ebp]
	cmp	ecx, edx
	je	SHORT $LN3@operator
	mov	DWORD PTR tv68[ebp], 1
	jmp	SHORT $LN4@operator
$LN3@operator:
	mov	DWORD PTR tv68[ebp], 0
$LN4@operator:
	mov	al, BYTE PTR tv68[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??9Iterator_t@?$CUtlMemory@U?$UtlRBTreeNode_t@PBDG@@G@@QBE_NV01@@Z ENDP ; CUtlMemory<UtlRBTreeNode_t<char const *,unsigned short>,unsigned short>::Iterator_t::operator!=
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xashxt_v0.81_rev.1_with_sources\xashxt_v0.81_rev.1_src\game_shared\utlmemory.h
;	COMDAT ??8Iterator_t@?$CUtlMemory@U?$UtlRBTreeNode_t@PBDG@@G@@QBE_NV01@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv68 = -4						; size = 4
_it$ = 8						; size = 2
??8Iterator_t@?$CUtlMemory@U?$UtlRBTreeNode_t@PBDG@@G@@QBE_NV01@@Z PROC ; CUtlMemory<UtlRBTreeNode_t<char const *,unsigned short>,unsigned short>::Iterator_t::operator==, COMDAT
; _this$ = ecx

; 85   : 		bool operator==( const Iterator_t it ) const	{ return index == it.index; }

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax]
	movzx	edx, WORD PTR _it$[ebp]
	cmp	ecx, edx
	jne	SHORT $LN3@operator
	mov	DWORD PTR tv68[ebp], 1
	jmp	SHORT $LN4@operator
$LN3@operator:
	mov	DWORD PTR tv68[ebp], 0
$LN4@operator:
	mov	al, BYTE PTR tv68[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??8Iterator_t@?$CUtlMemory@U?$UtlRBTreeNode_t@PBDG@@G@@QBE_NV01@@Z ENDP ; CUtlMemory<UtlRBTreeNode_t<char const *,unsigned short>,unsigned short>::Iterator_t::operator==
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xashxt_v0.81_rev.1_with_sources\xashxt_v0.81_rev.1_src\game_shared\utlmemory.h
;	COMDAT ??0Iterator_t@?$CUtlMemory@U?$UtlRBTreeNode_t@PBDG@@G@@QAE@G@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_i$ = 8							; size = 2
??0Iterator_t@?$CUtlMemory@U?$UtlRBTreeNode_t@PBDG@@G@@QAE@G@Z PROC ; CUtlMemory<UtlRBTreeNode_t<char const *,unsigned short>,unsigned short>::Iterator_t::Iterator_t, COMDAT
; _this$ = ecx

; 82   : 		Iterator_t( I i ) : index( i ) {}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR _i$[ebp]
	mov	WORD PTR [eax], cx
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0Iterator_t@?$CUtlMemory@U?$UtlRBTreeNode_t@PBDG@@G@@QAE@G@Z ENDP ; CUtlMemory<UtlRBTreeNode_t<char const *,unsigned short>,unsigned short>::Iterator_t::Iterator_t
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xashxt_v0.81_rev.1_with_sources\xashxt_v0.81_rev.1_src\game_shared\utlmemory.h
;	COMDAT ?ValidateGrowSize@?$CUtlMemory@U?$UtlRBTreeNode_t@PBDG@@G@@IAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?ValidateGrowSize@?$CUtlMemory@U?$UtlRBTreeNode_t@PBDG@@G@@IAEXXZ PROC ; CUtlMemory<UtlRBTreeNode_t<char const *,unsigned short>,unsigned short>::ValidateGrowSize, COMDAT
; _this$ = ecx

; 148  : 	{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 149  : #ifdef _X360
; 150  : 		if ( m_nGrowSize && m_nGrowSize != EXTERNAL_BUFFER_MARKER )
; 151  : 		{
; 152  : 			// Max grow size at 128 bytes on XBOX
; 153  : 			const int MAX_GROW = 128;
; 154  : 			if ( m_nGrowSize * sizeof(T) > MAX_GROW )
; 155  : 			{
; 156  : 				m_nGrowSize = max( 1, MAX_GROW / sizeof(T) );
; 157  : 			}
; 158  : 		}
; 159  : #endif
; 160  : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
?ValidateGrowSize@?$CUtlMemory@U?$UtlRBTreeNode_t@PBDG@@G@@IAEXXZ ENDP ; CUtlMemory<UtlRBTreeNode_t<char const *,unsigned short>,unsigned short>::ValidateGrowSize
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xashxt_v0.81_rev.1_with_sources\xashxt_v0.81_rev.1_src\game_shared\utlmemory.h
;	COMDAT ?IsReadOnly@?$CUtlMemory@U?$UtlRBTreeNode_t@PBDG@@G@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv66 = -4						; size = 4
?IsReadOnly@?$CUtlMemory@U?$UtlRBTreeNode_t@PBDG@@G@@QBE_NXZ PROC ; CUtlMemory<UtlRBTreeNode_t<char const *,unsigned short>,unsigned short>::IsReadOnly, COMDAT
; _this$ = ecx

; 467  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 468  : 	return (m_nGrowSize == EXTERNAL_CONST_BUFFER_MARKER);

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+8], -2			; fffffffeH
	jne	SHORT $LN3@IsReadOnly
	mov	DWORD PTR tv66[ebp], 1
	jmp	SHORT $LN4@IsReadOnly
$LN3@IsReadOnly:
	mov	DWORD PTR tv66[ebp], 0
$LN4@IsReadOnly:
	mov	al, BYTE PTR tv66[ebp]

; 469  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?IsReadOnly@?$CUtlMemory@U?$UtlRBTreeNode_t@PBDG@@G@@QBE_NXZ ENDP ; CUtlMemory<UtlRBTreeNode_t<char const *,unsigned short>,unsigned short>::IsReadOnly
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xashxt_v0.81_rev.1_with_sources\xashxt_v0.81_rev.1_src\game_shared\utlmemory.h
;	COMDAT ?IsExternallyAllocated@?$CUtlMemory@U?$UtlRBTreeNode_t@PBDG@@G@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv66 = -4						; size = 4
?IsExternallyAllocated@?$CUtlMemory@U?$UtlRBTreeNode_t@PBDG@@G@@QBE_NXZ PROC ; CUtlMemory<UtlRBTreeNode_t<char const *,unsigned short>,unsigned short>::IsExternallyAllocated, COMDAT
; _this$ = ecx

; 457  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 458  : 	return (m_nGrowSize < 0);

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+8], 0
	jge	SHORT $LN3@IsExternal
	mov	DWORD PTR tv66[ebp], 1
	jmp	SHORT $LN4@IsExternal
$LN3@IsExternal:
	mov	DWORD PTR tv66[ebp], 0
$LN4@IsExternal:
	mov	al, BYTE PTR tv66[ebp]

; 459  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?IsExternallyAllocated@?$CUtlMemory@U?$UtlRBTreeNode_t@PBDG@@G@@QBE_NXZ ENDP ; CUtlMemory<UtlRBTreeNode_t<char const *,unsigned short>,unsigned short>::IsExternallyAllocated
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xashxt_v0.81_rev.1_with_sources\xashxt_v0.81_rev.1_src\game_shared\utlmemory.h
;	COMDAT ?Purge@?$CUtlMemory@U?$UtlRBTreeNode_t@PBDG@@G@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Purge@?$CUtlMemory@U?$UtlRBTreeNode_t@PBDG@@G@@QAEXXZ PROC ; CUtlMemory<UtlRBTreeNode_t<char const *,unsigned short>,unsigned short>::Purge, COMDAT
; _this$ = ecx

; 645  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 646  : 	if ( !IsExternallyAllocated() )

	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsExternallyAllocated@?$CUtlMemory@U?$UtlRBTreeNode_t@PBDG@@G@@QBE_NXZ ; CUtlMemory<UtlRBTreeNode_t<char const *,unsigned short>,unsigned short>::IsExternallyAllocated
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN1@Purge

; 647  : 	{
; 648  : 		if (m_pMemory)

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx], 0
	je	SHORT $LN3@Purge

; 649  : 		{
; 650  : 			free( (void*)m_pMemory );

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	call	_free
	add	esp, 4

; 651  : 			m_pMemory = 0;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], 0
$LN3@Purge:

; 652  : 		}
; 653  : 		m_nAllocationCount = 0;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], 0
$LN1@Purge:

; 654  : 	}
; 655  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?Purge@?$CUtlMemory@U?$UtlRBTreeNode_t@PBDG@@G@@QAEXXZ ENDP ; CUtlMemory<UtlRBTreeNode_t<char const *,unsigned short>,unsigned short>::Purge
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xashxt_v0.81_rev.1_with_sources\xashxt_v0.81_rev.1_src\game_shared\utlmemory.h
;	COMDAT ?Grow@?$CUtlMemory@U?$UtlRBTreeNode_t@PBDG@@G@@QAEXH@Z
_TEXT	SEGMENT
_nAllocationRequested$ = -8				; size = 4
_this$ = -4						; size = 4
_num$ = 8						; size = 4
?Grow@?$CUtlMemory@U?$UtlRBTreeNode_t@PBDG@@G@@QAEXH@Z PROC ; CUtlMemory<UtlRBTreeNode_t<char const *,unsigned short>,unsigned short>::Grow, COMDAT
; _this$ = ecx

; 560  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 561  : 	assert( num > 0 );

	cmp	DWORD PTR _num$[ebp], 0
	jg	SHORT $LN12@Grow
	push	561					; 00000231H
	push	OFFSET $SG72255
	push	OFFSET $SG72256
	call	__wassert
	add	esp, 12					; 0000000cH
$LN12@Grow:

; 562  : 
; 563  : 	if ( IsExternallyAllocated() )

	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsExternallyAllocated@?$CUtlMemory@U?$UtlRBTreeNode_t@PBDG@@G@@QBE_NXZ ; CUtlMemory<UtlRBTreeNode_t<char const *,unsigned short>,unsigned short>::IsExternallyAllocated
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN4@Grow

; 564  : 	{
; 565  : 		// Can't grow a buffer whose memory was externally allocated 
; 566  : 		assert(0);

	xor	edx, edx
	jne	SHORT $LN13@Grow
	push	566					; 00000236H
	push	OFFSET $SG72258
	push	OFFSET $SG72259
	call	__wassert
	add	esp, 12					; 0000000cH
$LN13@Grow:

; 567  : 		return;

	jmp	$LN1@Grow
$LN4@Grow:

; 568  : 	}
; 569  : 
; 570  : 	// Make sure we have at least numallocated + num allocations.
; 571  : 	// Use the grow rules specified for this memory (in m_nGrowSize)
; 572  : 	int nAllocationRequested = m_nAllocationCount + num;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	add	edx, DWORD PTR _num$[ebp]
	mov	DWORD PTR _nAllocationRequested$[ebp], edx

; 573  : 
; 574  : 	m_nAllocationCount = UtlMemory_CalcNewAllocationCount( m_nAllocationCount, m_nGrowSize, nAllocationRequested, sizeof(T) );

	push	12					; 0000000cH
	mov	eax, DWORD PTR _nAllocationRequested$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	call	?UtlMemory_CalcNewAllocationCount@@YAHHHHH@Z ; UtlMemory_CalcNewAllocationCount
	add	esp, 16					; 00000010H
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], eax

; 575  : 
; 576  : 	// if m_nAllocationRequested wraps index type I, recalculate
; 577  : 	if ( ( int )( I )m_nAllocationCount < nAllocationRequested )

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+4]
	cmp	ecx, DWORD PTR _nAllocationRequested$[ebp]
	jge	SHORT $LN5@Grow

; 578  : 	{
; 579  : 		if ( ( int )( I )m_nAllocationCount == 0 && ( int )( I )( m_nAllocationCount - 1 ) >= nAllocationRequested )

	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, WORD PTR [edx+4]
	test	eax, eax
	jne	SHORT $LN6@Grow
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	sub	edx, 1
	movzx	eax, dx
	cmp	eax, DWORD PTR _nAllocationRequested$[ebp]
	jl	SHORT $LN6@Grow

; 580  : 		{
; 581  : 			--m_nAllocationCount; // deal w/ the common case of m_nAllocationCount == MAX_USHORT + 1

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	sub	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], edx

; 582  : 		}
; 583  : 		else

	jmp	SHORT $LN5@Grow
$LN6@Grow:

; 584  : 		{
; 585  : 			if ( ( int )( I )nAllocationRequested != nAllocationRequested )

	movzx	ecx, WORD PTR _nAllocationRequested$[ebp]
	cmp	ecx, DWORD PTR _nAllocationRequested$[ebp]
	je	SHORT $LN2@Grow

; 586  : 			{
; 587  : 				// we've been asked to grow memory to a size s.t. the index type can't address the requested amount of memory
; 588  : 				assert( 0 );

	xor	edx, edx
	jne	SHORT $LN14@Grow
	push	588					; 0000024cH
	push	OFFSET $SG72264
	push	OFFSET $SG72265
	call	__wassert
	add	esp, 12					; 0000000cH
$LN14@Grow:

; 589  : 				return;

	jmp	$LN1@Grow
$LN2@Grow:

; 590  : 			}
; 591  : 			while ( ( int )( I )m_nAllocationCount < nAllocationRequested )

	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+4]
	cmp	edx, DWORD PTR _nAllocationRequested$[ebp]
	jge	SHORT $LN5@Grow

; 592  : 			{
; 593  : 				m_nAllocationCount = ( m_nAllocationCount + nAllocationRequested ) / 2;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]
	add	eax, DWORD PTR _nAllocationRequested$[ebp]
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax

; 594  : 			}

	jmp	SHORT $LN2@Grow
$LN5@Grow:

; 595  : 		}
; 596  : 	}
; 597  : 
; 598  : 	if (m_pMemory)

	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx], 0
	je	SHORT $LN9@Grow

; 599  : 	{
; 600  : 		m_pMemory = (T*)realloc( m_pMemory, m_nAllocationCount * sizeof(T) );

	mov	eax, DWORD PTR _this$[ebp]
	imul	ecx, DWORD PTR [eax+4], 12
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	call	_realloc
	add	esp, 8
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], eax

; 601  : 		assert( m_pMemory );

	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx], 0
	jne	SHORT $LN15@Grow
	push	601					; 00000259H
	push	OFFSET $SG72268
	push	OFFSET $SG72269
	call	__wassert
	add	esp, 12					; 0000000cH
$LN15@Grow:

; 602  : 	}
; 603  : 	else

	jmp	SHORT $LN1@Grow
$LN9@Grow:

; 604  : 	{
; 605  : 		m_pMemory = (T*)malloc( m_nAllocationCount * sizeof(T) );

	mov	ecx, DWORD PTR _this$[ebp]
	imul	edx, DWORD PTR [ecx+4], 12
	push	edx
	call	_malloc
	add	esp, 4
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], eax

; 606  : 		assert( m_pMemory );

	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx], 0
	jne	SHORT $LN1@Grow
	push	606					; 0000025eH
	push	OFFSET $SG72270
	push	OFFSET $SG72271
	call	__wassert
	add	esp, 12					; 0000000cH
$LN1@Grow:

; 607  : 	}
; 608  : }

	mov	esp, ebp
	pop	ebp
	ret	4
?Grow@?$CUtlMemory@U?$UtlRBTreeNode_t@PBDG@@G@@QAEXH@Z ENDP ; CUtlMemory<UtlRBTreeNode_t<char const *,unsigned short>,unsigned short>::Grow
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xashxt_v0.81_rev.1_with_sources\xashxt_v0.81_rev.1_src\game_shared\utlmemory.h
;	COMDAT ?Base@?$CUtlMemory@U?$UtlRBTreeNode_t@PBDG@@G@@QAEPAU?$UtlRBTreeNode_t@PBDG@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Base@?$CUtlMemory@U?$UtlRBTreeNode_t@PBDG@@G@@QAEPAU?$UtlRBTreeNode_t@PBDG@@XZ PROC ; CUtlMemory<UtlRBTreeNode_t<char const *,unsigned short>,unsigned short>::Base, COMDAT
; _this$ = ecx

; 487  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 488  : 	assert( !IsReadOnly() );

	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsReadOnly@?$CUtlMemory@U?$UtlRBTreeNode_t@PBDG@@G@@QBE_NXZ ; CUtlMemory<UtlRBTreeNode_t<char const *,unsigned short>,unsigned short>::IsReadOnly
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN3@Base
	push	488					; 000001e8H
	push	OFFSET ??_C@_1MO@LCPOAHHB@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAu?$AAs?$AAe?$AAr?$AA?2?$AAd@
	push	OFFSET ??_C@_1BM@PFNFCCHH@?$AA?$CB?$AAI?$AAs?$AAR?$AAe?$AAa?$AAd?$AAO?$AAn?$AAl?$AAy?$AA?$CI?$AA?$CJ@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN3@Base:

; 489  : 	return m_pMemory;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]

; 490  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?Base@?$CUtlMemory@U?$UtlRBTreeNode_t@PBDG@@G@@QAEPAU?$UtlRBTreeNode_t@PBDG@@XZ ENDP ; CUtlMemory<UtlRBTreeNode_t<char const *,unsigned short>,unsigned short>::Base
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xashxt_v0.81_rev.1_with_sources\xashxt_v0.81_rev.1_src\game_shared\utlmemory.h
;	COMDAT ?InvalidIndex@?$CUtlMemory@U?$UtlRBTreeNode_t@PBDG@@G@@SAGXZ
_TEXT	SEGMENT
?InvalidIndex@?$CUtlMemory@U?$UtlRBTreeNode_t@PBDG@@G@@SAGXZ PROC ; CUtlMemory<UtlRBTreeNode_t<char const *,unsigned short>,unsigned short>::InvalidIndex, COMDAT

; 103  : 	static I InvalidIndex() { return ( I )-1; }

	push	ebp
	mov	ebp, esp
	mov	eax, 65535				; 0000ffffH
	pop	ebp
	ret	0
?InvalidIndex@?$CUtlMemory@U?$UtlRBTreeNode_t@PBDG@@G@@SAGXZ ENDP ; CUtlMemory<UtlRBTreeNode_t<char const *,unsigned short>,unsigned short>::InvalidIndex
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xashxt_v0.81_rev.1_with_sources\xashxt_v0.81_rev.1_src\game_shared\utlmemory.h
;	COMDAT ?IsIdxValid@?$CUtlMemory@U?$UtlRBTreeNode_t@PBDG@@G@@QBE_NG@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv69 = -4						; size = 4
_i$ = 8							; size = 2
?IsIdxValid@?$CUtlMemory@U?$UtlRBTreeNode_t@PBDG@@G@@QBE_NG@Z PROC ; CUtlMemory<UtlRBTreeNode_t<char const *,unsigned short>,unsigned short>::IsIdxValid, COMDAT
; _this$ = ecx

; 520  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 521  : 	return ( ((int) i) >= 0 ) && ( ((int) i) < m_nAllocationCount );

	movzx	eax, WORD PTR _i$[ebp]
	test	eax, eax
	jl	SHORT $LN3@IsIdxValid
	movzx	ecx, WORD PTR _i$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	cmp	ecx, DWORD PTR [edx+4]
	jge	SHORT $LN3@IsIdxValid
	mov	DWORD PTR tv69[ebp], 1
	jmp	SHORT $LN4@IsIdxValid
$LN3@IsIdxValid:
	mov	DWORD PTR tv69[ebp], 0
$LN4@IsIdxValid:
	mov	al, BYTE PTR tv69[ebp]

; 522  : }

	mov	esp, ebp
	pop	ebp
	ret	4
?IsIdxValid@?$CUtlMemory@U?$UtlRBTreeNode_t@PBDG@@G@@QBE_NG@Z ENDP ; CUtlMemory<UtlRBTreeNode_t<char const *,unsigned short>,unsigned short>::IsIdxValid
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xashxt_v0.81_rev.1_with_sources\xashxt_v0.81_rev.1_src\game_shared\utlmemory.h
;	COMDAT ??A?$CUtlMemory@U?$UtlRBTreeNode_t@PBDG@@G@@QBEABU?$UtlRBTreeNode_t@PBDG@@G@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_i$ = 8							; size = 2
??A?$CUtlMemory@U?$UtlRBTreeNode_t@PBDG@@G@@QBEABU?$UtlRBTreeNode_t@PBDG@@G@Z PROC ; CUtlMemory<UtlRBTreeNode_t<char const *,unsigned short>,unsigned short>::operator[], COMDAT
; _this$ = ecx

; 431  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 432  : 	assert( IsIdxValid(i) );

	movzx	eax, WORD PTR _i$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsIdxValid@?$CUtlMemory@U?$UtlRBTreeNode_t@PBDG@@G@@QBE_NG@Z ; CUtlMemory<UtlRBTreeNode_t<char const *,unsigned short>,unsigned short>::IsIdxValid
	movzx	ecx, al
	test	ecx, ecx
	jne	SHORT $LN3@operator
	push	432					; 000001b0H
	push	OFFSET ??_C@_1MO@LCPOAHHB@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAu?$AAs?$AAe?$AAr?$AA?2?$AAd@
	push	OFFSET ??_C@_1BM@CKILBAKK@?$AAI?$AAs?$AAI?$AAd?$AAx?$AAV?$AAa?$AAl?$AAi?$AAd?$AA?$CI?$AAi?$AA?$CJ@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN3@operator:

; 433  : 	return m_pMemory[i];

	movzx	eax, WORD PTR _i$[ebp]
	imul	eax, eax, 12
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx]

; 434  : }

	mov	esp, ebp
	pop	ebp
	ret	4
??A?$CUtlMemory@U?$UtlRBTreeNode_t@PBDG@@G@@QBEABU?$UtlRBTreeNode_t@PBDG@@G@Z ENDP ; CUtlMemory<UtlRBTreeNode_t<char const *,unsigned short>,unsigned short>::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xashxt_v0.81_rev.1_with_sources\xashxt_v0.81_rev.1_src\game_shared\utlmemory.h
;	COMDAT ??A?$CUtlMemory@U?$UtlRBTreeNode_t@PBDG@@G@@QAEAAU?$UtlRBTreeNode_t@PBDG@@G@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_i$ = 8							; size = 2
??A?$CUtlMemory@U?$UtlRBTreeNode_t@PBDG@@G@@QAEAAU?$UtlRBTreeNode_t@PBDG@@G@Z PROC ; CUtlMemory<UtlRBTreeNode_t<char const *,unsigned short>,unsigned short>::operator[], COMDAT
; _this$ = ecx

; 423  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 424  : 	assert( !IsReadOnly() );

	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsReadOnly@?$CUtlMemory@U?$UtlRBTreeNode_t@PBDG@@G@@QBE_NXZ ; CUtlMemory<UtlRBTreeNode_t<char const *,unsigned short>,unsigned short>::IsReadOnly
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN3@operator
	push	424					; 000001a8H
	push	OFFSET ??_C@_1MO@LCPOAHHB@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAu?$AAs?$AAe?$AAr?$AA?2?$AAd@
	push	OFFSET ??_C@_1BM@PFNFCCHH@?$AA?$CB?$AAI?$AAs?$AAR?$AAe?$AAa?$AAd?$AAO?$AAn?$AAl?$AAy?$AA?$CI?$AA?$CJ@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN3@operator:

; 425  : 	assert( IsIdxValid(i) );

	movzx	edx, WORD PTR _i$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsIdxValid@?$CUtlMemory@U?$UtlRBTreeNode_t@PBDG@@G@@QBE_NG@Z ; CUtlMemory<UtlRBTreeNode_t<char const *,unsigned short>,unsigned short>::IsIdxValid
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN4@operator
	push	425					; 000001a9H
	push	OFFSET ??_C@_1MO@LCPOAHHB@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAu?$AAs?$AAe?$AAr?$AA?2?$AAd@
	push	OFFSET ??_C@_1BM@CKILBAKK@?$AAI?$AAs?$AAI?$AAd?$AAx?$AAV?$AAa?$AAl?$AAi?$AAd?$AA?$CI?$AAi?$AA?$CJ@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN4@operator:

; 426  : 	return m_pMemory[i];

	movzx	edx, WORD PTR _i$[ebp]
	imul	eax, edx, 12
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx]

; 427  : }

	mov	esp, ebp
	pop	ebp
	ret	4
??A?$CUtlMemory@U?$UtlRBTreeNode_t@PBDG@@G@@QAEAAU?$UtlRBTreeNode_t@PBDG@@G@Z ENDP ; CUtlMemory<UtlRBTreeNode_t<char const *,unsigned short>,unsigned short>::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xashxt_v0.81_rev.1_with_sources\xashxt_v0.81_rev.1_src\game_shared\utlmemory.h
;	COMDAT ?InvalidIterator@?$CUtlMemory@U?$UtlRBTreeNode_t@PBDG@@G@@QBE?AVIterator_t@1@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?InvalidIterator@?$CUtlMemory@U?$UtlRBTreeNode_t@PBDG@@G@@QBE?AVIterator_t@1@XZ PROC ; CUtlMemory<UtlRBTreeNode_t<char const *,unsigned short>,unsigned short>::InvalidIterator, COMDAT
; _this$ = ecx

; 93   : 	Iterator_t InvalidIterator() const					{ return Iterator_t( InvalidIndex() ); }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	call	?InvalidIndex@?$CUtlMemory@U?$UtlRBTreeNode_t@PBDG@@G@@SAGXZ ; CUtlMemory<UtlRBTreeNode_t<char const *,unsigned short>,unsigned short>::InvalidIndex
	movzx	eax, ax
	push	eax
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0Iterator_t@?$CUtlMemory@U?$UtlRBTreeNode_t@PBDG@@G@@QAE@G@Z ; CUtlMemory<UtlRBTreeNode_t<char const *,unsigned short>,unsigned short>::Iterator_t::Iterator_t
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
?InvalidIterator@?$CUtlMemory@U?$UtlRBTreeNode_t@PBDG@@G@@QBE?AVIterator_t@1@XZ ENDP ; CUtlMemory<UtlRBTreeNode_t<char const *,unsigned short>,unsigned short>::InvalidIterator
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xashxt_v0.81_rev.1_with_sources\xashxt_v0.81_rev.1_src\game_shared\utlmemory.h
;	COMDAT ?IsValidIterator@?$CUtlMemory@U?$UtlRBTreeNode_t@PBDG@@G@@QBE_NABVIterator_t@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_it$ = 8						; size = 4
?IsValidIterator@?$CUtlMemory@U?$UtlRBTreeNode_t@PBDG@@G@@QBE_NABVIterator_t@1@@Z PROC ; CUtlMemory<UtlRBTreeNode_t<char const *,unsigned short>,unsigned short>::IsValidIterator, COMDAT
; _this$ = ecx

; 92   : 	bool IsValidIterator( const Iterator_t &it ) const	{ return IsIdxValid( it.index ); }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _it$[ebp]
	movzx	ecx, WORD PTR [eax]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsIdxValid@?$CUtlMemory@U?$UtlRBTreeNode_t@PBDG@@G@@QBE_NG@Z ; CUtlMemory<UtlRBTreeNode_t<char const *,unsigned short>,unsigned short>::IsIdxValid
	mov	esp, ebp
	pop	ebp
	ret	4
?IsValidIterator@?$CUtlMemory@U?$UtlRBTreeNode_t@PBDG@@G@@QBE_NABVIterator_t@1@@Z ENDP ; CUtlMemory<UtlRBTreeNode_t<char const *,unsigned short>,unsigned short>::IsValidIterator
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xashxt_v0.81_rev.1_with_sources\xashxt_v0.81_rev.1_src\game_shared\utlmemory.h
;	COMDAT ?IsIdxAfter@?$CUtlMemory@U?$UtlRBTreeNode_t@PBDG@@G@@QBE_NGABVIterator_t@1@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv68 = -4						; size = 4
_i$ = 8							; size = 2
_it$ = 12						; size = 4
?IsIdxAfter@?$CUtlMemory@U?$UtlRBTreeNode_t@PBDG@@G@@QBE_NGABVIterator_t@1@@Z PROC ; CUtlMemory<UtlRBTreeNode_t<char const *,unsigned short>,unsigned short>::IsIdxAfter, COMDAT
; _this$ = ecx

; 91   : 	bool IsIdxAfter( I i, const Iterator_t &it ) const	{ return i > it.index; }

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
	movzx	eax, WORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _it$[ebp]
	movzx	edx, WORD PTR [ecx]
	cmp	eax, edx
	jle	SHORT $LN3@IsIdxAfter
	mov	DWORD PTR tv68[ebp], 1
	jmp	SHORT $LN4@IsIdxAfter
$LN3@IsIdxAfter:
	mov	DWORD PTR tv68[ebp], 0
$LN4@IsIdxAfter:
	mov	al, BYTE PTR tv68[ebp]
	mov	esp, ebp
	pop	ebp
	ret	8
?IsIdxAfter@?$CUtlMemory@U?$UtlRBTreeNode_t@PBDG@@G@@QBE_NGABVIterator_t@1@@Z ENDP ; CUtlMemory<UtlRBTreeNode_t<char const *,unsigned short>,unsigned short>::IsIdxAfter
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xashxt_v0.81_rev.1_with_sources\xashxt_v0.81_rev.1_src\game_shared\utlmemory.h
;	COMDAT ?GetIndex@?$CUtlMemory@U?$UtlRBTreeNode_t@PBDG@@G@@QBEGABVIterator_t@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_it$ = 8						; size = 4
?GetIndex@?$CUtlMemory@U?$UtlRBTreeNode_t@PBDG@@G@@QBEGABVIterator_t@1@@Z PROC ; CUtlMemory<UtlRBTreeNode_t<char const *,unsigned short>,unsigned short>::GetIndex, COMDAT
; _this$ = ecx

; 90   : 	I GetIndex( const Iterator_t &it ) const			{ return it.index; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _it$[ebp]
	mov	ax, WORD PTR [eax]
	mov	esp, ebp
	pop	ebp
	ret	4
?GetIndex@?$CUtlMemory@U?$UtlRBTreeNode_t@PBDG@@G@@QBEGABVIterator_t@1@@Z ENDP ; CUtlMemory<UtlRBTreeNode_t<char const *,unsigned short>,unsigned short>::GetIndex
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xashxt_v0.81_rev.1_with_sources\xashxt_v0.81_rev.1_src\game_shared\utlmemory.h
;	COMDAT ?Next@?$CUtlMemory@U?$UtlRBTreeNode_t@PBDG@@G@@QBE?AVIterator_t@1@ABV21@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv80 = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
_it$ = 12						; size = 4
?Next@?$CUtlMemory@U?$UtlRBTreeNode_t@PBDG@@G@@QBE?AVIterator_t@1@ABV21@@Z PROC ; CUtlMemory<UtlRBTreeNode_t<char const *,unsigned short>,unsigned short>::Next, COMDAT
; _this$ = ecx

; 89   : 	Iterator_t Next( const Iterator_t &it ) const		{ return Iterator_t( IsIdxValid( it.index + 1 ) ? it.index + 1 : InvalidIndex() ); }

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _it$[ebp]
	movzx	ecx, WORD PTR [eax]
	add	ecx, 1
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsIdxValid@?$CUtlMemory@U?$UtlRBTreeNode_t@PBDG@@G@@QBE_NG@Z ; CUtlMemory<UtlRBTreeNode_t<char const *,unsigned short>,unsigned short>::IsIdxValid
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN3@Next
	mov	eax, DWORD PTR _it$[ebp]
	movzx	ecx, WORD PTR [eax]
	add	ecx, 1
	mov	DWORD PTR tv80[ebp], ecx
	jmp	SHORT $LN4@Next
$LN3@Next:
	call	?InvalidIndex@?$CUtlMemory@U?$UtlRBTreeNode_t@PBDG@@G@@SAGXZ ; CUtlMemory<UtlRBTreeNode_t<char const *,unsigned short>,unsigned short>::InvalidIndex
	movzx	edx, ax
	mov	DWORD PTR tv80[ebp], edx
$LN4@Next:
	movzx	eax, WORD PTR tv80[ebp]
	push	eax
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0Iterator_t@?$CUtlMemory@U?$UtlRBTreeNode_t@PBDG@@G@@QAE@G@Z ; CUtlMemory<UtlRBTreeNode_t<char const *,unsigned short>,unsigned short>::Iterator_t::Iterator_t
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	8
?Next@?$CUtlMemory@U?$UtlRBTreeNode_t@PBDG@@G@@QBE?AVIterator_t@1@ABV21@@Z ENDP ; CUtlMemory<UtlRBTreeNode_t<char const *,unsigned short>,unsigned short>::Next
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xashxt_v0.81_rev.1_with_sources\xashxt_v0.81_rev.1_src\game_shared\utlmemory.h
;	COMDAT ?First@?$CUtlMemory@U?$UtlRBTreeNode_t@PBDG@@G@@QBE?AVIterator_t@1@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv73 = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?First@?$CUtlMemory@U?$UtlRBTreeNode_t@PBDG@@G@@QBE?AVIterator_t@1@XZ PROC ; CUtlMemory<UtlRBTreeNode_t<char const *,unsigned short>,unsigned short>::First, COMDAT
; _this$ = ecx

; 88   : 	Iterator_t First() const							{ return Iterator_t( IsIdxValid( 0 ) ? 0 : InvalidIndex() ); }

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsIdxValid@?$CUtlMemory@U?$UtlRBTreeNode_t@PBDG@@G@@QBE_NG@Z ; CUtlMemory<UtlRBTreeNode_t<char const *,unsigned short>,unsigned short>::IsIdxValid
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN3@First
	mov	DWORD PTR tv73[ebp], 0
	jmp	SHORT $LN4@First
$LN3@First:
	call	?InvalidIndex@?$CUtlMemory@U?$UtlRBTreeNode_t@PBDG@@G@@SAGXZ ; CUtlMemory<UtlRBTreeNode_t<char const *,unsigned short>,unsigned short>::InvalidIndex
	movzx	ecx, ax
	mov	DWORD PTR tv73[ebp], ecx
$LN4@First:
	movzx	edx, WORD PTR tv73[ebp]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0Iterator_t@?$CUtlMemory@U?$UtlRBTreeNode_t@PBDG@@G@@QAE@G@Z ; CUtlMemory<UtlRBTreeNode_t<char const *,unsigned short>,unsigned short>::Iterator_t::Iterator_t
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
?First@?$CUtlMemory@U?$UtlRBTreeNode_t@PBDG@@G@@QBE?AVIterator_t@1@XZ ENDP ; CUtlMemory<UtlRBTreeNode_t<char const *,unsigned short>,unsigned short>::First
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xashxt_v0.81_rev.1_with_sources\xashxt_v0.81_rev.1_src\game_shared\utlmemory.h
;	COMDAT ??1?$CUtlMemory@U?$UtlRBTreeNode_t@PBDG@@G@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$CUtlMemory@U?$UtlRBTreeNode_t@PBDG@@G@@QAE@XZ PROC	; CUtlMemory<UtlRBTreeNode_t<char const *,unsigned short>,unsigned short>::~CUtlMemory<UtlRBTreeNode_t<char const *,unsigned short>,unsigned short>, COMDAT
; _this$ = ecx

; 322  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1?$CUtlMemory@U?$UtlRBTreeNode_t@PBDG@@G@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 323  : 	Purge();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Purge@?$CUtlMemory@U?$UtlRBTreeNode_t@PBDG@@G@@QAEXXZ ; CUtlMemory<UtlRBTreeNode_t<char const *,unsigned short>,unsigned short>::Purge

; 324  : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??1?$CUtlMemory@U?$UtlRBTreeNode_t@PBDG@@G@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1?$CUtlMemory@U?$UtlRBTreeNode_t@PBDG@@G@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1?$CUtlMemory@U?$UtlRBTreeNode_t@PBDG@@G@@QAE@XZ ENDP	; CUtlMemory<UtlRBTreeNode_t<char const *,unsigned short>,unsigned short>::~CUtlMemory<UtlRBTreeNode_t<char const *,unsigned short>,unsigned short>
; Function compile flags: /Odtp
; File c:\users\user\downloads\xashxt_v0.81_rev.1_with_sources\xashxt_v0.81_rev.1_src\game_shared\utlmemory.h
;	COMDAT ??0?$CUtlMemory@U?$UtlRBTreeNode_t@PBDG@@G@@QAE@HH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_nGrowSize$ = 8						; size = 4
_nInitAllocationCount$ = 12				; size = 4
??0?$CUtlMemory@U?$UtlRBTreeNode_t@PBDG@@G@@QAE@HH@Z PROC ; CUtlMemory<UtlRBTreeNode_t<char const *,unsigned short>,unsigned short>::CUtlMemory<UtlRBTreeNode_t<char const *,unsigned short>,unsigned short>, COMDAT
; _this$ = ecx

; 295  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 293  : CUtlMemory<T,I>::CUtlMemory( int nGrowSize, int nInitAllocationCount ) : m_pMemory(0), 

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0

; 294  : 	m_nAllocationCount( nInitAllocationCount ), m_nGrowSize( nGrowSize )

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _nInitAllocationCount$[ebp]
	mov	DWORD PTR [ecx+4], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _nGrowSize$[ebp]
	mov	DWORD PTR [eax+8], ecx

; 296  : 	ValidateGrowSize();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?ValidateGrowSize@?$CUtlMemory@U?$UtlRBTreeNode_t@PBDG@@G@@IAEXXZ ; CUtlMemory<UtlRBTreeNode_t<char const *,unsigned short>,unsigned short>::ValidateGrowSize

; 297  : 	assert( nGrowSize >= 0 );

	cmp	DWORD PTR _nGrowSize$[ebp], 0
	jge	SHORT $LN4@CUtlMemory
	push	297					; 00000129H
	push	OFFSET $SG71778
	push	OFFSET $SG71779
	call	__wassert
	add	esp, 12					; 0000000cH
$LN4@CUtlMemory:

; 298  : 	if (m_nAllocationCount)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 0
	je	SHORT $LN1@CUtlMemory

; 299  : 	{
; 300  : 		m_pMemory = (T*)malloc( m_nAllocationCount * sizeof(T) );

	mov	ecx, DWORD PTR _this$[ebp]
	imul	edx, DWORD PTR [ecx+4], 12
	push	edx
	call	_malloc
	add	esp, 4
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], eax
$LN1@CUtlMemory:

; 301  : 	}
; 302  : }

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	8
??0?$CUtlMemory@U?$UtlRBTreeNode_t@PBDG@@G@@QAE@HH@Z ENDP ; CUtlMemory<UtlRBTreeNode_t<char const *,unsigned short>,unsigned short>::CUtlMemory<UtlRBTreeNode_t<char const *,unsigned short>,unsigned short>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xashxt_v0.81_rev.1_with_sources\xashxt_v0.81_rev.1_src\game_shared\utlrbtree.h
;	COMDAT ?FindInsertionPosition@?$CUtlRBTree@PBDGP6A_NABQBD0@ZV?$CUtlMemory@U?$UtlRBTreeNode_t@PBDG@@G@@@@IAEXABQBDAAGAA_N@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_current$ = -4						; size = 2
_insert$ = 8						; size = 4
_parent$ = 12						; size = 4
_leftchild$ = 16					; size = 4
?FindInsertionPosition@?$CUtlRBTree@PBDGP6A_NABQBD0@ZV?$CUtlMemory@U?$UtlRBTreeNode_t@PBDG@@G@@@@IAEXABQBDAAGAA_N@Z PROC ; CUtlRBTree<char const *,unsigned short,bool (__cdecl*)(char const * const &,char const * const &),CUtlMemory<UtlRBTreeNode_t<char const *,unsigned short>,unsigned short> >::FindInsertionPosition, COMDAT
; _this$ = ecx

; 1444 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	push	esi
	mov	DWORD PTR _this$[ebp], ecx

; 1445 : 	assert( &m_LessFunc );

	cmp	DWORD PTR _this$[ebp], 0
	jne	SHORT $LN7@FindInsert
	push	1445					; 000005a5H
	push	OFFSET $SG71926
	push	OFFSET $SG71927
	call	__wassert
	add	esp, 12					; 0000000cH
$LN7@FindInsert:

; 1446 : 
; 1447 : 	/* find where node belongs */
; 1448 : 	I current = m_Root;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+16]
	mov	WORD PTR _current$[ebp], dx

; 1449 : 	parent = InvalidIndex();

	call	?InvalidIndex@?$CUtlRBTree@PBDGP6A_NABQBD0@ZV?$CUtlMemory@U?$UtlRBTreeNode_t@PBDG@@G@@@@SAGXZ ; CUtlRBTree<char const *,unsigned short,bool (__cdecl*)(char const * const &,char const * const &),CUtlMemory<UtlRBTreeNode_t<char const *,unsigned short>,unsigned short> >::InvalidIndex
	mov	ecx, DWORD PTR _parent$[ebp]
	mov	WORD PTR [ecx], ax

; 1450 : 	leftchild = false;

	mov	edx, DWORD PTR _leftchild$[ebp]
	mov	BYTE PTR [edx], 0
$LN2@FindInsert:

; 1451 : 	while (current != InvalidIndex()) 

	movzx	esi, WORD PTR _current$[ebp]
	call	?InvalidIndex@?$CUtlRBTree@PBDGP6A_NABQBD0@ZV?$CUtlMemory@U?$UtlRBTreeNode_t@PBDG@@G@@@@SAGXZ ; CUtlRBTree<char const *,unsigned short,bool (__cdecl*)(char const * const &,char const * const &),CUtlMemory<UtlRBTreeNode_t<char const *,unsigned short>,unsigned short> >::InvalidIndex
	movzx	eax, ax
	cmp	esi, eax
	je	SHORT $LN1@FindInsert

; 1452 : 	{
; 1453 : 		parent = current;

	mov	ecx, DWORD PTR _parent$[ebp]
	mov	dx, WORD PTR _current$[ebp]
	mov	WORD PTR [ecx], dx

; 1454 : 		if (m_LessFunc( insert, Element(current) ))

	movzx	eax, WORD PTR _current$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Element@?$CUtlRBTree@PBDGP6A_NABQBD0@ZV?$CUtlMemory@U?$UtlRBTreeNode_t@PBDG@@G@@@@QAEAAPBDG@Z ; CUtlRBTree<char const *,unsigned short,bool (__cdecl*)(char const * const &,char const * const &),CUtlMemory<UtlRBTreeNode_t<char const *,unsigned short>,unsigned short> >::Element
	push	eax
	mov	ecx, DWORD PTR _insert$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	call	eax
	add	esp, 8
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN4@FindInsert

; 1455 : 		{
; 1456 : 			leftchild = true; current = LeftChild(current);

	mov	edx, DWORD PTR _leftchild$[ebp]
	mov	BYTE PTR [edx], 1
	movzx	eax, WORD PTR _current$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?LeftChild@?$CUtlRBTree@PBDGP6A_NABQBD0@ZV?$CUtlMemory@U?$UtlRBTreeNode_t@PBDG@@G@@@@QBEGG@Z ; CUtlRBTree<char const *,unsigned short,bool (__cdecl*)(char const * const &,char const * const &),CUtlMemory<UtlRBTreeNode_t<char const *,unsigned short>,unsigned short> >::LeftChild
	mov	WORD PTR _current$[ebp], ax

; 1457 : 		}
; 1458 : 		else

	jmp	SHORT $LN5@FindInsert
$LN4@FindInsert:

; 1459 : 		{
; 1460 : 			leftchild = false; current = RightChild(current);

	mov	ecx, DWORD PTR _leftchild$[ebp]
	mov	BYTE PTR [ecx], 0
	movzx	edx, WORD PTR _current$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?RightChild@?$CUtlRBTree@PBDGP6A_NABQBD0@ZV?$CUtlMemory@U?$UtlRBTreeNode_t@PBDG@@G@@@@QBEGG@Z ; CUtlRBTree<char const *,unsigned short,bool (__cdecl*)(char const * const &,char const * const &),CUtlMemory<UtlRBTreeNode_t<char const *,unsigned short>,unsigned short> >::RightChild
	mov	WORD PTR _current$[ebp], ax
$LN5@FindInsert:

; 1461 : 		}
; 1462 : 	}

	jmp	SHORT $LN2@FindInsert
$LN1@FindInsert:

; 1463 : }

	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?FindInsertionPosition@?$CUtlRBTree@PBDGP6A_NABQBD0@ZV?$CUtlMemory@U?$UtlRBTreeNode_t@PBDG@@G@@@@IAEXABQBDAAGAA_N@Z ENDP ; CUtlRBTree<char const *,unsigned short,bool (__cdecl*)(char const * const &,char const * const &),CUtlMemory<UtlRBTreeNode_t<char const *,unsigned short>,unsigned short> >::FindInsertionPosition
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xashxt_v0.81_rev.1_with_sources\xashxt_v0.81_rev.1_src\game_shared\utlrbtree.h
;	COMDAT ?InsertAt@?$CUtlRBTree@PBDGP6A_NABQBD0@ZV?$CUtlMemory@U?$UtlRBTreeNode_t@PBDG@@G@@@@IAEGG_N@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_i$ = -4						; size = 2
_parent$ = 8						; size = 2
_leftchild$ = 12					; size = 1
?InsertAt@?$CUtlRBTree@PBDGP6A_NABQBD0@ZV?$CUtlMemory@U?$UtlRBTreeNode_t@PBDG@@G@@@@IAEGG_N@Z PROC ; CUtlRBTree<char const *,unsigned short,bool (__cdecl*)(char const * const &,char const * const &),CUtlMemory<UtlRBTreeNode_t<char const *,unsigned short>,unsigned short> >::InsertAt, COMDAT
; _this$ = ecx

; 843  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 844  : 	I i = NewNode();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?NewNode@?$CUtlRBTree@PBDGP6A_NABQBD0@ZV?$CUtlMemory@U?$UtlRBTreeNode_t@PBDG@@G@@@@QAEGXZ ; CUtlRBTree<char const *,unsigned short,bool (__cdecl*)(char const * const &,char const * const &),CUtlMemory<UtlRBTreeNode_t<char const *,unsigned short>,unsigned short> >::NewNode
	mov	WORD PTR _i$[ebp], ax

; 845  : 	LinkToParent( i, parent, leftchild );

	movzx	eax, BYTE PTR _leftchild$[ebp]
	push	eax
	movzx	ecx, WORD PTR _parent$[ebp]
	push	ecx
	movzx	edx, WORD PTR _i$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?LinkToParent@?$CUtlRBTree@PBDGP6A_NABQBD0@ZV?$CUtlMemory@U?$UtlRBTreeNode_t@PBDG@@G@@@@IAEXGG_N@Z ; CUtlRBTree<char const *,unsigned short,bool (__cdecl*)(char const * const &,char const * const &),CUtlMemory<UtlRBTreeNode_t<char const *,unsigned short>,unsigned short> >::LinkToParent

; 846  : 	++m_NumElements;

	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+18]
	add	cx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+18], cx

; 847  : 
; 848  : 	assert(IsValid());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsValid@?$CUtlRBTree@PBDGP6A_NABQBD0@ZV?$CUtlMemory@U?$UtlRBTreeNode_t@PBDG@@G@@@@QBE_NXZ ; CUtlRBTree<char const *,unsigned short,bool (__cdecl*)(char const * const &,char const * const &),CUtlMemory<UtlRBTreeNode_t<char const *,unsigned short>,unsigned short> >::IsValid
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN3@InsertAt
	push	848					; 00000350H
	push	OFFSET $SG71909
	push	OFFSET $SG71910
	call	__wassert
	add	esp, 12					; 0000000cH
$LN3@InsertAt:

; 849  : 
; 850  : 	return i;

	mov	ax, WORD PTR _i$[ebp]

; 851  : }

	mov	esp, ebp
	pop	ebp
	ret	8
?InsertAt@?$CUtlRBTree@PBDGP6A_NABQBD0@ZV?$CUtlMemory@U?$UtlRBTreeNode_t@PBDG@@G@@@@IAEGG_N@Z ENDP ; CUtlRBTree<char const *,unsigned short,bool (__cdecl*)(char const * const &,char const * const &),CUtlMemory<UtlRBTreeNode_t<char const *,unsigned short>,unsigned short> >::InsertAt
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xashxt_v0.81_rev.1_with_sources\xashxt_v0.81_rev.1_src\game_shared\utlrbtree.h
;	COMDAT ?InsertRebalance@?$CUtlRBTree@PBDGP6A_NABQBD0@ZV?$CUtlMemory@U?$UtlRBTreeNode_t@PBDG@@G@@@@IAEXG@Z
_TEXT	SEGMENT
_this$ = -20						; size = 4
_uncle$1 = -16						; size = 2
_uncle$2 = -12						; size = 2
_grandparent$3 = -8					; size = 2
_parent$4 = -4						; size = 2
_elem$ = 8						; size = 2
?InsertRebalance@?$CUtlRBTree@PBDGP6A_NABQBD0@ZV?$CUtlMemory@U?$UtlRBTreeNode_t@PBDG@@G@@@@IAEXG@Z PROC ; CUtlRBTree<char const *,unsigned short,bool (__cdecl*)(char const * const &,char const * const &),CUtlMemory<UtlRBTreeNode_t<char const *,unsigned short>,unsigned short> >::InsertRebalance, COMDAT
; _this$ = ecx

; 768  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	mov	DWORD PTR _this$[ebp], ecx
$LN2@InsertReba:

; 769  : 	while ( !IsRoot(elem) && (Color(Parent(elem)) == RED) )

	movzx	eax, WORD PTR _elem$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsRoot@?$CUtlRBTree@PBDGP6A_NABQBD0@ZV?$CUtlMemory@U?$UtlRBTreeNode_t@PBDG@@G@@@@QBE_NG@Z ; CUtlRBTree<char const *,unsigned short,bool (__cdecl*)(char const * const &,char const * const &),CUtlMemory<UtlRBTreeNode_t<char const *,unsigned short>,unsigned short> >::IsRoot
	movzx	ecx, al
	test	ecx, ecx
	jne	$LN3@InsertReba
	movzx	edx, WORD PTR _elem$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Parent@?$CUtlRBTree@PBDGP6A_NABQBD0@ZV?$CUtlMemory@U?$UtlRBTreeNode_t@PBDG@@G@@@@QBEGG@Z ; CUtlRBTree<char const *,unsigned short,bool (__cdecl*)(char const * const &,char const * const &),CUtlMemory<UtlRBTreeNode_t<char const *,unsigned short>,unsigned short> >::Parent
	movzx	eax, ax
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Color@?$CUtlRBTree@PBDGP6A_NABQBD0@ZV?$CUtlMemory@U?$UtlRBTreeNode_t@PBDG@@G@@@@IBE?AW4NodeColor_t@1@G@Z ; CUtlRBTree<char const *,unsigned short,bool (__cdecl*)(char const * const &,char const * const &),CUtlMemory<UtlRBTreeNode_t<char const *,unsigned short>,unsigned short> >::Color
	test	eax, eax
	jne	$LN3@InsertReba

; 770  : 	{
; 771  : 		I parent = Parent(elem);

	movzx	ecx, WORD PTR _elem$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Parent@?$CUtlRBTree@PBDGP6A_NABQBD0@ZV?$CUtlMemory@U?$UtlRBTreeNode_t@PBDG@@G@@@@QBEGG@Z ; CUtlRBTree<char const *,unsigned short,bool (__cdecl*)(char const * const &,char const * const &),CUtlMemory<UtlRBTreeNode_t<char const *,unsigned short>,unsigned short> >::Parent
	mov	WORD PTR _parent$4[ebp], ax

; 772  : 		I grandparent = Parent(parent);

	movzx	edx, WORD PTR _parent$4[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Parent@?$CUtlRBTree@PBDGP6A_NABQBD0@ZV?$CUtlMemory@U?$UtlRBTreeNode_t@PBDG@@G@@@@QBEGG@Z ; CUtlRBTree<char const *,unsigned short,bool (__cdecl*)(char const * const &,char const * const &),CUtlMemory<UtlRBTreeNode_t<char const *,unsigned short>,unsigned short> >::Parent
	mov	WORD PTR _grandparent$3[ebp], ax

; 773  : 
; 774  : 		/* we have a violation */
; 775  : 		if (IsLeftChild(parent))

	movzx	eax, WORD PTR _parent$4[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsLeftChild@?$CUtlRBTree@PBDGP6A_NABQBD0@ZV?$CUtlMemory@U?$UtlRBTreeNode_t@PBDG@@G@@@@QBE_NG@Z ; CUtlRBTree<char const *,unsigned short,bool (__cdecl*)(char const * const &,char const * const &),CUtlMemory<UtlRBTreeNode_t<char const *,unsigned short>,unsigned short> >::IsLeftChild
	movzx	ecx, al
	test	ecx, ecx
	je	$LN4@InsertReba

; 776  : 		{
; 777  : 			I uncle = RightChild(grandparent);

	movzx	edx, WORD PTR _grandparent$3[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?RightChild@?$CUtlRBTree@PBDGP6A_NABQBD0@ZV?$CUtlMemory@U?$UtlRBTreeNode_t@PBDG@@G@@@@QBEGG@Z ; CUtlRBTree<char const *,unsigned short,bool (__cdecl*)(char const * const &,char const * const &),CUtlMemory<UtlRBTreeNode_t<char const *,unsigned short>,unsigned short> >::RightChild
	mov	WORD PTR _uncle$2[ebp], ax

; 778  : 			if (IsRed(uncle)) 

	movzx	eax, WORD PTR _uncle$2[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsRed@?$CUtlRBTree@PBDGP6A_NABQBD0@ZV?$CUtlMemory@U?$UtlRBTreeNode_t@PBDG@@G@@@@IBE_NG@Z ; CUtlRBTree<char const *,unsigned short,bool (__cdecl*)(char const * const &,char const * const &),CUtlMemory<UtlRBTreeNode_t<char const *,unsigned short>,unsigned short> >::IsRed
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN6@InsertReba

; 779  : 			{
; 780  : 				/* uncle is RED */
; 781  : 				SetColor(parent, BLACK);

	push	1
	movzx	edx, WORD PTR _parent$4[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetColor@?$CUtlRBTree@PBDGP6A_NABQBD0@ZV?$CUtlMemory@U?$UtlRBTreeNode_t@PBDG@@G@@@@IAEXGW4NodeColor_t@1@@Z ; CUtlRBTree<char const *,unsigned short,bool (__cdecl*)(char const * const &,char const * const &),CUtlMemory<UtlRBTreeNode_t<char const *,unsigned short>,unsigned short> >::SetColor

; 782  : 				SetColor(uncle, BLACK);

	push	1
	movzx	eax, WORD PTR _uncle$2[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetColor@?$CUtlRBTree@PBDGP6A_NABQBD0@ZV?$CUtlMemory@U?$UtlRBTreeNode_t@PBDG@@G@@@@IAEXGW4NodeColor_t@1@@Z ; CUtlRBTree<char const *,unsigned short,bool (__cdecl*)(char const * const &,char const * const &),CUtlMemory<UtlRBTreeNode_t<char const *,unsigned short>,unsigned short> >::SetColor

; 783  : 				SetColor(grandparent, RED);

	push	0
	movzx	ecx, WORD PTR _grandparent$3[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetColor@?$CUtlRBTree@PBDGP6A_NABQBD0@ZV?$CUtlMemory@U?$UtlRBTreeNode_t@PBDG@@G@@@@IAEXGW4NodeColor_t@1@@Z ; CUtlRBTree<char const *,unsigned short,bool (__cdecl*)(char const * const &,char const * const &),CUtlMemory<UtlRBTreeNode_t<char const *,unsigned short>,unsigned short> >::SetColor

; 784  : 				elem = grandparent;

	mov	dx, WORD PTR _grandparent$3[ebp]
	mov	WORD PTR _elem$[ebp], dx

; 785  : 			} 
; 786  : 			else 

	jmp	SHORT $LN7@InsertReba
$LN6@InsertReba:

; 787  : 			{
; 788  : 				/* uncle is BLACK */
; 789  : 				if (IsRightChild(elem))

	movzx	eax, WORD PTR _elem$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsRightChild@?$CUtlRBTree@PBDGP6A_NABQBD0@ZV?$CUtlMemory@U?$UtlRBTreeNode_t@PBDG@@G@@@@QBE_NG@Z ; CUtlRBTree<char const *,unsigned short,bool (__cdecl*)(char const * const &,char const * const &),CUtlMemory<UtlRBTreeNode_t<char const *,unsigned short>,unsigned short> >::IsRightChild
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN8@InsertReba

; 790  : 				{
; 791  : 					/* make x a left child, will change parent and grandparent */
; 792  : 					elem = parent;

	mov	dx, WORD PTR _parent$4[ebp]
	mov	WORD PTR _elem$[ebp], dx

; 793  : 					RotateLeft(elem);

	movzx	eax, WORD PTR _elem$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?RotateLeft@?$CUtlRBTree@PBDGP6A_NABQBD0@ZV?$CUtlMemory@U?$UtlRBTreeNode_t@PBDG@@G@@@@IAEXG@Z ; CUtlRBTree<char const *,unsigned short,bool (__cdecl*)(char const * const &,char const * const &),CUtlMemory<UtlRBTreeNode_t<char const *,unsigned short>,unsigned short> >::RotateLeft

; 794  : 					parent = Parent(elem);

	movzx	ecx, WORD PTR _elem$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Parent@?$CUtlRBTree@PBDGP6A_NABQBD0@ZV?$CUtlMemory@U?$UtlRBTreeNode_t@PBDG@@G@@@@QBEGG@Z ; CUtlRBTree<char const *,unsigned short,bool (__cdecl*)(char const * const &,char const * const &),CUtlMemory<UtlRBTreeNode_t<char const *,unsigned short>,unsigned short> >::Parent
	mov	WORD PTR _parent$4[ebp], ax

; 795  : 					grandparent = Parent(parent);

	movzx	edx, WORD PTR _parent$4[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Parent@?$CUtlRBTree@PBDGP6A_NABQBD0@ZV?$CUtlMemory@U?$UtlRBTreeNode_t@PBDG@@G@@@@QBEGG@Z ; CUtlRBTree<char const *,unsigned short,bool (__cdecl*)(char const * const &,char const * const &),CUtlMemory<UtlRBTreeNode_t<char const *,unsigned short>,unsigned short> >::Parent
	mov	WORD PTR _grandparent$3[ebp], ax
$LN8@InsertReba:

; 796  : 				}
; 797  : 				/* recolor and rotate */
; 798  : 				SetColor(parent, BLACK);

	push	1
	movzx	eax, WORD PTR _parent$4[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetColor@?$CUtlRBTree@PBDGP6A_NABQBD0@ZV?$CUtlMemory@U?$UtlRBTreeNode_t@PBDG@@G@@@@IAEXGW4NodeColor_t@1@@Z ; CUtlRBTree<char const *,unsigned short,bool (__cdecl*)(char const * const &,char const * const &),CUtlMemory<UtlRBTreeNode_t<char const *,unsigned short>,unsigned short> >::SetColor

; 799  : 				SetColor(grandparent, RED);

	push	0
	movzx	ecx, WORD PTR _grandparent$3[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetColor@?$CUtlRBTree@PBDGP6A_NABQBD0@ZV?$CUtlMemory@U?$UtlRBTreeNode_t@PBDG@@G@@@@IAEXGW4NodeColor_t@1@@Z ; CUtlRBTree<char const *,unsigned short,bool (__cdecl*)(char const * const &,char const * const &),CUtlMemory<UtlRBTreeNode_t<char const *,unsigned short>,unsigned short> >::SetColor

; 800  : 				RotateRight(grandparent);

	movzx	edx, WORD PTR _grandparent$3[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?RotateRight@?$CUtlRBTree@PBDGP6A_NABQBD0@ZV?$CUtlMemory@U?$UtlRBTreeNode_t@PBDG@@G@@@@IAEXG@Z ; CUtlRBTree<char const *,unsigned short,bool (__cdecl*)(char const * const &,char const * const &),CUtlMemory<UtlRBTreeNode_t<char const *,unsigned short>,unsigned short> >::RotateRight
$LN7@InsertReba:

; 801  : 			}
; 802  : 		} 
; 803  : 		else 

	jmp	$LN5@InsertReba
$LN4@InsertReba:

; 804  : 		{
; 805  : 			/* mirror image of above code */
; 806  : 			I uncle = LeftChild(grandparent);

	movzx	eax, WORD PTR _grandparent$3[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?LeftChild@?$CUtlRBTree@PBDGP6A_NABQBD0@ZV?$CUtlMemory@U?$UtlRBTreeNode_t@PBDG@@G@@@@QBEGG@Z ; CUtlRBTree<char const *,unsigned short,bool (__cdecl*)(char const * const &,char const * const &),CUtlMemory<UtlRBTreeNode_t<char const *,unsigned short>,unsigned short> >::LeftChild
	mov	WORD PTR _uncle$1[ebp], ax

; 807  : 			if (IsRed(uncle)) 

	movzx	ecx, WORD PTR _uncle$1[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsRed@?$CUtlRBTree@PBDGP6A_NABQBD0@ZV?$CUtlMemory@U?$UtlRBTreeNode_t@PBDG@@G@@@@IBE_NG@Z ; CUtlRBTree<char const *,unsigned short,bool (__cdecl*)(char const * const &,char const * const &),CUtlMemory<UtlRBTreeNode_t<char const *,unsigned short>,unsigned short> >::IsRed
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN9@InsertReba

; 808  : 			{
; 809  : 				/* uncle is RED */
; 810  : 				SetColor(parent, BLACK);

	push	1
	movzx	eax, WORD PTR _parent$4[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetColor@?$CUtlRBTree@PBDGP6A_NABQBD0@ZV?$CUtlMemory@U?$UtlRBTreeNode_t@PBDG@@G@@@@IAEXGW4NodeColor_t@1@@Z ; CUtlRBTree<char const *,unsigned short,bool (__cdecl*)(char const * const &,char const * const &),CUtlMemory<UtlRBTreeNode_t<char const *,unsigned short>,unsigned short> >::SetColor

; 811  : 				SetColor(uncle, BLACK);

	push	1
	movzx	ecx, WORD PTR _uncle$1[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetColor@?$CUtlRBTree@PBDGP6A_NABQBD0@ZV?$CUtlMemory@U?$UtlRBTreeNode_t@PBDG@@G@@@@IAEXGW4NodeColor_t@1@@Z ; CUtlRBTree<char const *,unsigned short,bool (__cdecl*)(char const * const &,char const * const &),CUtlMemory<UtlRBTreeNode_t<char const *,unsigned short>,unsigned short> >::SetColor

; 812  : 				SetColor(grandparent, RED);

	push	0
	movzx	edx, WORD PTR _grandparent$3[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetColor@?$CUtlRBTree@PBDGP6A_NABQBD0@ZV?$CUtlMemory@U?$UtlRBTreeNode_t@PBDG@@G@@@@IAEXGW4NodeColor_t@1@@Z ; CUtlRBTree<char const *,unsigned short,bool (__cdecl*)(char const * const &,char const * const &),CUtlMemory<UtlRBTreeNode_t<char const *,unsigned short>,unsigned short> >::SetColor

; 813  : 				elem = grandparent;

	mov	ax, WORD PTR _grandparent$3[ebp]
	mov	WORD PTR _elem$[ebp], ax

; 814  : 			} 
; 815  : 			else 

	jmp	SHORT $LN5@InsertReba
$LN9@InsertReba:

; 816  : 			{
; 817  : 				/* uncle is BLACK */
; 818  : 				if (IsLeftChild(elem))

	movzx	ecx, WORD PTR _elem$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsLeftChild@?$CUtlRBTree@PBDGP6A_NABQBD0@ZV?$CUtlMemory@U?$UtlRBTreeNode_t@PBDG@@G@@@@QBE_NG@Z ; CUtlRBTree<char const *,unsigned short,bool (__cdecl*)(char const * const &,char const * const &),CUtlMemory<UtlRBTreeNode_t<char const *,unsigned short>,unsigned short> >::IsLeftChild
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN11@InsertReba

; 819  : 				{
; 820  : 					/* make x a right child, will change parent and grandparent */
; 821  : 					elem = parent;

	mov	ax, WORD PTR _parent$4[ebp]
	mov	WORD PTR _elem$[ebp], ax

; 822  : 					RotateRight(parent);

	movzx	ecx, WORD PTR _parent$4[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?RotateRight@?$CUtlRBTree@PBDGP6A_NABQBD0@ZV?$CUtlMemory@U?$UtlRBTreeNode_t@PBDG@@G@@@@IAEXG@Z ; CUtlRBTree<char const *,unsigned short,bool (__cdecl*)(char const * const &,char const * const &),CUtlMemory<UtlRBTreeNode_t<char const *,unsigned short>,unsigned short> >::RotateRight

; 823  : 					parent = Parent(elem);

	movzx	edx, WORD PTR _elem$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Parent@?$CUtlRBTree@PBDGP6A_NABQBD0@ZV?$CUtlMemory@U?$UtlRBTreeNode_t@PBDG@@G@@@@QBEGG@Z ; CUtlRBTree<char const *,unsigned short,bool (__cdecl*)(char const * const &,char const * const &),CUtlMemory<UtlRBTreeNode_t<char const *,unsigned short>,unsigned short> >::Parent
	mov	WORD PTR _parent$4[ebp], ax

; 824  : 					grandparent = Parent(parent);

	movzx	eax, WORD PTR _parent$4[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Parent@?$CUtlRBTree@PBDGP6A_NABQBD0@ZV?$CUtlMemory@U?$UtlRBTreeNode_t@PBDG@@G@@@@QBEGG@Z ; CUtlRBTree<char const *,unsigned short,bool (__cdecl*)(char const * const &,char const * const &),CUtlMemory<UtlRBTreeNode_t<char const *,unsigned short>,unsigned short> >::Parent
	mov	WORD PTR _grandparent$3[ebp], ax
$LN11@InsertReba:

; 825  : 				}
; 826  : 				/* recolor and rotate */
; 827  : 				SetColor(parent, BLACK);

	push	1
	movzx	ecx, WORD PTR _parent$4[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetColor@?$CUtlRBTree@PBDGP6A_NABQBD0@ZV?$CUtlMemory@U?$UtlRBTreeNode_t@PBDG@@G@@@@IAEXGW4NodeColor_t@1@@Z ; CUtlRBTree<char const *,unsigned short,bool (__cdecl*)(char const * const &,char const * const &),CUtlMemory<UtlRBTreeNode_t<char const *,unsigned short>,unsigned short> >::SetColor

; 828  : 				SetColor(grandparent, RED);

	push	0
	movzx	edx, WORD PTR _grandparent$3[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetColor@?$CUtlRBTree@PBDGP6A_NABQBD0@ZV?$CUtlMemory@U?$UtlRBTreeNode_t@PBDG@@G@@@@IAEXGW4NodeColor_t@1@@Z ; CUtlRBTree<char const *,unsigned short,bool (__cdecl*)(char const * const &,char const * const &),CUtlMemory<UtlRBTreeNode_t<char const *,unsigned short>,unsigned short> >::SetColor

; 829  : 				RotateLeft(grandparent);

	movzx	eax, WORD PTR _grandparent$3[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?RotateLeft@?$CUtlRBTree@PBDGP6A_NABQBD0@ZV?$CUtlMemory@U?$UtlRBTreeNode_t@PBDG@@G@@@@IAEXG@Z ; CUtlRBTree<char const *,unsigned short,bool (__cdecl*)(char const * const &,char const * const &),CUtlMemory<UtlRBTreeNode_t<char const *,unsigned short>,unsigned short> >::RotateLeft
$LN5@InsertReba:

; 830  : 			}
; 831  : 		}
; 832  : 	}

	jmp	$LN2@InsertReba
$LN3@InsertReba:

; 833  : 	SetColor( m_Root, BLACK );

	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+16]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetColor@?$CUtlRBTree@PBDGP6A_NABQBD0@ZV?$CUtlMemory@U?$UtlRBTreeNode_t@PBDG@@G@@@@IAEXGW4NodeColor_t@1@@Z ; CUtlRBTree<char const *,unsigned short,bool (__cdecl*)(char const * const &,char const * const &),CUtlMemory<UtlRBTreeNode_t<char const *,unsigned short>,unsigned short> >::SetColor

; 834  : }

	mov	esp, ebp
	pop	ebp
	ret	4
?InsertRebalance@?$CUtlRBTree@PBDGP6A_NABQBD0@ZV?$CUtlMemory@U?$UtlRBTreeNode_t@PBDG@@G@@@@IAEXG@Z ENDP ; CUtlRBTree<char const *,unsigned short,bool (__cdecl*)(char const * const &,char const * const &),CUtlMemory<UtlRBTreeNode_t<char const *,unsigned short>,unsigned short> >::InsertRebalance
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xashxt_v0.81_rev.1_with_sources\xashxt_v0.81_rev.1_src\game_shared\utlrbtree.h
;	COMDAT ?RotateRight@?$CUtlRBTree@PBDGP6A_NABQBD0@ZV?$CUtlMemory@U?$UtlRBTreeNode_t@PBDG@@G@@@@IAEXG@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_leftchild$ = -4					; size = 2
_elem$ = 8						; size = 2
?RotateRight@?$CUtlRBTree@PBDGP6A_NABQBD0@ZV?$CUtlMemory@U?$UtlRBTreeNode_t@PBDG@@G@@@@IAEXG@Z PROC ; CUtlRBTree<char const *,unsigned short,bool (__cdecl*)(char const * const &,char const * const &),CUtlMemory<UtlRBTreeNode_t<char const *,unsigned short>,unsigned short> >::RotateRight, COMDAT
; _this$ = ecx

; 738  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	push	esi
	mov	DWORD PTR _this$[ebp], ecx

; 739  : 	I leftchild = LeftChild(elem);

	movzx	eax, WORD PTR _elem$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?LeftChild@?$CUtlRBTree@PBDGP6A_NABQBD0@ZV?$CUtlMemory@U?$UtlRBTreeNode_t@PBDG@@G@@@@QBEGG@Z ; CUtlRBTree<char const *,unsigned short,bool (__cdecl*)(char const * const &,char const * const &),CUtlMemory<UtlRBTreeNode_t<char const *,unsigned short>,unsigned short> >::LeftChild
	mov	WORD PTR _leftchild$[ebp], ax

; 740  : 	SetLeftChild( elem, RightChild(leftchild) );

	movzx	ecx, WORD PTR _leftchild$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?RightChild@?$CUtlRBTree@PBDGP6A_NABQBD0@ZV?$CUtlMemory@U?$UtlRBTreeNode_t@PBDG@@G@@@@QBEGG@Z ; CUtlRBTree<char const *,unsigned short,bool (__cdecl*)(char const * const &,char const * const &),CUtlMemory<UtlRBTreeNode_t<char const *,unsigned short>,unsigned short> >::RightChild
	movzx	edx, ax
	push	edx
	movzx	eax, WORD PTR _elem$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetLeftChild@?$CUtlRBTree@PBDGP6A_NABQBD0@ZV?$CUtlMemory@U?$UtlRBTreeNode_t@PBDG@@G@@@@IAEXGG@Z ; CUtlRBTree<char const *,unsigned short,bool (__cdecl*)(char const * const &,char const * const &),CUtlMemory<UtlRBTreeNode_t<char const *,unsigned short>,unsigned short> >::SetLeftChild

; 741  : 	if (RightChild(leftchild) != InvalidIndex())

	movzx	ecx, WORD PTR _leftchild$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?RightChild@?$CUtlRBTree@PBDGP6A_NABQBD0@ZV?$CUtlMemory@U?$UtlRBTreeNode_t@PBDG@@G@@@@QBEGG@Z ; CUtlRBTree<char const *,unsigned short,bool (__cdecl*)(char const * const &,char const * const &),CUtlMemory<UtlRBTreeNode_t<char const *,unsigned short>,unsigned short> >::RightChild
	movzx	esi, ax
	call	?InvalidIndex@?$CUtlRBTree@PBDGP6A_NABQBD0@ZV?$CUtlMemory@U?$UtlRBTreeNode_t@PBDG@@G@@@@SAGXZ ; CUtlRBTree<char const *,unsigned short,bool (__cdecl*)(char const * const &,char const * const &),CUtlMemory<UtlRBTreeNode_t<char const *,unsigned short>,unsigned short> >::InvalidIndex
	movzx	edx, ax
	cmp	esi, edx
	je	SHORT $LN2@RotateRigh

; 742  : 		SetParent( RightChild(leftchild), elem );

	movzx	eax, WORD PTR _elem$[ebp]
	push	eax
	movzx	ecx, WORD PTR _leftchild$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?RightChild@?$CUtlRBTree@PBDGP6A_NABQBD0@ZV?$CUtlMemory@U?$UtlRBTreeNode_t@PBDG@@G@@@@QBEGG@Z ; CUtlRBTree<char const *,unsigned short,bool (__cdecl*)(char const * const &,char const * const &),CUtlMemory<UtlRBTreeNode_t<char const *,unsigned short>,unsigned short> >::RightChild
	movzx	edx, ax
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetParent@?$CUtlRBTree@PBDGP6A_NABQBD0@ZV?$CUtlMemory@U?$UtlRBTreeNode_t@PBDG@@G@@@@IAEXGG@Z ; CUtlRBTree<char const *,unsigned short,bool (__cdecl*)(char const * const &,char const * const &),CUtlMemory<UtlRBTreeNode_t<char const *,unsigned short>,unsigned short> >::SetParent
$LN2@RotateRigh:

; 743  : 
; 744  : 	if (leftchild != InvalidIndex())

	movzx	esi, WORD PTR _leftchild$[ebp]
	call	?InvalidIndex@?$CUtlRBTree@PBDGP6A_NABQBD0@ZV?$CUtlMemory@U?$UtlRBTreeNode_t@PBDG@@G@@@@SAGXZ ; CUtlRBTree<char const *,unsigned short,bool (__cdecl*)(char const * const &,char const * const &),CUtlMemory<UtlRBTreeNode_t<char const *,unsigned short>,unsigned short> >::InvalidIndex
	movzx	eax, ax
	cmp	esi, eax
	je	SHORT $LN3@RotateRigh

; 745  : 		SetParent( leftchild, Parent(elem) );

	movzx	ecx, WORD PTR _elem$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Parent@?$CUtlRBTree@PBDGP6A_NABQBD0@ZV?$CUtlMemory@U?$UtlRBTreeNode_t@PBDG@@G@@@@QBEGG@Z ; CUtlRBTree<char const *,unsigned short,bool (__cdecl*)(char const * const &,char const * const &),CUtlMemory<UtlRBTreeNode_t<char const *,unsigned short>,unsigned short> >::Parent
	movzx	edx, ax
	push	edx
	movzx	eax, WORD PTR _leftchild$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetParent@?$CUtlRBTree@PBDGP6A_NABQBD0@ZV?$CUtlMemory@U?$UtlRBTreeNode_t@PBDG@@G@@@@IAEXGG@Z ; CUtlRBTree<char const *,unsigned short,bool (__cdecl*)(char const * const &,char const * const &),CUtlMemory<UtlRBTreeNode_t<char const *,unsigned short>,unsigned short> >::SetParent
$LN3@RotateRigh:

; 746  : 	if (!IsRoot(elem))

	movzx	ecx, WORD PTR _elem$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsRoot@?$CUtlRBTree@PBDGP6A_NABQBD0@ZV?$CUtlMemory@U?$UtlRBTreeNode_t@PBDG@@G@@@@QBE_NG@Z ; CUtlRBTree<char const *,unsigned short,bool (__cdecl*)(char const * const &,char const * const &),CUtlMemory<UtlRBTreeNode_t<char const *,unsigned short>,unsigned short> >::IsRoot
	movzx	edx, al
	test	edx, edx
	jne	SHORT $LN4@RotateRigh

; 747  : 	{
; 748  : 		if (IsRightChild(elem))

	movzx	eax, WORD PTR _elem$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsRightChild@?$CUtlRBTree@PBDGP6A_NABQBD0@ZV?$CUtlMemory@U?$UtlRBTreeNode_t@PBDG@@G@@@@QBE_NG@Z ; CUtlRBTree<char const *,unsigned short,bool (__cdecl*)(char const * const &,char const * const &),CUtlMemory<UtlRBTreeNode_t<char const *,unsigned short>,unsigned short> >::IsRightChild
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN6@RotateRigh

; 749  : 			SetRightChild( Parent(elem), leftchild );

	movzx	edx, WORD PTR _leftchild$[ebp]
	push	edx
	movzx	eax, WORD PTR _elem$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Parent@?$CUtlRBTree@PBDGP6A_NABQBD0@ZV?$CUtlMemory@U?$UtlRBTreeNode_t@PBDG@@G@@@@QBEGG@Z ; CUtlRBTree<char const *,unsigned short,bool (__cdecl*)(char const * const &,char const * const &),CUtlMemory<UtlRBTreeNode_t<char const *,unsigned short>,unsigned short> >::Parent
	movzx	ecx, ax
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetRightChild@?$CUtlRBTree@PBDGP6A_NABQBD0@ZV?$CUtlMemory@U?$UtlRBTreeNode_t@PBDG@@G@@@@IAEXGG@Z ; CUtlRBTree<char const *,unsigned short,bool (__cdecl*)(char const * const &,char const * const &),CUtlMemory<UtlRBTreeNode_t<char const *,unsigned short>,unsigned short> >::SetRightChild

; 750  : 		else

	jmp	SHORT $LN7@RotateRigh
$LN6@RotateRigh:

; 751  : 			SetLeftChild( Parent(elem), leftchild );

	movzx	edx, WORD PTR _leftchild$[ebp]
	push	edx
	movzx	eax, WORD PTR _elem$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Parent@?$CUtlRBTree@PBDGP6A_NABQBD0@ZV?$CUtlMemory@U?$UtlRBTreeNode_t@PBDG@@G@@@@QBEGG@Z ; CUtlRBTree<char const *,unsigned short,bool (__cdecl*)(char const * const &,char const * const &),CUtlMemory<UtlRBTreeNode_t<char const *,unsigned short>,unsigned short> >::Parent
	movzx	ecx, ax
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetLeftChild@?$CUtlRBTree@PBDGP6A_NABQBD0@ZV?$CUtlMemory@U?$UtlRBTreeNode_t@PBDG@@G@@@@IAEXGG@Z ; CUtlRBTree<char const *,unsigned short,bool (__cdecl*)(char const * const &,char const * const &),CUtlMemory<UtlRBTreeNode_t<char const *,unsigned short>,unsigned short> >::SetLeftChild
$LN7@RotateRigh:

; 752  : 	}
; 753  : 	else

	jmp	SHORT $LN5@RotateRigh
$LN4@RotateRigh:

; 754  : 		m_Root = leftchild;

	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR _leftchild$[ebp]
	mov	WORD PTR [edx+16], ax
$LN5@RotateRigh:

; 755  : 
; 756  : 	SetRightChild( leftchild, elem );

	movzx	ecx, WORD PTR _elem$[ebp]
	push	ecx
	movzx	edx, WORD PTR _leftchild$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetRightChild@?$CUtlRBTree@PBDGP6A_NABQBD0@ZV?$CUtlMemory@U?$UtlRBTreeNode_t@PBDG@@G@@@@IAEXGG@Z ; CUtlRBTree<char const *,unsigned short,bool (__cdecl*)(char const * const &,char const * const &),CUtlMemory<UtlRBTreeNode_t<char const *,unsigned short>,unsigned short> >::SetRightChild

; 757  : 	if (elem != InvalidIndex())

	movzx	esi, WORD PTR _elem$[ebp]
	call	?InvalidIndex@?$CUtlRBTree@PBDGP6A_NABQBD0@ZV?$CUtlMemory@U?$UtlRBTreeNode_t@PBDG@@G@@@@SAGXZ ; CUtlRBTree<char const *,unsigned short,bool (__cdecl*)(char const * const &,char const * const &),CUtlMemory<UtlRBTreeNode_t<char const *,unsigned short>,unsigned short> >::InvalidIndex
	movzx	eax, ax
	cmp	esi, eax
	je	SHORT $LN1@RotateRigh

; 758  : 		SetParent( elem, leftchild );

	movzx	ecx, WORD PTR _leftchild$[ebp]
	push	ecx
	movzx	edx, WORD PTR _elem$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetParent@?$CUtlRBTree@PBDGP6A_NABQBD0@ZV?$CUtlMemory@U?$UtlRBTreeNode_t@PBDG@@G@@@@IAEXGG@Z ; CUtlRBTree<char const *,unsigned short,bool (__cdecl*)(char const * const &,char const * const &),CUtlMemory<UtlRBTreeNode_t<char const *,unsigned short>,unsigned short> >::SetParent
$LN1@RotateRigh:

; 759  : }

	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
?RotateRight@?$CUtlRBTree@PBDGP6A_NABQBD0@ZV?$CUtlMemory@U?$UtlRBTreeNode_t@PBDG@@G@@@@IAEXG@Z ENDP ; CUtlRBTree<char const *,unsigned short,bool (__cdecl*)(char const * const &,char const * const &),CUtlMemory<UtlRBTreeNode_t<char const *,unsigned short>,unsigned short> >::RotateRight
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xashxt_v0.81_rev.1_with_sources\xashxt_v0.81_rev.1_src\game_shared\utlrbtree.h
;	COMDAT ?RotateLeft@?$CUtlRBTree@PBDGP6A_NABQBD0@ZV?$CUtlMemory@U?$UtlRBTreeNode_t@PBDG@@G@@@@IAEXG@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_rightchild$ = -4					; size = 2
_elem$ = 8						; size = 2
?RotateLeft@?$CUtlRBTree@PBDGP6A_NABQBD0@ZV?$CUtlMemory@U?$UtlRBTreeNode_t@PBDG@@G@@@@IAEXG@Z PROC ; CUtlRBTree<char const *,unsigned short,bool (__cdecl*)(char const * const &,char const * const &),CUtlMemory<UtlRBTreeNode_t<char const *,unsigned short>,unsigned short> >::RotateLeft, COMDAT
; _this$ = ecx

; 708  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	push	esi
	mov	DWORD PTR _this$[ebp], ecx

; 709  : 	I rightchild = RightChild(elem);

	movzx	eax, WORD PTR _elem$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?RightChild@?$CUtlRBTree@PBDGP6A_NABQBD0@ZV?$CUtlMemory@U?$UtlRBTreeNode_t@PBDG@@G@@@@QBEGG@Z ; CUtlRBTree<char const *,unsigned short,bool (__cdecl*)(char const * const &,char const * const &),CUtlMemory<UtlRBTreeNode_t<char const *,unsigned short>,unsigned short> >::RightChild
	mov	WORD PTR _rightchild$[ebp], ax

; 710  : 	SetRightChild( elem, LeftChild(rightchild) );

	movzx	ecx, WORD PTR _rightchild$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?LeftChild@?$CUtlRBTree@PBDGP6A_NABQBD0@ZV?$CUtlMemory@U?$UtlRBTreeNode_t@PBDG@@G@@@@QBEGG@Z ; CUtlRBTree<char const *,unsigned short,bool (__cdecl*)(char const * const &,char const * const &),CUtlMemory<UtlRBTreeNode_t<char const *,unsigned short>,unsigned short> >::LeftChild
	movzx	edx, ax
	push	edx
	movzx	eax, WORD PTR _elem$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetRightChild@?$CUtlRBTree@PBDGP6A_NABQBD0@ZV?$CUtlMemory@U?$UtlRBTreeNode_t@PBDG@@G@@@@IAEXGG@Z ; CUtlRBTree<char const *,unsigned short,bool (__cdecl*)(char const * const &,char const * const &),CUtlMemory<UtlRBTreeNode_t<char const *,unsigned short>,unsigned short> >::SetRightChild

; 711  : 	if (LeftChild(rightchild) != InvalidIndex())

	movzx	ecx, WORD PTR _rightchild$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?LeftChild@?$CUtlRBTree@PBDGP6A_NABQBD0@ZV?$CUtlMemory@U?$UtlRBTreeNode_t@PBDG@@G@@@@QBEGG@Z ; CUtlRBTree<char const *,unsigned short,bool (__cdecl*)(char const * const &,char const * const &),CUtlMemory<UtlRBTreeNode_t<char const *,unsigned short>,unsigned short> >::LeftChild
	movzx	esi, ax
	call	?InvalidIndex@?$CUtlRBTree@PBDGP6A_NABQBD0@ZV?$CUtlMemory@U?$UtlRBTreeNode_t@PBDG@@G@@@@SAGXZ ; CUtlRBTree<char const *,unsigned short,bool (__cdecl*)(char const * const &,char const * const &),CUtlMemory<UtlRBTreeNode_t<char const *,unsigned short>,unsigned short> >::InvalidIndex
	movzx	edx, ax
	cmp	esi, edx
	je	SHORT $LN2@RotateLeft

; 712  : 		SetParent( LeftChild(rightchild), elem );

	movzx	eax, WORD PTR _elem$[ebp]
	push	eax
	movzx	ecx, WORD PTR _rightchild$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?LeftChild@?$CUtlRBTree@PBDGP6A_NABQBD0@ZV?$CUtlMemory@U?$UtlRBTreeNode_t@PBDG@@G@@@@QBEGG@Z ; CUtlRBTree<char const *,unsigned short,bool (__cdecl*)(char const * const &,char const * const &),CUtlMemory<UtlRBTreeNode_t<char const *,unsigned short>,unsigned short> >::LeftChild
	movzx	edx, ax
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetParent@?$CUtlRBTree@PBDGP6A_NABQBD0@ZV?$CUtlMemory@U?$UtlRBTreeNode_t@PBDG@@G@@@@IAEXGG@Z ; CUtlRBTree<char const *,unsigned short,bool (__cdecl*)(char const * const &,char const * const &),CUtlMemory<UtlRBTreeNode_t<char const *,unsigned short>,unsigned short> >::SetParent
$LN2@RotateLeft:

; 713  : 
; 714  : 	if (rightchild != InvalidIndex())

	movzx	esi, WORD PTR _rightchild$[ebp]
	call	?InvalidIndex@?$CUtlRBTree@PBDGP6A_NABQBD0@ZV?$CUtlMemory@U?$UtlRBTreeNode_t@PBDG@@G@@@@SAGXZ ; CUtlRBTree<char const *,unsigned short,bool (__cdecl*)(char const * const &,char const * const &),CUtlMemory<UtlRBTreeNode_t<char const *,unsigned short>,unsigned short> >::InvalidIndex
	movzx	eax, ax
	cmp	esi, eax
	je	SHORT $LN3@RotateLeft

; 715  : 		SetParent( rightchild, Parent(elem) );

	movzx	ecx, WORD PTR _elem$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Parent@?$CUtlRBTree@PBDGP6A_NABQBD0@ZV?$CUtlMemory@U?$UtlRBTreeNode_t@PBDG@@G@@@@QBEGG@Z ; CUtlRBTree<char const *,unsigned short,bool (__cdecl*)(char const * const &,char const * const &),CUtlMemory<UtlRBTreeNode_t<char const *,unsigned short>,unsigned short> >::Parent
	movzx	edx, ax
	push	edx
	movzx	eax, WORD PTR _rightchild$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetParent@?$CUtlRBTree@PBDGP6A_NABQBD0@ZV?$CUtlMemory@U?$UtlRBTreeNode_t@PBDG@@G@@@@IAEXGG@Z ; CUtlRBTree<char const *,unsigned short,bool (__cdecl*)(char const * const &,char const * const &),CUtlMemory<UtlRBTreeNode_t<char const *,unsigned short>,unsigned short> >::SetParent
$LN3@RotateLeft:

; 716  : 	if (!IsRoot(elem))

	movzx	ecx, WORD PTR _elem$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsRoot@?$CUtlRBTree@PBDGP6A_NABQBD0@ZV?$CUtlMemory@U?$UtlRBTreeNode_t@PBDG@@G@@@@QBE_NG@Z ; CUtlRBTree<char const *,unsigned short,bool (__cdecl*)(char const * const &,char const * const &),CUtlMemory<UtlRBTreeNode_t<char const *,unsigned short>,unsigned short> >::IsRoot
	movzx	edx, al
	test	edx, edx
	jne	SHORT $LN4@RotateLeft

; 717  : 	{
; 718  : 		if (IsLeftChild(elem))

	movzx	eax, WORD PTR _elem$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsLeftChild@?$CUtlRBTree@PBDGP6A_NABQBD0@ZV?$CUtlMemory@U?$UtlRBTreeNode_t@PBDG@@G@@@@QBE_NG@Z ; CUtlRBTree<char const *,unsigned short,bool (__cdecl*)(char const * const &,char const * const &),CUtlMemory<UtlRBTreeNode_t<char const *,unsigned short>,unsigned short> >::IsLeftChild
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN6@RotateLeft

; 719  : 			SetLeftChild( Parent(elem), rightchild );

	movzx	edx, WORD PTR _rightchild$[ebp]
	push	edx
	movzx	eax, WORD PTR _elem$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Parent@?$CUtlRBTree@PBDGP6A_NABQBD0@ZV?$CUtlMemory@U?$UtlRBTreeNode_t@PBDG@@G@@@@QBEGG@Z ; CUtlRBTree<char const *,unsigned short,bool (__cdecl*)(char const * const &,char const * const &),CUtlMemory<UtlRBTreeNode_t<char const *,unsigned short>,unsigned short> >::Parent
	movzx	ecx, ax
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetLeftChild@?$CUtlRBTree@PBDGP6A_NABQBD0@ZV?$CUtlMemory@U?$UtlRBTreeNode_t@PBDG@@G@@@@IAEXGG@Z ; CUtlRBTree<char const *,unsigned short,bool (__cdecl*)(char const * const &,char const * const &),CUtlMemory<UtlRBTreeNode_t<char const *,unsigned short>,unsigned short> >::SetLeftChild

; 720  : 		else

	jmp	SHORT $LN7@RotateLeft
$LN6@RotateLeft:

; 721  : 			SetRightChild( Parent(elem), rightchild );

	movzx	edx, WORD PTR _rightchild$[ebp]
	push	edx
	movzx	eax, WORD PTR _elem$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Parent@?$CUtlRBTree@PBDGP6A_NABQBD0@ZV?$CUtlMemory@U?$UtlRBTreeNode_t@PBDG@@G@@@@QBEGG@Z ; CUtlRBTree<char const *,unsigned short,bool (__cdecl*)(char const * const &,char const * const &),CUtlMemory<UtlRBTreeNode_t<char const *,unsigned short>,unsigned short> >::Parent
	movzx	ecx, ax
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetRightChild@?$CUtlRBTree@PBDGP6A_NABQBD0@ZV?$CUtlMemory@U?$UtlRBTreeNode_t@PBDG@@G@@@@IAEXGG@Z ; CUtlRBTree<char const *,unsigned short,bool (__cdecl*)(char const * const &,char const * const &),CUtlMemory<UtlRBTreeNode_t<char const *,unsigned short>,unsigned short> >::SetRightChild
$LN7@RotateLeft:

; 722  : 	}
; 723  : 	else

	jmp	SHORT $LN5@RotateLeft
$LN4@RotateLeft:

; 724  : 		m_Root = rightchild;

	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR _rightchild$[ebp]
	mov	WORD PTR [edx+16], ax
$LN5@RotateLeft:

; 725  : 
; 726  : 	SetLeftChild( rightchild, elem );

	movzx	ecx, WORD PTR _elem$[ebp]
	push	ecx
	movzx	edx, WORD PTR _rightchild$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetLeftChild@?$CUtlRBTree@PBDGP6A_NABQBD0@ZV?$CUtlMemory@U?$UtlRBTreeNode_t@PBDG@@G@@@@IAEXGG@Z ; CUtlRBTree<char const *,unsigned short,bool (__cdecl*)(char const * const &,char const * const &),CUtlMemory<UtlRBTreeNode_t<char const *,unsigned short>,unsigned short> >::SetLeftChild

; 727  : 	if (elem != InvalidIndex())

	movzx	esi, WORD PTR _elem$[ebp]
	call	?InvalidIndex@?$CUtlRBTree@PBDGP6A_NABQBD0@ZV?$CUtlMemory@U?$UtlRBTreeNode_t@PBDG@@G@@@@SAGXZ ; CUtlRBTree<char const *,unsigned short,bool (__cdecl*)(char const * const &,char const * const &),CUtlMemory<UtlRBTreeNode_t<char const *,unsigned short>,unsigned short> >::InvalidIndex
	movzx	eax, ax
	cmp	esi, eax
	je	SHORT $LN1@RotateLeft

; 728  : 		SetParent( elem, rightchild );

	movzx	ecx, WORD PTR _rightchild$[ebp]
	push	ecx
	movzx	edx, WORD PTR _elem$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetParent@?$CUtlRBTree@PBDGP6A_NABQBD0@ZV?$CUtlMemory@U?$UtlRBTreeNode_t@PBDG@@G@@@@IAEXGG@Z ; CUtlRBTree<char const *,unsigned short,bool (__cdecl*)(char const * const &,char const * const &),CUtlMemory<UtlRBTreeNode_t<char const *,unsigned short>,unsigned short> >::SetParent
$LN1@RotateLeft:

; 729  : }

	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
?RotateLeft@?$CUtlRBTree@PBDGP6A_NABQBD0@ZV?$CUtlMemory@U?$UtlRBTreeNode_t@PBDG@@G@@@@IAEXG@Z ENDP ; CUtlRBTree<char const *,unsigned short,bool (__cdecl*)(char const * const &,char const * const &),CUtlMemory<UtlRBTreeNode_t<char const *,unsigned short>,unsigned short> >::RotateLeft
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xashxt_v0.81_rev.1_with_sources\xashxt_v0.81_rev.1_src\game_shared\utlrbtree.h
;	COMDAT ?SetColor@?$CUtlRBTree@PBDGP6A_NABQBD0@ZV?$CUtlMemory@U?$UtlRBTreeNode_t@PBDG@@G@@@@IAEXGW4NodeColor_t@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_i$ = 8							; size = 2
_c$ = 12						; size = 4
?SetColor@?$CUtlRBTree@PBDGP6A_NABQBD0@ZV?$CUtlMemory@U?$UtlRBTreeNode_t@PBDG@@G@@@@IAEXGW4NodeColor_t@1@@Z PROC ; CUtlRBTree<char const *,unsigned short,bool (__cdecl*)(char const * const &,char const * const &),CUtlMemory<UtlRBTreeNode_t<char const *,unsigned short>,unsigned short> >::SetColor, COMDAT
; _this$ = ecx

; 637  : { 

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 638  : 	Links(i).m_Tag = (I)c; 

	movzx	eax, WORD PTR _i$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Links@?$CUtlRBTree@PBDGP6A_NABQBD0@ZV?$CUtlMemory@U?$UtlRBTreeNode_t@PBDG@@G@@@@IAEAAU?$UtlRBTreeLinks_t@G@@G@Z ; CUtlRBTree<char const *,unsigned short,bool (__cdecl*)(char const * const &,char const * const &),CUtlMemory<UtlRBTreeNode_t<char const *,unsigned short>,unsigned short> >::Links
	mov	cx, WORD PTR _c$[ebp]
	mov	WORD PTR [eax+6], cx

; 639  : }

	mov	esp, ebp
	pop	ebp
	ret	8
?SetColor@?$CUtlRBTree@PBDGP6A_NABQBD0@ZV?$CUtlMemory@U?$UtlRBTreeNode_t@PBDG@@G@@@@IAEXGW4NodeColor_t@1@@Z ENDP ; CUtlRBTree<char const *,unsigned short,bool (__cdecl*)(char const * const &,char const * const &),CUtlMemory<UtlRBTreeNode_t<char const *,unsigned short>,unsigned short> >::SetColor
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xashxt_v0.81_rev.1_with_sources\xashxt_v0.81_rev.1_src\game_shared\utlrbtree.h
;	COMDAT ?Color@?$CUtlRBTree@PBDGP6A_NABQBD0@ZV?$CUtlMemory@U?$UtlRBTreeNode_t@PBDG@@G@@@@IBE?AW4NodeColor_t@1@G@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_i$ = 8							; size = 2
?Color@?$CUtlRBTree@PBDGP6A_NABQBD0@ZV?$CUtlMemory@U?$UtlRBTreeNode_t@PBDG@@G@@@@IBE?AW4NodeColor_t@1@G@Z PROC ; CUtlRBTree<char const *,unsigned short,bool (__cdecl*)(char const * const &,char const * const &),CUtlMemory<UtlRBTreeNode_t<char const *,unsigned short>,unsigned short> >::Color, COMDAT
; _this$ = ecx

; 631  : { 

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 632  : 	return (NodeColor_t)Links(i).m_Tag; 

	movzx	eax, WORD PTR _i$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Links@?$CUtlRBTree@PBDGP6A_NABQBD0@ZV?$CUtlMemory@U?$UtlRBTreeNode_t@PBDG@@G@@@@IBEABU?$UtlRBTreeLinks_t@G@@G@Z ; CUtlRBTree<char const *,unsigned short,bool (__cdecl*)(char const * const &,char const * const &),CUtlMemory<UtlRBTreeNode_t<char const *,unsigned short>,unsigned short> >::Links
	movzx	eax, WORD PTR [eax+6]

; 633  : }

	mov	esp, ebp
	pop	ebp
	ret	4
?Color@?$CUtlRBTree@PBDGP6A_NABQBD0@ZV?$CUtlMemory@U?$UtlRBTreeNode_t@PBDG@@G@@@@IBE?AW4NodeColor_t@1@G@Z ENDP ; CUtlRBTree<char const *,unsigned short,bool (__cdecl*)(char const * const &,char const * const &),CUtlMemory<UtlRBTreeNode_t<char const *,unsigned short>,unsigned short> >::Color
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xashxt_v0.81_rev.1_with_sources\xashxt_v0.81_rev.1_src\game_shared\utlrbtree.h
;	COMDAT ?IsRed@?$CUtlRBTree@PBDGP6A_NABQBD0@ZV?$CUtlMemory@U?$UtlRBTreeNode_t@PBDG@@G@@@@IBE_NG@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv70 = -4						; size = 4
_i$ = 8							; size = 2
?IsRed@?$CUtlRBTree@PBDGP6A_NABQBD0@ZV?$CUtlMemory@U?$UtlRBTreeNode_t@PBDG@@G@@@@IBE_NG@Z PROC ; CUtlRBTree<char const *,unsigned short,bool (__cdecl*)(char const * const &,char const * const &),CUtlMemory<UtlRBTreeNode_t<char const *,unsigned short>,unsigned short> >::IsRed, COMDAT
; _this$ = ecx

; 614  : { 

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 615  : 	return (Links(i).m_Tag == RED); 

	movzx	eax, WORD PTR _i$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Links@?$CUtlRBTree@PBDGP6A_NABQBD0@ZV?$CUtlMemory@U?$UtlRBTreeNode_t@PBDG@@G@@@@IBEABU?$UtlRBTreeLinks_t@G@@G@Z ; CUtlRBTree<char const *,unsigned short,bool (__cdecl*)(char const * const &,char const * const &),CUtlMemory<UtlRBTreeNode_t<char const *,unsigned short>,unsigned short> >::Links
	movzx	ecx, WORD PTR [eax+6]
	test	ecx, ecx
	jne	SHORT $LN3@IsRed
	mov	DWORD PTR tv70[ebp], 1
	jmp	SHORT $LN4@IsRed
$LN3@IsRed:
	mov	DWORD PTR tv70[ebp], 0
$LN4@IsRed:
	mov	al, BYTE PTR tv70[ebp]

; 616  : }

	mov	esp, ebp
	pop	ebp
	ret	4
?IsRed@?$CUtlRBTree@PBDGP6A_NABQBD0@ZV?$CUtlMemory@U?$UtlRBTreeNode_t@PBDG@@G@@@@IBE_NG@Z ENDP ; CUtlRBTree<char const *,unsigned short,bool (__cdecl*)(char const * const &,char const * const &),CUtlMemory<UtlRBTreeNode_t<char const *,unsigned short>,unsigned short> >::IsRed
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xashxt_v0.81_rev.1_with_sources\xashxt_v0.81_rev.1_src\game_shared\utlrbtree.h
;	COMDAT ?Links@?$CUtlRBTree@PBDGP6A_NABQBD0@ZV?$CUtlMemory@U?$UtlRBTreeNode_t@PBDG@@G@@@@IAEAAU?$UtlRBTreeLinks_t@G@@G@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_i$ = 8							; size = 2
?Links@?$CUtlRBTree@PBDGP6A_NABQBD0@ZV?$CUtlMemory@U?$UtlRBTreeNode_t@PBDG@@G@@@@IAEAAU?$UtlRBTreeLinks_t@G@@G@Z PROC ; CUtlRBTree<char const *,unsigned short,bool (__cdecl*)(char const * const &,char const * const &),CUtlMemory<UtlRBTreeNode_t<char const *,unsigned short>,unsigned short> >::Links, COMDAT
; _this$ = ecx

; 603  : { 

	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR _this$[ebp], ecx

; 604  : 	assert(i != InvalidIndex()); 

	movzx	esi, WORD PTR _i$[ebp]
	call	?InvalidIndex@?$CUtlRBTree@PBDGP6A_NABQBD0@ZV?$CUtlMemory@U?$UtlRBTreeNode_t@PBDG@@G@@@@SAGXZ ; CUtlRBTree<char const *,unsigned short,bool (__cdecl*)(char const * const &,char const * const &),CUtlMemory<UtlRBTreeNode_t<char const *,unsigned short>,unsigned short> >::InvalidIndex
	movzx	eax, ax
	cmp	esi, eax
	jne	SHORT $LN3@Links
	push	604					; 0000025cH
	push	OFFSET ??_C@_1MO@CDOOJGLP@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAu?$AAs?$AAe?$AAr?$AA?2?$AAd@
	push	OFFSET ??_C@_1CI@BLCAOE@?$AAi?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AAI?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AAI?$AAn?$AAd@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN3@Links:

; 605  : 	return *(Links_t *)&m_Elements[i];

	movzx	edx, WORD PTR _i$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??A?$CUtlMemory@U?$UtlRBTreeNode_t@PBDG@@G@@QAEAAU?$UtlRBTreeNode_t@PBDG@@G@Z ; CUtlMemory<UtlRBTreeNode_t<char const *,unsigned short>,unsigned short>::operator[]

; 606  : }

	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
?Links@?$CUtlRBTree@PBDGP6A_NABQBD0@ZV?$CUtlMemory@U?$UtlRBTreeNode_t@PBDG@@G@@@@IAEAAU?$UtlRBTreeLinks_t@G@@G@Z ENDP ; CUtlRBTree<char const *,unsigned short,bool (__cdecl*)(char const * const &,char const * const &),CUtlMemory<UtlRBTreeNode_t<char const *,unsigned short>,unsigned short> >::Links
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xashxt_v0.81_rev.1_with_sources\xashxt_v0.81_rev.1_src\game_shared\utlrbtree.h
;	COMDAT ?Links@?$CUtlRBTree@PBDGP6A_NABQBD0@ZV?$CUtlMemory@U?$UtlRBTreeNode_t@PBDG@@G@@@@IBEABU?$UtlRBTreeLinks_t@G@@G@Z
_TEXT	SEGMENT
$T2 = -24						; size = 4
_this$ = -20						; size = 4
tv87 = -16						; size = 4
__$EHRec$ = -12						; size = 12
_i$ = 8							; size = 2
?Links@?$CUtlRBTree@PBDGP6A_NABQBD0@ZV?$CUtlMemory@U?$UtlRBTreeNode_t@PBDG@@G@@@@IBEABU?$UtlRBTreeLinks_t@G@@G@Z PROC ; CUtlRBTree<char const *,unsigned short,bool (__cdecl*)(char const * const &,char const * const &),CUtlMemory<UtlRBTreeNode_t<char const *,unsigned short>,unsigned short> >::Links, COMDAT
; _this$ = ecx

; 591  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?Links@?$CUtlRBTree@PBDGP6A_NABQBD0@ZV?$CUtlMemory@U?$UtlRBTreeNode_t@PBDG@@G@@@@IBEABU?$UtlRBTreeLinks_t@G@@G@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 12					; 0000000cH
	push	esi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 592  : 	// Sentinel node, makes life easier
; 593  : 	static Links_t s_Sentinel = 

	mov	eax, DWORD PTR __tls_index
	mov	ecx, DWORD PTR fs:__tls_array
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR ?$TSS0@?1??Links@?$CUtlRBTree@PBDGP6A_NABQBD0@ZV?$CUtlMemory@U?$UtlRBTreeNode_t@PBDG@@G@@@@IBEABU?$UtlRBTreeLinks_t@G@@G@Z@4HA ; TSS0<`template-parameter-2',CUtlRBTree<char const *,unsigned short,bool (__cdecl*)(char const * const &,char const * const &),CUtlMemory<UtlRBTreeNode_t<char const *,unsigned short>,unsigned short> >::nks,unsigned int,`generic-class-parameter-0',G::lRBTreeLinks_t,unsigned short>
	cmp	eax, DWORD PTR __Init_thread_epoch[edx]
	jle	SHORT $LN2@Links
	push	OFFSET ?$TSS0@?1??Links@?$CUtlRBTree@PBDGP6A_NABQBD0@ZV?$CUtlMemory@U?$UtlRBTreeNode_t@PBDG@@G@@@@IBEABU?$UtlRBTreeLinks_t@G@@G@Z@4HA ; TSS0<`template-parameter-2',CUtlRBTree<char const *,unsigned short,bool (__cdecl*)(char const * const &,char const * const &),CUtlMemory<UtlRBTreeNode_t<char const *,unsigned short>,unsigned short> >::nks,unsigned int,`generic-class-parameter-0',G::lRBTreeLinks_t,unsigned short>
	call	__Init_thread_header
	add	esp, 4
	cmp	DWORD PTR ?$TSS0@?1??Links@?$CUtlRBTree@PBDGP6A_NABQBD0@ZV?$CUtlMemory@U?$UtlRBTreeNode_t@PBDG@@G@@@@IBEABU?$UtlRBTreeLinks_t@G@@G@Z@4HA, -1 ; TSS0<`template-parameter-2',CUtlRBTree<char const *,unsigned short,bool (__cdecl*)(char const * const &,char const * const &),CUtlMemory<UtlRBTreeNode_t<char const *,unsigned short>,unsigned short> >::nks,unsigned int,`generic-class-parameter-0',G::lRBTreeLinks_t,unsigned short>
	jne	SHORT $LN2@Links
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 594  : 	{ 
; 595  : 		InvalidIndex(), InvalidIndex(), InvalidIndex(), CUtlRBTree<T, I, L, M>::BLACK 

	call	?InvalidIndex@?$CUtlRBTree@PBDGP6A_NABQBD0@ZV?$CUtlMemory@U?$UtlRBTreeNode_t@PBDG@@G@@@@SAGXZ ; CUtlRBTree<char const *,unsigned short,bool (__cdecl*)(char const * const &,char const * const &),CUtlMemory<UtlRBTreeNode_t<char const *,unsigned short>,unsigned short> >::InvalidIndex
	mov	WORD PTR ?s_Sentinel@?1??Links@?$CUtlRBTree@PBDGP6A_NABQBD0@ZV?$CUtlMemory@U?$UtlRBTreeNode_t@PBDG@@G@@@@IBEABU?$UtlRBTreeLinks_t@G@@G@Z@4U3@A, ax
	call	?InvalidIndex@?$CUtlRBTree@PBDGP6A_NABQBD0@ZV?$CUtlMemory@U?$UtlRBTreeNode_t@PBDG@@G@@@@SAGXZ ; CUtlRBTree<char const *,unsigned short,bool (__cdecl*)(char const * const &,char const * const &),CUtlMemory<UtlRBTreeNode_t<char const *,unsigned short>,unsigned short> >::InvalidIndex
	mov	WORD PTR ?s_Sentinel@?1??Links@?$CUtlRBTree@PBDGP6A_NABQBD0@ZV?$CUtlMemory@U?$UtlRBTreeNode_t@PBDG@@G@@@@IBEABU?$UtlRBTreeLinks_t@G@@G@Z@4U3@A+2, ax
	call	?InvalidIndex@?$CUtlRBTree@PBDGP6A_NABQBD0@ZV?$CUtlMemory@U?$UtlRBTreeNode_t@PBDG@@G@@@@SAGXZ ; CUtlRBTree<char const *,unsigned short,bool (__cdecl*)(char const * const &,char const * const &),CUtlMemory<UtlRBTreeNode_t<char const *,unsigned short>,unsigned short> >::InvalidIndex
	mov	WORD PTR ?s_Sentinel@?1??Links@?$CUtlRBTree@PBDGP6A_NABQBD0@ZV?$CUtlMemory@U?$UtlRBTreeNode_t@PBDG@@G@@@@IBEABU?$UtlRBTreeLinks_t@G@@G@Z@4U3@A+4, ax
	mov	ecx, 1
	mov	WORD PTR ?s_Sentinel@?1??Links@?$CUtlRBTree@PBDGP6A_NABQBD0@ZV?$CUtlMemory@U?$UtlRBTreeNode_t@PBDG@@G@@@@IBEABU?$UtlRBTreeLinks_t@G@@G@Z@4U3@A+6, cx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	push	OFFSET ?$TSS0@?1??Links@?$CUtlRBTree@PBDGP6A_NABQBD0@ZV?$CUtlMemory@U?$UtlRBTreeNode_t@PBDG@@G@@@@IBEABU?$UtlRBTreeLinks_t@G@@G@Z@4HA ; TSS0<`template-parameter-2',CUtlRBTree<char const *,unsigned short,bool (__cdecl*)(char const * const &,char const * const &),CUtlMemory<UtlRBTreeNode_t<char const *,unsigned short>,unsigned short> >::nks,unsigned int,`generic-class-parameter-0',G::lRBTreeLinks_t,unsigned short>
	call	__Init_thread_footer
	add	esp, 4
$LN2@Links:

; 596  : 	};
; 597  : 
; 598  : 	return (i != InvalidIndex()) ? *(Links_t*)&m_Elements[i] : *(Links_t*)&s_Sentinel;

	movzx	esi, WORD PTR _i$[ebp]
	call	?InvalidIndex@?$CUtlRBTree@PBDGP6A_NABQBD0@ZV?$CUtlMemory@U?$UtlRBTreeNode_t@PBDG@@G@@@@SAGXZ ; CUtlRBTree<char const *,unsigned short,bool (__cdecl*)(char const * const &,char const * const &),CUtlMemory<UtlRBTreeNode_t<char const *,unsigned short>,unsigned short> >::InvalidIndex
	movzx	edx, ax
	cmp	esi, edx
	je	SHORT $LN4@Links
	movzx	eax, WORD PTR _i$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??A?$CUtlMemory@U?$UtlRBTreeNode_t@PBDG@@G@@QBEABU?$UtlRBTreeNode_t@PBDG@@G@Z ; CUtlMemory<UtlRBTreeNode_t<char const *,unsigned short>,unsigned short>::operator[]
	mov	DWORD PTR tv87[ebp], eax
	jmp	SHORT $LN5@Links
$LN4@Links:
	mov	DWORD PTR tv87[ebp], OFFSET ?s_Sentinel@?1??Links@?$CUtlRBTree@PBDGP6A_NABQBD0@ZV?$CUtlMemory@U?$UtlRBTreeNode_t@PBDG@@G@@@@IBEABU?$UtlRBTreeLinks_t@G@@G@Z@4U3@A ; `CUtlRBTree<char const *,unsigned short,bool (__cdecl*)(char const * const &,char const * const &),CUtlMemory<UtlRBTreeNode_t<char const *,unsigned short>,unsigned short> >::Links'::`2'::s_Sentinel
$LN5@Links:
	mov	ecx, DWORD PTR tv87[ebp]
	mov	DWORD PTR $T2[ebp], ecx
	mov	eax, DWORD PTR $T2[ebp]

; 599  : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?Links@?$CUtlRBTree@PBDGP6A_NABQBD0@ZV?$CUtlMemory@U?$UtlRBTreeNode_t@PBDG@@G@@@@IBEABU?$UtlRBTreeLinks_t@G@@G@Z$0:
	push	OFFSET ?$TSS0@?1??Links@?$CUtlRBTree@PBDGP6A_NABQBD0@ZV?$CUtlMemory@U?$UtlRBTreeNode_t@PBDG@@G@@@@IBEABU?$UtlRBTreeLinks_t@G@@G@Z@4HA ; TSS0<`template-parameter-2',CUtlRBTree<char const *,unsigned short,bool (__cdecl*)(char const * const &,char const * const &),CUtlMemory<UtlRBTreeNode_t<char const *,unsigned short>,unsigned short> >::nks,unsigned int,`generic-class-parameter-0',G::lRBTreeLinks_t,unsigned short>
	call	__Init_thread_abort
	pop	ecx
	ret	0
__ehhandler$?Links@?$CUtlRBTree@PBDGP6A_NABQBD0@ZV?$CUtlMemory@U?$UtlRBTreeNode_t@PBDG@@G@@@@IBEABU?$UtlRBTreeLinks_t@G@@G@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-20]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?Links@?$CUtlRBTree@PBDGP6A_NABQBD0@ZV?$CUtlMemory@U?$UtlRBTreeNode_t@PBDG@@G@@@@IBEABU?$UtlRBTreeLinks_t@G@@G@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?Links@?$CUtlRBTree@PBDGP6A_NABQBD0@ZV?$CUtlMemory@U?$UtlRBTreeNode_t@PBDG@@G@@@@IBEABU?$UtlRBTreeLinks_t@G@@G@Z ENDP ; CUtlRBTree<char const *,unsigned short,bool (__cdecl*)(char const * const &,char const * const &),CUtlMemory<UtlRBTreeNode_t<char const *,unsigned short>,unsigned short> >::Links
; Function compile flags: /Odtp
; File c:\users\user\downloads\xashxt_v0.81_rev.1_with_sources\xashxt_v0.81_rev.1_src\game_shared\utlrbtree.h
;	COMDAT ?LinkToParent@?$CUtlRBTree@PBDGP6A_NABQBD0@ZV?$CUtlMemory@U?$UtlRBTreeNode_t@PBDG@@G@@@@IAEXGG_N@Z
_TEXT	SEGMENT
_elem$ = -12						; size = 4
_this$ = -8						; size = 4
tv70 = -2						; size = 2
_i$ = 8							; size = 2
_parent$ = 12						; size = 2
_isLeft$ = 16						; size = 1
?LinkToParent@?$CUtlRBTree@PBDGP6A_NABQBD0@ZV?$CUtlMemory@U?$UtlRBTreeNode_t@PBDG@@G@@@@IAEXGG_N@Z PROC ; CUtlRBTree<char const *,unsigned short,bool (__cdecl*)(char const * const &,char const * const &),CUtlMemory<UtlRBTreeNode_t<char const *,unsigned short>,unsigned short> >::LinkToParent, COMDAT
; _this$ = ecx

; 855  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	push	esi
	mov	DWORD PTR _this$[ebp], ecx

; 856  : 	Links_t &elem = Links(i);

	movzx	eax, WORD PTR _i$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Links@?$CUtlRBTree@PBDGP6A_NABQBD0@ZV?$CUtlMemory@U?$UtlRBTreeNode_t@PBDG@@G@@@@IAEAAU?$UtlRBTreeLinks_t@G@@G@Z ; CUtlRBTree<char const *,unsigned short,bool (__cdecl*)(char const * const &,char const * const &),CUtlMemory<UtlRBTreeNode_t<char const *,unsigned short>,unsigned short> >::Links
	mov	DWORD PTR _elem$[ebp], eax

; 857  : 	elem.m_Parent = parent;

	mov	ecx, DWORD PTR _elem$[ebp]
	mov	dx, WORD PTR _parent$[ebp]
	mov	WORD PTR [ecx+4], dx

; 858  : 	elem.m_Left = elem.m_Right = InvalidIndex();

	call	?InvalidIndex@?$CUtlRBTree@PBDGP6A_NABQBD0@ZV?$CUtlMemory@U?$UtlRBTreeNode_t@PBDG@@G@@@@SAGXZ ; CUtlRBTree<char const *,unsigned short,bool (__cdecl*)(char const * const &,char const * const &),CUtlMemory<UtlRBTreeNode_t<char const *,unsigned short>,unsigned short> >::InvalidIndex
	mov	WORD PTR tv70[ebp], ax
	mov	eax, DWORD PTR _elem$[ebp]
	mov	cx, WORD PTR tv70[ebp]
	mov	WORD PTR [eax+2], cx
	mov	edx, DWORD PTR _elem$[ebp]
	mov	ax, WORD PTR tv70[ebp]
	mov	WORD PTR [edx], ax

; 859  : 	elem.m_Tag = RED;

	xor	ecx, ecx
	mov	edx, DWORD PTR _elem$[ebp]
	mov	WORD PTR [edx+6], cx

; 860  : 
; 861  : 	/* insert node in tree */
; 862  : 	if (parent != InvalidIndex()) 

	movzx	esi, WORD PTR _parent$[ebp]
	call	?InvalidIndex@?$CUtlRBTree@PBDGP6A_NABQBD0@ZV?$CUtlMemory@U?$UtlRBTreeNode_t@PBDG@@G@@@@SAGXZ ; CUtlRBTree<char const *,unsigned short,bool (__cdecl*)(char const * const &,char const * const &),CUtlMemory<UtlRBTreeNode_t<char const *,unsigned short>,unsigned short> >::InvalidIndex
	movzx	eax, ax
	cmp	esi, eax
	je	SHORT $LN2@LinkToPare

; 863  : 	{
; 864  : 		if (isLeft)

	movzx	ecx, BYTE PTR _isLeft$[ebp]
	test	ecx, ecx
	je	SHORT $LN4@LinkToPare

; 865  : 			Links(parent).m_Left = i;

	movzx	edx, WORD PTR _parent$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Links@?$CUtlRBTree@PBDGP6A_NABQBD0@ZV?$CUtlMemory@U?$UtlRBTreeNode_t@PBDG@@G@@@@IAEAAU?$UtlRBTreeLinks_t@G@@G@Z ; CUtlRBTree<char const *,unsigned short,bool (__cdecl*)(char const * const &,char const * const &),CUtlMemory<UtlRBTreeNode_t<char const *,unsigned short>,unsigned short> >::Links
	mov	cx, WORD PTR _i$[ebp]
	mov	WORD PTR [eax], cx

; 866  : 		else

	jmp	SHORT $LN5@LinkToPare
$LN4@LinkToPare:

; 867  : 			Links(parent).m_Right = i;

	movzx	edx, WORD PTR _parent$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Links@?$CUtlRBTree@PBDGP6A_NABQBD0@ZV?$CUtlMemory@U?$UtlRBTreeNode_t@PBDG@@G@@@@IAEAAU?$UtlRBTreeLinks_t@G@@G@Z ; CUtlRBTree<char const *,unsigned short,bool (__cdecl*)(char const * const &,char const * const &),CUtlMemory<UtlRBTreeNode_t<char const *,unsigned short>,unsigned short> >::Links
	mov	cx, WORD PTR _i$[ebp]
	mov	WORD PTR [eax+2], cx
$LN5@LinkToPare:

; 868  : 	} 
; 869  : 	else 

	jmp	SHORT $LN3@LinkToPare
$LN2@LinkToPare:

; 870  : 	{
; 871  : 		m_Root = i;

	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR _i$[ebp]
	mov	WORD PTR [edx+16], ax
$LN3@LinkToPare:

; 872  : 	}
; 873  : 
; 874  : 	InsertRebalance(i);	

	movzx	ecx, WORD PTR _i$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?InsertRebalance@?$CUtlRBTree@PBDGP6A_NABQBD0@ZV?$CUtlMemory@U?$UtlRBTreeNode_t@PBDG@@G@@@@IAEXG@Z ; CUtlRBTree<char const *,unsigned short,bool (__cdecl*)(char const * const &,char const * const &),CUtlMemory<UtlRBTreeNode_t<char const *,unsigned short>,unsigned short> >::InsertRebalance

; 875  : }

	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?LinkToParent@?$CUtlRBTree@PBDGP6A_NABQBD0@ZV?$CUtlMemory@U?$UtlRBTreeNode_t@PBDG@@G@@@@IAEXGG_N@Z ENDP ; CUtlRBTree<char const *,unsigned short,bool (__cdecl*)(char const * const &,char const * const &),CUtlMemory<UtlRBTreeNode_t<char const *,unsigned short>,unsigned short> >::LinkToParent
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xashxt_v0.81_rev.1_with_sources\xashxt_v0.81_rev.1_src\game_shared\utlrbtree.h
;	COMDAT ?SetRightChild@?$CUtlRBTree@PBDGP6A_NABQBD0@ZV?$CUtlMemory@U?$UtlRBTreeNode_t@PBDG@@G@@@@IAEXGG@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_i$ = 8							; size = 2
_child$ = 12						; size = 2
?SetRightChild@?$CUtlRBTree@PBDGP6A_NABQBD0@ZV?$CUtlMemory@U?$UtlRBTreeNode_t@PBDG@@G@@@@IAEXGG@Z PROC ; CUtlRBTree<char const *,unsigned short,bool (__cdecl*)(char const * const &,char const * const &),CUtlMemory<UtlRBTreeNode_t<char const *,unsigned short>,unsigned short> >::SetRightChild, COMDAT
; _this$ = ecx

; 581  : { 

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 582  : 	Links(i).m_Right = child; 

	movzx	eax, WORD PTR _i$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Links@?$CUtlRBTree@PBDGP6A_NABQBD0@ZV?$CUtlMemory@U?$UtlRBTreeNode_t@PBDG@@G@@@@IAEAAU?$UtlRBTreeLinks_t@G@@G@Z ; CUtlRBTree<char const *,unsigned short,bool (__cdecl*)(char const * const &,char const * const &),CUtlMemory<UtlRBTreeNode_t<char const *,unsigned short>,unsigned short> >::Links
	mov	cx, WORD PTR _child$[ebp]
	mov	WORD PTR [eax+2], cx

; 583  : }

	mov	esp, ebp
	pop	ebp
	ret	8
?SetRightChild@?$CUtlRBTree@PBDGP6A_NABQBD0@ZV?$CUtlMemory@U?$UtlRBTreeNode_t@PBDG@@G@@@@IAEXGG@Z ENDP ; CUtlRBTree<char const *,unsigned short,bool (__cdecl*)(char const * const &,char const * const &),CUtlMemory<UtlRBTreeNode_t<char const *,unsigned short>,unsigned short> >::SetRightChild
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xashxt_v0.81_rev.1_with_sources\xashxt_v0.81_rev.1_src\game_shared\utlrbtree.h
;	COMDAT ?SetLeftChild@?$CUtlRBTree@PBDGP6A_NABQBD0@ZV?$CUtlMemory@U?$UtlRBTreeNode_t@PBDG@@G@@@@IAEXGG@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_i$ = 8							; size = 2
_child$ = 12						; size = 2
?SetLeftChild@?$CUtlRBTree@PBDGP6A_NABQBD0@ZV?$CUtlMemory@U?$UtlRBTreeNode_t@PBDG@@G@@@@IAEXGG@Z PROC ; CUtlRBTree<char const *,unsigned short,bool (__cdecl*)(char const * const &,char const * const &),CUtlMemory<UtlRBTreeNode_t<char const *,unsigned short>,unsigned short> >::SetLeftChild, COMDAT
; _this$ = ecx

; 575  : { 

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 576  : 	Links(i).m_Left = child; 

	movzx	eax, WORD PTR _i$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Links@?$CUtlRBTree@PBDGP6A_NABQBD0@ZV?$CUtlMemory@U?$UtlRBTreeNode_t@PBDG@@G@@@@IAEAAU?$UtlRBTreeLinks_t@G@@G@Z ; CUtlRBTree<char const *,unsigned short,bool (__cdecl*)(char const * const &,char const * const &),CUtlMemory<UtlRBTreeNode_t<char const *,unsigned short>,unsigned short> >::Links
	mov	cx, WORD PTR _child$[ebp]
	mov	WORD PTR [eax], cx

; 577  : }

	mov	esp, ebp
	pop	ebp
	ret	8
?SetLeftChild@?$CUtlRBTree@PBDGP6A_NABQBD0@ZV?$CUtlMemory@U?$UtlRBTreeNode_t@PBDG@@G@@@@IAEXGG@Z ENDP ; CUtlRBTree<char const *,unsigned short,bool (__cdecl*)(char const * const &,char const * const &),CUtlMemory<UtlRBTreeNode_t<char const *,unsigned short>,unsigned short> >::SetLeftChild
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xashxt_v0.81_rev.1_with_sources\xashxt_v0.81_rev.1_src\game_shared\utlrbtree.h
;	COMDAT ?SetParent@?$CUtlRBTree@PBDGP6A_NABQBD0@ZV?$CUtlMemory@U?$UtlRBTreeNode_t@PBDG@@G@@@@IAEXGG@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_i$ = 8							; size = 2
_parent$ = 12						; size = 2
?SetParent@?$CUtlRBTree@PBDGP6A_NABQBD0@ZV?$CUtlMemory@U?$UtlRBTreeNode_t@PBDG@@G@@@@IAEXGG@Z PROC ; CUtlRBTree<char const *,unsigned short,bool (__cdecl*)(char const * const &,char const * const &),CUtlMemory<UtlRBTreeNode_t<char const *,unsigned short>,unsigned short> >::SetParent, COMDAT
; _this$ = ecx

; 569  : { 

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 570  : 	Links(i).m_Parent = parent; 

	movzx	eax, WORD PTR _i$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Links@?$CUtlRBTree@PBDGP6A_NABQBD0@ZV?$CUtlMemory@U?$UtlRBTreeNode_t@PBDG@@G@@@@IAEAAU?$UtlRBTreeLinks_t@G@@G@Z ; CUtlRBTree<char const *,unsigned short,bool (__cdecl*)(char const * const &,char const * const &),CUtlMemory<UtlRBTreeNode_t<char const *,unsigned short>,unsigned short> >::Links
	mov	cx, WORD PTR _parent$[ebp]
	mov	WORD PTR [eax+4], cx

; 571  : }

	mov	esp, ebp
	pop	ebp
	ret	8
?SetParent@?$CUtlRBTree@PBDGP6A_NABQBD0@ZV?$CUtlMemory@U?$UtlRBTreeNode_t@PBDG@@G@@@@IAEXGG@Z ENDP ; CUtlRBTree<char const *,unsigned short,bool (__cdecl*)(char const * const &,char const * const &),CUtlMemory<UtlRBTreeNode_t<char const *,unsigned short>,unsigned short> >::SetParent
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xashxt_v0.81_rev.1_with_sources\xashxt_v0.81_rev.1_src\game_shared\utlrbtree.h
;	COMDAT ?NextInorder@?$CUtlRBTree@PBDGP6A_NABQBD0@ZV?$CUtlMemory@U?$UtlRBTreeNode_t@PBDG@@G@@@@QBEGG@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_parent$ = -4						; size = 2
_i$ = 8							; size = 2
?NextInorder@?$CUtlRBTree@PBDGP6A_NABQBD0@ZV?$CUtlMemory@U?$UtlRBTreeNode_t@PBDG@@G@@@@QBEGG@Z PROC ; CUtlRBTree<char const *,unsigned short,bool (__cdecl*)(char const * const &,char const * const &),CUtlMemory<UtlRBTreeNode_t<char const *,unsigned short>,unsigned short> >::NextInorder, COMDAT
; _this$ = ecx

; 1163 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	push	esi
	mov	DWORD PTR _this$[ebp], ecx

; 1164 : 	assert(IsValidIndex(i));

	movzx	eax, WORD PTR _i$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsValidIndex@?$CUtlRBTree@PBDGP6A_NABQBD0@ZV?$CUtlMemory@U?$UtlRBTreeNode_t@PBDG@@G@@@@QBE_NG@Z ; CUtlRBTree<char const *,unsigned short,bool (__cdecl*)(char const * const &,char const * const &),CUtlMemory<UtlRBTreeNode_t<char const *,unsigned short>,unsigned short> >::IsValidIndex
	movzx	ecx, al
	test	ecx, ecx
	jne	SHORT $LN9@NextInorde
	push	1164					; 0000048cH
	push	OFFSET $SG71654
	push	OFFSET $SG71655
	call	__wassert
	add	esp, 12					; 0000000cH
$LN9@NextInorde:

; 1165 : 
; 1166 : 	if (RightChild(i) != InvalidIndex())

	movzx	eax, WORD PTR _i$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?RightChild@?$CUtlRBTree@PBDGP6A_NABQBD0@ZV?$CUtlMemory@U?$UtlRBTreeNode_t@PBDG@@G@@@@QBEGG@Z ; CUtlRBTree<char const *,unsigned short,bool (__cdecl*)(char const * const &,char const * const &),CUtlMemory<UtlRBTreeNode_t<char const *,unsigned short>,unsigned short> >::RightChild
	movzx	esi, ax
	call	?InvalidIndex@?$CUtlRBTree@PBDGP6A_NABQBD0@ZV?$CUtlMemory@U?$UtlRBTreeNode_t@PBDG@@G@@@@SAGXZ ; CUtlRBTree<char const *,unsigned short,bool (__cdecl*)(char const * const &,char const * const &),CUtlMemory<UtlRBTreeNode_t<char const *,unsigned short>,unsigned short> >::InvalidIndex
	movzx	ecx, ax
	cmp	esi, ecx
	je	SHORT $LN6@NextInorde

; 1167 : 	{
; 1168 : 		i = RightChild(i);

	movzx	edx, WORD PTR _i$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?RightChild@?$CUtlRBTree@PBDGP6A_NABQBD0@ZV?$CUtlMemory@U?$UtlRBTreeNode_t@PBDG@@G@@@@QBEGG@Z ; CUtlRBTree<char const *,unsigned short,bool (__cdecl*)(char const * const &,char const * const &),CUtlMemory<UtlRBTreeNode_t<char const *,unsigned short>,unsigned short> >::RightChild
	mov	WORD PTR _i$[ebp], ax
$LN2@NextInorde:

; 1169 : 		while (LeftChild(i) != InvalidIndex())

	movzx	eax, WORD PTR _i$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?LeftChild@?$CUtlRBTree@PBDGP6A_NABQBD0@ZV?$CUtlMemory@U?$UtlRBTreeNode_t@PBDG@@G@@@@QBEGG@Z ; CUtlRBTree<char const *,unsigned short,bool (__cdecl*)(char const * const &,char const * const &),CUtlMemory<UtlRBTreeNode_t<char const *,unsigned short>,unsigned short> >::LeftChild
	movzx	esi, ax
	call	?InvalidIndex@?$CUtlRBTree@PBDGP6A_NABQBD0@ZV?$CUtlMemory@U?$UtlRBTreeNode_t@PBDG@@G@@@@SAGXZ ; CUtlRBTree<char const *,unsigned short,bool (__cdecl*)(char const * const &,char const * const &),CUtlMemory<UtlRBTreeNode_t<char const *,unsigned short>,unsigned short> >::InvalidIndex
	movzx	ecx, ax
	cmp	esi, ecx
	je	SHORT $LN3@NextInorde

; 1170 : 			i = LeftChild(i);

	movzx	edx, WORD PTR _i$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?LeftChild@?$CUtlRBTree@PBDGP6A_NABQBD0@ZV?$CUtlMemory@U?$UtlRBTreeNode_t@PBDG@@G@@@@QBEGG@Z ; CUtlRBTree<char const *,unsigned short,bool (__cdecl*)(char const * const &,char const * const &),CUtlMemory<UtlRBTreeNode_t<char const *,unsigned short>,unsigned short> >::LeftChild
	mov	WORD PTR _i$[ebp], ax
	jmp	SHORT $LN2@NextInorde
$LN3@NextInorde:

; 1171 : 		return i;

	mov	ax, WORD PTR _i$[ebp]
	jmp	SHORT $LN1@NextInorde
$LN6@NextInorde:

; 1172 : 	}
; 1173 : 
; 1174 : 	I parent = Parent(i);

	movzx	eax, WORD PTR _i$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Parent@?$CUtlRBTree@PBDGP6A_NABQBD0@ZV?$CUtlMemory@U?$UtlRBTreeNode_t@PBDG@@G@@@@QBEGG@Z ; CUtlRBTree<char const *,unsigned short,bool (__cdecl*)(char const * const &,char const * const &),CUtlMemory<UtlRBTreeNode_t<char const *,unsigned short>,unsigned short> >::Parent
	mov	WORD PTR _parent$[ebp], ax
$LN4@NextInorde:

; 1175 : 	while (IsRightChild(i))

	movzx	ecx, WORD PTR _i$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsRightChild@?$CUtlRBTree@PBDGP6A_NABQBD0@ZV?$CUtlMemory@U?$UtlRBTreeNode_t@PBDG@@G@@@@QBE_NG@Z ; CUtlRBTree<char const *,unsigned short,bool (__cdecl*)(char const * const &,char const * const &),CUtlMemory<UtlRBTreeNode_t<char const *,unsigned short>,unsigned short> >::IsRightChild
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN5@NextInorde

; 1176 : 	{
; 1177 : 		i = parent;

	mov	ax, WORD PTR _parent$[ebp]
	mov	WORD PTR _i$[ebp], ax

; 1178 : 		if (i == InvalidIndex()) break;

	movzx	esi, WORD PTR _i$[ebp]
	call	?InvalidIndex@?$CUtlRBTree@PBDGP6A_NABQBD0@ZV?$CUtlMemory@U?$UtlRBTreeNode_t@PBDG@@G@@@@SAGXZ ; CUtlRBTree<char const *,unsigned short,bool (__cdecl*)(char const * const &,char const * const &),CUtlMemory<UtlRBTreeNode_t<char const *,unsigned short>,unsigned short> >::InvalidIndex
	movzx	ecx, ax
	cmp	esi, ecx
	jne	SHORT $LN7@NextInorde
	jmp	SHORT $LN5@NextInorde
$LN7@NextInorde:

; 1179 : 		parent = Parent(i);

	movzx	edx, WORD PTR _i$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Parent@?$CUtlRBTree@PBDGP6A_NABQBD0@ZV?$CUtlMemory@U?$UtlRBTreeNode_t@PBDG@@G@@@@QBEGG@Z ; CUtlRBTree<char const *,unsigned short,bool (__cdecl*)(char const * const &,char const * const &),CUtlMemory<UtlRBTreeNode_t<char const *,unsigned short>,unsigned short> >::Parent
	mov	WORD PTR _parent$[ebp], ax

; 1180 : 	}

	jmp	SHORT $LN4@NextInorde
$LN5@NextInorde:

; 1181 : 	return parent;

	mov	ax, WORD PTR _parent$[ebp]
$LN1@NextInorde:

; 1182 : }

	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
?NextInorder@?$CUtlRBTree@PBDGP6A_NABQBD0@ZV?$CUtlMemory@U?$UtlRBTreeNode_t@PBDG@@G@@@@QBEGG@Z ENDP ; CUtlRBTree<char const *,unsigned short,bool (__cdecl*)(char const * const &,char const * const &),CUtlMemory<UtlRBTreeNode_t<char const *,unsigned short>,unsigned short> >::NextInorder
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xashxt_v0.81_rev.1_with_sources\xashxt_v0.81_rev.1_src\game_shared\utlrbtree.h
;	COMDAT ?FirstInorder@?$CUtlRBTree@PBDGP6A_NABQBD0@ZV?$CUtlMemory@U?$UtlRBTreeNode_t@PBDG@@G@@@@QBEGXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
_i$ = -4						; size = 2
?FirstInorder@?$CUtlRBTree@PBDGP6A_NABQBD0@ZV?$CUtlMemory@U?$UtlRBTreeNode_t@PBDG@@G@@@@QBEGXZ PROC ; CUtlRBTree<char const *,unsigned short,bool (__cdecl*)(char const * const &,char const * const &),CUtlMemory<UtlRBTreeNode_t<char const *,unsigned short>,unsigned short> >::FirstInorder, COMDAT
; _this$ = ecx

; 1154 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	push	esi
	mov	DWORD PTR _this$[ebp], ecx

; 1155 : 	I i = m_Root;

	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+16]
	mov	WORD PTR _i$[ebp], cx
$LN2@FirstInord:

; 1156 : 	while (LeftChild(i) != InvalidIndex())

	movzx	edx, WORD PTR _i$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?LeftChild@?$CUtlRBTree@PBDGP6A_NABQBD0@ZV?$CUtlMemory@U?$UtlRBTreeNode_t@PBDG@@G@@@@QBEGG@Z ; CUtlRBTree<char const *,unsigned short,bool (__cdecl*)(char const * const &,char const * const &),CUtlMemory<UtlRBTreeNode_t<char const *,unsigned short>,unsigned short> >::LeftChild
	movzx	esi, ax
	call	?InvalidIndex@?$CUtlRBTree@PBDGP6A_NABQBD0@ZV?$CUtlMemory@U?$UtlRBTreeNode_t@PBDG@@G@@@@SAGXZ ; CUtlRBTree<char const *,unsigned short,bool (__cdecl*)(char const * const &,char const * const &),CUtlMemory<UtlRBTreeNode_t<char const *,unsigned short>,unsigned short> >::InvalidIndex
	movzx	eax, ax
	cmp	esi, eax
	je	SHORT $LN3@FirstInord

; 1157 : 		i = LeftChild(i);

	movzx	ecx, WORD PTR _i$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?LeftChild@?$CUtlRBTree@PBDGP6A_NABQBD0@ZV?$CUtlMemory@U?$UtlRBTreeNode_t@PBDG@@G@@@@QBEGG@Z ; CUtlRBTree<char const *,unsigned short,bool (__cdecl*)(char const * const &,char const * const &),CUtlMemory<UtlRBTreeNode_t<char const *,unsigned short>,unsigned short> >::LeftChild
	mov	WORD PTR _i$[ebp], ax
	jmp	SHORT $LN2@FirstInord
$LN3@FirstInord:

; 1158 : 	return i;

	mov	ax, WORD PTR _i$[ebp]

; 1159 : }

	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	0
?FirstInorder@?$CUtlRBTree@PBDGP6A_NABQBD0@ZV?$CUtlMemory@U?$UtlRBTreeNode_t@PBDG@@G@@@@QBEGXZ ENDP ; CUtlRBTree<char const *,unsigned short,bool (__cdecl*)(char const * const &,char const * const &),CUtlMemory<UtlRBTreeNode_t<char const *,unsigned short>,unsigned short> >::FirstInorder
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xashxt_v0.81_rev.1_with_sources\xashxt_v0.81_rev.1_src\game_shared\utlrbtree.h
;	COMDAT ?Purge@?$CUtlRBTree@PBDGP6A_NABQBD0@ZV?$CUtlMemory@U?$UtlRBTreeNode_t@PBDG@@G@@@@QAEXXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T1 = -2						; size = 2
?Purge@?$CUtlRBTree@PBDGP6A_NABQBD0@ZV?$CUtlMemory@U?$UtlRBTreeNode_t@PBDG@@G@@@@QAEXXZ PROC ; CUtlRBTree<char const *,unsigned short,bool (__cdecl*)(char const * const &,char const * const &),CUtlMemory<UtlRBTreeNode_t<char const *,unsigned short>,unsigned short> >::Purge, COMDAT
; _this$ = ecx

; 1140 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 1141 : 	RemoveAll();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?RemoveAll@?$CUtlRBTree@PBDGP6A_NABQBD0@ZV?$CUtlMemory@U?$UtlRBTreeNode_t@PBDG@@G@@@@QAEXXZ ; CUtlRBTree<char const *,unsigned short,bool (__cdecl*)(char const * const &,char const * const &),CUtlMemory<UtlRBTreeNode_t<char const *,unsigned short>,unsigned short> >::RemoveAll

; 1142 : 	m_FirstFree = InvalidIndex();

	call	?InvalidIndex@?$CUtlRBTree@PBDGP6A_NABQBD0@ZV?$CUtlMemory@U?$UtlRBTreeNode_t@PBDG@@G@@@@SAGXZ ; CUtlRBTree<char const *,unsigned short,bool (__cdecl*)(char const * const &,char const * const &),CUtlMemory<UtlRBTreeNode_t<char const *,unsigned short>,unsigned short> >::InvalidIndex
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+20], ax

; 1143 : 	m_Elements.Purge();

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	?Purge@?$CUtlMemory@U?$UtlRBTreeNode_t@PBDG@@G@@QAEXXZ ; CUtlMemory<UtlRBTreeNode_t<char const *,unsigned short>,unsigned short>::Purge

; 1144 : 	m_LastAlloc = m_Elements.InvalidIterator();

	lea	edx, DWORD PTR $T1[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	?InvalidIterator@?$CUtlMemory@U?$UtlRBTreeNode_t@PBDG@@G@@QBE?AVIterator_t@1@XZ ; CUtlMemory<UtlRBTreeNode_t<char const *,unsigned short>,unsigned short>::InvalidIterator
	mov	ax, WORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+22], ax

; 1145 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?Purge@?$CUtlRBTree@PBDGP6A_NABQBD0@ZV?$CUtlMemory@U?$UtlRBTreeNode_t@PBDG@@G@@@@QAEXXZ ENDP ; CUtlRBTree<char const *,unsigned short,bool (__cdecl*)(char const * const &,char const * const &),CUtlMemory<UtlRBTreeNode_t<char const *,unsigned short>,unsigned short> >::Purge
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xashxt_v0.81_rev.1_with_sources\xashxt_v0.81_rev.1_src\game_shared\utlrbtree.h
;	COMDAT ?RemoveAll@?$CUtlRBTree@PBDGP6A_NABQBD0@ZV?$CUtlMemory@U?$UtlRBTreeNode_t@PBDG@@G@@@@QAEXXZ
_TEXT	SEGMENT
_this$ = -20						; size = 4
$T1 = -14						; size = 2
$T2 = -12						; size = 2
$T3 = -10						; size = 2
_it$4 = -8						; size = 2
_i$5 = -4						; size = 2
?RemoveAll@?$CUtlRBTree@PBDGP6A_NABQBD0@ZV?$CUtlMemory@U?$UtlRBTreeNode_t@PBDG@@G@@@@QAEXXZ PROC ; CUtlRBTree<char const *,unsigned short,bool (__cdecl*)(char const * const &,char const * const &),CUtlMemory<UtlRBTreeNode_t<char const *,unsigned short>,unsigned short> >::RemoveAll, COMDAT
; _this$ = ecx

; 1099 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	push	esi
	mov	DWORD PTR _this$[ebp], ecx

; 1100 : 	// Have to do some convoluted stuff to invoke the destructor on all
; 1101 : 	// valid elements for the multilist case (since we don't have all elements
; 1102 : 	// connected to each other in a list).
; 1103 : 
; 1104 : 	if ( m_LastAlloc == m_Elements.InvalidIterator() )

	lea	eax, DWORD PTR $T3[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	?InvalidIterator@?$CUtlMemory@U?$UtlRBTreeNode_t@PBDG@@G@@QBE?AVIterator_t@1@XZ ; CUtlMemory<UtlRBTreeNode_t<char const *,unsigned short>,unsigned short>::InvalidIterator
	mov	cx, WORD PTR [eax]
	movzx	edx, cx
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 22					; 00000016H
	call	??8Iterator_t@?$CUtlMemory@U?$UtlRBTreeNode_t@PBDG@@G@@QBE_NV01@@Z ; CUtlMemory<UtlRBTreeNode_t<char const *,unsigned short>,unsigned short>::Iterator_t::operator==
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN5@RemoveAll

; 1105 : 	{
; 1106 : 		assert( m_Root == InvalidIndex() );

	mov	ecx, DWORD PTR _this$[ebp]
	movzx	esi, WORD PTR [ecx+16]
	call	?InvalidIndex@?$CUtlRBTree@PBDGP6A_NABQBD0@ZV?$CUtlMemory@U?$UtlRBTreeNode_t@PBDG@@G@@@@SAGXZ ; CUtlRBTree<char const *,unsigned short,bool (__cdecl*)(char const * const &,char const * const &),CUtlMemory<UtlRBTreeNode_t<char const *,unsigned short>,unsigned short> >::InvalidIndex
	movzx	edx, ax
	cmp	esi, edx
	je	SHORT $LN9@RemoveAll
	push	1106					; 00000452H
	push	OFFSET $SG71887
	push	OFFSET $SG71888
	call	__wassert
	add	esp, 12					; 0000000cH
$LN9@RemoveAll:

; 1107 : 		assert( m_FirstFree == InvalidIndex() );

	mov	ecx, DWORD PTR _this$[ebp]
	movzx	esi, WORD PTR [ecx+20]
	call	?InvalidIndex@?$CUtlRBTree@PBDGP6A_NABQBD0@ZV?$CUtlMemory@U?$UtlRBTreeNode_t@PBDG@@G@@@@SAGXZ ; CUtlRBTree<char const *,unsigned short,bool (__cdecl*)(char const * const &,char const * const &),CUtlMemory<UtlRBTreeNode_t<char const *,unsigned short>,unsigned short> >::InvalidIndex
	movzx	edx, ax
	cmp	esi, edx
	je	SHORT $LN10@RemoveAll
	push	1107					; 00000453H
	push	OFFSET $SG71889
	push	OFFSET $SG71890
	call	__wassert
	add	esp, 12					; 0000000cH
$LN10@RemoveAll:

; 1108 : 		assert( m_NumElements == 0 );

	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+18]
	test	edx, edx
	je	SHORT $LN11@RemoveAll
	push	1108					; 00000454H
	push	OFFSET $SG71891
	push	OFFSET $SG71892
	call	__wassert
	add	esp, 12					; 0000000cH
$LN11@RemoveAll:

; 1109 : 		return;

	jmp	$LN1@RemoveAll
$LN5@RemoveAll:

; 1110 : 	}
; 1111 : 
; 1112 : 	for ( typename M::Iterator_t it = m_Elements.First(); it != m_Elements.InvalidIterator(); it = m_Elements.Next( it ) )

	lea	ecx, DWORD PTR _it$4[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	?First@?$CUtlMemory@U?$UtlRBTreeNode_t@PBDG@@G@@QBE?AVIterator_t@1@XZ ; CUtlMemory<UtlRBTreeNode_t<char const *,unsigned short>,unsigned short>::First
	jmp	SHORT $LN4@RemoveAll
$LN2@RemoveAll:
	lea	edx, DWORD PTR _it$4[ebp]
	push	edx
	lea	eax, DWORD PTR $T2[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	?Next@?$CUtlMemory@U?$UtlRBTreeNode_t@PBDG@@G@@QBE?AVIterator_t@1@ABV21@@Z ; CUtlMemory<UtlRBTreeNode_t<char const *,unsigned short>,unsigned short>::Next
	mov	cx, WORD PTR [eax]
	mov	WORD PTR _it$4[ebp], cx
$LN4@RemoveAll:
	lea	edx, DWORD PTR $T1[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	?InvalidIterator@?$CUtlMemory@U?$UtlRBTreeNode_t@PBDG@@G@@QBE?AVIterator_t@1@XZ ; CUtlMemory<UtlRBTreeNode_t<char const *,unsigned short>,unsigned short>::InvalidIterator
	mov	ax, WORD PTR [eax]
	movzx	ecx, ax
	push	ecx
	lea	ecx, DWORD PTR _it$4[ebp]
	call	??9Iterator_t@?$CUtlMemory@U?$UtlRBTreeNode_t@PBDG@@G@@QBE_NV01@@Z ; CUtlMemory<UtlRBTreeNode_t<char const *,unsigned short>,unsigned short>::Iterator_t::operator!=
	movzx	edx, al
	test	edx, edx
	je	$LN3@RemoveAll

; 1113 : 	{
; 1114 : 		I i = m_Elements.GetIndex( it );

	lea	eax, DWORD PTR _it$4[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	?GetIndex@?$CUtlMemory@U?$UtlRBTreeNode_t@PBDG@@G@@QBEGABVIterator_t@1@@Z ; CUtlMemory<UtlRBTreeNode_t<char const *,unsigned short>,unsigned short>::GetIndex
	mov	WORD PTR _i$5[ebp], ax

; 1115 : 		if ( IsValidIndex( i ) ) // skip elements in the free list

	movzx	ecx, WORD PTR _i$5[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsValidIndex@?$CUtlRBTree@PBDGP6A_NABQBD0@ZV?$CUtlMemory@U?$UtlRBTreeNode_t@PBDG@@G@@@@QBE_NG@Z ; CUtlRBTree<char const *,unsigned short,bool (__cdecl*)(char const * const &,char const * const &),CUtlMemory<UtlRBTreeNode_t<char const *,unsigned short>,unsigned short> >::IsValidIndex
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN6@RemoveAll

; 1116 : 		{
; 1117 : 			Destruct( &Element( i ) );

	movzx	eax, WORD PTR _i$5[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Element@?$CUtlRBTree@PBDGP6A_NABQBD0@ZV?$CUtlMemory@U?$UtlRBTreeNode_t@PBDG@@G@@@@QAEAAPBDG@Z ; CUtlRBTree<char const *,unsigned short,bool (__cdecl*)(char const * const &,char const * const &),CUtlMemory<UtlRBTreeNode_t<char const *,unsigned short>,unsigned short> >::Element
	push	eax
	call	??$Destruct@PBD@@YAXPAPBD@Z		; Destruct<char const *>
	add	esp, 4

; 1118 : 			SetRightChild( i, m_FirstFree );

	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+20]
	push	edx
	movzx	eax, WORD PTR _i$5[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetRightChild@?$CUtlRBTree@PBDGP6A_NABQBD0@ZV?$CUtlMemory@U?$UtlRBTreeNode_t@PBDG@@G@@@@IAEXGG@Z ; CUtlRBTree<char const *,unsigned short,bool (__cdecl*)(char const * const &,char const * const &),CUtlMemory<UtlRBTreeNode_t<char const *,unsigned short>,unsigned short> >::SetRightChild

; 1119 : 			SetLeftChild( i, i );

	movzx	ecx, WORD PTR _i$5[ebp]
	push	ecx
	movzx	edx, WORD PTR _i$5[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetLeftChild@?$CUtlRBTree@PBDGP6A_NABQBD0@ZV?$CUtlMemory@U?$UtlRBTreeNode_t@PBDG@@G@@@@IAEXGG@Z ; CUtlRBTree<char const *,unsigned short,bool (__cdecl*)(char const * const &,char const * const &),CUtlMemory<UtlRBTreeNode_t<char const *,unsigned short>,unsigned short> >::SetLeftChild

; 1120 : 			m_FirstFree = i;

	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR _i$5[ebp]
	mov	WORD PTR [eax+20], cx
$LN6@RemoveAll:

; 1121 : 		}
; 1122 : 
; 1123 : 		if ( it == m_LastAlloc )

	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, WORD PTR [edx+22]
	push	eax
	lea	ecx, DWORD PTR _it$4[ebp]
	call	??8Iterator_t@?$CUtlMemory@U?$UtlRBTreeNode_t@PBDG@@G@@QBE_NV01@@Z ; CUtlMemory<UtlRBTreeNode_t<char const *,unsigned short>,unsigned short>::Iterator_t::operator==
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN7@RemoveAll

; 1124 : 			break; // don't destruct elements that haven't ever been constucted

	jmp	SHORT $LN3@RemoveAll
$LN7@RemoveAll:

; 1125 : 	}

	jmp	$LN2@RemoveAll
$LN3@RemoveAll:

; 1126 : 
; 1127 : 	// Clear everything else out
; 1128 : 	m_Root = InvalidIndex(); 

	call	?InvalidIndex@?$CUtlRBTree@PBDGP6A_NABQBD0@ZV?$CUtlMemory@U?$UtlRBTreeNode_t@PBDG@@G@@@@SAGXZ ; CUtlRBTree<char const *,unsigned short,bool (__cdecl*)(char const * const &,char const * const &),CUtlMemory<UtlRBTreeNode_t<char const *,unsigned short>,unsigned short> >::InvalidIndex
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+16], ax

; 1129 : 	m_NumElements = 0;

	xor	eax, eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+18], ax

; 1130 : 
; 1131 : 	assert( IsValid() );

	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsValid@?$CUtlRBTree@PBDGP6A_NABQBD0@ZV?$CUtlMemory@U?$UtlRBTreeNode_t@PBDG@@G@@@@QBE_NXZ ; CUtlRBTree<char const *,unsigned short,bool (__cdecl*)(char const * const &,char const * const &),CUtlMemory<UtlRBTreeNode_t<char const *,unsigned short>,unsigned short> >::IsValid
	movzx	edx, al
	test	edx, edx
	jne	SHORT $LN1@RemoveAll
	push	1131					; 0000046bH
	push	OFFSET $SG71895
	push	OFFSET $SG71896
	call	__wassert
	add	esp, 12					; 0000000cH
$LN1@RemoveAll:

; 1132 : }

	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	0
?RemoveAll@?$CUtlRBTree@PBDGP6A_NABQBD0@ZV?$CUtlMemory@U?$UtlRBTreeNode_t@PBDG@@G@@@@QAEXXZ ENDP ; CUtlRBTree<char const *,unsigned short,bool (__cdecl*)(char const * const &,char const * const &),CUtlMemory<UtlRBTreeNode_t<char const *,unsigned short>,unsigned short> >::RemoveAll
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xashxt_v0.81_rev.1_with_sources\xashxt_v0.81_rev.1_src\game_shared\utlrbtree.h
;	COMDAT ?Find@?$CUtlRBTree@PBDGP6A_NABQBD0@ZV?$CUtlMemory@U?$UtlRBTreeNode_t@PBDG@@G@@@@QBEGABQBD@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_current$ = -4						; size = 2
_search$ = 8						; size = 4
?Find@?$CUtlRBTree@PBDGP6A_NABQBD0@ZV?$CUtlMemory@U?$UtlRBTreeNode_t@PBDG@@G@@@@QBEGABQBD@Z PROC ; CUtlRBTree<char const *,unsigned short,bool (__cdecl*)(char const * const &,char const * const &),CUtlMemory<UtlRBTreeNode_t<char const *,unsigned short>,unsigned short> >::Find, COMDAT
; _this$ = ecx

; 1525 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	push	esi
	mov	DWORD PTR _this$[ebp], ecx

; 1526 : 	assert( &m_LessFunc );

	cmp	DWORD PTR _this$[ebp], 0
	jne	SHORT $LN9@Find
	push	1526					; 000005f6H
	push	OFFSET $SG71615
	push	OFFSET $SG71616
	call	__wassert
	add	esp, 12					; 0000000cH
$LN9@Find:

; 1527 : 
; 1528 : 	I current = m_Root;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+16]
	mov	WORD PTR _current$[ebp], dx
$LN2@Find:

; 1529 : 	while (current != InvalidIndex()) 

	movzx	esi, WORD PTR _current$[ebp]
	call	?InvalidIndex@?$CUtlRBTree@PBDGP6A_NABQBD0@ZV?$CUtlMemory@U?$UtlRBTreeNode_t@PBDG@@G@@@@SAGXZ ; CUtlRBTree<char const *,unsigned short,bool (__cdecl*)(char const * const &,char const * const &),CUtlMemory<UtlRBTreeNode_t<char const *,unsigned short>,unsigned short> >::InvalidIndex
	movzx	eax, ax
	cmp	esi, eax
	je	SHORT $LN3@Find

; 1530 : 	{
; 1531 : 		if (m_LessFunc( search, Element(current) ))

	movzx	ecx, WORD PTR _current$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Element@?$CUtlRBTree@PBDGP6A_NABQBD0@ZV?$CUtlMemory@U?$UtlRBTreeNode_t@PBDG@@G@@@@QBEABQBDG@Z ; CUtlRBTree<char const *,unsigned short,bool (__cdecl*)(char const * const &,char const * const &),CUtlMemory<UtlRBTreeNode_t<char const *,unsigned short>,unsigned short> >::Element
	push	eax
	mov	edx, DWORD PTR _search$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	call	ecx
	add	esp, 8
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN4@Find

; 1532 : 			current = LeftChild(current);

	movzx	eax, WORD PTR _current$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?LeftChild@?$CUtlRBTree@PBDGP6A_NABQBD0@ZV?$CUtlMemory@U?$UtlRBTreeNode_t@PBDG@@G@@@@QBEGG@Z ; CUtlRBTree<char const *,unsigned short,bool (__cdecl*)(char const * const &,char const * const &),CUtlMemory<UtlRBTreeNode_t<char const *,unsigned short>,unsigned short> >::LeftChild
	mov	WORD PTR _current$[ebp], ax
	jmp	SHORT $LN5@Find
$LN4@Find:

; 1533 : 		else if (m_LessFunc( Element(current), search ))

	mov	ecx, DWORD PTR _search$[ebp]
	push	ecx
	movzx	edx, WORD PTR _current$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Element@?$CUtlRBTree@PBDGP6A_NABQBD0@ZV?$CUtlMemory@U?$UtlRBTreeNode_t@PBDG@@G@@@@QBEABQBDG@Z ; CUtlRBTree<char const *,unsigned short,bool (__cdecl*)(char const * const &,char const * const &),CUtlMemory<UtlRBTreeNode_t<char const *,unsigned short>,unsigned short> >::Element
	push	eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	call	ecx
	add	esp, 8
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN6@Find

; 1534 : 			current = RightChild(current);

	movzx	eax, WORD PTR _current$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?RightChild@?$CUtlRBTree@PBDGP6A_NABQBD0@ZV?$CUtlMemory@U?$UtlRBTreeNode_t@PBDG@@G@@@@QBEGG@Z ; CUtlRBTree<char const *,unsigned short,bool (__cdecl*)(char const * const &,char const * const &),CUtlMemory<UtlRBTreeNode_t<char const *,unsigned short>,unsigned short> >::RightChild
	mov	WORD PTR _current$[ebp], ax

; 1535 : 		else 

	jmp	SHORT $LN5@Find
$LN6@Find:

; 1536 : 			break;

	jmp	SHORT $LN3@Find
$LN5@Find:

; 1537 : 	}

	jmp	SHORT $LN2@Find
$LN3@Find:

; 1538 : 	return current;

	mov	ax, WORD PTR _current$[ebp]

; 1539 : }

	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
?Find@?$CUtlRBTree@PBDGP6A_NABQBD0@ZV?$CUtlMemory@U?$UtlRBTreeNode_t@PBDG@@G@@@@QBEGABQBD@Z ENDP ; CUtlRBTree<char const *,unsigned short,bool (__cdecl*)(char const * const &,char const * const &),CUtlMemory<UtlRBTreeNode_t<char const *,unsigned short>,unsigned short> >::Find
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xashxt_v0.81_rev.1_with_sources\xashxt_v0.81_rev.1_src\game_shared\utlrbtree.h
;	COMDAT ?Insert@?$CUtlRBTree@PBDGP6A_NABQBD0@ZV?$CUtlMemory@U?$UtlRBTreeNode_t@PBDG@@G@@@@QAEGABQBD@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
_parent$ = -12						; size = 2
_newNode$ = -8						; size = 2
_leftchild$ = -1					; size = 1
_insert$ = 8						; size = 4
?Insert@?$CUtlRBTree@PBDGP6A_NABQBD0@ZV?$CUtlMemory@U?$UtlRBTreeNode_t@PBDG@@G@@@@QAEGABQBD@Z PROC ; CUtlRBTree<char const *,unsigned short,bool (__cdecl*)(char const * const &,char const * const &),CUtlMemory<UtlRBTreeNode_t<char const *,unsigned short>,unsigned short> >::Insert, COMDAT
; _this$ = ecx

; 1467 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx

; 1468 : 	// use copy constructor to copy it in
; 1469 : 	I parent;
; 1470 : 	bool leftchild;
; 1471 : 	FindInsertionPosition( insert, parent, leftchild );

	lea	eax, DWORD PTR _leftchild$[ebp]
	push	eax
	lea	ecx, DWORD PTR _parent$[ebp]
	push	ecx
	mov	edx, DWORD PTR _insert$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FindInsertionPosition@?$CUtlRBTree@PBDGP6A_NABQBD0@ZV?$CUtlMemory@U?$UtlRBTreeNode_t@PBDG@@G@@@@IAEXABQBDAAGAA_N@Z ; CUtlRBTree<char const *,unsigned short,bool (__cdecl*)(char const * const &,char const * const &),CUtlMemory<UtlRBTreeNode_t<char const *,unsigned short>,unsigned short> >::FindInsertionPosition

; 1472 : 	I newNode = InsertAt( parent, leftchild );

	movzx	eax, BYTE PTR _leftchild$[ebp]
	push	eax
	movzx	ecx, WORD PTR _parent$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?InsertAt@?$CUtlRBTree@PBDGP6A_NABQBD0@ZV?$CUtlMemory@U?$UtlRBTreeNode_t@PBDG@@G@@@@IAEGG_N@Z ; CUtlRBTree<char const *,unsigned short,bool (__cdecl*)(char const * const &,char const * const &),CUtlMemory<UtlRBTreeNode_t<char const *,unsigned short>,unsigned short> >::InsertAt
	mov	WORD PTR _newNode$[ebp], ax

; 1473 : 	CopyConstruct( &Element( newNode ), insert );

	mov	edx, DWORD PTR _insert$[ebp]
	push	edx
	movzx	eax, WORD PTR _newNode$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Element@?$CUtlRBTree@PBDGP6A_NABQBD0@ZV?$CUtlMemory@U?$UtlRBTreeNode_t@PBDG@@G@@@@QAEAAPBDG@Z ; CUtlRBTree<char const *,unsigned short,bool (__cdecl*)(char const * const &,char const * const &),CUtlMemory<UtlRBTreeNode_t<char const *,unsigned short>,unsigned short> >::Element
	push	eax
	call	??$CopyConstruct@PBD@@YAXPAPBDABQBD@Z	; CopyConstruct<char const *>
	add	esp, 8

; 1474 : 	return newNode;

	mov	ax, WORD PTR _newNode$[ebp]

; 1475 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?Insert@?$CUtlRBTree@PBDGP6A_NABQBD0@ZV?$CUtlMemory@U?$UtlRBTreeNode_t@PBDG@@G@@@@QAEGABQBD@Z ENDP ; CUtlRBTree<char const *,unsigned short,bool (__cdecl*)(char const * const &,char const * const &),CUtlMemory<UtlRBTreeNode_t<char const *,unsigned short>,unsigned short> >::Insert
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xashxt_v0.81_rev.1_with_sources\xashxt_v0.81_rev.1_src\game_shared\utlrbtree.h
;	COMDAT ?NewNode@?$CUtlRBTree@PBDGP6A_NABQBD0@ZV?$CUtlMemory@U?$UtlRBTreeNode_t@PBDG@@G@@@@QAEGXZ
_TEXT	SEGMENT
$T1 = -44						; size = 4
$T2 = -40						; size = 4
tv160 = -36						; size = 4
tv132 = -32						; size = 4
_node$ = -28						; size = 4
_this$ = -24						; size = 4
$T3 = -18						; size = 2
$T4 = -16						; size = 2
$T5 = -14						; size = 2
$T6 = -12						; size = 2
tv209 = -10						; size = 2
_elem$ = -8						; size = 2
_it$7 = -4						; size = 2
?NewNode@?$CUtlRBTree@PBDGP6A_NABQBD0@ZV?$CUtlMemory@U?$UtlRBTreeNode_t@PBDG@@G@@@@QAEGXZ PROC ; CUtlRBTree<char const *,unsigned short,bool (__cdecl*)(char const * const &,char const * const &),CUtlMemory<UtlRBTreeNode_t<char const *,unsigned short>,unsigned short> >::NewNode, COMDAT
; _this$ = ecx

; 648  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 44					; 0000002cH
	push	esi
	mov	DWORD PTR _this$[ebp], ecx

; 649  : 	I elem;
; 650  : 
; 651  : 	// Nothing in the free list; add.
; 652  : 	if ( m_FirstFree == InvalidIndex() )

	mov	eax, DWORD PTR _this$[ebp]
	movzx	esi, WORD PTR [eax+20]
	call	?InvalidIndex@?$CUtlRBTree@PBDGP6A_NABQBD0@ZV?$CUtlMemory@U?$UtlRBTreeNode_t@PBDG@@G@@@@SAGXZ ; CUtlRBTree<char const *,unsigned short,bool (__cdecl*)(char const * const &,char const * const &),CUtlMemory<UtlRBTreeNode_t<char const *,unsigned short>,unsigned short> >::InvalidIndex
	movzx	ecx, ax
	cmp	esi, ecx
	jne	$LN2@NewNode

; 653  : 	{
; 654  : 		assert( m_Elements.IsValidIterator( m_LastAlloc ) || m_NumElements == 0 );

	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 22					; 00000016H
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	?IsValidIterator@?$CUtlMemory@U?$UtlRBTreeNode_t@PBDG@@G@@QBE_NABVIterator_t@1@@Z ; CUtlMemory<UtlRBTreeNode_t<char const *,unsigned short>,unsigned short>::IsValidIterator
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN7@NewNode
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+18]
	test	edx, edx
	je	SHORT $LN7@NewNode
	push	654					; 0000028eH
	push	OFFSET $SG72092
	push	OFFSET $SG72093
	call	__wassert
	add	esp, 12					; 0000000cH
$LN7@NewNode:

; 655  : 		typename M::Iterator_t it = m_Elements.IsValidIterator( m_LastAlloc ) ? m_Elements.Next( m_LastAlloc ) : m_Elements.First();

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 22					; 00000016H
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	?IsValidIterator@?$CUtlMemory@U?$UtlRBTreeNode_t@PBDG@@G@@QBE_NABVIterator_t@1@@Z ; CUtlMemory<UtlRBTreeNode_t<char const *,unsigned short>,unsigned short>::IsValidIterator
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN8@NewNode
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 22					; 00000016H
	push	eax
	lea	ecx, DWORD PTR $T6[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	?Next@?$CUtlMemory@U?$UtlRBTreeNode_t@PBDG@@G@@QBE?AVIterator_t@1@ABV21@@Z ; CUtlMemory<UtlRBTreeNode_t<char const *,unsigned short>,unsigned short>::Next
	mov	DWORD PTR tv132[ebp], eax
	jmp	SHORT $LN9@NewNode
$LN8@NewNode:
	lea	edx, DWORD PTR $T5[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	?First@?$CUtlMemory@U?$UtlRBTreeNode_t@PBDG@@G@@QBE?AVIterator_t@1@XZ ; CUtlMemory<UtlRBTreeNode_t<char const *,unsigned short>,unsigned short>::First
	mov	DWORD PTR tv132[ebp], eax
$LN9@NewNode:
	mov	eax, DWORD PTR tv132[ebp]
	mov	DWORD PTR $T2[ebp], eax
	mov	ecx, DWORD PTR $T2[ebp]
	mov	dx, WORD PTR [ecx]
	mov	WORD PTR _it$7[ebp], dx

; 656  : 		if ( !m_Elements.IsValidIterator( it ) )

	lea	eax, DWORD PTR _it$7[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	?IsValidIterator@?$CUtlMemory@U?$UtlRBTreeNode_t@PBDG@@G@@QBE_NABVIterator_t@1@@Z ; CUtlMemory<UtlRBTreeNode_t<char const *,unsigned short>,unsigned short>::IsValidIterator
	movzx	ecx, al
	test	ecx, ecx
	jne	$LN4@NewNode

; 657  : 		{
; 658  : 			m_Elements.Grow();

	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	?Grow@?$CUtlMemory@U?$UtlRBTreeNode_t@PBDG@@G@@QAEXH@Z ; CUtlMemory<UtlRBTreeNode_t<char const *,unsigned short>,unsigned short>::Grow

; 659  : 
; 660  : 			it = m_Elements.IsValidIterator( m_LastAlloc ) ? m_Elements.Next( m_LastAlloc ) : m_Elements.First();

	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 22					; 00000016H
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	?IsValidIterator@?$CUtlMemory@U?$UtlRBTreeNode_t@PBDG@@G@@QBE_NABVIterator_t@1@@Z ; CUtlMemory<UtlRBTreeNode_t<char const *,unsigned short>,unsigned short>::IsValidIterator
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN10@NewNode
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 22					; 00000016H
	push	ecx
	lea	edx, DWORD PTR $T4[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	?Next@?$CUtlMemory@U?$UtlRBTreeNode_t@PBDG@@G@@QBE?AVIterator_t@1@ABV21@@Z ; CUtlMemory<UtlRBTreeNode_t<char const *,unsigned short>,unsigned short>::Next
	mov	DWORD PTR tv160[ebp], eax
	jmp	SHORT $LN11@NewNode
$LN10@NewNode:
	lea	eax, DWORD PTR $T3[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	?First@?$CUtlMemory@U?$UtlRBTreeNode_t@PBDG@@G@@QBE?AVIterator_t@1@XZ ; CUtlMemory<UtlRBTreeNode_t<char const *,unsigned short>,unsigned short>::First
	mov	DWORD PTR tv160[ebp], eax
$LN11@NewNode:
	mov	ecx, DWORD PTR tv160[ebp]
	mov	DWORD PTR $T1[ebp], ecx
	mov	edx, DWORD PTR $T1[ebp]
	mov	ax, WORD PTR [edx]
	mov	WORD PTR _it$7[ebp], ax

; 661  : 
; 662  : 			assert( m_Elements.IsValidIterator( it ) );

	lea	ecx, DWORD PTR _it$7[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	?IsValidIterator@?$CUtlMemory@U?$UtlRBTreeNode_t@PBDG@@G@@QBE_NABVIterator_t@1@@Z ; CUtlMemory<UtlRBTreeNode_t<char const *,unsigned short>,unsigned short>::IsValidIterator
	movzx	edx, al
	test	edx, edx
	jne	SHORT $LN12@NewNode
	push	662					; 00000296H
	push	OFFSET $SG72095
	push	OFFSET $SG72096
	call	__wassert
	add	esp, 12					; 0000000cH
$LN12@NewNode:

; 663  : 			if ( !m_Elements.IsValidIterator( it ) )

	lea	ecx, DWORD PTR _it$7[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	?IsValidIterator@?$CUtlMemory@U?$UtlRBTreeNode_t@PBDG@@G@@QBE_NABVIterator_t@1@@Z ; CUtlMemory<UtlRBTreeNode_t<char const *,unsigned short>,unsigned short>::IsValidIterator
	movzx	edx, al
	test	edx, edx
	jne	SHORT $LN4@NewNode

; 664  : 			{
; 665  : 				HOST_ERROR( "CUtlRBTree overflow!\n" );

	push	OFFSET $SG72098
	call	DWORD PTR ?g_physfuncs@@3Userver_physics_api_s@@A+24
	add	esp, 4
$LN4@NewNode:

; 666  : 			}
; 667  : 		}
; 668  : 		m_LastAlloc = it;

	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR _it$7[ebp]
	mov	WORD PTR [eax+22], cx

; 669  : 		elem = m_Elements.GetIndex( m_LastAlloc );

	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 22					; 00000016H
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	?GetIndex@?$CUtlMemory@U?$UtlRBTreeNode_t@PBDG@@G@@QBEGABVIterator_t@1@@Z ; CUtlMemory<UtlRBTreeNode_t<char const *,unsigned short>,unsigned short>::GetIndex
	mov	WORD PTR _elem$[ebp], ax

; 670  : 		assert( m_Elements.IsValidIterator( m_LastAlloc ) );

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 22					; 00000016H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	?IsValidIterator@?$CUtlMemory@U?$UtlRBTreeNode_t@PBDG@@G@@QBE_NABVIterator_t@1@@Z ; CUtlMemory<UtlRBTreeNode_t<char const *,unsigned short>,unsigned short>::IsValidIterator
	movzx	ecx, al
	test	ecx, ecx
	jne	SHORT $LN13@NewNode
	push	670					; 0000029eH
	push	OFFSET $SG72099
	push	OFFSET $SG72100
	call	__wassert
	add	esp, 12					; 0000000cH
$LN13@NewNode:

; 671  : 	}
; 672  : 	else

	jmp	SHORT $LN3@NewNode
$LN2@NewNode:

; 673  : 	{
; 674  : 		elem = m_FirstFree;

	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+20]
	mov	WORD PTR _elem$[ebp], cx

; 675  : 		m_FirstFree = Links( m_FirstFree ).m_Right;

	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, WORD PTR [edx+20]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Links@?$CUtlRBTree@PBDGP6A_NABQBD0@ZV?$CUtlMemory@U?$UtlRBTreeNode_t@PBDG@@G@@@@IAEAAU?$UtlRBTreeLinks_t@G@@G@Z ; CUtlRBTree<char const *,unsigned short,bool (__cdecl*)(char const * const &,char const * const &),CUtlMemory<UtlRBTreeNode_t<char const *,unsigned short>,unsigned short> >::Links
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [eax+2]
	mov	WORD PTR [ecx+20], dx
$LN3@NewNode:

; 676  : 	}
; 677  : 
; 678  : #ifdef _DEBUG
; 679  : 	// reset links to invalid....
; 680  : 	Links_t &node = Links( elem );

	movzx	eax, WORD PTR _elem$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Links@?$CUtlRBTree@PBDGP6A_NABQBD0@ZV?$CUtlMemory@U?$UtlRBTreeNode_t@PBDG@@G@@@@IAEAAU?$UtlRBTreeLinks_t@G@@G@Z ; CUtlRBTree<char const *,unsigned short,bool (__cdecl*)(char const * const &,char const * const &),CUtlMemory<UtlRBTreeNode_t<char const *,unsigned short>,unsigned short> >::Links
	mov	DWORD PTR _node$[ebp], eax

; 681  : 	node.m_Left = node.m_Right = node.m_Parent = InvalidIndex();

	call	?InvalidIndex@?$CUtlRBTree@PBDGP6A_NABQBD0@ZV?$CUtlMemory@U?$UtlRBTreeNode_t@PBDG@@G@@@@SAGXZ ; CUtlRBTree<char const *,unsigned short,bool (__cdecl*)(char const * const &,char const * const &),CUtlMemory<UtlRBTreeNode_t<char const *,unsigned short>,unsigned short> >::InvalidIndex
	mov	WORD PTR tv209[ebp], ax
	mov	ecx, DWORD PTR _node$[ebp]
	mov	dx, WORD PTR tv209[ebp]
	mov	WORD PTR [ecx+4], dx
	mov	eax, DWORD PTR _node$[ebp]
	mov	cx, WORD PTR tv209[ebp]
	mov	WORD PTR [eax+2], cx
	mov	edx, DWORD PTR _node$[ebp]
	mov	ax, WORD PTR tv209[ebp]
	mov	WORD PTR [edx], ax

; 682  : #endif
; 683  : 
; 684  : 	Construct( &Element( elem ) );

	movzx	ecx, WORD PTR _elem$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Element@?$CUtlRBTree@PBDGP6A_NABQBD0@ZV?$CUtlMemory@U?$UtlRBTreeNode_t@PBDG@@G@@@@QAEAAPBDG@Z ; CUtlRBTree<char const *,unsigned short,bool (__cdecl*)(char const * const &,char const * const &),CUtlMemory<UtlRBTreeNode_t<char const *,unsigned short>,unsigned short> >::Element
	push	eax
	call	??$Construct@PBD@@YAXPAPBD@Z		; Construct<char const *>
	add	esp, 4

; 685  : 	ResetDbgInfo();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?ResetDbgInfo@?$CUtlRBTree@PBDGP6A_NABQBD0@ZV?$CUtlMemory@U?$UtlRBTreeNode_t@PBDG@@G@@@@IAEXXZ ; CUtlRBTree<char const *,unsigned short,bool (__cdecl*)(char const * const &,char const * const &),CUtlMemory<UtlRBTreeNode_t<char const *,unsigned short>,unsigned short> >::ResetDbgInfo

; 686  : 
; 687  : 	return elem;

	mov	ax, WORD PTR _elem$[ebp]

; 688  : }

	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	0
?NewNode@?$CUtlRBTree@PBDGP6A_NABQBD0@ZV?$CUtlMemory@U?$UtlRBTreeNode_t@PBDG@@G@@@@QAEGXZ ENDP ; CUtlRBTree<char const *,unsigned short,bool (__cdecl*)(char const * const &,char const * const &),CUtlMemory<UtlRBTreeNode_t<char const *,unsigned short>,unsigned short> >::NewNode
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xashxt_v0.81_rev.1_with_sources\xashxt_v0.81_rev.1_src\game_shared\utlrbtree.h
;	COMDAT ?InvalidIndex@?$CUtlRBTree@PBDGP6A_NABQBD0@ZV?$CUtlMemory@U?$UtlRBTreeNode_t@PBDG@@G@@@@SAGXZ
_TEXT	SEGMENT
?InvalidIndex@?$CUtlRBTree@PBDGP6A_NABQBD0@ZV?$CUtlMemory@U?$UtlRBTreeNode_t@PBDG@@G@@@@SAGXZ PROC ; CUtlRBTree<char const *,unsigned short,bool (__cdecl*)(char const * const &,char const * const &),CUtlMemory<UtlRBTreeNode_t<char const *,unsigned short>,unsigned short> >::InvalidIndex, COMDAT

; 548  : {

	push	ebp
	mov	ebp, esp

; 549  : 	return ( I )M::InvalidIndex();

	call	?InvalidIndex@?$CUtlMemory@U?$UtlRBTreeNode_t@PBDG@@G@@SAGXZ ; CUtlMemory<UtlRBTreeNode_t<char const *,unsigned short>,unsigned short>::InvalidIndex

; 550  : }

	pop	ebp
	ret	0
?InvalidIndex@?$CUtlRBTree@PBDGP6A_NABQBD0@ZV?$CUtlMemory@U?$UtlRBTreeNode_t@PBDG@@G@@@@SAGXZ ENDP ; CUtlRBTree<char const *,unsigned short,bool (__cdecl*)(char const * const &,char const * const &),CUtlMemory<UtlRBTreeNode_t<char const *,unsigned short>,unsigned short> >::InvalidIndex
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xashxt_v0.81_rev.1_with_sources\xashxt_v0.81_rev.1_src\game_shared\utlrbtree.h
;	COMDAT ?IsValid@?$CUtlRBTree@PBDGP6A_NABQBD0@ZV?$CUtlMemory@U?$UtlRBTreeNode_t@PBDG@@G@@@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T1 = -2						; size = 2
?IsValid@?$CUtlRBTree@PBDGP6A_NABQBD0@ZV?$CUtlMemory@U?$UtlRBTreeNode_t@PBDG@@G@@@@QBE_NXZ PROC ; CUtlRBTree<char const *,unsigned short,bool (__cdecl*)(char const * const &,char const * const &),CUtlMemory<UtlRBTreeNode_t<char const *,unsigned short>,unsigned short> >::IsValid, COMDAT
; _this$ = ecx

; 1337 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	push	esi
	mov	DWORD PTR _this$[ebp], ecx

; 1338 : 	if ( !Count() )

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Count@?$CUtlRBTree@PBDGP6A_NABQBD0@ZV?$CUtlMemory@U?$UtlRBTreeNode_t@PBDG@@G@@@@QBEIXZ ; CUtlRBTree<char const *,unsigned short,bool (__cdecl*)(char const * const &,char const * const &),CUtlMemory<UtlRBTreeNode_t<char const *,unsigned short>,unsigned short> >::Count
	test	eax, eax
	jne	SHORT $LN2@IsValid

; 1339 : 		return true;

	mov	al, 1
	jmp	SHORT $LN1@IsValid
$LN2@IsValid:

; 1340 : 
; 1341 : 	if ( m_LastAlloc == m_Elements.InvalidIterator() )

	lea	eax, DWORD PTR $T1[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	?InvalidIterator@?$CUtlMemory@U?$UtlRBTreeNode_t@PBDG@@G@@QBE?AVIterator_t@1@XZ ; CUtlMemory<UtlRBTreeNode_t<char const *,unsigned short>,unsigned short>::InvalidIterator
	mov	cx, WORD PTR [eax]
	movzx	edx, cx
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 22					; 00000016H
	call	??8Iterator_t@?$CUtlMemory@U?$UtlRBTreeNode_t@PBDG@@G@@QBE_NV01@@Z ; CUtlMemory<UtlRBTreeNode_t<char const *,unsigned short>,unsigned short>::Iterator_t::operator==
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN3@IsValid

; 1342 : 		return false;

	xor	al, al
	jmp	SHORT $LN1@IsValid
$LN3@IsValid:

; 1343 : 
; 1344 : 	if ( !m_Elements.IsIdxValid( Root() ) )

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Root@?$CUtlRBTree@PBDGP6A_NABQBD0@ZV?$CUtlMemory@U?$UtlRBTreeNode_t@PBDG@@G@@@@QBEGXZ ; CUtlRBTree<char const *,unsigned short,bool (__cdecl*)(char const * const &,char const * const &),CUtlMemory<UtlRBTreeNode_t<char const *,unsigned short>,unsigned short> >::Root
	movzx	ecx, ax
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	?IsIdxValid@?$CUtlMemory@U?$UtlRBTreeNode_t@PBDG@@G@@QBE_NG@Z ; CUtlMemory<UtlRBTreeNode_t<char const *,unsigned short>,unsigned short>::IsIdxValid
	movzx	edx, al
	test	edx, edx
	jne	SHORT $LN4@IsValid

; 1345 : 		return false;

	xor	al, al
	jmp	SHORT $LN1@IsValid
$LN4@IsValid:

; 1346 : 
; 1347 : 	if ( Parent( Root() ) != InvalidIndex() )

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Root@?$CUtlRBTree@PBDGP6A_NABQBD0@ZV?$CUtlMemory@U?$UtlRBTreeNode_t@PBDG@@G@@@@QBEGXZ ; CUtlRBTree<char const *,unsigned short,bool (__cdecl*)(char const * const &,char const * const &),CUtlMemory<UtlRBTreeNode_t<char const *,unsigned short>,unsigned short> >::Root
	movzx	eax, ax
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Parent@?$CUtlRBTree@PBDGP6A_NABQBD0@ZV?$CUtlMemory@U?$UtlRBTreeNode_t@PBDG@@G@@@@QBEGG@Z ; CUtlRBTree<char const *,unsigned short,bool (__cdecl*)(char const * const &,char const * const &),CUtlMemory<UtlRBTreeNode_t<char const *,unsigned short>,unsigned short> >::Parent
	movzx	esi, ax
	call	?InvalidIndex@?$CUtlRBTree@PBDGP6A_NABQBD0@ZV?$CUtlMemory@U?$UtlRBTreeNode_t@PBDG@@G@@@@SAGXZ ; CUtlRBTree<char const *,unsigned short,bool (__cdecl*)(char const * const &,char const * const &),CUtlMemory<UtlRBTreeNode_t<char const *,unsigned short>,unsigned short> >::InvalidIndex
	movzx	ecx, ax
	cmp	esi, ecx
	je	SHORT $LN5@IsValid

; 1348 : 		return false;

	xor	al, al
	jmp	SHORT $LN1@IsValid
$LN5@IsValid:

; 1349 : 
; 1350 : #ifdef UTLTREE_PARANOID
; 1351 : 
; 1352 : 	// First check to see that mNumEntries matches reality.
; 1353 : 	// count items on the free list
; 1354 : 	int numFree = 0;
; 1355 : 	for ( int i = m_FirstFree; i != InvalidIndex(); i = RightChild( i ) )
; 1356 : 	{
; 1357 : 		++numFree;
; 1358 : 		if ( !m_Elements.IsIdxValid( i ) )
; 1359 : 			return false;
; 1360 : 	}
; 1361 : 
; 1362 : 	// iterate over all elements, looking for validity 
; 1363 : 	// based on the self pointers
; 1364 : 	int nElements = 0;
; 1365 : 	int numFree2 = 0;
; 1366 : 	for ( M::Iterator_t it = m_Elements.First(); it != m_Elements.InvalidIterator(); it = m_Elements.Next( it ) )
; 1367 : 	{
; 1368 : 		I i = m_Elements.GetIndex( it );
; 1369 : 		if ( !IsValidIndex( i ) )
; 1370 : 		{
; 1371 : 			++numFree2;
; 1372 : 		}
; 1373 : 		else
; 1374 : 		{
; 1375 : 			++nElements;
; 1376 : 
; 1377 : 			int right = RightChild( i );
; 1378 : 			int left = LeftChild( i );
; 1379 : 			if ( ( right == left ) && ( right != InvalidIndex() ) )
; 1380 : 				return false;
; 1381 : 
; 1382 : 			if ( right != InvalidIndex() )
; 1383 : 			{
; 1384 : 				if ( !IsValidIndex( right ) ) 
; 1385 : 					return false;
; 1386 : 				if ( Parent( right ) != i )
; 1387 : 					return false;
; 1388 : 				if ( IsRed( i ) && IsRed( right ) ) 
; 1389 : 					return false;
; 1390 : 			}
; 1391 : 
; 1392 : 			if ( left != InvalidIndex() )
; 1393 : 			{
; 1394 : 				if ( !IsValidIndex( left ) ) 
; 1395 : 					return false;
; 1396 : 				if ( Parent( left ) != i ) 
; 1397 : 					return false;
; 1398 : 				if ( IsRed( i ) && IsRed( left ) ) 
; 1399 : 					return false;
; 1400 : 			}
; 1401 : 		}
; 1402 : 
; 1403 : 		if ( it == m_LastAlloc )
; 1404 : 			break;
; 1405 : 	}
; 1406 : 	if ( numFree2 != numFree )
; 1407 : 		return false;
; 1408 : 
; 1409 : 	if ( nElements != m_NumElements )
; 1410 : 		return false;
; 1411 : 
; 1412 : #endif // UTLTREE_PARANOID
; 1413 : 
; 1414 : 	return true;

	mov	al, 1
$LN1@IsValid:

; 1415 : }

	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	0
?IsValid@?$CUtlRBTree@PBDGP6A_NABQBD0@ZV?$CUtlMemory@U?$UtlRBTreeNode_t@PBDG@@G@@@@QBE_NXZ ENDP ; CUtlRBTree<char const *,unsigned short,bool (__cdecl*)(char const * const &,char const * const &),CUtlMemory<UtlRBTreeNode_t<char const *,unsigned short>,unsigned short> >::IsValid
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xashxt_v0.81_rev.1_with_sources\xashxt_v0.81_rev.1_src\game_shared\utlrbtree.h
;	COMDAT ?IsValidIndex@?$CUtlRBTree@PBDGP6A_NABQBD0@ZV?$CUtlMemory@U?$UtlRBTreeNode_t@PBDG@@G@@@@QBE_NG@Z
_TEXT	SEGMENT
tv84 = -8						; size = 4
_this$ = -4						; size = 4
_i$ = 8							; size = 2
?IsValidIndex@?$CUtlRBTree@PBDGP6A_NABQBD0@ZV?$CUtlMemory@U?$UtlRBTreeNode_t@PBDG@@G@@@@QBE_NG@Z PROC ; CUtlRBTree<char const *,unsigned short,bool (__cdecl*)(char const * const &,char const * const &),CUtlMemory<UtlRBTreeNode_t<char const *,unsigned short>,unsigned short> >::IsValidIndex, COMDAT
; _this$ = ecx

; 531  : { 

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 532  : 	if ( !m_Elements.IsIdxValid( i ) )

	movzx	eax, WORD PTR _i$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	?IsIdxValid@?$CUtlMemory@U?$UtlRBTreeNode_t@PBDG@@G@@QBE_NG@Z ; CUtlMemory<UtlRBTreeNode_t<char const *,unsigned short>,unsigned short>::IsIdxValid
	movzx	ecx, al
	test	ecx, ecx
	jne	SHORT $LN2@IsValidInd

; 533  : 		return false;

	xor	al, al
	jmp	SHORT $LN1@IsValidInd
$LN2@IsValidInd:

; 534  : 
; 535  : 	if ( m_Elements.IsIdxAfter( i, m_LastAlloc ) )

	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 22					; 00000016H
	push	edx
	movzx	eax, WORD PTR _i$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	?IsIdxAfter@?$CUtlMemory@U?$UtlRBTreeNode_t@PBDG@@G@@QBE_NGABVIterator_t@1@@Z ; CUtlMemory<UtlRBTreeNode_t<char const *,unsigned short>,unsigned short>::IsIdxAfter
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN3@IsValidInd

; 536  : 		return false; // don't read values that have been allocated, but not constructed

	xor	al, al
	jmp	SHORT $LN1@IsValidInd
$LN3@IsValidInd:

; 537  : 
; 538  : 	return LeftChild(i) != i; 

	movzx	edx, WORD PTR _i$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?LeftChild@?$CUtlRBTree@PBDGP6A_NABQBD0@ZV?$CUtlMemory@U?$UtlRBTreeNode_t@PBDG@@G@@@@QBEGG@Z ; CUtlRBTree<char const *,unsigned short,bool (__cdecl*)(char const * const &,char const * const &),CUtlMemory<UtlRBTreeNode_t<char const *,unsigned short>,unsigned short> >::LeftChild
	movzx	eax, ax
	movzx	ecx, WORD PTR _i$[ebp]
	cmp	eax, ecx
	je	SHORT $LN5@IsValidInd
	mov	DWORD PTR tv84[ebp], 1
	jmp	SHORT $LN6@IsValidInd
$LN5@IsValidInd:
	mov	DWORD PTR tv84[ebp], 0
$LN6@IsValidInd:
	mov	al, BYTE PTR tv84[ebp]
$LN1@IsValidInd:

; 539  : }

	mov	esp, ebp
	pop	ebp
	ret	4
?IsValidIndex@?$CUtlRBTree@PBDGP6A_NABQBD0@ZV?$CUtlMemory@U?$UtlRBTreeNode_t@PBDG@@G@@@@QBE_NG@Z ENDP ; CUtlRBTree<char const *,unsigned short,bool (__cdecl*)(char const * const &,char const * const &),CUtlMemory<UtlRBTreeNode_t<char const *,unsigned short>,unsigned short> >::IsValidIndex
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xashxt_v0.81_rev.1_with_sources\xashxt_v0.81_rev.1_src\game_shared\utlrbtree.h
;	COMDAT ?IsRoot@?$CUtlRBTree@PBDGP6A_NABQBD0@ZV?$CUtlMemory@U?$UtlRBTreeNode_t@PBDG@@G@@@@QBE_NG@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv68 = -4						; size = 4
_i$ = 8							; size = 2
?IsRoot@?$CUtlRBTree@PBDGP6A_NABQBD0@ZV?$CUtlMemory@U?$UtlRBTreeNode_t@PBDG@@G@@@@QBE_NG@Z PROC ; CUtlRBTree<char const *,unsigned short,bool (__cdecl*)(char const * const &,char const * const &),CUtlMemory<UtlRBTreeNode_t<char const *,unsigned short>,unsigned short> >::IsRoot, COMDAT
; _this$ = ecx

; 514  : { 

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 515  : 	return i == m_Root; 

	movzx	eax, WORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+16]
	cmp	eax, edx
	jne	SHORT $LN3@IsRoot
	mov	DWORD PTR tv68[ebp], 1
	jmp	SHORT $LN4@IsRoot
$LN3@IsRoot:
	mov	DWORD PTR tv68[ebp], 0
$LN4@IsRoot:
	mov	al, BYTE PTR tv68[ebp]

; 516  : }

	mov	esp, ebp
	pop	ebp
	ret	4
?IsRoot@?$CUtlRBTree@PBDGP6A_NABQBD0@ZV?$CUtlMemory@U?$UtlRBTreeNode_t@PBDG@@G@@@@QBE_NG@Z ENDP ; CUtlRBTree<char const *,unsigned short,bool (__cdecl*)(char const * const &,char const * const &),CUtlMemory<UtlRBTreeNode_t<char const *,unsigned short>,unsigned short> >::IsRoot
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xashxt_v0.81_rev.1_with_sources\xashxt_v0.81_rev.1_src\game_shared\utlrbtree.h
;	COMDAT ?IsRightChild@?$CUtlRBTree@PBDGP6A_NABQBD0@ZV?$CUtlMemory@U?$UtlRBTreeNode_t@PBDG@@G@@@@QBE_NG@Z
_TEXT	SEGMENT
tv73 = -8						; size = 4
_this$ = -4						; size = 4
_i$ = 8							; size = 2
?IsRightChild@?$CUtlRBTree@PBDGP6A_NABQBD0@ZV?$CUtlMemory@U?$UtlRBTreeNode_t@PBDG@@G@@@@QBE_NG@Z PROC ; CUtlRBTree<char const *,unsigned short,bool (__cdecl*)(char const * const &,char const * const &),CUtlMemory<UtlRBTreeNode_t<char const *,unsigned short>,unsigned short> >::IsRightChild, COMDAT
; _this$ = ecx

; 503  : { 

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 504  : 	return RightChild(Parent(i)) == i; 

	movzx	eax, WORD PTR _i$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Parent@?$CUtlRBTree@PBDGP6A_NABQBD0@ZV?$CUtlMemory@U?$UtlRBTreeNode_t@PBDG@@G@@@@QBEGG@Z ; CUtlRBTree<char const *,unsigned short,bool (__cdecl*)(char const * const &,char const * const &),CUtlMemory<UtlRBTreeNode_t<char const *,unsigned short>,unsigned short> >::Parent
	movzx	ecx, ax
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?RightChild@?$CUtlRBTree@PBDGP6A_NABQBD0@ZV?$CUtlMemory@U?$UtlRBTreeNode_t@PBDG@@G@@@@QBEGG@Z ; CUtlRBTree<char const *,unsigned short,bool (__cdecl*)(char const * const &,char const * const &),CUtlMemory<UtlRBTreeNode_t<char const *,unsigned short>,unsigned short> >::RightChild
	movzx	edx, ax
	movzx	eax, WORD PTR _i$[ebp]
	cmp	edx, eax
	jne	SHORT $LN3@IsRightChi
	mov	DWORD PTR tv73[ebp], 1
	jmp	SHORT $LN4@IsRightChi
$LN3@IsRightChi:
	mov	DWORD PTR tv73[ebp], 0
$LN4@IsRightChi:
	mov	al, BYTE PTR tv73[ebp]

; 505  : }

	mov	esp, ebp
	pop	ebp
	ret	4
?IsRightChild@?$CUtlRBTree@PBDGP6A_NABQBD0@ZV?$CUtlMemory@U?$UtlRBTreeNode_t@PBDG@@G@@@@QBE_NG@Z ENDP ; CUtlRBTree<char const *,unsigned short,bool (__cdecl*)(char const * const &,char const * const &),CUtlMemory<UtlRBTreeNode_t<char const *,unsigned short>,unsigned short> >::IsRightChild
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xashxt_v0.81_rev.1_with_sources\xashxt_v0.81_rev.1_src\game_shared\utlrbtree.h
;	COMDAT ?IsLeftChild@?$CUtlRBTree@PBDGP6A_NABQBD0@ZV?$CUtlMemory@U?$UtlRBTreeNode_t@PBDG@@G@@@@QBE_NG@Z
_TEXT	SEGMENT
tv73 = -8						; size = 4
_this$ = -4						; size = 4
_i$ = 8							; size = 2
?IsLeftChild@?$CUtlRBTree@PBDGP6A_NABQBD0@ZV?$CUtlMemory@U?$UtlRBTreeNode_t@PBDG@@G@@@@QBE_NG@Z PROC ; CUtlRBTree<char const *,unsigned short,bool (__cdecl*)(char const * const &,char const * const &),CUtlMemory<UtlRBTreeNode_t<char const *,unsigned short>,unsigned short> >::IsLeftChild, COMDAT
; _this$ = ecx

; 497  : { 

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 498  : 	return LeftChild(Parent(i)) == i; 

	movzx	eax, WORD PTR _i$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Parent@?$CUtlRBTree@PBDGP6A_NABQBD0@ZV?$CUtlMemory@U?$UtlRBTreeNode_t@PBDG@@G@@@@QBEGG@Z ; CUtlRBTree<char const *,unsigned short,bool (__cdecl*)(char const * const &,char const * const &),CUtlMemory<UtlRBTreeNode_t<char const *,unsigned short>,unsigned short> >::Parent
	movzx	ecx, ax
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?LeftChild@?$CUtlRBTree@PBDGP6A_NABQBD0@ZV?$CUtlMemory@U?$UtlRBTreeNode_t@PBDG@@G@@@@QBEGG@Z ; CUtlRBTree<char const *,unsigned short,bool (__cdecl*)(char const * const &,char const * const &),CUtlMemory<UtlRBTreeNode_t<char const *,unsigned short>,unsigned short> >::LeftChild
	movzx	edx, ax
	movzx	eax, WORD PTR _i$[ebp]
	cmp	edx, eax
	jne	SHORT $LN3@IsLeftChil
	mov	DWORD PTR tv73[ebp], 1
	jmp	SHORT $LN4@IsLeftChil
$LN3@IsLeftChil:
	mov	DWORD PTR tv73[ebp], 0
$LN4@IsLeftChil:
	mov	al, BYTE PTR tv73[ebp]

; 499  : }

	mov	esp, ebp
	pop	ebp
	ret	4
?IsLeftChild@?$CUtlRBTree@PBDGP6A_NABQBD0@ZV?$CUtlMemory@U?$UtlRBTreeNode_t@PBDG@@G@@@@QBE_NG@Z ENDP ; CUtlRBTree<char const *,unsigned short,bool (__cdecl*)(char const * const &,char const * const &),CUtlMemory<UtlRBTreeNode_t<char const *,unsigned short>,unsigned short> >::IsLeftChild
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xashxt_v0.81_rev.1_with_sources\xashxt_v0.81_rev.1_src\game_shared\utlrbtree.h
;	COMDAT ?RightChild@?$CUtlRBTree@PBDGP6A_NABQBD0@ZV?$CUtlMemory@U?$UtlRBTreeNode_t@PBDG@@G@@@@QBEGG@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_i$ = 8							; size = 2
?RightChild@?$CUtlRBTree@PBDGP6A_NABQBD0@ZV?$CUtlMemory@U?$UtlRBTreeNode_t@PBDG@@G@@@@QBEGG@Z PROC ; CUtlRBTree<char const *,unsigned short,bool (__cdecl*)(char const * const &,char const * const &),CUtlMemory<UtlRBTreeNode_t<char const *,unsigned short>,unsigned short> >::RightChild, COMDAT
; _this$ = ecx

; 487  : { 

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 488  : 	return Links(i).m_Right; 

	movzx	eax, WORD PTR _i$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Links@?$CUtlRBTree@PBDGP6A_NABQBD0@ZV?$CUtlMemory@U?$UtlRBTreeNode_t@PBDG@@G@@@@IBEABU?$UtlRBTreeLinks_t@G@@G@Z ; CUtlRBTree<char const *,unsigned short,bool (__cdecl*)(char const * const &,char const * const &),CUtlMemory<UtlRBTreeNode_t<char const *,unsigned short>,unsigned short> >::Links
	mov	ax, WORD PTR [eax+2]

; 489  : }

	mov	esp, ebp
	pop	ebp
	ret	4
?RightChild@?$CUtlRBTree@PBDGP6A_NABQBD0@ZV?$CUtlMemory@U?$UtlRBTreeNode_t@PBDG@@G@@@@QBEGG@Z ENDP ; CUtlRBTree<char const *,unsigned short,bool (__cdecl*)(char const * const &,char const * const &),CUtlMemory<UtlRBTreeNode_t<char const *,unsigned short>,unsigned short> >::RightChild
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xashxt_v0.81_rev.1_with_sources\xashxt_v0.81_rev.1_src\game_shared\utlrbtree.h
;	COMDAT ?LeftChild@?$CUtlRBTree@PBDGP6A_NABQBD0@ZV?$CUtlMemory@U?$UtlRBTreeNode_t@PBDG@@G@@@@QBEGG@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_i$ = 8							; size = 2
?LeftChild@?$CUtlRBTree@PBDGP6A_NABQBD0@ZV?$CUtlMemory@U?$UtlRBTreeNode_t@PBDG@@G@@@@QBEGG@Z PROC ; CUtlRBTree<char const *,unsigned short,bool (__cdecl*)(char const * const &,char const * const &),CUtlMemory<UtlRBTreeNode_t<char const *,unsigned short>,unsigned short> >::LeftChild, COMDAT
; _this$ = ecx

; 481  : { 

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 482  : 	return Links(i).m_Left; 

	movzx	eax, WORD PTR _i$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Links@?$CUtlRBTree@PBDGP6A_NABQBD0@ZV?$CUtlMemory@U?$UtlRBTreeNode_t@PBDG@@G@@@@IBEABU?$UtlRBTreeLinks_t@G@@G@Z ; CUtlRBTree<char const *,unsigned short,bool (__cdecl*)(char const * const &,char const * const &),CUtlMemory<UtlRBTreeNode_t<char const *,unsigned short>,unsigned short> >::Links
	mov	ax, WORD PTR [eax]

; 483  : }

	mov	esp, ebp
	pop	ebp
	ret	4
?LeftChild@?$CUtlRBTree@PBDGP6A_NABQBD0@ZV?$CUtlMemory@U?$UtlRBTreeNode_t@PBDG@@G@@@@QBEGG@Z ENDP ; CUtlRBTree<char const *,unsigned short,bool (__cdecl*)(char const * const &,char const * const &),CUtlMemory<UtlRBTreeNode_t<char const *,unsigned short>,unsigned short> >::LeftChild
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xashxt_v0.81_rev.1_with_sources\xashxt_v0.81_rev.1_src\game_shared\utlrbtree.h
;	COMDAT ?Parent@?$CUtlRBTree@PBDGP6A_NABQBD0@ZV?$CUtlMemory@U?$UtlRBTreeNode_t@PBDG@@G@@@@QBEGG@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_i$ = 8							; size = 2
?Parent@?$CUtlRBTree@PBDGP6A_NABQBD0@ZV?$CUtlMemory@U?$UtlRBTreeNode_t@PBDG@@G@@@@QBEGG@Z PROC ; CUtlRBTree<char const *,unsigned short,bool (__cdecl*)(char const * const &,char const * const &),CUtlMemory<UtlRBTreeNode_t<char const *,unsigned short>,unsigned short> >::Parent, COMDAT
; _this$ = ecx

; 475  : { 

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 476  : 	return Links(i).m_Parent; 

	movzx	eax, WORD PTR _i$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Links@?$CUtlRBTree@PBDGP6A_NABQBD0@ZV?$CUtlMemory@U?$UtlRBTreeNode_t@PBDG@@G@@@@IBEABU?$UtlRBTreeLinks_t@G@@G@Z ; CUtlRBTree<char const *,unsigned short,bool (__cdecl*)(char const * const &,char const * const &),CUtlMemory<UtlRBTreeNode_t<char const *,unsigned short>,unsigned short> >::Links
	mov	ax, WORD PTR [eax+4]

; 477  : }

	mov	esp, ebp
	pop	ebp
	ret	4
?Parent@?$CUtlRBTree@PBDGP6A_NABQBD0@ZV?$CUtlMemory@U?$UtlRBTreeNode_t@PBDG@@G@@@@QBEGG@Z ENDP ; CUtlRBTree<char const *,unsigned short,bool (__cdecl*)(char const * const &,char const * const &),CUtlMemory<UtlRBTreeNode_t<char const *,unsigned short>,unsigned short> >::Parent
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xashxt_v0.81_rev.1_with_sources\xashxt_v0.81_rev.1_src\game_shared\utlrbtree.h
;	COMDAT ?Count@?$CUtlRBTree@PBDGP6A_NABQBD0@ZV?$CUtlMemory@U?$UtlRBTreeNode_t@PBDG@@G@@@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Count@?$CUtlRBTree@PBDGP6A_NABQBD0@ZV?$CUtlMemory@U?$UtlRBTreeNode_t@PBDG@@G@@@@QBEIXZ PROC ; CUtlRBTree<char const *,unsigned short,bool (__cdecl*)(char const * const &,char const * const &),CUtlMemory<UtlRBTreeNode_t<char const *,unsigned short>,unsigned short> >::Count, COMDAT
; _this$ = ecx

; 454  : { 

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 455  : 	return (unsigned int)m_NumElements; 

	mov	eax, DWORD PTR _this$[ebp]
	movzx	eax, WORD PTR [eax+18]

; 456  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?Count@?$CUtlRBTree@PBDGP6A_NABQBD0@ZV?$CUtlMemory@U?$UtlRBTreeNode_t@PBDG@@G@@@@QBEIXZ ENDP ; CUtlRBTree<char const *,unsigned short,bool (__cdecl*)(char const * const &,char const * const &),CUtlMemory<UtlRBTreeNode_t<char const *,unsigned short>,unsigned short> >::Count
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xashxt_v0.81_rev.1_with_sources\xashxt_v0.81_rev.1_src\game_shared\utlrbtree.h
;	COMDAT ?Root@?$CUtlRBTree@PBDGP6A_NABQBD0@ZV?$CUtlMemory@U?$UtlRBTreeNode_t@PBDG@@G@@@@QBEGXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Root@?$CUtlRBTree@PBDGP6A_NABQBD0@ZV?$CUtlMemory@U?$UtlRBTreeNode_t@PBDG@@G@@@@QBEGXZ PROC ; CUtlRBTree<char const *,unsigned short,bool (__cdecl*)(char const * const &,char const * const &),CUtlMemory<UtlRBTreeNode_t<char const *,unsigned short>,unsigned short> >::Root, COMDAT
; _this$ = ecx

; 444  : { 

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 445  : 	return m_Root; 

	mov	eax, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [eax+16]

; 446  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?Root@?$CUtlRBTree@PBDGP6A_NABQBD0@ZV?$CUtlMemory@U?$UtlRBTreeNode_t@PBDG@@G@@@@QBEGXZ ENDP ; CUtlRBTree<char const *,unsigned short,bool (__cdecl*)(char const * const &,char const * const &),CUtlMemory<UtlRBTreeNode_t<char const *,unsigned short>,unsigned short> >::Root
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xashxt_v0.81_rev.1_with_sources\xashxt_v0.81_rev.1_src\game_shared\utlrbtree.h
;	COMDAT ??A?$CUtlRBTree@PBDGP6A_NABQBD0@ZV?$CUtlMemory@U?$UtlRBTreeNode_t@PBDG@@G@@@@QAEAAPBDG@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_i$ = 8							; size = 2
??A?$CUtlRBTree@PBDGP6A_NABQBD0@ZV?$CUtlMemory@U?$UtlRBTreeNode_t@PBDG@@G@@@@QAEAAPBDG@Z PROC ; CUtlRBTree<char const *,unsigned short,bool (__cdecl*)(char const * const &,char const * const &),CUtlMemory<UtlRBTreeNode_t<char const *,unsigned short>,unsigned short> >::operator[], COMDAT
; _this$ = ecx

; 422  : { 

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 423  : 	return Element(i); 

	movzx	eax, WORD PTR _i$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Element@?$CUtlRBTree@PBDGP6A_NABQBD0@ZV?$CUtlMemory@U?$UtlRBTreeNode_t@PBDG@@G@@@@QAEAAPBDG@Z ; CUtlRBTree<char const *,unsigned short,bool (__cdecl*)(char const * const &,char const * const &),CUtlMemory<UtlRBTreeNode_t<char const *,unsigned short>,unsigned short> >::Element

; 424  : }

	mov	esp, ebp
	pop	ebp
	ret	4
??A?$CUtlRBTree@PBDGP6A_NABQBD0@ZV?$CUtlMemory@U?$UtlRBTreeNode_t@PBDG@@G@@@@QAEAAPBDG@Z ENDP ; CUtlRBTree<char const *,unsigned short,bool (__cdecl*)(char const * const &,char const * const &),CUtlMemory<UtlRBTreeNode_t<char const *,unsigned short>,unsigned short> >::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xashxt_v0.81_rev.1_with_sources\xashxt_v0.81_rev.1_src\game_shared\utlrbtree.h
;	COMDAT ?Element@?$CUtlRBTree@PBDGP6A_NABQBD0@ZV?$CUtlMemory@U?$UtlRBTreeNode_t@PBDG@@G@@@@QBEABQBDG@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_i$ = 8							; size = 2
?Element@?$CUtlRBTree@PBDGP6A_NABQBD0@ZV?$CUtlMemory@U?$UtlRBTreeNode_t@PBDG@@G@@@@QBEABQBDG@Z PROC ; CUtlRBTree<char const *,unsigned short,bool (__cdecl*)(char const * const &,char const * const &),CUtlMemory<UtlRBTreeNode_t<char const *,unsigned short>,unsigned short> >::Element, COMDAT
; _this$ = ecx

; 416  : { 

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 417  : 	return m_Elements[i].m_Data; 

	movzx	eax, WORD PTR _i$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??A?$CUtlMemory@U?$UtlRBTreeNode_t@PBDG@@G@@QBEABU?$UtlRBTreeNode_t@PBDG@@G@Z ; CUtlMemory<UtlRBTreeNode_t<char const *,unsigned short>,unsigned short>::operator[]
	add	eax, 8

; 418  : }

	mov	esp, ebp
	pop	ebp
	ret	4
?Element@?$CUtlRBTree@PBDGP6A_NABQBD0@ZV?$CUtlMemory@U?$UtlRBTreeNode_t@PBDG@@G@@@@QBEABQBDG@Z ENDP ; CUtlRBTree<char const *,unsigned short,bool (__cdecl*)(char const * const &,char const * const &),CUtlMemory<UtlRBTreeNode_t<char const *,unsigned short>,unsigned short> >::Element
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xashxt_v0.81_rev.1_with_sources\xashxt_v0.81_rev.1_src\game_shared\utlrbtree.h
;	COMDAT ?Element@?$CUtlRBTree@PBDGP6A_NABQBD0@ZV?$CUtlMemory@U?$UtlRBTreeNode_t@PBDG@@G@@@@QAEAAPBDG@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_i$ = 8							; size = 2
?Element@?$CUtlRBTree@PBDGP6A_NABQBD0@ZV?$CUtlMemory@U?$UtlRBTreeNode_t@PBDG@@G@@@@QAEAAPBDG@Z PROC ; CUtlRBTree<char const *,unsigned short,bool (__cdecl*)(char const * const &,char const * const &),CUtlMemory<UtlRBTreeNode_t<char const *,unsigned short>,unsigned short> >::Element, COMDAT
; _this$ = ecx

; 410  : { 

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 411  : 	return m_Elements[i].m_Data; 

	movzx	eax, WORD PTR _i$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??A?$CUtlMemory@U?$UtlRBTreeNode_t@PBDG@@G@@QAEAAU?$UtlRBTreeNode_t@PBDG@@G@Z ; CUtlMemory<UtlRBTreeNode_t<char const *,unsigned short>,unsigned short>::operator[]
	add	eax, 8

; 412  : }

	mov	esp, ebp
	pop	ebp
	ret	4
?Element@?$CUtlRBTree@PBDGP6A_NABQBD0@ZV?$CUtlMemory@U?$UtlRBTreeNode_t@PBDG@@G@@@@QAEAAPBDG@Z ENDP ; CUtlRBTree<char const *,unsigned short,bool (__cdecl*)(char const * const &,char const * const &),CUtlMemory<UtlRBTreeNode_t<char const *,unsigned short>,unsigned short> >::Element
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xashxt_v0.81_rev.1_with_sources\xashxt_v0.81_rev.1_src\game_shared\utlrbtree.h
;	COMDAT ??1?$CUtlRBTree@PBDGP6A_NABQBD0@ZV?$CUtlMemory@U?$UtlRBTreeNode_t@PBDG@@G@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$CUtlRBTree@PBDGP6A_NABQBD0@ZV?$CUtlMemory@U?$UtlRBTreeNode_t@PBDG@@G@@@@QAE@XZ PROC ; CUtlRBTree<char const *,unsigned short,bool (__cdecl*)(char const * const &,char const * const &),CUtlMemory<UtlRBTreeNode_t<char const *,unsigned short>,unsigned short> >::~CUtlRBTree<char const *,unsigned short,bool (__cdecl*)(char const * const &,char const * const &),CUtlMemory<UtlRBTreeNode_t<char const *,unsigned short>,unsigned short> >, COMDAT
; _this$ = ecx

; 380  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1?$CUtlRBTree@PBDGP6A_NABQBD0@ZV?$CUtlMemory@U?$UtlRBTreeNode_t@PBDG@@G@@@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 381  : 	Purge();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Purge@?$CUtlRBTree@PBDGP6A_NABQBD0@ZV?$CUtlMemory@U?$UtlRBTreeNode_t@PBDG@@G@@@@QAEXXZ ; CUtlRBTree<char const *,unsigned short,bool (__cdecl*)(char const * const &,char const * const &),CUtlMemory<UtlRBTreeNode_t<char const *,unsigned short>,unsigned short> >::Purge

; 382  : }

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??1?$CUtlMemory@U?$UtlRBTreeNode_t@PBDG@@G@@QAE@XZ ; CUtlMemory<UtlRBTreeNode_t<char const *,unsigned short>,unsigned short>::~CUtlMemory<UtlRBTreeNode_t<char const *,unsigned short>,unsigned short>
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??1?$CUtlRBTree@PBDGP6A_NABQBD0@ZV?$CUtlMemory@U?$UtlRBTreeNode_t@PBDG@@G@@@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1?$CUtlRBTree@PBDGP6A_NABQBD0@ZV?$CUtlMemory@U?$UtlRBTreeNode_t@PBDG@@G@@@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1?$CUtlRBTree@PBDGP6A_NABQBD0@ZV?$CUtlMemory@U?$UtlRBTreeNode_t@PBDG@@G@@@@QAE@XZ ENDP ; CUtlRBTree<char const *,unsigned short,bool (__cdecl*)(char const * const &,char const * const &),CUtlMemory<UtlRBTreeNode_t<char const *,unsigned short>,unsigned short> >::~CUtlRBTree<char const *,unsigned short,bool (__cdecl*)(char const * const &,char const * const &),CUtlMemory<UtlRBTreeNode_t<char const *,unsigned short>,unsigned short> >
; Function compile flags: /Odtp
; File c:\users\user\downloads\xashxt_v0.81_rev.1_with_sources\xashxt_v0.81_rev.1_src\game_shared\utlrbtree.h
;	COMDAT ??0?$CUtlRBTree@PBDGP6A_NABQBD0@ZV?$CUtlMemory@U?$UtlRBTreeNode_t@PBDG@@G@@@@QAE@HHABQ6A_NABQBD0@Z@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_growSize$ = 8						; size = 4
_initSize$ = 12						; size = 4
_lessfunc$ = 16						; size = 4
??0?$CUtlRBTree@PBDGP6A_NABQBD0@ZV?$CUtlMemory@U?$UtlRBTreeNode_t@PBDG@@G@@@@QAE@HHABQ6A_NABQBD0@Z@Z PROC ; CUtlRBTree<char const *,unsigned short,bool (__cdecl*)(char const * const &,char const * const &),CUtlMemory<UtlRBTreeNode_t<char const *,unsigned short>,unsigned short> >::CUtlRBTree<char const *,unsigned short,bool (__cdecl*)(char const * const &,char const * const &),CUtlMemory<UtlRBTreeNode_t<char const *,unsigned short>,unsigned short> >, COMDAT
; _this$ = ecx

; 362  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0?$CUtlRBTree@PBDGP6A_NABQBD0@ZV?$CUtlMemory@U?$UtlRBTreeNode_t@PBDG@@G@@@@QAE@HHABQ6A_NABQBD0@Z@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 357  : m_LessFunc( lessfunc ),

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _lessfunc$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx

; 356  : m_Elements( growSize, initSize ),

	mov	eax, DWORD PTR _initSize$[ebp]
	push	eax
	mov	ecx, DWORD PTR _growSize$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??0?$CUtlMemory@U?$UtlRBTreeNode_t@PBDG@@G@@QAE@HH@Z ; CUtlMemory<UtlRBTreeNode_t<char const *,unsigned short>,unsigned short>::CUtlMemory<UtlRBTreeNode_t<char const *,unsigned short>,unsigned short>
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 358  : m_Root( InvalidIndex() ),

	call	?InvalidIndex@?$CUtlRBTree@PBDGP6A_NABQBD0@ZV?$CUtlMemory@U?$UtlRBTreeNode_t@PBDG@@G@@@@SAGXZ ; CUtlRBTree<char const *,unsigned short,bool (__cdecl*)(char const * const &,char const * const &),CUtlMemory<UtlRBTreeNode_t<char const *,unsigned short>,unsigned short> >::InvalidIndex
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+16], ax

; 359  : m_NumElements( 0 ),

	xor	eax, eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+18], ax

; 360  : m_FirstFree( InvalidIndex() ),

	call	?InvalidIndex@?$CUtlRBTree@PBDGP6A_NABQBD0@ZV?$CUtlMemory@U?$UtlRBTreeNode_t@PBDG@@G@@@@SAGXZ ; CUtlRBTree<char const *,unsigned short,bool (__cdecl*)(char const * const &,char const * const &),CUtlMemory<UtlRBTreeNode_t<char const *,unsigned short>,unsigned short> >::InvalidIndex
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+20], ax

; 361  : m_LastAlloc( m_Elements.InvalidIterator() )

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 22					; 00000016H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	?InvalidIterator@?$CUtlMemory@U?$UtlRBTreeNode_t@PBDG@@G@@QBE?AVIterator_t@1@XZ ; CUtlMemory<UtlRBTreeNode_t<char const *,unsigned short>,unsigned short>::InvalidIterator

; 363  : 	ResetDbgInfo();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?ResetDbgInfo@?$CUtlRBTree@PBDGP6A_NABQBD0@ZV?$CUtlMemory@U?$UtlRBTreeNode_t@PBDG@@G@@@@IAEXXZ ; CUtlRBTree<char const *,unsigned short,bool (__cdecl*)(char const * const &,char const * const &),CUtlMemory<UtlRBTreeNode_t<char const *,unsigned short>,unsigned short> >::ResetDbgInfo

; 364  : }

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$CUtlRBTree@PBDGP6A_NABQBD0@ZV?$CUtlMemory@U?$UtlRBTreeNode_t@PBDG@@G@@@@QAE@HHABQ6A_NABQBD0@Z@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	jmp	??1?$CUtlMemory@U?$UtlRBTreeNode_t@PBDG@@G@@QAE@XZ ; CUtlMemory<UtlRBTreeNode_t<char const *,unsigned short>,unsigned short>::~CUtlMemory<UtlRBTreeNode_t<char const *,unsigned short>,unsigned short>
__ehhandler$??0?$CUtlRBTree@PBDGP6A_NABQBD0@ZV?$CUtlMemory@U?$UtlRBTreeNode_t@PBDG@@G@@@@QAE@HHABQ6A_NABQBD0@Z@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0?$CUtlRBTree@PBDGP6A_NABQBD0@ZV?$CUtlMemory@U?$UtlRBTreeNode_t@PBDG@@G@@@@QAE@HHABQ6A_NABQBD0@Z@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0?$CUtlRBTree@PBDGP6A_NABQBD0@ZV?$CUtlMemory@U?$UtlRBTreeNode_t@PBDG@@G@@@@QAE@HHABQ6A_NABQBD0@Z@Z ENDP ; CUtlRBTree<char const *,unsigned short,bool (__cdecl*)(char const * const &,char const * const &),CUtlMemory<UtlRBTreeNode_t<char const *,unsigned short>,unsigned short> >::CUtlRBTree<char const *,unsigned short,bool (__cdecl*)(char const * const &,char const * const &),CUtlMemory<UtlRBTreeNode_t<char const *,unsigned short>,unsigned short> >
; Function compile flags: /Odtp
; File c:\users\user\downloads\xashxt_v0.81_rev.1_with_sources\xashxt_v0.81_rev.1_src\server\strings.cpp
_TEXT	SEGMENT
_this$ = -8						; size = 4
_i$1 = -4						; size = 4
?DumpSorted@CStringPool@@QAEXXZ PROC			; CStringPool::DumpSorted
; _this$ = ecx

; 92   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 93   : 	for( int i = m_Strings.FirstInorder(); i != m_Strings.InvalidIndex(); i = m_Strings.NextInorder(i) )

	mov	ecx, DWORD PTR _this$[ebp]
	call	?FirstInorder@?$CUtlRBTree@PBDGP6A_NABQBD0@ZV?$CUtlMemory@U?$UtlRBTreeNode_t@PBDG@@G@@@@QBEGXZ ; CUtlRBTree<char const *,unsigned short,bool (__cdecl*)(char const * const &,char const * const &),CUtlMemory<UtlRBTreeNode_t<char const *,unsigned short>,unsigned short> >::FirstInorder
	movzx	eax, ax
	mov	DWORD PTR _i$1[ebp], eax
	jmp	SHORT $LN4@DumpSorted
$LN2@DumpSorted:
	movzx	ecx, WORD PTR _i$1[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?NextInorder@?$CUtlRBTree@PBDGP6A_NABQBD0@ZV?$CUtlMemory@U?$UtlRBTreeNode_t@PBDG@@G@@@@QBEGG@Z ; CUtlRBTree<char const *,unsigned short,bool (__cdecl*)(char const * const &,char const * const &),CUtlMemory<UtlRBTreeNode_t<char const *,unsigned short>,unsigned short> >::NextInorder
	movzx	edx, ax
	mov	DWORD PTR _i$1[ebp], edx
$LN4@DumpSorted:
	call	?InvalidIndex@?$CUtlRBTree@PBDGP6A_NABQBD0@ZV?$CUtlMemory@U?$UtlRBTreeNode_t@PBDG@@G@@@@SAGXZ ; CUtlRBTree<char const *,unsigned short,bool (__cdecl*)(char const * const &,char const * const &),CUtlMemory<UtlRBTreeNode_t<char const *,unsigned short>,unsigned short> >::InvalidIndex
	movzx	eax, ax
	cmp	DWORD PTR _i$1[ebp], eax
	je	SHORT $LN3@DumpSorted

; 94   : 	{
; 95   : 		Msg( "  %d (0x%x) : %s\n", i, m_Strings[i], m_Strings[i] );

	movzx	ecx, WORD PTR _i$1[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??A?$CUtlRBTree@PBDGP6A_NABQBD0@ZV?$CUtlMemory@U?$UtlRBTreeNode_t@PBDG@@G@@@@QAEAAPBDG@Z ; CUtlRBTree<char const *,unsigned short,bool (__cdecl*)(char const * const &,char const * const &),CUtlMemory<UtlRBTreeNode_t<char const *,unsigned short>,unsigned short> >::operator[]
	mov	edx, DWORD PTR [eax]
	push	edx
	movzx	eax, WORD PTR _i$1[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??A?$CUtlRBTree@PBDGP6A_NABQBD0@ZV?$CUtlMemory@U?$UtlRBTreeNode_t@PBDG@@G@@@@QAEAAPBDG@Z ; CUtlRBTree<char const *,unsigned short,bool (__cdecl*)(char const * const &,char const * const &),CUtlMemory<UtlRBTreeNode_t<char const *,unsigned short>,unsigned short> >::operator[]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	edx, DWORD PTR _i$1[ebp]
	push	edx
	push	OFFSET $SG71500
	call	?Msg@@YAXPBDZZ				; Msg
	add	esp, 16					; 00000010H

; 96   : 	}

	jmp	SHORT $LN2@DumpSorted
$LN3@DumpSorted:

; 97   : 
; 98   : 	Msg( "\nSize:  %d items\n", m_Strings.Count() );

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Count@?$CUtlRBTree@PBDGP6A_NABQBD0@ZV?$CUtlMemory@U?$UtlRBTreeNode_t@PBDG@@G@@@@QBEIXZ ; CUtlRBTree<char const *,unsigned short,bool (__cdecl*)(char const * const &,char const * const &),CUtlMemory<UtlRBTreeNode_t<char const *,unsigned short>,unsigned short> >::Count
	push	eax
	push	OFFSET $SG71501
	call	?Msg@@YAXPBDZZ				; Msg
	add	esp, 8

; 99   : }

	mov	esp, ebp
	pop	ebp
	ret	0
?DumpSorted@CStringPool@@QAEXXZ ENDP			; CStringPool::DumpSorted
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xashxt_v0.81_rev.1_with_sources\xashxt_v0.81_rev.1_src\server\strings.cpp
_TEXT	SEGMENT
_this$ = -8						; size = 4
_i$1 = -4						; size = 4
?Dump@CStringPool@@QAEXXZ PROC				; CStringPool::Dump
; _this$ = ecx

; 82   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 83   : 	for( unsigned int i = 0; i < m_Strings.Count(); i++ )

	mov	DWORD PTR _i$1[ebp], 0
	jmp	SHORT $LN4@Dump
$LN2@Dump:
	mov	eax, DWORD PTR _i$1[ebp]
	add	eax, 1
	mov	DWORD PTR _i$1[ebp], eax
$LN4@Dump:
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Count@?$CUtlRBTree@PBDGP6A_NABQBD0@ZV?$CUtlMemory@U?$UtlRBTreeNode_t@PBDG@@G@@@@QBEIXZ ; CUtlRBTree<char const *,unsigned short,bool (__cdecl*)(char const * const &,char const * const &),CUtlMemory<UtlRBTreeNode_t<char const *,unsigned short>,unsigned short> >::Count
	cmp	DWORD PTR _i$1[ebp], eax
	jae	SHORT $LN3@Dump

; 84   : 	{
; 85   : 		Msg( "  %d (0x%x) : %s\n", i, m_Strings[i], m_Strings[i] );

	movzx	ecx, WORD PTR _i$1[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??A?$CUtlRBTree@PBDGP6A_NABQBD0@ZV?$CUtlMemory@U?$UtlRBTreeNode_t@PBDG@@G@@@@QAEAAPBDG@Z ; CUtlRBTree<char const *,unsigned short,bool (__cdecl*)(char const * const &,char const * const &),CUtlMemory<UtlRBTreeNode_t<char const *,unsigned short>,unsigned short> >::operator[]
	mov	edx, DWORD PTR [eax]
	push	edx
	movzx	eax, WORD PTR _i$1[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??A?$CUtlRBTree@PBDGP6A_NABQBD0@ZV?$CUtlMemory@U?$UtlRBTreeNode_t@PBDG@@G@@@@QAEAAPBDG@Z ; CUtlRBTree<char const *,unsigned short,bool (__cdecl*)(char const * const &,char const * const &),CUtlMemory<UtlRBTreeNode_t<char const *,unsigned short>,unsigned short> >::operator[]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	edx, DWORD PTR _i$1[ebp]
	push	edx
	push	OFFSET $SG71490
	call	?Msg@@YAXPBDZZ				; Msg
	add	esp, 16					; 00000010H

; 86   : 	}

	jmp	SHORT $LN2@Dump
$LN3@Dump:

; 87   : 
; 88   : 	Msg( "\nSize:  %d items\n", m_Strings.Count() );

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Count@?$CUtlRBTree@PBDGP6A_NABQBD0@ZV?$CUtlMemory@U?$UtlRBTreeNode_t@PBDG@@G@@@@QBEIXZ ; CUtlRBTree<char const *,unsigned short,bool (__cdecl*)(char const * const &,char const * const &),CUtlMemory<UtlRBTreeNode_t<char const *,unsigned short>,unsigned short> >::Count
	push	eax
	push	OFFSET $SG71491
	call	?Msg@@YAXPBDZZ				; Msg
	add	esp, 8

; 89   : }

	mov	esp, ebp
	pop	ebp
	ret	0
?Dump@CStringPool@@QAEXXZ ENDP				; CStringPool::Dump
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xashxt_v0.81_rev.1_with_sources\xashxt_v0.81_rev.1_src\server\strings.cpp
_TEXT	SEGMENT
_this$ = -8						; size = 4
_i$ = -4						; size = 2
?FreeAll@CStringPool@@QAEXXZ PROC			; CStringPool::FreeAll
; _this$ = ecx

; 69   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	push	esi
	mov	DWORD PTR _this$[ebp], ecx

; 70   : 	unsigned short i = m_Strings.FirstInorder();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?FirstInorder@?$CUtlRBTree@PBDGP6A_NABQBD0@ZV?$CUtlMemory@U?$UtlRBTreeNode_t@PBDG@@G@@@@QBEGXZ ; CUtlRBTree<char const *,unsigned short,bool (__cdecl*)(char const * const &,char const * const &),CUtlMemory<UtlRBTreeNode_t<char const *,unsigned short>,unsigned short> >::FirstInorder
	mov	WORD PTR _i$[ebp], ax
$LN2@FreeAll:

; 71   : 
; 72   : 	while( i != m_Strings.InvalidIndex() )

	movzx	esi, WORD PTR _i$[ebp]
	call	?InvalidIndex@?$CUtlRBTree@PBDGP6A_NABQBD0@ZV?$CUtlMemory@U?$UtlRBTreeNode_t@PBDG@@G@@@@SAGXZ ; CUtlRBTree<char const *,unsigned short,bool (__cdecl*)(char const * const &,char const * const &),CUtlMemory<UtlRBTreeNode_t<char const *,unsigned short>,unsigned short> >::InvalidIndex
	movzx	eax, ax
	cmp	esi, eax
	je	SHORT $LN3@FreeAll

; 73   : 	{
; 74   : 		free( (void *)m_Strings[i] );

	movzx	ecx, WORD PTR _i$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??A?$CUtlRBTree@PBDGP6A_NABQBD0@ZV?$CUtlMemory@U?$UtlRBTreeNode_t@PBDG@@G@@@@QAEAAPBDG@Z ; CUtlRBTree<char const *,unsigned short,bool (__cdecl*)(char const * const &,char const * const &),CUtlMemory<UtlRBTreeNode_t<char const *,unsigned short>,unsigned short> >::operator[]
	mov	edx, DWORD PTR [eax]
	push	edx
	call	_free
	add	esp, 4

; 75   : 		i = m_Strings.NextInorder(i);

	movzx	eax, WORD PTR _i$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?NextInorder@?$CUtlRBTree@PBDGP6A_NABQBD0@ZV?$CUtlMemory@U?$UtlRBTreeNode_t@PBDG@@G@@@@QBEGG@Z ; CUtlRBTree<char const *,unsigned short,bool (__cdecl*)(char const * const &,char const * const &),CUtlMemory<UtlRBTreeNode_t<char const *,unsigned short>,unsigned short> >::NextInorder
	mov	WORD PTR _i$[ebp], ax

; 76   : 	}

	jmp	SHORT $LN2@FreeAll
$LN3@FreeAll:

; 77   : 
; 78   : 	m_Strings.Purge();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Purge@?$CUtlRBTree@PBDGP6A_NABQBD0@ZV?$CUtlMemory@U?$UtlRBTreeNode_t@PBDG@@G@@@@QAEXXZ ; CUtlRBTree<char const *,unsigned short,bool (__cdecl*)(char const * const &,char const * const &),CUtlMemory<UtlRBTreeNode_t<char const *,unsigned short>,unsigned short> >::Purge

; 79   : }

	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	0
?FreeAll@CStringPool@@QAEXXZ ENDP			; CStringPool::FreeAll
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xashxt_v0.81_rev.1_with_sources\xashxt_v0.81_rev.1_src\server\strings.cpp
_TEXT	SEGMENT
_this$ = -8						; size = 4
_i$ = -4						; size = 2
?MakeEmptyString@CStringPool@@QAEXXZ PROC		; CStringPool::MakeEmptyString
; _this$ = ecx

; 61   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 62   : 	// empty string is always should be set at index 0
; 63   : 	unsigned short i = AllocString( "" );

	push	OFFSET $SG71471
	mov	ecx, DWORD PTR _this$[ebp]
	call	?AllocString@CStringPool@@QAEHPBD@Z	; CStringPool::AllocString
	mov	WORD PTR _i$[ebp], ax

; 64   : 
; 65   : 	if( i != 0 ) ALERT( at_error, "Empty string has bad index %i!\n", i );

	movzx	eax, WORD PTR _i$[ebp]
	test	eax, eax
	je	SHORT $LN1@MakeEmptyS
	movzx	ecx, WORD PTR _i$[ebp]
	push	ecx
	push	OFFSET $SG71473
	push	4
	call	DWORD PTR ?g_engfuncs@@3Uenginefuncs_s@@A+244
	add	esp, 12					; 0000000cH
$LN1@MakeEmptyS:

; 66   : }

	mov	esp, ebp
	pop	ebp
	ret	0
?MakeEmptyString@CStringPool@@QAEXXZ ENDP		; CStringPool::MakeEmptyString
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xashxt_v0.81_rev.1_with_sources\xashxt_v0.81_rev.1_src\server\strings.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
_iString$ = 8						; size = 4
?FindString@CStringPool@@QAEPBDH@Z PROC			; CStringPool::FindString
; _this$ = ecx

; 43   : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 44   : 	if( m_Strings.IsValidIndex( iString ) )

	movzx	eax, WORD PTR _iString$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsValidIndex@?$CUtlRBTree@PBDGP6A_NABQBD0@ZV?$CUtlMemory@U?$UtlRBTreeNode_t@PBDG@@G@@@@QBE_NG@Z ; CUtlRBTree<char const *,unsigned short,bool (__cdecl*)(char const * const &,char const * const &),CUtlMemory<UtlRBTreeNode_t<char const *,unsigned short>,unsigned short> >::IsValidIndex
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN2@FindString

; 45   : 		return m_Strings[iString];

	movzx	edx, WORD PTR _iString$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??A?$CUtlRBTree@PBDGP6A_NABQBD0@ZV?$CUtlMemory@U?$UtlRBTreeNode_t@PBDG@@G@@@@QAEAAPBDG@Z ; CUtlRBTree<char const *,unsigned short,bool (__cdecl*)(char const * const &,char const * const &),CUtlMemory<UtlRBTreeNode_t<char const *,unsigned short>,unsigned short> >::operator[]
	mov	eax, DWORD PTR [eax]
	jmp	SHORT $LN1@FindString
$LN2@FindString:

; 46   : 
; 47   : 	return NULL;

	xor	eax, eax
$LN1@FindString:

; 48   : }

	mov	esp, ebp
	pop	ebp
	ret	4
?FindString@CStringPool@@QAEPBDH@Z ENDP			; CStringPool::FindString
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xashxt_v0.81_rev.1_with_sources\xashxt_v0.81_rev.1_src\server\strings.cpp
_TEXT	SEGMENT
$T1 = -12						; size = 4
_this$ = -8						; size = 4
_i$ = -4						; size = 2
_pszValue$ = 8						; size = 4
?AllocString@CStringPool@@QAEHPBD@Z PROC		; CStringPool::AllocString
; _this$ = ecx

; 51   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	push	esi
	mov	DWORD PTR _this$[ebp], ecx

; 52   : 	unsigned short i = m_Strings.Find( pszValue );

	lea	eax, DWORD PTR _pszValue$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Find@?$CUtlRBTree@PBDGP6A_NABQBD0@ZV?$CUtlMemory@U?$UtlRBTreeNode_t@PBDG@@G@@@@QBEGABQBD@Z ; CUtlRBTree<char const *,unsigned short,bool (__cdecl*)(char const * const &,char const * const &),CUtlMemory<UtlRBTreeNode_t<char const *,unsigned short>,unsigned short> >::Find
	mov	WORD PTR _i$[ebp], ax

; 53   : 
; 54   : 	if( i != m_Strings.InvalidIndex( ))

	movzx	esi, WORD PTR _i$[ebp]
	call	?InvalidIndex@?$CUtlRBTree@PBDGP6A_NABQBD0@ZV?$CUtlMemory@U?$UtlRBTreeNode_t@PBDG@@G@@@@SAGXZ ; CUtlRBTree<char const *,unsigned short,bool (__cdecl*)(char const * const &,char const * const &),CUtlMemory<UtlRBTreeNode_t<char const *,unsigned short>,unsigned short> >::InvalidIndex
	movzx	ecx, ax
	cmp	esi, ecx
	je	SHORT $LN2@AllocStrin

; 55   : 		return i;

	movzx	eax, WORD PTR _i$[ebp]
	jmp	SHORT $LN1@AllocStrin
$LN2@AllocStrin:

; 56   : 
; 57   : 	return m_Strings.Insert( strdup( pszValue ));

	mov	edx, DWORD PTR _pszValue$[ebp]
	push	edx
	call	_strdup
	add	esp, 4
	mov	DWORD PTR $T1[ebp], eax
	lea	eax, DWORD PTR $T1[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Insert@?$CUtlRBTree@PBDGP6A_NABQBD0@ZV?$CUtlMemory@U?$UtlRBTreeNode_t@PBDG@@G@@@@QAEGABQBD@Z ; CUtlRBTree<char const *,unsigned short,bool (__cdecl*)(char const * const &,char const * const &),CUtlMemory<UtlRBTreeNode_t<char const *,unsigned short>,unsigned short> >::Insert
	movzx	eax, ax
$LN1@AllocStrin:

; 58   : }

	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
?AllocString@CStringPool@@QAEHPBD@Z ENDP		; CStringPool::AllocString
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xashxt_v0.81_rev.1_with_sources\xashxt_v0.81_rev.1_src\server\strings.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Count@CStringPool@@QBEIXZ PROC				; CStringPool::Count
; _this$ = ecx

; 38   : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 39   : 	return m_Strings.Count();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Count@?$CUtlRBTree@PBDGP6A_NABQBD0@ZV?$CUtlMemory@U?$UtlRBTreeNode_t@PBDG@@G@@@@QBEIXZ ; CUtlRBTree<char const *,unsigned short,bool (__cdecl*)(char const * const &,char const * const &),CUtlMemory<UtlRBTreeNode_t<char const *,unsigned short>,unsigned short> >::Count

; 40   : }

	mov	esp, ebp
	pop	ebp
	ret	0
?Count@CStringPool@@QBEIXZ ENDP				; CStringPool::Count
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xashxt_v0.81_rev.1_with_sources\xashxt_v0.81_rev.1_src\server\strings.cpp
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1CStringPool@@QAE@XZ PROC				; CStringPool::~CStringPool
; _this$ = ecx

; 33   : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1CStringPool@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 34   : 	FreeAll();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?FreeAll@CStringPool@@QAEXXZ		; CStringPool::FreeAll

; 35   : }

	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$CUtlRBTree@PBDGP6A_NABQBD0@ZV?$CUtlMemory@U?$UtlRBTreeNode_t@PBDG@@G@@@@QAE@XZ ; CUtlRBTree<char const *,unsigned short,bool (__cdecl*)(char const * const &,char const * const &),CUtlMemory<UtlRBTreeNode_t<char const *,unsigned short>,unsigned short> >::~CUtlRBTree<char const *,unsigned short,bool (__cdecl*)(char const * const &,char const * const &),CUtlMemory<UtlRBTreeNode_t<char const *,unsigned short>,unsigned short> >
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
text$x	SEGMENT
__ehhandler$??1CStringPool@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1CStringPool@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1CStringPool@@QAE@XZ ENDP				; CStringPool::~CStringPool
; Function compile flags: /Odtp
; File c:\users\user\downloads\xashxt_v0.81_rev.1_with_sources\xashxt_v0.81_rev.1_src\server\strings.cpp
_TEXT	SEGMENT
$T2 = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0CStringPool@@QAE@XZ PROC				; CStringPool::CStringPool
; _this$ = ecx

; 28   : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0CStringPool@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 8
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 27   : CStringPool::CStringPool() : m_Strings( 32, 256, &StrLess )

	mov	DWORD PTR $T2[ebp], OFFSET ?StrLess@@YA_NABQBD0@Z ; StrLess
	lea	eax, DWORD PTR $T2[ebp]
	push	eax
	push	256					; 00000100H
	push	32					; 00000020H
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$CUtlRBTree@PBDGP6A_NABQBD0@ZV?$CUtlMemory@U?$UtlRBTreeNode_t@PBDG@@G@@@@QAE@HHABQ6A_NABQBD0@Z@Z ; CUtlRBTree<char const *,unsigned short,bool (__cdecl*)(char const * const &,char const * const &),CUtlMemory<UtlRBTreeNode_t<char const *,unsigned short>,unsigned short> >::CUtlRBTree<char const *,unsigned short,bool (__cdecl*)(char const * const &,char const * const &),CUtlMemory<UtlRBTreeNode_t<char const *,unsigned short>,unsigned short> >
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 29   : 	MakeEmptyString();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?MakeEmptyString@CStringPool@@QAEXXZ	; CStringPool::MakeEmptyString

; 30   : }

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$??0CStringPool@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$CUtlRBTree@PBDGP6A_NABQBD0@ZV?$CUtlMemory@U?$UtlRBTreeNode_t@PBDG@@G@@@@QAE@XZ ; CUtlRBTree<char const *,unsigned short,bool (__cdecl*)(char const * const &,char const * const &),CUtlMemory<UtlRBTreeNode_t<char const *,unsigned short>,unsigned short> >::~CUtlRBTree<char const *,unsigned short,bool (__cdecl*)(char const * const &,char const * const &),CUtlMemory<UtlRBTreeNode_t<char const *,unsigned short>,unsigned short> >
__ehhandler$??0CStringPool@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-12]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0CStringPool@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??0CStringPool@@QAE@XZ ENDP				; CStringPool::CStringPool
; Function compile flags: /Odtp
; File c:\users\user\downloads\xashxt_v0.81_rev.1_with_sources\xashxt_v0.81_rev.1_src\game_shared\utlmemory.h
;	COMDAT ?UtlMemory_CalcNewAllocationCount@@YAHHHHH@Z
_TEXT	SEGMENT
_nAllocationCount$ = 8					; size = 4
_nGrowSize$ = 12					; size = 4
_nNewSize$ = 16						; size = 4
_nBytesItem$ = 20					; size = 4
?UtlMemory_CalcNewAllocationCount@@YAHHHHH@Z PROC	; UtlMemory_CalcNewAllocationCount, COMDAT

; 528  : {

	push	ebp
	mov	ebp, esp

; 529  : 	if ( nGrowSize )

	cmp	DWORD PTR _nGrowSize$[ebp], 0
	je	SHORT $LN4@UtlMemory_

; 530  : 	{ 
; 531  : 		nAllocationCount = ((1 + ((nNewSize - 1) / nGrowSize)) * nGrowSize);

	mov	eax, DWORD PTR _nNewSize$[ebp]
	sub	eax, 1
	cdq
	idiv	DWORD PTR _nGrowSize$[ebp]
	add	eax, 1
	imul	eax, DWORD PTR _nGrowSize$[ebp]
	mov	DWORD PTR _nAllocationCount$[ebp], eax

; 532  : 	}
; 533  : 	else 

	jmp	SHORT $LN5@UtlMemory_
$LN4@UtlMemory_:

; 534  : 	{
; 535  : 		if ( !nAllocationCount )

	cmp	DWORD PTR _nAllocationCount$[ebp], 0
	jne	SHORT $LN2@UtlMemory_

; 536  : 		{
; 537  : 			// Compute an allocation which is at least as big as a cache line...
; 538  : 			nAllocationCount = (31 + nBytesItem) / nBytesItem;

	mov	eax, DWORD PTR _nBytesItem$[ebp]
	add	eax, 31					; 0000001fH
	cdq
	idiv	DWORD PTR _nBytesItem$[ebp]
	mov	DWORD PTR _nAllocationCount$[ebp], eax
$LN2@UtlMemory_:

; 539  : 		}
; 540  : 
; 541  : 		while (nAllocationCount < nNewSize)

	mov	eax, DWORD PTR _nAllocationCount$[ebp]
	cmp	eax, DWORD PTR _nNewSize$[ebp]
	jge	SHORT $LN5@UtlMemory_

; 542  : 		{
; 543  : #ifndef _X360
; 544  : 			nAllocationCount *= 2;

	mov	ecx, DWORD PTR _nAllocationCount$[ebp]
	shl	ecx, 1
	mov	DWORD PTR _nAllocationCount$[ebp], ecx

; 545  : #else
; 546  : 			int nNewAllocationCount = ( nAllocationCount * 9) / 8; // 12.5 %
; 547  : 			if ( nNewAllocationCount > nAllocationCount )
; 548  : 				nAllocationCount = nNewAllocationCount;
; 549  : 			else
; 550  : 				nAllocationCount *= 2;
; 551  : #endif
; 552  : 		}

	jmp	SHORT $LN2@UtlMemory_
$LN5@UtlMemory_:

; 553  : 	}
; 554  : 
; 555  : 	return nAllocationCount;

	mov	eax, DWORD PTR _nAllocationCount$[ebp]

; 556  : }

	pop	ebp
	ret	0
?UtlMemory_CalcNewAllocationCount@@YAHHHHH@Z ENDP	; UtlMemory_CalcNewAllocationCount
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vcruntime_new.h
;	COMDAT ??2@YAPAXIPAX@Z
_TEXT	SEGMENT
__Size$ = 8						; size = 4
__Where$ = 12						; size = 4
??2@YAPAXIPAX@Z PROC					; operator new, COMDAT

; 185  :     {

	push	ebp
	mov	ebp, esp

; 186  :         (void)_Size;
; 187  :         return _Where;

	mov	eax, DWORD PTR __Where$[ebp]

; 188  :     }

	pop	ebp
	ret	0
??2@YAPAXIPAX@Z ENDP					; operator new
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??__G@YGXPAX0IIP6EPAX00@Z@Z
_TEXT	SEGMENT
tv66 = -4						; size = 4
___t$ = 8						; size = 4
___u$ = 12						; size = 4
___s$ = 16						; size = 4
___n$ = 20						; size = 4
___f$ = 24						; size = 4
??__G@YGXPAX0IIP6EPAX00@Z@Z PROC			; `vector copy constructor iterator', COMDAT
	push	ebp
	mov	ebp, esp
	push	ecx
$LN2@vector:
	mov	eax, DWORD PTR ___n$[ebp]
	mov	DWORD PTR tv66[ebp], eax
	mov	ecx, DWORD PTR ___n$[ebp]
	sub	ecx, 1
	mov	DWORD PTR ___n$[ebp], ecx
	cmp	DWORD PTR tv66[ebp], 0
	jbe	SHORT $LN1@vector
	mov	edx, DWORD PTR ___u$[ebp]
	push	edx
	mov	ecx, DWORD PTR ___t$[ebp]
	call	DWORD PTR ___f$[ebp]
	mov	eax, DWORD PTR ___t$[ebp]
	add	eax, DWORD PTR ___s$[ebp]
	mov	DWORD PTR ___t$[ebp], eax
	mov	ecx, DWORD PTR ___u$[ebp]
	add	ecx, DWORD PTR ___s$[ebp]
	mov	DWORD PTR ___u$[ebp], ecx
	jmp	SHORT $LN2@vector
$LN1@vector:
	mov	esp, ebp
	pop	ebp
	ret	20					; 00000014H
??__G@YGXPAX0IIP6EPAX00@Z@Z ENDP			; `vector copy constructor iterator'
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_H@YGXPAXIIP6EPAX0@Z@Z
_TEXT	SEGMENT
tv66 = -4						; size = 4
___t$ = 8						; size = 4
___s$ = 12						; size = 4
___n$ = 16						; size = 4
___f$ = 20						; size = 4
??_H@YGXPAXIIP6EPAX0@Z@Z PROC				; `vector constructor iterator', COMDAT
	push	ebp
	mov	ebp, esp
	push	ecx
$LN2@vector:
	mov	eax, DWORD PTR ___n$[ebp]
	mov	DWORD PTR tv66[ebp], eax
	mov	ecx, DWORD PTR ___n$[ebp]
	sub	ecx, 1
	mov	DWORD PTR ___n$[ebp], ecx
	cmp	DWORD PTR tv66[ebp], 0
	jbe	SHORT $LN1@vector
	mov	ecx, DWORD PTR ___t$[ebp]
	call	DWORD PTR ___f$[ebp]
	mov	edx, DWORD PTR ___t$[ebp]
	add	edx, DWORD PTR ___s$[ebp]
	mov	DWORD PTR ___t$[ebp], edx
	jmp	SHORT $LN2@vector
$LN1@vector:
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
??_H@YGXPAXIIP6EPAX0@Z@Z ENDP				; `vector constructor iterator'
_TEXT	ENDS
END
