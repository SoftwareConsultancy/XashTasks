; Listing generated by Microsoft (R) Optimizing Compiler Version 19.16.27045.0 

	TITLE	C:\Users\USER\Downloads\XashXT_v0.81_rev.1_with_sources\XashXT_v0.81_rev.1_src\server\monsters\h_ai.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	?g_fDrawLines@@3HA				; g_fDrawLines
_BSS	SEGMENT
?g_fDrawLines@@3HA DD 01H DUP (?)			; g_fDrawLines
_BSS	ENDS
CONST	SEGMENT
$SG74748 DB	'c', 00H, ':', 00H, '\', 00H, 'u', 00H, 's', 00H, 'e', 00H
	DB	'r', 00H, 's', 00H, '\', 00H, 'u', 00H, 's', 00H, 'e', 00H, 'r'
	DB	00H, '\', 00H, 'd', 00H, 'o', 00H, 'w', 00H, 'n', 00H, 'l', 00H
	DB	'o', 00H, 'a', 00H, 'd', 00H, 's', 00H, '\', 00H, 'x', 00H, 'a'
	DB	00H, 's', 00H, 'h', 00H, 'x', 00H, 't', 00H, '_', 00H, 'v', 00H
	DB	'0', 00H, '.', 00H, '8', 00H, '1', 00H, '_', 00H, 'r', 00H, 'e'
	DB	00H, 'v', 00H, '.', 00H, '1', 00H, '_', 00H, 'w', 00H, 'i', 00H
	DB	't', 00H, 'h', 00H, '_', 00H, 's', 00H, 'o', 00H, 'u', 00H, 'r'
	DB	00H, 'c', 00H, 'e', 00H, 's', 00H, '\', 00H, 'x', 00H, 'a', 00H
	DB	's', 00H, 'h', 00H, 'x', 00H, 't', 00H, '_', 00H, 'v', 00H, '0'
	DB	00H, '.', 00H, '8', 00H, '1', 00H, '_', 00H, 'r', 00H, 'e', 00H
	DB	'v', 00H, '.', 00H, '1', 00H, '_', 00H, 's', 00H, 'r', 00H, 'c'
	DB	00H, '\', 00H, 'g', 00H, 'a', 00H, 'm', 00H, 'e', 00H, '_', 00H
	DB	's', 00H, 'h', 00H, 'a', 00H, 'r', 00H, 'e', 00H, 'd', 00H, '\'
	DB	00H, 'u', 00H, 't', 00H, 'l', 00H, 'm', 00H, 'e', 00H, 'm', 00H
	DB	'o', 00H, 'r', 00H, 'y', 00H, '.', 00H, 'h', 00H, 00H, 00H
	ORG $+2
$SG74749 DB	'n', 00H, 'G', 00H, 'r', 00H, 'o', 00H, 'w', 00H, 'S', 00H
	DB	'i', 00H, 'z', 00H, 'e', 00H, ' ', 00H, '>', 00H, '=', 00H, ' '
	DB	00H, '0', 00H, 00H, 00H
	ORG $+2
$SG74792 DB	'c', 00H, ':', 00H, '\', 00H, 'u', 00H, 's', 00H, 'e', 00H
	DB	'r', 00H, 's', 00H, '\', 00H, 'u', 00H, 's', 00H, 'e', 00H, 'r'
	DB	00H, '\', 00H, 'd', 00H, 'o', 00H, 'w', 00H, 'n', 00H, 'l', 00H
	DB	'o', 00H, 'a', 00H, 'd', 00H, 's', 00H, '\', 00H, 'x', 00H, 'a'
	DB	00H, 's', 00H, 'h', 00H, 'x', 00H, 't', 00H, '_', 00H, 'v', 00H
	DB	'0', 00H, '.', 00H, '8', 00H, '1', 00H, '_', 00H, 'r', 00H, 'e'
	DB	00H, 'v', 00H, '.', 00H, '1', 00H, '_', 00H, 'w', 00H, 'i', 00H
	DB	't', 00H, 'h', 00H, '_', 00H, 's', 00H, 'o', 00H, 'u', 00H, 'r'
	DB	00H, 'c', 00H, 'e', 00H, 's', 00H, '\', 00H, 'x', 00H, 'a', 00H
	DB	's', 00H, 'h', 00H, 'x', 00H, 't', 00H, '_', 00H, 'v', 00H, '0'
	DB	00H, '.', 00H, '8', 00H, '1', 00H, '_', 00H, 'r', 00H, 'e', 00H
	DB	'v', 00H, '.', 00H, '1', 00H, '_', 00H, 's', 00H, 'r', 00H, 'c'
	DB	00H, '\', 00H, 'g', 00H, 'a', 00H, 'm', 00H, 'e', 00H, '_', 00H
	DB	's', 00H, 'h', 00H, 'a', 00H, 'r', 00H, 'e', 00H, 'd', 00H, '\'
	DB	00H, 'u', 00H, 't', 00H, 'l', 00H, 'a', 00H, 'r', 00H, 'r', 00H
	DB	'a', 00H, 'y', 00H, '.', 00H, 'h', 00H, 00H, 00H
$SG74918 DB	'0', 00H, 00H, 00H
$SG74793 DB	'(', 00H, 'B', 00H, 'a', 00H, 's', 00H, 'e', 00H, '(', 00H
	DB	')', 00H, ' ', 00H, '=', 00H, '=', 00H, ' ', 00H, 'N', 00H, 'U'
	DB	00H, 'L', 00H, 'L', 00H, ')', 00H, ' ', 00H, '|', 00H, '|', 00H
	DB	' ', 00H, '(', 00H, '&', 00H, 's', 00H, 'r', 00H, 'c', 00H, ' '
	DB	00H, '<', 00H, ' ', 00H, 'B', 00H, 'a', 00H, 's', 00H, 'e', 00H
	DB	'(', 00H, ')', 00H, ')', 00H, ' ', 00H, '|', 00H, '|', 00H, ' '
	DB	00H, '(', 00H, '&', 00H, 's', 00H, 'r', 00H, 'c', 00H, ' ', 00H
	DB	'>', 00H, '=', 00H, ' ', 00H, '(', 00H, 'B', 00H, 'a', 00H, 's'
	DB	00H, 'e', 00H, '(', 00H, ')', 00H, ' ', 00H, '+', 00H, ' ', 00H
	DB	'C', 00H, 'o', 00H, 'u', 00H, 'n', 00H, 't', 00H, '(', 00H, ')'
	DB	00H, ')', 00H, ' ', 00H, ')', 00H, 00H, 00H
	ORG $+2
$SG74915 DB	'n', 00H, 'u', 00H, 'm', 00H, ' ', 00H, '>', 00H, ' ', 00H
	DB	'0', 00H, 00H, 00H
$SG74924 DB	'0', 00H, 00H, 00H
$SG74794 DB	'c', 00H, ':', 00H, '\', 00H, 'u', 00H, 's', 00H, 'e', 00H
	DB	'r', 00H, 's', 00H, '\', 00H, 'u', 00H, 's', 00H, 'e', 00H, 'r'
	DB	00H, '\', 00H, 'd', 00H, 'o', 00H, 'w', 00H, 'n', 00H, 'l', 00H
	DB	'o', 00H, 'a', 00H, 'd', 00H, 's', 00H, '\', 00H, 'x', 00H, 'a'
	DB	00H, 's', 00H, 'h', 00H, 'x', 00H, 't', 00H, '_', 00H, 'v', 00H
	DB	'0', 00H, '.', 00H, '8', 00H, '1', 00H, '_', 00H, 'r', 00H, 'e'
	DB	00H, 'v', 00H, '.', 00H, '1', 00H, '_', 00H, 'w', 00H, 'i', 00H
	DB	't', 00H, 'h', 00H, '_', 00H, 's', 00H, 'o', 00H, 'u', 00H, 'r'
	DB	00H, 'c', 00H, 'e', 00H, 's', 00H, '\', 00H, 'x', 00H, 'a', 00H
	DB	's', 00H, 'h', 00H, 'x', 00H, 't', 00H, '_', 00H, 'v', 00H, '0'
	DB	00H, '.', 00H, '8', 00H, '1', 00H, '_', 00H, 'r', 00H, 'e', 00H
	DB	'v', 00H, '.', 00H, '1', 00H, '_', 00H, 's', 00H, 'r', 00H, 'c'
	DB	00H, '\', 00H, 'g', 00H, 'a', 00H, 'm', 00H, 'e', 00H, '_', 00H
	DB	's', 00H, 'h', 00H, 'a', 00H, 'r', 00H, 'e', 00H, 'd', 00H, '\'
	DB	00H, 'u', 00H, 't', 00H, 'l', 00H, 'a', 00H, 'r', 00H, 'r', 00H
	DB	'a', 00H, 'y', 00H, '.', 00H, 'h', 00H, 00H, 00H
$SG74928 DB	'm', 00H, '_', 00H, 'p', 00H, 'M', 00H, 'e', 00H, 'm', 00H
	DB	'o', 00H, 'r', 00H, 'y', 00H, 00H, 00H
$SG74795 DB	'(', 00H, 'e', 00H, 'l', 00H, 'e', 00H, 'm', 00H, ' ', 00H
	DB	'=', 00H, '=', 00H, ' ', 00H, 'C', 00H, 'o', 00H, 'u', 00H, 'n'
	DB	00H, 't', 00H, '(', 00H, ')', 00H, ')', 00H, ' ', 00H, '|', 00H
	DB	'|', 00H, ' ', 00H, 'I', 00H, 's', 00H, 'V', 00H, 'a', 00H, 'l'
	DB	00H, 'i', 00H, 'd', 00H, 'I', 00H, 'n', 00H, 'd', 00H, 'e', 00H
	DB	'x', 00H, '(', 00H, 'e', 00H, 'l', 00H, 'e', 00H, 'm', 00H, ')'
	DB	00H, 00H, 00H
$SG74867 DB	'c', 00H, ':', 00H, '\', 00H, 'u', 00H, 's', 00H, 'e', 00H
	DB	'r', 00H, 's', 00H, '\', 00H, 'u', 00H, 's', 00H, 'e', 00H, 'r'
	DB	00H, '\', 00H, 'd', 00H, 'o', 00H, 'w', 00H, 'n', 00H, 'l', 00H
	DB	'o', 00H, 'a', 00H, 'd', 00H, 's', 00H, '\', 00H, 'x', 00H, 'a'
	DB	00H, 's', 00H, 'h', 00H, 'x', 00H, 't', 00H, '_', 00H, 'v', 00H
	DB	'0', 00H, '.', 00H, '8', 00H, '1', 00H, '_', 00H, 'r', 00H, 'e'
	DB	00H, 'v', 00H, '.', 00H, '1', 00H, '_', 00H, 'w', 00H, 'i', 00H
	DB	't', 00H, 'h', 00H, '_', 00H, 's', 00H, 'o', 00H, 'u', 00H, 'r'
	DB	00H, 'c', 00H, 'e', 00H, 's', 00H, '\', 00H, 'x', 00H, 'a', 00H
	DB	's', 00H, 'h', 00H, 'x', 00H, 't', 00H, '_', 00H, 'v', 00H, '0'
	DB	00H, '.', 00H, '8', 00H, '1', 00H, '_', 00H, 'r', 00H, 'e', 00H
	DB	'v', 00H, '.', 00H, '1', 00H, '_', 00H, 's', 00H, 'r', 00H, 'c'
	DB	00H, '\', 00H, 'g', 00H, 'a', 00H, 'm', 00H, 'e', 00H, '_', 00H
	DB	's', 00H, 'h', 00H, 'a', 00H, 'r', 00H, 'e', 00H, 'd', 00H, '\'
	DB	00H, 'u', 00H, 't', 00H, 'l', 00H, 'a', 00H, 'r', 00H, 'r', 00H
	DB	'a', 00H, 'y', 00H, '.', 00H, 'h', 00H, 00H, 00H
$SG74930 DB	'm', 00H, '_', 00H, 'p', 00H, 'M', 00H, 'e', 00H, 'm', 00H
	DB	'o', 00H, 'r', 00H, 'y', 00H, 00H, 00H
$SG74868 DB	'I', 00H, 's', 00H, 'V', 00H, 'a', 00H, 'l', 00H, 'i', 00H
	DB	'd', 00H, 'I', 00H, 'n', 00H, 'd', 00H, 'e', 00H, 'x', 00H, '('
	DB	00H, 'e', 00H, 'l', 00H, 'e', 00H, 'm', 00H, ')', 00H, ' ', 00H
	DB	'|', 00H, '|', 00H, ' ', 00H, '(', 00H, ' ', 00H, 'm', 00H, '_'
	DB	00H, 'S', 00H, 'i', 00H, 'z', 00H, 'e', 00H, ' ', 00H, '=', 00H
	DB	'=', 00H, ' ', 00H, '0', 00H, ' ', 00H, ')', 00H, ' ', 00H, '|'
	DB	00H, '|', 00H, ' ', 00H, '(', 00H, ' ', 00H, 'n', 00H, 'u', 00H
	DB	'm', 00H, ' ', 00H, '=', 00H, '=', 00H, ' ', 00H, '0', 00H, ' '
	DB	00H, ')', 00H, 00H, 00H
	ORG $+4
$SG74914 DB	'c', 00H, ':', 00H, '\', 00H, 'u', 00H, 's', 00H, 'e', 00H
	DB	'r', 00H, 's', 00H, '\', 00H, 'u', 00H, 's', 00H, 'e', 00H, 'r'
	DB	00H, '\', 00H, 'd', 00H, 'o', 00H, 'w', 00H, 'n', 00H, 'l', 00H
	DB	'o', 00H, 'a', 00H, 'd', 00H, 's', 00H, '\', 00H, 'x', 00H, 'a'
	DB	00H, 's', 00H, 'h', 00H, 'x', 00H, 't', 00H, '_', 00H, 'v', 00H
	DB	'0', 00H, '.', 00H, '8', 00H, '1', 00H, '_', 00H, 'r', 00H, 'e'
	DB	00H, 'v', 00H, '.', 00H, '1', 00H, '_', 00H, 'w', 00H, 'i', 00H
	DB	't', 00H, 'h', 00H, '_', 00H, 's', 00H, 'o', 00H, 'u', 00H, 'r'
	DB	00H, 'c', 00H, 'e', 00H, 's', 00H, '\', 00H, 'x', 00H, 'a', 00H
	DB	's', 00H, 'h', 00H, 'x', 00H, 't', 00H, '_', 00H, 'v', 00H, '0'
	DB	00H, '.', 00H, '8', 00H, '1', 00H, '_', 00H, 'r', 00H, 'e', 00H
	DB	'v', 00H, '.', 00H, '1', 00H, '_', 00H, 's', 00H, 'r', 00H, 'c'
	DB	00H, '\', 00H, 'g', 00H, 'a', 00H, 'm', 00H, 'e', 00H, '_', 00H
	DB	's', 00H, 'h', 00H, 'a', 00H, 'r', 00H, 'e', 00H, 'd', 00H, '\'
	DB	00H, 'u', 00H, 't', 00H, 'l', 00H, 'm', 00H, 'e', 00H, 'm', 00H
	DB	'o', 00H, 'r', 00H, 'y', 00H, '.', 00H, 'h', 00H, 00H, 00H
	ORG $+2
$SG74917 DB	'c', 00H, ':', 00H, '\', 00H, 'u', 00H, 's', 00H, 'e', 00H
	DB	'r', 00H, 's', 00H, '\', 00H, 'u', 00H, 's', 00H, 'e', 00H, 'r'
	DB	00H, '\', 00H, 'd', 00H, 'o', 00H, 'w', 00H, 'n', 00H, 'l', 00H
	DB	'o', 00H, 'a', 00H, 'd', 00H, 's', 00H, '\', 00H, 'x', 00H, 'a'
	DB	00H, 's', 00H, 'h', 00H, 'x', 00H, 't', 00H, '_', 00H, 'v', 00H
	DB	'0', 00H, '.', 00H, '8', 00H, '1', 00H, '_', 00H, 'r', 00H, 'e'
	DB	00H, 'v', 00H, '.', 00H, '1', 00H, '_', 00H, 'w', 00H, 'i', 00H
	DB	't', 00H, 'h', 00H, '_', 00H, 's', 00H, 'o', 00H, 'u', 00H, 'r'
	DB	00H, 'c', 00H, 'e', 00H, 's', 00H, '\', 00H, 'x', 00H, 'a', 00H
	DB	's', 00H, 'h', 00H, 'x', 00H, 't', 00H, '_', 00H, 'v', 00H, '0'
	DB	00H, '.', 00H, '8', 00H, '1', 00H, '_', 00H, 'r', 00H, 'e', 00H
	DB	'v', 00H, '.', 00H, '1', 00H, '_', 00H, 's', 00H, 'r', 00H, 'c'
	DB	00H, '\', 00H, 'g', 00H, 'a', 00H, 'm', 00H, 'e', 00H, '_', 00H
	DB	's', 00H, 'h', 00H, 'a', 00H, 'r', 00H, 'e', 00H, 'd', 00H, '\'
	DB	00H, 'u', 00H, 't', 00H, 'l', 00H, 'm', 00H, 'e', 00H, 'm', 00H
	DB	'o', 00H, 'r', 00H, 'y', 00H, '.', 00H, 'h', 00H, 00H, 00H
	ORG $+2
$SG74923 DB	'c', 00H, ':', 00H, '\', 00H, 'u', 00H, 's', 00H, 'e', 00H
	DB	'r', 00H, 's', 00H, '\', 00H, 'u', 00H, 's', 00H, 'e', 00H, 'r'
	DB	00H, '\', 00H, 'd', 00H, 'o', 00H, 'w', 00H, 'n', 00H, 'l', 00H
	DB	'o', 00H, 'a', 00H, 'd', 00H, 's', 00H, '\', 00H, 'x', 00H, 'a'
	DB	00H, 's', 00H, 'h', 00H, 'x', 00H, 't', 00H, '_', 00H, 'v', 00H
	DB	'0', 00H, '.', 00H, '8', 00H, '1', 00H, '_', 00H, 'r', 00H, 'e'
	DB	00H, 'v', 00H, '.', 00H, '1', 00H, '_', 00H, 'w', 00H, 'i', 00H
	DB	't', 00H, 'h', 00H, '_', 00H, 's', 00H, 'o', 00H, 'u', 00H, 'r'
	DB	00H, 'c', 00H, 'e', 00H, 's', 00H, '\', 00H, 'x', 00H, 'a', 00H
	DB	's', 00H, 'h', 00H, 'x', 00H, 't', 00H, '_', 00H, 'v', 00H, '0'
	DB	00H, '.', 00H, '8', 00H, '1', 00H, '_', 00H, 'r', 00H, 'e', 00H
	DB	'v', 00H, '.', 00H, '1', 00H, '_', 00H, 's', 00H, 'r', 00H, 'c'
	DB	00H, '\', 00H, 'g', 00H, 'a', 00H, 'm', 00H, 'e', 00H, '_', 00H
	DB	's', 00H, 'h', 00H, 'a', 00H, 'r', 00H, 'e', 00H, 'd', 00H, '\'
	DB	00H, 'u', 00H, 't', 00H, 'l', 00H, 'm', 00H, 'e', 00H, 'm', 00H
	DB	'o', 00H, 'r', 00H, 'y', 00H, '.', 00H, 'h', 00H, 00H, 00H
	ORG $+2
$SG74927 DB	'c', 00H, ':', 00H, '\', 00H, 'u', 00H, 's', 00H, 'e', 00H
	DB	'r', 00H, 's', 00H, '\', 00H, 'u', 00H, 's', 00H, 'e', 00H, 'r'
	DB	00H, '\', 00H, 'd', 00H, 'o', 00H, 'w', 00H, 'n', 00H, 'l', 00H
	DB	'o', 00H, 'a', 00H, 'd', 00H, 's', 00H, '\', 00H, 'x', 00H, 'a'
	DB	00H, 's', 00H, 'h', 00H, 'x', 00H, 't', 00H, '_', 00H, 'v', 00H
	DB	'0', 00H, '.', 00H, '8', 00H, '1', 00H, '_', 00H, 'r', 00H, 'e'
	DB	00H, 'v', 00H, '.', 00H, '1', 00H, '_', 00H, 'w', 00H, 'i', 00H
	DB	't', 00H, 'h', 00H, '_', 00H, 's', 00H, 'o', 00H, 'u', 00H, 'r'
	DB	00H, 'c', 00H, 'e', 00H, 's', 00H, '\', 00H, 'x', 00H, 'a', 00H
	DB	's', 00H, 'h', 00H, 'x', 00H, 't', 00H, '_', 00H, 'v', 00H, '0'
	DB	00H, '.', 00H, '8', 00H, '1', 00H, '_', 00H, 'r', 00H, 'e', 00H
	DB	'v', 00H, '.', 00H, '1', 00H, '_', 00H, 's', 00H, 'r', 00H, 'c'
	DB	00H, '\', 00H, 'g', 00H, 'a', 00H, 'm', 00H, 'e', 00H, '_', 00H
	DB	's', 00H, 'h', 00H, 'a', 00H, 'r', 00H, 'e', 00H, 'd', 00H, '\'
	DB	00H, 'u', 00H, 't', 00H, 'l', 00H, 'm', 00H, 'e', 00H, 'm', 00H
	DB	'o', 00H, 'r', 00H, 'y', 00H, '.', 00H, 'h', 00H, 00H, 00H
	ORG $+2
$SG74929 DB	'c', 00H, ':', 00H, '\', 00H, 'u', 00H, 's', 00H, 'e', 00H
	DB	'r', 00H, 's', 00H, '\', 00H, 'u', 00H, 's', 00H, 'e', 00H, 'r'
	DB	00H, '\', 00H, 'd', 00H, 'o', 00H, 'w', 00H, 'n', 00H, 'l', 00H
	DB	'o', 00H, 'a', 00H, 'd', 00H, 's', 00H, '\', 00H, 'x', 00H, 'a'
	DB	00H, 's', 00H, 'h', 00H, 'x', 00H, 't', 00H, '_', 00H, 'v', 00H
	DB	'0', 00H, '.', 00H, '8', 00H, '1', 00H, '_', 00H, 'r', 00H, 'e'
	DB	00H, 'v', 00H, '.', 00H, '1', 00H, '_', 00H, 'w', 00H, 'i', 00H
	DB	't', 00H, 'h', 00H, '_', 00H, 's', 00H, 'o', 00H, 'u', 00H, 'r'
	DB	00H, 'c', 00H, 'e', 00H, 's', 00H, '\', 00H, 'x', 00H, 'a', 00H
	DB	's', 00H, 'h', 00H, 'x', 00H, 't', 00H, '_', 00H, 'v', 00H, '0'
	DB	00H, '.', 00H, '8', 00H, '1', 00H, '_', 00H, 'r', 00H, 'e', 00H
	DB	'v', 00H, '.', 00H, '1', 00H, '_', 00H, 's', 00H, 'r', 00H, 'c'
	DB	00H, '\', 00H, 'g', 00H, 'a', 00H, 'm', 00H, 'e', 00H, '_', 00H
	DB	's', 00H, 'h', 00H, 'a', 00H, 'r', 00H, 'e', 00H, 'd', 00H, '\'
	DB	00H, 'u', 00H, 't', 00H, 'l', 00H, 'm', 00H, 'e', 00H, 'm', 00H
	DB	'o', 00H, 'r', 00H, 'y', 00H, '.', 00H, 'h', 00H, 00H, 00H
CONST	ENDS
PUBLIC	??_H@YGXPAXIIP6EPAX0@Z@Z			; `vector constructor iterator'
PUBLIC	??__G@YGXPAX0IIP6EPAX00@Z@Z			; `vector copy constructor iterator'
PUBLIC	??0Vector@@QAE@XZ				; Vector::Vector
PUBLIC	??0Vector@@QAE@MMM@Z				; Vector::Vector
PUBLIC	??0Vector@@QAE@ABV0@@Z				; Vector::Vector
PUBLIC	??HVector@@QBE?AV0@ABV0@@Z			; Vector::operator+
PUBLIC	??GVector@@QBE?AV0@ABV0@@Z			; Vector::operator-
PUBLIC	??DVector@@QBE?AV0@M@Z				; Vector::operator*
PUBLIC	??KVector@@QBE?AV0@M@Z				; Vector::operator/
PUBLIC	?Length@Vector@@QBEMXZ				; Vector::Length
PUBLIC	??0gametrace_s@@QAE@XZ				; gametrace_s::gametrace_s
PUBLIC	?GET_PRIVATE@@YAPAXPAUedict_s@@@Z		; GET_PRIVATE
PUBLIC	?ENT@@YAPAUedict_s@@PBUentvars_s@@@Z		; ENT
PUBLIC	?ENT@@YAPAUedict_s@@H@Z				; ENT
PUBLIC	?Instance@CBaseEntity@@SAPAV1@PAUedict_s@@@Z	; CBaseEntity::Instance
PUBLIC	?Instance@CBaseEntity@@SAPAV1@PAUentvars_s@@@Z	; CBaseEntity::Instance
PUBLIC	?VecCheckToss@@YA?AVVector@@PAUentvars_s@@ABV1@V1@M@Z ; VecCheckToss
PUBLIC	?VecCheckThrow@@YA?AVVector@@PAUentvars_s@@ABV1@V1@MM@Z ; VecCheckThrow
PUBLIC	?FBoxVisible@@YAHPAUentvars_s@@0AAVVector@@M@Z	; FBoxVisible
PUBLIC	__real@3f000000
PUBLIC	__real@3fb999999999999a
PUBLIC	__real@3fe0000000000000
PUBLIC	__real@3ff0000000000000
PUBLIC	__real@41000000
PUBLIC	__real@41700000
PUBLIC	__real@41800000
PUBLIC	__real@43fa0000
PUBLIC	__real@c1000000
PUBLIC	__real@c1800000
EXTRN	_sqrt:PROC
EXTRN	?DBG_EntOfVars@@YAPAUedict_s@@PBUentvars_s@@@Z:PROC ; DBG_EntOfVars
EXTRN	?UTIL_MakeVectors@@YAXABVVector@@@Z:PROC	; UTIL_MakeVectors
EXTRN	?UTIL_TraceLine@@YAXABVVector@@0W4IGNORE_MONSTERS@@PAUedict_s@@PAUgametrace_s@@@Z:PROC ; UTIL_TraceLine
EXTRN	?UTIL_TraceLine@@YAXABVVector@@0W4IGNORE_MONSTERS@@W4IGNORE_GLASS@@PAUedict_s@@PAUgametrace_s@@@Z:PROC ; UTIL_TraceLine
EXTRN	?GetAbsAngles@CBaseEntity@@QBEABVVector@@XZ:PROC ; CBaseEntity::GetAbsAngles
EXTRN	?g_vecZero@@3VVector@@B:BYTE			; g_vecZero
EXTRN	?g_engfuncs@@3Uenginefuncs_s@@A:BYTE		; g_engfuncs
EXTRN	?gpGlobals@@3PAUglobalvars_t@@A:DWORD		; gpGlobals
EXTRN	?g_psv_gravity@@3PAUcvar_s@@A:DWORD		; g_psv_gravity
EXTRN	__fltused:DWORD
;	COMDAT __real@c1800000
CONST	SEGMENT
__real@c1800000 DD 0c1800000r			; -16
CONST	ENDS
;	COMDAT __real@c1000000
CONST	SEGMENT
__real@c1000000 DD 0c1000000r			; -8
CONST	ENDS
;	COMDAT __real@43fa0000
CONST	SEGMENT
__real@43fa0000 DD 043fa0000r			; 500
CONST	ENDS
;	COMDAT __real@41800000
CONST	SEGMENT
__real@41800000 DD 041800000r			; 16
CONST	ENDS
;	COMDAT __real@41700000
CONST	SEGMENT
__real@41700000 DD 041700000r			; 15
CONST	ENDS
;	COMDAT __real@41000000
CONST	SEGMENT
__real@41000000 DD 041000000r			; 8
CONST	ENDS
;	COMDAT __real@3ff0000000000000
CONST	SEGMENT
__real@3ff0000000000000 DQ 03ff0000000000000r	; 1
CONST	ENDS
;	COMDAT __real@3fe0000000000000
CONST	SEGMENT
__real@3fe0000000000000 DQ 03fe0000000000000r	; 0.5
CONST	ENDS
;	COMDAT __real@3fb999999999999a
CONST	SEGMENT
__real@3fb999999999999a DQ 03fb999999999999ar	; 0.1
CONST	ENDS
;	COMDAT __real@3f000000
CONST	SEGMENT
__real@3f000000 DD 03f000000r			; 0.5
CONST	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xashxt_v0.81_rev.1_with_sources\xashxt_v0.81_rev.1_src\server\monsters\h_ai.cpp
_TEXT	SEGMENT
_tr$ = -96						; size = 56
_vecLookerOrigin$ = -40					; size = 12
_vecTarget$1 = -28					; size = 12
tv198 = -16						; size = 4
tv187 = -12						; size = 4
tv176 = -8						; size = 4
_i$2 = -4						; size = 4
_pevLooker$ = 8						; size = 4
_pevTarget$ = 12					; size = 4
_vecTargetOrigin$ = 16					; size = 4
_flSize$ = 20						; size = 4
?FBoxVisible@@YAHPAUentvars_s@@0AAVVector@@M@Z PROC	; FBoxVisible

; 49   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 96					; 00000060H

; 50   : 	// don't look through water
; 51   : 	if ((pevLooker->waterlevel != 3 && pevTarget->waterlevel == 3) 
; 52   : 		|| (pevLooker->waterlevel == 3 && pevTarget->waterlevel == 0))

	mov	eax, DWORD PTR _pevLooker$[ebp]
	cmp	DWORD PTR [eax+448], 3
	je	SHORT $LN7@FBoxVisibl
	mov	ecx, DWORD PTR _pevTarget$[ebp]
	cmp	DWORD PTR [ecx+448], 3
	je	SHORT $LN6@FBoxVisibl
$LN7@FBoxVisibl:
	mov	edx, DWORD PTR _pevLooker$[ebp]
	cmp	DWORD PTR [edx+448], 3
	jne	SHORT $LN5@FBoxVisibl
	mov	eax, DWORD PTR _pevTarget$[ebp]
	cmp	DWORD PTR [eax+448], 0
	jne	SHORT $LN5@FBoxVisibl
$LN6@FBoxVisibl:

; 53   : 		return FALSE;

	xor	eax, eax
	jmp	$LN1@FBoxVisibl
$LN5@FBoxVisibl:

; 54   : 
; 55   : 	TraceResult tr;

	lea	ecx, DWORD PTR _tr$[ebp]
	call	??0gametrace_s@@QAE@XZ

; 56   : 	Vector	vecLookerOrigin = pevLooker->origin + pevLooker->view_ofs;//look through the monster's 'eyes'

	mov	ecx, DWORD PTR _pevLooker$[ebp]
	add	ecx, 372				; 00000174H
	push	ecx
	lea	edx, DWORD PTR _vecLookerOrigin$[ebp]
	push	edx
	mov	ecx, DWORD PTR _pevLooker$[ebp]
	add	ecx, 8
	call	??HVector@@QBE?AV0@ABV0@@Z		; Vector::operator+

; 57   : 	for (int i = 0; i < 5; i++)

	mov	DWORD PTR _i$2[ebp], 0
	jmp	SHORT $LN4@FBoxVisibl
$LN2@FBoxVisibl:
	mov	eax, DWORD PTR _i$2[ebp]
	add	eax, 1
	mov	DWORD PTR _i$2[ebp], eax
$LN4@FBoxVisibl:
	cmp	DWORD PTR _i$2[ebp], 5
	jge	$LN3@FBoxVisibl

; 58   : 	{
; 59   : 		Vector vecTarget = pevTarget->origin;

	mov	ecx, DWORD PTR _pevTarget$[ebp]
	add	ecx, 8
	push	ecx
	lea	ecx, DWORD PTR _vecTarget$1[ebp]
	call	??0Vector@@QAE@ABV0@@Z			; Vector::Vector

; 60   : 		vecTarget.x += RANDOM_FLOAT( pevTarget->mins.x + flSize, pevTarget->maxs.x - flSize);

	mov	edx, DWORD PTR _pevTarget$[ebp]
	movss	xmm0, DWORD PTR [edx+232]
	subss	xmm0, DWORD PTR _flSize$[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _pevTarget$[ebp]
	movss	xmm0, DWORD PTR [eax+220]
	addss	xmm0, DWORD PTR _flSize$[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	DWORD PTR ?g_engfuncs@@3Uenginefuncs_s@@A+364
	add	esp, 8
	fstp	DWORD PTR tv176[ebp]
	movss	xmm0, DWORD PTR tv176[ebp]
	addss	xmm0, DWORD PTR _vecTarget$1[ebp]
	movss	DWORD PTR _vecTarget$1[ebp], xmm0

; 61   : 		vecTarget.y += RANDOM_FLOAT( pevTarget->mins.y + flSize, pevTarget->maxs.y - flSize);

	mov	ecx, DWORD PTR _pevTarget$[ebp]
	movss	xmm0, DWORD PTR [ecx+236]
	subss	xmm0, DWORD PTR _flSize$[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _pevTarget$[ebp]
	movss	xmm0, DWORD PTR [edx+224]
	addss	xmm0, DWORD PTR _flSize$[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	DWORD PTR ?g_engfuncs@@3Uenginefuncs_s@@A+364
	add	esp, 8
	fstp	DWORD PTR tv187[ebp]
	movss	xmm0, DWORD PTR tv187[ebp]
	addss	xmm0, DWORD PTR _vecTarget$1[ebp+4]
	movss	DWORD PTR _vecTarget$1[ebp+4], xmm0

; 62   : 		vecTarget.z += RANDOM_FLOAT( pevTarget->mins.z + flSize, pevTarget->maxs.z - flSize);

	mov	eax, DWORD PTR _pevTarget$[ebp]
	movss	xmm0, DWORD PTR [eax+240]
	subss	xmm0, DWORD PTR _flSize$[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _pevTarget$[ebp]
	movss	xmm0, DWORD PTR [ecx+228]
	addss	xmm0, DWORD PTR _flSize$[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	DWORD PTR ?g_engfuncs@@3Uenginefuncs_s@@A+364
	add	esp, 8
	fstp	DWORD PTR tv198[ebp]
	movss	xmm0, DWORD PTR tv198[ebp]
	addss	xmm0, DWORD PTR _vecTarget$1[ebp+8]
	movss	DWORD PTR _vecTarget$1[ebp+8], xmm0

; 63   : 
; 64   : 		UTIL_TraceLine(vecLookerOrigin, vecTarget, ignore_monsters, ignore_glass, ENT(pevLooker)/*pentIgnore*/, &tr);

	lea	edx, DWORD PTR _tr$[ebp]
	push	edx
	mov	eax, DWORD PTR _pevLooker$[ebp]
	push	eax
	call	?ENT@@YAPAUedict_s@@PBUentvars_s@@@Z	; ENT
	add	esp, 4
	push	eax
	push	1
	push	1
	lea	ecx, DWORD PTR _vecTarget$1[ebp]
	push	ecx
	lea	edx, DWORD PTR _vecLookerOrigin$[ebp]
	push	edx
	call	?UTIL_TraceLine@@YAXABVVector@@0W4IGNORE_MONSTERS@@W4IGNORE_GLASS@@PAUedict_s@@PAUgametrace_s@@@Z ; UTIL_TraceLine
	add	esp, 24					; 00000018H

; 65   : 		
; 66   : 		if (tr.flFraction == 1.0)

	cvtss2sd xmm0, DWORD PTR _tr$[ebp+16]
	ucomisd	xmm0, QWORD PTR __real@3ff0000000000000
	lahf
	test	ah, 68					; 00000044H
	jp	SHORT $LN8@FBoxVisibl

; 67   : 		{
; 68   : 			vecTargetOrigin = vecTarget;

	mov	eax, DWORD PTR _vecTargetOrigin$[ebp]
	mov	ecx, DWORD PTR _vecTarget$1[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _vecTarget$1[ebp+4]
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR _vecTarget$1[ebp+8]
	mov	DWORD PTR [eax+8], ecx

; 69   : 			return TRUE;// line of sight is valid.

	mov	eax, 1
	jmp	SHORT $LN1@FBoxVisibl
$LN8@FBoxVisibl:

; 70   : 		}
; 71   : 	}

	jmp	$LN2@FBoxVisibl
$LN3@FBoxVisibl:

; 72   : 	return FALSE;// Line of sight is not established

	xor	eax, eax
$LN1@FBoxVisibl:

; 73   : }

	mov	esp, ebp
	pop	ebp
	ret	0
?FBoxVisible@@YAHPAUentvars_s@@0AAVVector@@M@Z ENDP	; FBoxVisible
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xashxt_v0.81_rev.1_with_sources\xashxt_v0.81_rev.1_src\server\monsters\h_ai.cpp
_TEXT	SEGMENT
_tr$ = -128						; size = 56
$T1 = -72						; size = 12
$T2 = -60						; size = 12
$T3 = -48						; size = 12
_vecApex$ = -36						; size = 12
_vecGrenadeVel$ = -24					; size = 12
tv173 = -12						; size = 4
_flGravity$ = -8					; size = 4
_time$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
_pev$ = 12						; size = 4
_vecSpot1$ = 16						; size = 4
_vecSpot2$ = 20						; size = 12
_flSpeed$ = 32						; size = 4
_flGravityAdj$ = 36					; size = 4
?VecCheckThrow@@YA?AVVector@@PAUentvars_s@@ABV1@V1@MM@Z PROC ; VecCheckThrow

; 168  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 128				; 00000080H

; 169  : 	float			flGravity = g_psv_gravity->value * flGravityAdj;

	mov	eax, DWORD PTR ?g_psv_gravity@@3PAUcvar_s@@A ; g_psv_gravity
	movss	xmm0, DWORD PTR [eax+12]
	mulss	xmm0, DWORD PTR _flGravityAdj$[ebp]
	movss	DWORD PTR _flGravity$[ebp], xmm0

; 170  : 
; 171  : 	Vector vecGrenadeVel = (vecSpot2 - vecSpot1);

	mov	ecx, DWORD PTR _vecSpot1$[ebp]
	push	ecx
	lea	edx, DWORD PTR _vecGrenadeVel$[ebp]
	push	edx
	lea	ecx, DWORD PTR _vecSpot2$[ebp]
	call	??GVector@@QBE?AV0@ABV0@@Z		; Vector::operator-

; 172  : 
; 173  : 	// throw at a constant time
; 174  : 	float time = vecGrenadeVel.Length( ) / flSpeed;

	lea	ecx, DWORD PTR _vecGrenadeVel$[ebp]
	call	?Length@Vector@@QBEMXZ			; Vector::Length
	fstp	DWORD PTR tv173[ebp]
	movss	xmm0, DWORD PTR tv173[ebp]
	divss	xmm0, DWORD PTR _flSpeed$[ebp]
	movss	DWORD PTR _time$[ebp], xmm0

; 175  : 	vecGrenadeVel = vecGrenadeVel * (1.0 / time);

	cvtss2sd xmm0, DWORD PTR _time$[ebp]
	movsd	xmm1, QWORD PTR __real@3ff0000000000000
	divsd	xmm1, xmm0
	cvtsd2ss xmm0, xmm1
	push	ecx
	movss	DWORD PTR [esp], xmm0
	lea	eax, DWORD PTR $T3[ebp]
	push	eax
	lea	ecx, DWORD PTR _vecGrenadeVel$[ebp]
	call	??DVector@@QBE?AV0@M@Z			; Vector::operator*
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _vecGrenadeVel$[ebp], ecx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR _vecGrenadeVel$[ebp+4], edx
	mov	eax, DWORD PTR [eax+8]
	mov	DWORD PTR _vecGrenadeVel$[ebp+8], eax

; 176  : 
; 177  : 	// adjust upward toss to compensate for gravity loss
; 178  : 	vecGrenadeVel.z += flGravity * time * 0.5;

	movss	xmm0, DWORD PTR _flGravity$[ebp]
	mulss	xmm0, DWORD PTR _time$[ebp]
	cvtss2sd xmm0, xmm0
	mulsd	xmm0, QWORD PTR __real@3fe0000000000000
	cvtss2sd xmm1, DWORD PTR _vecGrenadeVel$[ebp+8]
	addsd	xmm1, xmm0
	cvtsd2ss xmm0, xmm1
	movss	DWORD PTR _vecGrenadeVel$[ebp+8], xmm0

; 179  : 
; 180  : 	Vector vecApex = vecSpot1 + (vecSpot2 - vecSpot1) * 0.5;

	push	ecx
	movss	xmm0, DWORD PTR __real@3f000000
	movss	DWORD PTR [esp], xmm0
	lea	ecx, DWORD PTR $T2[ebp]
	push	ecx
	mov	edx, DWORD PTR _vecSpot1$[ebp]
	push	edx
	lea	eax, DWORD PTR $T1[ebp]
	push	eax
	lea	ecx, DWORD PTR _vecSpot2$[ebp]
	call	??GVector@@QBE?AV0@ABV0@@Z		; Vector::operator-
	mov	ecx, eax
	call	??DVector@@QBE?AV0@M@Z			; Vector::operator*
	push	eax
	lea	ecx, DWORD PTR _vecApex$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _vecSpot1$[ebp]
	call	??HVector@@QBE?AV0@ABV0@@Z		; Vector::operator+

; 181  : 	vecApex.z += 0.5 * flGravity * (time * 0.5) * (time * 0.5);

	cvtss2sd xmm0, DWORD PTR _flGravity$[ebp]
	mulsd	xmm0, QWORD PTR __real@3fe0000000000000
	cvtss2sd xmm1, DWORD PTR _time$[ebp]
	mulsd	xmm1, QWORD PTR __real@3fe0000000000000
	mulsd	xmm0, xmm1
	cvtss2sd xmm1, DWORD PTR _time$[ebp]
	mulsd	xmm1, QWORD PTR __real@3fe0000000000000
	mulsd	xmm0, xmm1
	cvtss2sd xmm1, DWORD PTR _vecApex$[ebp+8]
	addsd	xmm1, xmm0
	cvtsd2ss xmm0, xmm1
	movss	DWORD PTR _vecApex$[ebp+8], xmm0

; 182  : 	
; 183  : 	TraceResult tr;

	lea	ecx, DWORD PTR _tr$[ebp]
	call	??0gametrace_s@@QAE@XZ

; 184  : 	UTIL_TraceLine(vecSpot1, vecApex, dont_ignore_monsters, ENT(pev), &tr);

	lea	edx, DWORD PTR _tr$[ebp]
	push	edx
	mov	eax, DWORD PTR _pev$[ebp]
	push	eax
	call	?ENT@@YAPAUedict_s@@PBUentvars_s@@@Z	; ENT
	add	esp, 4
	push	eax
	push	0
	lea	ecx, DWORD PTR _vecApex$[ebp]
	push	ecx
	mov	edx, DWORD PTR _vecSpot1$[ebp]
	push	edx
	call	?UTIL_TraceLine@@YAXABVVector@@0W4IGNORE_MONSTERS@@PAUedict_s@@PAUgametrace_s@@@Z ; UTIL_TraceLine
	add	esp, 20					; 00000014H

; 185  : 	if (tr.flFraction != 1.0)

	cvtss2sd xmm0, DWORD PTR _tr$[ebp+16]
	ucomisd	xmm0, QWORD PTR __real@3ff0000000000000
	lahf
	test	ah, 68					; 00000044H
	jnp	SHORT $LN2@VecCheckTh

; 186  : 	{
; 187  : 		// fail!
; 188  : 		return g_vecZero;

	push	OFFSET ?g_vecZero@@3VVector@@B		; g_vecZero
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0Vector@@QAE@ABV0@@Z			; Vector::Vector
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	SHORT $LN1@VecCheckTh
$LN2@VecCheckTh:

; 189  : 	}
; 190  : 
; 191  : 	UTIL_TraceLine(vecSpot2, vecApex, ignore_monsters, ENT(pev), &tr);

	lea	eax, DWORD PTR _tr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pev$[ebp]
	push	ecx
	call	?ENT@@YAPAUedict_s@@PBUentvars_s@@@Z	; ENT
	add	esp, 4
	push	eax
	push	1
	lea	edx, DWORD PTR _vecApex$[ebp]
	push	edx
	lea	eax, DWORD PTR _vecSpot2$[ebp]
	push	eax
	call	?UTIL_TraceLine@@YAXABVVector@@0W4IGNORE_MONSTERS@@PAUedict_s@@PAUgametrace_s@@@Z ; UTIL_TraceLine
	add	esp, 20					; 00000014H

; 192  : 	if (tr.flFraction != 1.0)

	cvtss2sd xmm0, DWORD PTR _tr$[ebp+16]
	ucomisd	xmm0, QWORD PTR __real@3ff0000000000000
	lahf
	test	ah, 68					; 00000044H
	jnp	SHORT $LN3@VecCheckTh

; 193  : 	{
; 194  : 		// fail!
; 195  : 		return g_vecZero;

	push	OFFSET ?g_vecZero@@3VVector@@B		; g_vecZero
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0Vector@@QAE@ABV0@@Z			; Vector::Vector
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	SHORT $LN1@VecCheckTh
$LN3@VecCheckTh:

; 196  : 	}
; 197  : 
; 198  : 	return vecGrenadeVel;

	lea	ecx, DWORD PTR _vecGrenadeVel$[ebp]
	push	ecx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0Vector@@QAE@ABV0@@Z			; Vector::Vector
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
$LN1@VecCheckTh:

; 199  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?VecCheckThrow@@YA?AVVector@@PAUentvars_s@@ABV1@V1@MM@Z ENDP ; VecCheckThrow
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xashxt_v0.81_rev.1_with_sources\xashxt_v0.81_rev.1_src\server\monsters\h_ai.cpp
_TEXT	SEGMENT
$T1 = -320						; size = 12
$T2 = -308						; size = 12
$T3 = -296						; size = 12
$T4 = -284						; size = 12
$T5 = -272						; size = 12
$T6 = -260						; size = 12
$T7 = -248						; size = 12
$T8 = -236						; size = 12
$T9 = -224						; size = 12
$T10 = -212						; size = 12
$T11 = -200						; size = 12
$T12 = -188						; size = 12
$T13 = -176						; size = 12
_vecTemp$ = -164					; size = 12
_vecScale$ = -152					; size = 12
_tr$ = -140						; size = 56
_time2$ = -84						; size = 4
_distance2$ = -80					; size = 4
_distance1$ = -76					; size = 4
tv339 = -72						; size = 4
tv494 = -68						; size = 4
tv331 = -64						; size = 4
tv309 = -60						; size = 4
tv492 = -56						; size = 4
tv301 = -52						; size = 4
_pEnt$ = -48						; size = 4
_vecGrenadeVel$ = -44					; size = 12
_vecApex$ = -32						; size = 12
_flGravity$ = -20					; size = 4
_time1$ = -16						; size = 4
_vecMidPoint$ = -12					; size = 12
___$ReturnUdt$ = 8					; size = 4
_pev$ = 12						; size = 4
_vecSpot1$ = 16						; size = 4
_vecSpot2$ = 20						; size = 12
_flGravityAdj$ = 32					; size = 4
?VecCheckToss@@YA?AVVector@@PAUentvars_s@@ABV1@V1@M@Z PROC ; VecCheckToss

; 80   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 320				; 00000140H

; 81   : 	TraceResult		tr;

	lea	ecx, DWORD PTR _tr$[ebp]
	call	??0gametrace_s@@QAE@XZ

; 82   : 	Vector			vecMidPoint;// halfway point between Spot1 and Spot2

	lea	ecx, DWORD PTR _vecMidPoint$[ebp]
	call	??0Vector@@QAE@XZ			; Vector::Vector

; 83   : 	Vector			vecApex;// highest point 

	lea	ecx, DWORD PTR _vecApex$[ebp]
	call	??0Vector@@QAE@XZ			; Vector::Vector

; 84   : 	Vector			vecScale;

	lea	ecx, DWORD PTR _vecScale$[ebp]
	call	??0Vector@@QAE@XZ			; Vector::Vector

; 85   : 	Vector			vecGrenadeVel;

	lea	ecx, DWORD PTR _vecGrenadeVel$[ebp]
	call	??0Vector@@QAE@XZ			; Vector::Vector

; 86   : 	Vector			vecTemp;

	lea	ecx, DWORD PTR _vecTemp$[ebp]
	call	??0Vector@@QAE@XZ			; Vector::Vector

; 87   : 	float			flGravity = g_psv_gravity->value * flGravityAdj;

	mov	eax, DWORD PTR ?g_psv_gravity@@3PAUcvar_s@@A ; g_psv_gravity
	movss	xmm0, DWORD PTR [eax+12]
	mulss	xmm0, DWORD PTR _flGravityAdj$[ebp]
	movss	DWORD PTR _flGravity$[ebp], xmm0

; 88   : 
; 89   : 	if (vecSpot2.z - vecSpot1.z > 500)

	mov	ecx, DWORD PTR _vecSpot1$[ebp]
	movss	xmm0, DWORD PTR _vecSpot2$[ebp+8]
	subss	xmm0, DWORD PTR [ecx+8]
	comiss	xmm0, DWORD PTR __real@43fa0000
	jbe	SHORT $LN2@VecCheckTo

; 90   : 	{
; 91   : 		// to high, fail
; 92   : 		return g_vecZero;

	push	OFFSET ?g_vecZero@@3VVector@@B		; g_vecZero
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0Vector@@QAE@ABV0@@Z			; Vector::Vector
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	$LN1@VecCheckTo
$LN2@VecCheckTo:

; 93   : 	}
; 94   : 
; 95   : 	CBaseEntity *pEnt = CBaseEntity::Instance(pev);

	mov	edx, DWORD PTR _pev$[ebp]
	push	edx
	call	?Instance@CBaseEntity@@SAPAV1@PAUentvars_s@@@Z ; CBaseEntity::Instance
	add	esp, 4
	mov	DWORD PTR _pEnt$[ebp], eax

; 96   : 
; 97   : 	UTIL_MakeVectors (pEnt->GetAbsAngles());

	mov	ecx, DWORD PTR _pEnt$[ebp]
	call	?GetAbsAngles@CBaseEntity@@QBEABVVector@@XZ ; CBaseEntity::GetAbsAngles
	push	eax
	call	?UTIL_MakeVectors@@YAXABVVector@@@Z	; UTIL_MakeVectors
	add	esp, 4

; 98   : 
; 99   : 	// toss a little bit to the left or right, not right down on the enemy's bean (head). 
; 100  : 	vecSpot2 = vecSpot2 + gpGlobals->v_right * ( RANDOM_FLOAT(-8,8) + RANDOM_FLOAT(-16,16) );

	push	ecx
	movss	xmm0, DWORD PTR __real@41000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@c1000000
	movss	DWORD PTR [esp], xmm0
	call	DWORD PTR ?g_engfuncs@@3Uenginefuncs_s@@A+364
	add	esp, 8
	fstp	DWORD PTR tv301[ebp]
	movss	xmm0, DWORD PTR tv301[ebp]
	push	ecx
	movss	xmm1, DWORD PTR __real@41800000
	movss	DWORD PTR [esp], xmm1
	push	ecx
	movss	xmm1, DWORD PTR __real@c1800000
	movss	DWORD PTR [esp], xmm1
	movss	DWORD PTR tv492[ebp], xmm0
	call	DWORD PTR ?g_engfuncs@@3Uenginefuncs_s@@A+364
	add	esp, 8
	fstp	DWORD PTR tv309[ebp]
	movss	xmm0, DWORD PTR tv492[ebp]
	addss	xmm0, DWORD PTR tv309[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	lea	eax, DWORD PTR $T13[ebp]
	push	eax
	mov	ecx, DWORD PTR ?gpGlobals@@3PAUglobalvars_t@@A ; gpGlobals
	add	ecx, 64					; 00000040H
	call	??DVector@@QBE?AV0@M@Z			; Vector::operator*
	push	eax
	lea	ecx, DWORD PTR $T12[ebp]
	push	ecx
	lea	ecx, DWORD PTR _vecSpot2$[ebp]
	call	??HVector@@QBE?AV0@ABV0@@Z		; Vector::operator+
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR _vecSpot2$[ebp], edx
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _vecSpot2$[ebp+4], ecx
	mov	edx, DWORD PTR [eax+8]
	mov	DWORD PTR _vecSpot2$[ebp+8], edx

; 101  : 	vecSpot2 = vecSpot2 + gpGlobals->v_forward * ( RANDOM_FLOAT(-8,8) + RANDOM_FLOAT(-16,16) );

	push	ecx
	movss	xmm0, DWORD PTR __real@41000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@c1000000
	movss	DWORD PTR [esp], xmm0
	call	DWORD PTR ?g_engfuncs@@3Uenginefuncs_s@@A+364
	add	esp, 8
	fstp	DWORD PTR tv331[ebp]
	movss	xmm0, DWORD PTR tv331[ebp]
	push	ecx
	movss	xmm1, DWORD PTR __real@41800000
	movss	DWORD PTR [esp], xmm1
	push	ecx
	movss	xmm1, DWORD PTR __real@c1800000
	movss	DWORD PTR [esp], xmm1
	movss	DWORD PTR tv494[ebp], xmm0
	call	DWORD PTR ?g_engfuncs@@3Uenginefuncs_s@@A+364
	add	esp, 8
	fstp	DWORD PTR tv339[ebp]
	movss	xmm0, DWORD PTR tv494[ebp]
	addss	xmm0, DWORD PTR tv339[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	lea	eax, DWORD PTR $T11[ebp]
	push	eax
	mov	ecx, DWORD PTR ?gpGlobals@@3PAUglobalvars_t@@A ; gpGlobals
	add	ecx, 40					; 00000028H
	call	??DVector@@QBE?AV0@M@Z			; Vector::operator*
	push	eax
	lea	ecx, DWORD PTR $T10[ebp]
	push	ecx
	lea	ecx, DWORD PTR _vecSpot2$[ebp]
	call	??HVector@@QBE?AV0@ABV0@@Z		; Vector::operator+
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR _vecSpot2$[ebp], edx
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _vecSpot2$[ebp+4], ecx
	mov	edx, DWORD PTR [eax+8]
	mov	DWORD PTR _vecSpot2$[ebp+8], edx

; 102  : 	
; 103  : 	// calculate the midpoint and apex of the 'triangle'
; 104  : 	// UNDONE: normalize any Z position differences between spot1 and spot2 so that triangle is always RIGHT
; 105  : 
; 106  : 	// How much time does it take to get there?
; 107  : 
; 108  : 	// get a rough idea of how high it can be thrown
; 109  : 	vecMidPoint = vecSpot1 + (vecSpot2 - vecSpot1) * 0.5;

	push	ecx
	movss	xmm0, DWORD PTR __real@3f000000
	movss	DWORD PTR [esp], xmm0
	lea	eax, DWORD PTR $T9[ebp]
	push	eax
	mov	ecx, DWORD PTR _vecSpot1$[ebp]
	push	ecx
	lea	edx, DWORD PTR $T8[ebp]
	push	edx
	lea	ecx, DWORD PTR _vecSpot2$[ebp]
	call	??GVector@@QBE?AV0@ABV0@@Z		; Vector::operator-
	mov	ecx, eax
	call	??DVector@@QBE?AV0@M@Z			; Vector::operator*
	push	eax
	lea	eax, DWORD PTR $T7[ebp]
	push	eax
	mov	ecx, DWORD PTR _vecSpot1$[ebp]
	call	??HVector@@QBE?AV0@ABV0@@Z		; Vector::operator+
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _vecMidPoint$[ebp], ecx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR _vecMidPoint$[ebp+4], edx
	mov	eax, DWORD PTR [eax+8]
	mov	DWORD PTR _vecMidPoint$[ebp+8], eax

; 110  : 	UTIL_TraceLine(vecMidPoint, vecMidPoint + Vector(0,0,500), ignore_monsters, ENT(pev), &tr);

	lea	ecx, DWORD PTR _tr$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pev$[ebp]
	push	edx
	call	?ENT@@YAPAUedict_s@@PBUentvars_s@@@Z	; ENT
	add	esp, 4
	push	eax
	push	1
	push	ecx
	movss	xmm0, DWORD PTR __real@43fa0000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	xorps	xmm0, xmm0
	movss	DWORD PTR [esp], xmm0
	push	ecx
	xorps	xmm0, xmm0
	movss	DWORD PTR [esp], xmm0
	lea	ecx, DWORD PTR $T6[ebp]
	call	??0Vector@@QAE@MMM@Z			; Vector::Vector
	push	eax
	lea	eax, DWORD PTR $T5[ebp]
	push	eax
	lea	ecx, DWORD PTR _vecMidPoint$[ebp]
	call	??HVector@@QBE?AV0@ABV0@@Z		; Vector::operator+
	push	eax
	lea	ecx, DWORD PTR _vecMidPoint$[ebp]
	push	ecx
	call	?UTIL_TraceLine@@YAXABVVector@@0W4IGNORE_MONSTERS@@PAUedict_s@@PAUgametrace_s@@@Z ; UTIL_TraceLine
	add	esp, 20					; 00000014H

; 111  : 	vecMidPoint = tr.vecEndPos;

	mov	edx, DWORD PTR _tr$[ebp+20]
	mov	DWORD PTR _vecMidPoint$[ebp], edx
	mov	eax, DWORD PTR _tr$[ebp+24]
	mov	DWORD PTR _vecMidPoint$[ebp+4], eax
	mov	ecx, DWORD PTR _tr$[ebp+28]
	mov	DWORD PTR _vecMidPoint$[ebp+8], ecx

; 112  : 	// (subtract 15 so the grenade doesn't hit the ceiling)
; 113  : 	vecMidPoint.z -= 15;

	movss	xmm0, DWORD PTR _vecMidPoint$[ebp+8]
	subss	xmm0, DWORD PTR __real@41700000
	movss	DWORD PTR _vecMidPoint$[ebp+8], xmm0

; 114  : 
; 115  : 	if (vecMidPoint.z < vecSpot1.z || vecMidPoint.z < vecSpot2.z)

	mov	edx, DWORD PTR _vecSpot1$[ebp]
	movss	xmm0, DWORD PTR [edx+8]
	comiss	xmm0, DWORD PTR _vecMidPoint$[ebp+8]
	ja	SHORT $LN4@VecCheckTo
	movss	xmm0, DWORD PTR _vecSpot2$[ebp+8]
	comiss	xmm0, DWORD PTR _vecMidPoint$[ebp+8]
	jbe	SHORT $LN3@VecCheckTo
$LN4@VecCheckTo:

; 116  : 	{
; 117  : 		// to not enough space, fail
; 118  : 		return g_vecZero;

	push	OFFSET ?g_vecZero@@3VVector@@B		; g_vecZero
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0Vector@@QAE@ABV0@@Z			; Vector::Vector
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	$LN1@VecCheckTo
$LN3@VecCheckTo:

; 119  : 	}
; 120  : 
; 121  : 	// How high should the grenade travel to reach the apex
; 122  : 	float distance1 = (vecMidPoint.z - vecSpot1.z);

	mov	eax, DWORD PTR _vecSpot1$[ebp]
	movss	xmm0, DWORD PTR _vecMidPoint$[ebp+8]
	subss	xmm0, DWORD PTR [eax+8]
	movss	DWORD PTR _distance1$[ebp], xmm0

; 123  : 	float distance2 = (vecMidPoint.z - vecSpot2.z);

	movss	xmm0, DWORD PTR _vecMidPoint$[ebp+8]
	subss	xmm0, DWORD PTR _vecSpot2$[ebp+8]
	movss	DWORD PTR _distance2$[ebp], xmm0

; 124  : 
; 125  : 	// How long will it take for the grenade to travel this distance
; 126  : 	float time1 = sqrt( distance1 / (0.5 * flGravity) );

	cvtss2sd xmm0, DWORD PTR _distance1$[ebp]
	cvtss2sd xmm1, DWORD PTR _flGravity$[ebp]
	mulsd	xmm1, QWORD PTR __real@3fe0000000000000
	divsd	xmm0, xmm1
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	call	_sqrt
	add	esp, 8
	fstp	DWORD PTR _time1$[ebp]

; 127  : 	float time2 = sqrt( distance2 / (0.5 * flGravity) );

	cvtss2sd xmm0, DWORD PTR _distance2$[ebp]
	cvtss2sd xmm1, DWORD PTR _flGravity$[ebp]
	mulsd	xmm1, QWORD PTR __real@3fe0000000000000
	divsd	xmm0, xmm1
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	call	_sqrt
	add	esp, 8
	fstp	DWORD PTR _time2$[ebp]

; 128  : 
; 129  : 	if (time1 < 0.1)

	cvtss2sd xmm0, DWORD PTR _time1$[ebp]
	movsd	xmm1, QWORD PTR __real@3fb999999999999a
	comisd	xmm1, xmm0
	jbe	SHORT $LN5@VecCheckTo

; 130  : 	{
; 131  : 		// too close
; 132  : 		return g_vecZero;

	push	OFFSET ?g_vecZero@@3VVector@@B		; g_vecZero
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0Vector@@QAE@ABV0@@Z			; Vector::Vector
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	$LN1@VecCheckTo
$LN5@VecCheckTo:

; 133  : 	}
; 134  : 
; 135  : 	// how hard to throw sideways to get there in time.
; 136  : 	vecGrenadeVel = (vecSpot2 - vecSpot1) / (time1 + time2);

	movss	xmm0, DWORD PTR _time1$[ebp]
	addss	xmm0, DWORD PTR _time2$[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	lea	ecx, DWORD PTR $T4[ebp]
	push	ecx
	mov	edx, DWORD PTR _vecSpot1$[ebp]
	push	edx
	lea	eax, DWORD PTR $T3[ebp]
	push	eax
	lea	ecx, DWORD PTR _vecSpot2$[ebp]
	call	??GVector@@QBE?AV0@ABV0@@Z		; Vector::operator-
	mov	ecx, eax
	call	??KVector@@QBE?AV0@M@Z			; Vector::operator/
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _vecGrenadeVel$[ebp], ecx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR _vecGrenadeVel$[ebp+4], edx
	mov	eax, DWORD PTR [eax+8]
	mov	DWORD PTR _vecGrenadeVel$[ebp+8], eax

; 137  : 	// how hard upwards to reach the apex at the right time.
; 138  : 	vecGrenadeVel.z = flGravity * time1;

	movss	xmm0, DWORD PTR _flGravity$[ebp]
	mulss	xmm0, DWORD PTR _time1$[ebp]
	movss	DWORD PTR _vecGrenadeVel$[ebp+8], xmm0

; 139  : 
; 140  : 	// find the apex
; 141  : 	vecApex  = vecSpot1 + vecGrenadeVel * time1;

	push	ecx
	movss	xmm0, DWORD PTR _time1$[ebp]
	movss	DWORD PTR [esp], xmm0
	lea	ecx, DWORD PTR $T2[ebp]
	push	ecx
	lea	ecx, DWORD PTR _vecGrenadeVel$[ebp]
	call	??DVector@@QBE?AV0@M@Z			; Vector::operator*
	push	eax
	lea	edx, DWORD PTR $T1[ebp]
	push	edx
	mov	ecx, DWORD PTR _vecSpot1$[ebp]
	call	??HVector@@QBE?AV0@ABV0@@Z		; Vector::operator+
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _vecApex$[ebp], ecx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR _vecApex$[ebp+4], edx
	mov	eax, DWORD PTR [eax+8]
	mov	DWORD PTR _vecApex$[ebp+8], eax

; 142  : 	vecApex.z = vecMidPoint.z;

	movss	xmm0, DWORD PTR _vecMidPoint$[ebp+8]
	movss	DWORD PTR _vecApex$[ebp+8], xmm0

; 143  : 
; 144  : 	UTIL_TraceLine(vecSpot1, vecApex, dont_ignore_monsters, ENT(pev), &tr);

	lea	ecx, DWORD PTR _tr$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pev$[ebp]
	push	edx
	call	?ENT@@YAPAUedict_s@@PBUentvars_s@@@Z	; ENT
	add	esp, 4
	push	eax
	push	0
	lea	eax, DWORD PTR _vecApex$[ebp]
	push	eax
	mov	ecx, DWORD PTR _vecSpot1$[ebp]
	push	ecx
	call	?UTIL_TraceLine@@YAXABVVector@@0W4IGNORE_MONSTERS@@PAUedict_s@@PAUgametrace_s@@@Z ; UTIL_TraceLine
	add	esp, 20					; 00000014H

; 145  : 	if (tr.flFraction != 1.0)

	cvtss2sd xmm0, DWORD PTR _tr$[ebp+16]
	ucomisd	xmm0, QWORD PTR __real@3ff0000000000000
	lahf
	test	ah, 68					; 00000044H
	jnp	SHORT $LN6@VecCheckTo

; 146  : 	{
; 147  : 		// fail!
; 148  : 		return g_vecZero;

	push	OFFSET ?g_vecZero@@3VVector@@B		; g_vecZero
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0Vector@@QAE@ABV0@@Z			; Vector::Vector
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	SHORT $LN1@VecCheckTo
$LN6@VecCheckTo:

; 149  : 	}
; 150  : 
; 151  : 	// UNDONE: either ignore monsters or change it to not care if we hit our enemy
; 152  : 	UTIL_TraceLine(vecSpot2, vecApex, ignore_monsters, ENT(pev), &tr); 

	lea	edx, DWORD PTR _tr$[ebp]
	push	edx
	mov	eax, DWORD PTR _pev$[ebp]
	push	eax
	call	?ENT@@YAPAUedict_s@@PBUentvars_s@@@Z	; ENT
	add	esp, 4
	push	eax
	push	1
	lea	ecx, DWORD PTR _vecApex$[ebp]
	push	ecx
	lea	edx, DWORD PTR _vecSpot2$[ebp]
	push	edx
	call	?UTIL_TraceLine@@YAXABVVector@@0W4IGNORE_MONSTERS@@PAUedict_s@@PAUgametrace_s@@@Z ; UTIL_TraceLine
	add	esp, 20					; 00000014H

; 153  : 	if (tr.flFraction != 1.0)

	cvtss2sd xmm0, DWORD PTR _tr$[ebp+16]
	ucomisd	xmm0, QWORD PTR __real@3ff0000000000000
	lahf
	test	ah, 68					; 00000044H
	jnp	SHORT $LN7@VecCheckTo

; 154  : 	{
; 155  : 		// fail!
; 156  : 		return g_vecZero;

	push	OFFSET ?g_vecZero@@3VVector@@B		; g_vecZero
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0Vector@@QAE@ABV0@@Z			; Vector::Vector
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	SHORT $LN1@VecCheckTo
$LN7@VecCheckTo:

; 157  : 	}
; 158  : 	
; 159  : 	return vecGrenadeVel;

	lea	eax, DWORD PTR _vecGrenadeVel$[ebp]
	push	eax
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0Vector@@QAE@ABV0@@Z			; Vector::Vector
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
$LN1@VecCheckTo:

; 160  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?VecCheckToss@@YA?AVVector@@PAUentvars_s@@ABV1@V1@M@Z ENDP ; VecCheckToss
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xashxt_v0.81_rev.1_with_sources\xashxt_v0.81_rev.1_src\server\cbase.h
;	COMDAT ?Instance@CBaseEntity@@SAPAV1@PAUentvars_s@@@Z
_TEXT	SEGMENT
_pev$ = 8						; size = 4
?Instance@CBaseEntity@@SAPAV1@PAUentvars_s@@@Z PROC	; CBaseEntity::Instance, COMDAT

; 519  : 	static CBaseEntity *Instance( entvars_t *pev ) { return Instance( ENT( pev ) ); }

	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR _pev$[ebp]
	push	eax
	call	?ENT@@YAPAUedict_s@@PBUentvars_s@@@Z	; ENT
	add	esp, 4
	push	eax
	call	?Instance@CBaseEntity@@SAPAV1@PAUedict_s@@@Z ; CBaseEntity::Instance
	add	esp, 4
	pop	ebp
	ret	0
?Instance@CBaseEntity@@SAPAV1@PAUentvars_s@@@Z ENDP	; CBaseEntity::Instance
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xashxt_v0.81_rev.1_with_sources\xashxt_v0.81_rev.1_src\server\cbase.h
;	COMDAT ?Instance@CBaseEntity@@SAPAV1@PAUedict_s@@@Z
_TEXT	SEGMENT
_pEnt$ = -4						; size = 4
_pent$ = 8						; size = 4
?Instance@CBaseEntity@@SAPAV1@PAUedict_s@@@Z PROC	; CBaseEntity::Instance, COMDAT

; 512  : 	{ 

	push	ebp
	mov	ebp, esp
	push	ecx

; 513  : 		if ( !pent )

	cmp	DWORD PTR _pent$[ebp], 0
	jne	SHORT $LN2@Instance

; 514  : 			pent = ENT(0);

	push	0
	call	?ENT@@YAPAUedict_s@@H@Z			; ENT
	add	esp, 4
	mov	DWORD PTR _pent$[ebp], eax
$LN2@Instance:

; 515  : 		CBaseEntity *pEnt = (CBaseEntity *)GET_PRIVATE(pent); 

	mov	eax, DWORD PTR _pent$[ebp]
	push	eax
	call	?GET_PRIVATE@@YAPAXPAUedict_s@@@Z	; GET_PRIVATE
	add	esp, 4
	mov	DWORD PTR _pEnt$[ebp], eax

; 516  : 		return pEnt; 

	mov	eax, DWORD PTR _pEnt$[ebp]

; 517  : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
?Instance@CBaseEntity@@SAPAV1@PAUedict_s@@@Z ENDP	; CBaseEntity::Instance
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xashxt_v0.81_rev.1_with_sources\xashxt_v0.81_rev.1_src\server\util.h
;	COMDAT ?ENT@@YAPAUedict_s@@H@Z
_TEXT	SEGMENT
_eoffset$ = 8						; size = 4
?ENT@@YAPAUedict_s@@H@Z PROC				; ENT, COMDAT

; 157  : inline edict_t *ENT(EOFFSET eoffset)			{ return (*g_engfuncs.pfnPEntityOfEntOffset)(eoffset); }

	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR _eoffset$[ebp]
	push	eax
	call	DWORD PTR ?g_engfuncs@@3Uenginefuncs_s@@A+276
	add	esp, 4
	pop	ebp
	ret	0
?ENT@@YAPAUedict_s@@H@Z ENDP				; ENT
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xashxt_v0.81_rev.1_with_sources\xashxt_v0.81_rev.1_src\server\util.h
;	COMDAT ?ENT@@YAPAUedict_s@@PBUentvars_s@@@Z
_TEXT	SEGMENT
_pev$ = 8						; size = 4
?ENT@@YAPAUedict_s@@PBUentvars_s@@@Z PROC		; ENT, COMDAT

; 151  : 	inline edict_t *ENT(const entvars_t *pev)	{ return DBG_EntOfVars(pev); }

	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR _pev$[ebp]
	push	eax
	call	?DBG_EntOfVars@@YAPAUedict_s@@PBUentvars_s@@@Z ; DBG_EntOfVars
	add	esp, 4
	pop	ebp
	ret	0
?ENT@@YAPAUedict_s@@PBUentvars_s@@@Z ENDP		; ENT
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xashxt_v0.81_rev.1_with_sources\xashxt_v0.81_rev.1_src\server\enginecallback.h
;	COMDAT ?GET_PRIVATE@@YAPAXPAUedict_s@@@Z
_TEXT	SEGMENT
_pent$ = 8						; size = 4
?GET_PRIVATE@@YAPAXPAUedict_s@@@Z PROC			; GET_PRIVATE, COMDAT

; 101  : {

	push	ebp
	mov	ebp, esp

; 102  : 	if ( pent )

	cmp	DWORD PTR _pent$[ebp], 0
	je	SHORT $LN2@GET_PRIVAT

; 103  : 		return pent->pvPrivateData;

	mov	eax, DWORD PTR _pent$[ebp]
	mov	eax, DWORD PTR [eax+124]
	jmp	SHORT $LN1@GET_PRIVAT
$LN2@GET_PRIVAT:

; 104  : 	return NULL;

	xor	eax, eax
$LN1@GET_PRIVAT:

; 105  : }

	pop	ebp
	ret	0
?GET_PRIVATE@@YAPAXPAUedict_s@@@Z ENDP			; GET_PRIVATE
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??0gametrace_s@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0gametrace_s@@QAE@XZ PROC				; gametrace_s::gametrace_s, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 20					; 00000014H
	call	??0Vector@@QAE@XZ			; Vector::Vector
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 36					; 00000024H
	call	??0Vector@@QAE@XZ			; Vector::Vector
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0gametrace_s@@QAE@XZ ENDP				; gametrace_s::gametrace_s
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xashxt_v0.81_rev.1_with_sources\xashxt_v0.81_rev.1_src\game_shared\vector.h
;	COMDAT ?Length@Vector@@QBEMXZ
_TEXT	SEGMENT
tv91 = -8						; size = 4
_this$ = -4						; size = 4
?Length@Vector@@QBEMXZ PROC				; Vector::Length, COMDAT
; _this$ = ecx

; 223  : 	inline float Length(void) const		{ return sqrt( x*x + y*y + z*z ); }

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR [ecx]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [edx+4]
	mulss	xmm1, DWORD PTR [eax+4]
	addss	xmm0, xmm1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [ecx+8]
	mulss	xmm1, DWORD PTR [edx+8]
	addss	xmm0, xmm1
	cvtss2sd xmm0, xmm0
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	call	_sqrt
	add	esp, 8
	fstp	DWORD PTR tv91[ebp]
	fld	DWORD PTR tv91[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
?Length@Vector@@QBEMXZ ENDP				; Vector::Length
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xashxt_v0.81_rev.1_with_sources\xashxt_v0.81_rev.1_src\game_shared\vector.h
;	COMDAT ??KVector@@QBE?AV0@M@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
_fl$ = 12						; size = 4
??KVector@@QBE?AV0@M@Z PROC				; Vector::operator/, COMDAT
; _this$ = ecx

; 151  : 	inline Vector operator/(float fl) const		{ return Vector(x/fl, y/fl, z/fl);	   }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+8]
	divss	xmm0, DWORD PTR _fl$[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+4]
	divss	xmm0, DWORD PTR _fl$[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx]
	divss	xmm0, DWORD PTR _fl$[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0Vector@@QAE@MMM@Z			; Vector::Vector
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	8
??KVector@@QBE?AV0@M@Z ENDP				; Vector::operator/
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xashxt_v0.81_rev.1_with_sources\xashxt_v0.81_rev.1_src\game_shared\vector.h
;	COMDAT ??DVector@@QBE?AV0@M@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
_fl$ = 12						; size = 4
??DVector@@QBE?AV0@M@Z PROC				; Vector::operator*, COMDAT
; _this$ = ecx

; 150  : 	inline Vector operator*(float fl) const		{ return Vector(x*fl, y*fl, z*fl);	   }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+8]
	mulss	xmm0, DWORD PTR _fl$[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+4]
	mulss	xmm0, DWORD PTR _fl$[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx]
	mulss	xmm0, DWORD PTR _fl$[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0Vector@@QAE@MMM@Z			; Vector::Vector
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	8
??DVector@@QBE?AV0@M@Z ENDP				; Vector::operator*
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xashxt_v0.81_rev.1_with_sources\xashxt_v0.81_rev.1_src\game_shared\vector.h
;	COMDAT ??GVector@@QBE?AV0@ABV0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
_v$ = 12						; size = 4
??GVector@@QBE?AV0@ABV0@@Z PROC				; Vector::operator-, COMDAT
; _this$ = ecx

; 147  : 	inline Vector operator-(const Vector& v) const	{ return Vector(x-v.x, y-v.y, z-v.z);	   }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [eax+8]
	subss	xmm0, DWORD PTR [ecx+8]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [edx+4]
	subss	xmm0, DWORD PTR [eax+4]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [ecx]
	subss	xmm0, DWORD PTR [edx]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0Vector@@QAE@MMM@Z			; Vector::Vector
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	8
??GVector@@QBE?AV0@ABV0@@Z ENDP				; Vector::operator-
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xashxt_v0.81_rev.1_with_sources\xashxt_v0.81_rev.1_src\game_shared\vector.h
;	COMDAT ??HVector@@QBE?AV0@ABV0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
_v$ = 12						; size = 4
??HVector@@QBE?AV0@ABV0@@Z PROC				; Vector::operator+, COMDAT
; _this$ = ecx

; 146  : 	inline Vector operator+(const Vector& v) const	{ return Vector(x+v.x, y+v.y, z+v.z);	   }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [eax+8]
	addss	xmm0, DWORD PTR [ecx+8]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [edx+4]
	addss	xmm0, DWORD PTR [eax+4]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [ecx]
	addss	xmm0, DWORD PTR [edx]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0Vector@@QAE@MMM@Z			; Vector::Vector
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	8
??HVector@@QBE?AV0@ABV0@@Z ENDP				; Vector::operator+
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xashxt_v0.81_rev.1_with_sources\xashxt_v0.81_rev.1_src\game_shared\vector.h
;	COMDAT ??0Vector@@QAE@ABV0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_v$ = 8							; size = 4
??0Vector@@QAE@ABV0@@Z PROC				; Vector::Vector, COMDAT
; _this$ = ecx

; 133  : 	inline Vector(const Vector& v)		{ x = v.x; y = v.y; z = v.z;		   }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _v$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _v$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _v$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR [eax+8], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0Vector@@QAE@ABV0@@Z ENDP				; Vector::Vector
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xashxt_v0.81_rev.1_with_sources\xashxt_v0.81_rev.1_src\game_shared\vector.h
;	COMDAT ??0Vector@@QAE@MMM@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_X$ = 8							; size = 4
_Y$ = 12						; size = 4
_Z$ = 16						; size = 4
??0Vector@@QAE@MMM@Z PROC				; Vector::Vector, COMDAT
; _this$ = ecx

; 132  : 	inline Vector(float X, float Y, float Z)	{ x = X; y = Y; z = Z;                     }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _X$[ebp]
	movss	DWORD PTR [eax], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _Y$[ebp]
	movss	DWORD PTR [ecx+4], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _Z$[ebp]
	movss	DWORD PTR [edx+8], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
??0Vector@@QAE@MMM@Z ENDP				; Vector::Vector
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xashxt_v0.81_rev.1_with_sources\xashxt_v0.81_rev.1_src\game_shared\vector.h
;	COMDAT ??0Vector@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0Vector@@QAE@XZ PROC					; Vector::Vector, COMDAT
; _this$ = ecx

; 131  : 	inline Vector(void)				{ }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0Vector@@QAE@XZ ENDP					; Vector::Vector
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??__G@YGXPAX0IIP6EPAX00@Z@Z
_TEXT	SEGMENT
tv66 = -4						; size = 4
___t$ = 8						; size = 4
___u$ = 12						; size = 4
___s$ = 16						; size = 4
___n$ = 20						; size = 4
___f$ = 24						; size = 4
??__G@YGXPAX0IIP6EPAX00@Z@Z PROC			; `vector copy constructor iterator', COMDAT
	push	ebp
	mov	ebp, esp
	push	ecx
$LN2@vector:
	mov	eax, DWORD PTR ___n$[ebp]
	mov	DWORD PTR tv66[ebp], eax
	mov	ecx, DWORD PTR ___n$[ebp]
	sub	ecx, 1
	mov	DWORD PTR ___n$[ebp], ecx
	cmp	DWORD PTR tv66[ebp], 0
	jbe	SHORT $LN1@vector
	mov	edx, DWORD PTR ___u$[ebp]
	push	edx
	mov	ecx, DWORD PTR ___t$[ebp]
	call	DWORD PTR ___f$[ebp]
	mov	eax, DWORD PTR ___t$[ebp]
	add	eax, DWORD PTR ___s$[ebp]
	mov	DWORD PTR ___t$[ebp], eax
	mov	ecx, DWORD PTR ___u$[ebp]
	add	ecx, DWORD PTR ___s$[ebp]
	mov	DWORD PTR ___u$[ebp], ecx
	jmp	SHORT $LN2@vector
$LN1@vector:
	mov	esp, ebp
	pop	ebp
	ret	20					; 00000014H
??__G@YGXPAX0IIP6EPAX00@Z@Z ENDP			; `vector copy constructor iterator'
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_H@YGXPAXIIP6EPAX0@Z@Z
_TEXT	SEGMENT
tv66 = -4						; size = 4
___t$ = 8						; size = 4
___s$ = 12						; size = 4
___n$ = 16						; size = 4
___f$ = 20						; size = 4
??_H@YGXPAXIIP6EPAX0@Z@Z PROC				; `vector constructor iterator', COMDAT
	push	ebp
	mov	ebp, esp
	push	ecx
$LN2@vector:
	mov	eax, DWORD PTR ___n$[ebp]
	mov	DWORD PTR tv66[ebp], eax
	mov	ecx, DWORD PTR ___n$[ebp]
	sub	ecx, 1
	mov	DWORD PTR ___n$[ebp], ecx
	cmp	DWORD PTR tv66[ebp], 0
	jbe	SHORT $LN1@vector
	mov	ecx, DWORD PTR ___t$[ebp]
	call	DWORD PTR ___f$[ebp]
	mov	edx, DWORD PTR ___t$[ebp]
	add	edx, DWORD PTR ___s$[ebp]
	mov	DWORD PTR ___t$[ebp], edx
	jmp	SHORT $LN2@vector
$LN1@vector:
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
??_H@YGXPAXIIP6EPAX0@Z@Z ENDP				; `vector constructor iterator'
_TEXT	ENDS
END
