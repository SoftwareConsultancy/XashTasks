; Listing generated by Microsoft (R) Optimizing Compiler Version 19.16.27045.0 

	TITLE	C:\Users\USER\Downloads\XashXT_v0.81_rev.1_with_sources\XashXT_v0.81_rev.1_src\server\monsters\flyingmonster.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

CONST	SEGMENT
$SG74863 DB	'c', 00H, ':', 00H, '\', 00H, 'u', 00H, 's', 00H, 'e', 00H
	DB	'r', 00H, 's', 00H, '\', 00H, 'u', 00H, 's', 00H, 'e', 00H, 'r'
	DB	00H, '\', 00H, 'd', 00H, 'o', 00H, 'w', 00H, 'n', 00H, 'l', 00H
	DB	'o', 00H, 'a', 00H, 'd', 00H, 's', 00H, '\', 00H, 'x', 00H, 'a'
	DB	00H, 's', 00H, 'h', 00H, 'x', 00H, 't', 00H, '_', 00H, 'v', 00H
	DB	'0', 00H, '.', 00H, '8', 00H, '1', 00H, '_', 00H, 'r', 00H, 'e'
	DB	00H, 'v', 00H, '.', 00H, '1', 00H, '_', 00H, 'w', 00H, 'i', 00H
	DB	't', 00H, 'h', 00H, '_', 00H, 's', 00H, 'o', 00H, 'u', 00H, 'r'
	DB	00H, 'c', 00H, 'e', 00H, 's', 00H, '\', 00H, 'x', 00H, 'a', 00H
	DB	's', 00H, 'h', 00H, 'x', 00H, 't', 00H, '_', 00H, 'v', 00H, '0'
	DB	00H, '.', 00H, '8', 00H, '1', 00H, '_', 00H, 'r', 00H, 'e', 00H
	DB	'v', 00H, '.', 00H, '1', 00H, '_', 00H, 's', 00H, 'r', 00H, 'c'
	DB	00H, '\', 00H, 'g', 00H, 'a', 00H, 'm', 00H, 'e', 00H, '_', 00H
	DB	's', 00H, 'h', 00H, 'a', 00H, 'r', 00H, 'e', 00H, 'd', 00H, '\'
	DB	00H, 'u', 00H, 't', 00H, 'l', 00H, 'm', 00H, 'e', 00H, 'm', 00H
	DB	'o', 00H, 'r', 00H, 'y', 00H, '.', 00H, 'h', 00H, 00H, 00H
	ORG $+2
$SG74864 DB	'n', 00H, 'G', 00H, 'r', 00H, 'o', 00H, 'w', 00H, 'S', 00H
	DB	'i', 00H, 'z', 00H, 'e', 00H, ' ', 00H, '>', 00H, '=', 00H, ' '
	DB	00H, '0', 00H, 00H, 00H
	ORG $+2
$SG74907 DB	'c', 00H, ':', 00H, '\', 00H, 'u', 00H, 's', 00H, 'e', 00H
	DB	'r', 00H, 's', 00H, '\', 00H, 'u', 00H, 's', 00H, 'e', 00H, 'r'
	DB	00H, '\', 00H, 'd', 00H, 'o', 00H, 'w', 00H, 'n', 00H, 'l', 00H
	DB	'o', 00H, 'a', 00H, 'd', 00H, 's', 00H, '\', 00H, 'x', 00H, 'a'
	DB	00H, 's', 00H, 'h', 00H, 'x', 00H, 't', 00H, '_', 00H, 'v', 00H
	DB	'0', 00H, '.', 00H, '8', 00H, '1', 00H, '_', 00H, 'r', 00H, 'e'
	DB	00H, 'v', 00H, '.', 00H, '1', 00H, '_', 00H, 'w', 00H, 'i', 00H
	DB	't', 00H, 'h', 00H, '_', 00H, 's', 00H, 'o', 00H, 'u', 00H, 'r'
	DB	00H, 'c', 00H, 'e', 00H, 's', 00H, '\', 00H, 'x', 00H, 'a', 00H
	DB	's', 00H, 'h', 00H, 'x', 00H, 't', 00H, '_', 00H, 'v', 00H, '0'
	DB	00H, '.', 00H, '8', 00H, '1', 00H, '_', 00H, 'r', 00H, 'e', 00H
	DB	'v', 00H, '.', 00H, '1', 00H, '_', 00H, 's', 00H, 'r', 00H, 'c'
	DB	00H, '\', 00H, 'g', 00H, 'a', 00H, 'm', 00H, 'e', 00H, '_', 00H
	DB	's', 00H, 'h', 00H, 'a', 00H, 'r', 00H, 'e', 00H, 'd', 00H, '\'
	DB	00H, 'u', 00H, 't', 00H, 'l', 00H, 'a', 00H, 'r', 00H, 'r', 00H
	DB	'a', 00H, 'y', 00H, '.', 00H, 'h', 00H, 00H, 00H
$SG75033 DB	'0', 00H, 00H, 00H
$SG74908 DB	'(', 00H, 'B', 00H, 'a', 00H, 's', 00H, 'e', 00H, '(', 00H
	DB	')', 00H, ' ', 00H, '=', 00H, '=', 00H, ' ', 00H, 'N', 00H, 'U'
	DB	00H, 'L', 00H, 'L', 00H, ')', 00H, ' ', 00H, '|', 00H, '|', 00H
	DB	' ', 00H, '(', 00H, '&', 00H, 's', 00H, 'r', 00H, 'c', 00H, ' '
	DB	00H, '<', 00H, ' ', 00H, 'B', 00H, 'a', 00H, 's', 00H, 'e', 00H
	DB	'(', 00H, ')', 00H, ')', 00H, ' ', 00H, '|', 00H, '|', 00H, ' '
	DB	00H, '(', 00H, '&', 00H, 's', 00H, 'r', 00H, 'c', 00H, ' ', 00H
	DB	'>', 00H, '=', 00H, ' ', 00H, '(', 00H, 'B', 00H, 'a', 00H, 's'
	DB	00H, 'e', 00H, '(', 00H, ')', 00H, ' ', 00H, '+', 00H, ' ', 00H
	DB	'C', 00H, 'o', 00H, 'u', 00H, 'n', 00H, 't', 00H, '(', 00H, ')'
	DB	00H, ')', 00H, ' ', 00H, ')', 00H, 00H, 00H
	ORG $+2
$SG75030 DB	'n', 00H, 'u', 00H, 'm', 00H, ' ', 00H, '>', 00H, ' ', 00H
	DB	'0', 00H, 00H, 00H
$SG75039 DB	'0', 00H, 00H, 00H
$SG74909 DB	'c', 00H, ':', 00H, '\', 00H, 'u', 00H, 's', 00H, 'e', 00H
	DB	'r', 00H, 's', 00H, '\', 00H, 'u', 00H, 's', 00H, 'e', 00H, 'r'
	DB	00H, '\', 00H, 'd', 00H, 'o', 00H, 'w', 00H, 'n', 00H, 'l', 00H
	DB	'o', 00H, 'a', 00H, 'd', 00H, 's', 00H, '\', 00H, 'x', 00H, 'a'
	DB	00H, 's', 00H, 'h', 00H, 'x', 00H, 't', 00H, '_', 00H, 'v', 00H
	DB	'0', 00H, '.', 00H, '8', 00H, '1', 00H, '_', 00H, 'r', 00H, 'e'
	DB	00H, 'v', 00H, '.', 00H, '1', 00H, '_', 00H, 'w', 00H, 'i', 00H
	DB	't', 00H, 'h', 00H, '_', 00H, 's', 00H, 'o', 00H, 'u', 00H, 'r'
	DB	00H, 'c', 00H, 'e', 00H, 's', 00H, '\', 00H, 'x', 00H, 'a', 00H
	DB	's', 00H, 'h', 00H, 'x', 00H, 't', 00H, '_', 00H, 'v', 00H, '0'
	DB	00H, '.', 00H, '8', 00H, '1', 00H, '_', 00H, 'r', 00H, 'e', 00H
	DB	'v', 00H, '.', 00H, '1', 00H, '_', 00H, 's', 00H, 'r', 00H, 'c'
	DB	00H, '\', 00H, 'g', 00H, 'a', 00H, 'm', 00H, 'e', 00H, '_', 00H
	DB	's', 00H, 'h', 00H, 'a', 00H, 'r', 00H, 'e', 00H, 'd', 00H, '\'
	DB	00H, 'u', 00H, 't', 00H, 'l', 00H, 'a', 00H, 'r', 00H, 'r', 00H
	DB	'a', 00H, 'y', 00H, '.', 00H, 'h', 00H, 00H, 00H
$SG75043 DB	'm', 00H, '_', 00H, 'p', 00H, 'M', 00H, 'e', 00H, 'm', 00H
	DB	'o', 00H, 'r', 00H, 'y', 00H, 00H, 00H
$SG74910 DB	'(', 00H, 'e', 00H, 'l', 00H, 'e', 00H, 'm', 00H, ' ', 00H
	DB	'=', 00H, '=', 00H, ' ', 00H, 'C', 00H, 'o', 00H, 'u', 00H, 'n'
	DB	00H, 't', 00H, '(', 00H, ')', 00H, ')', 00H, ' ', 00H, '|', 00H
	DB	'|', 00H, ' ', 00H, 'I', 00H, 's', 00H, 'V', 00H, 'a', 00H, 'l'
	DB	00H, 'i', 00H, 'd', 00H, 'I', 00H, 'n', 00H, 'd', 00H, 'e', 00H
	DB	'x', 00H, '(', 00H, 'e', 00H, 'l', 00H, 'e', 00H, 'm', 00H, ')'
	DB	00H, 00H, 00H
$SG74982 DB	'c', 00H, ':', 00H, '\', 00H, 'u', 00H, 's', 00H, 'e', 00H
	DB	'r', 00H, 's', 00H, '\', 00H, 'u', 00H, 's', 00H, 'e', 00H, 'r'
	DB	00H, '\', 00H, 'd', 00H, 'o', 00H, 'w', 00H, 'n', 00H, 'l', 00H
	DB	'o', 00H, 'a', 00H, 'd', 00H, 's', 00H, '\', 00H, 'x', 00H, 'a'
	DB	00H, 's', 00H, 'h', 00H, 'x', 00H, 't', 00H, '_', 00H, 'v', 00H
	DB	'0', 00H, '.', 00H, '8', 00H, '1', 00H, '_', 00H, 'r', 00H, 'e'
	DB	00H, 'v', 00H, '.', 00H, '1', 00H, '_', 00H, 'w', 00H, 'i', 00H
	DB	't', 00H, 'h', 00H, '_', 00H, 's', 00H, 'o', 00H, 'u', 00H, 'r'
	DB	00H, 'c', 00H, 'e', 00H, 's', 00H, '\', 00H, 'x', 00H, 'a', 00H
	DB	's', 00H, 'h', 00H, 'x', 00H, 't', 00H, '_', 00H, 'v', 00H, '0'
	DB	00H, '.', 00H, '8', 00H, '1', 00H, '_', 00H, 'r', 00H, 'e', 00H
	DB	'v', 00H, '.', 00H, '1', 00H, '_', 00H, 's', 00H, 'r', 00H, 'c'
	DB	00H, '\', 00H, 'g', 00H, 'a', 00H, 'm', 00H, 'e', 00H, '_', 00H
	DB	's', 00H, 'h', 00H, 'a', 00H, 'r', 00H, 'e', 00H, 'd', 00H, '\'
	DB	00H, 'u', 00H, 't', 00H, 'l', 00H, 'a', 00H, 'r', 00H, 'r', 00H
	DB	'a', 00H, 'y', 00H, '.', 00H, 'h', 00H, 00H, 00H
$SG75045 DB	'm', 00H, '_', 00H, 'p', 00H, 'M', 00H, 'e', 00H, 'm', 00H
	DB	'o', 00H, 'r', 00H, 'y', 00H, 00H, 00H
$SG74983 DB	'I', 00H, 's', 00H, 'V', 00H, 'a', 00H, 'l', 00H, 'i', 00H
	DB	'd', 00H, 'I', 00H, 'n', 00H, 'd', 00H, 'e', 00H, 'x', 00H, '('
	DB	00H, 'e', 00H, 'l', 00H, 'e', 00H, 'm', 00H, ')', 00H, ' ', 00H
	DB	'|', 00H, '|', 00H, ' ', 00H, '(', 00H, ' ', 00H, 'm', 00H, '_'
	DB	00H, 'S', 00H, 'i', 00H, 'z', 00H, 'e', 00H, ' ', 00H, '=', 00H
	DB	'=', 00H, ' ', 00H, '0', 00H, ' ', 00H, ')', 00H, ' ', 00H, '|'
	DB	00H, '|', 00H, ' ', 00H, '(', 00H, ' ', 00H, 'n', 00H, 'u', 00H
	DB	'm', 00H, ' ', 00H, '=', 00H, '=', 00H, ' ', 00H, '0', 00H, ' '
	DB	00H, ')', 00H, 00H, 00H
	ORG $+4
$SG75029 DB	'c', 00H, ':', 00H, '\', 00H, 'u', 00H, 's', 00H, 'e', 00H
	DB	'r', 00H, 's', 00H, '\', 00H, 'u', 00H, 's', 00H, 'e', 00H, 'r'
	DB	00H, '\', 00H, 'd', 00H, 'o', 00H, 'w', 00H, 'n', 00H, 'l', 00H
	DB	'o', 00H, 'a', 00H, 'd', 00H, 's', 00H, '\', 00H, 'x', 00H, 'a'
	DB	00H, 's', 00H, 'h', 00H, 'x', 00H, 't', 00H, '_', 00H, 'v', 00H
	DB	'0', 00H, '.', 00H, '8', 00H, '1', 00H, '_', 00H, 'r', 00H, 'e'
	DB	00H, 'v', 00H, '.', 00H, '1', 00H, '_', 00H, 'w', 00H, 'i', 00H
	DB	't', 00H, 'h', 00H, '_', 00H, 's', 00H, 'o', 00H, 'u', 00H, 'r'
	DB	00H, 'c', 00H, 'e', 00H, 's', 00H, '\', 00H, 'x', 00H, 'a', 00H
	DB	's', 00H, 'h', 00H, 'x', 00H, 't', 00H, '_', 00H, 'v', 00H, '0'
	DB	00H, '.', 00H, '8', 00H, '1', 00H, '_', 00H, 'r', 00H, 'e', 00H
	DB	'v', 00H, '.', 00H, '1', 00H, '_', 00H, 's', 00H, 'r', 00H, 'c'
	DB	00H, '\', 00H, 'g', 00H, 'a', 00H, 'm', 00H, 'e', 00H, '_', 00H
	DB	's', 00H, 'h', 00H, 'a', 00H, 'r', 00H, 'e', 00H, 'd', 00H, '\'
	DB	00H, 'u', 00H, 't', 00H, 'l', 00H, 'm', 00H, 'e', 00H, 'm', 00H
	DB	'o', 00H, 'r', 00H, 'y', 00H, '.', 00H, 'h', 00H, 00H, 00H
	ORG $+2
$SG75032 DB	'c', 00H, ':', 00H, '\', 00H, 'u', 00H, 's', 00H, 'e', 00H
	DB	'r', 00H, 's', 00H, '\', 00H, 'u', 00H, 's', 00H, 'e', 00H, 'r'
	DB	00H, '\', 00H, 'd', 00H, 'o', 00H, 'w', 00H, 'n', 00H, 'l', 00H
	DB	'o', 00H, 'a', 00H, 'd', 00H, 's', 00H, '\', 00H, 'x', 00H, 'a'
	DB	00H, 's', 00H, 'h', 00H, 'x', 00H, 't', 00H, '_', 00H, 'v', 00H
	DB	'0', 00H, '.', 00H, '8', 00H, '1', 00H, '_', 00H, 'r', 00H, 'e'
	DB	00H, 'v', 00H, '.', 00H, '1', 00H, '_', 00H, 'w', 00H, 'i', 00H
	DB	't', 00H, 'h', 00H, '_', 00H, 's', 00H, 'o', 00H, 'u', 00H, 'r'
	DB	00H, 'c', 00H, 'e', 00H, 's', 00H, '\', 00H, 'x', 00H, 'a', 00H
	DB	's', 00H, 'h', 00H, 'x', 00H, 't', 00H, '_', 00H, 'v', 00H, '0'
	DB	00H, '.', 00H, '8', 00H, '1', 00H, '_', 00H, 'r', 00H, 'e', 00H
	DB	'v', 00H, '.', 00H, '1', 00H, '_', 00H, 's', 00H, 'r', 00H, 'c'
	DB	00H, '\', 00H, 'g', 00H, 'a', 00H, 'm', 00H, 'e', 00H, '_', 00H
	DB	's', 00H, 'h', 00H, 'a', 00H, 'r', 00H, 'e', 00H, 'd', 00H, '\'
	DB	00H, 'u', 00H, 't', 00H, 'l', 00H, 'm', 00H, 'e', 00H, 'm', 00H
	DB	'o', 00H, 'r', 00H, 'y', 00H, '.', 00H, 'h', 00H, 00H, 00H
	ORG $+2
$SG75038 DB	'c', 00H, ':', 00H, '\', 00H, 'u', 00H, 's', 00H, 'e', 00H
	DB	'r', 00H, 's', 00H, '\', 00H, 'u', 00H, 's', 00H, 'e', 00H, 'r'
	DB	00H, '\', 00H, 'd', 00H, 'o', 00H, 'w', 00H, 'n', 00H, 'l', 00H
	DB	'o', 00H, 'a', 00H, 'd', 00H, 's', 00H, '\', 00H, 'x', 00H, 'a'
	DB	00H, 's', 00H, 'h', 00H, 'x', 00H, 't', 00H, '_', 00H, 'v', 00H
	DB	'0', 00H, '.', 00H, '8', 00H, '1', 00H, '_', 00H, 'r', 00H, 'e'
	DB	00H, 'v', 00H, '.', 00H, '1', 00H, '_', 00H, 'w', 00H, 'i', 00H
	DB	't', 00H, 'h', 00H, '_', 00H, 's', 00H, 'o', 00H, 'u', 00H, 'r'
	DB	00H, 'c', 00H, 'e', 00H, 's', 00H, '\', 00H, 'x', 00H, 'a', 00H
	DB	's', 00H, 'h', 00H, 'x', 00H, 't', 00H, '_', 00H, 'v', 00H, '0'
	DB	00H, '.', 00H, '8', 00H, '1', 00H, '_', 00H, 'r', 00H, 'e', 00H
	DB	'v', 00H, '.', 00H, '1', 00H, '_', 00H, 's', 00H, 'r', 00H, 'c'
	DB	00H, '\', 00H, 'g', 00H, 'a', 00H, 'm', 00H, 'e', 00H, '_', 00H
	DB	's', 00H, 'h', 00H, 'a', 00H, 'r', 00H, 'e', 00H, 'd', 00H, '\'
	DB	00H, 'u', 00H, 't', 00H, 'l', 00H, 'm', 00H, 'e', 00H, 'm', 00H
	DB	'o', 00H, 'r', 00H, 'y', 00H, '.', 00H, 'h', 00H, 00H, 00H
	ORG $+2
$SG75042 DB	'c', 00H, ':', 00H, '\', 00H, 'u', 00H, 's', 00H, 'e', 00H
	DB	'r', 00H, 's', 00H, '\', 00H, 'u', 00H, 's', 00H, 'e', 00H, 'r'
	DB	00H, '\', 00H, 'd', 00H, 'o', 00H, 'w', 00H, 'n', 00H, 'l', 00H
	DB	'o', 00H, 'a', 00H, 'd', 00H, 's', 00H, '\', 00H, 'x', 00H, 'a'
	DB	00H, 's', 00H, 'h', 00H, 'x', 00H, 't', 00H, '_', 00H, 'v', 00H
	DB	'0', 00H, '.', 00H, '8', 00H, '1', 00H, '_', 00H, 'r', 00H, 'e'
	DB	00H, 'v', 00H, '.', 00H, '1', 00H, '_', 00H, 'w', 00H, 'i', 00H
	DB	't', 00H, 'h', 00H, '_', 00H, 's', 00H, 'o', 00H, 'u', 00H, 'r'
	DB	00H, 'c', 00H, 'e', 00H, 's', 00H, '\', 00H, 'x', 00H, 'a', 00H
	DB	's', 00H, 'h', 00H, 'x', 00H, 't', 00H, '_', 00H, 'v', 00H, '0'
	DB	00H, '.', 00H, '8', 00H, '1', 00H, '_', 00H, 'r', 00H, 'e', 00H
	DB	'v', 00H, '.', 00H, '1', 00H, '_', 00H, 's', 00H, 'r', 00H, 'c'
	DB	00H, '\', 00H, 'g', 00H, 'a', 00H, 'm', 00H, 'e', 00H, '_', 00H
	DB	's', 00H, 'h', 00H, 'a', 00H, 'r', 00H, 'e', 00H, 'd', 00H, '\'
	DB	00H, 'u', 00H, 't', 00H, 'l', 00H, 'm', 00H, 'e', 00H, 'm', 00H
	DB	'o', 00H, 'r', 00H, 'y', 00H, '.', 00H, 'h', 00H, 00H, 00H
	ORG $+2
$SG75044 DB	'c', 00H, ':', 00H, '\', 00H, 'u', 00H, 's', 00H, 'e', 00H
	DB	'r', 00H, 's', 00H, '\', 00H, 'u', 00H, 's', 00H, 'e', 00H, 'r'
	DB	00H, '\', 00H, 'd', 00H, 'o', 00H, 'w', 00H, 'n', 00H, 'l', 00H
	DB	'o', 00H, 'a', 00H, 'd', 00H, 's', 00H, '\', 00H, 'x', 00H, 'a'
	DB	00H, 's', 00H, 'h', 00H, 'x', 00H, 't', 00H, '_', 00H, 'v', 00H
	DB	'0', 00H, '.', 00H, '8', 00H, '1', 00H, '_', 00H, 'r', 00H, 'e'
	DB	00H, 'v', 00H, '.', 00H, '1', 00H, '_', 00H, 'w', 00H, 'i', 00H
	DB	't', 00H, 'h', 00H, '_', 00H, 's', 00H, 'o', 00H, 'u', 00H, 'r'
	DB	00H, 'c', 00H, 'e', 00H, 's', 00H, '\', 00H, 'x', 00H, 'a', 00H
	DB	's', 00H, 'h', 00H, 'x', 00H, 't', 00H, '_', 00H, 'v', 00H, '0'
	DB	00H, '.', 00H, '8', 00H, '1', 00H, '_', 00H, 'r', 00H, 'e', 00H
	DB	'v', 00H, '.', 00H, '1', 00H, '_', 00H, 's', 00H, 'r', 00H, 'c'
	DB	00H, '\', 00H, 'g', 00H, 'a', 00H, 'm', 00H, 'e', 00H, '_', 00H
	DB	's', 00H, 'h', 00H, 'a', 00H, 'r', 00H, 'e', 00H, 'd', 00H, '\'
	DB	00H, 'u', 00H, 't', 00H, 'l', 00H, 'm', 00H, 'e', 00H, 'm', 00H
	DB	'o', 00H, 'r', 00H, 'y', 00H, '.', 00H, 'h', 00H, 00H, 00H
CONST	ENDS
PUBLIC	??_H@YGXPAXIIP6EPAX0@Z@Z			; `vector constructor iterator'
PUBLIC	??__G@YGXPAX0IIP6EPAX00@Z@Z			; `vector copy constructor iterator'
PUBLIC	??0Vector@@QAE@XZ				; Vector::Vector
PUBLIC	??0Vector@@QAE@MMM@Z				; Vector::Vector
PUBLIC	??0Vector@@QAE@ABV0@@Z				; Vector::Vector
PUBLIC	??HVector@@QBE?AV0@ABV0@@Z			; Vector::operator+
PUBLIC	??GVector@@QBE?AV0@ABV0@@Z			; Vector::operator-
PUBLIC	??DVector@@QBE?AV0@M@Z				; Vector::operator*
PUBLIC	?Length@Vector@@QBEMXZ				; Vector::Length
PUBLIC	?Normalize@Vector@@QBE?AV1@XZ			; Vector::Normalize
PUBLIC	??D@YA?AVVector@@MABV0@@Z			; operator*
PUBLIC	??0gametrace_s@@QAE@XZ				; gametrace_s::gametrace_s
PUBLIC	?ENT@@YAPAUedict_s@@PBUentvars_s@@@Z		; ENT
PUBLIC	?EMIT_SOUND@@YAXPAUedict_s@@HPBDMM@Z		; EMIT_SOUND
PUBLIC	?edict@CBaseEntity@@QAEPAUedict_s@@XZ		; CBaseEntity::edict
PUBLIC	?CheckLocalMove@CFlyingMonster@@UAEHABVVector@@0PAVCBaseEntity@@PAM@Z ; CFlyingMonster::CheckLocalMove
PUBLIC	?FTriangulate@CFlyingMonster@@UAEHABVVector@@0MPAVCBaseEntity@@PAV2@@Z ; CFlyingMonster::FTriangulate
PUBLIC	?GetStoppedActivity@CFlyingMonster@@UAE?AW4Activity@@XZ ; CFlyingMonster::GetStoppedActivity
PUBLIC	?Killed@CFlyingMonster@@UAEXPAUentvars_s@@H@Z	; CFlyingMonster::Killed
PUBLIC	?Stop@CFlyingMonster@@UAEXXZ			; CFlyingMonster::Stop
PUBLIC	?ChangeYaw@CFlyingMonster@@UAEMH@Z		; CFlyingMonster::ChangeYaw
PUBLIC	?HandleAnimEvent@CFlyingMonster@@UAEXPAUMonsterEvent_t@@@Z ; CFlyingMonster::HandleAnimEvent
PUBLIC	?MoveExecute@CFlyingMonster@@UAEXPAVCBaseEntity@@ABVVector@@M@Z ; CFlyingMonster::MoveExecute
PUBLIC	?Move@CFlyingMonster@@UAEXM@Z			; CFlyingMonster::Move
PUBLIC	?ShouldAdvanceRoute@CFlyingMonster@@UAEHM@Z	; CFlyingMonster::ShouldAdvanceRoute
PUBLIC	?CeilingZ@CFlyingMonster@@QAEMABVVector@@@Z	; CFlyingMonster::CeilingZ
PUBLIC	?FloorZ@CFlyingMonster@@QAEMABVVector@@@Z	; CFlyingMonster::FloorZ
PUBLIC	?ProbeZ@CFlyingMonster@@QAEHABVVector@@0PAM@Z	; CFlyingMonster::ProbeZ
PUBLIC	__real@00000000
PUBLIC	__real@3f4ccccd
PUBLIC	__real@3f800000
PUBLIC	__real@3ff0000000000000
PUBLIC	__real@4000000000000000
PUBLIC	__real@406b800000000000
PUBLIC	__real@40b0000000000000
PUBLIC	__real@41a00000
PUBLIC	__real@42000000
PUBLIC	__real@42800000
PUBLIC	__real@42960000
PUBLIC	__real@42b40000
PUBLIC	__real@42c80000
PUBLIC	__real@43480000
PUBLIC	__real@43960000
PUBLIC	__real@43c80000
PUBLIC	__real@45000000
PUBLIC	__real@c1a00000
PUBLIC	__real@c2b40000
EXTRN	_sqrt:PROC
EXTRN	?DBG_EntOfVars@@YAPAUedict_s@@PBUentvars_s@@@Z:PROC ; DBG_EntOfVars
EXTRN	?UTIL_TraceLine@@YAXABVVector@@0W4IGNORE_MONSTERS@@PAUedict_s@@PAUgametrace_s@@@Z:PROC ; UTIL_TraceLine
EXTRN	?UTIL_TraceHull@@YAXABVVector@@0W4IGNORE_MONSTERS@@HPAUedict_s@@PAUgametrace_s@@@Z:PROC ; UTIL_TraceHull
EXTRN	?UTIL_PointContents@@YAHABVVector@@@Z:PROC	; UTIL_PointContents
EXTRN	?UTIL_Approach@@YAMMMM@Z:PROC			; UTIL_Approach
EXTRN	?UTIL_WaterLevel@@YAMABVVector@@MM@Z:PROC	; UTIL_WaterLevel
EXTRN	?EMIT_SOUND_DYN@@YAXPAUedict_s@@HPBDMMHH@Z:PROC	; EMIT_SOUND_DYN
EXTRN	?SetAbsOrigin@CBaseEntity@@QAEXABVVector@@@Z:PROC ; CBaseEntity::SetAbsOrigin
EXTRN	?GetAbsOrigin@CBaseEntity@@QBEABVVector@@XZ:PROC ; CBaseEntity::GetAbsOrigin
EXTRN	?SetAbsAngles@CBaseEntity@@QAEXABVVector@@@Z:PROC ; CBaseEntity::SetAbsAngles
EXTRN	?GetAbsAngles@CBaseEntity@@QBEABVVector@@XZ:PROC ; CBaseEntity::GetAbsAngles
EXTRN	?ChangeYaw@CBaseMonster@@UAEMH@Z:PROC		; CBaseMonster::ChangeYaw
EXTRN	?FlYawDiff@CBaseMonster@@QAEMXZ:PROC		; CBaseMonster::FlYawDiff
EXTRN	?HandleAnimEvent@CBaseMonster@@UAEXPAUMonsterEvent_t@@@Z:PROC ; CBaseMonster::HandleAnimEvent
EXTRN	?Move@CBaseMonster@@UAEXM@Z:PROC		; CBaseMonster::Move
EXTRN	?MoveExecute@CBaseMonster@@UAEXPAVCBaseEntity@@ABVVector@@M@Z:PROC ; CBaseMonster::MoveExecute
EXTRN	?FTriangulate@CBaseMonster@@UAEHABVVector@@0MPAVCBaseEntity@@PAV2@@Z:PROC ; CBaseMonster::FTriangulate
EXTRN	?Killed@CBaseMonster@@UAEXPAUentvars_s@@H@Z:PROC ; CBaseMonster::Killed
EXTRN	?UTIL_MoveToOrigin@@YAXPAUedict_s@@ABVVector@@MH@Z:PROC ; UTIL_MoveToOrigin
EXTRN	?g_vecZero@@3VVector@@B:BYTE			; g_vecZero
EXTRN	?gpGlobals@@3PAUglobalvars_t@@A:DWORD		; gpGlobals
EXTRN	__fltused:DWORD
;	COMDAT __real@c2b40000
CONST	SEGMENT
__real@c2b40000 DD 0c2b40000r			; -90
CONST	ENDS
;	COMDAT __real@c1a00000
CONST	SEGMENT
__real@c1a00000 DD 0c1a00000r			; -20
CONST	ENDS
;	COMDAT __real@45000000
CONST	SEGMENT
__real@45000000 DD 045000000r			; 2048
CONST	ENDS
;	COMDAT __real@43c80000
CONST	SEGMENT
__real@43c80000 DD 043c80000r			; 400
CONST	ENDS
;	COMDAT __real@43960000
CONST	SEGMENT
__real@43960000 DD 043960000r			; 300
CONST	ENDS
;	COMDAT __real@43480000
CONST	SEGMENT
__real@43480000 DD 043480000r			; 200
CONST	ENDS
;	COMDAT __real@42c80000
CONST	SEGMENT
__real@42c80000 DD 042c80000r			; 100
CONST	ENDS
;	COMDAT __real@42b40000
CONST	SEGMENT
__real@42b40000 DD 042b40000r			; 90
CONST	ENDS
;	COMDAT __real@42960000
CONST	SEGMENT
__real@42960000 DD 042960000r			; 75
CONST	ENDS
;	COMDAT __real@42800000
CONST	SEGMENT
__real@42800000 DD 042800000r			; 64
CONST	ENDS
;	COMDAT __real@42000000
CONST	SEGMENT
__real@42000000 DD 042000000r			; 32
CONST	ENDS
;	COMDAT __real@41a00000
CONST	SEGMENT
__real@41a00000 DD 041a00000r			; 20
CONST	ENDS
;	COMDAT __real@40b0000000000000
CONST	SEGMENT
__real@40b0000000000000 DQ 040b0000000000000r	; 4096
CONST	ENDS
;	COMDAT __real@406b800000000000
CONST	SEGMENT
__real@406b800000000000 DQ 0406b800000000000r	; 220
CONST	ENDS
;	COMDAT __real@4000000000000000
CONST	SEGMENT
__real@4000000000000000 DQ 04000000000000000r	; 2
CONST	ENDS
;	COMDAT __real@3ff0000000000000
CONST	SEGMENT
__real@3ff0000000000000 DQ 03ff0000000000000r	; 1
CONST	ENDS
;	COMDAT __real@3f800000
CONST	SEGMENT
__real@3f800000 DD 03f800000r			; 1
CONST	ENDS
;	COMDAT __real@3f4ccccd
CONST	SEGMENT
__real@3f4ccccd DD 03f4ccccdr			; 0.8
CONST	ENDS
;	COMDAT __real@00000000
CONST	SEGMENT
__real@00000000 DD 000000000r			; 0
CONST	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xashxt_v0.81_rev.1_with_sources\xashxt_v0.81_rev.1_src\server\monsters\flyingmonster.cpp
_TEXT	SEGMENT
$T1 = -100						; size = 12
$T2 = -88						; size = 12
$T3 = -76						; size = 12
_midProbeVec$4 = -64					; size = 12
_ProbeUnit$ = -52					; size = 12
_conProbe$ = -40					; size = 4
_this$ = -36						; size = 4
_ProbeLength$ = -32					; size = 4
tv76 = -28						; size = 4
tv74 = -24						; size = 4
_diff$ = -20						; size = 4
_maxProbeLength$ = -16					; size = 4
_midProbeLength$5 = -12					; size = 4
_conPosition$ = -8					; size = 4
_minProbeLength$ = -4					; size = 4
_position$ = 8						; size = 4
_probe$ = 12						; size = 4
_pFraction$ = 16					; size = 4
?ProbeZ@CFlyingMonster@@QAEHABVVector@@0PAM@Z PROC	; CFlyingMonster::ProbeZ
; _this$ = ecx

; 228  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 100				; 00000064H
	mov	DWORD PTR _this$[ebp], ecx

; 229  : 	int conPosition = UTIL_PointContents(position);

	mov	eax, DWORD PTR _position$[ebp]
	push	eax
	call	?UTIL_PointContents@@YAHABVVector@@@Z	; UTIL_PointContents
	add	esp, 4
	mov	DWORD PTR _conPosition$[ebp], eax

; 230  : 	if ( (((pev->flags) & FL_SWIM) == FL_SWIM) ^ (conPosition == CONTENTS_WATER))

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR [edx+420]
	and	eax, 2
	je	SHORT $LN9@ProbeZ
	mov	DWORD PTR tv74[ebp], 1
	jmp	SHORT $LN10@ProbeZ
$LN9@ProbeZ:
	mov	DWORD PTR tv74[ebp], 0
$LN10@ProbeZ:
	cmp	DWORD PTR _conPosition$[ebp], -3	; fffffffdH
	jne	SHORT $LN11@ProbeZ
	mov	DWORD PTR tv76[ebp], 1
	jmp	SHORT $LN12@ProbeZ
$LN11@ProbeZ:
	mov	DWORD PTR tv76[ebp], 0
$LN12@ProbeZ:
	mov	ecx, DWORD PTR tv74[ebp]
	xor	ecx, DWORD PTR tv76[ebp]
	je	SHORT $LN4@ProbeZ

; 231  : 	{
; 232  : 		//    SWIMING & !WATER
; 233  : 		// or FLYING  & WATER
; 234  : 		//
; 235  : 		*pFraction = 0.0;

	mov	edx, DWORD PTR _pFraction$[ebp]
	xorps	xmm0, xmm0
	movss	DWORD PTR [edx], xmm0

; 236  : 		return TRUE; // We hit a water boundary because we are where we don't belong.

	mov	eax, 1
	jmp	$LN1@ProbeZ
$LN4@ProbeZ:

; 237  : 	}
; 238  : 	int conProbe = UTIL_PointContents(probe);

	mov	eax, DWORD PTR _probe$[ebp]
	push	eax
	call	?UTIL_PointContents@@YAHABVVector@@@Z	; UTIL_PointContents
	add	esp, 4
	mov	DWORD PTR _conProbe$[ebp], eax

; 239  : 	if (conProbe == conPosition)

	mov	ecx, DWORD PTR _conProbe$[ebp]
	cmp	ecx, DWORD PTR _conPosition$[ebp]
	jne	SHORT $LN5@ProbeZ

; 240  : 	{
; 241  : 		// The probe is either entirely inside the water (for fish) or entirely
; 242  : 		// outside the water (for birds).
; 243  : 		//
; 244  : 		*pFraction = 1.0;

	mov	edx, DWORD PTR _pFraction$[ebp]
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [edx], xmm0

; 245  : 		return FALSE;

	xor	eax, eax
	jmp	$LN1@ProbeZ
$LN5@ProbeZ:

; 246  : 	}
; 247  : 
; 248  : 	Vector ProbeUnit = (probe-position).Normalize();

	lea	eax, DWORD PTR _ProbeUnit$[ebp]
	push	eax
	mov	ecx, DWORD PTR _position$[ebp]
	push	ecx
	lea	edx, DWORD PTR $T3[ebp]
	push	edx
	mov	ecx, DWORD PTR _probe$[ebp]
	call	??GVector@@QBE?AV0@ABV0@@Z		; Vector::operator-
	mov	ecx, eax
	call	?Normalize@Vector@@QBE?AV1@XZ		; Vector::Normalize

; 249  : 	float ProbeLength = (probe-position).Length();

	mov	eax, DWORD PTR _position$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T2[ebp]
	push	ecx
	mov	ecx, DWORD PTR _probe$[ebp]
	call	??GVector@@QBE?AV0@ABV0@@Z		; Vector::operator-
	mov	ecx, eax
	call	?Length@Vector@@QBEMXZ			; Vector::Length
	fstp	DWORD PTR _ProbeLength$[ebp]

; 250  : 	float maxProbeLength = ProbeLength;

	movss	xmm0, DWORD PTR _ProbeLength$[ebp]
	movss	DWORD PTR _maxProbeLength$[ebp], xmm0

; 251  : 	float minProbeLength = 0;

	xorps	xmm0, xmm0
	movss	DWORD PTR _minProbeLength$[ebp], xmm0

; 252  : 
; 253  : 	float diff = maxProbeLength - minProbeLength;

	movss	xmm0, DWORD PTR _maxProbeLength$[ebp]
	subss	xmm0, DWORD PTR _minProbeLength$[ebp]
	movss	DWORD PTR _diff$[ebp], xmm0
$LN2@ProbeZ:

; 254  : 	while (diff > 1.0)

	cvtss2sd xmm0, DWORD PTR _diff$[ebp]
	comisd	xmm0, QWORD PTR __real@3ff0000000000000
	jbe	$LN3@ProbeZ

; 255  : 	{
; 256  : 		float midProbeLength = minProbeLength + diff/2.0;

	cvtss2sd xmm0, DWORD PTR _minProbeLength$[ebp]
	cvtss2sd xmm1, DWORD PTR _diff$[ebp]
	divsd	xmm1, QWORD PTR __real@4000000000000000
	addsd	xmm0, xmm1
	cvtsd2ss xmm0, xmm0
	movss	DWORD PTR _midProbeLength$5[ebp], xmm0

; 257  : 		Vector midProbeVec = midProbeLength * ProbeUnit;

	lea	edx, DWORD PTR _ProbeUnit$[ebp]
	push	edx
	push	ecx
	movss	xmm0, DWORD PTR _midProbeLength$5[ebp]
	movss	DWORD PTR [esp], xmm0
	lea	eax, DWORD PTR _midProbeVec$4[ebp]
	push	eax
	call	??D@YA?AVVector@@MABV0@@Z		; operator*
	add	esp, 12					; 0000000cH

; 258  : 		if (UTIL_PointContents(position+midProbeVec) == conPosition)

	lea	ecx, DWORD PTR _midProbeVec$4[ebp]
	push	ecx
	lea	edx, DWORD PTR $T1[ebp]
	push	edx
	mov	ecx, DWORD PTR _position$[ebp]
	call	??HVector@@QBE?AV0@ABV0@@Z		; Vector::operator+
	push	eax
	call	?UTIL_PointContents@@YAHABVVector@@@Z	; UTIL_PointContents
	add	esp, 4
	cmp	eax, DWORD PTR _conPosition$[ebp]
	jne	SHORT $LN6@ProbeZ

; 259  : 		{
; 260  : 			minProbeLength = midProbeLength;

	movss	xmm0, DWORD PTR _midProbeLength$5[ebp]
	movss	DWORD PTR _minProbeLength$[ebp], xmm0

; 261  : 		}
; 262  : 		else

	jmp	SHORT $LN7@ProbeZ
$LN6@ProbeZ:

; 263  : 		{
; 264  : 			maxProbeLength = midProbeLength;

	movss	xmm0, DWORD PTR _midProbeLength$5[ebp]
	movss	DWORD PTR _maxProbeLength$[ebp], xmm0
$LN7@ProbeZ:

; 265  : 		}
; 266  : 		diff = maxProbeLength - minProbeLength;

	movss	xmm0, DWORD PTR _maxProbeLength$[ebp]
	subss	xmm0, DWORD PTR _minProbeLength$[ebp]
	movss	DWORD PTR _diff$[ebp], xmm0

; 267  : 	}

	jmp	$LN2@ProbeZ
$LN3@ProbeZ:

; 268  : 	*pFraction = minProbeLength/ProbeLength;

	movss	xmm0, DWORD PTR _minProbeLength$[ebp]
	divss	xmm0, DWORD PTR _ProbeLength$[ebp]
	mov	eax, DWORD PTR _pFraction$[ebp]
	movss	DWORD PTR [eax], xmm0

; 269  : 
; 270  : 	return TRUE;

	mov	eax, 1
$LN1@ProbeZ:

; 271  : }

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?ProbeZ@CFlyingMonster@@QAEHABVVector@@0PAM@Z ENDP	; CFlyingMonster::ProbeZ
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xashxt_v0.81_rev.1_with_sources\xashxt_v0.81_rev.1_src\server\monsters\flyingmonster.cpp
_TEXT	SEGMENT
_tr$ = -72						; size = 56
_down$ = -16						; size = 12
_this$ = -4						; size = 4
_position$ = 8						; size = 4
?FloorZ@CFlyingMonster@@QAEMABVVector@@@Z PROC		; CFlyingMonster::FloorZ
; _this$ = ecx

; 274  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	mov	DWORD PTR _this$[ebp], ecx

; 275  : 	TraceResult tr;

	lea	ecx, DWORD PTR _tr$[ebp]
	call	??0gametrace_s@@QAE@XZ

; 276  : 
; 277  : 	Vector down = position;

	mov	eax, DWORD PTR _position$[ebp]
	push	eax
	lea	ecx, DWORD PTR _down$[ebp]
	call	??0Vector@@QAE@ABV0@@Z			; Vector::Vector

; 278  : 	down.z -= 2048;

	movss	xmm0, DWORD PTR _down$[ebp+8]
	subss	xmm0, DWORD PTR __real@45000000
	movss	DWORD PTR _down$[ebp+8], xmm0

; 279  : 
; 280  : 	UTIL_TraceLine( position, down, ignore_monsters, NULL, &tr );

	lea	ecx, DWORD PTR _tr$[ebp]
	push	ecx
	push	0
	push	1
	lea	edx, DWORD PTR _down$[ebp]
	push	edx
	mov	eax, DWORD PTR _position$[ebp]
	push	eax
	call	?UTIL_TraceLine@@YAXABVVector@@0W4IGNORE_MONSTERS@@PAUedict_s@@PAUgametrace_s@@@Z ; UTIL_TraceLine
	add	esp, 20					; 00000014H

; 281  : 
; 282  : 	if ( tr.flFraction != 1.0 )

	cvtss2sd xmm0, DWORD PTR _tr$[ebp+16]
	ucomisd	xmm0, QWORD PTR __real@3ff0000000000000
	lahf
	test	ah, 68					; 00000044H
	jnp	SHORT $LN2@FloorZ

; 283  : 		return tr.vecEndPos.z;

	fld	DWORD PTR _tr$[ebp+28]
	jmp	SHORT $LN1@FloorZ
$LN2@FloorZ:

; 284  : 
; 285  : 	return down.z;

	fld	DWORD PTR _down$[ebp+8]
$LN1@FloorZ:

; 286  : }

	mov	esp, ebp
	pop	ebp
	ret	4
?FloorZ@CFlyingMonster@@QAEMABVVector@@@Z ENDP		; CFlyingMonster::FloorZ
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xashxt_v0.81_rev.1_with_sources\xashxt_v0.81_rev.1_src\server\monsters\flyingmonster.cpp
_TEXT	SEGMENT
_tr$ = -84						; size = 56
_minUp$ = -28						; size = 12
_maxUp$ = -16						; size = 12
_this$ = -4						; size = 4
_position$ = 8						; size = 4
?CeilingZ@CFlyingMonster@@QAEMABVVector@@@Z PROC	; CFlyingMonster::CeilingZ
; _this$ = ecx

; 209  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 84					; 00000054H
	mov	DWORD PTR _this$[ebp], ecx

; 210  : 	TraceResult tr;

	lea	ecx, DWORD PTR _tr$[ebp]
	call	??0gametrace_s@@QAE@XZ

; 211  : 
; 212  : 	Vector minUp = position;

	mov	eax, DWORD PTR _position$[ebp]
	push	eax
	lea	ecx, DWORD PTR _minUp$[ebp]
	call	??0Vector@@QAE@ABV0@@Z			; Vector::Vector

; 213  : 	Vector maxUp = position;

	mov	ecx, DWORD PTR _position$[ebp]
	push	ecx
	lea	ecx, DWORD PTR _maxUp$[ebp]
	call	??0Vector@@QAE@ABV0@@Z			; Vector::Vector

; 214  : 	maxUp.z += 4096.0;

	cvtss2sd xmm0, DWORD PTR _maxUp$[ebp+8]
	addsd	xmm0, QWORD PTR __real@40b0000000000000
	cvtsd2ss xmm0, xmm0
	movss	DWORD PTR _maxUp$[ebp+8], xmm0

; 215  : 
; 216  : 	UTIL_TraceLine(position, maxUp, ignore_monsters, NULL, &tr);

	lea	edx, DWORD PTR _tr$[ebp]
	push	edx
	push	0
	push	1
	lea	eax, DWORD PTR _maxUp$[ebp]
	push	eax
	mov	ecx, DWORD PTR _position$[ebp]
	push	ecx
	call	?UTIL_TraceLine@@YAXABVVector@@0W4IGNORE_MONSTERS@@PAUedict_s@@PAUgametrace_s@@@Z ; UTIL_TraceLine
	add	esp, 20					; 00000014H

; 217  : 	if (tr.flFraction != 1.0)

	cvtss2sd xmm0, DWORD PTR _tr$[ebp+16]
	ucomisd	xmm0, QWORD PTR __real@3ff0000000000000
	lahf
	test	ah, 68					; 00000044H
	jnp	SHORT $LN2@CeilingZ

; 218  : 		maxUp.z = tr.vecEndPos.z;

	movss	xmm0, DWORD PTR _tr$[ebp+28]
	movss	DWORD PTR _maxUp$[ebp+8], xmm0
$LN2@CeilingZ:

; 219  : 
; 220  : 	if ((pev->flags) & FL_SWIM)

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR [eax+420]
	and	ecx, 2
	je	SHORT $LN3@CeilingZ

; 221  : 	{
; 222  : 		return UTIL_WaterLevel( position, minUp.z, maxUp.z );

	push	ecx
	movss	xmm0, DWORD PTR _maxUp$[ebp+8]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _minUp$[ebp+8]
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _position$[ebp]
	push	edx
	call	?UTIL_WaterLevel@@YAMABVVector@@MM@Z	; UTIL_WaterLevel
	add	esp, 12					; 0000000cH
	jmp	SHORT $LN1@CeilingZ
$LN3@CeilingZ:

; 223  : 	}
; 224  : 	return maxUp.z;

	fld	DWORD PTR _maxUp$[ebp+8]
$LN1@CeilingZ:

; 225  : }

	mov	esp, ebp
	pop	ebp
	ret	4
?CeilingZ@CFlyingMonster@@QAEMABVVector@@@Z ENDP	; CFlyingMonster::CeilingZ
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xashxt_v0.81_rev.1_with_sources\xashxt_v0.81_rev.1_src\server\monsters\flyingmonster.cpp
_TEXT	SEGMENT
$T1 = -16						; size = 12
_this$ = -4						; size = 4
_flWaypointDist$ = 8					; size = 4
?ShouldAdvanceRoute@CFlyingMonster@@UAEHM@Z PROC	; CFlyingMonster::ShouldAdvanceRoute
; _this$ = ecx

; 152  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx

; 153  : 	// Get true 3D distance to the goal so we actually reach the correct height
; 154  : 	if ( m_Route[ m_iRouteIndex ].iType & bits_MF_IS_GOAL )

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+2120]
	shl	ecx, 4
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+ecx+2000]
	and	eax, 128				; 00000080H
	je	SHORT $LN2@ShouldAdva

; 155  : 		flWaypointDist = ( m_Route[ m_iRouteIndex ].vecLocation - GetAbsOrigin() ).Length();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetAbsOrigin@CBaseEntity@@QBEABVVector@@XZ ; CBaseEntity::GetAbsOrigin
	push	eax
	lea	ecx, DWORD PTR $T1[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+2120]
	shl	eax, 4
	mov	ecx, DWORD PTR _this$[ebp]
	lea	ecx, DWORD PTR [ecx+eax+1988]
	call	??GVector@@QBE?AV0@ABV0@@Z		; Vector::operator-
	mov	ecx, eax
	call	?Length@Vector@@QBEMXZ			; Vector::Length
	fstp	DWORD PTR _flWaypointDist$[ebp]
$LN2@ShouldAdva:

; 156  : 
; 157  : 	if ( flWaypointDist <= 64 + (m_flGroundSpeed * gpGlobals->frametime) )

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR ?gpGlobals@@3PAUglobalvars_t@@A ; gpGlobals
	movss	xmm0, DWORD PTR [edx+1684]
	mulss	xmm0, DWORD PTR [eax+4]
	addss	xmm0, DWORD PTR __real@42800000
	comiss	xmm0, DWORD PTR _flWaypointDist$[ebp]
	jb	SHORT $LN3@ShouldAdva

; 158  : 		return TRUE;

	mov	eax, 1
	jmp	SHORT $LN1@ShouldAdva
$LN3@ShouldAdva:

; 159  : 
; 160  : 	return FALSE;

	xor	eax, eax
$LN1@ShouldAdva:

; 161  : }

	mov	esp, ebp
	pop	ebp
	ret	4
?ShouldAdvanceRoute@CFlyingMonster@@UAEHM@Z ENDP	; CFlyingMonster::ShouldAdvanceRoute
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xashxt_v0.81_rev.1_with_sources\xashxt_v0.81_rev.1_src\server\monsters\flyingmonster.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
_flInterval$ = 8					; size = 4
?Move@CFlyingMonster@@UAEXM@Z PROC			; CFlyingMonster::Move
; _this$ = ecx

; 144  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 145  : 	if ( pev->movetype == MOVETYPE_FLY )

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	cmp	DWORD PTR [ecx+264], 5
	jne	SHORT $LN2@Move

; 146  : 		m_flGroundSpeed = m_flightSpeed;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+2296]
	mov	DWORD PTR [edx+1684], ecx
$LN2@Move:

; 147  : 	CBaseMonster::Move( flInterval );

	push	ecx
	movss	xmm0, DWORD PTR _flInterval$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Move@CBaseMonster@@UAEXM@Z		; CBaseMonster::Move

; 148  : }

	mov	esp, ebp
	pop	ebp
	ret	4
?Move@CFlyingMonster@@UAEXM@Z ENDP			; CFlyingMonster::Move
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xashxt_v0.81_rev.1_with_sources\xashxt_v0.81_rev.1_src\server\monsters\flyingmonster.cpp
_TEXT	SEGMENT
$T1 = -88						; size = 12
$T2 = -76						; size = 12
$T3 = -64						; size = 12
$T4 = -52						; size = 12
$T5 = -40						; size = 12
$T6 = -28						; size = 12
_vecMove$7 = -16					; size = 12
_this$ = -4						; size = 4
_pTargetEnt$ = 8					; size = 4
_vecDir$ = 12						; size = 4
_flInterval$ = 16					; size = 4
?MoveExecute@CFlyingMonster@@UAEXPAVCBaseEntity@@ABVVector@@M@Z PROC ; CFlyingMonster::MoveExecute
; _this$ = ecx

; 165  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 88					; 00000058H
	mov	DWORD PTR _this$[ebp], ecx

; 166  : 	if ( pev->movetype == MOVETYPE_FLY )

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	cmp	DWORD PTR [ecx+264], 5
	jne	$LN2@MoveExecut

; 167  : 	{
; 168  : 		if ( gpGlobals->time - m_stopTime > 1.0 )

	mov	edx, DWORD PTR ?gpGlobals@@3PAUglobalvars_t@@A ; gpGlobals
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx]
	subss	xmm0, DWORD PTR [eax+2300]
	cvtss2sd xmm0, xmm0
	comisd	xmm0, QWORD PTR __real@3ff0000000000000
	jbe	SHORT $LN5@MoveExecut

; 169  : 		{
; 170  : 			if ( m_IdealActivity != m_movementActivity )

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+1960]
	cmp	eax, DWORD PTR [edx+2140]
	je	SHORT $LN5@MoveExecut

; 171  : 			{
; 172  : 				m_IdealActivity = m_movementActivity;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+2140]
	mov	DWORD PTR [ecx+1960], eax

; 173  : 				m_flGroundSpeed = m_flightSpeed = 200;

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@43480000
	movss	DWORD PTR [ecx+2296], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@43480000
	movss	DWORD PTR [edx+1684], xmm0
$LN5@MoveExecut:

; 174  : 			}
; 175  : 		}
; 176  : 		Vector vecMove = GetAbsOrigin() + (( vecDir + (m_vecTravel * m_momentum) ).Normalize() * (m_flGroundSpeed * flInterval));

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+1684]
	mulss	xmm0, DWORD PTR _flInterval$[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	lea	ecx, DWORD PTR $T6[ebp]
	push	ecx
	lea	edx, DWORD PTR $T5[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [eax+2304]
	movss	DWORD PTR [esp], xmm0
	lea	ecx, DWORD PTR $T4[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 2284				; 000008ecH
	call	??DVector@@QBE?AV0@M@Z			; Vector::operator*
	push	eax
	lea	edx, DWORD PTR $T3[ebp]
	push	edx
	mov	ecx, DWORD PTR _vecDir$[ebp]
	call	??HVector@@QBE?AV0@ABV0@@Z		; Vector::operator+
	mov	ecx, eax
	call	?Normalize@Vector@@QBE?AV1@XZ		; Vector::Normalize
	mov	ecx, eax
	call	??DVector@@QBE?AV0@M@Z			; Vector::operator*
	push	eax
	lea	eax, DWORD PTR _vecMove$7[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetAbsOrigin@CBaseEntity@@QBEABVVector@@XZ ; CBaseEntity::GetAbsOrigin
	mov	ecx, eax
	call	??HVector@@QBE?AV0@ABV0@@Z		; Vector::operator+

; 177  : 
; 178  : 		if ( m_IdealActivity != m_movementActivity )

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+1960]
	cmp	eax, DWORD PTR [edx+2140]
	je	SHORT $LN6@MoveExecut

; 179  : 		{
; 180  : 			m_flightSpeed = UTIL_Approach( 100, m_flightSpeed, 75 * gpGlobals->frametime );

	mov	ecx, DWORD PTR ?gpGlobals@@3PAUglobalvars_t@@A ; gpGlobals
	movss	xmm0, DWORD PTR __real@42960000
	mulss	xmm0, DWORD PTR [ecx+4]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [edx+2296]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@42c80000
	movss	DWORD PTR [esp], xmm0
	call	?UTIL_Approach@@YAMMMM@Z		; UTIL_Approach
	add	esp, 12					; 0000000cH
	mov	eax, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [eax+2296]

; 181  : 			if ( m_flightSpeed < 100 )

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@42c80000
	comiss	xmm0, DWORD PTR [ecx+2296]
	jbe	SHORT $LN8@MoveExecut

; 182  : 				m_stopTime = gpGlobals->time;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR ?gpGlobals@@3PAUglobalvars_t@@A ; gpGlobals
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR [edx+2300], ecx
$LN8@MoveExecut:

; 183  : 		}
; 184  : 		else

	jmp	SHORT $LN7@MoveExecut
$LN6@MoveExecut:

; 185  : 			m_flightSpeed = UTIL_Approach( 20, m_flightSpeed, 300 * gpGlobals->frametime );

	mov	edx, DWORD PTR ?gpGlobals@@3PAUglobalvars_t@@A ; gpGlobals
	movss	xmm0, DWORD PTR __real@43960000
	mulss	xmm0, DWORD PTR [edx+4]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [eax+2296]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@41a00000
	movss	DWORD PTR [esp], xmm0
	call	?UTIL_Approach@@YAMMMM@Z		; UTIL_Approach
	add	esp, 12					; 0000000cH
	mov	ecx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [ecx+2296]
$LN7@MoveExecut:

; 186  : 		
; 187  : 		if ( CheckLocalMove ( GetAbsOrigin(), vecMove, pTargetEnt, NULL ) )

	push	0
	mov	edx, DWORD PTR _pTargetEnt$[ebp]
	push	edx
	lea	eax, DWORD PTR _vecMove$7[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetAbsOrigin@CBaseEntity@@QBEABVVector@@XZ ; CBaseEntity::GetAbsOrigin
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+392]
	call	eax
	test	eax, eax
	je	$LN9@MoveExecut

; 188  : 		{
; 189  : 			m_vecTravel = (vecMove - GetAbsOrigin());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetAbsOrigin@CBaseEntity@@QBEABVVector@@XZ ; CBaseEntity::GetAbsOrigin
	push	eax
	lea	ecx, DWORD PTR $T2[ebp]
	push	ecx
	lea	ecx, DWORD PTR _vecMove$7[ebp]
	call	??GVector@@QBE?AV0@ABV0@@Z		; Vector::operator-
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 2284				; 000008ecH
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR [edx], ecx
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR [edx+4], ecx
	mov	eax, DWORD PTR [eax+8]
	mov	DWORD PTR [edx+8], eax

; 190  : 			m_vecTravel = m_vecTravel.Normalize();

	lea	ecx, DWORD PTR $T1[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 2284				; 000008ecH
	call	?Normalize@Vector@@QBE?AV1@XZ		; Vector::Normalize
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 2284				; 000008ecH
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR [edx], ecx
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR [edx+4], ecx
	mov	eax, DWORD PTR [eax+8]
	mov	DWORD PTR [edx+8], eax

; 191  : 			UTIL_MoveToOrigin(ENT(pev), vecMove, (m_flGroundSpeed * flInterval), MOVE_STRAFE);

	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+1684]
	mulss	xmm0, DWORD PTR _flInterval$[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	lea	edx, DWORD PTR _vecMove$7[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	call	?ENT@@YAPAUedict_s@@PBUentvars_s@@@Z	; ENT
	add	esp, 4
	push	eax
	call	?UTIL_MoveToOrigin@@YAXPAUedict_s@@ABVVector@@MH@Z ; UTIL_MoveToOrigin
	add	esp, 16					; 00000010H

; 192  : 
; 193  : 			// g-cont. see code of engine function SV_MoveStep for details
; 194  : 			SetAbsOrigin( pev->origin );

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	add	eax, 8
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetAbsOrigin@CBaseEntity@@QAEXABVVector@@@Z ; CBaseEntity::SetAbsOrigin

; 195  : 		}
; 196  : 		else

	jmp	SHORT $LN10@MoveExecut
$LN9@MoveExecut:

; 197  : 		{
; 198  : 			m_IdealActivity = GetStoppedActivity();

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+408]
	call	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+1960], eax

; 199  : 			m_stopTime = gpGlobals->time;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR ?gpGlobals@@3PAUglobalvars_t@@A ; gpGlobals
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR [edx+2300], ecx

; 200  : 			m_vecTravel = g_vecZero;

	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 2284				; 000008ecH
	mov	eax, DWORD PTR ?g_vecZero@@3VVector@@B
	mov	DWORD PTR [edx], eax
	mov	ecx, DWORD PTR ?g_vecZero@@3VVector@@B+4
	mov	DWORD PTR [edx+4], ecx
	mov	eax, DWORD PTR ?g_vecZero@@3VVector@@B+8
	mov	DWORD PTR [edx+8], eax
$LN10@MoveExecut:

; 201  : 		}
; 202  : 	}
; 203  : 	else

	jmp	SHORT $LN3@MoveExecut
$LN2@MoveExecut:

; 204  : 		CBaseMonster::MoveExecute( pTargetEnt, vecDir, flInterval );

	push	ecx
	movss	xmm0, DWORD PTR _flInterval$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _vecDir$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pTargetEnt$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?MoveExecute@CBaseMonster@@UAEXPAVCBaseEntity@@ABVVector@@M@Z ; CBaseMonster::MoveExecute
$LN3@MoveExecut:

; 205  : }

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?MoveExecute@CFlyingMonster@@UAEXPAVCBaseEntity@@ABVVector@@M@Z ENDP ; CFlyingMonster::MoveExecute
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xashxt_v0.81_rev.1_with_sources\xashxt_v0.81_rev.1_src\server\monsters\flyingmonster.cpp
_TEXT	SEGMENT
tv65 = -8						; size = 4
_this$ = -4						; size = 4
_pEvent$ = 8						; size = 4
?HandleAnimEvent@CFlyingMonster@@UAEXPAUMonsterEvent_t@@@Z PROC ; CFlyingMonster::HandleAnimEvent
; _this$ = ecx

; 124  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 125  : 	switch( pEvent->event )

	mov	eax, DWORD PTR _pEvent$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR tv65[ebp], ecx
	cmp	DWORD PTR tv65[ebp], 8
	je	SHORT $LN4@HandleAnim
	cmp	DWORD PTR tv65[ebp], 9
	je	SHORT $LN5@HandleAnim
	jmp	SHORT $LN7@HandleAnim
$LN4@HandleAnim:

; 126  : 	{
; 127  : 	case FLYING_AE_FLAP:
; 128  : 		m_flightSpeed = 400;

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@43c80000
	movss	DWORD PTR [edx+2296], xmm0

; 129  : 		break;

	jmp	SHORT $LN2@HandleAnim
$LN5@HandleAnim:

; 130  : 
; 131  : 	case FLYING_AE_FLAPSOUND:
; 132  : 		if ( m_pFlapSound )

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+2308], 0
	je	SHORT $LN6@HandleAnim

; 133  : 			EMIT_SOUND( edict(), CHAN_BODY, m_pFlapSound, 1, ATTN_NORM );	

	push	ecx
	movss	xmm0, DWORD PTR __real@3f4ccccd
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+2308]
	push	edx
	push	4
	mov	ecx, DWORD PTR _this$[ebp]
	call	?edict@CBaseEntity@@QAEPAUedict_s@@XZ	; CBaseEntity::edict
	push	eax
	call	?EMIT_SOUND@@YAXPAUedict_s@@HPBDMM@Z	; EMIT_SOUND
	add	esp, 20					; 00000014H
$LN6@HandleAnim:

; 134  : 		break;

	jmp	SHORT $LN2@HandleAnim
$LN7@HandleAnim:

; 135  : 
; 136  : 	default:
; 137  : 		CBaseMonster::HandleAnimEvent( pEvent );

	mov	eax, DWORD PTR _pEvent$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?HandleAnimEvent@CBaseMonster@@UAEXPAUMonsterEvent_t@@@Z ; CBaseMonster::HandleAnimEvent
$LN2@HandleAnim:

; 138  : 		break;
; 139  : 	}
; 140  : }

	mov	esp, ebp
	pop	ebp
	ret	4
?HandleAnimEvent@CFlyingMonster@@UAEXPAUMonsterEvent_t@@@Z ENDP ; CFlyingMonster::HandleAnimEvent
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xashxt_v0.81_rev.1_with_sources\xashxt_v0.81_rev.1_src\server\monsters\flyingmonster.cpp
_TEXT	SEGMENT
_vecAngles$1 = -24					; size = 12
_diff$2 = -12						; size = 4
_target$3 = -8						; size = 4
_this$ = -4						; size = 4
_speed$ = 8						; size = 4
?ChangeYaw@CFlyingMonster@@UAEMH@Z PROC			; CFlyingMonster::ChangeYaw
; _this$ = ecx

; 90   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	mov	DWORD PTR _this$[ebp], ecx

; 91   : 	if ( pev->movetype == MOVETYPE_FLY )

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	cmp	DWORD PTR [ecx+264], 5
	jne	$LN2@ChangeYaw

; 92   : 	{
; 93   : 		float diff = FlYawDiff();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?FlYawDiff@CBaseMonster@@QAEMXZ		; CBaseMonster::FlYawDiff
	fstp	DWORD PTR _diff$2[ebp]

; 94   : 		float target = 0;

	xorps	xmm0, xmm0
	movss	DWORD PTR _target$3[ebp], xmm0

; 95   : 
; 96   : 		if ( m_IdealActivity != GetStoppedActivity() )

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+408]
	call	edx
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+1960], eax
	je	SHORT $LN6@ChangeYaw

; 97   : 		{
; 98   : 			if ( diff < -20 )

	movss	xmm0, DWORD PTR __real@c1a00000
	comiss	xmm0, DWORD PTR _diff$2[ebp]
	jbe	SHORT $LN4@ChangeYaw

; 99   : 				target = 90;

	movss	xmm0, DWORD PTR __real@42b40000
	movss	DWORD PTR _target$3[ebp], xmm0
	jmp	SHORT $LN6@ChangeYaw
$LN4@ChangeYaw:

; 100  : 			else if ( diff > 20 )

	movss	xmm0, DWORD PTR _diff$2[ebp]
	comiss	xmm0, DWORD PTR __real@41a00000
	jbe	SHORT $LN6@ChangeYaw

; 101  : 				target = -90;

	movss	xmm0, DWORD PTR __real@c2b40000
	movss	DWORD PTR _target$3[ebp], xmm0
$LN6@ChangeYaw:

; 102  : 		}
; 103  : 		Vector vecAngles = GetAbsAngles();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetAbsAngles@CBaseEntity@@QBEABVVector@@XZ ; CBaseEntity::GetAbsAngles
	push	eax
	lea	ecx, DWORD PTR _vecAngles$1[ebp]
	call	??0Vector@@QAE@ABV0@@Z			; Vector::Vector

; 104  : 		vecAngles.z = UTIL_Approach( target, vecAngles.z, 220.0 * gpGlobals->frametime );

	mov	edx, DWORD PTR ?gpGlobals@@3PAUglobalvars_t@@A ; gpGlobals
	cvtss2sd xmm0, DWORD PTR [edx+4]
	mulsd	xmm0, QWORD PTR __real@406b800000000000
	cvtsd2ss xmm0, xmm0
	push	ecx
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _vecAngles$1[ebp+8]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _target$3[ebp]
	movss	DWORD PTR [esp], xmm0
	call	?UTIL_Approach@@YAMMMM@Z		; UTIL_Approach
	add	esp, 12					; 0000000cH
	fstp	DWORD PTR _vecAngles$1[ebp+8]

; 105  : 		SetAbsAngles( vecAngles );

	lea	eax, DWORD PTR _vecAngles$1[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetAbsAngles@CBaseEntity@@QAEXABVVector@@@Z ; CBaseEntity::SetAbsAngles
$LN2@ChangeYaw:

; 106  : 	}
; 107  : 	return CBaseMonster::ChangeYaw( speed );

	mov	ecx, DWORD PTR _speed$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ChangeYaw@CBaseMonster@@UAEMH@Z	; CBaseMonster::ChangeYaw

; 108  : }

	mov	esp, ebp
	pop	ebp
	ret	4
?ChangeYaw@CFlyingMonster@@UAEMH@Z ENDP			; CFlyingMonster::ChangeYaw
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xashxt_v0.81_rev.1_with_sources\xashxt_v0.81_rev.1_src\server\monsters\flyingmonster.cpp
_TEXT	SEGMENT
_vecAngles$ = -20					; size = 12
_stopped$ = -8						; size = 4
_this$ = -4						; size = 4
?Stop@CFlyingMonster@@UAEXXZ PROC			; CFlyingMonster::Stop
; _this$ = ecx

; 74   : { 

	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	mov	DWORD PTR _this$[ebp], ecx

; 75   : 	Activity stopped = GetStoppedActivity();

	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+408]
	call	eax
	mov	DWORD PTR _stopped$[ebp], eax

; 76   : 	if ( m_IdealActivity != stopped )

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+1960]
	cmp	edx, DWORD PTR _stopped$[ebp]
	je	SHORT $LN2@Stop

; 77   : 	{
; 78   : 		m_flightSpeed = 0;

	mov	eax, DWORD PTR _this$[ebp]
	xorps	xmm0, xmm0
	movss	DWORD PTR [eax+2296], xmm0

; 79   : 		m_IdealActivity = stopped;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _stopped$[ebp]
	mov	DWORD PTR [ecx+1960], edx
$LN2@Stop:

; 80   : 	}
; 81   : 	Vector vecAngles = GetAbsAngles();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetAbsAngles@CBaseEntity@@QBEABVVector@@XZ ; CBaseEntity::GetAbsAngles
	push	eax
	lea	ecx, DWORD PTR _vecAngles$[ebp]
	call	??0Vector@@QAE@ABV0@@Z			; Vector::Vector

; 82   : 	vecAngles.z = 0;

	xorps	xmm0, xmm0
	movss	DWORD PTR _vecAngles$[ebp+8], xmm0

; 83   : 	vecAngles.x = 0;

	xorps	xmm0, xmm0
	movss	DWORD PTR _vecAngles$[ebp], xmm0

; 84   : 	SetAbsAngles( vecAngles );

	lea	eax, DWORD PTR _vecAngles$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetAbsAngles@CBaseEntity@@QAEXABVVector@@@Z ; CBaseEntity::SetAbsAngles

; 85   : 	m_vecTravel = g_vecZero;

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 2284				; 000008ecH
	mov	edx, DWORD PTR ?g_vecZero@@3VVector@@B
	mov	DWORD PTR [ecx], edx
	mov	eax, DWORD PTR ?g_vecZero@@3VVector@@B+4
	mov	DWORD PTR [ecx+4], eax
	mov	edx, DWORD PTR ?g_vecZero@@3VVector@@B+8
	mov	DWORD PTR [ecx+8], edx

; 86   : }

	mov	esp, ebp
	pop	ebp
	ret	0
?Stop@CFlyingMonster@@UAEXXZ ENDP			; CFlyingMonster::Stop
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xashxt_v0.81_rev.1_with_sources\xashxt_v0.81_rev.1_src\server\monsters\flyingmonster.cpp
_TEXT	SEGMENT
_vecAngles$ = -16					; size = 12
_this$ = -4						; size = 4
_pevAttacker$ = 8					; size = 4
_iGib$ = 12						; size = 4
?Killed@CFlyingMonster@@UAEXPAUentvars_s@@H@Z PROC	; CFlyingMonster::Killed
; _this$ = ecx

; 112  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx

; 113  : 	pev->movetype = MOVETYPE_STEP;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+264], 4

; 114  : 	ClearBits( pev->flags, FL_ONGROUND );

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR [eax+420]
	and	ecx, -513				; fffffdffH
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR [eax+420], ecx

; 115  : 	Vector vecAngles = GetAbsAngles();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetAbsAngles@CBaseEntity@@QBEABVVector@@XZ ; CBaseEntity::GetAbsAngles
	push	eax
	lea	ecx, DWORD PTR _vecAngles$[ebp]
	call	??0Vector@@QAE@ABV0@@Z			; Vector::Vector

; 116  : 	vecAngles.z = 0;

	xorps	xmm0, xmm0
	movss	DWORD PTR _vecAngles$[ebp+8], xmm0

; 117  : 	vecAngles.x = 0;

	xorps	xmm0, xmm0
	movss	DWORD PTR _vecAngles$[ebp], xmm0

; 118  : 	SetAbsAngles( vecAngles );

	lea	ecx, DWORD PTR _vecAngles$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetAbsAngles@CBaseEntity@@QAEXABVVector@@@Z ; CBaseEntity::SetAbsAngles

; 119  : 	CBaseMonster::Killed( pevAttacker, iGib );

	mov	edx, DWORD PTR _iGib$[ebp]
	push	edx
	mov	eax, DWORD PTR _pevAttacker$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Killed@CBaseMonster@@UAEXPAUentvars_s@@H@Z ; CBaseMonster::Killed

; 120  : }

	mov	esp, ebp
	pop	ebp
	ret	8
?Killed@CFlyingMonster@@UAEXPAUentvars_s@@H@Z ENDP	; CFlyingMonster::Killed
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xashxt_v0.81_rev.1_with_sources\xashxt_v0.81_rev.1_src\server\monsters\flyingmonster.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetStoppedActivity@CFlyingMonster@@UAE?AW4Activity@@XZ PROC ; CFlyingMonster::GetStoppedActivity
; _this$ = ecx

; 65   : { 

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 66   : 	if ( pev->movetype != MOVETYPE_FLY )		// UNDONE: Ground idle here, IDLE may be something else

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	cmp	DWORD PTR [ecx+264], 5
	je	SHORT $LN2@GetStopped

; 67   : 		return ACT_IDLE;

	mov	eax, 1
	jmp	SHORT $LN1@GetStopped
$LN2@GetStopped:

; 68   : 
; 69   : 	return ACT_HOVER; 

	mov	eax, 50					; 00000032H
$LN1@GetStopped:

; 70   : }

	mov	esp, ebp
	pop	ebp
	ret	0
?GetStoppedActivity@CFlyingMonster@@UAE?AW4Activity@@XZ ENDP ; CFlyingMonster::GetStoppedActivity
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xashxt_v0.81_rev.1_with_sources\xashxt_v0.81_rev.1_src\server\monsters\flyingmonster.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
_vecStart$ = 8						; size = 4
_vecEnd$ = 12						; size = 4
_flDist$ = 16						; size = 4
_pTargetEnt$ = 20					; size = 4
_pApex$ = 24						; size = 4
?FTriangulate@CFlyingMonster@@UAEHABVVector@@0MPAVCBaseEntity@@PAV2@@Z PROC ; CFlyingMonster::FTriangulate
; _this$ = ecx

; 59   : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 60   : 	return CBaseMonster::FTriangulate( vecStart, vecEnd, flDist, pTargetEnt, pApex );

	mov	eax, DWORD PTR _pApex$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pTargetEnt$[ebp]
	push	ecx
	push	ecx
	movss	xmm0, DWORD PTR _flDist$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _vecEnd$[ebp]
	push	edx
	mov	eax, DWORD PTR _vecStart$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FTriangulate@CBaseMonster@@UAEHABVVector@@0MPAVCBaseEntity@@PAV2@@Z ; CBaseMonster::FTriangulate

; 61   : }

	mov	esp, ebp
	pop	ebp
	ret	20					; 00000014H
?FTriangulate@CFlyingMonster@@UAEHABVVector@@0MPAVCBaseEntity@@PAV2@@Z ENDP ; CFlyingMonster::FTriangulate
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xashxt_v0.81_rev.1_with_sources\xashxt_v0.81_rev.1_src\server\monsters\flyingmonster.cpp
_TEXT	SEGMENT
$T1 = -144						; size = 12
$T2 = -132						; size = 12
$T3 = -120						; size = 12
$T4 = -108						; size = 12
$T5 = -96						; size = 12
$T6 = -84						; size = 12
$T7 = -72						; size = 12
_tr$ = -60						; size = 56
_this$ = -4						; size = 4
_vecStart$ = 8						; size = 4
_vecEnd$ = 12						; size = 4
_pTarget$ = 16						; size = 4
_pflDist$ = 20						; size = 4
?CheckLocalMove@CFlyingMonster@@UAEHABVVector@@0PAVCBaseEntity@@PAM@Z PROC ; CFlyingMonster::CheckLocalMove
; _this$ = ecx

; 26   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 144				; 00000090H
	mov	DWORD PTR _this$[ebp], ecx

; 27   : 	// UNDONE: need to check more than the endpoint
; 28   : 	if (FBitSet(pev->flags, FL_SWIM) && (UTIL_PointContents(vecEnd) != CONTENTS_WATER))

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [ecx+420]
	and	edx, 2
	je	SHORT $LN2@CheckLocal
	mov	eax, DWORD PTR _vecEnd$[ebp]
	push	eax
	call	?UTIL_PointContents@@YAHABVVector@@@Z	; UTIL_PointContents
	add	esp, 4
	cmp	eax, -3					; fffffffdH
	je	SHORT $LN2@CheckLocal

; 29   : 	{
; 30   : 		// ALERT(at_aiconsole, "can't swim out of water\n");
; 31   : 		return FALSE;

	xor	eax, eax
	jmp	$LN1@CheckLocal
$LN2@CheckLocal:

; 32   : 	}
; 33   : 
; 34   : 	TraceResult tr;

	lea	ecx, DWORD PTR _tr$[ebp]
	call	??0gametrace_s@@QAE@XZ

; 35   : 
; 36   : 	UTIL_TraceHull( vecStart + Vector( 0, 0, 32 ), vecEnd + Vector( 0, 0, 32 ), dont_ignore_monsters, large_hull, edict(), &tr );

	lea	ecx, DWORD PTR _tr$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?edict@CBaseEntity@@QAEPAUedict_s@@XZ	; CBaseEntity::edict
	push	eax
	push	2
	push	0
	push	ecx
	movss	xmm0, DWORD PTR __real@42000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	xorps	xmm0, xmm0
	movss	DWORD PTR [esp], xmm0
	push	ecx
	xorps	xmm0, xmm0
	movss	DWORD PTR [esp], xmm0
	lea	ecx, DWORD PTR $T7[ebp]
	call	??0Vector@@QAE@MMM@Z			; Vector::Vector
	push	eax
	lea	edx, DWORD PTR $T6[ebp]
	push	edx
	mov	ecx, DWORD PTR _vecEnd$[ebp]
	call	??HVector@@QBE?AV0@ABV0@@Z		; Vector::operator+
	push	eax
	push	ecx
	movss	xmm0, DWORD PTR __real@42000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	xorps	xmm0, xmm0
	movss	DWORD PTR [esp], xmm0
	push	ecx
	xorps	xmm0, xmm0
	movss	DWORD PTR [esp], xmm0
	lea	ecx, DWORD PTR $T5[ebp]
	call	??0Vector@@QAE@MMM@Z			; Vector::Vector
	push	eax
	lea	eax, DWORD PTR $T4[ebp]
	push	eax
	mov	ecx, DWORD PTR _vecStart$[ebp]
	call	??HVector@@QBE?AV0@ABV0@@Z		; Vector::operator+
	push	eax
	call	?UTIL_TraceHull@@YAXABVVector@@0W4IGNORE_MONSTERS@@HPAUedict_s@@PAUgametrace_s@@@Z ; UTIL_TraceHull
	add	esp, 24					; 00000018H

; 37   : 
; 38   : 	// ALERT( at_console, "%.0f %.0f %.0f : ", vecStart.x, vecStart.y, vecStart.z );
; 39   : 	// ALERT( at_console, "%.0f %.0f %.0f\n", vecEnd.x, vecEnd.y, vecEnd.z );
; 40   : 
; 41   : 	if (pflDist)

	cmp	DWORD PTR _pflDist$[ebp], 0
	je	SHORT $LN3@CheckLocal

; 42   : 	{
; 43   : 		*pflDist = ( (tr.vecEndPos - Vector( 0, 0, 32 )) - vecStart ).Length();// get the distance.

	mov	ecx, DWORD PTR _vecStart$[ebp]
	push	ecx
	lea	edx, DWORD PTR $T3[ebp]
	push	edx
	push	ecx
	movss	xmm0, DWORD PTR __real@42000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	xorps	xmm0, xmm0
	movss	DWORD PTR [esp], xmm0
	push	ecx
	xorps	xmm0, xmm0
	movss	DWORD PTR [esp], xmm0
	lea	ecx, DWORD PTR $T2[ebp]
	call	??0Vector@@QAE@MMM@Z			; Vector::Vector
	push	eax
	lea	eax, DWORD PTR $T1[ebp]
	push	eax
	lea	ecx, DWORD PTR _tr$[ebp+20]
	call	??GVector@@QBE?AV0@ABV0@@Z		; Vector::operator-
	mov	ecx, eax
	call	??GVector@@QBE?AV0@ABV0@@Z		; Vector::operator-
	mov	ecx, eax
	call	?Length@Vector@@QBEMXZ			; Vector::Length
	mov	ecx, DWORD PTR _pflDist$[ebp]
	fstp	DWORD PTR [ecx]
$LN3@CheckLocal:

; 44   : 	}
; 45   : 
; 46   : 	// ALERT( at_console, "check %d %d %f\n", tr.fStartSolid, tr.fAllSolid, tr.flFraction );
; 47   : 	if (tr.fStartSolid || tr.flFraction < 1.0)

	cmp	DWORD PTR _tr$[ebp+4], 0
	jne	SHORT $LN5@CheckLocal
	cvtss2sd xmm0, DWORD PTR _tr$[ebp+16]
	movsd	xmm1, QWORD PTR __real@3ff0000000000000
	comisd	xmm1, xmm0
	jbe	SHORT $LN4@CheckLocal
$LN5@CheckLocal:

; 48   : 	{
; 49   : 		if ( pTarget && pTarget->edict() == gpGlobals->trace_ent )

	cmp	DWORD PTR _pTarget$[ebp], 0
	je	SHORT $LN6@CheckLocal
	mov	ecx, DWORD PTR _pTarget$[ebp]
	call	?edict@CBaseEntity@@QAEPAUedict_s@@XZ	; CBaseEntity::edict
	mov	edx, DWORD PTR ?gpGlobals@@3PAUglobalvars_t@@A ; gpGlobals
	cmp	eax, DWORD PTR [edx+116]
	jne	SHORT $LN6@CheckLocal

; 50   : 			return LOCALMOVE_VALID;

	mov	eax, 2
	jmp	SHORT $LN1@CheckLocal
$LN6@CheckLocal:

; 51   : 		return LOCALMOVE_INVALID;

	xor	eax, eax
	jmp	SHORT $LN1@CheckLocal
$LN4@CheckLocal:

; 52   : 	}
; 53   : 
; 54   : 	return LOCALMOVE_VALID;

	mov	eax, 2
$LN1@CheckLocal:

; 55   : }

	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
?CheckLocalMove@CFlyingMonster@@UAEHABVVector@@0PAVCBaseEntity@@PAM@Z ENDP ; CFlyingMonster::CheckLocalMove
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xashxt_v0.81_rev.1_with_sources\xashxt_v0.81_rev.1_src\server\cbase.h
;	COMDAT ?edict@CBaseEntity@@QAEPAUedict_s@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?edict@CBaseEntity@@QAEPAUedict_s@@XZ PROC		; CBaseEntity::edict, COMDAT
; _this$ = ecx

; 696  : 	edict_t *edict() { return ENT( pev ); };

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	call	?ENT@@YAPAUedict_s@@PBUentvars_s@@@Z	; ENT
	add	esp, 4
	mov	esp, ebp
	pop	ebp
	ret	0
?edict@CBaseEntity@@QAEPAUedict_s@@XZ ENDP		; CBaseEntity::edict
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xashxt_v0.81_rev.1_with_sources\xashxt_v0.81_rev.1_src\server\util.h
;	COMDAT ?EMIT_SOUND@@YAXPAUedict_s@@HPBDMM@Z
_TEXT	SEGMENT
_entity$ = 8						; size = 4
_channel$ = 12						; size = 4
_sample$ = 16						; size = 4
_volume$ = 20						; size = 4
_attenuation$ = 24					; size = 4
?EMIT_SOUND@@YAXPAUedict_s@@HPBDMM@Z PROC		; EMIT_SOUND, COMDAT

; 609  : {

	push	ebp
	mov	ebp, esp

; 610  : 	EMIT_SOUND_DYN( entity, channel, sample, volume, attenuation, 0, PITCH_NORM );

	push	100					; 00000064H
	push	0
	push	ecx
	movss	xmm0, DWORD PTR _attenuation$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _volume$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _sample$[ebp]
	push	eax
	mov	ecx, DWORD PTR _channel$[ebp]
	push	ecx
	mov	edx, DWORD PTR _entity$[ebp]
	push	edx
	call	?EMIT_SOUND_DYN@@YAXPAUedict_s@@HPBDMMHH@Z ; EMIT_SOUND_DYN
	add	esp, 28					; 0000001cH

; 611  : }

	pop	ebp
	ret	0
?EMIT_SOUND@@YAXPAUedict_s@@HPBDMM@Z ENDP		; EMIT_SOUND
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xashxt_v0.81_rev.1_with_sources\xashxt_v0.81_rev.1_src\server\util.h
;	COMDAT ?ENT@@YAPAUedict_s@@PBUentvars_s@@@Z
_TEXT	SEGMENT
_pev$ = 8						; size = 4
?ENT@@YAPAUedict_s@@PBUentvars_s@@@Z PROC		; ENT, COMDAT

; 151  : 	inline edict_t *ENT(const entvars_t *pev)	{ return DBG_EntOfVars(pev); }

	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR _pev$[ebp]
	push	eax
	call	?DBG_EntOfVars@@YAPAUedict_s@@PBUentvars_s@@@Z ; DBG_EntOfVars
	add	esp, 4
	pop	ebp
	ret	0
?ENT@@YAPAUedict_s@@PBUentvars_s@@@Z ENDP		; ENT
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??0gametrace_s@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0gametrace_s@@QAE@XZ PROC				; gametrace_s::gametrace_s, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 20					; 00000014H
	call	??0Vector@@QAE@XZ			; Vector::Vector
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 36					; 00000024H
	call	??0Vector@@QAE@XZ			; Vector::Vector
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0gametrace_s@@QAE@XZ ENDP				; gametrace_s::gametrace_s
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xashxt_v0.81_rev.1_with_sources\xashxt_v0.81_rev.1_src\game_shared\vector.h
;	COMDAT ??D@YA?AVVector@@MABV0@@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
_fl$ = 12						; size = 4
_v$ = 16						; size = 4
??D@YA?AVVector@@MABV0@@Z PROC				; operator*, COMDAT

; 277  : inline Vector operator* ( float fl, const Vector& v ) { return v * fl; }

	push	ebp
	mov	ebp, esp
	push	ecx
	movss	xmm0, DWORD PTR _fl$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	push	eax
	mov	ecx, DWORD PTR _v$[ebp]
	call	??DVector@@QBE?AV0@M@Z			; Vector::operator*
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	pop	ebp
	ret	0
??D@YA?AVVector@@MABV0@@Z ENDP				; operator*
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xashxt_v0.81_rev.1_with_sources\xashxt_v0.81_rev.1_src\game_shared\vector.h
;	COMDAT ?Normalize@Vector@@QBE?AV1@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
_flLen$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?Normalize@Vector@@QBE?AV1@XZ PROC			; Vector::Normalize, COMDAT
; _this$ = ecx

; 229  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 230  : 		float flLen = Length();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Length@Vector@@QBEMXZ			; Vector::Length
	fstp	DWORD PTR _flLen$[ebp]

; 231  : 
; 232  : 		if( flLen )

	movss	xmm0, DWORD PTR _flLen$[ebp]
	ucomiss	xmm0, DWORD PTR __real@00000000
	lahf
	test	ah, 68					; 00000044H
	jnp	SHORT $LN2@Normalize

; 233  : 		{
; 234  : 			flLen = 1.0f / flLen;

	movss	xmm0, DWORD PTR __real@3f800000
	divss	xmm0, DWORD PTR _flLen$[ebp]
	movss	DWORD PTR _flLen$[ebp], xmm0

; 235  : 			return Vector( x * flLen, y * flLen, z * flLen );

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+8]
	mulss	xmm0, DWORD PTR _flLen$[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+4]
	mulss	xmm0, DWORD PTR _flLen$[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx]
	mulss	xmm0, DWORD PTR _flLen$[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0Vector@@QAE@MMM@Z			; Vector::Vector
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	SHORT $LN1@Normalize
$LN2@Normalize:

; 236  : 		}
; 237  : 
; 238  : 		return *this; // can't normalize

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0Vector@@QAE@ABV0@@Z			; Vector::Vector
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
$LN1@Normalize:

; 239  : 	}

	mov	esp, ebp
	pop	ebp
	ret	4
?Normalize@Vector@@QBE?AV1@XZ ENDP			; Vector::Normalize
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xashxt_v0.81_rev.1_with_sources\xashxt_v0.81_rev.1_src\game_shared\vector.h
;	COMDAT ?Length@Vector@@QBEMXZ
_TEXT	SEGMENT
tv91 = -8						; size = 4
_this$ = -4						; size = 4
?Length@Vector@@QBEMXZ PROC				; Vector::Length, COMDAT
; _this$ = ecx

; 223  : 	inline float Length(void) const		{ return sqrt( x*x + y*y + z*z ); }

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR [ecx]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [edx+4]
	mulss	xmm1, DWORD PTR [eax+4]
	addss	xmm0, xmm1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [ecx+8]
	mulss	xmm1, DWORD PTR [edx+8]
	addss	xmm0, xmm1
	cvtss2sd xmm0, xmm0
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	call	_sqrt
	add	esp, 8
	fstp	DWORD PTR tv91[ebp]
	fld	DWORD PTR tv91[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
?Length@Vector@@QBEMXZ ENDP				; Vector::Length
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xashxt_v0.81_rev.1_with_sources\xashxt_v0.81_rev.1_src\game_shared\vector.h
;	COMDAT ??DVector@@QBE?AV0@M@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
_fl$ = 12						; size = 4
??DVector@@QBE?AV0@M@Z PROC				; Vector::operator*, COMDAT
; _this$ = ecx

; 150  : 	inline Vector operator*(float fl) const		{ return Vector(x*fl, y*fl, z*fl);	   }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+8]
	mulss	xmm0, DWORD PTR _fl$[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+4]
	mulss	xmm0, DWORD PTR _fl$[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx]
	mulss	xmm0, DWORD PTR _fl$[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0Vector@@QAE@MMM@Z			; Vector::Vector
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	8
??DVector@@QBE?AV0@M@Z ENDP				; Vector::operator*
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xashxt_v0.81_rev.1_with_sources\xashxt_v0.81_rev.1_src\game_shared\vector.h
;	COMDAT ??GVector@@QBE?AV0@ABV0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
_v$ = 12						; size = 4
??GVector@@QBE?AV0@ABV0@@Z PROC				; Vector::operator-, COMDAT
; _this$ = ecx

; 147  : 	inline Vector operator-(const Vector& v) const	{ return Vector(x-v.x, y-v.y, z-v.z);	   }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [eax+8]
	subss	xmm0, DWORD PTR [ecx+8]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [edx+4]
	subss	xmm0, DWORD PTR [eax+4]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [ecx]
	subss	xmm0, DWORD PTR [edx]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0Vector@@QAE@MMM@Z			; Vector::Vector
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	8
??GVector@@QBE?AV0@ABV0@@Z ENDP				; Vector::operator-
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xashxt_v0.81_rev.1_with_sources\xashxt_v0.81_rev.1_src\game_shared\vector.h
;	COMDAT ??HVector@@QBE?AV0@ABV0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
_v$ = 12						; size = 4
??HVector@@QBE?AV0@ABV0@@Z PROC				; Vector::operator+, COMDAT
; _this$ = ecx

; 146  : 	inline Vector operator+(const Vector& v) const	{ return Vector(x+v.x, y+v.y, z+v.z);	   }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [eax+8]
	addss	xmm0, DWORD PTR [ecx+8]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [edx+4]
	addss	xmm0, DWORD PTR [eax+4]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [ecx]
	addss	xmm0, DWORD PTR [edx]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0Vector@@QAE@MMM@Z			; Vector::Vector
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	8
??HVector@@QBE?AV0@ABV0@@Z ENDP				; Vector::operator+
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xashxt_v0.81_rev.1_with_sources\xashxt_v0.81_rev.1_src\game_shared\vector.h
;	COMDAT ??0Vector@@QAE@ABV0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_v$ = 8							; size = 4
??0Vector@@QAE@ABV0@@Z PROC				; Vector::Vector, COMDAT
; _this$ = ecx

; 133  : 	inline Vector(const Vector& v)		{ x = v.x; y = v.y; z = v.z;		   }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _v$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _v$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _v$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR [eax+8], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0Vector@@QAE@ABV0@@Z ENDP				; Vector::Vector
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xashxt_v0.81_rev.1_with_sources\xashxt_v0.81_rev.1_src\game_shared\vector.h
;	COMDAT ??0Vector@@QAE@MMM@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_X$ = 8							; size = 4
_Y$ = 12						; size = 4
_Z$ = 16						; size = 4
??0Vector@@QAE@MMM@Z PROC				; Vector::Vector, COMDAT
; _this$ = ecx

; 132  : 	inline Vector(float X, float Y, float Z)	{ x = X; y = Y; z = Z;                     }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _X$[ebp]
	movss	DWORD PTR [eax], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _Y$[ebp]
	movss	DWORD PTR [ecx+4], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _Z$[ebp]
	movss	DWORD PTR [edx+8], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
??0Vector@@QAE@MMM@Z ENDP				; Vector::Vector
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xashxt_v0.81_rev.1_with_sources\xashxt_v0.81_rev.1_src\game_shared\vector.h
;	COMDAT ??0Vector@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0Vector@@QAE@XZ PROC					; Vector::Vector, COMDAT
; _this$ = ecx

; 131  : 	inline Vector(void)				{ }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0Vector@@QAE@XZ ENDP					; Vector::Vector
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??__G@YGXPAX0IIP6EPAX00@Z@Z
_TEXT	SEGMENT
tv66 = -4						; size = 4
___t$ = 8						; size = 4
___u$ = 12						; size = 4
___s$ = 16						; size = 4
___n$ = 20						; size = 4
___f$ = 24						; size = 4
??__G@YGXPAX0IIP6EPAX00@Z@Z PROC			; `vector copy constructor iterator', COMDAT
	push	ebp
	mov	ebp, esp
	push	ecx
$LN2@vector:
	mov	eax, DWORD PTR ___n$[ebp]
	mov	DWORD PTR tv66[ebp], eax
	mov	ecx, DWORD PTR ___n$[ebp]
	sub	ecx, 1
	mov	DWORD PTR ___n$[ebp], ecx
	cmp	DWORD PTR tv66[ebp], 0
	jbe	SHORT $LN1@vector
	mov	edx, DWORD PTR ___u$[ebp]
	push	edx
	mov	ecx, DWORD PTR ___t$[ebp]
	call	DWORD PTR ___f$[ebp]
	mov	eax, DWORD PTR ___t$[ebp]
	add	eax, DWORD PTR ___s$[ebp]
	mov	DWORD PTR ___t$[ebp], eax
	mov	ecx, DWORD PTR ___u$[ebp]
	add	ecx, DWORD PTR ___s$[ebp]
	mov	DWORD PTR ___u$[ebp], ecx
	jmp	SHORT $LN2@vector
$LN1@vector:
	mov	esp, ebp
	pop	ebp
	ret	20					; 00000014H
??__G@YGXPAX0IIP6EPAX00@Z@Z ENDP			; `vector copy constructor iterator'
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_H@YGXPAXIIP6EPAX0@Z@Z
_TEXT	SEGMENT
tv66 = -4						; size = 4
___t$ = 8						; size = 4
___s$ = 12						; size = 4
___n$ = 16						; size = 4
___f$ = 20						; size = 4
??_H@YGXPAXIIP6EPAX0@Z@Z PROC				; `vector constructor iterator', COMDAT
	push	ebp
	mov	ebp, esp
	push	ecx
$LN2@vector:
	mov	eax, DWORD PTR ___n$[ebp]
	mov	DWORD PTR tv66[ebp], eax
	mov	ecx, DWORD PTR ___n$[ebp]
	sub	ecx, 1
	mov	DWORD PTR ___n$[ebp], ecx
	cmp	DWORD PTR tv66[ebp], 0
	jbe	SHORT $LN1@vector
	mov	ecx, DWORD PTR ___t$[ebp]
	call	DWORD PTR ___f$[ebp]
	mov	edx, DWORD PTR ___t$[ebp]
	add	edx, DWORD PTR ___s$[ebp]
	mov	DWORD PTR ___t$[ebp], edx
	jmp	SHORT $LN2@vector
$LN1@vector:
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
??_H@YGXPAXIIP6EPAX0@Z@Z ENDP				; `vector constructor iterator'
_TEXT	ENDS
END
