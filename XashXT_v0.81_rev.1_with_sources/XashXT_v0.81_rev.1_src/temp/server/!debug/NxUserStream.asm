; Listing generated by Microsoft (R) Optimizing Compiler Version 19.16.27045.0 

	TITLE	C:\Users\USER\Downloads\XashXT_v0.81_rev.1_with_sources\XashXT_v0.81_rev.1_src\server\physics\NxUserStream.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

CONST	SEGMENT
$SG71840 DB	'%s/%s', 00H
	ORG $+2
$SG71841 DB	'wb', 00H
	ORG $+1
$SG71843 DB	'fp != NULL', 00H
	ORG $+1
$SG71842 DB	'c:\users\user\downloads\xashxt_v0.81_rev.1_with_sources\'
	DB	'xashxt_v0.81_rev.1_src\server\physics\nxuserstream.cpp', 00H
	ORG $+1
$SG71907 DB	'readBuffer: buffer is overrun', 0aH, 00H
	ORG $+1
$SG71908 DB	'c', 00H, ':', 00H, '\', 00H, 'u', 00H, 's', 00H, 'e', 00H
	DB	'r', 00H, 's', 00H, '\', 00H, 'u', 00H, 's', 00H, 'e', 00H, 'r'
	DB	00H, '\', 00H, 'd', 00H, 'o', 00H, 'w', 00H, 'n', 00H, 'l', 00H
	DB	'o', 00H, 'a', 00H, 'd', 00H, 's', 00H, '\', 00H, 'x', 00H, 'a'
	DB	00H, 's', 00H, 'h', 00H, 'x', 00H, 't', 00H, '_', 00H, 'v', 00H
	DB	'0', 00H, '.', 00H, '8', 00H, '1', 00H, '_', 00H, 'r', 00H, 'e'
	DB	00H, 'v', 00H, '.', 00H, '1', 00H, '_', 00H, 'w', 00H, 'i', 00H
	DB	't', 00H, 'h', 00H, '_', 00H, 's', 00H, 'o', 00H, 'u', 00H, 'r'
	DB	00H, 'c', 00H, 'e', 00H, 's', 00H, '\', 00H, 'x', 00H, 'a', 00H
	DB	's', 00H, 'h', 00H, 'x', 00H, 't', 00H, '_', 00H, 'v', 00H, '0'
	DB	00H, '.', 00H, '8', 00H, '1', 00H, '_', 00H, 'r', 00H, 'e', 00H
	DB	'v', 00H, '.', 00H, '1', 00H, '_', 00H, 's', 00H, 'r', 00H, 'c'
	DB	00H, '\', 00H, 's', 00H, 'e', 00H, 'r', 00H, 'v', 00H, 'e', 00H
	DB	'r', 00H, '\', 00H, 'p', 00H, 'h', 00H, 'y', 00H, 's', 00H, 'i'
	DB	00H, 'c', 00H, 's', 00H, '\', 00H, 'n', 00H, 'x', 00H, 'u', 00H
	DB	's', 00H, 'e', 00H, 'r', 00H, 's', 00H, 't', 00H, 'r', 00H, 'e'
	DB	00H, 'a', 00H, 'm', 00H, '.', 00H, 'c', 00H, 'p', 00H, 'p', 00H
	DB	00H, 00H
	ORG $+2
$SG71909 DB	'r', 00H, 'e', 00H, 'a', 00H, 'd', 00H, '_', 00H, 's', 00H
	DB	'i', 00H, 'z', 00H, 'e', 00H, 00H, 00H
$SG71919 DB	'w', 00H, 00H, 00H
$SG71918 DB	'c', 00H, ':', 00H, '\', 00H, 'u', 00H, 's', 00H, 'e', 00H
	DB	'r', 00H, 's', 00H, '\', 00H, 'u', 00H, 's', 00H, 'e', 00H, 'r'
	DB	00H, '\', 00H, 'd', 00H, 'o', 00H, 'w', 00H, 'n', 00H, 'l', 00H
	DB	'o', 00H, 'a', 00H, 'd', 00H, 's', 00H, '\', 00H, 'x', 00H, 'a'
	DB	00H, 's', 00H, 'h', 00H, 'x', 00H, 't', 00H, '_', 00H, 'v', 00H
	DB	'0', 00H, '.', 00H, '8', 00H, '1', 00H, '_', 00H, 'r', 00H, 'e'
	DB	00H, 'v', 00H, '.', 00H, '1', 00H, '_', 00H, 'w', 00H, 'i', 00H
	DB	't', 00H, 'h', 00H, '_', 00H, 's', 00H, 'o', 00H, 'u', 00H, 'r'
	DB	00H, 'c', 00H, 'e', 00H, 's', 00H, '\', 00H, 'x', 00H, 'a', 00H
	DB	's', 00H, 'h', 00H, 'x', 00H, 't', 00H, '_', 00H, 'v', 00H, '0'
	DB	00H, '.', 00H, '8', 00H, '1', 00H, '_', 00H, 'r', 00H, 'e', 00H
	DB	'v', 00H, '.', 00H, '1', 00H, '_', 00H, 's', 00H, 'r', 00H, 'c'
	DB	00H, '\', 00H, 's', 00H, 'e', 00H, 'r', 00H, 'v', 00H, 'e', 00H
	DB	'r', 00H, '\', 00H, 'p', 00H, 'h', 00H, 'y', 00H, 's', 00H, 'i'
	DB	00H, 'c', 00H, 's', 00H, '\', 00H, 'n', 00H, 'x', 00H, 'u', 00H
	DB	's', 00H, 'e', 00H, 'r', 00H, 's', 00H, 't', 00H, 'r', 00H, 'e'
	DB	00H, 'a', 00H, 'm', 00H, '.', 00H, 'c', 00H, 'p', 00H, 'p', 00H
	DB	00H, 00H
	ORG $+2
$SG71928 DB	'c', 00H, ':', 00H, '\', 00H, 'u', 00H, 's', 00H, 'e', 00H
	DB	'r', 00H, 's', 00H, '\', 00H, 'u', 00H, 's', 00H, 'e', 00H, 'r'
	DB	00H, '\', 00H, 'd', 00H, 'o', 00H, 'w', 00H, 'n', 00H, 'l', 00H
	DB	'o', 00H, 'a', 00H, 'd', 00H, 's', 00H, '\', 00H, 'x', 00H, 'a'
	DB	00H, 's', 00H, 'h', 00H, 'x', 00H, 't', 00H, '_', 00H, 'v', 00H
	DB	'0', 00H, '.', 00H, '8', 00H, '1', 00H, '_', 00H, 'r', 00H, 'e'
	DB	00H, 'v', 00H, '.', 00H, '1', 00H, '_', 00H, 'w', 00H, 'i', 00H
	DB	't', 00H, 'h', 00H, '_', 00H, 's', 00H, 'o', 00H, 'u', 00H, 'r'
	DB	00H, 'c', 00H, 'e', 00H, 's', 00H, '\', 00H, 'x', 00H, 'a', 00H
	DB	's', 00H, 'h', 00H, 'x', 00H, 't', 00H, '_', 00H, 'v', 00H, '0'
	DB	00H, '.', 00H, '8', 00H, '1', 00H, '_', 00H, 'r', 00H, 'e', 00H
	DB	'v', 00H, '.', 00H, '1', 00H, '_', 00H, 's', 00H, 'r', 00H, 'c'
	DB	00H, '\', 00H, 's', 00H, 'e', 00H, 'r', 00H, 'v', 00H, 'e', 00H
	DB	'r', 00H, '\', 00H, 'p', 00H, 'h', 00H, 'y', 00H, 's', 00H, 'i'
	DB	00H, 'c', 00H, 's', 00H, '\', 00H, 'n', 00H, 'x', 00H, 'u', 00H
	DB	's', 00H, 'e', 00H, 'r', 00H, 's', 00H, 't', 00H, 'r', 00H, 'e'
	DB	00H, 'a', 00H, 'm', 00H, '.', 00H, 'c', 00H, 'p', 00H, 'p', 00H
	DB	00H, 00H
	ORG $+2
$SG71929 DB	'w', 00H, 'w', 00H, 00H, 00H
	ORG $+2
$SG71938 DB	'c', 00H, ':', 00H, '\', 00H, 'u', 00H, 's', 00H, 'e', 00H
	DB	'r', 00H, 's', 00H, '\', 00H, 'u', 00H, 's', 00H, 'e', 00H, 'r'
	DB	00H, '\', 00H, 'd', 00H, 'o', 00H, 'w', 00H, 'n', 00H, 'l', 00H
	DB	'o', 00H, 'a', 00H, 'd', 00H, 's', 00H, '\', 00H, 'x', 00H, 'a'
	DB	00H, 's', 00H, 'h', 00H, 'x', 00H, 't', 00H, '_', 00H, 'v', 00H
	DB	'0', 00H, '.', 00H, '8', 00H, '1', 00H, '_', 00H, 'r', 00H, 'e'
	DB	00H, 'v', 00H, '.', 00H, '1', 00H, '_', 00H, 'w', 00H, 'i', 00H
	DB	't', 00H, 'h', 00H, '_', 00H, 's', 00H, 'o', 00H, 'u', 00H, 'r'
	DB	00H, 'c', 00H, 'e', 00H, 's', 00H, '\', 00H, 'x', 00H, 'a', 00H
	DB	's', 00H, 'h', 00H, 'x', 00H, 't', 00H, '_', 00H, 'v', 00H, '0'
	DB	00H, '.', 00H, '8', 00H, '1', 00H, '_', 00H, 'r', 00H, 'e', 00H
	DB	'v', 00H, '.', 00H, '1', 00H, '_', 00H, 's', 00H, 'r', 00H, 'c'
	DB	00H, '\', 00H, 's', 00H, 'e', 00H, 'r', 00H, 'v', 00H, 'e', 00H
	DB	'r', 00H, '\', 00H, 'p', 00H, 'h', 00H, 'y', 00H, 's', 00H, 'i'
	DB	00H, 'c', 00H, 's', 00H, '\', 00H, 'n', 00H, 'x', 00H, 'u', 00H
	DB	's', 00H, 'e', 00H, 'r', 00H, 's', 00H, 't', 00H, 'r', 00H, 'e'
	DB	00H, 'a', 00H, 'm', 00H, '.', 00H, 'c', 00H, 'p', 00H, 'p', 00H
	DB	00H, 00H
	ORG $+2
$SG71939 DB	'w', 00H, 00H, 00H
$SG71949 DB	'w', 00H, 00H, 00H
$SG71948 DB	'c', 00H, ':', 00H, '\', 00H, 'u', 00H, 's', 00H, 'e', 00H
	DB	'r', 00H, 's', 00H, '\', 00H, 'u', 00H, 's', 00H, 'e', 00H, 'r'
	DB	00H, '\', 00H, 'd', 00H, 'o', 00H, 'w', 00H, 'n', 00H, 'l', 00H
	DB	'o', 00H, 'a', 00H, 'd', 00H, 's', 00H, '\', 00H, 'x', 00H, 'a'
	DB	00H, 's', 00H, 'h', 00H, 'x', 00H, 't', 00H, '_', 00H, 'v', 00H
	DB	'0', 00H, '.', 00H, '8', 00H, '1', 00H, '_', 00H, 'r', 00H, 'e'
	DB	00H, 'v', 00H, '.', 00H, '1', 00H, '_', 00H, 'w', 00H, 'i', 00H
	DB	't', 00H, 'h', 00H, '_', 00H, 's', 00H, 'o', 00H, 'u', 00H, 'r'
	DB	00H, 'c', 00H, 'e', 00H, 's', 00H, '\', 00H, 'x', 00H, 'a', 00H
	DB	's', 00H, 'h', 00H, 'x', 00H, 't', 00H, '_', 00H, 'v', 00H, '0'
	DB	00H, '.', 00H, '8', 00H, '1', 00H, '_', 00H, 'r', 00H, 'e', 00H
	DB	'v', 00H, '.', 00H, '1', 00H, '_', 00H, 's', 00H, 'r', 00H, 'c'
	DB	00H, '\', 00H, 's', 00H, 'e', 00H, 'r', 00H, 'v', 00H, 'e', 00H
	DB	'r', 00H, '\', 00H, 'p', 00H, 'h', 00H, 'y', 00H, 's', 00H, 'i'
	DB	00H, 'c', 00H, 's', 00H, '\', 00H, 'n', 00H, 'x', 00H, 'u', 00H
	DB	's', 00H, 'e', 00H, 'r', 00H, 's', 00H, 't', 00H, 'r', 00H, 'e'
	DB	00H, 'a', 00H, 'm', 00H, '.', 00H, 'c', 00H, 'p', 00H, 'p', 00H
	DB	00H, 00H
	ORG $+2
$SG71958 DB	'c', 00H, ':', 00H, '\', 00H, 'u', 00H, 's', 00H, 'e', 00H
	DB	'r', 00H, 's', 00H, '\', 00H, 'u', 00H, 's', 00H, 'e', 00H, 'r'
	DB	00H, '\', 00H, 'd', 00H, 'o', 00H, 'w', 00H, 'n', 00H, 'l', 00H
	DB	'o', 00H, 'a', 00H, 'd', 00H, 's', 00H, '\', 00H, 'x', 00H, 'a'
	DB	00H, 's', 00H, 'h', 00H, 'x', 00H, 't', 00H, '_', 00H, 'v', 00H
	DB	'0', 00H, '.', 00H, '8', 00H, '1', 00H, '_', 00H, 'r', 00H, 'e'
	DB	00H, 'v', 00H, '.', 00H, '1', 00H, '_', 00H, 'w', 00H, 'i', 00H
	DB	't', 00H, 'h', 00H, '_', 00H, 's', 00H, 'o', 00H, 'u', 00H, 'r'
	DB	00H, 'c', 00H, 'e', 00H, 's', 00H, '\', 00H, 'x', 00H, 'a', 00H
	DB	's', 00H, 'h', 00H, 'x', 00H, 't', 00H, '_', 00H, 'v', 00H, '0'
	DB	00H, '.', 00H, '8', 00H, '1', 00H, '_', 00H, 'r', 00H, 'e', 00H
	DB	'v', 00H, '.', 00H, '1', 00H, '_', 00H, 's', 00H, 'r', 00H, 'c'
	DB	00H, '\', 00H, 's', 00H, 'e', 00H, 'r', 00H, 'v', 00H, 'e', 00H
	DB	'r', 00H, '\', 00H, 'p', 00H, 'h', 00H, 'y', 00H, 's', 00H, 'i'
	DB	00H, 'c', 00H, 's', 00H, '\', 00H, 'n', 00H, 'x', 00H, 'u', 00H
	DB	's', 00H, 'e', 00H, 'r', 00H, 's', 00H, 't', 00H, 'r', 00H, 'e'
	DB	00H, 'a', 00H, 'm', 00H, '.', 00H, 'c', 00H, 'p', 00H, 'p', 00H
	DB	00H, 00H
	ORG $+2
$SG71959 DB	'w', 00H, 00H, 00H
$SG71969 DB	'w', 00H, 00H, 00H
$SG71968 DB	'c', 00H, ':', 00H, '\', 00H, 'u', 00H, 's', 00H, 'e', 00H
	DB	'r', 00H, 's', 00H, '\', 00H, 'u', 00H, 's', 00H, 'e', 00H, 'r'
	DB	00H, '\', 00H, 'd', 00H, 'o', 00H, 'w', 00H, 'n', 00H, 'l', 00H
	DB	'o', 00H, 'a', 00H, 'd', 00H, 's', 00H, '\', 00H, 'x', 00H, 'a'
	DB	00H, 's', 00H, 'h', 00H, 'x', 00H, 't', 00H, '_', 00H, 'v', 00H
	DB	'0', 00H, '.', 00H, '8', 00H, '1', 00H, '_', 00H, 'r', 00H, 'e'
	DB	00H, 'v', 00H, '.', 00H, '1', 00H, '_', 00H, 'w', 00H, 'i', 00H
	DB	't', 00H, 'h', 00H, '_', 00H, 's', 00H, 'o', 00H, 'u', 00H, 'r'
	DB	00H, 'c', 00H, 'e', 00H, 's', 00H, '\', 00H, 'x', 00H, 'a', 00H
	DB	's', 00H, 'h', 00H, 'x', 00H, 't', 00H, '_', 00H, 'v', 00H, '0'
	DB	00H, '.', 00H, '8', 00H, '1', 00H, '_', 00H, 'r', 00H, 'e', 00H
	DB	'v', 00H, '.', 00H, '1', 00H, '_', 00H, 's', 00H, 'r', 00H, 'c'
	DB	00H, '\', 00H, 's', 00H, 'e', 00H, 'r', 00H, 'v', 00H, 'e', 00H
	DB	'r', 00H, '\', 00H, 'p', 00H, 'h', 00H, 'y', 00H, 's', 00H, 'i'
	DB	00H, 'c', 00H, 's', 00H, '\', 00H, 'n', 00H, 'x', 00H, 'u', 00H
	DB	's', 00H, 'e', 00H, 'r', 00H, 's', 00H, 't', 00H, 'r', 00H, 'e'
	DB	00H, 'a', 00H, 'm', 00H, '.', 00H, 'c', 00H, 'p', 00H, 'p', 00H
	DB	00H, 00H
	ORG $+2
$SG72109 DB	'c', 00H, ':', 00H, '\', 00H, 'u', 00H, 's', 00H, 'e', 00H
	DB	'r', 00H, 's', 00H, '\', 00H, 'u', 00H, 's', 00H, 'e', 00H, 'r'
	DB	00H, '\', 00H, 'd', 00H, 'o', 00H, 'w', 00H, 'n', 00H, 'l', 00H
	DB	'o', 00H, 'a', 00H, 'd', 00H, 's', 00H, '\', 00H, 'x', 00H, 'a'
	DB	00H, 's', 00H, 'h', 00H, 'x', 00H, 't', 00H, '_', 00H, 'v', 00H
	DB	'0', 00H, '.', 00H, '8', 00H, '1', 00H, '_', 00H, 'r', 00H, 'e'
	DB	00H, 'v', 00H, '.', 00H, '1', 00H, '_', 00H, 'w', 00H, 'i', 00H
	DB	't', 00H, 'h', 00H, '_', 00H, 's', 00H, 'o', 00H, 'u', 00H, 'r'
	DB	00H, 'c', 00H, 'e', 00H, 's', 00H, '\', 00H, 'x', 00H, 'a', 00H
	DB	's', 00H, 'h', 00H, 'x', 00H, 't', 00H, '_', 00H, 'v', 00H, '0'
	DB	00H, '.', 00H, '8', 00H, '1', 00H, '_', 00H, 'r', 00H, 'e', 00H
	DB	'v', 00H, '.', 00H, '1', 00H, '_', 00H, 's', 00H, 'r', 00H, 'c'
	DB	00H, '\', 00H, 'g', 00H, 'a', 00H, 'm', 00H, 'e', 00H, '_', 00H
	DB	's', 00H, 'h', 00H, 'a', 00H, 'r', 00H, 'e', 00H, 'd', 00H, '\'
	DB	00H, 'u', 00H, 't', 00H, 'l', 00H, 'm', 00H, 'e', 00H, 'm', 00H
	DB	'o', 00H, 'r', 00H, 'y', 00H, '.', 00H, 'h', 00H, 00H, 00H
	ORG $+2
$SG72110 DB	'n', 00H, 'G', 00H, 'r', 00H, 'o', 00H, 'w', 00H, 'S', 00H
	DB	'i', 00H, 'z', 00H, 'e', 00H, ' ', 00H, '>', 00H, '=', 00H, ' '
	DB	00H, '0', 00H, 00H, 00H
	ORG $+2
$SG72153 DB	'c', 00H, ':', 00H, '\', 00H, 'u', 00H, 's', 00H, 'e', 00H
	DB	'r', 00H, 's', 00H, '\', 00H, 'u', 00H, 's', 00H, 'e', 00H, 'r'
	DB	00H, '\', 00H, 'd', 00H, 'o', 00H, 'w', 00H, 'n', 00H, 'l', 00H
	DB	'o', 00H, 'a', 00H, 'd', 00H, 's', 00H, '\', 00H, 'x', 00H, 'a'
	DB	00H, 's', 00H, 'h', 00H, 'x', 00H, 't', 00H, '_', 00H, 'v', 00H
	DB	'0', 00H, '.', 00H, '8', 00H, '1', 00H, '_', 00H, 'r', 00H, 'e'
	DB	00H, 'v', 00H, '.', 00H, '1', 00H, '_', 00H, 'w', 00H, 'i', 00H
	DB	't', 00H, 'h', 00H, '_', 00H, 's', 00H, 'o', 00H, 'u', 00H, 'r'
	DB	00H, 'c', 00H, 'e', 00H, 's', 00H, '\', 00H, 'x', 00H, 'a', 00H
	DB	's', 00H, 'h', 00H, 'x', 00H, 't', 00H, '_', 00H, 'v', 00H, '0'
	DB	00H, '.', 00H, '8', 00H, '1', 00H, '_', 00H, 'r', 00H, 'e', 00H
	DB	'v', 00H, '.', 00H, '1', 00H, '_', 00H, 's', 00H, 'r', 00H, 'c'
	DB	00H, '\', 00H, 'g', 00H, 'a', 00H, 'm', 00H, 'e', 00H, '_', 00H
	DB	's', 00H, 'h', 00H, 'a', 00H, 'r', 00H, 'e', 00H, 'd', 00H, '\'
	DB	00H, 'u', 00H, 't', 00H, 'l', 00H, 'a', 00H, 'r', 00H, 'r', 00H
	DB	'a', 00H, 'y', 00H, '.', 00H, 'h', 00H, 00H, 00H
$SG72279 DB	'0', 00H, 00H, 00H
$SG72154 DB	'(', 00H, 'B', 00H, 'a', 00H, 's', 00H, 'e', 00H, '(', 00H
	DB	')', 00H, ' ', 00H, '=', 00H, '=', 00H, ' ', 00H, 'N', 00H, 'U'
	DB	00H, 'L', 00H, 'L', 00H, ')', 00H, ' ', 00H, '|', 00H, '|', 00H
	DB	' ', 00H, '(', 00H, '&', 00H, 's', 00H, 'r', 00H, 'c', 00H, ' '
	DB	00H, '<', 00H, ' ', 00H, 'B', 00H, 'a', 00H, 's', 00H, 'e', 00H
	DB	'(', 00H, ')', 00H, ')', 00H, ' ', 00H, '|', 00H, '|', 00H, ' '
	DB	00H, '(', 00H, '&', 00H, 's', 00H, 'r', 00H, 'c', 00H, ' ', 00H
	DB	'>', 00H, '=', 00H, ' ', 00H, '(', 00H, 'B', 00H, 'a', 00H, 's'
	DB	00H, 'e', 00H, '(', 00H, ')', 00H, ' ', 00H, '+', 00H, ' ', 00H
	DB	'C', 00H, 'o', 00H, 'u', 00H, 'n', 00H, 't', 00H, '(', 00H, ')'
	DB	00H, ')', 00H, ' ', 00H, ')', 00H, 00H, 00H
	ORG $+2
$SG72276 DB	'n', 00H, 'u', 00H, 'm', 00H, ' ', 00H, '>', 00H, ' ', 00H
	DB	'0', 00H, 00H, 00H
$SG72285 DB	'0', 00H, 00H, 00H
$SG72155 DB	'c', 00H, ':', 00H, '\', 00H, 'u', 00H, 's', 00H, 'e', 00H
	DB	'r', 00H, 's', 00H, '\', 00H, 'u', 00H, 's', 00H, 'e', 00H, 'r'
	DB	00H, '\', 00H, 'd', 00H, 'o', 00H, 'w', 00H, 'n', 00H, 'l', 00H
	DB	'o', 00H, 'a', 00H, 'd', 00H, 's', 00H, '\', 00H, 'x', 00H, 'a'
	DB	00H, 's', 00H, 'h', 00H, 'x', 00H, 't', 00H, '_', 00H, 'v', 00H
	DB	'0', 00H, '.', 00H, '8', 00H, '1', 00H, '_', 00H, 'r', 00H, 'e'
	DB	00H, 'v', 00H, '.', 00H, '1', 00H, '_', 00H, 'w', 00H, 'i', 00H
	DB	't', 00H, 'h', 00H, '_', 00H, 's', 00H, 'o', 00H, 'u', 00H, 'r'
	DB	00H, 'c', 00H, 'e', 00H, 's', 00H, '\', 00H, 'x', 00H, 'a', 00H
	DB	's', 00H, 'h', 00H, 'x', 00H, 't', 00H, '_', 00H, 'v', 00H, '0'
	DB	00H, '.', 00H, '8', 00H, '1', 00H, '_', 00H, 'r', 00H, 'e', 00H
	DB	'v', 00H, '.', 00H, '1', 00H, '_', 00H, 's', 00H, 'r', 00H, 'c'
	DB	00H, '\', 00H, 'g', 00H, 'a', 00H, 'm', 00H, 'e', 00H, '_', 00H
	DB	's', 00H, 'h', 00H, 'a', 00H, 'r', 00H, 'e', 00H, 'd', 00H, '\'
	DB	00H, 'u', 00H, 't', 00H, 'l', 00H, 'a', 00H, 'r', 00H, 'r', 00H
	DB	'a', 00H, 'y', 00H, '.', 00H, 'h', 00H, 00H, 00H
$SG72289 DB	'm', 00H, '_', 00H, 'p', 00H, 'M', 00H, 'e', 00H, 'm', 00H
	DB	'o', 00H, 'r', 00H, 'y', 00H, 00H, 00H
$SG72156 DB	'(', 00H, 'e', 00H, 'l', 00H, 'e', 00H, 'm', 00H, ' ', 00H
	DB	'=', 00H, '=', 00H, ' ', 00H, 'C', 00H, 'o', 00H, 'u', 00H, 'n'
	DB	00H, 't', 00H, '(', 00H, ')', 00H, ')', 00H, ' ', 00H, '|', 00H
	DB	'|', 00H, ' ', 00H, 'I', 00H, 's', 00H, 'V', 00H, 'a', 00H, 'l'
	DB	00H, 'i', 00H, 'd', 00H, 'I', 00H, 'n', 00H, 'd', 00H, 'e', 00H
	DB	'x', 00H, '(', 00H, 'e', 00H, 'l', 00H, 'e', 00H, 'm', 00H, ')'
	DB	00H, 00H, 00H
$SG72228 DB	'c', 00H, ':', 00H, '\', 00H, 'u', 00H, 's', 00H, 'e', 00H
	DB	'r', 00H, 's', 00H, '\', 00H, 'u', 00H, 's', 00H, 'e', 00H, 'r'
	DB	00H, '\', 00H, 'd', 00H, 'o', 00H, 'w', 00H, 'n', 00H, 'l', 00H
	DB	'o', 00H, 'a', 00H, 'd', 00H, 's', 00H, '\', 00H, 'x', 00H, 'a'
	DB	00H, 's', 00H, 'h', 00H, 'x', 00H, 't', 00H, '_', 00H, 'v', 00H
	DB	'0', 00H, '.', 00H, '8', 00H, '1', 00H, '_', 00H, 'r', 00H, 'e'
	DB	00H, 'v', 00H, '.', 00H, '1', 00H, '_', 00H, 'w', 00H, 'i', 00H
	DB	't', 00H, 'h', 00H, '_', 00H, 's', 00H, 'o', 00H, 'u', 00H, 'r'
	DB	00H, 'c', 00H, 'e', 00H, 's', 00H, '\', 00H, 'x', 00H, 'a', 00H
	DB	's', 00H, 'h', 00H, 'x', 00H, 't', 00H, '_', 00H, 'v', 00H, '0'
	DB	00H, '.', 00H, '8', 00H, '1', 00H, '_', 00H, 'r', 00H, 'e', 00H
	DB	'v', 00H, '.', 00H, '1', 00H, '_', 00H, 's', 00H, 'r', 00H, 'c'
	DB	00H, '\', 00H, 'g', 00H, 'a', 00H, 'm', 00H, 'e', 00H, '_', 00H
	DB	's', 00H, 'h', 00H, 'a', 00H, 'r', 00H, 'e', 00H, 'd', 00H, '\'
	DB	00H, 'u', 00H, 't', 00H, 'l', 00H, 'a', 00H, 'r', 00H, 'r', 00H
	DB	'a', 00H, 'y', 00H, '.', 00H, 'h', 00H, 00H, 00H
$SG72291 DB	'm', 00H, '_', 00H, 'p', 00H, 'M', 00H, 'e', 00H, 'm', 00H
	DB	'o', 00H, 'r', 00H, 'y', 00H, 00H, 00H
$SG72229 DB	'I', 00H, 's', 00H, 'V', 00H, 'a', 00H, 'l', 00H, 'i', 00H
	DB	'd', 00H, 'I', 00H, 'n', 00H, 'd', 00H, 'e', 00H, 'x', 00H, '('
	DB	00H, 'e', 00H, 'l', 00H, 'e', 00H, 'm', 00H, ')', 00H, ' ', 00H
	DB	'|', 00H, '|', 00H, ' ', 00H, '(', 00H, ' ', 00H, 'm', 00H, '_'
	DB	00H, 'S', 00H, 'i', 00H, 'z', 00H, 'e', 00H, ' ', 00H, '=', 00H
	DB	'=', 00H, ' ', 00H, '0', 00H, ' ', 00H, ')', 00H, ' ', 00H, '|'
	DB	00H, '|', 00H, ' ', 00H, '(', 00H, ' ', 00H, 'n', 00H, 'u', 00H
	DB	'm', 00H, ' ', 00H, '=', 00H, '=', 00H, ' ', 00H, '0', 00H, ' '
	DB	00H, ')', 00H, 00H, 00H
	ORG $+4
$SG72275 DB	'c', 00H, ':', 00H, '\', 00H, 'u', 00H, 's', 00H, 'e', 00H
	DB	'r', 00H, 's', 00H, '\', 00H, 'u', 00H, 's', 00H, 'e', 00H, 'r'
	DB	00H, '\', 00H, 'd', 00H, 'o', 00H, 'w', 00H, 'n', 00H, 'l', 00H
	DB	'o', 00H, 'a', 00H, 'd', 00H, 's', 00H, '\', 00H, 'x', 00H, 'a'
	DB	00H, 's', 00H, 'h', 00H, 'x', 00H, 't', 00H, '_', 00H, 'v', 00H
	DB	'0', 00H, '.', 00H, '8', 00H, '1', 00H, '_', 00H, 'r', 00H, 'e'
	DB	00H, 'v', 00H, '.', 00H, '1', 00H, '_', 00H, 'w', 00H, 'i', 00H
	DB	't', 00H, 'h', 00H, '_', 00H, 's', 00H, 'o', 00H, 'u', 00H, 'r'
	DB	00H, 'c', 00H, 'e', 00H, 's', 00H, '\', 00H, 'x', 00H, 'a', 00H
	DB	's', 00H, 'h', 00H, 'x', 00H, 't', 00H, '_', 00H, 'v', 00H, '0'
	DB	00H, '.', 00H, '8', 00H, '1', 00H, '_', 00H, 'r', 00H, 'e', 00H
	DB	'v', 00H, '.', 00H, '1', 00H, '_', 00H, 's', 00H, 'r', 00H, 'c'
	DB	00H, '\', 00H, 'g', 00H, 'a', 00H, 'm', 00H, 'e', 00H, '_', 00H
	DB	's', 00H, 'h', 00H, 'a', 00H, 'r', 00H, 'e', 00H, 'd', 00H, '\'
	DB	00H, 'u', 00H, 't', 00H, 'l', 00H, 'm', 00H, 'e', 00H, 'm', 00H
	DB	'o', 00H, 'r', 00H, 'y', 00H, '.', 00H, 'h', 00H, 00H, 00H
	ORG $+2
$SG72278 DB	'c', 00H, ':', 00H, '\', 00H, 'u', 00H, 's', 00H, 'e', 00H
	DB	'r', 00H, 's', 00H, '\', 00H, 'u', 00H, 's', 00H, 'e', 00H, 'r'
	DB	00H, '\', 00H, 'd', 00H, 'o', 00H, 'w', 00H, 'n', 00H, 'l', 00H
	DB	'o', 00H, 'a', 00H, 'd', 00H, 's', 00H, '\', 00H, 'x', 00H, 'a'
	DB	00H, 's', 00H, 'h', 00H, 'x', 00H, 't', 00H, '_', 00H, 'v', 00H
	DB	'0', 00H, '.', 00H, '8', 00H, '1', 00H, '_', 00H, 'r', 00H, 'e'
	DB	00H, 'v', 00H, '.', 00H, '1', 00H, '_', 00H, 'w', 00H, 'i', 00H
	DB	't', 00H, 'h', 00H, '_', 00H, 's', 00H, 'o', 00H, 'u', 00H, 'r'
	DB	00H, 'c', 00H, 'e', 00H, 's', 00H, '\', 00H, 'x', 00H, 'a', 00H
	DB	's', 00H, 'h', 00H, 'x', 00H, 't', 00H, '_', 00H, 'v', 00H, '0'
	DB	00H, '.', 00H, '8', 00H, '1', 00H, '_', 00H, 'r', 00H, 'e', 00H
	DB	'v', 00H, '.', 00H, '1', 00H, '_', 00H, 's', 00H, 'r', 00H, 'c'
	DB	00H, '\', 00H, 'g', 00H, 'a', 00H, 'm', 00H, 'e', 00H, '_', 00H
	DB	's', 00H, 'h', 00H, 'a', 00H, 'r', 00H, 'e', 00H, 'd', 00H, '\'
	DB	00H, 'u', 00H, 't', 00H, 'l', 00H, 'm', 00H, 'e', 00H, 'm', 00H
	DB	'o', 00H, 'r', 00H, 'y', 00H, '.', 00H, 'h', 00H, 00H, 00H
	ORG $+2
$SG72284 DB	'c', 00H, ':', 00H, '\', 00H, 'u', 00H, 's', 00H, 'e', 00H
	DB	'r', 00H, 's', 00H, '\', 00H, 'u', 00H, 's', 00H, 'e', 00H, 'r'
	DB	00H, '\', 00H, 'd', 00H, 'o', 00H, 'w', 00H, 'n', 00H, 'l', 00H
	DB	'o', 00H, 'a', 00H, 'd', 00H, 's', 00H, '\', 00H, 'x', 00H, 'a'
	DB	00H, 's', 00H, 'h', 00H, 'x', 00H, 't', 00H, '_', 00H, 'v', 00H
	DB	'0', 00H, '.', 00H, '8', 00H, '1', 00H, '_', 00H, 'r', 00H, 'e'
	DB	00H, 'v', 00H, '.', 00H, '1', 00H, '_', 00H, 'w', 00H, 'i', 00H
	DB	't', 00H, 'h', 00H, '_', 00H, 's', 00H, 'o', 00H, 'u', 00H, 'r'
	DB	00H, 'c', 00H, 'e', 00H, 's', 00H, '\', 00H, 'x', 00H, 'a', 00H
	DB	's', 00H, 'h', 00H, 'x', 00H, 't', 00H, '_', 00H, 'v', 00H, '0'
	DB	00H, '.', 00H, '8', 00H, '1', 00H, '_', 00H, 'r', 00H, 'e', 00H
	DB	'v', 00H, '.', 00H, '1', 00H, '_', 00H, 's', 00H, 'r', 00H, 'c'
	DB	00H, '\', 00H, 'g', 00H, 'a', 00H, 'm', 00H, 'e', 00H, '_', 00H
	DB	's', 00H, 'h', 00H, 'a', 00H, 'r', 00H, 'e', 00H, 'd', 00H, '\'
	DB	00H, 'u', 00H, 't', 00H, 'l', 00H, 'm', 00H, 'e', 00H, 'm', 00H
	DB	'o', 00H, 'r', 00H, 'y', 00H, '.', 00H, 'h', 00H, 00H, 00H
	ORG $+2
$SG72288 DB	'c', 00H, ':', 00H, '\', 00H, 'u', 00H, 's', 00H, 'e', 00H
	DB	'r', 00H, 's', 00H, '\', 00H, 'u', 00H, 's', 00H, 'e', 00H, 'r'
	DB	00H, '\', 00H, 'd', 00H, 'o', 00H, 'w', 00H, 'n', 00H, 'l', 00H
	DB	'o', 00H, 'a', 00H, 'd', 00H, 's', 00H, '\', 00H, 'x', 00H, 'a'
	DB	00H, 's', 00H, 'h', 00H, 'x', 00H, 't', 00H, '_', 00H, 'v', 00H
	DB	'0', 00H, '.', 00H, '8', 00H, '1', 00H, '_', 00H, 'r', 00H, 'e'
	DB	00H, 'v', 00H, '.', 00H, '1', 00H, '_', 00H, 'w', 00H, 'i', 00H
	DB	't', 00H, 'h', 00H, '_', 00H, 's', 00H, 'o', 00H, 'u', 00H, 'r'
	DB	00H, 'c', 00H, 'e', 00H, 's', 00H, '\', 00H, 'x', 00H, 'a', 00H
	DB	's', 00H, 'h', 00H, 'x', 00H, 't', 00H, '_', 00H, 'v', 00H, '0'
	DB	00H, '.', 00H, '8', 00H, '1', 00H, '_', 00H, 'r', 00H, 'e', 00H
	DB	'v', 00H, '.', 00H, '1', 00H, '_', 00H, 's', 00H, 'r', 00H, 'c'
	DB	00H, '\', 00H, 'g', 00H, 'a', 00H, 'm', 00H, 'e', 00H, '_', 00H
	DB	's', 00H, 'h', 00H, 'a', 00H, 'r', 00H, 'e', 00H, 'd', 00H, '\'
	DB	00H, 'u', 00H, 't', 00H, 'l', 00H, 'm', 00H, 'e', 00H, 'm', 00H
	DB	'o', 00H, 'r', 00H, 'y', 00H, '.', 00H, 'h', 00H, 00H, 00H
	ORG $+2
$SG72290 DB	'c', 00H, ':', 00H, '\', 00H, 'u', 00H, 's', 00H, 'e', 00H
	DB	'r', 00H, 's', 00H, '\', 00H, 'u', 00H, 's', 00H, 'e', 00H, 'r'
	DB	00H, '\', 00H, 'd', 00H, 'o', 00H, 'w', 00H, 'n', 00H, 'l', 00H
	DB	'o', 00H, 'a', 00H, 'd', 00H, 's', 00H, '\', 00H, 'x', 00H, 'a'
	DB	00H, 's', 00H, 'h', 00H, 'x', 00H, 't', 00H, '_', 00H, 'v', 00H
	DB	'0', 00H, '.', 00H, '8', 00H, '1', 00H, '_', 00H, 'r', 00H, 'e'
	DB	00H, 'v', 00H, '.', 00H, '1', 00H, '_', 00H, 'w', 00H, 'i', 00H
	DB	't', 00H, 'h', 00H, '_', 00H, 's', 00H, 'o', 00H, 'u', 00H, 'r'
	DB	00H, 'c', 00H, 'e', 00H, 's', 00H, '\', 00H, 'x', 00H, 'a', 00H
	DB	's', 00H, 'h', 00H, 'x', 00H, 't', 00H, '_', 00H, 'v', 00H, '0'
	DB	00H, '.', 00H, '8', 00H, '1', 00H, '_', 00H, 'r', 00H, 'e', 00H
	DB	'v', 00H, '.', 00H, '1', 00H, '_', 00H, 's', 00H, 'r', 00H, 'c'
	DB	00H, '\', 00H, 'g', 00H, 'a', 00H, 'm', 00H, 'e', 00H, '_', 00H
	DB	's', 00H, 'h', 00H, 'a', 00H, 'r', 00H, 'e', 00H, 'd', 00H, '\'
	DB	00H, 'u', 00H, 't', 00H, 'l', 00H, 'm', 00H, 'e', 00H, 'm', 00H
	DB	'o', 00H, 'r', 00H, 'y', 00H, '.', 00H, 'h', 00H, 00H, 00H
CONST	ENDS
PUBLIC	??_H@YGXPAXIIP6EPAX0@Z@Z			; `vector constructor iterator'
PUBLIC	??__G@YGXPAX0IIP6EPAX00@Z@Z			; `vector copy constructor iterator'
PUBLIC	??0NxStream@@QAE@XZ				; NxStream::NxStream
PUBLIC	??1NxStream@@UAE@XZ				; NxStream::~NxStream
PUBLIC	??_GNxStream@@UAEPAXI@Z				; NxStream::`scalar deleting destructor'
PUBLIC	??0UserStream@@QAE@PBD_N@Z			; UserStream::UserStream
PUBLIC	??1UserStream@@UAE@XZ				; UserStream::~UserStream
PUBLIC	?readByte@UserStream@@UBEEXZ			; UserStream::readByte
PUBLIC	?readWord@UserStream@@UBEGXZ			; UserStream::readWord
PUBLIC	?readDword@UserStream@@UBEIXZ			; UserStream::readDword
PUBLIC	?readFloat@UserStream@@UBEMXZ			; UserStream::readFloat
PUBLIC	?readDouble@UserStream@@UBENXZ			; UserStream::readDouble
PUBLIC	?readBuffer@UserStream@@UBEXPAXI@Z		; UserStream::readBuffer
PUBLIC	?storeByte@UserStream@@UAEAAVNxStream@@E@Z	; UserStream::storeByte
PUBLIC	?storeWord@UserStream@@UAEAAVNxStream@@G@Z	; UserStream::storeWord
PUBLIC	?storeDword@UserStream@@UAEAAVNxStream@@I@Z	; UserStream::storeDword
PUBLIC	?storeFloat@UserStream@@UAEAAVNxStream@@M@Z	; UserStream::storeFloat
PUBLIC	?storeDouble@UserStream@@UAEAAVNxStream@@N@Z	; UserStream::storeDouble
PUBLIC	?storeBuffer@UserStream@@UAEAAVNxStream@@PBXI@Z	; UserStream::storeBuffer
PUBLIC	?CreatePath@UserStream@@AAEXPAD@Z		; UserStream::CreatePath
PUBLIC	??_GUserStream@@UAEPAXI@Z			; UserStream::`scalar deleting destructor'
PUBLIC	??0MemoryWriteBuffer@@QAE@XZ			; MemoryWriteBuffer::MemoryWriteBuffer
PUBLIC	??1MemoryWriteBuffer@@UAE@XZ			; MemoryWriteBuffer::~MemoryWriteBuffer
PUBLIC	?readByte@MemoryWriteBuffer@@UBEEXZ		; MemoryWriteBuffer::readByte
PUBLIC	?readWord@MemoryWriteBuffer@@UBEGXZ		; MemoryWriteBuffer::readWord
PUBLIC	?readDword@MemoryWriteBuffer@@UBEIXZ		; MemoryWriteBuffer::readDword
PUBLIC	?readFloat@MemoryWriteBuffer@@UBEMXZ		; MemoryWriteBuffer::readFloat
PUBLIC	?readDouble@MemoryWriteBuffer@@UBENXZ		; MemoryWriteBuffer::readDouble
PUBLIC	?readBuffer@MemoryWriteBuffer@@UBEXPAXI@Z	; MemoryWriteBuffer::readBuffer
PUBLIC	?storeByte@MemoryWriteBuffer@@UAEAAVNxStream@@E@Z ; MemoryWriteBuffer::storeByte
PUBLIC	?storeWord@MemoryWriteBuffer@@UAEAAVNxStream@@G@Z ; MemoryWriteBuffer::storeWord
PUBLIC	?storeDword@MemoryWriteBuffer@@UAEAAVNxStream@@I@Z ; MemoryWriteBuffer::storeDword
PUBLIC	?storeFloat@MemoryWriteBuffer@@UAEAAVNxStream@@M@Z ; MemoryWriteBuffer::storeFloat
PUBLIC	?storeDouble@MemoryWriteBuffer@@UAEAAVNxStream@@N@Z ; MemoryWriteBuffer::storeDouble
PUBLIC	?storeBuffer@MemoryWriteBuffer@@UAEAAVNxStream@@PBXI@Z ; MemoryWriteBuffer::storeBuffer
PUBLIC	??_GMemoryWriteBuffer@@UAEPAXI@Z		; MemoryWriteBuffer::`scalar deleting destructor'
PUBLIC	??0MemoryReadBuffer@@QAE@PBE@Z			; MemoryReadBuffer::MemoryReadBuffer
PUBLIC	??1MemoryReadBuffer@@UAE@XZ			; MemoryReadBuffer::~MemoryReadBuffer
PUBLIC	?readByte@MemoryReadBuffer@@UBEEXZ		; MemoryReadBuffer::readByte
PUBLIC	?readWord@MemoryReadBuffer@@UBEGXZ		; MemoryReadBuffer::readWord
PUBLIC	?readDword@MemoryReadBuffer@@UBEIXZ		; MemoryReadBuffer::readDword
PUBLIC	?readFloat@MemoryReadBuffer@@UBEMXZ		; MemoryReadBuffer::readFloat
PUBLIC	?readDouble@MemoryReadBuffer@@UBENXZ		; MemoryReadBuffer::readDouble
PUBLIC	?readBuffer@MemoryReadBuffer@@UBEXPAXI@Z	; MemoryReadBuffer::readBuffer
PUBLIC	?storeByte@MemoryReadBuffer@@UAEAAVNxStream@@E@Z ; MemoryReadBuffer::storeByte
PUBLIC	?storeWord@MemoryReadBuffer@@UAEAAVNxStream@@G@Z ; MemoryReadBuffer::storeWord
PUBLIC	?storeDword@MemoryReadBuffer@@UAEAAVNxStream@@I@Z ; MemoryReadBuffer::storeDword
PUBLIC	?storeFloat@MemoryReadBuffer@@UAEAAVNxStream@@M@Z ; MemoryReadBuffer::storeFloat
PUBLIC	?storeDouble@MemoryReadBuffer@@UAEAAVNxStream@@N@Z ; MemoryReadBuffer::storeDouble
PUBLIC	?storeBuffer@MemoryReadBuffer@@UAEAAVNxStream@@PBXI@Z ; MemoryReadBuffer::storeBuffer
PUBLIC	??_GMemoryReadBuffer@@UAEPAXI@Z			; MemoryReadBuffer::`scalar deleting destructor'
PUBLIC	??_7NxStream@@6B@				; NxStream::`vftable'
PUBLIC	??_7UserStream@@6B@				; UserStream::`vftable'
PUBLIC	??_7MemoryWriteBuffer@@6B@			; MemoryWriteBuffer::`vftable'
PUBLIC	??_C@_1NK@CFPABGLA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAu?$AAs?$AAe?$AAr?$AA?2?$AAd@ ; `string'
PUBLIC	??_C@_13COJANIEC@?$AA0@				; `string'
PUBLIC	??_7MemoryReadBuffer@@6B@			; MemoryReadBuffer::`vftable'
PUBLIC	??_R4NxStream@@6B@				; NxStream::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVNxStream@@@8				; NxStream `RTTI Type Descriptor'
PUBLIC	??_R3NxStream@@8				; NxStream::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2NxStream@@8				; NxStream::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@NxStream@@8			; NxStream::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4UserStream@@6B@				; UserStream::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVUserStream@@@8				; UserStream `RTTI Type Descriptor'
PUBLIC	??_R3UserStream@@8				; UserStream::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2UserStream@@8				; UserStream::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@UserStream@@8			; UserStream::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4MemoryWriteBuffer@@6B@			; MemoryWriteBuffer::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVMemoryWriteBuffer@@@8			; MemoryWriteBuffer `RTTI Type Descriptor'
PUBLIC	??_R3MemoryWriteBuffer@@8			; MemoryWriteBuffer::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2MemoryWriteBuffer@@8			; MemoryWriteBuffer::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@MemoryWriteBuffer@@8		; MemoryWriteBuffer::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4MemoryReadBuffer@@6B@			; MemoryReadBuffer::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVMemoryReadBuffer@@@8			; MemoryReadBuffer `RTTI Type Descriptor'
PUBLIC	??_R3MemoryReadBuffer@@8			; MemoryReadBuffer::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2MemoryReadBuffer@@8			; MemoryReadBuffer::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@MemoryReadBuffer@@8		; MemoryReadBuffer::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	__real@00000000
PUBLIC	__real@0000000000000000
EXTRN	__purecall:PROC
EXTRN	??3@YAXPAXI@Z:PROC				; operator delete
EXTRN	_fclose:PROC
EXTRN	_fopen:PROC
EXTRN	_fwrite:PROC
EXTRN	_free:PROC
EXTRN	_malloc:PROC
EXTRN	?Q_snprintf@@YAHPADIPBDZZ:PROC			; Q_snprintf
EXTRN	__wassert:PROC
EXTRN	?DBG_AssertFunction@@YAXHPBD0H0@Z:PROC		; DBG_AssertFunction
EXTRN	??_ENxStream@@UAEPAXI@Z:PROC			; NxStream::`vector deleting destructor'
EXTRN	??_EUserStream@@UAEPAXI@Z:PROC			; UserStream::`vector deleting destructor'
EXTRN	??_EMemoryWriteBuffer@@UAEPAXI@Z:PROC		; MemoryWriteBuffer::`vector deleting destructor'
EXTRN	??_EMemoryReadBuffer@@UAEPAXI@Z:PROC		; MemoryReadBuffer::`vector deleting destructor'
EXTRN	__mkdir:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	_memcpy:PROC
EXTRN	_memset:PROC
EXTRN	?g_engfuncs@@3Uenginefuncs_s@@A:BYTE		; g_engfuncs
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
;	COMDAT __real@0000000000000000
CONST	SEGMENT
__real@0000000000000000 DQ 00000000000000000r	; 0
CONST	ENDS
;	COMDAT __real@00000000
CONST	SEGMENT
__real@00000000 DD 000000000r			; 0
CONST	ENDS
;	COMDAT ??_R1A@?0A@EA@MemoryReadBuffer@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@MemoryReadBuffer@@8 DD FLAT:??_R0?AVMemoryReadBuffer@@@8 ; MemoryReadBuffer::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3MemoryReadBuffer@@8
rdata$r	ENDS
;	COMDAT ??_R2MemoryReadBuffer@@8
rdata$r	SEGMENT
??_R2MemoryReadBuffer@@8 DD FLAT:??_R1A@?0A@EA@MemoryReadBuffer@@8 ; MemoryReadBuffer::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@NxStream@@8
rdata$r	ENDS
;	COMDAT ??_R3MemoryReadBuffer@@8
rdata$r	SEGMENT
??_R3MemoryReadBuffer@@8 DD 00H				; MemoryReadBuffer::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2MemoryReadBuffer@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVMemoryReadBuffer@@@8
data$r	SEGMENT
??_R0?AVMemoryReadBuffer@@@8 DD FLAT:??_7type_info@@6B@	; MemoryReadBuffer `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVMemoryReadBuffer@@', 00H
data$r	ENDS
;	COMDAT ??_R4MemoryReadBuffer@@6B@
rdata$r	SEGMENT
??_R4MemoryReadBuffer@@6B@ DD 00H			; MemoryReadBuffer::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVMemoryReadBuffer@@@8
	DD	FLAT:??_R3MemoryReadBuffer@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@MemoryWriteBuffer@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@MemoryWriteBuffer@@8 DD FLAT:??_R0?AVMemoryWriteBuffer@@@8 ; MemoryWriteBuffer::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3MemoryWriteBuffer@@8
rdata$r	ENDS
;	COMDAT ??_R2MemoryWriteBuffer@@8
rdata$r	SEGMENT
??_R2MemoryWriteBuffer@@8 DD FLAT:??_R1A@?0A@EA@MemoryWriteBuffer@@8 ; MemoryWriteBuffer::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@NxStream@@8
rdata$r	ENDS
;	COMDAT ??_R3MemoryWriteBuffer@@8
rdata$r	SEGMENT
??_R3MemoryWriteBuffer@@8 DD 00H			; MemoryWriteBuffer::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2MemoryWriteBuffer@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVMemoryWriteBuffer@@@8
data$r	SEGMENT
??_R0?AVMemoryWriteBuffer@@@8 DD FLAT:??_7type_info@@6B@ ; MemoryWriteBuffer `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVMemoryWriteBuffer@@', 00H
data$r	ENDS
;	COMDAT ??_R4MemoryWriteBuffer@@6B@
rdata$r	SEGMENT
??_R4MemoryWriteBuffer@@6B@ DD 00H			; MemoryWriteBuffer::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVMemoryWriteBuffer@@@8
	DD	FLAT:??_R3MemoryWriteBuffer@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@UserStream@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@UserStream@@8 DD FLAT:??_R0?AVUserStream@@@8 ; UserStream::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3UserStream@@8
rdata$r	ENDS
;	COMDAT ??_R2UserStream@@8
rdata$r	SEGMENT
??_R2UserStream@@8 DD FLAT:??_R1A@?0A@EA@UserStream@@8	; UserStream::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@NxStream@@8
rdata$r	ENDS
;	COMDAT ??_R3UserStream@@8
rdata$r	SEGMENT
??_R3UserStream@@8 DD 00H				; UserStream::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2UserStream@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVUserStream@@@8
data$r	SEGMENT
??_R0?AVUserStream@@@8 DD FLAT:??_7type_info@@6B@	; UserStream `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVUserStream@@', 00H
data$r	ENDS
;	COMDAT ??_R4UserStream@@6B@
rdata$r	SEGMENT
??_R4UserStream@@6B@ DD 00H				; UserStream::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVUserStream@@@8
	DD	FLAT:??_R3UserStream@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@NxStream@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@NxStream@@8 DD FLAT:??_R0?AVNxStream@@@8	; NxStream::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3NxStream@@8
rdata$r	ENDS
;	COMDAT ??_R2NxStream@@8
rdata$r	SEGMENT
??_R2NxStream@@8 DD FLAT:??_R1A@?0A@EA@NxStream@@8	; NxStream::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3NxStream@@8
rdata$r	SEGMENT
??_R3NxStream@@8 DD 00H					; NxStream::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2NxStream@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVNxStream@@@8
data$r	SEGMENT
??_R0?AVNxStream@@@8 DD FLAT:??_7type_info@@6B@		; NxStream `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVNxStream@@', 00H
data$r	ENDS
;	COMDAT ??_R4NxStream@@6B@
rdata$r	SEGMENT
??_R4NxStream@@6B@ DD 00H				; NxStream::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVNxStream@@@8
	DD	FLAT:??_R3NxStream@@8
rdata$r	ENDS
;	COMDAT ??_7MemoryReadBuffer@@6B@
CONST	SEGMENT
??_7MemoryReadBuffer@@6B@ DD FLAT:??_R4MemoryReadBuffer@@6B@ ; MemoryReadBuffer::`vftable'
	DD	FLAT:??_EMemoryReadBuffer@@UAEPAXI@Z
	DD	FLAT:?readByte@MemoryReadBuffer@@UBEEXZ
	DD	FLAT:?readWord@MemoryReadBuffer@@UBEGXZ
	DD	FLAT:?readDword@MemoryReadBuffer@@UBEIXZ
	DD	FLAT:?readFloat@MemoryReadBuffer@@UBEMXZ
	DD	FLAT:?readDouble@MemoryReadBuffer@@UBENXZ
	DD	FLAT:?readBuffer@MemoryReadBuffer@@UBEXPAXI@Z
	DD	FLAT:?storeByte@MemoryReadBuffer@@UAEAAVNxStream@@E@Z
	DD	FLAT:?storeWord@MemoryReadBuffer@@UAEAAVNxStream@@G@Z
	DD	FLAT:?storeDword@MemoryReadBuffer@@UAEAAVNxStream@@I@Z
	DD	FLAT:?storeFloat@MemoryReadBuffer@@UAEAAVNxStream@@M@Z
	DD	FLAT:?storeDouble@MemoryReadBuffer@@UAEAAVNxStream@@N@Z
	DD	FLAT:?storeBuffer@MemoryReadBuffer@@UAEAAVNxStream@@PBXI@Z
CONST	ENDS
;	COMDAT ??_C@_13COJANIEC@?$AA0@
CONST	SEGMENT
??_C@_13COJANIEC@?$AA0@ DB '0', 00H, 00H, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_1NK@CFPABGLA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAu?$AAs?$AAe?$AAr?$AA?2?$AAd@
CONST	SEGMENT
??_C@_1NK@CFPABGLA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAu?$AAs?$AAe?$AAr?$AA?2?$AAd@ DB 'c'
	DB	00H, ':', 00H, '\', 00H, 'u', 00H, 's', 00H, 'e', 00H, 'r', 00H
	DB	's', 00H, '\', 00H, 'u', 00H, 's', 00H, 'e', 00H, 'r', 00H, '\'
	DB	00H, 'd', 00H, 'o', 00H, 'w', 00H, 'n', 00H, 'l', 00H, 'o', 00H
	DB	'a', 00H, 'd', 00H, 's', 00H, '\', 00H, 'x', 00H, 'a', 00H, 's'
	DB	00H, 'h', 00H, 'x', 00H, 't', 00H, '_', 00H, 'v', 00H, '0', 00H
	DB	'.', 00H, '8', 00H, '1', 00H, '_', 00H, 'r', 00H, 'e', 00H, 'v'
	DB	00H, '.', 00H, '1', 00H, '_', 00H, 'w', 00H, 'i', 00H, 't', 00H
	DB	'h', 00H, '_', 00H, 's', 00H, 'o', 00H, 'u', 00H, 'r', 00H, 'c'
	DB	00H, 'e', 00H, 's', 00H, '\', 00H, 'x', 00H, 'a', 00H, 's', 00H
	DB	'h', 00H, 'x', 00H, 't', 00H, '_', 00H, 'v', 00H, '0', 00H, '.'
	DB	00H, '8', 00H, '1', 00H, '_', 00H, 'r', 00H, 'e', 00H, 'v', 00H
	DB	'.', 00H, '1', 00H, '_', 00H, 's', 00H, 'r', 00H, 'c', 00H, '\'
	DB	00H, 's', 00H, 'e', 00H, 'r', 00H, 'v', 00H, 'e', 00H, 'r', 00H
	DB	'\', 00H, 'p', 00H, 'h', 00H, 'y', 00H, 's', 00H, 'i', 00H, 'c'
	DB	00H, 's', 00H, '\', 00H, 'n', 00H, 'x', 00H, 'u', 00H, 's', 00H
	DB	'e', 00H, 'r', 00H, 's', 00H, 't', 00H, 'r', 00H, 'e', 00H, 'a'
	DB	00H, 'm', 00H, '.', 00H, 'h', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_7MemoryWriteBuffer@@6B@
CONST	SEGMENT
??_7MemoryWriteBuffer@@6B@ DD FLAT:??_R4MemoryWriteBuffer@@6B@ ; MemoryWriteBuffer::`vftable'
	DD	FLAT:??_EMemoryWriteBuffer@@UAEPAXI@Z
	DD	FLAT:?readByte@MemoryWriteBuffer@@UBEEXZ
	DD	FLAT:?readWord@MemoryWriteBuffer@@UBEGXZ
	DD	FLAT:?readDword@MemoryWriteBuffer@@UBEIXZ
	DD	FLAT:?readFloat@MemoryWriteBuffer@@UBEMXZ
	DD	FLAT:?readDouble@MemoryWriteBuffer@@UBENXZ
	DD	FLAT:?readBuffer@MemoryWriteBuffer@@UBEXPAXI@Z
	DD	FLAT:?storeByte@MemoryWriteBuffer@@UAEAAVNxStream@@E@Z
	DD	FLAT:?storeWord@MemoryWriteBuffer@@UAEAAVNxStream@@G@Z
	DD	FLAT:?storeDword@MemoryWriteBuffer@@UAEAAVNxStream@@I@Z
	DD	FLAT:?storeFloat@MemoryWriteBuffer@@UAEAAVNxStream@@M@Z
	DD	FLAT:?storeDouble@MemoryWriteBuffer@@UAEAAVNxStream@@N@Z
	DD	FLAT:?storeBuffer@MemoryWriteBuffer@@UAEAAVNxStream@@PBXI@Z
CONST	ENDS
;	COMDAT ??_7UserStream@@6B@
CONST	SEGMENT
??_7UserStream@@6B@ DD FLAT:??_R4UserStream@@6B@	; UserStream::`vftable'
	DD	FLAT:??_EUserStream@@UAEPAXI@Z
	DD	FLAT:?readByte@UserStream@@UBEEXZ
	DD	FLAT:?readWord@UserStream@@UBEGXZ
	DD	FLAT:?readDword@UserStream@@UBEIXZ
	DD	FLAT:?readFloat@UserStream@@UBEMXZ
	DD	FLAT:?readDouble@UserStream@@UBENXZ
	DD	FLAT:?readBuffer@UserStream@@UBEXPAXI@Z
	DD	FLAT:?storeByte@UserStream@@UAEAAVNxStream@@E@Z
	DD	FLAT:?storeWord@UserStream@@UAEAAVNxStream@@G@Z
	DD	FLAT:?storeDword@UserStream@@UAEAAVNxStream@@I@Z
	DD	FLAT:?storeFloat@UserStream@@UAEAAVNxStream@@M@Z
	DD	FLAT:?storeDouble@UserStream@@UAEAAVNxStream@@N@Z
	DD	FLAT:?storeBuffer@UserStream@@UAEAAVNxStream@@PBXI@Z
CONST	ENDS
;	COMDAT ??_7NxStream@@6B@
CONST	SEGMENT
??_7NxStream@@6B@ DD FLAT:??_R4NxStream@@6B@		; NxStream::`vftable'
	DD	FLAT:??_ENxStream@@UAEPAXI@Z
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
CONST	ENDS
xdata$x	SEGMENT
__unwindtable$??0UserStream@@QAE@PBD_N@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0UserStream@@QAE@PBD_N@Z$0
__ehfuncinfo$??1UserStream@@UAE@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
__ehfuncinfo$??0UserStream@@QAE@PBD_N@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0UserStream@@QAE@PBD_N@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_GMemoryReadBuffer@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GMemoryReadBuffer@@UAEPAXI@Z PROC			; MemoryReadBuffer::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1MemoryReadBuffer@@UAE@XZ		; MemoryReadBuffer::~MemoryReadBuffer
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN2@scalar
	push	8
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAXI@Z				; operator delete
	add	esp, 8
$LN2@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_GMemoryReadBuffer@@UAEPAXI@Z ENDP			; MemoryReadBuffer::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xashxt_v0.81_rev.1_with_sources\xashxt_v0.81_rev.1_src\server\physics\nxuserstream.h
;	COMDAT ?storeBuffer@MemoryReadBuffer@@UAEAAVNxStream@@PBXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_buffer$ = 8						; size = 4
_size$ = 12						; size = 4
?storeBuffer@MemoryReadBuffer@@UAEAAVNxStream@@PBXI@Z PROC ; MemoryReadBuffer::storeBuffer, COMDAT
; _this$ = ecx

; 94   : 	virtual NxStream& storeBuffer( const void *buffer, NxU32 size ) { NX_ASSERT(0);	return *this; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	jne	SHORT $LN3@storeBuffe
	push	94					; 0000005eH
	push	OFFSET ??_C@_1NK@CFPABGLA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAu?$AAs?$AAe?$AAr?$AA?2?$AAd@
	push	OFFSET ??_C@_13COJANIEC@?$AA0@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN3@storeBuffe:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	8
?storeBuffer@MemoryReadBuffer@@UAEAAVNxStream@@PBXI@Z ENDP ; MemoryReadBuffer::storeBuffer
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xashxt_v0.81_rev.1_with_sources\xashxt_v0.81_rev.1_src\server\physics\nxuserstream.h
;	COMDAT ?storeDouble@MemoryReadBuffer@@UAEAAVNxStream@@N@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_f$ = 8							; size = 8
?storeDouble@MemoryReadBuffer@@UAEAAVNxStream@@N@Z PROC	; MemoryReadBuffer::storeDouble, COMDAT
; _this$ = ecx

; 93   : 	virtual NxStream& storeDouble( NxF64 f ) { NX_ASSERT(0); return *this; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	jne	SHORT $LN3@storeDoubl
	push	93					; 0000005dH
	push	OFFSET ??_C@_1NK@CFPABGLA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAu?$AAs?$AAe?$AAr?$AA?2?$AAd@
	push	OFFSET ??_C@_13COJANIEC@?$AA0@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN3@storeDoubl:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	8
?storeDouble@MemoryReadBuffer@@UAEAAVNxStream@@N@Z ENDP	; MemoryReadBuffer::storeDouble
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xashxt_v0.81_rev.1_with_sources\xashxt_v0.81_rev.1_src\server\physics\nxuserstream.h
;	COMDAT ?storeFloat@MemoryReadBuffer@@UAEAAVNxStream@@M@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_f$ = 8							; size = 4
?storeFloat@MemoryReadBuffer@@UAEAAVNxStream@@M@Z PROC	; MemoryReadBuffer::storeFloat, COMDAT
; _this$ = ecx

; 92   : 	virtual NxStream& storeFloat( NxReal f ) { NX_ASSERT(0); return *this; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	jne	SHORT $LN3@storeFloat
	push	92					; 0000005cH
	push	OFFSET ??_C@_1NK@CFPABGLA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAu?$AAs?$AAe?$AAr?$AA?2?$AAd@
	push	OFFSET ??_C@_13COJANIEC@?$AA0@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN3@storeFloat:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
?storeFloat@MemoryReadBuffer@@UAEAAVNxStream@@M@Z ENDP	; MemoryReadBuffer::storeFloat
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xashxt_v0.81_rev.1_with_sources\xashxt_v0.81_rev.1_src\server\physics\nxuserstream.h
;	COMDAT ?storeDword@MemoryReadBuffer@@UAEAAVNxStream@@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_d$ = 8							; size = 4
?storeDword@MemoryReadBuffer@@UAEAAVNxStream@@I@Z PROC	; MemoryReadBuffer::storeDword, COMDAT
; _this$ = ecx

; 91   : 	virtual NxStream& storeDword( NxU32 d )	{ NX_ASSERT(0); return *this; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	jne	SHORT $LN3@storeDword
	push	91					; 0000005bH
	push	OFFSET ??_C@_1NK@CFPABGLA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAu?$AAs?$AAe?$AAr?$AA?2?$AAd@
	push	OFFSET ??_C@_13COJANIEC@?$AA0@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN3@storeDword:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
?storeDword@MemoryReadBuffer@@UAEAAVNxStream@@I@Z ENDP	; MemoryReadBuffer::storeDword
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xashxt_v0.81_rev.1_with_sources\xashxt_v0.81_rev.1_src\server\physics\nxuserstream.h
;	COMDAT ?storeWord@MemoryReadBuffer@@UAEAAVNxStream@@G@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_w$ = 8							; size = 2
?storeWord@MemoryReadBuffer@@UAEAAVNxStream@@G@Z PROC	; MemoryReadBuffer::storeWord, COMDAT
; _this$ = ecx

; 90   : 	virtual NxStream& storeWord( NxU16 w ) { NX_ASSERT(0); return *this; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	jne	SHORT $LN3@storeWord
	push	90					; 0000005aH
	push	OFFSET ??_C@_1NK@CFPABGLA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAu?$AAs?$AAe?$AAr?$AA?2?$AAd@
	push	OFFSET ??_C@_13COJANIEC@?$AA0@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN3@storeWord:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
?storeWord@MemoryReadBuffer@@UAEAAVNxStream@@G@Z ENDP	; MemoryReadBuffer::storeWord
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xashxt_v0.81_rev.1_with_sources\xashxt_v0.81_rev.1_src\server\physics\nxuserstream.h
;	COMDAT ?storeByte@MemoryReadBuffer@@UAEAAVNxStream@@E@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_b$ = 8							; size = 1
?storeByte@MemoryReadBuffer@@UAEAAVNxStream@@E@Z PROC	; MemoryReadBuffer::storeByte, COMDAT
; _this$ = ecx

; 89   : 	virtual NxStream& storeByte( NxU8 b ) { NX_ASSERT(0); return *this; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	jne	SHORT $LN3@storeByte
	push	89					; 00000059H
	push	OFFSET ??_C@_1NK@CFPABGLA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAu?$AAs?$AAe?$AAr?$AA?2?$AAd@
	push	OFFSET ??_C@_13COJANIEC@?$AA0@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN3@storeByte:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
?storeByte@MemoryReadBuffer@@UAEAAVNxStream@@E@Z ENDP	; MemoryReadBuffer::storeByte
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xashxt_v0.81_rev.1_with_sources\xashxt_v0.81_rev.1_src\server\physics\nxuserstream.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
_dest$ = 8						; size = 4
_size$ = 12						; size = 4
?readBuffer@MemoryReadBuffer@@UBEXPAXI@Z PROC		; MemoryReadBuffer::readBuffer
; _this$ = ecx

; 316  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 317  : 	memcpy( dest, buffer, size );

	mov	eax, DWORD PTR _size$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	mov	eax, DWORD PTR _dest$[ebp]
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH

; 318  : 	buffer += size;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	add	edx, DWORD PTR _size$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], edx

; 319  : }

	mov	esp, ebp
	pop	ebp
	ret	8
?readBuffer@MemoryReadBuffer@@UBEXPAXI@Z ENDP		; MemoryReadBuffer::readBuffer
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xashxt_v0.81_rev.1_with_sources\xashxt_v0.81_rev.1_src\server\physics\nxuserstream.cpp
_TEXT	SEGMENT
_f$ = -12						; size = 8
_this$ = -4						; size = 4
?readDouble@MemoryReadBuffer@@UBENXZ PROC		; MemoryReadBuffer::readDouble
; _this$ = ecx

; 308  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 309  : 	double f;
; 310  : 	memcpy( &f, buffer, sizeof( double ));

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR _f$[ebp], edx
	mov	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR _f$[ebp+4], eax

; 311  : 	buffer += sizeof( double );

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	add	edx, 8
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], edx

; 312  : 	return f;

	fld	QWORD PTR _f$[ebp]

; 313  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?readDouble@MemoryReadBuffer@@UBENXZ ENDP		; MemoryReadBuffer::readDouble
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xashxt_v0.81_rev.1_with_sources\xashxt_v0.81_rev.1_src\server\physics\nxuserstream.cpp
_TEXT	SEGMENT
_f$ = -8						; size = 4
_this$ = -4						; size = 4
?readFloat@MemoryReadBuffer@@UBEMXZ PROC		; MemoryReadBuffer::readFloat
; _this$ = ecx

; 300  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 301  : 	float f;
; 302  : 	memcpy( &f, buffer, sizeof( float ));

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR _f$[ebp], edx

; 303  : 	buffer += sizeof( float );

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, 4
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], ecx

; 304  : 	return f;

	fld	DWORD PTR _f$[ebp]

; 305  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?readFloat@MemoryReadBuffer@@UBEMXZ ENDP		; MemoryReadBuffer::readFloat
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xashxt_v0.81_rev.1_with_sources\xashxt_v0.81_rev.1_src\server\physics\nxuserstream.cpp
_TEXT	SEGMENT
_d$ = -8						; size = 4
_this$ = -4						; size = 4
?readDword@MemoryReadBuffer@@UBEIXZ PROC		; MemoryReadBuffer::readDword
; _this$ = ecx

; 292  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 293  : 	NxU32 d;
; 294  : 	memcpy( &d, buffer, sizeof( NxU32 ));

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR _d$[ebp], edx

; 295  : 	buffer += sizeof( NxU32 );

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, 4
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], ecx

; 296  : 	return d;

	mov	eax, DWORD PTR _d$[ebp]

; 297  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?readDword@MemoryReadBuffer@@UBEIXZ ENDP		; MemoryReadBuffer::readDword
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xashxt_v0.81_rev.1_with_sources\xashxt_v0.81_rev.1_src\server\physics\nxuserstream.cpp
_TEXT	SEGMENT
_this$ = -8						; size = 4
_w$ = -4						; size = 2
?readWord@MemoryReadBuffer@@UBEGXZ PROC			; MemoryReadBuffer::readWord
; _this$ = ecx

; 284  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 285  : 	NxU16 w;
; 286  : 	memcpy( &w, buffer, sizeof( NxU16 ));

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	dx, WORD PTR [ecx]
	mov	WORD PTR _w$[ebp], dx

; 287  : 	buffer += sizeof( NxU16 );

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, 2
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], ecx

; 288  : 	return w;

	mov	ax, WORD PTR _w$[ebp]

; 289  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?readWord@MemoryReadBuffer@@UBEGXZ ENDP			; MemoryReadBuffer::readWord
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xashxt_v0.81_rev.1_with_sources\xashxt_v0.81_rev.1_src\server\physics\nxuserstream.cpp
_TEXT	SEGMENT
_this$ = -8						; size = 4
_b$ = -1						; size = 1
?readByte@MemoryReadBuffer@@UBEEXZ PROC			; MemoryReadBuffer::readByte
; _this$ = ecx

; 276  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 277  : 	NxU8 b;
; 278  : 	memcpy( &b, buffer, sizeof( NxU8 ));

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	dl, BYTE PTR [ecx]
	mov	BYTE PTR _b$[ebp], dl

; 279  : 	buffer += sizeof( NxU8 );

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], ecx

; 280  : 	return b;

	mov	al, BYTE PTR _b$[ebp]

; 281  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?readByte@MemoryReadBuffer@@UBEEXZ ENDP			; MemoryReadBuffer::readByte
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xashxt_v0.81_rev.1_with_sources\xashxt_v0.81_rev.1_src\server\physics\nxuserstream.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1MemoryReadBuffer@@UAE@XZ PROC			; MemoryReadBuffer::~MemoryReadBuffer
; _this$ = ecx

; 271  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7MemoryReadBuffer@@6B@

; 272  : 	// We don't own the data => no delete
; 273  : }

	mov	ecx, DWORD PTR _this$[ebp]
	call	??1NxStream@@UAE@XZ			; NxStream::~NxStream
	mov	esp, ebp
	pop	ebp
	ret	0
??1MemoryReadBuffer@@UAE@XZ ENDP			; MemoryReadBuffer::~MemoryReadBuffer
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xashxt_v0.81_rev.1_with_sources\xashxt_v0.81_rev.1_src\server\physics\nxuserstream.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
_data$ = 8						; size = 4
??0MemoryReadBuffer@@QAE@PBE@Z PROC			; MemoryReadBuffer::MemoryReadBuffer
; _this$ = ecx

; 267  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0NxStream@@QAE@XZ			; NxStream::NxStream
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7MemoryReadBuffer@@6B@

; 266  : MemoryReadBuffer :: MemoryReadBuffer( const NxU8 *data ) : buffer(data)

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _data$[ebp]
	mov	DWORD PTR [ecx+4], edx

; 268  : }

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0MemoryReadBuffer@@QAE@PBE@Z ENDP			; MemoryReadBuffer::MemoryReadBuffer
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_GMemoryWriteBuffer@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GMemoryWriteBuffer@@UAEPAXI@Z PROC			; MemoryWriteBuffer::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1MemoryWriteBuffer@@UAE@XZ		; MemoryWriteBuffer::~MemoryWriteBuffer
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN2@scalar
	push	16					; 00000010H
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAXI@Z				; operator delete
	add	esp, 8
$LN2@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_GMemoryWriteBuffer@@UAEPAXI@Z ENDP			; MemoryWriteBuffer::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xashxt_v0.81_rev.1_with_sources\xashxt_v0.81_rev.1_src\server\physics\nxuserstream.cpp
_TEXT	SEGMENT
_newData$1 = -12					; size = 4
_expectedSize$ = -8					; size = 4
_this$ = -4						; size = 4
_buffer$ = 8						; size = 4
_size$ = 12						; size = 4
?storeBuffer@MemoryWriteBuffer@@UAEAAVNxStream@@PBXI@Z PROC ; MemoryWriteBuffer::storeBuffer
; _this$ = ecx

; 245  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 246  : 	NxU32 expectedSize = currentSize + size;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, DWORD PTR _size$[ebp]
	mov	DWORD PTR _expectedSize$[ebp], ecx

; 247  : 
; 248  : 	if( expectedSize > maxSize )

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _expectedSize$[ebp]
	cmp	eax, DWORD PTR [edx+8]
	jbe	SHORT $LN2@storeBuffe

; 249  : 	{
; 250  : 		maxSize = expectedSize + 4096;

	mov	ecx, DWORD PTR _expectedSize$[ebp]
	add	ecx, 4096				; 00001000H
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], ecx

; 251  : 
; 252  : 		NxU8 *newData = (NxU8 *)malloc( maxSize );

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	call	_malloc
	add	esp, 4
	mov	DWORD PTR _newData$1[ebp], eax

; 253  : 		if( data )

	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+12], 0
	je	SHORT $LN3@storeBuffe

; 254  : 		{
; 255  : 			memcpy( newData, data, currentSize );

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	mov	ecx, DWORD PTR _newData$1[ebp]
	push	ecx
	call	_memcpy
	add	esp, 12					; 0000000cH

; 256  : 			free( data );

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	call	_free
	add	esp, 4
$LN3@storeBuffe:

; 257  : 		}
; 258  : 		data = newData;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _newData$1[ebp]
	mov	DWORD PTR [ecx+12], edx
$LN2@storeBuffe:

; 259  : 	}
; 260  : 
; 261  : 	memcpy( data + currentSize, buffer, size );

	mov	eax, DWORD PTR _size$[ebp]
	push	eax
	mov	ecx, DWORD PTR _buffer$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx+4]
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH

; 262  : 	currentSize += size;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	add	eax, DWORD PTR _size$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax

; 263  : 	return *this;

	mov	eax, DWORD PTR _this$[ebp]

; 264  : }

	mov	esp, ebp
	pop	ebp
	ret	8
?storeBuffer@MemoryWriteBuffer@@UAEAAVNxStream@@PBXI@Z ENDP ; MemoryWriteBuffer::storeBuffer
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xashxt_v0.81_rev.1_with_sources\xashxt_v0.81_rev.1_src\server\physics\nxuserstream.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
_f$ = 8							; size = 8
?storeDouble@MemoryWriteBuffer@@UAEAAVNxStream@@N@Z PROC ; MemoryWriteBuffer::storeDouble
; _this$ = ecx

; 239  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 240  : 	storeBuffer( &f, sizeof( NxF64 ));

	push	8
	lea	eax, DWORD PTR _f$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+48]
	call	eax

; 241  : 	return *this;

	mov	eax, DWORD PTR _this$[ebp]

; 242  : }

	mov	esp, ebp
	pop	ebp
	ret	8
?storeDouble@MemoryWriteBuffer@@UAEAAVNxStream@@N@Z ENDP ; MemoryWriteBuffer::storeDouble
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xashxt_v0.81_rev.1_with_sources\xashxt_v0.81_rev.1_src\server\physics\nxuserstream.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
_f$ = 8							; size = 4
?storeFloat@MemoryWriteBuffer@@UAEAAVNxStream@@M@Z PROC	; MemoryWriteBuffer::storeFloat
; _this$ = ecx

; 233  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 234  : 	storeBuffer( &f, sizeof( NxReal ));

	push	4
	lea	eax, DWORD PTR _f$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+48]
	call	eax

; 235  : 	return *this;

	mov	eax, DWORD PTR _this$[ebp]

; 236  : }

	mov	esp, ebp
	pop	ebp
	ret	4
?storeFloat@MemoryWriteBuffer@@UAEAAVNxStream@@M@Z ENDP	; MemoryWriteBuffer::storeFloat
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xashxt_v0.81_rev.1_with_sources\xashxt_v0.81_rev.1_src\server\physics\nxuserstream.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
_d$ = 8							; size = 4
?storeDword@MemoryWriteBuffer@@UAEAAVNxStream@@I@Z PROC	; MemoryWriteBuffer::storeDword
; _this$ = ecx

; 227  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 228  : 	storeBuffer( &d, sizeof( NxU32 ));

	push	4
	lea	eax, DWORD PTR _d$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+48]
	call	eax

; 229  : 	return *this;

	mov	eax, DWORD PTR _this$[ebp]

; 230  : }

	mov	esp, ebp
	pop	ebp
	ret	4
?storeDword@MemoryWriteBuffer@@UAEAAVNxStream@@I@Z ENDP	; MemoryWriteBuffer::storeDword
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xashxt_v0.81_rev.1_with_sources\xashxt_v0.81_rev.1_src\server\physics\nxuserstream.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
_w$ = 8							; size = 2
?storeWord@MemoryWriteBuffer@@UAEAAVNxStream@@G@Z PROC	; MemoryWriteBuffer::storeWord
; _this$ = ecx

; 221  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 222  : 	storeBuffer( &w, sizeof( NxU16 ));

	push	2
	lea	eax, DWORD PTR _w$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+48]
	call	eax

; 223  : 	return *this;

	mov	eax, DWORD PTR _this$[ebp]

; 224  : }

	mov	esp, ebp
	pop	ebp
	ret	4
?storeWord@MemoryWriteBuffer@@UAEAAVNxStream@@G@Z ENDP	; MemoryWriteBuffer::storeWord
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xashxt_v0.81_rev.1_with_sources\xashxt_v0.81_rev.1_src\server\physics\nxuserstream.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
_b$ = 8							; size = 1
?storeByte@MemoryWriteBuffer@@UAEAAVNxStream@@E@Z PROC	; MemoryWriteBuffer::storeByte
; _this$ = ecx

; 215  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 216  : 	storeBuffer( &b, sizeof( NxU8 ));

	push	1
	lea	eax, DWORD PTR _b$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+48]
	call	eax

; 217  : 	return *this;

	mov	eax, DWORD PTR _this$[ebp]

; 218  : }

	mov	esp, ebp
	pop	ebp
	ret	4
?storeByte@MemoryWriteBuffer@@UAEAAVNxStream@@E@Z ENDP	; MemoryWriteBuffer::storeByte
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xashxt_v0.81_rev.1_with_sources\xashxt_v0.81_rev.1_src\server\physics\nxuserstream.h
;	COMDAT ?readBuffer@MemoryWriteBuffer@@UBEXPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_buffer$ = 8						; size = 4
_size$ = 12						; size = 4
?readBuffer@MemoryWriteBuffer@@UBEXPAXI@Z PROC		; MemoryWriteBuffer::readBuffer, COMDAT
; _this$ = ecx

; 62   : 	virtual void readBuffer( void *buffer, NxU32 size ) const { NX_ASSERT(0); }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	jne	SHORT $LN1@readBuffer
	push	62					; 0000003eH
	push	OFFSET ??_C@_1NK@CFPABGLA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAu?$AAs?$AAe?$AAr?$AA?2?$AAd@
	push	OFFSET ??_C@_13COJANIEC@?$AA0@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN1@readBuffer:
	mov	esp, ebp
	pop	ebp
	ret	8
?readBuffer@MemoryWriteBuffer@@UBEXPAXI@Z ENDP		; MemoryWriteBuffer::readBuffer
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xashxt_v0.81_rev.1_with_sources\xashxt_v0.81_rev.1_src\server\physics\nxuserstream.h
;	COMDAT ?readDouble@MemoryWriteBuffer@@UBENXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?readDouble@MemoryWriteBuffer@@UBENXZ PROC		; MemoryWriteBuffer::readDouble, COMDAT
; _this$ = ecx

; 61   : 	virtual double readDouble() const { NX_ASSERT(0);	return 0.0; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	jne	SHORT $LN3@readDouble
	push	61					; 0000003dH
	push	OFFSET ??_C@_1NK@CFPABGLA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAu?$AAs?$AAe?$AAr?$AA?2?$AAd@
	push	OFFSET ??_C@_13COJANIEC@?$AA0@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN3@readDouble:
	fldz
	mov	esp, ebp
	pop	ebp
	ret	0
?readDouble@MemoryWriteBuffer@@UBENXZ ENDP		; MemoryWriteBuffer::readDouble
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xashxt_v0.81_rev.1_with_sources\xashxt_v0.81_rev.1_src\server\physics\nxuserstream.h
;	COMDAT ?readFloat@MemoryWriteBuffer@@UBEMXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?readFloat@MemoryWriteBuffer@@UBEMXZ PROC		; MemoryWriteBuffer::readFloat, COMDAT
; _this$ = ecx

; 60   : 	virtual float readFloat() const { NX_ASSERT(0); return 0.0f; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	jne	SHORT $LN3@readFloat
	push	60					; 0000003cH
	push	OFFSET ??_C@_1NK@CFPABGLA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAu?$AAs?$AAe?$AAr?$AA?2?$AAd@
	push	OFFSET ??_C@_13COJANIEC@?$AA0@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN3@readFloat:
	fldz
	mov	esp, ebp
	pop	ebp
	ret	0
?readFloat@MemoryWriteBuffer@@UBEMXZ ENDP		; MemoryWriteBuffer::readFloat
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xashxt_v0.81_rev.1_with_sources\xashxt_v0.81_rev.1_src\server\physics\nxuserstream.h
;	COMDAT ?readDword@MemoryWriteBuffer@@UBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?readDword@MemoryWriteBuffer@@UBEIXZ PROC		; MemoryWriteBuffer::readDword, COMDAT
; _this$ = ecx

; 59   : 	virtual NxU32 readDword() const { NX_ASSERT(0); return 0;	}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	jne	SHORT $LN3@readDword
	push	59					; 0000003bH
	push	OFFSET ??_C@_1NK@CFPABGLA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAu?$AAs?$AAe?$AAr?$AA?2?$AAd@
	push	OFFSET ??_C@_13COJANIEC@?$AA0@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN3@readDword:
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	0
?readDword@MemoryWriteBuffer@@UBEIXZ ENDP		; MemoryWriteBuffer::readDword
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xashxt_v0.81_rev.1_with_sources\xashxt_v0.81_rev.1_src\server\physics\nxuserstream.h
;	COMDAT ?readWord@MemoryWriteBuffer@@UBEGXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?readWord@MemoryWriteBuffer@@UBEGXZ PROC		; MemoryWriteBuffer::readWord, COMDAT
; _this$ = ecx

; 58   : 	virtual NxU16 readWord() const { NX_ASSERT(0); return 0;	}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	jne	SHORT $LN3@readWord
	push	58					; 0000003aH
	push	OFFSET ??_C@_1NK@CFPABGLA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAu?$AAs?$AAe?$AAr?$AA?2?$AAd@
	push	OFFSET ??_C@_13COJANIEC@?$AA0@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN3@readWord:
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	0
?readWord@MemoryWriteBuffer@@UBEGXZ ENDP		; MemoryWriteBuffer::readWord
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xashxt_v0.81_rev.1_with_sources\xashxt_v0.81_rev.1_src\server\physics\nxuserstream.h
;	COMDAT ?readByte@MemoryWriteBuffer@@UBEEXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?readByte@MemoryWriteBuffer@@UBEEXZ PROC		; MemoryWriteBuffer::readByte, COMDAT
; _this$ = ecx

; 57   : 	virtual NxU8 readByte() const	{ NX_ASSERT(0); return 0;	}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	jne	SHORT $LN3@readByte
	push	57					; 00000039H
	push	OFFSET ??_C@_1NK@CFPABGLA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAu?$AAs?$AAe?$AAr?$AA?2?$AAd@
	push	OFFSET ??_C@_13COJANIEC@?$AA0@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN3@readByte:
	xor	al, al
	mov	esp, ebp
	pop	ebp
	ret	0
?readByte@MemoryWriteBuffer@@UBEEXZ ENDP		; MemoryWriteBuffer::readByte
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xashxt_v0.81_rev.1_with_sources\xashxt_v0.81_rev.1_src\server\physics\nxuserstream.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1MemoryWriteBuffer@@UAE@XZ PROC			; MemoryWriteBuffer::~MemoryWriteBuffer
; _this$ = ecx

; 210  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7MemoryWriteBuffer@@6B@

; 211  : 	free( data );

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	call	_free
	add	esp, 4

; 212  : }

	mov	ecx, DWORD PTR _this$[ebp]
	call	??1NxStream@@UAE@XZ			; NxStream::~NxStream
	mov	esp, ebp
	pop	ebp
	ret	0
??1MemoryWriteBuffer@@UAE@XZ ENDP			; MemoryWriteBuffer::~MemoryWriteBuffer
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xashxt_v0.81_rev.1_with_sources\xashxt_v0.81_rev.1_src\server\physics\nxuserstream.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0MemoryWriteBuffer@@QAE@XZ PROC			; MemoryWriteBuffer::MemoryWriteBuffer
; _this$ = ecx

; 206  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0NxStream@@QAE@XZ			; NxStream::NxStream
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7MemoryWriteBuffer@@6B@

; 205  : MemoryWriteBuffer :: MemoryWriteBuffer() : currentSize(0), maxSize(0), data(NULL)

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+12], 0

; 207  : }

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0MemoryWriteBuffer@@QAE@XZ ENDP			; MemoryWriteBuffer::MemoryWriteBuffer
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_GUserStream@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GUserStream@@UAEPAXI@Z PROC				; UserStream::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1UserStream@@UAE@XZ			; UserStream::~UserStream
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN2@scalar
	push	24					; 00000018H
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAXI@Z				; operator delete
	add	esp, 8
$LN2@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_GUserStream@@UAEPAXI@Z ENDP				; UserStream::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xashxt_v0.81_rev.1_with_sources\xashxt_v0.81_rev.1_src\server\physics\nxuserstream.cpp
_TEXT	SEGMENT
_this$ = -12						; size = 4
_ofs$ = -8						; size = 4
_save$ = -1						; size = 1
_path$ = 8						; size = 4
?CreatePath@UserStream@@AAEXPAD@Z PROC			; UserStream::CreatePath
; _this$ = ecx

; 71   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 72   : 	char *ofs, save;
; 73   : 
; 74   : 	for( ofs = path+1; *ofs; ofs++ )

	mov	eax, DWORD PTR _path$[ebp]
	add	eax, 1
	mov	DWORD PTR _ofs$[ebp], eax
	jmp	SHORT $LN4@CreatePath
$LN2@CreatePath:
	mov	ecx, DWORD PTR _ofs$[ebp]
	add	ecx, 1
	mov	DWORD PTR _ofs$[ebp], ecx
$LN4@CreatePath:
	mov	edx, DWORD PTR _ofs$[ebp]
	movsx	eax, BYTE PTR [edx]
	test	eax, eax
	je	SHORT $LN1@CreatePath

; 75   : 	{
; 76   : 		if( *ofs == '/' || *ofs == '\\' )

	mov	ecx, DWORD PTR _ofs$[ebp]
	movsx	edx, BYTE PTR [ecx]
	cmp	edx, 47					; 0000002fH
	je	SHORT $LN6@CreatePath
	mov	eax, DWORD PTR _ofs$[ebp]
	movsx	ecx, BYTE PTR [eax]
	cmp	ecx, 92					; 0000005cH
	jne	SHORT $LN5@CreatePath
$LN6@CreatePath:

; 77   : 		{
; 78   : 			// create the directory
; 79   : 			save = *ofs;

	mov	edx, DWORD PTR _ofs$[ebp]
	mov	al, BYTE PTR [edx]
	mov	BYTE PTR _save$[ebp], al

; 80   : 			*ofs = 0;

	mov	ecx, DWORD PTR _ofs$[ebp]
	mov	BYTE PTR [ecx], 0

; 81   : 			_mkdir( path );

	mov	edx, DWORD PTR _path$[ebp]
	push	edx
	call	__mkdir
	add	esp, 4

; 82   : 			*ofs = save;

	mov	eax, DWORD PTR _ofs$[ebp]
	mov	cl, BYTE PTR _save$[ebp]
	mov	BYTE PTR [eax], cl
$LN5@CreatePath:

; 83   : 		}
; 84   : 	}

	jmp	SHORT $LN2@CreatePath
$LN1@CreatePath:

; 85   : }

	mov	esp, ebp
	pop	ebp
	ret	4
?CreatePath@UserStream@@AAEXPAD@Z ENDP			; UserStream::CreatePath
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xashxt_v0.81_rev.1_with_sources\xashxt_v0.81_rev.1_src\server\physics\nxuserstream.cpp
_TEXT	SEGMENT
_w$ = -8						; size = 4
_this$ = -4						; size = 4
_buffer$ = 8						; size = 4
_size$ = 12						; size = 4
?storeBuffer@UserStream@@UAEAAVNxStream@@PBXI@Z PROC	; UserStream::storeBuffer
; _this$ = ecx

; 198  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 199  : 	size_t w = fwrite( buffer, size, 1, fp );

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	push	1
	mov	edx, DWORD PTR _size$[ebp]
	push	edx
	mov	eax, DWORD PTR _buffer$[ebp]
	push	eax
	call	_fwrite
	add	esp, 16					; 00000010H
	mov	DWORD PTR _w$[ebp], eax

; 200  : 	NX_ASSERT( w );

	cmp	DWORD PTR _w$[ebp], 0
	jne	SHORT $LN3@storeBuffe
	push	200					; 000000c8H
	push	OFFSET $SG71968
	push	OFFSET $SG71969
	call	__wassert
	add	esp, 12					; 0000000cH
$LN3@storeBuffe:

; 201  : 
; 202  : 	return *this;

	mov	eax, DWORD PTR _this$[ebp]

; 203  : }

	mov	esp, ebp
	pop	ebp
	ret	8
?storeBuffer@UserStream@@UAEAAVNxStream@@PBXI@Z ENDP	; UserStream::storeBuffer
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xashxt_v0.81_rev.1_with_sources\xashxt_v0.81_rev.1_src\server\physics\nxuserstream.cpp
_TEXT	SEGMENT
_w$ = -8						; size = 4
_this$ = -4						; size = 4
_f$ = 8							; size = 8
?storeDouble@UserStream@@UAEAAVNxStream@@N@Z PROC	; UserStream::storeDouble
; _this$ = ecx

; 190  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 191  : 	size_t w = fwrite( &f, sizeof( NxF64 ), 1, fp );

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	push	1
	push	8
	lea	edx, DWORD PTR _f$[ebp]
	push	edx
	call	_fwrite
	add	esp, 16					; 00000010H
	mov	DWORD PTR _w$[ebp], eax

; 192  : 	NX_ASSERT( w );

	cmp	DWORD PTR _w$[ebp], 0
	jne	SHORT $LN3@storeDoubl
	push	192					; 000000c0H
	push	OFFSET $SG71958
	push	OFFSET $SG71959
	call	__wassert
	add	esp, 12					; 0000000cH
$LN3@storeDoubl:

; 193  : 
; 194  : 	return *this;

	mov	eax, DWORD PTR _this$[ebp]

; 195  : }

	mov	esp, ebp
	pop	ebp
	ret	8
?storeDouble@UserStream@@UAEAAVNxStream@@N@Z ENDP	; UserStream::storeDouble
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xashxt_v0.81_rev.1_with_sources\xashxt_v0.81_rev.1_src\server\physics\nxuserstream.cpp
_TEXT	SEGMENT
_w$ = -8						; size = 4
_this$ = -4						; size = 4
_f$ = 8							; size = 4
?storeFloat@UserStream@@UAEAAVNxStream@@M@Z PROC	; UserStream::storeFloat
; _this$ = ecx

; 182  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 183  : 	size_t w = fwrite( &f, sizeof( NxReal ), 1, fp );

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	push	1
	push	4
	lea	edx, DWORD PTR _f$[ebp]
	push	edx
	call	_fwrite
	add	esp, 16					; 00000010H
	mov	DWORD PTR _w$[ebp], eax

; 184  : 	NX_ASSERT( w );

	cmp	DWORD PTR _w$[ebp], 0
	jne	SHORT $LN3@storeFloat
	push	184					; 000000b8H
	push	OFFSET $SG71948
	push	OFFSET $SG71949
	call	__wassert
	add	esp, 12					; 0000000cH
$LN3@storeFloat:

; 185  : 
; 186  : 	return *this;

	mov	eax, DWORD PTR _this$[ebp]

; 187  : }

	mov	esp, ebp
	pop	ebp
	ret	4
?storeFloat@UserStream@@UAEAAVNxStream@@M@Z ENDP	; UserStream::storeFloat
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xashxt_v0.81_rev.1_with_sources\xashxt_v0.81_rev.1_src\server\physics\nxuserstream.cpp
_TEXT	SEGMENT
_w$ = -8						; size = 4
_this$ = -4						; size = 4
_d$ = 8							; size = 4
?storeDword@UserStream@@UAEAAVNxStream@@I@Z PROC	; UserStream::storeDword
; _this$ = ecx

; 174  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 175  : 	size_t w = fwrite( &d, sizeof( NxU32 ), 1, fp );

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	push	1
	push	4
	lea	edx, DWORD PTR _d$[ebp]
	push	edx
	call	_fwrite
	add	esp, 16					; 00000010H
	mov	DWORD PTR _w$[ebp], eax

; 176  : 	NX_ASSERT( w );

	cmp	DWORD PTR _w$[ebp], 0
	jne	SHORT $LN3@storeDword
	push	176					; 000000b0H
	push	OFFSET $SG71938
	push	OFFSET $SG71939
	call	__wassert
	add	esp, 12					; 0000000cH
$LN3@storeDword:

; 177  : 
; 178  : 	return *this;

	mov	eax, DWORD PTR _this$[ebp]

; 179  : }

	mov	esp, ebp
	pop	ebp
	ret	4
?storeDword@UserStream@@UAEAAVNxStream@@I@Z ENDP	; UserStream::storeDword
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xashxt_v0.81_rev.1_with_sources\xashxt_v0.81_rev.1_src\server\physics\nxuserstream.cpp
_TEXT	SEGMENT
_ww$ = -8						; size = 4
_this$ = -4						; size = 4
_w$ = 8							; size = 2
?storeWord@UserStream@@UAEAAVNxStream@@G@Z PROC		; UserStream::storeWord
; _this$ = ecx

; 167  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 168  : 	size_t ww = fwrite( &w, sizeof( NxU16 ), 1, fp );

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	push	1
	push	2
	lea	edx, DWORD PTR _w$[ebp]
	push	edx
	call	_fwrite
	add	esp, 16					; 00000010H
	mov	DWORD PTR _ww$[ebp], eax

; 169  : 	NX_ASSERT( ww );

	cmp	DWORD PTR _ww$[ebp], 0
	jne	SHORT $LN3@storeWord
	push	169					; 000000a9H
	push	OFFSET $SG71928
	push	OFFSET $SG71929
	call	__wassert
	add	esp, 12					; 0000000cH
$LN3@storeWord:

; 170  : 	return *this;

	mov	eax, DWORD PTR _this$[ebp]

; 171  : }

	mov	esp, ebp
	pop	ebp
	ret	4
?storeWord@UserStream@@UAEAAVNxStream@@G@Z ENDP		; UserStream::storeWord
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xashxt_v0.81_rev.1_with_sources\xashxt_v0.81_rev.1_src\server\physics\nxuserstream.cpp
_TEXT	SEGMENT
_w$ = -8						; size = 4
_this$ = -4						; size = 4
_b$ = 8							; size = 1
?storeByte@UserStream@@UAEAAVNxStream@@E@Z PROC		; UserStream::storeByte
; _this$ = ecx

; 159  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 160  : 	size_t w = fwrite( &b, sizeof( NxU8 ), 1, fp );

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	push	1
	push	1
	lea	edx, DWORD PTR _b$[ebp]
	push	edx
	call	_fwrite
	add	esp, 16					; 00000010H
	mov	DWORD PTR _w$[ebp], eax

; 161  : 	NX_ASSERT( w );

	cmp	DWORD PTR _w$[ebp], 0
	jne	SHORT $LN3@storeByte
	push	161					; 000000a1H
	push	OFFSET $SG71918
	push	OFFSET $SG71919
	call	__wassert
	add	esp, 12					; 0000000cH
$LN3@storeByte:

; 162  : 
; 163  : 	return *this;

	mov	eax, DWORD PTR _this$[ebp]

; 164  : }

	mov	esp, ebp
	pop	ebp
	ret	4
?storeByte@UserStream@@UAEAAVNxStream@@E@Z ENDP		; UserStream::storeByte
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xashxt_v0.81_rev.1_with_sources\xashxt_v0.81_rev.1_src\server\physics\nxuserstream.cpp
_TEXT	SEGMENT
_read_size$ = -12					; size = 4
_reduced_size$1 = -8					; size = 4
_this$ = -4						; size = 4
_outbuf$ = 8						; size = 4
_size$ = 12						; size = 4
?readBuffer@UserStream@@UBEXPAXI@Z PROC			; UserStream::readBuffer
; _this$ = ecx

; 124  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 125  : 	if( size == 0 ) return;

	cmp	DWORD PTR _size$[ebp], 0
	jne	SHORT $LN2@readBuffer
	jmp	$LN1@readBuffer
$LN2@readBuffer:

; 126  : 
; 127  : #ifdef _DEBUG
; 128  : 	// in case we failed to loading file
; 129  : 	memset( outbuf, 0x00, size );

	mov	eax, DWORD PTR _size$[ebp]
	push	eax
	push	0
	mov	ecx, DWORD PTR _outbuf$[ebp]
	push	ecx
	call	_memset
	add	esp, 12					; 0000000cH

; 130  : #endif
; 131  : 	if( !buffer || !outbuf ) return;

	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+12], 0
	je	SHORT $LN4@readBuffer
	cmp	DWORD PTR _outbuf$[ebp], 0
	jne	SHORT $LN3@readBuffer
$LN4@readBuffer:
	jmp	$LN1@readBuffer
$LN3@readBuffer:

; 132  : 
; 133  : 	// check for enough room
; 134  : 	if( m_iOffset >= m_iLength )

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+16]
	cmp	edx, DWORD PTR [ecx+20]
	jb	SHORT $LN5@readBuffer

; 135  : 		return; // hit EOF

	jmp	$LN1@readBuffer
$LN5@readBuffer:

; 136  : 
; 137  : 	size_t read_size = 0;

	mov	DWORD PTR _read_size$[ebp], 0

; 138  : 
; 139  : 	if( m_iOffset + size <= m_iLength )

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	add	ecx, DWORD PTR _size$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	cmp	ecx, DWORD PTR [edx+20]
	ja	SHORT $LN6@readBuffer

; 140  : 	{
; 141  : 		memcpy( outbuf, buffer + m_iOffset, size );

	mov	eax, DWORD PTR _size$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	eax, DWORD PTR _this$[ebp]
	add	edx, DWORD PTR [eax+16]
	push	edx
	mov	ecx, DWORD PTR _outbuf$[ebp]
	push	ecx
	call	_memcpy
	add	esp, 12					; 0000000cH

; 142  : 		(size_t)m_iOffset += size;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	add	eax, DWORD PTR _size$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+16], eax

; 143  : 		read_size = size;

	mov	edx, DWORD PTR _size$[ebp]
	mov	DWORD PTR _read_size$[ebp], edx

; 144  : 	}
; 145  : 	else

	jmp	SHORT $LN7@readBuffer
$LN6@readBuffer:

; 146  : 	{
; 147  : 		size_t reduced_size = m_iLength - m_iOffset;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+20]
	sub	edx, DWORD PTR [ecx+16]
	mov	DWORD PTR _reduced_size$1[ebp], edx

; 148  : 		memcpy( outbuf, buffer + m_iOffset, reduced_size );

	mov	eax, DWORD PTR _reduced_size$1[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	eax, DWORD PTR _this$[ebp]
	add	edx, DWORD PTR [eax+16]
	push	edx
	mov	ecx, DWORD PTR _outbuf$[ebp]
	push	ecx
	call	_memcpy
	add	esp, 12					; 0000000cH

; 149  : 		(size_t)m_iOffset += reduced_size;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	add	eax, DWORD PTR _reduced_size$1[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+16], eax

; 150  : 		read_size = reduced_size;

	mov	edx, DWORD PTR _reduced_size$1[ebp]
	mov	DWORD PTR _read_size$[ebp], edx

; 151  : 		ALERT( at_warning, "readBuffer: buffer is overrun\n" );

	push	OFFSET $SG71907
	push	3
	call	DWORD PTR ?g_engfuncs@@3Uenginefuncs_s@@A+244
	add	esp, 8
$LN7@readBuffer:

; 152  : 	}
; 153  : 
; 154  : 	NX_ASSERT(read_size);

	cmp	DWORD PTR _read_size$[ebp], 0
	jne	SHORT $LN1@readBuffer
	push	154					; 0000009aH
	push	OFFSET $SG71908
	push	OFFSET $SG71909
	call	__wassert
	add	esp, 12					; 0000000cH
$LN1@readBuffer:

; 155  : }

	mov	esp, ebp
	pop	ebp
	ret	8
?readBuffer@UserStream@@UBEXPAXI@Z ENDP			; UserStream::readBuffer
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xashxt_v0.81_rev.1_with_sources\xashxt_v0.81_rev.1_src\server\physics\nxuserstream.cpp
_TEXT	SEGMENT
_f$ = -12						; size = 8
_this$ = -4						; size = 4
?readDouble@UserStream@@UBENXZ PROC			; UserStream::readDouble
; _this$ = ecx

; 117  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 118  : 	NxF64 f;
; 119  : 	readBuffer( &f, sizeof( NxF64 ));

	push	8
	lea	eax, DWORD PTR _f$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+24]
	call	eax

; 120  : 	return f;

	fld	QWORD PTR _f$[ebp]

; 121  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?readDouble@UserStream@@UBENXZ ENDP			; UserStream::readDouble
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xashxt_v0.81_rev.1_with_sources\xashxt_v0.81_rev.1_src\server\physics\nxuserstream.cpp
_TEXT	SEGMENT
_f$ = -8						; size = 4
_this$ = -4						; size = 4
?readFloat@UserStream@@UBEMXZ PROC			; UserStream::readFloat
; _this$ = ecx

; 110  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 111  : 	NxReal f;
; 112  : 	readBuffer( &f, sizeof( NxReal ));

	push	4
	lea	eax, DWORD PTR _f$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+24]
	call	eax

; 113  : 	return f;

	fld	DWORD PTR _f$[ebp]

; 114  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?readFloat@UserStream@@UBEMXZ ENDP			; UserStream::readFloat
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xashxt_v0.81_rev.1_with_sources\xashxt_v0.81_rev.1_src\server\physics\nxuserstream.cpp
_TEXT	SEGMENT
_d$ = -8						; size = 4
_this$ = -4						; size = 4
?readDword@UserStream@@UBEIXZ PROC			; UserStream::readDword
; _this$ = ecx

; 103  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 104  : 	NxU32 d;
; 105  : 	readBuffer( &d, sizeof( NxU32 ));

	push	4
	lea	eax, DWORD PTR _d$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+24]
	call	eax

; 106  : 	return d;

	mov	eax, DWORD PTR _d$[ebp]

; 107  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?readDword@UserStream@@UBEIXZ ENDP			; UserStream::readDword
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xashxt_v0.81_rev.1_with_sources\xashxt_v0.81_rev.1_src\server\physics\nxuserstream.cpp
_TEXT	SEGMENT
_this$ = -8						; size = 4
_w$ = -4						; size = 2
?readWord@UserStream@@UBEGXZ PROC			; UserStream::readWord
; _this$ = ecx

; 96   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 97   : 	NxU16 w;
; 98   : 	readBuffer( &w, sizeof( NxU16 ));

	push	2
	lea	eax, DWORD PTR _w$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+24]
	call	eax

; 99   : 	return w;

	mov	ax, WORD PTR _w$[ebp]

; 100  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?readWord@UserStream@@UBEGXZ ENDP			; UserStream::readWord
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xashxt_v0.81_rev.1_with_sources\xashxt_v0.81_rev.1_src\server\physics\nxuserstream.cpp
_TEXT	SEGMENT
_this$ = -8						; size = 4
_b$ = -1						; size = 1
?readByte@UserStream@@UBEEXZ PROC			; UserStream::readByte
; _this$ = ecx

; 89   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 90   : 	NxU8 b;
; 91   : 	readBuffer( &b, sizeof( NxU8 ));

	push	1
	lea	eax, DWORD PTR _b$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+24]
	call	eax

; 92   : 	return b;

	mov	al, BYTE PTR _b$[ebp]

; 93   : }

	mov	esp, ebp
	pop	ebp
	ret	0
?readByte@UserStream@@UBEEXZ ENDP			; UserStream::readByte
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xashxt_v0.81_rev.1_with_sources\xashxt_v0.81_rev.1_src\server\physics\nxuserstream.cpp
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1UserStream@@UAE@XZ PROC				; UserStream::~UserStream
; _this$ = ecx

; 56   : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1UserStream@@UAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7UserStream@@6B@

; 57   : 	if( load_file )

	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+4]
	test	edx, edx
	je	SHORT $LN2@UserStream

; 58   :           {
; 59   : 		FREE_FILE( buffer );

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	call	DWORD PTR ?g_engfuncs@@3Uenginefuncs_s@@A+384
	add	esp, 4

; 60   : 		m_iOffset = m_iLength = 0;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+20], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+16], 0

; 61   : 		buffer = NULL;         

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+12], 0

; 62   : 	}
; 63   : 	else

	jmp	SHORT $LN1@UserStream
$LN2@UserStream:

; 64   : 	{
; 65   : 		if( fp ) fclose( fp );

	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+8], 0
	je	SHORT $LN4@UserStream
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	call	_fclose
	add	esp, 4
$LN4@UserStream:

; 66   : 		fp = NULL;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], 0
$LN1@UserStream:

; 67   : 	}
; 68   : }

	mov	ecx, DWORD PTR _this$[ebp]
	call	??1NxStream@@UAE@XZ			; NxStream::~NxStream
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
text$x	SEGMENT
__ehhandler$??1UserStream@@UAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1UserStream@@UAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1UserStream@@UAE@XZ ENDP				; UserStream::~UserStream
; Function compile flags: /Odtp
; File c:\users\user\downloads\xashxt_v0.81_rev.1_with_sources\xashxt_v0.81_rev.1_src\server\physics\nxuserstream.cpp
_TEXT	SEGMENT
_size$2 = -548						; size = 4
tv141 = -544						; size = 4
_this$ = -540						; size = 4
_szFilePath$3 = -536					; size = 260
_szFullPath$4 = -276					; size = 260
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_filename$ = 8						; size = 4
_load$ = 12						; size = 1
??0UserStream@@QAE@PBD_N@Z PROC				; UserStream::UserStream
; _this$ = ecx

; 25   : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0UserStream@@QAE@PBD_N@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 536				; 00000218H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0NxStream@@QAE@XZ			; NxStream::NxStream
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7UserStream@@6B@

; 24   : UserStream :: UserStream( const char* filename, bool load ) : fp(NULL)

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+8], 0

; 26   : 	load_file = load;

	mov	edx, DWORD PTR _this$[ebp]
	mov	al, BYTE PTR _load$[ebp]
	mov	BYTE PTR [edx+4], al

; 27   : 
; 28   : 	if( load_file )

	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+4]
	test	edx, edx
	je	SHORT $LN2@UserStream

; 29   : 	{
; 30   : 		int size;
; 31   : 
; 32   : 		// load from pack or disk
; 33   : 		buffer = LOAD_FILE( filename, &size );

	lea	eax, DWORD PTR _size$2[ebp]
	push	eax
	mov	ecx, DWORD PTR _filename$[ebp]
	push	ecx
	call	DWORD PTR ?g_engfuncs@@3Uenginefuncs_s@@A+380
	add	esp, 8
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+12], eax

; 34   : 		m_iLength = size;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _size$2[ebp]
	mov	DWORD PTR [eax+20], ecx

; 35   : 		m_iOffset = 0;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+16], 0

; 36   : 	}
; 37   : 	else

	jmp	$LN1@UserStream
$LN2@UserStream:

; 38   : 	{
; 39   : 		// make sure the directories have been made
; 40   : 		char	szFilePath[MAX_PATH];
; 41   : 		char	szFullPath[MAX_PATH];
; 42   : 
; 43   : 		// make sure directories have been made
; 44   : 		GET_GAME_DIR( szFilePath );

	lea	eax, DWORD PTR _szFilePath$3[ebp]
	push	eax
	call	DWORD PTR ?g_engfuncs@@3Uenginefuncs_s@@A+396
	add	esp, 4

; 45   : 
; 46   : 		Q_snprintf( szFullPath, sizeof( szFullPath ), "%s/%s", szFilePath, filename );

	mov	ecx, DWORD PTR _filename$[ebp]
	push	ecx
	lea	edx, DWORD PTR _szFilePath$3[ebp]
	push	edx
	push	OFFSET $SG71840
	push	260					; 00000104H
	lea	eax, DWORD PTR _szFullPath$4[ebp]
	push	eax
	call	?Q_snprintf@@YAHPADIPBDZZ		; Q_snprintf
	add	esp, 20					; 00000014H

; 47   : 		CreatePath( szFullPath ); // make sure what all folders are existing

	lea	ecx, DWORD PTR _szFullPath$4[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?CreatePath@UserStream@@AAEXPAD@Z	; UserStream::CreatePath

; 48   : 
; 49   : 		// write to disk
; 50   : 		fp = fopen( szFullPath, "wb" );

	push	OFFSET $SG71841
	lea	edx, DWORD PTR _szFullPath$4[ebp]
	push	edx
	call	_fopen
	add	esp, 8
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+8], eax

; 51   : 		ASSERT( fp != NULL );

	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+8], 0
	je	SHORT $LN5@UserStream
	mov	DWORD PTR tv141[ebp], 1
	jmp	SHORT $LN6@UserStream
$LN5@UserStream:
	mov	DWORD PTR tv141[ebp], 0
$LN6@UserStream:
	push	0
	push	51					; 00000033H
	push	OFFSET $SG71842
	push	OFFSET $SG71843
	mov	eax, DWORD PTR tv141[ebp]
	push	eax
	call	?DBG_AssertFunction@@YAXHPBD0H0@Z	; DBG_AssertFunction
	add	esp, 20					; 00000014H
$LN1@UserStream:

; 52   : 	}
; 53   : }

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$??0UserStream@@QAE@PBD_N@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1NxStream@@UAE@XZ			; NxStream::~NxStream
__ehhandler$??0UserStream@@QAE@PBD_N@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-540]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-4]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0UserStream@@QAE@PBD_N@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0UserStream@@QAE@PBD_N@Z ENDP				; UserStream::UserStream
; Function compile flags: /Odtp
;	COMDAT ??_GNxStream@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GNxStream@@UAEPAXI@Z PROC				; NxStream::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1NxStream@@UAE@XZ			; NxStream::~NxStream
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN2@scalar
	push	4
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAXI@Z				; operator delete
	add	esp, 8
$LN2@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_GNxStream@@UAEPAXI@Z ENDP				; NxStream::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xashxt_v0.81_rev.1_with_sources\xashxt_v0.81_rev.1_src\phys_shared\nxstream.h
;	COMDAT ??1NxStream@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1NxStream@@UAE@XZ PROC				; NxStream::~NxStream, COMDAT
; _this$ = ecx

; 43   : 	virtual						~NxStream()				{}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7NxStream@@6B@
	mov	esp, ebp
	pop	ebp
	ret	0
??1NxStream@@UAE@XZ ENDP				; NxStream::~NxStream
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xashxt_v0.81_rev.1_with_sources\xashxt_v0.81_rev.1_src\phys_shared\nxstream.h
;	COMDAT ??0NxStream@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0NxStream@@QAE@XZ PROC				; NxStream::NxStream, COMDAT
; _this$ = ecx

; 38   : 								NxStream()				{}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7NxStream@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0NxStream@@QAE@XZ ENDP				; NxStream::NxStream
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??__G@YGXPAX0IIP6EPAX00@Z@Z
_TEXT	SEGMENT
tv66 = -4						; size = 4
___t$ = 8						; size = 4
___u$ = 12						; size = 4
___s$ = 16						; size = 4
___n$ = 20						; size = 4
___f$ = 24						; size = 4
??__G@YGXPAX0IIP6EPAX00@Z@Z PROC			; `vector copy constructor iterator', COMDAT
	push	ebp
	mov	ebp, esp
	push	ecx
$LN2@vector:
	mov	eax, DWORD PTR ___n$[ebp]
	mov	DWORD PTR tv66[ebp], eax
	mov	ecx, DWORD PTR ___n$[ebp]
	sub	ecx, 1
	mov	DWORD PTR ___n$[ebp], ecx
	cmp	DWORD PTR tv66[ebp], 0
	jbe	SHORT $LN1@vector
	mov	edx, DWORD PTR ___u$[ebp]
	push	edx
	mov	ecx, DWORD PTR ___t$[ebp]
	call	DWORD PTR ___f$[ebp]
	mov	eax, DWORD PTR ___t$[ebp]
	add	eax, DWORD PTR ___s$[ebp]
	mov	DWORD PTR ___t$[ebp], eax
	mov	ecx, DWORD PTR ___u$[ebp]
	add	ecx, DWORD PTR ___s$[ebp]
	mov	DWORD PTR ___u$[ebp], ecx
	jmp	SHORT $LN2@vector
$LN1@vector:
	mov	esp, ebp
	pop	ebp
	ret	20					; 00000014H
??__G@YGXPAX0IIP6EPAX00@Z@Z ENDP			; `vector copy constructor iterator'
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_H@YGXPAXIIP6EPAX0@Z@Z
_TEXT	SEGMENT
tv66 = -4						; size = 4
___t$ = 8						; size = 4
___s$ = 12						; size = 4
___n$ = 16						; size = 4
___f$ = 20						; size = 4
??_H@YGXPAXIIP6EPAX0@Z@Z PROC				; `vector constructor iterator', COMDAT
	push	ebp
	mov	ebp, esp
	push	ecx
$LN2@vector:
	mov	eax, DWORD PTR ___n$[ebp]
	mov	DWORD PTR tv66[ebp], eax
	mov	ecx, DWORD PTR ___n$[ebp]
	sub	ecx, 1
	mov	DWORD PTR ___n$[ebp], ecx
	cmp	DWORD PTR tv66[ebp], 0
	jbe	SHORT $LN1@vector
	mov	ecx, DWORD PTR ___t$[ebp]
	call	DWORD PTR ___f$[ebp]
	mov	edx, DWORD PTR ___t$[ebp]
	add	edx, DWORD PTR ___s$[ebp]
	mov	DWORD PTR ___t$[ebp], edx
	jmp	SHORT $LN2@vector
$LN1@vector:
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
??_H@YGXPAXIIP6EPAX0@Z@Z ENDP				; `vector constructor iterator'
_TEXT	ENDS
END
