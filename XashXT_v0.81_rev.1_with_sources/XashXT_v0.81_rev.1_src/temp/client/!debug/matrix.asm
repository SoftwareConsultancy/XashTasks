; Listing generated by Microsoft (R) Optimizing Compiler Version 19.16.27045.0 

	TITLE	C:\Users\USER\Downloads\XashXT_v0.81_rev.1_with_sources\XashXT_v0.81_rev.1_src\game_shared\matrix.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	??_H@YGXPAXIIP6EPAX0@Z@Z			; `vector constructor iterator'
PUBLIC	??__G@YGXPAX0IIP6EPAX00@Z@Z			; `vector copy constructor iterator'
PUBLIC	?SinCos@@YAXMPAM0@Z				; SinCos
PUBLIC	??0Vector@@QAE@XZ				; Vector::Vector
PUBLIC	??0Vector@@QAE@MMM@Z				; Vector::Vector
PUBLIC	??0Vector@@QAE@ABV0@@Z				; Vector::Vector
PUBLIC	??HVector@@QBE?AV0@ABV0@@Z			; Vector::operator+
PUBLIC	??DVector@@QBE?AV0@M@Z				; Vector::operator*
PUBLIC	?Length@Vector@@QBEMXZ				; Vector::Length
PUBLIC	??BVector@@QAEPAMXZ				; Vector::operator float *
PUBLIC	??BVector@@QBEPBMXZ				; Vector::operator float const *
PUBLIC	?Normalize@Vector@@QBE?AV1@XZ			; Vector::Normalize
PUBLIC	?DotProduct@@YAMABVVector@@0@Z			; DotProduct
PUBLIC	?CrossProduct@@YA?AVVector@@ABV1@0@Z		; CrossProduct
PUBLIC	??0Vector4D@@QAE@XZ				; Vector4D::Vector4D
PUBLIC	??0Vector4D@@QAE@MMMM@Z				; Vector4D::Vector4D
PUBLIC	??0Vector4D@@QAE@ABV0@@Z			; Vector4D::Vector4D
PUBLIC	??BVector4D@@QAEPAMXZ				; Vector4D::operator float *
PUBLIC	??BVector4D@@QBEPBMXZ				; Vector4D::operator float const *
PUBLIC	??0matrix3x3@@QAE@XZ				; matrix3x3::matrix3x3
PUBLIC	?Identity@matrix3x3@@QAEXXZ			; matrix3x3::Identity
PUBLIC	??Amatrix3x3@@QAEPAMH@Z				; matrix3x3::operator[]
PUBLIC	??Amatrix3x3@@QBEPBMH@Z				; matrix3x3::operator[]
PUBLIC	??4matrix3x3@@QAEAAV0@ABVmatrix3x4@@@Z		; matrix3x3::operator=
PUBLIC	??4matrix3x3@@QAEAAV0@ABVmatrix4x4@@@Z		; matrix3x3::operator=
PUBLIC	?FromVector@matrix3x3@@QAEXABVVector@@@Z	; matrix3x3::FromVector
PUBLIC	?GetQuaternion@matrix3x3@@QAE?AVVector4D@@XZ	; matrix3x3::GetQuaternion
PUBLIC	?VectorRotate@matrix3x3@@QBE?AVVector@@ABV2@@Z	; matrix3x3::VectorRotate
PUBLIC	?VectorIRotate@matrix3x3@@QBE?AVVector@@ABV2@@Z	; matrix3x3::VectorIRotate
PUBLIC	?Concat@matrix3x3@@QAE?AV1@V1@@Z		; matrix3x3::Concat
PUBLIC	??0matrix3x3@@QAE@$$QAV0@@Z			; matrix3x3::matrix3x3
PUBLIC	??0matrix3x4@@QAE@XZ				; matrix3x4::matrix3x4
PUBLIC	?Identity@matrix3x4@@QAEXXZ			; matrix3x4::Identity
PUBLIC	??Amatrix3x4@@QAEPAMH@Z				; matrix3x4::operator[]
PUBLIC	??Amatrix3x4@@QBEPBMH@Z				; matrix3x4::operator[]
PUBLIC	??4matrix3x4@@QAEAAV0@ABVmatrix3x3@@@Z		; matrix3x4::operator=
PUBLIC	??4matrix3x4@@QAEAAV0@ABVmatrix4x4@@@Z		; matrix3x4::operator=
PUBLIC	?GetQuaternion@matrix3x4@@QAE?AVVector4D@@XZ	; matrix3x4::GetQuaternion
PUBLIC	?VectorTransform@matrix3x4@@QBE?AVVector@@ABV2@@Z ; matrix3x4::VectorTransform
PUBLIC	?VectorITransform@matrix3x4@@QBE?AVVector@@ABV2@@Z ; matrix3x4::VectorITransform
PUBLIC	?VectorRotate@matrix3x4@@QBE?AVVector@@ABV2@@Z	; matrix3x4::VectorRotate
PUBLIC	?VectorIRotate@matrix3x4@@QBE?AVVector@@ABV2@@Z	; matrix3x4::VectorIRotate
PUBLIC	?Invert@matrix3x4@@QBE?AV1@XZ			; matrix3x4::Invert
PUBLIC	?ConcatTransforms@matrix3x4@@QAE?AV1@V1@@Z	; matrix3x4::ConcatTransforms
PUBLIC	?ConcatTransforms@matrix3x4@@QBE?AV1@V1@@Z	; matrix3x4::ConcatTransforms
PUBLIC	??0matrix3x4@@QAE@$$QAV0@@Z			; matrix3x4::matrix3x4
PUBLIC	??0matrix4x4@@QAE@XZ				; matrix4x4::matrix4x4
PUBLIC	?Identity@matrix4x4@@QAEXXZ			; matrix4x4::Identity
PUBLIC	?CreateModelview@matrix4x4@@QAEXXZ		; matrix4x4::CreateModelview
PUBLIC	?CreateTexture@matrix4x4@@QAEXXZ		; matrix4x4::CreateTexture
PUBLIC	?CreateProjection@matrix4x4@@QAEXMMMM@Z		; matrix4x4::CreateProjection
PUBLIC	?CreateProjection@matrix4x4@@QAEXMMMMMM@Z	; matrix4x4::CreateProjection
PUBLIC	?CreateOrtho@matrix4x4@@QAEXMMMMMM@Z		; matrix4x4::CreateOrtho
PUBLIC	?CreateTranslate@matrix4x4@@QAEXMMM@Z		; matrix4x4::CreateTranslate
PUBLIC	?CreateRotate@matrix4x4@@QAEXMMMM@Z		; matrix4x4::CreateRotate
PUBLIC	?CreateScale@matrix4x4@@QAEXM@Z			; matrix4x4::CreateScale
PUBLIC	?CreateScale@matrix4x4@@QAEXMMM@Z		; matrix4x4::CreateScale
PUBLIC	??Amatrix4x4@@QAEPAMH@Z				; matrix4x4::operator[]
PUBLIC	??Amatrix4x4@@QBEPBMH@Z				; matrix4x4::operator[]
PUBLIC	??4matrix4x4@@QAEAAV0@ABVmatrix3x3@@@Z		; matrix4x4::operator=
PUBLIC	??4matrix4x4@@QAEAAV0@ABVmatrix3x4@@@Z		; matrix4x4::operator=
PUBLIC	??4matrix4x4@@QAEAAV0@ABV0@@Z			; matrix4x4::operator=
PUBLIC	?GetQuaternion@matrix4x4@@QAE?AVVector4D@@XZ	; matrix4x4::GetQuaternion
PUBLIC	?VectorTransform@matrix4x4@@QBE?AVVector@@ABV2@@Z ; matrix4x4::VectorTransform
PUBLIC	?VectorTransform@matrix4x4@@QBE?AVVector4D@@ABV2@@Z ; matrix4x4::VectorTransform
PUBLIC	?VectorITransform@matrix4x4@@QBE?AVVector@@ABV2@@Z ; matrix4x4::VectorITransform
PUBLIC	?VectorRotate@matrix4x4@@QBE?AVVector@@ABV2@@Z	; matrix4x4::VectorRotate
PUBLIC	?VectorIRotate@matrix4x4@@QBE?AVVector@@ABV2@@Z	; matrix4x4::VectorIRotate
PUBLIC	?TransformPositivePlane@matrix4x4@@QAEXABUmplane_s@@AAU2@@Z ; matrix4x4::TransformPositivePlane
PUBLIC	?TransformPositivePlane@matrix4x4@@QAEXABUplane_s@@AAU2@@Z ; matrix4x4::TransformPositivePlane
PUBLIC	?TransformStandardPlane@matrix4x4@@QAEXABUmplane_s@@AAU2@@Z ; matrix4x4::TransformStandardPlane
PUBLIC	?TransformStandardPlane@matrix4x4@@QAEXABUplane_s@@AAU2@@Z ; matrix4x4::TransformStandardPlane
PUBLIC	?Invert@matrix4x4@@QBE?AV1@XZ			; matrix4x4::Invert
PUBLIC	?InvertFull@matrix4x4@@QBE?AV1@XZ		; matrix4x4::InvertFull
PUBLIC	?ConcatTransforms@matrix4x4@@QAE?AV1@V1@@Z	; matrix4x4::ConcatTransforms
PUBLIC	?Concat@matrix4x4@@QAE?AV1@V1@@Z		; matrix4x4::Concat
PUBLIC	?QuakeToNewton@matrix4x4@@QBE?AV1@XZ		; matrix4x4::QuakeToNewton
PUBLIC	?NewtonToQuake@matrix4x4@@QBE?AV1@XZ		; matrix4x4::NewtonToQuake
PUBLIC	??0matrix4x4@@QAE@ABV0@@Z			; matrix4x4::matrix4x4
PUBLIC	??0plane_s@@QAE@ABU0@@Z				; plane_s::plane_s
PUBLIC	??0mplane_s@@QAE@ABU0@@Z			; mplane_s::mplane_s
PUBLIC	__real@00000000
PUBLIC	__real@3cd013a9
PUBLIC	__real@3f000000
PUBLIC	__real@3f800000
PUBLIC	__real@3ff0000000000000
PUBLIC	__real@40000000
PUBLIC	__real@4000000000000000
PUBLIC	__real@400921fb54442d18
PUBLIC	__real@4076800000000000
PUBLIC	__real@421d7af6
PUBLIC	__real@bc8efa35
PUBLIC	__real@bf800000
PUBLIC	__real@c0000000
PUBLIC	__xmm@80000000000000008000000000000000
PUBLIC	__xmm@80000000800000008000000080000000
EXTRN	_fabs:PROC
EXTRN	_sqrt:PROC
EXTRN	_tan:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
;	COMDAT __xmm@80000000800000008000000080000000
CONST	SEGMENT
__xmm@80000000800000008000000080000000 DB 00H, 00H, 00H, 080H, 00H, 00H, 00H
	DB	080H, 00H, 00H, 00H, 080H, 00H, 00H, 00H, 080H
CONST	ENDS
;	COMDAT __xmm@80000000000000008000000000000000
CONST	SEGMENT
__xmm@80000000000000008000000000000000 DB 00H, 00H, 00H, 00H, 00H, 00H, 00H
	DB	080H, 00H, 00H, 00H, 00H, 00H, 00H, 00H, 080H
CONST	ENDS
;	COMDAT __real@c0000000
CONST	SEGMENT
__real@c0000000 DD 0c0000000r			; -2
CONST	ENDS
;	COMDAT __real@bf800000
CONST	SEGMENT
__real@bf800000 DD 0bf800000r			; -1
CONST	ENDS
;	COMDAT __real@bc8efa35
CONST	SEGMENT
__real@bc8efa35 DD 0bc8efa35r			; -0.0174533
CONST	ENDS
;	COMDAT __real@421d7af6
CONST	SEGMENT
__real@421d7af6 DD 0421d7af6r			; 39.3701
CONST	ENDS
;	COMDAT __real@4076800000000000
CONST	SEGMENT
__real@4076800000000000 DQ 04076800000000000r	; 360
CONST	ENDS
;	COMDAT __real@400921fb54442d18
CONST	SEGMENT
__real@400921fb54442d18 DQ 0400921fb54442d18r	; 3.14159
CONST	ENDS
;	COMDAT __real@4000000000000000
CONST	SEGMENT
__real@4000000000000000 DQ 04000000000000000r	; 2
CONST	ENDS
;	COMDAT __real@40000000
CONST	SEGMENT
__real@40000000 DD 040000000r			; 2
CONST	ENDS
;	COMDAT __real@3ff0000000000000
CONST	SEGMENT
__real@3ff0000000000000 DQ 03ff0000000000000r	; 1
CONST	ENDS
;	COMDAT __real@3f800000
CONST	SEGMENT
__real@3f800000 DD 03f800000r			; 1
CONST	ENDS
;	COMDAT __real@3f000000
CONST	SEGMENT
__real@3f000000 DD 03f000000r			; 0.5
CONST	ENDS
;	COMDAT __real@3cd013a9
CONST	SEGMENT
__real@3cd013a9 DD 03cd013a9r			; 0.0254
CONST	ENDS
;	COMDAT __real@00000000
CONST	SEGMENT
__real@00000000 DD 000000000r			; 0
CONST	ENDS
; Function compile flags: /Odtp
;	COMDAT ??0mplane_s@@QAE@ABU0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??0mplane_s@@QAE@ABU0@@Z PROC				; mplane_s::mplane_s, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0Vector@@QAE@ABV0@@Z			; Vector::Vector
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR ___that$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	DWORD PTR [ecx+12], eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR ___that$[ebp]
	mov	al, BYTE PTR [edx+16]
	mov	BYTE PTR [ecx+16], al
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR ___that$[ebp]
	mov	al, BYTE PTR [edx+17]
	mov	BYTE PTR [ecx+17], al
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR ___that$[ebp]
	mov	ax, WORD PTR [edx+18]
	mov	WORD PTR [ecx+18], ax
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0mplane_s@@QAE@ABU0@@Z ENDP				; mplane_s::mplane_s
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??0plane_s@@QAE@ABU0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??0plane_s@@QAE@ABU0@@Z PROC				; plane_s::plane_s, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0Vector@@QAE@ABV0@@Z			; Vector::Vector
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR ___that$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	DWORD PTR [ecx+12], eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0plane_s@@QAE@ABU0@@Z ENDP				; plane_s::plane_s
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??0matrix4x4@@QAE@ABV0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??0matrix4x4@@QAE@ABV0@@Z PROC				; matrix4x4::matrix4x4, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	push	OFFSET ??0Vector4D@@QAE@ABV0@@Z		; Vector4D::Vector4D
	push	4
	push	16					; 00000010H
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??__G@YGXPAX0IIP6EPAX00@Z@Z
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0matrix4x4@@QAE@ABV0@@Z ENDP				; matrix4x4::matrix4x4
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xashxt_v0.81_rev.1_with_sources\xashxt_v0.81_rev.1_src\game_shared\matrix.cpp
_TEXT	SEGMENT
tv403 = -88						; size = 4
tv401 = -84						; size = 4
tv399 = -80						; size = 4
tv397 = -76						; size = 4
_this$ = -72						; size = 4
_out$ = -68						; size = 64
__$ArrayPad$ = -4					; size = 4
___$ReturnUdt$ = 8					; size = 4
?NewtonToQuake@matrix4x4@@QBE?AV1@XZ PROC		; matrix4x4::NewtonToQuake
; _this$ = ecx

; 1128 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 88					; 00000058H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 1129 : 	matrix4x4 out;

	lea	ecx, DWORD PTR _out$[ebp]
	call	??0matrix4x4@@QAE@XZ			; matrix4x4::matrix4x4

; 1130 : 
; 1131 : 	out[0][0] = mat[0][0];

	mov	eax, 16					; 00000010H
	imul	ecx, eax, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector4D@@QBEPBMXZ			; Vector4D::operator float const *
	mov	esi, eax
	mov	ecx, 4
	imul	edi, ecx, 0
	push	0
	lea	ecx, DWORD PTR _out$[ebp]
	call	??Amatrix4x4@@QAEPAMH@Z			; matrix4x4::operator[]
	mov	edx, 4
	imul	ecx, edx, 0
	mov	edx, DWORD PTR [esi+edi]
	mov	DWORD PTR [eax+ecx], edx

; 1132 : 	out[0][1] = mat[0][2];

	mov	eax, 16					; 00000010H
	imul	ecx, eax, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector4D@@QBEPBMXZ			; Vector4D::operator float const *
	mov	esi, eax
	mov	edi, 4
	shl	edi, 1
	push	0
	lea	ecx, DWORD PTR _out$[ebp]
	call	??Amatrix4x4@@QAEPAMH@Z			; matrix4x4::operator[]
	mov	ecx, 4
	shl	ecx, 0
	mov	edx, DWORD PTR [esi+edi]
	mov	DWORD PTR [eax+ecx], edx

; 1133 : 	out[0][2] = mat[0][1];

	mov	eax, 16					; 00000010H
	imul	ecx, eax, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector4D@@QBEPBMXZ			; Vector4D::operator float const *
	mov	esi, eax
	mov	edi, 4
	shl	edi, 0
	push	0
	lea	ecx, DWORD PTR _out$[ebp]
	call	??Amatrix4x4@@QAEPAMH@Z			; matrix4x4::operator[]
	mov	ecx, 4
	shl	ecx, 1
	mov	edx, DWORD PTR [esi+edi]
	mov	DWORD PTR [eax+ecx], edx

; 1134 : 	out[0][3] = mat[0][3];

	mov	eax, 16					; 00000010H
	imul	ecx, eax, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector4D@@QBEPBMXZ			; Vector4D::operator float const *
	mov	esi, eax
	mov	ecx, 4
	imul	edi, ecx, 3
	push	0
	lea	ecx, DWORD PTR _out$[ebp]
	call	??Amatrix4x4@@QAEPAMH@Z			; matrix4x4::operator[]
	mov	edx, 4
	imul	ecx, edx, 3
	mov	edx, DWORD PTR [esi+edi]
	mov	DWORD PTR [eax+ecx], edx

; 1135 : 	out[1][0] = mat[1][0];

	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector4D@@QBEPBMXZ			; Vector4D::operator float const *
	mov	esi, eax
	mov	eax, 4
	imul	edi, eax, 0
	push	1
	lea	ecx, DWORD PTR _out$[ebp]
	call	??Amatrix4x4@@QAEPAMH@Z			; matrix4x4::operator[]
	mov	ecx, 4
	imul	edx, ecx, 0
	mov	ecx, DWORD PTR [esi+edi]
	mov	DWORD PTR [eax+edx], ecx

; 1136 : 	out[1][1] = mat[1][2];

	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector4D@@QBEPBMXZ			; Vector4D::operator float const *
	mov	esi, eax
	mov	edi, 4
	shl	edi, 1
	push	1
	lea	ecx, DWORD PTR _out$[ebp]
	call	??Amatrix4x4@@QAEPAMH@Z			; matrix4x4::operator[]
	mov	edx, 4
	shl	edx, 0
	mov	ecx, DWORD PTR [esi+edi]
	mov	DWORD PTR [eax+edx], ecx

; 1137 : 	out[1][2] = mat[1][1];

	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector4D@@QBEPBMXZ			; Vector4D::operator float const *
	mov	esi, eax
	mov	edi, 4
	shl	edi, 0
	push	1
	lea	ecx, DWORD PTR _out$[ebp]
	call	??Amatrix4x4@@QAEPAMH@Z			; matrix4x4::operator[]
	mov	edx, 4
	shl	edx, 1
	mov	ecx, DWORD PTR [esi+edi]
	mov	DWORD PTR [eax+edx], ecx

; 1138 : 	out[1][3] = mat[1][3];

	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector4D@@QBEPBMXZ			; Vector4D::operator float const *
	mov	esi, eax
	mov	edx, 4
	imul	edi, edx, 3
	push	1
	lea	ecx, DWORD PTR _out$[ebp]
	call	??Amatrix4x4@@QAEPAMH@Z			; matrix4x4::operator[]
	mov	ecx, 4
	imul	edx, ecx, 3
	mov	ecx, DWORD PTR [esi+edi]
	mov	DWORD PTR [eax+edx], ecx

; 1139 : 	out[2][0] = mat[2][0];

	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector4D@@QBEPBMXZ			; Vector4D::operator float const *
	mov	esi, eax
	mov	edx, 4
	imul	edi, edx, 0
	push	2
	lea	ecx, DWORD PTR _out$[ebp]
	call	??Amatrix4x4@@QAEPAMH@Z			; matrix4x4::operator[]
	mov	ecx, 4
	imul	edx, ecx, 0
	mov	ecx, DWORD PTR [esi+edi]
	mov	DWORD PTR [eax+edx], ecx

; 1140 : 	out[2][1] = mat[2][2];

	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector4D@@QBEPBMXZ			; Vector4D::operator float const *
	mov	esi, eax
	mov	edi, 4
	shl	edi, 1
	push	2
	lea	ecx, DWORD PTR _out$[ebp]
	call	??Amatrix4x4@@QAEPAMH@Z			; matrix4x4::operator[]
	mov	edx, 4
	shl	edx, 0
	mov	ecx, DWORD PTR [esi+edi]
	mov	DWORD PTR [eax+edx], ecx

; 1141 : 	out[2][2] = -mat[2][1];

	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector4D@@QBEPBMXZ			; Vector4D::operator float const *
	mov	edx, 4
	shl	edx, 0
	movss	xmm0, DWORD PTR [eax+edx]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	push	2
	lea	ecx, DWORD PTR _out$[ebp]
	movss	DWORD PTR tv397[ebp], xmm0
	call	??Amatrix4x4@@QAEPAMH@Z			; matrix4x4::operator[]
	mov	ecx, 4
	shl	ecx, 1
	movss	xmm0, DWORD PTR tv397[ebp]
	movss	DWORD PTR [eax+ecx], xmm0

; 1142 : 	out[2][3] = mat[2][3];

	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector4D@@QBEPBMXZ			; Vector4D::operator float const *
	mov	esi, eax
	mov	edx, 4
	imul	edi, edx, 3
	push	2
	lea	ecx, DWORD PTR _out$[ebp]
	call	??Amatrix4x4@@QAEPAMH@Z			; matrix4x4::operator[]
	mov	ecx, 4
	imul	edx, ecx, 3
	mov	ecx, DWORD PTR [esi+edi]
	mov	DWORD PTR [eax+edx], ecx

; 1143 : 	out[3][0] = METER2INCH( mat[3][0] );

	mov	edx, 16					; 00000010H
	imul	ecx, edx, 3
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector4D@@QBEPBMXZ			; Vector4D::operator float const *
	mov	ecx, 4
	imul	edx, ecx, 0
	movss	xmm0, DWORD PTR [eax+edx]
	mulss	xmm0, DWORD PTR __real@421d7af6
	push	3
	lea	ecx, DWORD PTR _out$[ebp]
	movss	DWORD PTR tv399[ebp], xmm0
	call	??Amatrix4x4@@QAEPAMH@Z			; matrix4x4::operator[]
	mov	ecx, 4
	imul	edx, ecx, 0
	movss	xmm0, DWORD PTR tv399[ebp]
	movss	DWORD PTR [eax+edx], xmm0

; 1144 : 	out[3][1] = METER2INCH( mat[3][2] );

	mov	eax, 16					; 00000010H
	imul	ecx, eax, 3
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector4D@@QBEPBMXZ			; Vector4D::operator float const *
	mov	ecx, 4
	shl	ecx, 1
	movss	xmm0, DWORD PTR [eax+ecx]
	mulss	xmm0, DWORD PTR __real@421d7af6
	push	3
	lea	ecx, DWORD PTR _out$[ebp]
	movss	DWORD PTR tv401[ebp], xmm0
	call	??Amatrix4x4@@QAEPAMH@Z			; matrix4x4::operator[]
	mov	edx, 4
	shl	edx, 0
	movss	xmm0, DWORD PTR tv401[ebp]
	movss	DWORD PTR [eax+edx], xmm0

; 1145 : 	out[3][2] = METER2INCH( mat[3][1] );

	mov	eax, 16					; 00000010H
	imul	ecx, eax, 3
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector4D@@QBEPBMXZ			; Vector4D::operator float const *
	mov	ecx, 4
	shl	ecx, 0
	movss	xmm0, DWORD PTR [eax+ecx]
	mulss	xmm0, DWORD PTR __real@421d7af6
	push	3
	lea	ecx, DWORD PTR _out$[ebp]
	movss	DWORD PTR tv403[ebp], xmm0
	call	??Amatrix4x4@@QAEPAMH@Z			; matrix4x4::operator[]
	mov	edx, 4
	shl	edx, 1
	movss	xmm0, DWORD PTR tv403[ebp]
	movss	DWORD PTR [eax+edx], xmm0

; 1146 : 	out[3][3] = mat[3][3];

	mov	eax, 16					; 00000010H
	imul	ecx, eax, 3
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector4D@@QBEPBMXZ			; Vector4D::operator float const *
	mov	esi, eax
	mov	ecx, 4
	imul	edi, ecx, 3
	push	3
	lea	ecx, DWORD PTR _out$[ebp]
	call	??Amatrix4x4@@QAEPAMH@Z			; matrix4x4::operator[]
	mov	edx, 4
	imul	ecx, edx, 3
	mov	edx, DWORD PTR [esi+edi]
	mov	DWORD PTR [eax+ecx], edx

; 1147 : 
; 1148 : 	return out;

	lea	eax, DWORD PTR _out$[ebp]
	push	eax
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0matrix4x4@@QAE@ABV0@@Z
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 1149 : }

	pop	edi
	pop	esi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	4
?NewtonToQuake@matrix4x4@@QBE?AV1@XZ ENDP		; matrix4x4::NewtonToQuake
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xashxt_v0.81_rev.1_with_sources\xashxt_v0.81_rev.1_src\game_shared\matrix.cpp
_TEXT	SEGMENT
tv403 = -88						; size = 4
tv401 = -84						; size = 4
tv399 = -80						; size = 4
tv397 = -76						; size = 4
_this$ = -72						; size = 4
_out$ = -68						; size = 64
__$ArrayPad$ = -4					; size = 4
___$ReturnUdt$ = 8					; size = 4
?QuakeToNewton@matrix4x4@@QBE?AV1@XZ PROC		; matrix4x4::QuakeToNewton
; _this$ = ecx

; 1104 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 88					; 00000058H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 1105 : 	matrix4x4 out;

	lea	ecx, DWORD PTR _out$[ebp]
	call	??0matrix4x4@@QAE@XZ			; matrix4x4::matrix4x4

; 1106 : 
; 1107 : 	out[0][0] = mat[0][0];

	mov	eax, 16					; 00000010H
	imul	ecx, eax, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector4D@@QBEPBMXZ			; Vector4D::operator float const *
	mov	esi, eax
	mov	ecx, 4
	imul	edi, ecx, 0
	push	0
	lea	ecx, DWORD PTR _out$[ebp]
	call	??Amatrix4x4@@QAEPAMH@Z			; matrix4x4::operator[]
	mov	edx, 4
	imul	ecx, edx, 0
	mov	edx, DWORD PTR [esi+edi]
	mov	DWORD PTR [eax+ecx], edx

; 1108 : 	out[0][2] = mat[0][1];

	mov	eax, 16					; 00000010H
	imul	ecx, eax, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector4D@@QBEPBMXZ			; Vector4D::operator float const *
	mov	esi, eax
	mov	edi, 4
	shl	edi, 0
	push	0
	lea	ecx, DWORD PTR _out$[ebp]
	call	??Amatrix4x4@@QAEPAMH@Z			; matrix4x4::operator[]
	mov	ecx, 4
	shl	ecx, 1
	mov	edx, DWORD PTR [esi+edi]
	mov	DWORD PTR [eax+ecx], edx

; 1109 : 	out[0][1] = mat[0][2];

	mov	eax, 16					; 00000010H
	imul	ecx, eax, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector4D@@QBEPBMXZ			; Vector4D::operator float const *
	mov	esi, eax
	mov	edi, 4
	shl	edi, 1
	push	0
	lea	ecx, DWORD PTR _out$[ebp]
	call	??Amatrix4x4@@QAEPAMH@Z			; matrix4x4::operator[]
	mov	ecx, 4
	shl	ecx, 0
	mov	edx, DWORD PTR [esi+edi]
	mov	DWORD PTR [eax+ecx], edx

; 1110 : 	out[0][3] = mat[0][3];

	mov	eax, 16					; 00000010H
	imul	ecx, eax, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector4D@@QBEPBMXZ			; Vector4D::operator float const *
	mov	esi, eax
	mov	ecx, 4
	imul	edi, ecx, 3
	push	0
	lea	ecx, DWORD PTR _out$[ebp]
	call	??Amatrix4x4@@QAEPAMH@Z			; matrix4x4::operator[]
	mov	edx, 4
	imul	ecx, edx, 3
	mov	edx, DWORD PTR [esi+edi]
	mov	DWORD PTR [eax+ecx], edx

; 1111 : 	out[1][0] = mat[1][0];

	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector4D@@QBEPBMXZ			; Vector4D::operator float const *
	mov	esi, eax
	mov	eax, 4
	imul	edi, eax, 0
	push	1
	lea	ecx, DWORD PTR _out$[ebp]
	call	??Amatrix4x4@@QAEPAMH@Z			; matrix4x4::operator[]
	mov	ecx, 4
	imul	edx, ecx, 0
	mov	ecx, DWORD PTR [esi+edi]
	mov	DWORD PTR [eax+edx], ecx

; 1112 : 	out[1][2] = mat[1][1];

	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector4D@@QBEPBMXZ			; Vector4D::operator float const *
	mov	esi, eax
	mov	edi, 4
	shl	edi, 0
	push	1
	lea	ecx, DWORD PTR _out$[ebp]
	call	??Amatrix4x4@@QAEPAMH@Z			; matrix4x4::operator[]
	mov	edx, 4
	shl	edx, 1
	mov	ecx, DWORD PTR [esi+edi]
	mov	DWORD PTR [eax+edx], ecx

; 1113 : 	out[1][1] = mat[1][2];

	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector4D@@QBEPBMXZ			; Vector4D::operator float const *
	mov	esi, eax
	mov	edi, 4
	shl	edi, 1
	push	1
	lea	ecx, DWORD PTR _out$[ebp]
	call	??Amatrix4x4@@QAEPAMH@Z			; matrix4x4::operator[]
	mov	edx, 4
	shl	edx, 0
	mov	ecx, DWORD PTR [esi+edi]
	mov	DWORD PTR [eax+edx], ecx

; 1114 : 	out[1][3] = mat[1][3];

	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector4D@@QBEPBMXZ			; Vector4D::operator float const *
	mov	esi, eax
	mov	edx, 4
	imul	edi, edx, 3
	push	1
	lea	ecx, DWORD PTR _out$[ebp]
	call	??Amatrix4x4@@QAEPAMH@Z			; matrix4x4::operator[]
	mov	ecx, 4
	imul	edx, ecx, 3
	mov	ecx, DWORD PTR [esi+edi]
	mov	DWORD PTR [eax+edx], ecx

; 1115 : 	out[2][0] = mat[2][0];

	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector4D@@QBEPBMXZ			; Vector4D::operator float const *
	mov	esi, eax
	mov	edx, 4
	imul	edi, edx, 0
	push	2
	lea	ecx, DWORD PTR _out$[ebp]
	call	??Amatrix4x4@@QAEPAMH@Z			; matrix4x4::operator[]
	mov	ecx, 4
	imul	edx, ecx, 0
	mov	ecx, DWORD PTR [esi+edi]
	mov	DWORD PTR [eax+edx], ecx

; 1116 : 	out[2][2] = mat[2][1];

	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector4D@@QBEPBMXZ			; Vector4D::operator float const *
	mov	esi, eax
	mov	edi, 4
	shl	edi, 0
	push	2
	lea	ecx, DWORD PTR _out$[ebp]
	call	??Amatrix4x4@@QAEPAMH@Z			; matrix4x4::operator[]
	mov	edx, 4
	shl	edx, 1
	mov	ecx, DWORD PTR [esi+edi]
	mov	DWORD PTR [eax+edx], ecx

; 1117 : 	out[2][1] = -mat[2][2];

	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector4D@@QBEPBMXZ			; Vector4D::operator float const *
	mov	edx, 4
	shl	edx, 1
	movss	xmm0, DWORD PTR [eax+edx]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	push	2
	lea	ecx, DWORD PTR _out$[ebp]
	movss	DWORD PTR tv397[ebp], xmm0
	call	??Amatrix4x4@@QAEPAMH@Z			; matrix4x4::operator[]
	mov	ecx, 4
	shl	ecx, 0
	movss	xmm0, DWORD PTR tv397[ebp]
	movss	DWORD PTR [eax+ecx], xmm0

; 1118 : 	out[2][3] = mat[2][3];

	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector4D@@QBEPBMXZ			; Vector4D::operator float const *
	mov	esi, eax
	mov	edx, 4
	imul	edi, edx, 3
	push	2
	lea	ecx, DWORD PTR _out$[ebp]
	call	??Amatrix4x4@@QAEPAMH@Z			; matrix4x4::operator[]
	mov	ecx, 4
	imul	edx, ecx, 3
	mov	ecx, DWORD PTR [esi+edi]
	mov	DWORD PTR [eax+edx], ecx

; 1119 : 	out[3][0] = INCH2METER( mat[3][0] );

	mov	edx, 16					; 00000010H
	imul	ecx, edx, 3
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector4D@@QBEPBMXZ			; Vector4D::operator float const *
	mov	ecx, 4
	imul	edx, ecx, 0
	movss	xmm0, DWORD PTR [eax+edx]
	mulss	xmm0, DWORD PTR __real@3cd013a9
	push	3
	lea	ecx, DWORD PTR _out$[ebp]
	movss	DWORD PTR tv399[ebp], xmm0
	call	??Amatrix4x4@@QAEPAMH@Z			; matrix4x4::operator[]
	mov	ecx, 4
	imul	edx, ecx, 0
	movss	xmm0, DWORD PTR tv399[ebp]
	movss	DWORD PTR [eax+edx], xmm0

; 1120 : 	out[3][2] = INCH2METER( mat[3][1] );

	mov	eax, 16					; 00000010H
	imul	ecx, eax, 3
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector4D@@QBEPBMXZ			; Vector4D::operator float const *
	mov	ecx, 4
	shl	ecx, 0
	movss	xmm0, DWORD PTR [eax+ecx]
	mulss	xmm0, DWORD PTR __real@3cd013a9
	push	3
	lea	ecx, DWORD PTR _out$[ebp]
	movss	DWORD PTR tv401[ebp], xmm0
	call	??Amatrix4x4@@QAEPAMH@Z			; matrix4x4::operator[]
	mov	edx, 4
	shl	edx, 1
	movss	xmm0, DWORD PTR tv401[ebp]
	movss	DWORD PTR [eax+edx], xmm0

; 1121 : 	out[3][1] = INCH2METER( mat[3][2] );

	mov	eax, 16					; 00000010H
	imul	ecx, eax, 3
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector4D@@QBEPBMXZ			; Vector4D::operator float const *
	mov	ecx, 4
	shl	ecx, 1
	movss	xmm0, DWORD PTR [eax+ecx]
	mulss	xmm0, DWORD PTR __real@3cd013a9
	push	3
	lea	ecx, DWORD PTR _out$[ebp]
	movss	DWORD PTR tv403[ebp], xmm0
	call	??Amatrix4x4@@QAEPAMH@Z			; matrix4x4::operator[]
	mov	edx, 4
	shl	edx, 0
	movss	xmm0, DWORD PTR tv403[ebp]
	movss	DWORD PTR [eax+edx], xmm0

; 1122 : 	out[3][3] = mat[3][3];

	mov	eax, 16					; 00000010H
	imul	ecx, eax, 3
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector4D@@QBEPBMXZ			; Vector4D::operator float const *
	mov	esi, eax
	mov	ecx, 4
	imul	edi, ecx, 3
	push	3
	lea	ecx, DWORD PTR _out$[ebp]
	call	??Amatrix4x4@@QAEPAMH@Z			; matrix4x4::operator[]
	mov	edx, 4
	imul	ecx, edx, 3
	mov	edx, DWORD PTR [esi+edi]
	mov	DWORD PTR [eax+ecx], edx

; 1123 : 
; 1124 : 	return out;

	lea	eax, DWORD PTR _out$[ebp]
	push	eax
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0matrix4x4@@QAE@ABV0@@Z
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 1125 : }

	pop	edi
	pop	esi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	4
?QuakeToNewton@matrix4x4@@QBE?AV1@XZ ENDP		; matrix4x4::QuakeToNewton
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xashxt_v0.81_rev.1_with_sources\xashxt_v0.81_rev.1_src\game_shared\matrix.cpp
_TEXT	SEGMENT
tv1590 = -328						; size = 4
tv1604 = -324						; size = 4
tv1602 = -320						; size = 4
tv1600 = -316						; size = 4
tv1598 = -312						; size = 4
tv1596 = -308						; size = 4
tv1594 = -304						; size = 4
tv1592 = -300						; size = 4
tv1574 = -296						; size = 4
tv1588 = -292						; size = 4
tv1586 = -288						; size = 4
tv1584 = -284						; size = 4
tv1582 = -280						; size = 4
tv1580 = -276						; size = 4
tv1578 = -272						; size = 4
tv1576 = -268						; size = 4
tv1478 = -264						; size = 4
tv1572 = -260						; size = 4
tv1570 = -256						; size = 4
tv1568 = -252						; size = 4
tv1566 = -248						; size = 4
tv1564 = -244						; size = 4
tv1562 = -240						; size = 4
tv1560 = -236						; size = 4
tv1558 = -232						; size = 4
tv1556 = -228						; size = 4
tv1554 = -224						; size = 4
tv1552 = -220						; size = 4
tv1550 = -216						; size = 4
tv1548 = -212						; size = 4
tv1546 = -208						; size = 4
tv1544 = -204						; size = 4
tv1542 = -200						; size = 4
tv1540 = -196						; size = 4
tv1538 = -192						; size = 4
tv1536 = -188						; size = 4
tv1534 = -184						; size = 4
tv1532 = -180						; size = 4
tv1530 = -176						; size = 4
tv1528 = -172						; size = 4
tv1526 = -168						; size = 4
tv1524 = -164						; size = 4
tv1522 = -160						; size = 4
tv1520 = -156						; size = 4
tv1518 = -152						; size = 4
tv1516 = -148						; size = 4
tv1514 = -144						; size = 4
tv1512 = -140						; size = 4
tv1510 = -136						; size = 4
tv1508 = -132						; size = 4
tv1506 = -128						; size = 4
tv1504 = -124						; size = 4
tv1502 = -120						; size = 4
tv1500 = -116						; size = 4
tv1498 = -112						; size = 4
tv1496 = -108						; size = 4
tv1494 = -104						; size = 4
tv1492 = -100						; size = 4
tv1490 = -96						; size = 4
tv1488 = -92						; size = 4
tv1486 = -88						; size = 4
tv1484 = -84						; size = 4
tv1482 = -80						; size = 4
tv1480 = -76						; size = 4
_this$ = -72						; size = 4
_out$ = -68						; size = 64
__$ArrayPad$ = -4					; size = 4
___$ReturnUdt$ = 8					; size = 4
_mat2$ = 12						; size = 64
?Concat@matrix4x4@@QAE?AV1@V1@@Z PROC			; matrix4x4::Concat
; _this$ = ecx

; 845  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 328				; 00000148H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 846  : 	matrix4x4 out;

	lea	ecx, DWORD PTR _out$[ebp]
	call	??0matrix4x4@@QAE@XZ			; matrix4x4::matrix4x4

; 847  : 
; 848  : 	out[0][0] = mat[0][0] * mat2[0][0] + mat[1][0] * mat2[0][1] + mat[2][0] * mat2[0][2] + mat[3][0] * mat2[0][3];

	mov	eax, 16					; 00000010H
	imul	ecx, eax, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	esi, eax
	mov	ecx, 4
	imul	edi, ecx, 0
	push	0
	lea	ecx, DWORD PTR _mat2$[ebp]
	call	??Amatrix4x4@@QBEPBMH@Z			; matrix4x4::operator[]
	mov	edx, 4
	imul	ecx, edx, 0
	movss	xmm0, DWORD PTR [esi+edi]
	mulss	xmm0, DWORD PTR [eax+ecx]
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv1478[ebp], xmm0
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	esi, eax
	mov	edx, 4
	imul	edi, edx, 0
	push	0
	lea	ecx, DWORD PTR _mat2$[ebp]
	call	??Amatrix4x4@@QBEPBMH@Z			; matrix4x4::operator[]
	mov	ecx, 4
	shl	ecx, 0
	movss	xmm0, DWORD PTR [esi+edi]
	mulss	xmm0, DWORD PTR [eax+ecx]
	movss	xmm1, DWORD PTR tv1478[ebp]
	addss	xmm1, xmm0
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv1480[ebp], xmm1
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	esi, eax
	mov	edx, 4
	imul	edi, edx, 0
	push	0
	lea	ecx, DWORD PTR _mat2$[ebp]
	call	??Amatrix4x4@@QBEPBMH@Z			; matrix4x4::operator[]
	mov	ecx, 4
	shl	ecx, 1
	movss	xmm0, DWORD PTR [esi+edi]
	mulss	xmm0, DWORD PTR [eax+ecx]
	movss	xmm1, DWORD PTR tv1480[ebp]
	addss	xmm1, xmm0
	mov	edx, 16					; 00000010H
	imul	ecx, edx, 3
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv1482[ebp], xmm1
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	esi, eax
	mov	eax, 4
	imul	edi, eax, 0
	push	0
	lea	ecx, DWORD PTR _mat2$[ebp]
	call	??Amatrix4x4@@QBEPBMH@Z			; matrix4x4::operator[]
	mov	ecx, 4
	imul	edx, ecx, 3
	movss	xmm0, DWORD PTR [esi+edi]
	mulss	xmm0, DWORD PTR [eax+edx]
	movss	xmm1, DWORD PTR tv1482[ebp]
	addss	xmm1, xmm0
	push	0
	lea	ecx, DWORD PTR _out$[ebp]
	movss	DWORD PTR tv1484[ebp], xmm1
	call	??Amatrix4x4@@QAEPAMH@Z			; matrix4x4::operator[]
	mov	ecx, 4
	imul	edx, ecx, 0
	movss	xmm0, DWORD PTR tv1484[ebp]
	movss	DWORD PTR [eax+edx], xmm0

; 849  : 	out[1][0] = mat[0][0] * mat2[1][0] + mat[1][0] * mat2[1][1] + mat[2][0] * mat2[1][2] + mat[3][0] * mat2[1][3];

	mov	eax, 16					; 00000010H
	imul	ecx, eax, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	esi, eax
	mov	ecx, 4
	imul	edi, ecx, 0
	push	1
	lea	ecx, DWORD PTR _mat2$[ebp]
	call	??Amatrix4x4@@QBEPBMH@Z			; matrix4x4::operator[]
	mov	edx, 4
	imul	ecx, edx, 0
	movss	xmm0, DWORD PTR [esi+edi]
	mulss	xmm0, DWORD PTR [eax+ecx]
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv1486[ebp], xmm0
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	esi, eax
	mov	edx, 4
	imul	edi, edx, 0
	push	1
	lea	ecx, DWORD PTR _mat2$[ebp]
	call	??Amatrix4x4@@QBEPBMH@Z			; matrix4x4::operator[]
	mov	ecx, 4
	shl	ecx, 0
	movss	xmm0, DWORD PTR [esi+edi]
	mulss	xmm0, DWORD PTR [eax+ecx]
	movss	xmm1, DWORD PTR tv1486[ebp]
	addss	xmm1, xmm0
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv1488[ebp], xmm1
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	esi, eax
	mov	edx, 4
	imul	edi, edx, 0
	push	1
	lea	ecx, DWORD PTR _mat2$[ebp]
	call	??Amatrix4x4@@QBEPBMH@Z			; matrix4x4::operator[]
	mov	ecx, 4
	shl	ecx, 1
	movss	xmm0, DWORD PTR [esi+edi]
	mulss	xmm0, DWORD PTR [eax+ecx]
	movss	xmm1, DWORD PTR tv1488[ebp]
	addss	xmm1, xmm0
	mov	edx, 16					; 00000010H
	imul	ecx, edx, 3
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv1490[ebp], xmm1
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	esi, eax
	mov	eax, 4
	imul	edi, eax, 0
	push	1
	lea	ecx, DWORD PTR _mat2$[ebp]
	call	??Amatrix4x4@@QBEPBMH@Z			; matrix4x4::operator[]
	mov	ecx, 4
	imul	edx, ecx, 3
	movss	xmm0, DWORD PTR [esi+edi]
	mulss	xmm0, DWORD PTR [eax+edx]
	movss	xmm1, DWORD PTR tv1490[ebp]
	addss	xmm1, xmm0
	push	1
	lea	ecx, DWORD PTR _out$[ebp]
	movss	DWORD PTR tv1492[ebp], xmm1
	call	??Amatrix4x4@@QAEPAMH@Z			; matrix4x4::operator[]
	mov	ecx, 4
	imul	edx, ecx, 0
	movss	xmm0, DWORD PTR tv1492[ebp]
	movss	DWORD PTR [eax+edx], xmm0

; 850  : 	out[2][0] = mat[0][0] * mat2[2][0] + mat[1][0] * mat2[2][1] + mat[2][0] * mat2[2][2] + mat[3][0] * mat2[2][3];

	mov	eax, 16					; 00000010H
	imul	ecx, eax, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	esi, eax
	mov	ecx, 4
	imul	edi, ecx, 0
	push	2
	lea	ecx, DWORD PTR _mat2$[ebp]
	call	??Amatrix4x4@@QBEPBMH@Z			; matrix4x4::operator[]
	mov	edx, 4
	imul	ecx, edx, 0
	movss	xmm0, DWORD PTR [esi+edi]
	mulss	xmm0, DWORD PTR [eax+ecx]
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv1494[ebp], xmm0
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	esi, eax
	mov	edx, 4
	imul	edi, edx, 0
	push	2
	lea	ecx, DWORD PTR _mat2$[ebp]
	call	??Amatrix4x4@@QBEPBMH@Z			; matrix4x4::operator[]
	mov	ecx, 4
	shl	ecx, 0
	movss	xmm0, DWORD PTR [esi+edi]
	mulss	xmm0, DWORD PTR [eax+ecx]
	movss	xmm1, DWORD PTR tv1494[ebp]
	addss	xmm1, xmm0
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv1496[ebp], xmm1
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	esi, eax
	mov	edx, 4
	imul	edi, edx, 0
	push	2
	lea	ecx, DWORD PTR _mat2$[ebp]
	call	??Amatrix4x4@@QBEPBMH@Z			; matrix4x4::operator[]
	mov	ecx, 4
	shl	ecx, 1
	movss	xmm0, DWORD PTR [esi+edi]
	mulss	xmm0, DWORD PTR [eax+ecx]
	movss	xmm1, DWORD PTR tv1496[ebp]
	addss	xmm1, xmm0
	mov	edx, 16					; 00000010H
	imul	ecx, edx, 3
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv1498[ebp], xmm1
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	esi, eax
	mov	eax, 4
	imul	edi, eax, 0
	push	2
	lea	ecx, DWORD PTR _mat2$[ebp]
	call	??Amatrix4x4@@QBEPBMH@Z			; matrix4x4::operator[]
	mov	ecx, 4
	imul	edx, ecx, 3
	movss	xmm0, DWORD PTR [esi+edi]
	mulss	xmm0, DWORD PTR [eax+edx]
	movss	xmm1, DWORD PTR tv1498[ebp]
	addss	xmm1, xmm0
	push	2
	lea	ecx, DWORD PTR _out$[ebp]
	movss	DWORD PTR tv1500[ebp], xmm1
	call	??Amatrix4x4@@QAEPAMH@Z			; matrix4x4::operator[]
	mov	ecx, 4
	imul	edx, ecx, 0
	movss	xmm0, DWORD PTR tv1500[ebp]
	movss	DWORD PTR [eax+edx], xmm0

; 851  : 	out[3][0] = mat[0][0] * mat2[3][0] + mat[1][0] * mat2[3][1] + mat[2][0] * mat2[3][2] + mat[3][0] * mat2[3][3];

	mov	eax, 16					; 00000010H
	imul	ecx, eax, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	esi, eax
	mov	ecx, 4
	imul	edi, ecx, 0
	push	3
	lea	ecx, DWORD PTR _mat2$[ebp]
	call	??Amatrix4x4@@QBEPBMH@Z			; matrix4x4::operator[]
	mov	edx, 4
	imul	ecx, edx, 0
	movss	xmm0, DWORD PTR [esi+edi]
	mulss	xmm0, DWORD PTR [eax+ecx]
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv1502[ebp], xmm0
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	esi, eax
	mov	edx, 4
	imul	edi, edx, 0
	push	3
	lea	ecx, DWORD PTR _mat2$[ebp]
	call	??Amatrix4x4@@QBEPBMH@Z			; matrix4x4::operator[]
	mov	ecx, 4
	shl	ecx, 0
	movss	xmm0, DWORD PTR [esi+edi]
	mulss	xmm0, DWORD PTR [eax+ecx]
	movss	xmm1, DWORD PTR tv1502[ebp]
	addss	xmm1, xmm0
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv1504[ebp], xmm1
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	esi, eax
	mov	edx, 4
	imul	edi, edx, 0
	push	3
	lea	ecx, DWORD PTR _mat2$[ebp]
	call	??Amatrix4x4@@QBEPBMH@Z			; matrix4x4::operator[]
	mov	ecx, 4
	shl	ecx, 1
	movss	xmm0, DWORD PTR [esi+edi]
	mulss	xmm0, DWORD PTR [eax+ecx]
	movss	xmm1, DWORD PTR tv1504[ebp]
	addss	xmm1, xmm0
	mov	edx, 16					; 00000010H
	imul	ecx, edx, 3
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv1506[ebp], xmm1
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	esi, eax
	mov	eax, 4
	imul	edi, eax, 0
	push	3
	lea	ecx, DWORD PTR _mat2$[ebp]
	call	??Amatrix4x4@@QBEPBMH@Z			; matrix4x4::operator[]
	mov	ecx, 4
	imul	edx, ecx, 3
	movss	xmm0, DWORD PTR [esi+edi]
	mulss	xmm0, DWORD PTR [eax+edx]
	movss	xmm1, DWORD PTR tv1506[ebp]
	addss	xmm1, xmm0
	push	3
	lea	ecx, DWORD PTR _out$[ebp]
	movss	DWORD PTR tv1508[ebp], xmm1
	call	??Amatrix4x4@@QAEPAMH@Z			; matrix4x4::operator[]
	mov	ecx, 4
	imul	edx, ecx, 0
	movss	xmm0, DWORD PTR tv1508[ebp]
	movss	DWORD PTR [eax+edx], xmm0

; 852  : 	out[0][1] = mat[0][1] * mat2[0][0] + mat[1][1] * mat2[0][1] + mat[2][1] * mat2[0][2] + mat[3][1] * mat2[0][3];

	mov	eax, 16					; 00000010H
	imul	ecx, eax, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	esi, eax
	mov	edi, 4
	shl	edi, 0
	push	0
	lea	ecx, DWORD PTR _mat2$[ebp]
	call	??Amatrix4x4@@QBEPBMH@Z			; matrix4x4::operator[]
	mov	ecx, 4
	imul	edx, ecx, 0
	movss	xmm0, DWORD PTR [esi+edi]
	mulss	xmm0, DWORD PTR [eax+edx]
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv1510[ebp], xmm0
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	esi, eax
	mov	edi, 4
	shl	edi, 0
	push	0
	lea	ecx, DWORD PTR _mat2$[ebp]
	call	??Amatrix4x4@@QBEPBMH@Z			; matrix4x4::operator[]
	mov	ecx, 4
	shl	ecx, 0
	movss	xmm0, DWORD PTR [esi+edi]
	mulss	xmm0, DWORD PTR [eax+ecx]
	movss	xmm1, DWORD PTR tv1510[ebp]
	addss	xmm1, xmm0
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv1512[ebp], xmm1
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	esi, eax
	mov	edi, 4
	shl	edi, 0
	push	0
	lea	ecx, DWORD PTR _mat2$[ebp]
	call	??Amatrix4x4@@QBEPBMH@Z			; matrix4x4::operator[]
	mov	edx, 4
	shl	edx, 1
	movss	xmm0, DWORD PTR [esi+edi]
	mulss	xmm0, DWORD PTR [eax+edx]
	movss	xmm1, DWORD PTR tv1512[ebp]
	addss	xmm1, xmm0
	mov	eax, 16					; 00000010H
	imul	ecx, eax, 3
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv1514[ebp], xmm1
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	esi, eax
	mov	edi, 4
	shl	edi, 0
	push	0
	lea	ecx, DWORD PTR _mat2$[ebp]
	call	??Amatrix4x4@@QBEPBMH@Z			; matrix4x4::operator[]
	mov	ecx, 4
	imul	edx, ecx, 3
	movss	xmm0, DWORD PTR [esi+edi]
	mulss	xmm0, DWORD PTR [eax+edx]
	movss	xmm1, DWORD PTR tv1514[ebp]
	addss	xmm1, xmm0
	push	0
	lea	ecx, DWORD PTR _out$[ebp]
	movss	DWORD PTR tv1516[ebp], xmm1
	call	??Amatrix4x4@@QAEPAMH@Z			; matrix4x4::operator[]
	mov	ecx, 4
	shl	ecx, 0
	movss	xmm0, DWORD PTR tv1516[ebp]
	movss	DWORD PTR [eax+ecx], xmm0

; 853  : 	out[1][1] = mat[0][1] * mat2[1][0] + mat[1][1] * mat2[1][1] + mat[2][1] * mat2[1][2] + mat[3][1] * mat2[1][3];

	mov	edx, 16					; 00000010H
	imul	ecx, edx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	esi, eax
	mov	edi, 4
	shl	edi, 0
	push	1
	lea	ecx, DWORD PTR _mat2$[ebp]
	call	??Amatrix4x4@@QBEPBMH@Z			; matrix4x4::operator[]
	mov	ecx, 4
	imul	edx, ecx, 0
	movss	xmm0, DWORD PTR [esi+edi]
	mulss	xmm0, DWORD PTR [eax+edx]
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv1518[ebp], xmm0
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	esi, eax
	mov	edi, 4
	shl	edi, 0
	push	1
	lea	ecx, DWORD PTR _mat2$[ebp]
	call	??Amatrix4x4@@QBEPBMH@Z			; matrix4x4::operator[]
	mov	ecx, 4
	shl	ecx, 0
	movss	xmm0, DWORD PTR [esi+edi]
	mulss	xmm0, DWORD PTR [eax+ecx]
	movss	xmm1, DWORD PTR tv1518[ebp]
	addss	xmm1, xmm0
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv1520[ebp], xmm1
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	esi, eax
	mov	edi, 4
	shl	edi, 0
	push	1
	lea	ecx, DWORD PTR _mat2$[ebp]
	call	??Amatrix4x4@@QBEPBMH@Z			; matrix4x4::operator[]
	mov	edx, 4
	shl	edx, 1
	movss	xmm0, DWORD PTR [esi+edi]
	mulss	xmm0, DWORD PTR [eax+edx]
	movss	xmm1, DWORD PTR tv1520[ebp]
	addss	xmm1, xmm0
	mov	eax, 16					; 00000010H
	imul	ecx, eax, 3
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv1522[ebp], xmm1
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	esi, eax
	mov	edi, 4
	shl	edi, 0
	push	1
	lea	ecx, DWORD PTR _mat2$[ebp]
	call	??Amatrix4x4@@QBEPBMH@Z			; matrix4x4::operator[]
	mov	ecx, 4
	imul	edx, ecx, 3
	movss	xmm0, DWORD PTR [esi+edi]
	mulss	xmm0, DWORD PTR [eax+edx]
	movss	xmm1, DWORD PTR tv1522[ebp]
	addss	xmm1, xmm0
	push	1
	lea	ecx, DWORD PTR _out$[ebp]
	movss	DWORD PTR tv1524[ebp], xmm1
	call	??Amatrix4x4@@QAEPAMH@Z			; matrix4x4::operator[]
	mov	ecx, 4
	shl	ecx, 0
	movss	xmm0, DWORD PTR tv1524[ebp]
	movss	DWORD PTR [eax+ecx], xmm0

; 854  : 	out[2][1] = mat[0][1] * mat2[2][0] + mat[1][1] * mat2[2][1] + mat[2][1] * mat2[2][2] + mat[3][1] * mat2[2][3];

	mov	edx, 16					; 00000010H
	imul	ecx, edx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	esi, eax
	mov	edi, 4
	shl	edi, 0
	push	2
	lea	ecx, DWORD PTR _mat2$[ebp]
	call	??Amatrix4x4@@QBEPBMH@Z			; matrix4x4::operator[]
	mov	ecx, 4
	imul	edx, ecx, 0
	movss	xmm0, DWORD PTR [esi+edi]
	mulss	xmm0, DWORD PTR [eax+edx]
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv1526[ebp], xmm0
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	esi, eax
	mov	edi, 4
	shl	edi, 0
	push	2
	lea	ecx, DWORD PTR _mat2$[ebp]
	call	??Amatrix4x4@@QBEPBMH@Z			; matrix4x4::operator[]
	mov	ecx, 4
	shl	ecx, 0
	movss	xmm0, DWORD PTR [esi+edi]
	mulss	xmm0, DWORD PTR [eax+ecx]
	movss	xmm1, DWORD PTR tv1526[ebp]
	addss	xmm1, xmm0
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv1528[ebp], xmm1
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	esi, eax
	mov	edi, 4
	shl	edi, 0
	push	2
	lea	ecx, DWORD PTR _mat2$[ebp]
	call	??Amatrix4x4@@QBEPBMH@Z			; matrix4x4::operator[]
	mov	edx, 4
	shl	edx, 1
	movss	xmm0, DWORD PTR [esi+edi]
	mulss	xmm0, DWORD PTR [eax+edx]
	movss	xmm1, DWORD PTR tv1528[ebp]
	addss	xmm1, xmm0
	mov	eax, 16					; 00000010H
	imul	ecx, eax, 3
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv1530[ebp], xmm1
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	esi, eax
	mov	edi, 4
	shl	edi, 0
	push	2
	lea	ecx, DWORD PTR _mat2$[ebp]
	call	??Amatrix4x4@@QBEPBMH@Z			; matrix4x4::operator[]
	mov	ecx, 4
	imul	edx, ecx, 3
	movss	xmm0, DWORD PTR [esi+edi]
	mulss	xmm0, DWORD PTR [eax+edx]
	movss	xmm1, DWORD PTR tv1530[ebp]
	addss	xmm1, xmm0
	push	2
	lea	ecx, DWORD PTR _out$[ebp]
	movss	DWORD PTR tv1532[ebp], xmm1
	call	??Amatrix4x4@@QAEPAMH@Z			; matrix4x4::operator[]
	mov	ecx, 4
	shl	ecx, 0
	movss	xmm0, DWORD PTR tv1532[ebp]
	movss	DWORD PTR [eax+ecx], xmm0

; 855  : 	out[3][1] = mat[0][1] * mat2[3][0] + mat[1][1] * mat2[3][1] + mat[2][1] * mat2[3][2] + mat[3][1] * mat2[3][3];

	mov	edx, 16					; 00000010H
	imul	ecx, edx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	esi, eax
	mov	edi, 4
	shl	edi, 0
	push	3
	lea	ecx, DWORD PTR _mat2$[ebp]
	call	??Amatrix4x4@@QBEPBMH@Z			; matrix4x4::operator[]
	mov	ecx, 4
	imul	edx, ecx, 0
	movss	xmm0, DWORD PTR [esi+edi]
	mulss	xmm0, DWORD PTR [eax+edx]
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv1534[ebp], xmm0
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	esi, eax
	mov	edi, 4
	shl	edi, 0
	push	3
	lea	ecx, DWORD PTR _mat2$[ebp]
	call	??Amatrix4x4@@QBEPBMH@Z			; matrix4x4::operator[]
	mov	ecx, 4
	shl	ecx, 0
	movss	xmm0, DWORD PTR [esi+edi]
	mulss	xmm0, DWORD PTR [eax+ecx]
	movss	xmm1, DWORD PTR tv1534[ebp]
	addss	xmm1, xmm0
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv1536[ebp], xmm1
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	esi, eax
	mov	edi, 4
	shl	edi, 0
	push	3
	lea	ecx, DWORD PTR _mat2$[ebp]
	call	??Amatrix4x4@@QBEPBMH@Z			; matrix4x4::operator[]
	mov	edx, 4
	shl	edx, 1
	movss	xmm0, DWORD PTR [esi+edi]
	mulss	xmm0, DWORD PTR [eax+edx]
	movss	xmm1, DWORD PTR tv1536[ebp]
	addss	xmm1, xmm0
	mov	eax, 16					; 00000010H
	imul	ecx, eax, 3
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv1538[ebp], xmm1
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	esi, eax
	mov	edi, 4
	shl	edi, 0
	push	3
	lea	ecx, DWORD PTR _mat2$[ebp]
	call	??Amatrix4x4@@QBEPBMH@Z			; matrix4x4::operator[]
	mov	ecx, 4
	imul	edx, ecx, 3
	movss	xmm0, DWORD PTR [esi+edi]
	mulss	xmm0, DWORD PTR [eax+edx]
	movss	xmm1, DWORD PTR tv1538[ebp]
	addss	xmm1, xmm0
	push	3
	lea	ecx, DWORD PTR _out$[ebp]
	movss	DWORD PTR tv1540[ebp], xmm1
	call	??Amatrix4x4@@QAEPAMH@Z			; matrix4x4::operator[]
	mov	ecx, 4
	shl	ecx, 0
	movss	xmm0, DWORD PTR tv1540[ebp]
	movss	DWORD PTR [eax+ecx], xmm0

; 856  : 	out[0][2] = mat[0][2] * mat2[0][0] + mat[1][2] * mat2[0][1] + mat[2][2] * mat2[0][2] + mat[3][2] * mat2[0][3];

	mov	edx, 16					; 00000010H
	imul	ecx, edx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	esi, eax
	mov	edi, 4
	shl	edi, 1
	push	0
	lea	ecx, DWORD PTR _mat2$[ebp]
	call	??Amatrix4x4@@QBEPBMH@Z			; matrix4x4::operator[]
	mov	ecx, 4
	imul	edx, ecx, 0
	movss	xmm0, DWORD PTR [esi+edi]
	mulss	xmm0, DWORD PTR [eax+edx]
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv1542[ebp], xmm0
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	esi, eax
	mov	edi, 4
	shl	edi, 1
	push	0
	lea	ecx, DWORD PTR _mat2$[ebp]
	call	??Amatrix4x4@@QBEPBMH@Z			; matrix4x4::operator[]
	mov	ecx, 4
	shl	ecx, 0
	movss	xmm0, DWORD PTR [esi+edi]
	mulss	xmm0, DWORD PTR [eax+ecx]
	movss	xmm1, DWORD PTR tv1542[ebp]
	addss	xmm1, xmm0
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv1544[ebp], xmm1
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	esi, eax
	mov	edi, 4
	shl	edi, 1
	push	0
	lea	ecx, DWORD PTR _mat2$[ebp]
	call	??Amatrix4x4@@QBEPBMH@Z			; matrix4x4::operator[]
	mov	edx, 4
	shl	edx, 1
	movss	xmm0, DWORD PTR [esi+edi]
	mulss	xmm0, DWORD PTR [eax+edx]
	movss	xmm1, DWORD PTR tv1544[ebp]
	addss	xmm1, xmm0
	mov	eax, 16					; 00000010H
	imul	ecx, eax, 3
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv1546[ebp], xmm1
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	esi, eax
	mov	edi, 4
	shl	edi, 1
	push	0
	lea	ecx, DWORD PTR _mat2$[ebp]
	call	??Amatrix4x4@@QBEPBMH@Z			; matrix4x4::operator[]
	mov	ecx, 4
	imul	edx, ecx, 3
	movss	xmm0, DWORD PTR [esi+edi]
	mulss	xmm0, DWORD PTR [eax+edx]
	movss	xmm1, DWORD PTR tv1546[ebp]
	addss	xmm1, xmm0
	push	0
	lea	ecx, DWORD PTR _out$[ebp]
	movss	DWORD PTR tv1548[ebp], xmm1
	call	??Amatrix4x4@@QAEPAMH@Z			; matrix4x4::operator[]
	mov	ecx, 4
	shl	ecx, 1
	movss	xmm0, DWORD PTR tv1548[ebp]
	movss	DWORD PTR [eax+ecx], xmm0

; 857  : 	out[1][2] = mat[0][2] * mat2[1][0] + mat[1][2] * mat2[1][1] + mat[2][2] * mat2[1][2] + mat[3][2] * mat2[1][3];

	mov	edx, 16					; 00000010H
	imul	ecx, edx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	esi, eax
	mov	edi, 4
	shl	edi, 1
	push	1
	lea	ecx, DWORD PTR _mat2$[ebp]
	call	??Amatrix4x4@@QBEPBMH@Z			; matrix4x4::operator[]
	mov	ecx, 4
	imul	edx, ecx, 0
	movss	xmm0, DWORD PTR [esi+edi]
	mulss	xmm0, DWORD PTR [eax+edx]
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv1550[ebp], xmm0
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	esi, eax
	mov	edi, 4
	shl	edi, 1
	push	1
	lea	ecx, DWORD PTR _mat2$[ebp]
	call	??Amatrix4x4@@QBEPBMH@Z			; matrix4x4::operator[]
	mov	ecx, 4
	shl	ecx, 0
	movss	xmm0, DWORD PTR [esi+edi]
	mulss	xmm0, DWORD PTR [eax+ecx]
	movss	xmm1, DWORD PTR tv1550[ebp]
	addss	xmm1, xmm0
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv1552[ebp], xmm1
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	esi, eax
	mov	edi, 4
	shl	edi, 1
	push	1
	lea	ecx, DWORD PTR _mat2$[ebp]
	call	??Amatrix4x4@@QBEPBMH@Z			; matrix4x4::operator[]
	mov	edx, 4
	shl	edx, 1
	movss	xmm0, DWORD PTR [esi+edi]
	mulss	xmm0, DWORD PTR [eax+edx]
	movss	xmm1, DWORD PTR tv1552[ebp]
	addss	xmm1, xmm0
	mov	eax, 16					; 00000010H
	imul	ecx, eax, 3
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv1554[ebp], xmm1
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	esi, eax
	mov	edi, 4
	shl	edi, 1
	push	1
	lea	ecx, DWORD PTR _mat2$[ebp]
	call	??Amatrix4x4@@QBEPBMH@Z			; matrix4x4::operator[]
	mov	ecx, 4
	imul	edx, ecx, 3
	movss	xmm0, DWORD PTR [esi+edi]
	mulss	xmm0, DWORD PTR [eax+edx]
	movss	xmm1, DWORD PTR tv1554[ebp]
	addss	xmm1, xmm0
	push	1
	lea	ecx, DWORD PTR _out$[ebp]
	movss	DWORD PTR tv1556[ebp], xmm1
	call	??Amatrix4x4@@QAEPAMH@Z			; matrix4x4::operator[]
	mov	ecx, 4
	shl	ecx, 1
	movss	xmm0, DWORD PTR tv1556[ebp]
	movss	DWORD PTR [eax+ecx], xmm0

; 858  : 	out[2][2] = mat[0][2] * mat2[2][0] + mat[1][2] * mat2[2][1] + mat[2][2] * mat2[2][2] + mat[3][2] * mat2[2][3];

	mov	edx, 16					; 00000010H
	imul	ecx, edx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	esi, eax
	mov	edi, 4
	shl	edi, 1
	push	2
	lea	ecx, DWORD PTR _mat2$[ebp]
	call	??Amatrix4x4@@QBEPBMH@Z			; matrix4x4::operator[]
	mov	ecx, 4
	imul	edx, ecx, 0
	movss	xmm0, DWORD PTR [esi+edi]
	mulss	xmm0, DWORD PTR [eax+edx]
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv1558[ebp], xmm0
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	esi, eax
	mov	edi, 4
	shl	edi, 1
	push	2
	lea	ecx, DWORD PTR _mat2$[ebp]
	call	??Amatrix4x4@@QBEPBMH@Z			; matrix4x4::operator[]
	mov	ecx, 4
	shl	ecx, 0
	movss	xmm0, DWORD PTR [esi+edi]
	mulss	xmm0, DWORD PTR [eax+ecx]
	movss	xmm1, DWORD PTR tv1558[ebp]
	addss	xmm1, xmm0
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv1560[ebp], xmm1
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	esi, eax
	mov	edi, 4
	shl	edi, 1
	push	2
	lea	ecx, DWORD PTR _mat2$[ebp]
	call	??Amatrix4x4@@QBEPBMH@Z			; matrix4x4::operator[]
	mov	edx, 4
	shl	edx, 1
	movss	xmm0, DWORD PTR [esi+edi]
	mulss	xmm0, DWORD PTR [eax+edx]
	movss	xmm1, DWORD PTR tv1560[ebp]
	addss	xmm1, xmm0
	mov	eax, 16					; 00000010H
	imul	ecx, eax, 3
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv1562[ebp], xmm1
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	esi, eax
	mov	edi, 4
	shl	edi, 1
	push	2
	lea	ecx, DWORD PTR _mat2$[ebp]
	call	??Amatrix4x4@@QBEPBMH@Z			; matrix4x4::operator[]
	mov	ecx, 4
	imul	edx, ecx, 3
	movss	xmm0, DWORD PTR [esi+edi]
	mulss	xmm0, DWORD PTR [eax+edx]
	movss	xmm1, DWORD PTR tv1562[ebp]
	addss	xmm1, xmm0
	push	2
	lea	ecx, DWORD PTR _out$[ebp]
	movss	DWORD PTR tv1564[ebp], xmm1
	call	??Amatrix4x4@@QAEPAMH@Z			; matrix4x4::operator[]
	mov	ecx, 4
	shl	ecx, 1
	movss	xmm0, DWORD PTR tv1564[ebp]
	movss	DWORD PTR [eax+ecx], xmm0

; 859  : 	out[3][2] = mat[0][2] * mat2[3][0] + mat[1][2] * mat2[3][1] + mat[2][2] * mat2[3][2] + mat[3][2] * mat2[3][3];

	mov	edx, 16					; 00000010H
	imul	ecx, edx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	esi, eax
	mov	edi, 4
	shl	edi, 1
	push	3
	lea	ecx, DWORD PTR _mat2$[ebp]
	call	??Amatrix4x4@@QBEPBMH@Z			; matrix4x4::operator[]
	mov	ecx, 4
	imul	edx, ecx, 0
	movss	xmm0, DWORD PTR [esi+edi]
	mulss	xmm0, DWORD PTR [eax+edx]
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv1566[ebp], xmm0
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	esi, eax
	mov	edi, 4
	shl	edi, 1
	push	3
	lea	ecx, DWORD PTR _mat2$[ebp]
	call	??Amatrix4x4@@QBEPBMH@Z			; matrix4x4::operator[]
	mov	ecx, 4
	shl	ecx, 0
	movss	xmm0, DWORD PTR [esi+edi]
	mulss	xmm0, DWORD PTR [eax+ecx]
	movss	xmm1, DWORD PTR tv1566[ebp]
	addss	xmm1, xmm0
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv1568[ebp], xmm1
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	esi, eax
	mov	edi, 4
	shl	edi, 1
	push	3
	lea	ecx, DWORD PTR _mat2$[ebp]
	call	??Amatrix4x4@@QBEPBMH@Z			; matrix4x4::operator[]
	mov	edx, 4
	shl	edx, 1
	movss	xmm0, DWORD PTR [esi+edi]
	mulss	xmm0, DWORD PTR [eax+edx]
	movss	xmm1, DWORD PTR tv1568[ebp]
	addss	xmm1, xmm0
	mov	eax, 16					; 00000010H
	imul	ecx, eax, 3
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv1570[ebp], xmm1
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	esi, eax
	mov	edi, 4
	shl	edi, 1
	push	3
	lea	ecx, DWORD PTR _mat2$[ebp]
	call	??Amatrix4x4@@QBEPBMH@Z			; matrix4x4::operator[]
	mov	ecx, 4
	imul	edx, ecx, 3
	movss	xmm0, DWORD PTR [esi+edi]
	mulss	xmm0, DWORD PTR [eax+edx]
	movss	xmm1, DWORD PTR tv1570[ebp]
	addss	xmm1, xmm0
	push	3
	lea	ecx, DWORD PTR _out$[ebp]
	movss	DWORD PTR tv1572[ebp], xmm1
	call	??Amatrix4x4@@QAEPAMH@Z			; matrix4x4::operator[]
	mov	ecx, 4
	shl	ecx, 1
	movss	xmm0, DWORD PTR tv1572[ebp]
	movss	DWORD PTR [eax+ecx], xmm0

; 860  : 	out[0][3] = mat[0][3] * mat2[0][0] + mat[1][3] * mat2[0][1] + mat[2][3] * mat2[0][2] + mat[3][3] * mat2[0][3];

	mov	edx, 16					; 00000010H
	imul	ecx, edx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	esi, eax
	mov	eax, 4
	imul	edi, eax, 3
	push	0
	lea	ecx, DWORD PTR _mat2$[ebp]
	call	??Amatrix4x4@@QBEPBMH@Z			; matrix4x4::operator[]
	mov	ecx, 4
	imul	edx, ecx, 0
	movss	xmm0, DWORD PTR [esi+edi]
	mulss	xmm0, DWORD PTR [eax+edx]
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv1574[ebp], xmm0
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	esi, eax
	mov	eax, 4
	imul	edi, eax, 3
	push	0
	lea	ecx, DWORD PTR _mat2$[ebp]
	call	??Amatrix4x4@@QBEPBMH@Z			; matrix4x4::operator[]
	mov	ecx, 4
	shl	ecx, 0
	movss	xmm0, DWORD PTR [esi+edi]
	mulss	xmm0, DWORD PTR [eax+ecx]
	movss	xmm1, DWORD PTR tv1574[ebp]
	addss	xmm1, xmm0
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv1576[ebp], xmm1
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	esi, eax
	mov	edx, 4
	imul	edi, edx, 3
	push	0
	lea	ecx, DWORD PTR _mat2$[ebp]
	call	??Amatrix4x4@@QBEPBMH@Z			; matrix4x4::operator[]
	mov	ecx, 4
	shl	ecx, 1
	movss	xmm0, DWORD PTR [esi+edi]
	mulss	xmm0, DWORD PTR [eax+ecx]
	movss	xmm1, DWORD PTR tv1576[ebp]
	addss	xmm1, xmm0
	mov	edx, 16					; 00000010H
	imul	ecx, edx, 3
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv1578[ebp], xmm1
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	esi, eax
	mov	eax, 4
	imul	edi, eax, 3
	push	0
	lea	ecx, DWORD PTR _mat2$[ebp]
	call	??Amatrix4x4@@QBEPBMH@Z			; matrix4x4::operator[]
	mov	ecx, 4
	imul	edx, ecx, 3
	movss	xmm0, DWORD PTR [esi+edi]
	mulss	xmm0, DWORD PTR [eax+edx]
	movss	xmm1, DWORD PTR tv1578[ebp]
	addss	xmm1, xmm0
	push	0
	lea	ecx, DWORD PTR _out$[ebp]
	movss	DWORD PTR tv1580[ebp], xmm1
	call	??Amatrix4x4@@QAEPAMH@Z			; matrix4x4::operator[]
	mov	ecx, 4
	imul	edx, ecx, 3
	movss	xmm0, DWORD PTR tv1580[ebp]
	movss	DWORD PTR [eax+edx], xmm0

; 861  : 	out[1][3] = mat[0][3] * mat2[1][0] + mat[1][3] * mat2[1][1] + mat[2][3] * mat2[1][2] + mat[3][3] * mat2[1][3];

	mov	eax, 16					; 00000010H
	imul	ecx, eax, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	esi, eax
	mov	ecx, 4
	imul	edi, ecx, 3
	push	1
	lea	ecx, DWORD PTR _mat2$[ebp]
	call	??Amatrix4x4@@QBEPBMH@Z			; matrix4x4::operator[]
	mov	edx, 4
	imul	ecx, edx, 0
	movss	xmm0, DWORD PTR [esi+edi]
	mulss	xmm0, DWORD PTR [eax+ecx]
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv1582[ebp], xmm0
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	esi, eax
	mov	edx, 4
	imul	edi, edx, 3
	push	1
	lea	ecx, DWORD PTR _mat2$[ebp]
	call	??Amatrix4x4@@QBEPBMH@Z			; matrix4x4::operator[]
	mov	ecx, 4
	shl	ecx, 0
	movss	xmm0, DWORD PTR [esi+edi]
	mulss	xmm0, DWORD PTR [eax+ecx]
	movss	xmm1, DWORD PTR tv1582[ebp]
	addss	xmm1, xmm0
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv1584[ebp], xmm1
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	esi, eax
	mov	edx, 4
	imul	edi, edx, 3
	push	1
	lea	ecx, DWORD PTR _mat2$[ebp]
	call	??Amatrix4x4@@QBEPBMH@Z			; matrix4x4::operator[]
	mov	ecx, 4
	shl	ecx, 1
	movss	xmm0, DWORD PTR [esi+edi]
	mulss	xmm0, DWORD PTR [eax+ecx]
	movss	xmm1, DWORD PTR tv1584[ebp]
	addss	xmm1, xmm0
	mov	edx, 16					; 00000010H
	imul	ecx, edx, 3
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv1586[ebp], xmm1
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	esi, eax
	mov	eax, 4
	imul	edi, eax, 3
	push	1
	lea	ecx, DWORD PTR _mat2$[ebp]
	call	??Amatrix4x4@@QBEPBMH@Z			; matrix4x4::operator[]
	mov	ecx, 4
	imul	edx, ecx, 3
	movss	xmm0, DWORD PTR [esi+edi]
	mulss	xmm0, DWORD PTR [eax+edx]
	movss	xmm1, DWORD PTR tv1586[ebp]
	addss	xmm1, xmm0
	push	1
	lea	ecx, DWORD PTR _out$[ebp]
	movss	DWORD PTR tv1588[ebp], xmm1
	call	??Amatrix4x4@@QAEPAMH@Z			; matrix4x4::operator[]
	mov	ecx, 4
	imul	edx, ecx, 3
	movss	xmm0, DWORD PTR tv1588[ebp]
	movss	DWORD PTR [eax+edx], xmm0

; 862  : 	out[2][3] = mat[0][3] * mat2[2][0] + mat[1][3] * mat2[2][1] + mat[2][3] * mat2[2][2] + mat[3][3] * mat2[2][3];

	mov	eax, 16					; 00000010H
	imul	ecx, eax, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	esi, eax
	mov	ecx, 4
	imul	edi, ecx, 3
	push	2
	lea	ecx, DWORD PTR _mat2$[ebp]
	call	??Amatrix4x4@@QBEPBMH@Z			; matrix4x4::operator[]
	mov	edx, 4
	imul	ecx, edx, 0
	movss	xmm0, DWORD PTR [esi+edi]
	mulss	xmm0, DWORD PTR [eax+ecx]
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv1590[ebp], xmm0
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	esi, eax
	mov	edx, 4
	imul	edi, edx, 3
	push	2
	lea	ecx, DWORD PTR _mat2$[ebp]
	call	??Amatrix4x4@@QBEPBMH@Z			; matrix4x4::operator[]
	mov	ecx, 4
	shl	ecx, 0
	movss	xmm0, DWORD PTR [esi+edi]
	mulss	xmm0, DWORD PTR [eax+ecx]
	movss	xmm1, DWORD PTR tv1590[ebp]
	addss	xmm1, xmm0
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv1592[ebp], xmm1
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	esi, eax
	mov	edx, 4
	imul	edi, edx, 3
	push	2
	lea	ecx, DWORD PTR _mat2$[ebp]
	call	??Amatrix4x4@@QBEPBMH@Z			; matrix4x4::operator[]
	mov	ecx, 4
	shl	ecx, 1
	movss	xmm0, DWORD PTR [esi+edi]
	mulss	xmm0, DWORD PTR [eax+ecx]
	movss	xmm1, DWORD PTR tv1592[ebp]
	addss	xmm1, xmm0
	mov	edx, 16					; 00000010H
	imul	ecx, edx, 3
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv1594[ebp], xmm1
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	esi, eax
	mov	eax, 4
	imul	edi, eax, 3
	push	2
	lea	ecx, DWORD PTR _mat2$[ebp]
	call	??Amatrix4x4@@QBEPBMH@Z			; matrix4x4::operator[]
	mov	ecx, 4
	imul	edx, ecx, 3
	movss	xmm0, DWORD PTR [esi+edi]
	mulss	xmm0, DWORD PTR [eax+edx]
	movss	xmm1, DWORD PTR tv1594[ebp]
	addss	xmm1, xmm0
	push	2
	lea	ecx, DWORD PTR _out$[ebp]
	movss	DWORD PTR tv1596[ebp], xmm1
	call	??Amatrix4x4@@QAEPAMH@Z			; matrix4x4::operator[]
	mov	ecx, 4
	imul	edx, ecx, 3
	movss	xmm0, DWORD PTR tv1596[ebp]
	movss	DWORD PTR [eax+edx], xmm0

; 863  : 	out[3][3] = mat[0][3] * mat2[3][0] + mat[1][3] * mat2[3][1] + mat[2][3] * mat2[3][2] + mat[3][3] * mat2[3][3];

	mov	eax, 16					; 00000010H
	imul	ecx, eax, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	esi, eax
	mov	ecx, 4
	imul	edi, ecx, 3
	push	3
	lea	ecx, DWORD PTR _mat2$[ebp]
	call	??Amatrix4x4@@QBEPBMH@Z			; matrix4x4::operator[]
	mov	edx, 4
	imul	ecx, edx, 0
	movss	xmm0, DWORD PTR [esi+edi]
	mulss	xmm0, DWORD PTR [eax+ecx]
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv1598[ebp], xmm0
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	esi, eax
	mov	edx, 4
	imul	edi, edx, 3
	push	3
	lea	ecx, DWORD PTR _mat2$[ebp]
	call	??Amatrix4x4@@QBEPBMH@Z			; matrix4x4::operator[]
	mov	ecx, 4
	shl	ecx, 0
	movss	xmm0, DWORD PTR [esi+edi]
	mulss	xmm0, DWORD PTR [eax+ecx]
	movss	xmm1, DWORD PTR tv1598[ebp]
	addss	xmm1, xmm0
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv1600[ebp], xmm1
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	esi, eax
	mov	edx, 4
	imul	edi, edx, 3
	push	3
	lea	ecx, DWORD PTR _mat2$[ebp]
	call	??Amatrix4x4@@QBEPBMH@Z			; matrix4x4::operator[]
	mov	ecx, 4
	shl	ecx, 1
	movss	xmm0, DWORD PTR [esi+edi]
	mulss	xmm0, DWORD PTR [eax+ecx]
	movss	xmm1, DWORD PTR tv1600[ebp]
	addss	xmm1, xmm0
	mov	edx, 16					; 00000010H
	imul	ecx, edx, 3
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv1602[ebp], xmm1
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	esi, eax
	mov	eax, 4
	imul	edi, eax, 3
	push	3
	lea	ecx, DWORD PTR _mat2$[ebp]
	call	??Amatrix4x4@@QBEPBMH@Z			; matrix4x4::operator[]
	mov	ecx, 4
	imul	edx, ecx, 3
	movss	xmm0, DWORD PTR [esi+edi]
	mulss	xmm0, DWORD PTR [eax+edx]
	movss	xmm1, DWORD PTR tv1602[ebp]
	addss	xmm1, xmm0
	push	3
	lea	ecx, DWORD PTR _out$[ebp]
	movss	DWORD PTR tv1604[ebp], xmm1
	call	??Amatrix4x4@@QAEPAMH@Z			; matrix4x4::operator[]
	mov	ecx, 4
	imul	edx, ecx, 3
	movss	xmm0, DWORD PTR tv1604[ebp]
	movss	DWORD PTR [eax+edx], xmm0

; 864  : 
; 865  : 	return out;

	lea	eax, DWORD PTR _out$[ebp]
	push	eax
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0matrix4x4@@QAE@ABV0@@Z
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 866  : }

	pop	edi
	pop	esi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	68					; 00000044H
?Concat@matrix4x4@@QAE?AV1@V1@@Z ENDP			; matrix4x4::Concat
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xashxt_v0.81_rev.1_with_sources\xashxt_v0.81_rev.1_src\game_shared\matrix.cpp
_TEXT	SEGMENT
tv997 = -228						; size = 4
tv1035 = -224						; size = 4
tv1033 = -220						; size = 4
tv1031 = -216						; size = 4
tv1029 = -212						; size = 4
tv1027 = -208						; size = 4
tv1025 = -204						; size = 4
tv1023 = -200						; size = 4
tv1021 = -196						; size = 4
tv1019 = -192						; size = 4
tv1017 = -188						; size = 4
tv1015 = -184						; size = 4
tv1013 = -180						; size = 4
tv1011 = -176						; size = 4
tv1009 = -172						; size = 4
tv1007 = -168						; size = 4
tv1005 = -164						; size = 4
tv1003 = -160						; size = 4
tv1001 = -156						; size = 4
tv999 = -152						; size = 4
tv995 = -148						; size = 4
tv993 = -144						; size = 4
tv991 = -140						; size = 4
tv989 = -136						; size = 4
tv987 = -132						; size = 4
tv985 = -128						; size = 4
tv983 = -124						; size = 4
tv981 = -120						; size = 4
tv979 = -116						; size = 4
tv977 = -112						; size = 4
tv975 = -108						; size = 4
tv973 = -104						; size = 4
tv971 = -100						; size = 4
tv969 = -96						; size = 4
tv967 = -92						; size = 4
tv965 = -88						; size = 4
tv963 = -84						; size = 4
tv961 = -80						; size = 4
tv959 = -76						; size = 4
_this$ = -72						; size = 4
_out$ = -68						; size = 64
__$ArrayPad$ = -4					; size = 4
___$ReturnUdt$ = 8					; size = 4
_mat2$ = 12						; size = 64
?ConcatTransforms@matrix4x4@@QAE?AV1@V1@@Z PROC		; matrix4x4::ConcatTransforms
; _this$ = ecx

; 819  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 228				; 000000e4H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 820  : 	matrix4x4 out;

	lea	ecx, DWORD PTR _out$[ebp]
	call	??0matrix4x4@@QAE@XZ			; matrix4x4::matrix4x4

; 821  : 
; 822  : 	out[0][0] = mat[0][0] * mat2[0][0] + mat[1][0] * mat2[0][1] + mat[2][0] * mat2[0][2];

	mov	eax, 16					; 00000010H
	imul	ecx, eax, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	esi, eax
	mov	ecx, 4
	imul	edi, ecx, 0
	push	0
	lea	ecx, DWORD PTR _mat2$[ebp]
	call	??Amatrix4x4@@QBEPBMH@Z			; matrix4x4::operator[]
	mov	edx, 4
	imul	ecx, edx, 0
	movss	xmm0, DWORD PTR [esi+edi]
	mulss	xmm0, DWORD PTR [eax+ecx]
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv959[ebp], xmm0
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	esi, eax
	mov	edx, 4
	imul	edi, edx, 0
	push	0
	lea	ecx, DWORD PTR _mat2$[ebp]
	call	??Amatrix4x4@@QBEPBMH@Z			; matrix4x4::operator[]
	mov	ecx, 4
	shl	ecx, 0
	movss	xmm0, DWORD PTR [esi+edi]
	mulss	xmm0, DWORD PTR [eax+ecx]
	movss	xmm1, DWORD PTR tv959[ebp]
	addss	xmm1, xmm0
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv961[ebp], xmm1
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	esi, eax
	mov	edx, 4
	imul	edi, edx, 0
	push	0
	lea	ecx, DWORD PTR _mat2$[ebp]
	call	??Amatrix4x4@@QBEPBMH@Z			; matrix4x4::operator[]
	mov	ecx, 4
	shl	ecx, 1
	movss	xmm0, DWORD PTR [esi+edi]
	mulss	xmm0, DWORD PTR [eax+ecx]
	movss	xmm1, DWORD PTR tv961[ebp]
	addss	xmm1, xmm0
	push	0
	lea	ecx, DWORD PTR _out$[ebp]
	movss	DWORD PTR tv963[ebp], xmm1
	call	??Amatrix4x4@@QAEPAMH@Z			; matrix4x4::operator[]
	mov	edx, 4
	imul	ecx, edx, 0
	movss	xmm0, DWORD PTR tv963[ebp]
	movss	DWORD PTR [eax+ecx], xmm0

; 823  : 	out[1][0] = mat[0][0] * mat2[1][0] + mat[1][0] * mat2[1][1] + mat[2][0] * mat2[1][2];

	mov	edx, 16					; 00000010H
	imul	ecx, edx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	esi, eax
	mov	eax, 4
	imul	edi, eax, 0
	push	1
	lea	ecx, DWORD PTR _mat2$[ebp]
	call	??Amatrix4x4@@QBEPBMH@Z			; matrix4x4::operator[]
	mov	ecx, 4
	imul	edx, ecx, 0
	movss	xmm0, DWORD PTR [esi+edi]
	mulss	xmm0, DWORD PTR [eax+edx]
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv965[ebp], xmm0
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	esi, eax
	mov	eax, 4
	imul	edi, eax, 0
	push	1
	lea	ecx, DWORD PTR _mat2$[ebp]
	call	??Amatrix4x4@@QBEPBMH@Z			; matrix4x4::operator[]
	mov	ecx, 4
	shl	ecx, 0
	movss	xmm0, DWORD PTR [esi+edi]
	mulss	xmm0, DWORD PTR [eax+ecx]
	movss	xmm1, DWORD PTR tv965[ebp]
	addss	xmm1, xmm0
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv967[ebp], xmm1
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	esi, eax
	mov	edx, 4
	imul	edi, edx, 0
	push	1
	lea	ecx, DWORD PTR _mat2$[ebp]
	call	??Amatrix4x4@@QBEPBMH@Z			; matrix4x4::operator[]
	mov	ecx, 4
	shl	ecx, 1
	movss	xmm0, DWORD PTR [esi+edi]
	mulss	xmm0, DWORD PTR [eax+ecx]
	movss	xmm1, DWORD PTR tv967[ebp]
	addss	xmm1, xmm0
	push	1
	lea	ecx, DWORD PTR _out$[ebp]
	movss	DWORD PTR tv969[ebp], xmm1
	call	??Amatrix4x4@@QAEPAMH@Z			; matrix4x4::operator[]
	mov	edx, 4
	imul	ecx, edx, 0
	movss	xmm0, DWORD PTR tv969[ebp]
	movss	DWORD PTR [eax+ecx], xmm0

; 824  : 	out[2][0] = mat[0][0] * mat2[2][0] + mat[1][0] * mat2[2][1] + mat[2][0] * mat2[2][2];

	mov	edx, 16					; 00000010H
	imul	ecx, edx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	esi, eax
	mov	eax, 4
	imul	edi, eax, 0
	push	2
	lea	ecx, DWORD PTR _mat2$[ebp]
	call	??Amatrix4x4@@QBEPBMH@Z			; matrix4x4::operator[]
	mov	ecx, 4
	imul	edx, ecx, 0
	movss	xmm0, DWORD PTR [esi+edi]
	mulss	xmm0, DWORD PTR [eax+edx]
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv971[ebp], xmm0
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	esi, eax
	mov	eax, 4
	imul	edi, eax, 0
	push	2
	lea	ecx, DWORD PTR _mat2$[ebp]
	call	??Amatrix4x4@@QBEPBMH@Z			; matrix4x4::operator[]
	mov	ecx, 4
	shl	ecx, 0
	movss	xmm0, DWORD PTR [esi+edi]
	mulss	xmm0, DWORD PTR [eax+ecx]
	movss	xmm1, DWORD PTR tv971[ebp]
	addss	xmm1, xmm0
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv973[ebp], xmm1
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	esi, eax
	mov	edx, 4
	imul	edi, edx, 0
	push	2
	lea	ecx, DWORD PTR _mat2$[ebp]
	call	??Amatrix4x4@@QBEPBMH@Z			; matrix4x4::operator[]
	mov	ecx, 4
	shl	ecx, 1
	movss	xmm0, DWORD PTR [esi+edi]
	mulss	xmm0, DWORD PTR [eax+ecx]
	movss	xmm1, DWORD PTR tv973[ebp]
	addss	xmm1, xmm0
	push	2
	lea	ecx, DWORD PTR _out$[ebp]
	movss	DWORD PTR tv975[ebp], xmm1
	call	??Amatrix4x4@@QAEPAMH@Z			; matrix4x4::operator[]
	mov	edx, 4
	imul	ecx, edx, 0
	movss	xmm0, DWORD PTR tv975[ebp]
	movss	DWORD PTR [eax+ecx], xmm0

; 825  : 	out[3][0] = mat[0][0] * mat2[3][0] + mat[1][0] * mat2[3][1] + mat[2][0] * mat2[3][2] + mat[3][0];

	mov	edx, 16					; 00000010H
	imul	ecx, edx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	esi, eax
	mov	eax, 4
	imul	edi, eax, 0
	push	3
	lea	ecx, DWORD PTR _mat2$[ebp]
	call	??Amatrix4x4@@QBEPBMH@Z			; matrix4x4::operator[]
	mov	ecx, 4
	imul	edx, ecx, 0
	movss	xmm0, DWORD PTR [esi+edi]
	mulss	xmm0, DWORD PTR [eax+edx]
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv977[ebp], xmm0
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	esi, eax
	mov	eax, 4
	imul	edi, eax, 0
	push	3
	lea	ecx, DWORD PTR _mat2$[ebp]
	call	??Amatrix4x4@@QBEPBMH@Z			; matrix4x4::operator[]
	mov	ecx, 4
	shl	ecx, 0
	movss	xmm0, DWORD PTR [esi+edi]
	mulss	xmm0, DWORD PTR [eax+ecx]
	movss	xmm1, DWORD PTR tv977[ebp]
	addss	xmm1, xmm0
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv979[ebp], xmm1
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	esi, eax
	mov	edx, 4
	imul	edi, edx, 0
	push	3
	lea	ecx, DWORD PTR _mat2$[ebp]
	call	??Amatrix4x4@@QBEPBMH@Z			; matrix4x4::operator[]
	mov	ecx, 4
	shl	ecx, 1
	movss	xmm0, DWORD PTR [esi+edi]
	mulss	xmm0, DWORD PTR [eax+ecx]
	movss	xmm1, DWORD PTR tv979[ebp]
	addss	xmm1, xmm0
	mov	edx, 16					; 00000010H
	imul	ecx, edx, 3
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv981[ebp], xmm1
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	ecx, 4
	imul	edx, ecx, 0
	movss	xmm0, DWORD PTR tv981[ebp]
	addss	xmm0, DWORD PTR [eax+edx]
	push	3
	lea	ecx, DWORD PTR _out$[ebp]
	movss	DWORD PTR tv983[ebp], xmm0
	call	??Amatrix4x4@@QAEPAMH@Z			; matrix4x4::operator[]
	mov	ecx, 4
	imul	edx, ecx, 0
	movss	xmm0, DWORD PTR tv983[ebp]
	movss	DWORD PTR [eax+edx], xmm0

; 826  : 	out[0][1] = mat[0][1] * mat2[0][0] + mat[1][1] * mat2[0][1] + mat[2][1] * mat2[0][2];

	mov	eax, 16					; 00000010H
	imul	ecx, eax, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	esi, eax
	mov	edi, 4
	shl	edi, 0
	push	0
	lea	ecx, DWORD PTR _mat2$[ebp]
	call	??Amatrix4x4@@QBEPBMH@Z			; matrix4x4::operator[]
	mov	ecx, 4
	imul	edx, ecx, 0
	movss	xmm0, DWORD PTR [esi+edi]
	mulss	xmm0, DWORD PTR [eax+edx]
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv985[ebp], xmm0
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	esi, eax
	mov	edi, 4
	shl	edi, 0
	push	0
	lea	ecx, DWORD PTR _mat2$[ebp]
	call	??Amatrix4x4@@QBEPBMH@Z			; matrix4x4::operator[]
	mov	ecx, 4
	shl	ecx, 0
	movss	xmm0, DWORD PTR [esi+edi]
	mulss	xmm0, DWORD PTR [eax+ecx]
	movss	xmm1, DWORD PTR tv985[ebp]
	addss	xmm1, xmm0
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv987[ebp], xmm1
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	esi, eax
	mov	edi, 4
	shl	edi, 0
	push	0
	lea	ecx, DWORD PTR _mat2$[ebp]
	call	??Amatrix4x4@@QBEPBMH@Z			; matrix4x4::operator[]
	mov	edx, 4
	shl	edx, 1
	movss	xmm0, DWORD PTR [esi+edi]
	mulss	xmm0, DWORD PTR [eax+edx]
	movss	xmm1, DWORD PTR tv987[ebp]
	addss	xmm1, xmm0
	push	0
	lea	ecx, DWORD PTR _out$[ebp]
	movss	DWORD PTR tv989[ebp], xmm1
	call	??Amatrix4x4@@QAEPAMH@Z			; matrix4x4::operator[]
	mov	ecx, 4
	shl	ecx, 0
	movss	xmm0, DWORD PTR tv989[ebp]
	movss	DWORD PTR [eax+ecx], xmm0

; 827  : 	out[1][1] = mat[0][1] * mat2[1][0] + mat[1][1] * mat2[1][1] + mat[2][1] * mat2[1][2];

	mov	edx, 16					; 00000010H
	imul	ecx, edx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	esi, eax
	mov	edi, 4
	shl	edi, 0
	push	1
	lea	ecx, DWORD PTR _mat2$[ebp]
	call	??Amatrix4x4@@QBEPBMH@Z			; matrix4x4::operator[]
	mov	ecx, 4
	imul	edx, ecx, 0
	movss	xmm0, DWORD PTR [esi+edi]
	mulss	xmm0, DWORD PTR [eax+edx]
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv991[ebp], xmm0
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	esi, eax
	mov	edi, 4
	shl	edi, 0
	push	1
	lea	ecx, DWORD PTR _mat2$[ebp]
	call	??Amatrix4x4@@QBEPBMH@Z			; matrix4x4::operator[]
	mov	ecx, 4
	shl	ecx, 0
	movss	xmm0, DWORD PTR [esi+edi]
	mulss	xmm0, DWORD PTR [eax+ecx]
	movss	xmm1, DWORD PTR tv991[ebp]
	addss	xmm1, xmm0
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv993[ebp], xmm1
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	esi, eax
	mov	edi, 4
	shl	edi, 0
	push	1
	lea	ecx, DWORD PTR _mat2$[ebp]
	call	??Amatrix4x4@@QBEPBMH@Z			; matrix4x4::operator[]
	mov	edx, 4
	shl	edx, 1
	movss	xmm0, DWORD PTR [esi+edi]
	mulss	xmm0, DWORD PTR [eax+edx]
	movss	xmm1, DWORD PTR tv993[ebp]
	addss	xmm1, xmm0
	push	1
	lea	ecx, DWORD PTR _out$[ebp]
	movss	DWORD PTR tv995[ebp], xmm1
	call	??Amatrix4x4@@QAEPAMH@Z			; matrix4x4::operator[]
	mov	ecx, 4
	shl	ecx, 0
	movss	xmm0, DWORD PTR tv995[ebp]
	movss	DWORD PTR [eax+ecx], xmm0

; 828  : 	out[2][1] = mat[0][1] * mat2[2][0] + mat[1][1] * mat2[2][1] + mat[2][1] * mat2[2][2];

	mov	edx, 16					; 00000010H
	imul	ecx, edx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	esi, eax
	mov	edi, 4
	shl	edi, 0
	push	2
	lea	ecx, DWORD PTR _mat2$[ebp]
	call	??Amatrix4x4@@QBEPBMH@Z			; matrix4x4::operator[]
	mov	ecx, 4
	imul	edx, ecx, 0
	movss	xmm0, DWORD PTR [esi+edi]
	mulss	xmm0, DWORD PTR [eax+edx]
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv997[ebp], xmm0
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	esi, eax
	mov	edi, 4
	shl	edi, 0
	push	2
	lea	ecx, DWORD PTR _mat2$[ebp]
	call	??Amatrix4x4@@QBEPBMH@Z			; matrix4x4::operator[]
	mov	ecx, 4
	shl	ecx, 0
	movss	xmm0, DWORD PTR [esi+edi]
	mulss	xmm0, DWORD PTR [eax+ecx]
	movss	xmm1, DWORD PTR tv997[ebp]
	addss	xmm1, xmm0
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv999[ebp], xmm1
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	esi, eax
	mov	edi, 4
	shl	edi, 0
	push	2
	lea	ecx, DWORD PTR _mat2$[ebp]
	call	??Amatrix4x4@@QBEPBMH@Z			; matrix4x4::operator[]
	mov	edx, 4
	shl	edx, 1
	movss	xmm0, DWORD PTR [esi+edi]
	mulss	xmm0, DWORD PTR [eax+edx]
	movss	xmm1, DWORD PTR tv999[ebp]
	addss	xmm1, xmm0
	push	2
	lea	ecx, DWORD PTR _out$[ebp]
	movss	DWORD PTR tv1001[ebp], xmm1
	call	??Amatrix4x4@@QAEPAMH@Z			; matrix4x4::operator[]
	mov	ecx, 4
	shl	ecx, 0
	movss	xmm0, DWORD PTR tv1001[ebp]
	movss	DWORD PTR [eax+ecx], xmm0

; 829  : 	out[3][1] = mat[0][1] * mat2[3][0] + mat[1][1] * mat2[3][1] + mat[2][1] * mat2[3][2] + mat[3][1];

	mov	edx, 16					; 00000010H
	imul	ecx, edx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	esi, eax
	mov	edi, 4
	shl	edi, 0
	push	3
	lea	ecx, DWORD PTR _mat2$[ebp]
	call	??Amatrix4x4@@QBEPBMH@Z			; matrix4x4::operator[]
	mov	ecx, 4
	imul	edx, ecx, 0
	movss	xmm0, DWORD PTR [esi+edi]
	mulss	xmm0, DWORD PTR [eax+edx]
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv1003[ebp], xmm0
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	esi, eax
	mov	edi, 4
	shl	edi, 0
	push	3
	lea	ecx, DWORD PTR _mat2$[ebp]
	call	??Amatrix4x4@@QBEPBMH@Z			; matrix4x4::operator[]
	mov	ecx, 4
	shl	ecx, 0
	movss	xmm0, DWORD PTR [esi+edi]
	mulss	xmm0, DWORD PTR [eax+ecx]
	movss	xmm1, DWORD PTR tv1003[ebp]
	addss	xmm1, xmm0
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv1005[ebp], xmm1
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	esi, eax
	mov	edi, 4
	shl	edi, 0
	push	3
	lea	ecx, DWORD PTR _mat2$[ebp]
	call	??Amatrix4x4@@QBEPBMH@Z			; matrix4x4::operator[]
	mov	edx, 4
	shl	edx, 1
	movss	xmm0, DWORD PTR [esi+edi]
	mulss	xmm0, DWORD PTR [eax+edx]
	movss	xmm1, DWORD PTR tv1005[ebp]
	addss	xmm1, xmm0
	mov	eax, 16					; 00000010H
	imul	ecx, eax, 3
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv1007[ebp], xmm1
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	ecx, 4
	shl	ecx, 0
	movss	xmm0, DWORD PTR tv1007[ebp]
	addss	xmm0, DWORD PTR [eax+ecx]
	push	3
	lea	ecx, DWORD PTR _out$[ebp]
	movss	DWORD PTR tv1009[ebp], xmm0
	call	??Amatrix4x4@@QAEPAMH@Z			; matrix4x4::operator[]
	mov	edx, 4
	shl	edx, 0
	movss	xmm0, DWORD PTR tv1009[ebp]
	movss	DWORD PTR [eax+edx], xmm0

; 830  : 	out[0][2] = mat[0][2] * mat2[0][0] + mat[1][2] * mat2[0][1] + mat[2][2] * mat2[0][2];

	mov	eax, 16					; 00000010H
	imul	ecx, eax, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	esi, eax
	mov	edi, 4
	shl	edi, 1
	push	0
	lea	ecx, DWORD PTR _mat2$[ebp]
	call	??Amatrix4x4@@QBEPBMH@Z			; matrix4x4::operator[]
	mov	ecx, 4
	imul	edx, ecx, 0
	movss	xmm0, DWORD PTR [esi+edi]
	mulss	xmm0, DWORD PTR [eax+edx]
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv1011[ebp], xmm0
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	esi, eax
	mov	edi, 4
	shl	edi, 1
	push	0
	lea	ecx, DWORD PTR _mat2$[ebp]
	call	??Amatrix4x4@@QBEPBMH@Z			; matrix4x4::operator[]
	mov	ecx, 4
	shl	ecx, 0
	movss	xmm0, DWORD PTR [esi+edi]
	mulss	xmm0, DWORD PTR [eax+ecx]
	movss	xmm1, DWORD PTR tv1011[ebp]
	addss	xmm1, xmm0
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv1013[ebp], xmm1
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	esi, eax
	mov	edi, 4
	shl	edi, 1
	push	0
	lea	ecx, DWORD PTR _mat2$[ebp]
	call	??Amatrix4x4@@QBEPBMH@Z			; matrix4x4::operator[]
	mov	edx, 4
	shl	edx, 1
	movss	xmm0, DWORD PTR [esi+edi]
	mulss	xmm0, DWORD PTR [eax+edx]
	movss	xmm1, DWORD PTR tv1013[ebp]
	addss	xmm1, xmm0
	push	0
	lea	ecx, DWORD PTR _out$[ebp]
	movss	DWORD PTR tv1015[ebp], xmm1
	call	??Amatrix4x4@@QAEPAMH@Z			; matrix4x4::operator[]
	mov	ecx, 4
	shl	ecx, 1
	movss	xmm0, DWORD PTR tv1015[ebp]
	movss	DWORD PTR [eax+ecx], xmm0

; 831  : 	out[1][2] = mat[0][2] * mat2[1][0] + mat[1][2] * mat2[1][1] + mat[2][2] * mat2[1][2];

	mov	edx, 16					; 00000010H
	imul	ecx, edx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	esi, eax
	mov	edi, 4
	shl	edi, 1
	push	1
	lea	ecx, DWORD PTR _mat2$[ebp]
	call	??Amatrix4x4@@QBEPBMH@Z			; matrix4x4::operator[]
	mov	ecx, 4
	imul	edx, ecx, 0
	movss	xmm0, DWORD PTR [esi+edi]
	mulss	xmm0, DWORD PTR [eax+edx]
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv1017[ebp], xmm0
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	esi, eax
	mov	edi, 4
	shl	edi, 1
	push	1
	lea	ecx, DWORD PTR _mat2$[ebp]
	call	??Amatrix4x4@@QBEPBMH@Z			; matrix4x4::operator[]
	mov	ecx, 4
	shl	ecx, 0
	movss	xmm0, DWORD PTR [esi+edi]
	mulss	xmm0, DWORD PTR [eax+ecx]
	movss	xmm1, DWORD PTR tv1017[ebp]
	addss	xmm1, xmm0
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv1019[ebp], xmm1
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	esi, eax
	mov	edi, 4
	shl	edi, 1
	push	1
	lea	ecx, DWORD PTR _mat2$[ebp]
	call	??Amatrix4x4@@QBEPBMH@Z			; matrix4x4::operator[]
	mov	edx, 4
	shl	edx, 1
	movss	xmm0, DWORD PTR [esi+edi]
	mulss	xmm0, DWORD PTR [eax+edx]
	movss	xmm1, DWORD PTR tv1019[ebp]
	addss	xmm1, xmm0
	push	1
	lea	ecx, DWORD PTR _out$[ebp]
	movss	DWORD PTR tv1021[ebp], xmm1
	call	??Amatrix4x4@@QAEPAMH@Z			; matrix4x4::operator[]
	mov	ecx, 4
	shl	ecx, 1
	movss	xmm0, DWORD PTR tv1021[ebp]
	movss	DWORD PTR [eax+ecx], xmm0

; 832  : 	out[2][2] = mat[0][2] * mat2[2][0] + mat[1][2] * mat2[2][1] + mat[2][2] * mat2[2][2];

	mov	edx, 16					; 00000010H
	imul	ecx, edx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	esi, eax
	mov	edi, 4
	shl	edi, 1
	push	2
	lea	ecx, DWORD PTR _mat2$[ebp]
	call	??Amatrix4x4@@QBEPBMH@Z			; matrix4x4::operator[]
	mov	ecx, 4
	imul	edx, ecx, 0
	movss	xmm0, DWORD PTR [esi+edi]
	mulss	xmm0, DWORD PTR [eax+edx]
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv1023[ebp], xmm0
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	esi, eax
	mov	edi, 4
	shl	edi, 1
	push	2
	lea	ecx, DWORD PTR _mat2$[ebp]
	call	??Amatrix4x4@@QBEPBMH@Z			; matrix4x4::operator[]
	mov	ecx, 4
	shl	ecx, 0
	movss	xmm0, DWORD PTR [esi+edi]
	mulss	xmm0, DWORD PTR [eax+ecx]
	movss	xmm1, DWORD PTR tv1023[ebp]
	addss	xmm1, xmm0
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv1025[ebp], xmm1
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	esi, eax
	mov	edi, 4
	shl	edi, 1
	push	2
	lea	ecx, DWORD PTR _mat2$[ebp]
	call	??Amatrix4x4@@QBEPBMH@Z			; matrix4x4::operator[]
	mov	edx, 4
	shl	edx, 1
	movss	xmm0, DWORD PTR [esi+edi]
	mulss	xmm0, DWORD PTR [eax+edx]
	movss	xmm1, DWORD PTR tv1025[ebp]
	addss	xmm1, xmm0
	push	2
	lea	ecx, DWORD PTR _out$[ebp]
	movss	DWORD PTR tv1027[ebp], xmm1
	call	??Amatrix4x4@@QAEPAMH@Z			; matrix4x4::operator[]
	mov	ecx, 4
	shl	ecx, 1
	movss	xmm0, DWORD PTR tv1027[ebp]
	movss	DWORD PTR [eax+ecx], xmm0

; 833  : 	out[3][2] = mat[0][2] * mat2[3][0] + mat[1][2] * mat2[3][1] + mat[2][2] * mat2[3][2] + mat[3][2];

	mov	edx, 16					; 00000010H
	imul	ecx, edx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	esi, eax
	mov	edi, 4
	shl	edi, 1
	push	3
	lea	ecx, DWORD PTR _mat2$[ebp]
	call	??Amatrix4x4@@QBEPBMH@Z			; matrix4x4::operator[]
	mov	ecx, 4
	imul	edx, ecx, 0
	movss	xmm0, DWORD PTR [esi+edi]
	mulss	xmm0, DWORD PTR [eax+edx]
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv1029[ebp], xmm0
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	esi, eax
	mov	edi, 4
	shl	edi, 1
	push	3
	lea	ecx, DWORD PTR _mat2$[ebp]
	call	??Amatrix4x4@@QBEPBMH@Z			; matrix4x4::operator[]
	mov	ecx, 4
	shl	ecx, 0
	movss	xmm0, DWORD PTR [esi+edi]
	mulss	xmm0, DWORD PTR [eax+ecx]
	movss	xmm1, DWORD PTR tv1029[ebp]
	addss	xmm1, xmm0
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv1031[ebp], xmm1
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	esi, eax
	mov	edi, 4
	shl	edi, 1
	push	3
	lea	ecx, DWORD PTR _mat2$[ebp]
	call	??Amatrix4x4@@QBEPBMH@Z			; matrix4x4::operator[]
	mov	edx, 4
	shl	edx, 1
	movss	xmm0, DWORD PTR [esi+edi]
	mulss	xmm0, DWORD PTR [eax+edx]
	movss	xmm1, DWORD PTR tv1031[ebp]
	addss	xmm1, xmm0
	mov	eax, 16					; 00000010H
	imul	ecx, eax, 3
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv1033[ebp], xmm1
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	ecx, 4
	shl	ecx, 1
	movss	xmm0, DWORD PTR tv1033[ebp]
	addss	xmm0, DWORD PTR [eax+ecx]
	push	3
	lea	ecx, DWORD PTR _out$[ebp]
	movss	DWORD PTR tv1035[ebp], xmm0
	call	??Amatrix4x4@@QAEPAMH@Z			; matrix4x4::operator[]
	mov	edx, 4
	shl	edx, 1
	movss	xmm0, DWORD PTR tv1035[ebp]
	movss	DWORD PTR [eax+edx], xmm0

; 834  : 
; 835  : 	// not used for concat transforms
; 836  : 	out[0][3] = 0.0f;

	push	0
	lea	ecx, DWORD PTR _out$[ebp]
	call	??Amatrix4x4@@QAEPAMH@Z			; matrix4x4::operator[]
	mov	ecx, 4
	imul	edx, ecx, 3
	xorps	xmm0, xmm0
	movss	DWORD PTR [eax+edx], xmm0

; 837  : 	out[1][3] = 0.0f;

	push	1
	lea	ecx, DWORD PTR _out$[ebp]
	call	??Amatrix4x4@@QAEPAMH@Z			; matrix4x4::operator[]
	mov	ecx, 4
	imul	edx, ecx, 3
	xorps	xmm0, xmm0
	movss	DWORD PTR [eax+edx], xmm0

; 838  : 	out[2][3] = 0.0f;

	push	2
	lea	ecx, DWORD PTR _out$[ebp]
	call	??Amatrix4x4@@QAEPAMH@Z			; matrix4x4::operator[]
	mov	ecx, 4
	imul	edx, ecx, 3
	xorps	xmm0, xmm0
	movss	DWORD PTR [eax+edx], xmm0

; 839  : 	out[3][3] = 1.0f;

	push	3
	lea	ecx, DWORD PTR _out$[ebp]
	call	??Amatrix4x4@@QAEPAMH@Z			; matrix4x4::operator[]
	mov	ecx, 4
	imul	edx, ecx, 3
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [eax+edx], xmm0

; 840  : 
; 841  : 	return out;

	lea	eax, DWORD PTR _out$[ebp]
	push	eax
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0matrix4x4@@QAE@ABV0@@Z
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 842  : }

	pop	edi
	pop	esi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	68					; 00000044H
?ConcatTransforms@matrix4x4@@QAE?AV1@V1@@Z ENDP		; matrix4x4::ConcatTransforms
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xashxt_v0.81_rev.1_with_sources\xashxt_v0.81_rev.1_src\game_shared\matrix.cpp
_TEXT	SEGMENT
tv2644 = -384						; size = 8
tv3093 = -376						; size = 8
tv2637 = -368						; size = 8
tv2490 = -360						; size = 8
tv3091 = -352						; size = 8
tv2483 = -344						; size = 8
tv2469 = -336						; size = 8
tv3089 = -328						; size = 8
tv2462 = -320						; size = 8
tv2245 = -312						; size = 8
tv3087 = -304						; size = 8
tv2238 = -296						; size = 8
tv2224 = -288						; size = 8
tv3085 = -280						; size = 8
tv2217 = -272						; size = 8
tv2203 = -264						; size = 8
tv3083 = -256						; size = 8
tv2196 = -248						; size = 8
_temp$ = -240						; size = 4
_this$ = -236						; size = 4
_s$ = -232						; size = 4
_out$ = -228						; size = 64
_rtemp$ = -164						; size = 128
_m$ = -36						; size = 16
_r$ = -20						; size = 16
__$ArrayPad$ = -4					; size = 4
___$ReturnUdt$ = 8					; size = 4
?InvertFull@matrix4x4@@QBE?AV1@XZ PROC			; matrix4x4::InvertFull
; _this$ = ecx

; 557  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 384				; 00000180H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 558  : 	float	*temp, *r[4];
; 559  : 	float	rtemp[4][8];
; 560  : 	float	s, m[4];
; 561  : 	matrix4x4 out;

	lea	ecx, DWORD PTR _out$[ebp]
	call	??0matrix4x4@@QAE@XZ			; matrix4x4::matrix4x4

; 562  : 
; 563  : 	r[0] = rtemp[0];

	mov	eax, 32					; 00000020H
	imul	ecx, eax, 0
	lea	edx, DWORD PTR _rtemp$[ebp+ecx]
	mov	eax, 4
	imul	ecx, eax, 0
	mov	DWORD PTR _r$[ebp+ecx], edx

; 564  : 	r[1] = rtemp[1];

	mov	edx, 32					; 00000020H
	shl	edx, 0
	lea	eax, DWORD PTR _rtemp$[ebp+edx]
	mov	ecx, 4
	shl	ecx, 0
	mov	DWORD PTR _r$[ebp+ecx], eax

; 565  : 	r[2] = rtemp[2];

	mov	edx, 32					; 00000020H
	shl	edx, 1
	lea	eax, DWORD PTR _rtemp$[ebp+edx]
	mov	ecx, 4
	shl	ecx, 1
	mov	DWORD PTR _r$[ebp+ecx], eax

; 566  : 	r[3] = rtemp[3];

	mov	edx, 32					; 00000020H
	imul	eax, edx, 3
	lea	ecx, DWORD PTR _rtemp$[ebp+eax]
	mov	edx, 4
	imul	eax, edx, 3
	mov	DWORD PTR _r$[ebp+eax], ecx

; 567  : 
; 568  : 	r[0][0] = mat[0][0];

	mov	ecx, 16					; 00000010H
	imul	ecx, ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector4D@@QBEPBMXZ			; Vector4D::operator float const *
	mov	edx, 4
	imul	ecx, edx, 0
	mov	edx, 4
	imul	edx, edx, 0
	mov	esi, 4
	imul	esi, esi, 0
	mov	edx, DWORD PTR _r$[ebp+edx]
	mov	eax, DWORD PTR [eax+ecx]
	mov	DWORD PTR [esi+edx], eax

; 569  : 	r[0][1] = mat[1][0];

	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector4D@@QBEPBMXZ			; Vector4D::operator float const *
	mov	ecx, 4
	imul	edx, ecx, 0
	mov	ecx, 4
	imul	ecx, ecx, 0
	mov	esi, 4
	shl	esi, 0
	mov	ecx, DWORD PTR _r$[ebp+ecx]
	mov	edx, DWORD PTR [eax+edx]
	mov	DWORD PTR [esi+ecx], edx

; 570  : 	r[0][2] = mat[2][0];

	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector4D@@QBEPBMXZ			; Vector4D::operator float const *
	mov	ecx, 4
	imul	edx, ecx, 0
	mov	ecx, 4
	imul	ecx, ecx, 0
	mov	esi, 4
	shl	esi, 1
	mov	ecx, DWORD PTR _r$[ebp+ecx]
	mov	edx, DWORD PTR [eax+edx]
	mov	DWORD PTR [esi+ecx], edx

; 571  : 	r[0][3] = mat[3][0];

	mov	eax, 16					; 00000010H
	imul	ecx, eax, 3
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector4D@@QBEPBMXZ			; Vector4D::operator float const *
	mov	ecx, 4
	imul	edx, ecx, 0
	mov	ecx, 4
	imul	ecx, ecx, 0
	mov	esi, 4
	imul	esi, esi, 3
	mov	ecx, DWORD PTR _r$[ebp+ecx]
	mov	edx, DWORD PTR [eax+edx]
	mov	DWORD PTR [esi+ecx], edx

; 572  : 	r[0][4] = 1.0;

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, 4
	shl	edx, 2
	mov	eax, DWORD PTR _r$[ebp+ecx]
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [edx+eax], xmm0

; 573  : 	r[0][5] = 0.0;

	mov	ecx, 4
	imul	edx, ecx, 0
	mov	eax, 4
	imul	ecx, eax, 5
	mov	edx, DWORD PTR _r$[ebp+edx]
	xorps	xmm0, xmm0
	movss	DWORD PTR [ecx+edx], xmm0

; 574  : 	r[0][6] = 0.0;

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, 4
	imul	eax, edx, 6
	mov	ecx, DWORD PTR _r$[ebp+ecx]
	xorps	xmm0, xmm0
	movss	DWORD PTR [eax+ecx], xmm0

; 575  : 	r[0][7] = 0.0;

	mov	edx, 4
	imul	eax, edx, 0
	mov	ecx, 4
	imul	edx, ecx, 7
	mov	eax, DWORD PTR _r$[ebp+eax]
	xorps	xmm0, xmm0
	movss	DWORD PTR [edx+eax], xmm0

; 576  : 
; 577  : 	r[1][0] = mat[0][1];

	mov	ecx, 16					; 00000010H
	imul	ecx, ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector4D@@QBEPBMXZ			; Vector4D::operator float const *
	mov	edx, 4
	shl	edx, 0
	mov	ecx, 4
	shl	ecx, 0
	mov	esi, 4
	imul	esi, esi, 0
	mov	ecx, DWORD PTR _r$[ebp+ecx]
	mov	edx, DWORD PTR [eax+edx]
	mov	DWORD PTR [esi+ecx], edx

; 578  : 	r[1][1] = mat[1][1];

	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector4D@@QBEPBMXZ			; Vector4D::operator float const *
	mov	ecx, 4
	shl	ecx, 0
	mov	edx, 4
	shl	edx, 0
	mov	esi, 4
	shl	esi, 0
	mov	edx, DWORD PTR _r$[ebp+edx]
	mov	eax, DWORD PTR [eax+ecx]
	mov	DWORD PTR [esi+edx], eax

; 579  : 	r[1][2] = mat[2][1];

	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector4D@@QBEPBMXZ			; Vector4D::operator float const *
	mov	ecx, 4
	shl	ecx, 0
	mov	edx, 4
	shl	edx, 0
	mov	esi, 4
	shl	esi, 1
	mov	edx, DWORD PTR _r$[ebp+edx]
	mov	eax, DWORD PTR [eax+ecx]
	mov	DWORD PTR [esi+edx], eax

; 580  : 	r[1][3] = mat[3][1];

	mov	ecx, 16					; 00000010H
	imul	ecx, ecx, 3
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector4D@@QBEPBMXZ			; Vector4D::operator float const *
	mov	edx, 4
	shl	edx, 0
	mov	ecx, 4
	shl	ecx, 0
	mov	esi, 4
	imul	esi, esi, 3
	mov	ecx, DWORD PTR _r$[ebp+ecx]
	mov	edx, DWORD PTR [eax+edx]
	mov	DWORD PTR [esi+ecx], edx

; 581  : 	r[1][5] = 1.0;

	mov	eax, 4
	shl	eax, 0
	mov	ecx, 4
	imul	edx, ecx, 5
	mov	eax, DWORD PTR _r$[ebp+eax]
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [edx+eax], xmm0

; 582  : 	r[1][4] =	0.0;

	mov	ecx, 4
	shl	ecx, 0
	mov	edx, 4
	shl	edx, 2
	mov	eax, DWORD PTR _r$[ebp+ecx]
	xorps	xmm0, xmm0
	movss	DWORD PTR [edx+eax], xmm0

; 583  : 	r[1][6] =	0.0;

	mov	ecx, 4
	shl	ecx, 0
	mov	edx, 4
	imul	eax, edx, 6
	mov	ecx, DWORD PTR _r$[ebp+ecx]
	xorps	xmm0, xmm0
	movss	DWORD PTR [eax+ecx], xmm0

; 584  : 	r[1][7] = 0.0;

	mov	edx, 4
	shl	edx, 0
	mov	eax, 4
	imul	ecx, eax, 7
	mov	edx, DWORD PTR _r$[ebp+edx]
	xorps	xmm0, xmm0
	movss	DWORD PTR [ecx+edx], xmm0

; 585  : 
; 586  : 	r[2][0] = mat[0][2];

	mov	eax, 16					; 00000010H
	imul	ecx, eax, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector4D@@QBEPBMXZ			; Vector4D::operator float const *
	mov	ecx, 4
	shl	ecx, 1
	mov	edx, 4
	shl	edx, 1
	mov	esi, 4
	imul	esi, esi, 0
	mov	edx, DWORD PTR _r$[ebp+edx]
	mov	eax, DWORD PTR [eax+ecx]
	mov	DWORD PTR [esi+edx], eax

; 587  : 	r[2][1] = mat[1][2];

	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector4D@@QBEPBMXZ			; Vector4D::operator float const *
	mov	ecx, 4
	shl	ecx, 1
	mov	edx, 4
	shl	edx, 1
	mov	esi, 4
	shl	esi, 0
	mov	edx, DWORD PTR _r$[ebp+edx]
	mov	eax, DWORD PTR [eax+ecx]
	mov	DWORD PTR [esi+edx], eax

; 588  : 	r[2][2] = mat[2][2];

	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector4D@@QBEPBMXZ			; Vector4D::operator float const *
	mov	ecx, 4
	shl	ecx, 1
	mov	edx, 4
	shl	edx, 1
	mov	esi, 4
	shl	esi, 1
	mov	edx, DWORD PTR _r$[ebp+edx]
	mov	eax, DWORD PTR [eax+ecx]
	mov	DWORD PTR [esi+edx], eax

; 589  : 	r[2][3] = mat[3][2];

	mov	ecx, 16					; 00000010H
	imul	ecx, ecx, 3
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector4D@@QBEPBMXZ			; Vector4D::operator float const *
	mov	edx, 4
	shl	edx, 1
	mov	ecx, 4
	shl	ecx, 1
	mov	esi, 4
	imul	esi, esi, 3
	mov	ecx, DWORD PTR _r$[ebp+ecx]
	mov	edx, DWORD PTR [eax+edx]
	mov	DWORD PTR [esi+ecx], edx

; 590  : 	r[2][6] = 1.0;

	mov	eax, 4
	shl	eax, 1
	mov	ecx, 4
	imul	edx, ecx, 6
	mov	eax, DWORD PTR _r$[ebp+eax]
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [edx+eax], xmm0

; 591  : 	r[2][4] =	0.0;

	mov	ecx, 4
	shl	ecx, 1
	mov	edx, 4
	shl	edx, 2
	mov	eax, DWORD PTR _r$[ebp+ecx]
	xorps	xmm0, xmm0
	movss	DWORD PTR [edx+eax], xmm0

; 592  : 	r[2][5] =	0.0;

	mov	ecx, 4
	shl	ecx, 1
	mov	edx, 4
	imul	eax, edx, 5
	mov	ecx, DWORD PTR _r$[ebp+ecx]
	xorps	xmm0, xmm0
	movss	DWORD PTR [eax+ecx], xmm0

; 593  : 	r[2][7] = 0.0;

	mov	edx, 4
	shl	edx, 1
	mov	eax, 4
	imul	ecx, eax, 7
	mov	edx, DWORD PTR _r$[ebp+edx]
	xorps	xmm0, xmm0
	movss	DWORD PTR [ecx+edx], xmm0

; 594  : 
; 595  : 	r[3][0] = mat[0][3];

	mov	eax, 16					; 00000010H
	imul	ecx, eax, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector4D@@QBEPBMXZ			; Vector4D::operator float const *
	mov	ecx, 4
	imul	edx, ecx, 3
	mov	ecx, 4
	imul	ecx, ecx, 3
	mov	esi, 4
	imul	esi, esi, 0
	mov	ecx, DWORD PTR _r$[ebp+ecx]
	mov	edx, DWORD PTR [eax+edx]
	mov	DWORD PTR [esi+ecx], edx

; 596  : 	r[3][1] = mat[1][3];

	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector4D@@QBEPBMXZ			; Vector4D::operator float const *
	mov	ecx, 4
	imul	edx, ecx, 3
	mov	ecx, 4
	imul	ecx, ecx, 3
	mov	esi, 4
	shl	esi, 0
	mov	ecx, DWORD PTR _r$[ebp+ecx]
	mov	edx, DWORD PTR [eax+edx]
	mov	DWORD PTR [esi+ecx], edx

; 597  : 	r[3][2] = mat[2][3];

	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector4D@@QBEPBMXZ			; Vector4D::operator float const *
	mov	ecx, 4
	imul	edx, ecx, 3
	mov	ecx, 4
	imul	ecx, ecx, 3
	mov	esi, 4
	shl	esi, 1
	mov	ecx, DWORD PTR _r$[ebp+ecx]
	mov	edx, DWORD PTR [eax+edx]
	mov	DWORD PTR [esi+ecx], edx

; 598  : 	r[3][3] = mat[3][3];

	mov	eax, 16					; 00000010H
	imul	ecx, eax, 3
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector4D@@QBEPBMXZ			; Vector4D::operator float const *
	mov	ecx, 4
	imul	edx, ecx, 3
	mov	ecx, 4
	imul	ecx, ecx, 3
	mov	esi, 4
	imul	esi, esi, 3
	mov	ecx, DWORD PTR _r$[ebp+ecx]
	mov	edx, DWORD PTR [eax+edx]
	mov	DWORD PTR [esi+ecx], edx

; 599  : 	r[3][4] =	0.0;

	mov	eax, 4
	imul	ecx, eax, 3
	mov	edx, 4
	shl	edx, 2
	mov	eax, DWORD PTR _r$[ebp+ecx]
	xorps	xmm0, xmm0
	movss	DWORD PTR [edx+eax], xmm0

; 600  : 	r[3][5] =	0.0;

	mov	ecx, 4
	imul	edx, ecx, 3
	mov	eax, 4
	imul	ecx, eax, 5
	mov	edx, DWORD PTR _r$[ebp+edx]
	xorps	xmm0, xmm0
	movss	DWORD PTR [ecx+edx], xmm0

; 601  : 	r[3][6] = 0.0;

	mov	eax, 4
	imul	ecx, eax, 3
	mov	edx, 4
	imul	eax, edx, 6
	mov	ecx, DWORD PTR _r$[ebp+ecx]
	xorps	xmm0, xmm0
	movss	DWORD PTR [eax+ecx], xmm0

; 602  : 	r[3][7] = 1.0;	

	mov	edx, 4
	imul	eax, edx, 3
	mov	ecx, 4
	imul	edx, ecx, 7
	mov	eax, DWORD PTR _r$[ebp+eax]
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [edx+eax], xmm0

; 603  : 
; 604  : 	if( fabs( r[3][0] ) > fabs( r[2][0] ))

	mov	ecx, 4
	imul	edx, ecx, 3
	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _r$[ebp+edx]
	cvtss2sd xmm0, DWORD PTR [edx+ecx]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	call	_fabs
	add	esp, 8
	fstp	QWORD PTR tv2196[ebp]
	movsd	xmm0, QWORD PTR tv2196[ebp]
	mov	eax, 4
	shl	eax, 1
	mov	ecx, 4
	imul	edx, ecx, 0
	mov	eax, DWORD PTR _r$[ebp+eax]
	cvtss2sd xmm1, DWORD PTR [eax+edx]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm1
	movsd	QWORD PTR tv3083[ebp], xmm0
	call	_fabs
	add	esp, 8
	fstp	QWORD PTR tv2203[ebp]
	movsd	xmm0, QWORD PTR tv3083[ebp]
	comisd	xmm0, QWORD PTR tv2203[ebp]
	jbe	SHORT $LN2@InvertFull

; 605  : 	{
; 606  : 		temp = r[3];

	mov	ecx, 4
	imul	edx, ecx, 3
	mov	eax, DWORD PTR _r$[ebp+edx]
	mov	DWORD PTR _temp$[ebp], eax

; 607  : 		r[3] = r[2];

	mov	ecx, 4
	shl	ecx, 1
	mov	edx, 4
	imul	eax, edx, 3
	mov	ecx, DWORD PTR _r$[ebp+ecx]
	mov	DWORD PTR _r$[ebp+eax], ecx

; 608  : 		r[2] = temp;

	mov	edx, 4
	shl	edx, 1
	mov	eax, DWORD PTR _temp$[ebp]
	mov	DWORD PTR _r$[ebp+edx], eax
$LN2@InvertFull:

; 609  : 	}
; 610  : 
; 611  : 	if( fabs( r[2][0] ) > fabs( r[1][0] ))

	mov	ecx, 4
	shl	ecx, 1
	mov	edx, 4
	imul	eax, edx, 0
	mov	ecx, DWORD PTR _r$[ebp+ecx]
	cvtss2sd xmm0, DWORD PTR [ecx+eax]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	call	_fabs
	add	esp, 8
	fstp	QWORD PTR tv2217[ebp]
	movsd	xmm0, QWORD PTR tv2217[ebp]
	mov	edx, 4
	shl	edx, 0
	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _r$[ebp+edx]
	cvtss2sd xmm1, DWORD PTR [edx+ecx]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm1
	movsd	QWORD PTR tv3085[ebp], xmm0
	call	_fabs
	add	esp, 8
	fstp	QWORD PTR tv2224[ebp]
	movsd	xmm0, QWORD PTR tv3085[ebp]
	comisd	xmm0, QWORD PTR tv2224[ebp]
	jbe	SHORT $LN3@InvertFull

; 612  : 	{
; 613  : 		temp = r[2];

	mov	eax, 4
	shl	eax, 1
	mov	ecx, DWORD PTR _r$[ebp+eax]
	mov	DWORD PTR _temp$[ebp], ecx

; 614  : 		r[2] = r[1];

	mov	edx, 4
	shl	edx, 0
	mov	eax, 4
	shl	eax, 1
	mov	ecx, DWORD PTR _r$[ebp+edx]
	mov	DWORD PTR _r$[ebp+eax], ecx

; 615  : 		r[1] = temp;

	mov	edx, 4
	shl	edx, 0
	mov	eax, DWORD PTR _temp$[ebp]
	mov	DWORD PTR _r$[ebp+edx], eax
$LN3@InvertFull:

; 616  : 	}
; 617  : 
; 618  : 	if( fabs( r[1][0] ) > fabs( r[0][0] ))

	mov	ecx, 4
	shl	ecx, 0
	mov	edx, 4
	imul	eax, edx, 0
	mov	ecx, DWORD PTR _r$[ebp+ecx]
	cvtss2sd xmm0, DWORD PTR [ecx+eax]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	call	_fabs
	add	esp, 8
	fstp	QWORD PTR tv2238[ebp]
	movsd	xmm0, QWORD PTR tv2238[ebp]
	mov	edx, 4
	imul	eax, edx, 0
	mov	ecx, 4
	imul	edx, ecx, 0
	mov	eax, DWORD PTR _r$[ebp+eax]
	cvtss2sd xmm1, DWORD PTR [eax+edx]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm1
	movsd	QWORD PTR tv3087[ebp], xmm0
	call	_fabs
	add	esp, 8
	fstp	QWORD PTR tv2245[ebp]
	movsd	xmm0, QWORD PTR tv3087[ebp]
	comisd	xmm0, QWORD PTR tv2245[ebp]
	jbe	SHORT $LN4@InvertFull

; 619  : 	{
; 620  : 		temp = r[1];

	mov	ecx, 4
	shl	ecx, 0
	mov	edx, DWORD PTR _r$[ebp+ecx]
	mov	DWORD PTR _temp$[ebp], edx

; 621  : 		r[1] = r[0];

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, 4
	shl	edx, 0
	mov	eax, DWORD PTR _r$[ebp+ecx]
	mov	DWORD PTR _r$[ebp+edx], eax

; 622  : 		r[0] = temp;

	mov	ecx, 4
	imul	edx, ecx, 0
	mov	eax, DWORD PTR _temp$[ebp]
	mov	DWORD PTR _r$[ebp+edx], eax
$LN4@InvertFull:

; 623  : 	}
; 624  : 
; 625  : 	if( r[0][0] )

	mov	ecx, 4
	imul	edx, ecx, 0
	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _r$[ebp+edx]
	movss	xmm0, DWORD PTR [ecx+edx]
	ucomiss	xmm0, DWORD PTR __real@00000000
	lahf
	test	ah, 68					; 00000044H
	jnp	$LN19@InvertFull

; 626  : 	{
; 627  : 		m[1] = r[1][0] / r[0][0];

	mov	eax, 4
	shl	eax, 0
	mov	ecx, 4
	imul	edx, ecx, 0
	mov	eax, DWORD PTR _r$[ebp+eax]
	mov	ecx, 4
	imul	ecx, ecx, 0
	mov	esi, 4
	imul	esi, esi, 0
	mov	ecx, DWORD PTR _r$[ebp+ecx]
	movss	xmm0, DWORD PTR [eax+edx]
	divss	xmm0, DWORD PTR [ecx+esi]
	mov	edx, 4
	shl	edx, 0
	movss	DWORD PTR _m$[ebp+edx], xmm0

; 628  : 		m[2] = r[2][0] / r[0][0];

	mov	eax, 4
	shl	eax, 1
	mov	ecx, 4
	imul	edx, ecx, 0
	mov	eax, DWORD PTR _r$[ebp+eax]
	mov	ecx, 4
	imul	ecx, ecx, 0
	mov	esi, 4
	imul	esi, esi, 0
	mov	ecx, DWORD PTR _r$[ebp+ecx]
	movss	xmm0, DWORD PTR [eax+edx]
	divss	xmm0, DWORD PTR [ecx+esi]
	mov	edx, 4
	shl	edx, 1
	movss	DWORD PTR _m$[ebp+edx], xmm0

; 629  : 		m[3] = r[3][0] / r[0][0];

	mov	eax, 4
	imul	ecx, eax, 3
	mov	edx, 4
	imul	eax, edx, 0
	mov	ecx, DWORD PTR _r$[ebp+ecx]
	mov	edx, 4
	imul	edx, edx, 0
	mov	esi, 4
	imul	esi, esi, 0
	mov	edx, DWORD PTR _r$[ebp+edx]
	movss	xmm0, DWORD PTR [ecx+eax]
	divss	xmm0, DWORD PTR [edx+esi]
	mov	eax, 4
	imul	ecx, eax, 3
	movss	DWORD PTR _m$[ebp+ecx], xmm0

; 630  : 
; 631  : 		s = r[0][1];

	mov	edx, 4
	imul	eax, edx, 0
	mov	ecx, 4
	shl	ecx, 0
	mov	edx, DWORD PTR _r$[ebp+eax]
	movss	xmm0, DWORD PTR [ecx+edx]
	movss	DWORD PTR _s$[ebp], xmm0

; 632  : 		r[1][1] -= m[1] * s;

	mov	eax, 4
	shl	eax, 0
	mov	ecx, 4
	shl	ecx, 0
	mov	edx, DWORD PTR _r$[ebp+eax]
	mov	eax, 4
	shl	eax, 0
	movss	xmm0, DWORD PTR _m$[ebp+eax]
	mulss	xmm0, DWORD PTR _s$[ebp]
	movss	xmm1, DWORD PTR [edx+ecx]
	subss	xmm1, xmm0
	mov	ecx, 4
	shl	ecx, 0
	mov	edx, 4
	shl	edx, 0
	mov	eax, DWORD PTR _r$[ebp+ecx]
	movss	DWORD PTR [edx+eax], xmm1

; 633  : 		r[2][1] -= m[2] * s;

	mov	ecx, 4
	shl	ecx, 1
	mov	edx, 4
	shl	edx, 0
	mov	eax, DWORD PTR _r$[ebp+ecx]
	mov	ecx, 4
	shl	ecx, 1
	movss	xmm0, DWORD PTR _m$[ebp+ecx]
	mulss	xmm0, DWORD PTR _s$[ebp]
	movss	xmm1, DWORD PTR [eax+edx]
	subss	xmm1, xmm0
	mov	edx, 4
	shl	edx, 1
	mov	eax, 4
	shl	eax, 0
	mov	ecx, DWORD PTR _r$[ebp+edx]
	movss	DWORD PTR [eax+ecx], xmm1

; 634  : 		r[3][1] -= m[3] * s;

	mov	edx, 4
	imul	eax, edx, 3
	mov	ecx, 4
	shl	ecx, 0
	mov	edx, DWORD PTR _r$[ebp+eax]
	mov	eax, 4
	imul	eax, eax, 3
	movss	xmm0, DWORD PTR _m$[ebp+eax]
	mulss	xmm0, DWORD PTR _s$[ebp]
	movss	xmm1, DWORD PTR [edx+ecx]
	subss	xmm1, xmm0
	mov	ecx, 4
	imul	edx, ecx, 3
	mov	eax, 4
	shl	eax, 0
	mov	ecx, DWORD PTR _r$[ebp+edx]
	movss	DWORD PTR [eax+ecx], xmm1

; 635  : 
; 636  : 		s = r[0][2];

	mov	edx, 4
	imul	eax, edx, 0
	mov	ecx, 4
	shl	ecx, 1
	mov	edx, DWORD PTR _r$[ebp+eax]
	movss	xmm0, DWORD PTR [ecx+edx]
	movss	DWORD PTR _s$[ebp], xmm0

; 637  : 		r[1][2] -= m[1] * s;

	mov	eax, 4
	shl	eax, 0
	mov	ecx, 4
	shl	ecx, 1
	mov	edx, DWORD PTR _r$[ebp+eax]
	mov	eax, 4
	shl	eax, 0
	movss	xmm0, DWORD PTR _m$[ebp+eax]
	mulss	xmm0, DWORD PTR _s$[ebp]
	movss	xmm1, DWORD PTR [edx+ecx]
	subss	xmm1, xmm0
	mov	ecx, 4
	shl	ecx, 0
	mov	edx, 4
	shl	edx, 1
	mov	eax, DWORD PTR _r$[ebp+ecx]
	movss	DWORD PTR [edx+eax], xmm1

; 638  : 		r[2][2] -= m[2] * s;

	mov	ecx, 4
	shl	ecx, 1
	mov	edx, 4
	shl	edx, 1
	mov	eax, DWORD PTR _r$[ebp+ecx]
	mov	ecx, 4
	shl	ecx, 1
	movss	xmm0, DWORD PTR _m$[ebp+ecx]
	mulss	xmm0, DWORD PTR _s$[ebp]
	movss	xmm1, DWORD PTR [eax+edx]
	subss	xmm1, xmm0
	mov	edx, 4
	shl	edx, 1
	mov	eax, 4
	shl	eax, 1
	mov	ecx, DWORD PTR _r$[ebp+edx]
	movss	DWORD PTR [eax+ecx], xmm1

; 639  : 		r[3][2] -= m[3] * s;

	mov	edx, 4
	imul	eax, edx, 3
	mov	ecx, 4
	shl	ecx, 1
	mov	edx, DWORD PTR _r$[ebp+eax]
	mov	eax, 4
	imul	eax, eax, 3
	movss	xmm0, DWORD PTR _m$[ebp+eax]
	mulss	xmm0, DWORD PTR _s$[ebp]
	movss	xmm1, DWORD PTR [edx+ecx]
	subss	xmm1, xmm0
	mov	ecx, 4
	imul	edx, ecx, 3
	mov	eax, 4
	shl	eax, 1
	mov	ecx, DWORD PTR _r$[ebp+edx]
	movss	DWORD PTR [eax+ecx], xmm1

; 640  : 
; 641  : 		s = r[0][3];

	mov	edx, 4
	imul	eax, edx, 0
	mov	ecx, 4
	imul	edx, ecx, 3
	mov	eax, DWORD PTR _r$[ebp+eax]
	movss	xmm0, DWORD PTR [edx+eax]
	movss	DWORD PTR _s$[ebp], xmm0

; 642  : 		r[1][3] -= m[1] * s;

	mov	ecx, 4
	shl	ecx, 0
	mov	edx, 4
	imul	eax, edx, 3
	mov	ecx, DWORD PTR _r$[ebp+ecx]
	mov	edx, 4
	shl	edx, 0
	movss	xmm0, DWORD PTR _m$[ebp+edx]
	mulss	xmm0, DWORD PTR _s$[ebp]
	movss	xmm1, DWORD PTR [ecx+eax]
	subss	xmm1, xmm0
	mov	eax, 4
	shl	eax, 0
	mov	ecx, 4
	imul	edx, ecx, 3
	mov	eax, DWORD PTR _r$[ebp+eax]
	movss	DWORD PTR [edx+eax], xmm1

; 643  : 		r[2][3] -= m[2] * s;

	mov	ecx, 4
	shl	ecx, 1
	mov	edx, 4
	imul	eax, edx, 3
	mov	ecx, DWORD PTR _r$[ebp+ecx]
	mov	edx, 4
	shl	edx, 1
	movss	xmm0, DWORD PTR _m$[ebp+edx]
	mulss	xmm0, DWORD PTR _s$[ebp]
	movss	xmm1, DWORD PTR [ecx+eax]
	subss	xmm1, xmm0
	mov	eax, 4
	shl	eax, 1
	mov	ecx, 4
	imul	edx, ecx, 3
	mov	eax, DWORD PTR _r$[ebp+eax]
	movss	DWORD PTR [edx+eax], xmm1

; 644  : 		r[3][3] -= m[3] * s;

	mov	ecx, 4
	imul	edx, ecx, 3
	mov	eax, 4
	imul	ecx, eax, 3
	mov	edx, DWORD PTR _r$[ebp+edx]
	mov	eax, 4
	imul	eax, eax, 3
	movss	xmm0, DWORD PTR _m$[ebp+eax]
	mulss	xmm0, DWORD PTR _s$[ebp]
	movss	xmm1, DWORD PTR [edx+ecx]
	subss	xmm1, xmm0
	mov	ecx, 4
	imul	edx, ecx, 3
	mov	eax, 4
	imul	ecx, eax, 3
	mov	edx, DWORD PTR _r$[ebp+edx]
	movss	DWORD PTR [ecx+edx], xmm1

; 645  : 
; 646  : 		s = r[0][4];

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, 4
	shl	edx, 2
	mov	eax, DWORD PTR _r$[ebp+ecx]
	movss	xmm0, DWORD PTR [edx+eax]
	movss	DWORD PTR _s$[ebp], xmm0

; 647  : 		if( s )

	movss	xmm0, DWORD PTR _s$[ebp]
	ucomiss	xmm0, DWORD PTR __real@00000000
	lahf
	test	ah, 68					; 00000044H
	jnp	$LN6@InvertFull

; 648  : 		{
; 649  : 			r[1][4] -= m[1] * s;

	mov	ecx, 4
	shl	ecx, 0
	mov	edx, 4
	shl	edx, 2
	mov	eax, DWORD PTR _r$[ebp+ecx]
	mov	ecx, 4
	shl	ecx, 0
	movss	xmm0, DWORD PTR _m$[ebp+ecx]
	mulss	xmm0, DWORD PTR _s$[ebp]
	movss	xmm1, DWORD PTR [eax+edx]
	subss	xmm1, xmm0
	mov	edx, 4
	shl	edx, 0
	mov	eax, 4
	shl	eax, 2
	mov	ecx, DWORD PTR _r$[ebp+edx]
	movss	DWORD PTR [eax+ecx], xmm1

; 650  : 			r[2][4] -= m[2] * s;

	mov	edx, 4
	shl	edx, 1
	mov	eax, 4
	shl	eax, 2
	mov	ecx, DWORD PTR _r$[ebp+edx]
	mov	edx, 4
	shl	edx, 1
	movss	xmm0, DWORD PTR _m$[ebp+edx]
	mulss	xmm0, DWORD PTR _s$[ebp]
	movss	xmm1, DWORD PTR [ecx+eax]
	subss	xmm1, xmm0
	mov	eax, 4
	shl	eax, 1
	mov	ecx, 4
	shl	ecx, 2
	mov	edx, DWORD PTR _r$[ebp+eax]
	movss	DWORD PTR [ecx+edx], xmm1

; 651  : 			r[3][4] -= m[3] * s;

	mov	eax, 4
	imul	ecx, eax, 3
	mov	edx, 4
	shl	edx, 2
	mov	eax, DWORD PTR _r$[ebp+ecx]
	mov	ecx, 4
	imul	ecx, ecx, 3
	movss	xmm0, DWORD PTR _m$[ebp+ecx]
	mulss	xmm0, DWORD PTR _s$[ebp]
	movss	xmm1, DWORD PTR [eax+edx]
	subss	xmm1, xmm0
	mov	edx, 4
	imul	eax, edx, 3
	mov	ecx, 4
	shl	ecx, 2
	mov	edx, DWORD PTR _r$[ebp+eax]
	movss	DWORD PTR [ecx+edx], xmm1
$LN6@InvertFull:

; 652  : 		}
; 653  : 
; 654  : 		s = r[0][5];

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, 4
	imul	eax, edx, 5
	mov	ecx, DWORD PTR _r$[ebp+ecx]
	movss	xmm0, DWORD PTR [eax+ecx]
	movss	DWORD PTR _s$[ebp], xmm0

; 655  : 		if( s )

	movss	xmm0, DWORD PTR _s$[ebp]
	ucomiss	xmm0, DWORD PTR __real@00000000
	lahf
	test	ah, 68					; 00000044H
	jnp	$LN7@InvertFull

; 656  : 		{
; 657  : 			r[1][5] -= m[1] * s;

	mov	edx, 4
	shl	edx, 0
	mov	eax, 4
	imul	ecx, eax, 5
	mov	edx, DWORD PTR _r$[ebp+edx]
	mov	eax, 4
	shl	eax, 0
	movss	xmm0, DWORD PTR _m$[ebp+eax]
	mulss	xmm0, DWORD PTR _s$[ebp]
	movss	xmm1, DWORD PTR [edx+ecx]
	subss	xmm1, xmm0
	mov	ecx, 4
	shl	ecx, 0
	mov	edx, 4
	imul	eax, edx, 5
	mov	ecx, DWORD PTR _r$[ebp+ecx]
	movss	DWORD PTR [eax+ecx], xmm1

; 658  : 			r[2][5] -= m[2] * s;

	mov	edx, 4
	shl	edx, 1
	mov	eax, 4
	imul	ecx, eax, 5
	mov	edx, DWORD PTR _r$[ebp+edx]
	mov	eax, 4
	shl	eax, 1
	movss	xmm0, DWORD PTR _m$[ebp+eax]
	mulss	xmm0, DWORD PTR _s$[ebp]
	movss	xmm1, DWORD PTR [edx+ecx]
	subss	xmm1, xmm0
	mov	ecx, 4
	shl	ecx, 1
	mov	edx, 4
	imul	eax, edx, 5
	mov	ecx, DWORD PTR _r$[ebp+ecx]
	movss	DWORD PTR [eax+ecx], xmm1

; 659  : 			r[3][5] -= m[3] * s;

	mov	edx, 4
	imul	eax, edx, 3
	mov	ecx, 4
	imul	edx, ecx, 5
	mov	eax, DWORD PTR _r$[ebp+eax]
	mov	ecx, 4
	imul	ecx, ecx, 3
	movss	xmm0, DWORD PTR _m$[ebp+ecx]
	mulss	xmm0, DWORD PTR _s$[ebp]
	movss	xmm1, DWORD PTR [eax+edx]
	subss	xmm1, xmm0
	mov	edx, 4
	imul	eax, edx, 3
	mov	ecx, 4
	imul	edx, ecx, 5
	mov	eax, DWORD PTR _r$[ebp+eax]
	movss	DWORD PTR [edx+eax], xmm1
$LN7@InvertFull:

; 660  : 		}
; 661  : 
; 662  : 		s = r[0][6];

	mov	ecx, 4
	imul	edx, ecx, 0
	mov	eax, 4
	imul	ecx, eax, 6
	mov	edx, DWORD PTR _r$[ebp+edx]
	movss	xmm0, DWORD PTR [ecx+edx]
	movss	DWORD PTR _s$[ebp], xmm0

; 663  : 		if( s )

	movss	xmm0, DWORD PTR _s$[ebp]
	ucomiss	xmm0, DWORD PTR __real@00000000
	lahf
	test	ah, 68					; 00000044H
	jnp	$LN8@InvertFull

; 664  : 		{
; 665  : 			r[1][6] -= m[1] * s;

	mov	eax, 4
	shl	eax, 0
	mov	ecx, 4
	imul	edx, ecx, 6
	mov	eax, DWORD PTR _r$[ebp+eax]
	mov	ecx, 4
	shl	ecx, 0
	movss	xmm0, DWORD PTR _m$[ebp+ecx]
	mulss	xmm0, DWORD PTR _s$[ebp]
	movss	xmm1, DWORD PTR [eax+edx]
	subss	xmm1, xmm0
	mov	edx, 4
	shl	edx, 0
	mov	eax, 4
	imul	ecx, eax, 6
	mov	edx, DWORD PTR _r$[ebp+edx]
	movss	DWORD PTR [ecx+edx], xmm1

; 666  : 			r[2][6] -= m[2] * s;

	mov	eax, 4
	shl	eax, 1
	mov	ecx, 4
	imul	edx, ecx, 6
	mov	eax, DWORD PTR _r$[ebp+eax]
	mov	ecx, 4
	shl	ecx, 1
	movss	xmm0, DWORD PTR _m$[ebp+ecx]
	mulss	xmm0, DWORD PTR _s$[ebp]
	movss	xmm1, DWORD PTR [eax+edx]
	subss	xmm1, xmm0
	mov	edx, 4
	shl	edx, 1
	mov	eax, 4
	imul	ecx, eax, 6
	mov	edx, DWORD PTR _r$[ebp+edx]
	movss	DWORD PTR [ecx+edx], xmm1

; 667  : 			r[3][6] -= m[3] * s;

	mov	eax, 4
	imul	ecx, eax, 3
	mov	edx, 4
	imul	eax, edx, 6
	mov	ecx, DWORD PTR _r$[ebp+ecx]
	mov	edx, 4
	imul	edx, edx, 3
	movss	xmm0, DWORD PTR _m$[ebp+edx]
	mulss	xmm0, DWORD PTR _s$[ebp]
	movss	xmm1, DWORD PTR [ecx+eax]
	subss	xmm1, xmm0
	mov	eax, 4
	imul	ecx, eax, 3
	mov	edx, 4
	imul	eax, edx, 6
	mov	ecx, DWORD PTR _r$[ebp+ecx]
	movss	DWORD PTR [eax+ecx], xmm1
$LN8@InvertFull:

; 668  : 		}
; 669  : 
; 670  : 		s = r[0][7];

	mov	edx, 4
	imul	eax, edx, 0
	mov	ecx, 4
	imul	edx, ecx, 7
	mov	eax, DWORD PTR _r$[ebp+eax]
	movss	xmm0, DWORD PTR [edx+eax]
	movss	DWORD PTR _s$[ebp], xmm0

; 671  : 		if( s )

	movss	xmm0, DWORD PTR _s$[ebp]
	ucomiss	xmm0, DWORD PTR __real@00000000
	lahf
	test	ah, 68					; 00000044H
	jnp	$LN9@InvertFull

; 672  : 		{
; 673  : 			r[1][7] -= m[1] * s;

	mov	ecx, 4
	shl	ecx, 0
	mov	edx, 4
	imul	eax, edx, 7
	mov	ecx, DWORD PTR _r$[ebp+ecx]
	mov	edx, 4
	shl	edx, 0
	movss	xmm0, DWORD PTR _m$[ebp+edx]
	mulss	xmm0, DWORD PTR _s$[ebp]
	movss	xmm1, DWORD PTR [ecx+eax]
	subss	xmm1, xmm0
	mov	eax, 4
	shl	eax, 0
	mov	ecx, 4
	imul	edx, ecx, 7
	mov	eax, DWORD PTR _r$[ebp+eax]
	movss	DWORD PTR [edx+eax], xmm1

; 674  : 			r[2][7] -= m[2] * s;

	mov	ecx, 4
	shl	ecx, 1
	mov	edx, 4
	imul	eax, edx, 7
	mov	ecx, DWORD PTR _r$[ebp+ecx]
	mov	edx, 4
	shl	edx, 1
	movss	xmm0, DWORD PTR _m$[ebp+edx]
	mulss	xmm0, DWORD PTR _s$[ebp]
	movss	xmm1, DWORD PTR [ecx+eax]
	subss	xmm1, xmm0
	mov	eax, 4
	shl	eax, 1
	mov	ecx, 4
	imul	edx, ecx, 7
	mov	eax, DWORD PTR _r$[ebp+eax]
	movss	DWORD PTR [edx+eax], xmm1

; 675  : 			r[3][7] -= m[3] * s;

	mov	ecx, 4
	imul	edx, ecx, 3
	mov	eax, 4
	imul	ecx, eax, 7
	mov	edx, DWORD PTR _r$[ebp+edx]
	mov	eax, 4
	imul	eax, eax, 3
	movss	xmm0, DWORD PTR _m$[ebp+eax]
	mulss	xmm0, DWORD PTR _s$[ebp]
	movss	xmm1, DWORD PTR [edx+ecx]
	subss	xmm1, xmm0
	mov	ecx, 4
	imul	edx, ecx, 3
	mov	eax, 4
	imul	ecx, eax, 7
	mov	edx, DWORD PTR _r$[ebp+edx]
	movss	DWORD PTR [ecx+edx], xmm1
$LN9@InvertFull:

; 676  : 		}
; 677  : 
; 678  : 		if( fabs( r[3][1] ) > fabs( r[2][1] ))

	mov	eax, 4
	imul	ecx, eax, 3
	mov	edx, 4
	shl	edx, 0
	mov	eax, DWORD PTR _r$[ebp+ecx]
	cvtss2sd xmm0, DWORD PTR [eax+edx]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	call	_fabs
	add	esp, 8
	fstp	QWORD PTR tv2462[ebp]
	movsd	xmm0, QWORD PTR tv2462[ebp]
	mov	ecx, 4
	shl	ecx, 1
	mov	edx, 4
	shl	edx, 0
	mov	eax, DWORD PTR _r$[ebp+ecx]
	cvtss2sd xmm1, DWORD PTR [eax+edx]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm1
	movsd	QWORD PTR tv3089[ebp], xmm0
	call	_fabs
	add	esp, 8
	fstp	QWORD PTR tv2469[ebp]
	movsd	xmm0, QWORD PTR tv3089[ebp]
	comisd	xmm0, QWORD PTR tv2469[ebp]
	jbe	SHORT $LN10@InvertFull

; 679  : 		{
; 680  : 			temp = r[3];

	mov	ecx, 4
	imul	edx, ecx, 3
	mov	eax, DWORD PTR _r$[ebp+edx]
	mov	DWORD PTR _temp$[ebp], eax

; 681  : 			r[3] = r[2];

	mov	ecx, 4
	shl	ecx, 1
	mov	edx, 4
	imul	eax, edx, 3
	mov	ecx, DWORD PTR _r$[ebp+ecx]
	mov	DWORD PTR _r$[ebp+eax], ecx

; 682  : 			r[2] = temp;

	mov	edx, 4
	shl	edx, 1
	mov	eax, DWORD PTR _temp$[ebp]
	mov	DWORD PTR _r$[ebp+edx], eax
$LN10@InvertFull:

; 683  : 		}
; 684  : 		if( fabs( r[2][1] ) > fabs( r[1][1] ))

	mov	ecx, 4
	shl	ecx, 1
	mov	edx, 4
	shl	edx, 0
	mov	eax, DWORD PTR _r$[ebp+ecx]
	cvtss2sd xmm0, DWORD PTR [eax+edx]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	call	_fabs
	add	esp, 8
	fstp	QWORD PTR tv2483[ebp]
	movsd	xmm0, QWORD PTR tv2483[ebp]
	mov	ecx, 4
	shl	ecx, 0
	mov	edx, 4
	shl	edx, 0
	mov	eax, DWORD PTR _r$[ebp+ecx]
	cvtss2sd xmm1, DWORD PTR [eax+edx]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm1
	movsd	QWORD PTR tv3091[ebp], xmm0
	call	_fabs
	add	esp, 8
	fstp	QWORD PTR tv2490[ebp]
	movsd	xmm0, QWORD PTR tv3091[ebp]
	comisd	xmm0, QWORD PTR tv2490[ebp]
	jbe	SHORT $LN11@InvertFull

; 685  : 		{
; 686  : 			temp = r[2];

	mov	ecx, 4
	shl	ecx, 1
	mov	edx, DWORD PTR _r$[ebp+ecx]
	mov	DWORD PTR _temp$[ebp], edx

; 687  : 			r[2] = r[1];

	mov	eax, 4
	shl	eax, 0
	mov	ecx, 4
	shl	ecx, 1
	mov	edx, DWORD PTR _r$[ebp+eax]
	mov	DWORD PTR _r$[ebp+ecx], edx

; 688  : 			r[1] = temp;

	mov	eax, 4
	shl	eax, 0
	mov	ecx, DWORD PTR _temp$[ebp]
	mov	DWORD PTR _r$[ebp+eax], ecx
$LN11@InvertFull:

; 689  : 		}
; 690  : 
; 691  : 		if( r[1][1] )

	mov	edx, 4
	shl	edx, 0
	mov	eax, 4
	shl	eax, 0
	mov	ecx, DWORD PTR _r$[ebp+edx]
	movss	xmm0, DWORD PTR [eax+ecx]
	ucomiss	xmm0, DWORD PTR __real@00000000
	lahf
	test	ah, 68					; 00000044H
	jnp	$LN19@InvertFull

; 692  : 		{
; 693  : 			m[2] = r[2][1] / r[1][1];

	mov	edx, 4
	shl	edx, 1
	mov	eax, 4
	shl	eax, 0
	mov	ecx, DWORD PTR _r$[ebp+edx]
	mov	edx, 4
	shl	edx, 0
	mov	esi, 4
	shl	esi, 0
	mov	edx, DWORD PTR _r$[ebp+edx]
	movss	xmm0, DWORD PTR [ecx+eax]
	divss	xmm0, DWORD PTR [edx+esi]
	mov	eax, 4
	shl	eax, 1
	movss	DWORD PTR _m$[ebp+eax], xmm0

; 694  : 			m[3] = r[3][1] / r[1][1];

	mov	ecx, 4
	imul	edx, ecx, 3
	mov	eax, 4
	shl	eax, 0
	mov	ecx, DWORD PTR _r$[ebp+edx]
	mov	edx, 4
	shl	edx, 0
	mov	esi, 4
	shl	esi, 0
	mov	edx, DWORD PTR _r$[ebp+edx]
	movss	xmm0, DWORD PTR [ecx+eax]
	divss	xmm0, DWORD PTR [edx+esi]
	mov	eax, 4
	imul	ecx, eax, 3
	movss	DWORD PTR _m$[ebp+ecx], xmm0

; 695  : 			r[2][2] -= m[2] * r[1][2];

	mov	edx, 4
	shl	edx, 1
	mov	eax, 4
	shl	eax, 1
	mov	ecx, DWORD PTR _r$[ebp+edx]
	mov	edx, 4
	shl	edx, 1
	mov	esi, 4
	shl	esi, 0
	mov	edi, 4
	shl	edi, 1
	mov	esi, DWORD PTR _r$[ebp+esi]
	movss	xmm0, DWORD PTR _m$[ebp+edx]
	mulss	xmm0, DWORD PTR [esi+edi]
	movss	xmm1, DWORD PTR [ecx+eax]
	subss	xmm1, xmm0
	mov	eax, 4
	shl	eax, 1
	mov	ecx, 4
	shl	ecx, 1
	mov	edx, DWORD PTR _r$[ebp+eax]
	movss	DWORD PTR [ecx+edx], xmm1

; 696  : 			r[3][2] -= m[3] * r[1][2];

	mov	eax, 4
	imul	ecx, eax, 3
	mov	edx, 4
	shl	edx, 1
	mov	eax, DWORD PTR _r$[ebp+ecx]
	mov	ecx, 4
	imul	ecx, ecx, 3
	mov	esi, 4
	shl	esi, 0
	mov	edi, 4
	shl	edi, 1
	mov	esi, DWORD PTR _r$[ebp+esi]
	movss	xmm0, DWORD PTR _m$[ebp+ecx]
	mulss	xmm0, DWORD PTR [esi+edi]
	movss	xmm1, DWORD PTR [eax+edx]
	subss	xmm1, xmm0
	mov	edx, 4
	imul	eax, edx, 3
	mov	ecx, 4
	shl	ecx, 1
	mov	edx, DWORD PTR _r$[ebp+eax]
	movss	DWORD PTR [ecx+edx], xmm1

; 697  : 			r[2][3] -= m[2] * r[1][3];

	mov	eax, 4
	shl	eax, 1
	mov	ecx, 4
	imul	edx, ecx, 3
	mov	eax, DWORD PTR _r$[ebp+eax]
	mov	ecx, 4
	shl	ecx, 1
	mov	esi, 4
	shl	esi, 0
	mov	edi, 4
	imul	edi, edi, 3
	mov	esi, DWORD PTR _r$[ebp+esi]
	movss	xmm0, DWORD PTR _m$[ebp+ecx]
	mulss	xmm0, DWORD PTR [esi+edi]
	movss	xmm1, DWORD PTR [eax+edx]
	subss	xmm1, xmm0
	mov	edx, 4
	shl	edx, 1
	mov	eax, 4
	imul	ecx, eax, 3
	mov	edx, DWORD PTR _r$[ebp+edx]
	movss	DWORD PTR [ecx+edx], xmm1

; 698  : 			r[3][3] -= m[3] * r[1][3];

	mov	eax, 4
	imul	ecx, eax, 3
	mov	edx, 4
	imul	eax, edx, 3
	mov	ecx, DWORD PTR _r$[ebp+ecx]
	mov	edx, 4
	imul	edx, edx, 3
	mov	esi, 4
	shl	esi, 0
	mov	edi, 4
	imul	edi, edi, 3
	mov	esi, DWORD PTR _r$[ebp+esi]
	movss	xmm0, DWORD PTR _m$[ebp+edx]
	mulss	xmm0, DWORD PTR [esi+edi]
	movss	xmm1, DWORD PTR [ecx+eax]
	subss	xmm1, xmm0
	mov	eax, 4
	imul	ecx, eax, 3
	mov	edx, 4
	imul	eax, edx, 3
	mov	ecx, DWORD PTR _r$[ebp+ecx]
	movss	DWORD PTR [eax+ecx], xmm1

; 699  : 
; 700  : 			s = r[1][4];

	mov	edx, 4
	shl	edx, 0
	mov	eax, 4
	shl	eax, 2
	mov	ecx, DWORD PTR _r$[ebp+edx]
	movss	xmm0, DWORD PTR [eax+ecx]
	movss	DWORD PTR _s$[ebp], xmm0

; 701  : 			if( s )

	movss	xmm0, DWORD PTR _s$[ebp]
	ucomiss	xmm0, DWORD PTR __real@00000000
	lahf
	test	ah, 68					; 00000044H
	jnp	$LN13@InvertFull

; 702  : 			{
; 703  : 				r[2][4] -= m[2] * s;

	mov	edx, 4
	shl	edx, 1
	mov	eax, 4
	shl	eax, 2
	mov	ecx, DWORD PTR _r$[ebp+edx]
	mov	edx, 4
	shl	edx, 1
	movss	xmm0, DWORD PTR _m$[ebp+edx]
	mulss	xmm0, DWORD PTR _s$[ebp]
	movss	xmm1, DWORD PTR [ecx+eax]
	subss	xmm1, xmm0
	mov	eax, 4
	shl	eax, 1
	mov	ecx, 4
	shl	ecx, 2
	mov	edx, DWORD PTR _r$[ebp+eax]
	movss	DWORD PTR [ecx+edx], xmm1

; 704  : 				r[3][4] -= m[3] * s;

	mov	eax, 4
	imul	ecx, eax, 3
	mov	edx, 4
	shl	edx, 2
	mov	eax, DWORD PTR _r$[ebp+ecx]
	mov	ecx, 4
	imul	ecx, ecx, 3
	movss	xmm0, DWORD PTR _m$[ebp+ecx]
	mulss	xmm0, DWORD PTR _s$[ebp]
	movss	xmm1, DWORD PTR [eax+edx]
	subss	xmm1, xmm0
	mov	edx, 4
	imul	eax, edx, 3
	mov	ecx, 4
	shl	ecx, 2
	mov	edx, DWORD PTR _r$[ebp+eax]
	movss	DWORD PTR [ecx+edx], xmm1
$LN13@InvertFull:

; 705  : 			}
; 706  : 
; 707  : 			s = r[1][5];

	mov	eax, 4
	shl	eax, 0
	mov	ecx, 4
	imul	edx, ecx, 5
	mov	eax, DWORD PTR _r$[ebp+eax]
	movss	xmm0, DWORD PTR [edx+eax]
	movss	DWORD PTR _s$[ebp], xmm0

; 708  : 			if( s )

	movss	xmm0, DWORD PTR _s$[ebp]
	ucomiss	xmm0, DWORD PTR __real@00000000
	lahf
	test	ah, 68					; 00000044H
	jnp	$LN14@InvertFull

; 709  : 			{
; 710  : 				r[2][5] -= m[2] * s;

	mov	ecx, 4
	shl	ecx, 1
	mov	edx, 4
	imul	eax, edx, 5
	mov	ecx, DWORD PTR _r$[ebp+ecx]
	mov	edx, 4
	shl	edx, 1
	movss	xmm0, DWORD PTR _m$[ebp+edx]
	mulss	xmm0, DWORD PTR _s$[ebp]
	movss	xmm1, DWORD PTR [ecx+eax]
	subss	xmm1, xmm0
	mov	eax, 4
	shl	eax, 1
	mov	ecx, 4
	imul	edx, ecx, 5
	mov	eax, DWORD PTR _r$[ebp+eax]
	movss	DWORD PTR [edx+eax], xmm1

; 711  : 				r[3][5] -= m[3] * s;

	mov	ecx, 4
	imul	edx, ecx, 3
	mov	eax, 4
	imul	ecx, eax, 5
	mov	edx, DWORD PTR _r$[ebp+edx]
	mov	eax, 4
	imul	eax, eax, 3
	movss	xmm0, DWORD PTR _m$[ebp+eax]
	mulss	xmm0, DWORD PTR _s$[ebp]
	movss	xmm1, DWORD PTR [edx+ecx]
	subss	xmm1, xmm0
	mov	ecx, 4
	imul	edx, ecx, 3
	mov	eax, 4
	imul	ecx, eax, 5
	mov	edx, DWORD PTR _r$[ebp+edx]
	movss	DWORD PTR [ecx+edx], xmm1
$LN14@InvertFull:

; 712  : 			}
; 713  : 
; 714  : 			s = r[1][6];

	mov	eax, 4
	shl	eax, 0
	mov	ecx, 4
	imul	edx, ecx, 6
	mov	eax, DWORD PTR _r$[ebp+eax]
	movss	xmm0, DWORD PTR [edx+eax]
	movss	DWORD PTR _s$[ebp], xmm0

; 715  : 			if( s )

	movss	xmm0, DWORD PTR _s$[ebp]
	ucomiss	xmm0, DWORD PTR __real@00000000
	lahf
	test	ah, 68					; 00000044H
	jnp	$LN15@InvertFull

; 716  : 			{
; 717  : 				r[2][6] -= m[2] * s;

	mov	ecx, 4
	shl	ecx, 1
	mov	edx, 4
	imul	eax, edx, 6
	mov	ecx, DWORD PTR _r$[ebp+ecx]
	mov	edx, 4
	shl	edx, 1
	movss	xmm0, DWORD PTR _m$[ebp+edx]
	mulss	xmm0, DWORD PTR _s$[ebp]
	movss	xmm1, DWORD PTR [ecx+eax]
	subss	xmm1, xmm0
	mov	eax, 4
	shl	eax, 1
	mov	ecx, 4
	imul	edx, ecx, 6
	mov	eax, DWORD PTR _r$[ebp+eax]
	movss	DWORD PTR [edx+eax], xmm1

; 718  : 				r[3][6] -= m[3] * s;

	mov	ecx, 4
	imul	edx, ecx, 3
	mov	eax, 4
	imul	ecx, eax, 6
	mov	edx, DWORD PTR _r$[ebp+edx]
	mov	eax, 4
	imul	eax, eax, 3
	movss	xmm0, DWORD PTR _m$[ebp+eax]
	mulss	xmm0, DWORD PTR _s$[ebp]
	movss	xmm1, DWORD PTR [edx+ecx]
	subss	xmm1, xmm0
	mov	ecx, 4
	imul	edx, ecx, 3
	mov	eax, 4
	imul	ecx, eax, 6
	mov	edx, DWORD PTR _r$[ebp+edx]
	movss	DWORD PTR [ecx+edx], xmm1
$LN15@InvertFull:

; 719  : 			}
; 720  : 
; 721  : 			s = r[1][7];

	mov	eax, 4
	shl	eax, 0
	mov	ecx, 4
	imul	edx, ecx, 7
	mov	eax, DWORD PTR _r$[ebp+eax]
	movss	xmm0, DWORD PTR [edx+eax]
	movss	DWORD PTR _s$[ebp], xmm0

; 722  : 			if( s )

	movss	xmm0, DWORD PTR _s$[ebp]
	ucomiss	xmm0, DWORD PTR __real@00000000
	lahf
	test	ah, 68					; 00000044H
	jnp	$LN16@InvertFull

; 723  : 			{
; 724  : 				r[2][7] -= m[2] * s;

	mov	ecx, 4
	shl	ecx, 1
	mov	edx, 4
	imul	eax, edx, 7
	mov	ecx, DWORD PTR _r$[ebp+ecx]
	mov	edx, 4
	shl	edx, 1
	movss	xmm0, DWORD PTR _m$[ebp+edx]
	mulss	xmm0, DWORD PTR _s$[ebp]
	movss	xmm1, DWORD PTR [ecx+eax]
	subss	xmm1, xmm0
	mov	eax, 4
	shl	eax, 1
	mov	ecx, 4
	imul	edx, ecx, 7
	mov	eax, DWORD PTR _r$[ebp+eax]
	movss	DWORD PTR [edx+eax], xmm1

; 725  : 				r[3][7] -= m[3] * s;

	mov	ecx, 4
	imul	edx, ecx, 3
	mov	eax, 4
	imul	ecx, eax, 7
	mov	edx, DWORD PTR _r$[ebp+edx]
	mov	eax, 4
	imul	eax, eax, 3
	movss	xmm0, DWORD PTR _m$[ebp+eax]
	mulss	xmm0, DWORD PTR _s$[ebp]
	movss	xmm1, DWORD PTR [edx+ecx]
	subss	xmm1, xmm0
	mov	ecx, 4
	imul	edx, ecx, 3
	mov	eax, 4
	imul	ecx, eax, 7
	mov	edx, DWORD PTR _r$[ebp+edx]
	movss	DWORD PTR [ecx+edx], xmm1
$LN16@InvertFull:

; 726  : 			}
; 727  : 
; 728  : 			if( fabs( r[3][2] ) > fabs( r[2][2] ))

	mov	eax, 4
	imul	ecx, eax, 3
	mov	edx, 4
	shl	edx, 1
	mov	eax, DWORD PTR _r$[ebp+ecx]
	cvtss2sd xmm0, DWORD PTR [eax+edx]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	call	_fabs
	add	esp, 8
	fstp	QWORD PTR tv2637[ebp]
	movsd	xmm0, QWORD PTR tv2637[ebp]
	mov	ecx, 4
	shl	ecx, 1
	mov	edx, 4
	shl	edx, 1
	mov	eax, DWORD PTR _r$[ebp+ecx]
	cvtss2sd xmm1, DWORD PTR [eax+edx]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm1
	movsd	QWORD PTR tv3093[ebp], xmm0
	call	_fabs
	add	esp, 8
	fstp	QWORD PTR tv2644[ebp]
	movsd	xmm0, QWORD PTR tv3093[ebp]
	comisd	xmm0, QWORD PTR tv2644[ebp]
	jbe	SHORT $LN17@InvertFull

; 729  : 			{
; 730  : 				temp = r[3];

	mov	ecx, 4
	imul	edx, ecx, 3
	mov	eax, DWORD PTR _r$[ebp+edx]
	mov	DWORD PTR _temp$[ebp], eax

; 731  : 				r[3] = r[2];

	mov	ecx, 4
	shl	ecx, 1
	mov	edx, 4
	imul	eax, edx, 3
	mov	ecx, DWORD PTR _r$[ebp+ecx]
	mov	DWORD PTR _r$[ebp+eax], ecx

; 732  : 				r[2] = temp;

	mov	edx, 4
	shl	edx, 1
	mov	eax, DWORD PTR _temp$[ebp]
	mov	DWORD PTR _r$[ebp+edx], eax
$LN17@InvertFull:

; 733  : 			}
; 734  : 
; 735  : 			if( r[2][2] )

	mov	ecx, 4
	shl	ecx, 1
	mov	edx, 4
	shl	edx, 1
	mov	eax, DWORD PTR _r$[ebp+ecx]
	movss	xmm0, DWORD PTR [edx+eax]
	ucomiss	xmm0, DWORD PTR __real@00000000
	lahf
	test	ah, 68					; 00000044H
	jnp	$LN19@InvertFull

; 736  : 			{
; 737  : 				m[3] = r[3][2] / r[2][2];

	mov	ecx, 4
	imul	edx, ecx, 3
	mov	eax, 4
	shl	eax, 1
	mov	ecx, DWORD PTR _r$[ebp+edx]
	mov	edx, 4
	shl	edx, 1
	mov	esi, 4
	shl	esi, 1
	mov	edx, DWORD PTR _r$[ebp+edx]
	movss	xmm0, DWORD PTR [ecx+eax]
	divss	xmm0, DWORD PTR [edx+esi]
	mov	eax, 4
	imul	ecx, eax, 3
	movss	DWORD PTR _m$[ebp+ecx], xmm0

; 738  : 				r[3][3] -= m[3] * r[2][3];

	mov	edx, 4
	imul	eax, edx, 3
	mov	ecx, 4
	imul	edx, ecx, 3
	mov	eax, DWORD PTR _r$[ebp+eax]
	mov	ecx, 4
	imul	ecx, ecx, 3
	mov	esi, 4
	shl	esi, 1
	mov	edi, 4
	imul	edi, edi, 3
	mov	esi, DWORD PTR _r$[ebp+esi]
	movss	xmm0, DWORD PTR _m$[ebp+ecx]
	mulss	xmm0, DWORD PTR [esi+edi]
	movss	xmm1, DWORD PTR [eax+edx]
	subss	xmm1, xmm0
	mov	edx, 4
	imul	eax, edx, 3
	mov	ecx, 4
	imul	edx, ecx, 3
	mov	eax, DWORD PTR _r$[ebp+eax]
	movss	DWORD PTR [edx+eax], xmm1

; 739  : 				r[3][4] -= m[3] * r[2][4];

	mov	ecx, 4
	imul	edx, ecx, 3
	mov	eax, 4
	shl	eax, 2
	mov	ecx, DWORD PTR _r$[ebp+edx]
	mov	edx, 4
	imul	edx, edx, 3
	mov	esi, 4
	shl	esi, 1
	mov	edi, 4
	shl	edi, 2
	mov	esi, DWORD PTR _r$[ebp+esi]
	movss	xmm0, DWORD PTR _m$[ebp+edx]
	mulss	xmm0, DWORD PTR [esi+edi]
	movss	xmm1, DWORD PTR [ecx+eax]
	subss	xmm1, xmm0
	mov	eax, 4
	imul	ecx, eax, 3
	mov	edx, 4
	shl	edx, 2
	mov	eax, DWORD PTR _r$[ebp+ecx]
	movss	DWORD PTR [edx+eax], xmm1

; 740  : 				r[3][5] -= m[3] * r[2][5];

	mov	ecx, 4
	imul	edx, ecx, 3
	mov	eax, 4
	imul	ecx, eax, 5
	mov	edx, DWORD PTR _r$[ebp+edx]
	mov	eax, 4
	imul	eax, eax, 3
	mov	esi, 4
	shl	esi, 1
	mov	edi, 4
	imul	edi, edi, 5
	mov	esi, DWORD PTR _r$[ebp+esi]
	movss	xmm0, DWORD PTR _m$[ebp+eax]
	mulss	xmm0, DWORD PTR [esi+edi]
	movss	xmm1, DWORD PTR [edx+ecx]
	subss	xmm1, xmm0
	mov	ecx, 4
	imul	edx, ecx, 3
	mov	eax, 4
	imul	ecx, eax, 5
	mov	edx, DWORD PTR _r$[ebp+edx]
	movss	DWORD PTR [ecx+edx], xmm1

; 741  : 				r[3][6] -= m[3] * r[2][6];

	mov	eax, 4
	imul	ecx, eax, 3
	mov	edx, 4
	imul	eax, edx, 6
	mov	ecx, DWORD PTR _r$[ebp+ecx]
	mov	edx, 4
	imul	edx, edx, 3
	mov	esi, 4
	shl	esi, 1
	mov	edi, 4
	imul	edi, edi, 6
	mov	esi, DWORD PTR _r$[ebp+esi]
	movss	xmm0, DWORD PTR _m$[ebp+edx]
	mulss	xmm0, DWORD PTR [esi+edi]
	movss	xmm1, DWORD PTR [ecx+eax]
	subss	xmm1, xmm0
	mov	eax, 4
	imul	ecx, eax, 3
	mov	edx, 4
	imul	eax, edx, 6
	mov	ecx, DWORD PTR _r$[ebp+ecx]
	movss	DWORD PTR [eax+ecx], xmm1

; 742  : 				r[3][7] -= m[3] * r[2][7];

	mov	edx, 4
	imul	eax, edx, 3
	mov	ecx, 4
	imul	edx, ecx, 7
	mov	eax, DWORD PTR _r$[ebp+eax]
	mov	ecx, 4
	imul	ecx, ecx, 3
	mov	esi, 4
	shl	esi, 1
	mov	edi, 4
	imul	edi, edi, 7
	mov	esi, DWORD PTR _r$[ebp+esi]
	movss	xmm0, DWORD PTR _m$[ebp+ecx]
	mulss	xmm0, DWORD PTR [esi+edi]
	movss	xmm1, DWORD PTR [eax+edx]
	subss	xmm1, xmm0
	mov	edx, 4
	imul	eax, edx, 3
	mov	ecx, 4
	imul	edx, ecx, 7
	mov	eax, DWORD PTR _r$[ebp+eax]
	movss	DWORD PTR [edx+eax], xmm1

; 743  : 
; 744  : 				if( r[3][3] )

	mov	ecx, 4
	imul	edx, ecx, 3
	mov	eax, 4
	imul	ecx, eax, 3
	mov	edx, DWORD PTR _r$[ebp+edx]
	movss	xmm0, DWORD PTR [ecx+edx]
	ucomiss	xmm0, DWORD PTR __real@00000000
	lahf
	test	ah, 68					; 00000044H
	jnp	$LN19@InvertFull

; 745  : 				{
; 746  : 					s = 1.0 / r[3][3];

	mov	eax, 4
	imul	ecx, eax, 3
	mov	edx, 4
	imul	eax, edx, 3
	mov	ecx, DWORD PTR _r$[ebp+ecx]
	cvtss2sd xmm0, DWORD PTR [ecx+eax]
	movsd	xmm1, QWORD PTR __real@3ff0000000000000
	divsd	xmm1, xmm0
	cvtsd2ss xmm0, xmm1
	movss	DWORD PTR _s$[ebp], xmm0

; 747  : 					r[3][4] *= s;

	mov	edx, 4
	imul	eax, edx, 3
	mov	ecx, 4
	shl	ecx, 2
	mov	edx, DWORD PTR _r$[ebp+eax]
	movss	xmm0, DWORD PTR [edx+ecx]
	mulss	xmm0, DWORD PTR _s$[ebp]
	mov	eax, 4
	imul	ecx, eax, 3
	mov	edx, 4
	shl	edx, 2
	mov	eax, DWORD PTR _r$[ebp+ecx]
	movss	DWORD PTR [edx+eax], xmm0

; 748  : 					r[3][5] *= s;

	mov	ecx, 4
	imul	edx, ecx, 3
	mov	eax, 4
	imul	ecx, eax, 5
	mov	edx, DWORD PTR _r$[ebp+edx]
	movss	xmm0, DWORD PTR [edx+ecx]
	mulss	xmm0, DWORD PTR _s$[ebp]
	mov	eax, 4
	imul	ecx, eax, 3
	mov	edx, 4
	imul	eax, edx, 5
	mov	ecx, DWORD PTR _r$[ebp+ecx]
	movss	DWORD PTR [eax+ecx], xmm0

; 749  : 					r[3][6] *= s;

	mov	edx, 4
	imul	eax, edx, 3
	mov	ecx, 4
	imul	edx, ecx, 6
	mov	eax, DWORD PTR _r$[ebp+eax]
	movss	xmm0, DWORD PTR [eax+edx]
	mulss	xmm0, DWORD PTR _s$[ebp]
	mov	ecx, 4
	imul	edx, ecx, 3
	mov	eax, 4
	imul	ecx, eax, 6
	mov	edx, DWORD PTR _r$[ebp+edx]
	movss	DWORD PTR [ecx+edx], xmm0

; 750  : 					r[3][7] *= s;

	mov	eax, 4
	imul	ecx, eax, 3
	mov	edx, 4
	imul	eax, edx, 7
	mov	ecx, DWORD PTR _r$[ebp+ecx]
	movss	xmm0, DWORD PTR [ecx+eax]
	mulss	xmm0, DWORD PTR _s$[ebp]
	mov	edx, 4
	imul	eax, edx, 3
	mov	ecx, 4
	imul	edx, ecx, 7
	mov	eax, DWORD PTR _r$[ebp+eax]
	movss	DWORD PTR [edx+eax], xmm0

; 751  : 
; 752  : 					m[2] = r[2][3];

	mov	ecx, 4
	shl	ecx, 1
	mov	edx, 4
	imul	eax, edx, 3
	mov	ecx, DWORD PTR _r$[ebp+ecx]
	mov	edx, 4
	shl	edx, 1
	mov	eax, DWORD PTR [eax+ecx]
	mov	DWORD PTR _m$[ebp+edx], eax

; 753  : 					s = 1.0 / r[2][2];

	mov	ecx, 4
	shl	ecx, 1
	mov	edx, 4
	shl	edx, 1
	mov	eax, DWORD PTR _r$[ebp+ecx]
	cvtss2sd xmm0, DWORD PTR [eax+edx]
	movsd	xmm1, QWORD PTR __real@3ff0000000000000
	divsd	xmm1, xmm0
	cvtsd2ss xmm0, xmm1
	movss	DWORD PTR _s$[ebp], xmm0

; 754  : 					r[2][4] = s * (r[2][4] - r[3][4] * m[2]);

	mov	ecx, 4
	shl	ecx, 1
	mov	edx, 4
	shl	edx, 2
	mov	eax, DWORD PTR _r$[ebp+ecx]
	mov	ecx, 4
	imul	ecx, ecx, 3
	mov	esi, 4
	shl	esi, 2
	mov	ecx, DWORD PTR _r$[ebp+ecx]
	mov	edi, 4
	shl	edi, 1
	movss	xmm0, DWORD PTR [ecx+esi]
	mulss	xmm0, DWORD PTR _m$[ebp+edi]
	movss	xmm1, DWORD PTR [eax+edx]
	subss	xmm1, xmm0
	mulss	xmm1, DWORD PTR _s$[ebp]
	mov	edx, 4
	shl	edx, 1
	mov	eax, 4
	shl	eax, 2
	mov	ecx, DWORD PTR _r$[ebp+edx]
	movss	DWORD PTR [eax+ecx], xmm1

; 755  : 					r[2][5] = s * (r[2][5] - r[3][5] * m[2]);

	mov	edx, 4
	shl	edx, 1
	mov	eax, 4
	imul	ecx, eax, 5
	mov	edx, DWORD PTR _r$[ebp+edx]
	mov	eax, 4
	imul	eax, eax, 3
	mov	esi, 4
	imul	esi, esi, 5
	mov	eax, DWORD PTR _r$[ebp+eax]
	mov	edi, 4
	shl	edi, 1
	movss	xmm0, DWORD PTR [eax+esi]
	mulss	xmm0, DWORD PTR _m$[ebp+edi]
	movss	xmm1, DWORD PTR [edx+ecx]
	subss	xmm1, xmm0
	mulss	xmm1, DWORD PTR _s$[ebp]
	mov	ecx, 4
	shl	ecx, 1
	mov	edx, 4
	imul	eax, edx, 5
	mov	ecx, DWORD PTR _r$[ebp+ecx]
	movss	DWORD PTR [eax+ecx], xmm1

; 756  : 					r[2][6] = s * (r[2][6] - r[3][6] * m[2]);

	mov	edx, 4
	shl	edx, 1
	mov	eax, 4
	imul	ecx, eax, 6
	mov	edx, DWORD PTR _r$[ebp+edx]
	mov	eax, 4
	imul	eax, eax, 3
	mov	esi, 4
	imul	esi, esi, 6
	mov	eax, DWORD PTR _r$[ebp+eax]
	mov	edi, 4
	shl	edi, 1
	movss	xmm0, DWORD PTR [eax+esi]
	mulss	xmm0, DWORD PTR _m$[ebp+edi]
	movss	xmm1, DWORD PTR [edx+ecx]
	subss	xmm1, xmm0
	mulss	xmm1, DWORD PTR _s$[ebp]
	mov	ecx, 4
	shl	ecx, 1
	mov	edx, 4
	imul	eax, edx, 6
	mov	ecx, DWORD PTR _r$[ebp+ecx]
	movss	DWORD PTR [eax+ecx], xmm1

; 757  : 					r[2][7] = s * (r[2][7] - r[3][7] * m[2]);

	mov	edx, 4
	shl	edx, 1
	mov	eax, 4
	imul	ecx, eax, 7
	mov	edx, DWORD PTR _r$[ebp+edx]
	mov	eax, 4
	imul	eax, eax, 3
	mov	esi, 4
	imul	esi, esi, 7
	mov	eax, DWORD PTR _r$[ebp+eax]
	mov	edi, 4
	shl	edi, 1
	movss	xmm0, DWORD PTR [eax+esi]
	mulss	xmm0, DWORD PTR _m$[ebp+edi]
	movss	xmm1, DWORD PTR [edx+ecx]
	subss	xmm1, xmm0
	mulss	xmm1, DWORD PTR _s$[ebp]
	mov	ecx, 4
	shl	ecx, 1
	mov	edx, 4
	imul	eax, edx, 7
	mov	ecx, DWORD PTR _r$[ebp+ecx]
	movss	DWORD PTR [eax+ecx], xmm1

; 758  : 
; 759  : 					m[1] = r[1][3];

	mov	edx, 4
	shl	edx, 0
	mov	eax, 4
	imul	ecx, eax, 3
	mov	edx, DWORD PTR _r$[ebp+edx]
	mov	eax, 4
	shl	eax, 0
	mov	ecx, DWORD PTR [ecx+edx]
	mov	DWORD PTR _m$[ebp+eax], ecx

; 760  : 					r[1][4] -= r[3][4] * m[1];

	mov	edx, 4
	shl	edx, 0
	mov	eax, 4
	shl	eax, 2
	mov	ecx, DWORD PTR _r$[ebp+edx]
	mov	edx, 4
	imul	edx, edx, 3
	mov	esi, 4
	shl	esi, 2
	mov	edx, DWORD PTR _r$[ebp+edx]
	mov	edi, 4
	shl	edi, 0
	movss	xmm0, DWORD PTR [edx+esi]
	mulss	xmm0, DWORD PTR _m$[ebp+edi]
	movss	xmm1, DWORD PTR [ecx+eax]
	subss	xmm1, xmm0
	mov	eax, 4
	shl	eax, 0
	mov	ecx, 4
	shl	ecx, 2
	mov	edx, DWORD PTR _r$[ebp+eax]
	movss	DWORD PTR [ecx+edx], xmm1

; 761  : 					r[1][5] -= r[3][5] * m[1];

	mov	eax, 4
	shl	eax, 0
	mov	ecx, 4
	imul	edx, ecx, 5
	mov	eax, DWORD PTR _r$[ebp+eax]
	mov	ecx, 4
	imul	ecx, ecx, 3
	mov	esi, 4
	imul	esi, esi, 5
	mov	ecx, DWORD PTR _r$[ebp+ecx]
	mov	edi, 4
	shl	edi, 0
	movss	xmm0, DWORD PTR [ecx+esi]
	mulss	xmm0, DWORD PTR _m$[ebp+edi]
	movss	xmm1, DWORD PTR [eax+edx]
	subss	xmm1, xmm0
	mov	edx, 4
	shl	edx, 0
	mov	eax, 4
	imul	ecx, eax, 5
	mov	edx, DWORD PTR _r$[ebp+edx]
	movss	DWORD PTR [ecx+edx], xmm1

; 762  : 					r[1][6] -= r[3][6] * m[1];

	mov	eax, 4
	shl	eax, 0
	mov	ecx, 4
	imul	edx, ecx, 6
	mov	eax, DWORD PTR _r$[ebp+eax]
	mov	ecx, 4
	imul	ecx, ecx, 3
	mov	esi, 4
	imul	esi, esi, 6
	mov	ecx, DWORD PTR _r$[ebp+ecx]
	mov	edi, 4
	shl	edi, 0
	movss	xmm0, DWORD PTR [ecx+esi]
	mulss	xmm0, DWORD PTR _m$[ebp+edi]
	movss	xmm1, DWORD PTR [eax+edx]
	subss	xmm1, xmm0
	mov	edx, 4
	shl	edx, 0
	mov	eax, 4
	imul	ecx, eax, 6
	mov	edx, DWORD PTR _r$[ebp+edx]
	movss	DWORD PTR [ecx+edx], xmm1

; 763  : 					r[1][7] -= r[3][7] * m[1];

	mov	eax, 4
	shl	eax, 0
	mov	ecx, 4
	imul	edx, ecx, 7
	mov	eax, DWORD PTR _r$[ebp+eax]
	mov	ecx, 4
	imul	ecx, ecx, 3
	mov	esi, 4
	imul	esi, esi, 7
	mov	ecx, DWORD PTR _r$[ebp+ecx]
	mov	edi, 4
	shl	edi, 0
	movss	xmm0, DWORD PTR [ecx+esi]
	mulss	xmm0, DWORD PTR _m$[ebp+edi]
	movss	xmm1, DWORD PTR [eax+edx]
	subss	xmm1, xmm0
	mov	edx, 4
	shl	edx, 0
	mov	eax, 4
	imul	ecx, eax, 7
	mov	edx, DWORD PTR _r$[ebp+edx]
	movss	DWORD PTR [ecx+edx], xmm1

; 764  : 
; 765  : 					m[0] = r[0][3];

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, 4
	imul	eax, edx, 3
	mov	ecx, DWORD PTR _r$[ebp+ecx]
	mov	edx, 4
	imul	edx, edx, 0
	mov	eax, DWORD PTR [eax+ecx]
	mov	DWORD PTR _m$[ebp+edx], eax

; 766  : 					r[0][4] -= r[3][4] * m[0];

	mov	ecx, 4
	imul	edx, ecx, 0
	mov	eax, 4
	shl	eax, 2
	mov	ecx, DWORD PTR _r$[ebp+edx]
	mov	edx, 4
	imul	edx, edx, 3
	mov	esi, 4
	shl	esi, 2
	mov	edx, DWORD PTR _r$[ebp+edx]
	mov	edi, 4
	imul	edi, edi, 0
	movss	xmm0, DWORD PTR [edx+esi]
	mulss	xmm0, DWORD PTR _m$[ebp+edi]
	movss	xmm1, DWORD PTR [ecx+eax]
	subss	xmm1, xmm0
	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, 4
	shl	edx, 2
	mov	eax, DWORD PTR _r$[ebp+ecx]
	movss	DWORD PTR [edx+eax], xmm1

; 767  : 					r[0][5] -= r[3][5] * m[0];

	mov	ecx, 4
	imul	edx, ecx, 0
	mov	eax, 4
	imul	ecx, eax, 5
	mov	edx, DWORD PTR _r$[ebp+edx]
	mov	eax, 4
	imul	eax, eax, 3
	mov	esi, 4
	imul	esi, esi, 5
	mov	eax, DWORD PTR _r$[ebp+eax]
	mov	edi, 4
	imul	edi, edi, 0
	movss	xmm0, DWORD PTR [eax+esi]
	mulss	xmm0, DWORD PTR _m$[ebp+edi]
	movss	xmm1, DWORD PTR [edx+ecx]
	subss	xmm1, xmm0
	mov	ecx, 4
	imul	edx, ecx, 0
	mov	eax, 4
	imul	ecx, eax, 5
	mov	edx, DWORD PTR _r$[ebp+edx]
	movss	DWORD PTR [ecx+edx], xmm1

; 768  : 					r[0][6] -= r[3][6] * m[0];

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, 4
	imul	eax, edx, 6
	mov	ecx, DWORD PTR _r$[ebp+ecx]
	mov	edx, 4
	imul	edx, edx, 3
	mov	esi, 4
	imul	esi, esi, 6
	mov	edx, DWORD PTR _r$[ebp+edx]
	mov	edi, 4
	imul	edi, edi, 0
	movss	xmm0, DWORD PTR [edx+esi]
	mulss	xmm0, DWORD PTR _m$[ebp+edi]
	movss	xmm1, DWORD PTR [ecx+eax]
	subss	xmm1, xmm0
	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, 4
	imul	eax, edx, 6
	mov	ecx, DWORD PTR _r$[ebp+ecx]
	movss	DWORD PTR [eax+ecx], xmm1

; 769  : 					r[0][7] -= r[3][7] * m[0];

	mov	edx, 4
	imul	eax, edx, 0
	mov	ecx, 4
	imul	edx, ecx, 7
	mov	eax, DWORD PTR _r$[ebp+eax]
	mov	ecx, 4
	imul	ecx, ecx, 3
	mov	esi, 4
	imul	esi, esi, 7
	mov	ecx, DWORD PTR _r$[ebp+ecx]
	mov	edi, 4
	imul	edi, edi, 0
	movss	xmm0, DWORD PTR [ecx+esi]
	mulss	xmm0, DWORD PTR _m$[ebp+edi]
	movss	xmm1, DWORD PTR [eax+edx]
	subss	xmm1, xmm0
	mov	edx, 4
	imul	eax, edx, 0
	mov	ecx, 4
	imul	edx, ecx, 7
	mov	eax, DWORD PTR _r$[ebp+eax]
	movss	DWORD PTR [edx+eax], xmm1

; 770  : 
; 771  : 					m[1] = r[1][2];

	mov	ecx, 4
	shl	ecx, 0
	mov	edx, 4
	shl	edx, 1
	mov	eax, DWORD PTR _r$[ebp+ecx]
	mov	ecx, 4
	shl	ecx, 0
	mov	edx, DWORD PTR [edx+eax]
	mov	DWORD PTR _m$[ebp+ecx], edx

; 772  : 					s = 1.0 / r[1][1];

	mov	eax, 4
	shl	eax, 0
	mov	ecx, 4
	shl	ecx, 0
	mov	edx, DWORD PTR _r$[ebp+eax]
	cvtss2sd xmm0, DWORD PTR [edx+ecx]
	movsd	xmm1, QWORD PTR __real@3ff0000000000000
	divsd	xmm1, xmm0
	cvtsd2ss xmm0, xmm1
	movss	DWORD PTR _s$[ebp], xmm0

; 773  : 					r[1][4] = s * (r[1][4] - r[2][4] * m[1]);

	mov	eax, 4
	shl	eax, 0
	mov	ecx, 4
	shl	ecx, 2
	mov	edx, DWORD PTR _r$[ebp+eax]
	mov	eax, 4
	shl	eax, 1
	mov	esi, 4
	shl	esi, 2
	mov	eax, DWORD PTR _r$[ebp+eax]
	mov	edi, 4
	shl	edi, 0
	movss	xmm0, DWORD PTR [eax+esi]
	mulss	xmm0, DWORD PTR _m$[ebp+edi]
	movss	xmm1, DWORD PTR [edx+ecx]
	subss	xmm1, xmm0
	mulss	xmm1, DWORD PTR _s$[ebp]
	mov	ecx, 4
	shl	ecx, 0
	mov	edx, 4
	shl	edx, 2
	mov	eax, DWORD PTR _r$[ebp+ecx]
	movss	DWORD PTR [edx+eax], xmm1

; 774  : 					r[1][5] = s * (r[1][5] - r[2][5] * m[1]);

	mov	ecx, 4
	shl	ecx, 0
	mov	edx, 4
	imul	eax, edx, 5
	mov	ecx, DWORD PTR _r$[ebp+ecx]
	mov	edx, 4
	shl	edx, 1
	mov	esi, 4
	imul	esi, esi, 5
	mov	edx, DWORD PTR _r$[ebp+edx]
	mov	edi, 4
	shl	edi, 0
	movss	xmm0, DWORD PTR [edx+esi]
	mulss	xmm0, DWORD PTR _m$[ebp+edi]
	movss	xmm1, DWORD PTR [ecx+eax]
	subss	xmm1, xmm0
	mulss	xmm1, DWORD PTR _s$[ebp]
	mov	eax, 4
	shl	eax, 0
	mov	ecx, 4
	imul	edx, ecx, 5
	mov	eax, DWORD PTR _r$[ebp+eax]
	movss	DWORD PTR [edx+eax], xmm1

; 775  : 					r[1][6] = s * (r[1][6] - r[2][6] * m[1]);

	mov	ecx, 4
	shl	ecx, 0
	mov	edx, 4
	imul	eax, edx, 6
	mov	ecx, DWORD PTR _r$[ebp+ecx]
	mov	edx, 4
	shl	edx, 1
	mov	esi, 4
	imul	esi, esi, 6
	mov	edx, DWORD PTR _r$[ebp+edx]
	mov	edi, 4
	shl	edi, 0
	movss	xmm0, DWORD PTR [edx+esi]
	mulss	xmm0, DWORD PTR _m$[ebp+edi]
	movss	xmm1, DWORD PTR [ecx+eax]
	subss	xmm1, xmm0
	mulss	xmm1, DWORD PTR _s$[ebp]
	mov	eax, 4
	shl	eax, 0
	mov	ecx, 4
	imul	edx, ecx, 6
	mov	eax, DWORD PTR _r$[ebp+eax]
	movss	DWORD PTR [edx+eax], xmm1

; 776  : 					r[1][7] = s * (r[1][7] - r[2][7] * m[1]);

	mov	ecx, 4
	shl	ecx, 0
	mov	edx, 4
	imul	eax, edx, 7
	mov	ecx, DWORD PTR _r$[ebp+ecx]
	mov	edx, 4
	shl	edx, 1
	mov	esi, 4
	imul	esi, esi, 7
	mov	edx, DWORD PTR _r$[ebp+edx]
	mov	edi, 4
	shl	edi, 0
	movss	xmm0, DWORD PTR [edx+esi]
	mulss	xmm0, DWORD PTR _m$[ebp+edi]
	movss	xmm1, DWORD PTR [ecx+eax]
	subss	xmm1, xmm0
	mulss	xmm1, DWORD PTR _s$[ebp]
	mov	eax, 4
	shl	eax, 0
	mov	ecx, 4
	imul	edx, ecx, 7
	mov	eax, DWORD PTR _r$[ebp+eax]
	movss	DWORD PTR [edx+eax], xmm1

; 777  : 
; 778  : 					m[0] = r[0][2];

	mov	ecx, 4
	imul	edx, ecx, 0
	mov	eax, 4
	shl	eax, 1
	mov	ecx, DWORD PTR _r$[ebp+edx]
	mov	edx, 4
	imul	edx, edx, 0
	mov	eax, DWORD PTR [eax+ecx]
	mov	DWORD PTR _m$[ebp+edx], eax

; 779  : 					r[0][4] -= r[2][4] * m[0];

	mov	ecx, 4
	imul	edx, ecx, 0
	mov	eax, 4
	shl	eax, 2
	mov	ecx, DWORD PTR _r$[ebp+edx]
	mov	edx, 4
	shl	edx, 1
	mov	esi, 4
	shl	esi, 2
	mov	edx, DWORD PTR _r$[ebp+edx]
	mov	edi, 4
	imul	edi, edi, 0
	movss	xmm0, DWORD PTR [edx+esi]
	mulss	xmm0, DWORD PTR _m$[ebp+edi]
	movss	xmm1, DWORD PTR [ecx+eax]
	subss	xmm1, xmm0
	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, 4
	shl	edx, 2
	mov	eax, DWORD PTR _r$[ebp+ecx]
	movss	DWORD PTR [edx+eax], xmm1

; 780  : 					r[0][5] -= r[2][5] * m[0];

	mov	ecx, 4
	imul	edx, ecx, 0
	mov	eax, 4
	imul	ecx, eax, 5
	mov	edx, DWORD PTR _r$[ebp+edx]
	mov	eax, 4
	shl	eax, 1
	mov	esi, 4
	imul	esi, esi, 5
	mov	eax, DWORD PTR _r$[ebp+eax]
	mov	edi, 4
	imul	edi, edi, 0
	movss	xmm0, DWORD PTR [eax+esi]
	mulss	xmm0, DWORD PTR _m$[ebp+edi]
	movss	xmm1, DWORD PTR [edx+ecx]
	subss	xmm1, xmm0
	mov	ecx, 4
	imul	edx, ecx, 0
	mov	eax, 4
	imul	ecx, eax, 5
	mov	edx, DWORD PTR _r$[ebp+edx]
	movss	DWORD PTR [ecx+edx], xmm1

; 781  : 					r[0][6] -= r[2][6] * m[0];

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, 4
	imul	eax, edx, 6
	mov	ecx, DWORD PTR _r$[ebp+ecx]
	mov	edx, 4
	shl	edx, 1
	mov	esi, 4
	imul	esi, esi, 6
	mov	edx, DWORD PTR _r$[ebp+edx]
	mov	edi, 4
	imul	edi, edi, 0
	movss	xmm0, DWORD PTR [edx+esi]
	mulss	xmm0, DWORD PTR _m$[ebp+edi]
	movss	xmm1, DWORD PTR [ecx+eax]
	subss	xmm1, xmm0
	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, 4
	imul	eax, edx, 6
	mov	ecx, DWORD PTR _r$[ebp+ecx]
	movss	DWORD PTR [eax+ecx], xmm1

; 782  : 					r[0][7] -= r[2][7] * m[0];

	mov	edx, 4
	imul	eax, edx, 0
	mov	ecx, 4
	imul	edx, ecx, 7
	mov	eax, DWORD PTR _r$[ebp+eax]
	mov	ecx, 4
	shl	ecx, 1
	mov	esi, 4
	imul	esi, esi, 7
	mov	ecx, DWORD PTR _r$[ebp+ecx]
	mov	edi, 4
	imul	edi, edi, 0
	movss	xmm0, DWORD PTR [ecx+esi]
	mulss	xmm0, DWORD PTR _m$[ebp+edi]
	movss	xmm1, DWORD PTR [eax+edx]
	subss	xmm1, xmm0
	mov	edx, 4
	imul	eax, edx, 0
	mov	ecx, 4
	imul	edx, ecx, 7
	mov	eax, DWORD PTR _r$[ebp+eax]
	movss	DWORD PTR [edx+eax], xmm1

; 783  : 
; 784  : 					m[0] = r[0][1];

	mov	ecx, 4
	imul	edx, ecx, 0
	mov	eax, 4
	shl	eax, 0
	mov	ecx, DWORD PTR _r$[ebp+edx]
	mov	edx, 4
	imul	edx, edx, 0
	mov	eax, DWORD PTR [eax+ecx]
	mov	DWORD PTR _m$[ebp+edx], eax

; 785  : 					s = 1.0 / r[0][0];

	mov	ecx, 4
	imul	edx, ecx, 0
	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _r$[ebp+edx]
	cvtss2sd xmm0, DWORD PTR [edx+ecx]
	movsd	xmm1, QWORD PTR __real@3ff0000000000000
	divsd	xmm1, xmm0
	cvtsd2ss xmm0, xmm1
	movss	DWORD PTR _s$[ebp], xmm0

; 786  : 					r[0][4] = s * (r[0][4] - r[1][4] * m[0]);

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, 4
	shl	edx, 2
	mov	eax, DWORD PTR _r$[ebp+ecx]
	mov	ecx, 4
	shl	ecx, 0
	mov	esi, 4
	shl	esi, 2
	mov	ecx, DWORD PTR _r$[ebp+ecx]
	mov	edi, 4
	imul	edi, edi, 0
	movss	xmm0, DWORD PTR [ecx+esi]
	mulss	xmm0, DWORD PTR _m$[ebp+edi]
	movss	xmm1, DWORD PTR [eax+edx]
	subss	xmm1, xmm0
	mulss	xmm1, DWORD PTR _s$[ebp]
	mov	edx, 4
	imul	eax, edx, 0
	mov	ecx, 4
	shl	ecx, 2
	mov	edx, DWORD PTR _r$[ebp+eax]
	movss	DWORD PTR [ecx+edx], xmm1

; 787  : 					r[0][5] = s * (r[0][5] - r[1][5] * m[0]);

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, 4
	imul	eax, edx, 5
	mov	ecx, DWORD PTR _r$[ebp+ecx]
	mov	edx, 4
	shl	edx, 0
	mov	esi, 4
	imul	esi, esi, 5
	mov	edx, DWORD PTR _r$[ebp+edx]
	mov	edi, 4
	imul	edi, edi, 0
	movss	xmm0, DWORD PTR [edx+esi]
	mulss	xmm0, DWORD PTR _m$[ebp+edi]
	movss	xmm1, DWORD PTR [ecx+eax]
	subss	xmm1, xmm0
	mulss	xmm1, DWORD PTR _s$[ebp]
	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, 4
	imul	eax, edx, 5
	mov	ecx, DWORD PTR _r$[ebp+ecx]
	movss	DWORD PTR [eax+ecx], xmm1

; 788  : 					r[0][6] = s * (r[0][6] - r[1][6] * m[0]);

	mov	edx, 4
	imul	eax, edx, 0
	mov	ecx, 4
	imul	edx, ecx, 6
	mov	eax, DWORD PTR _r$[ebp+eax]
	mov	ecx, 4
	shl	ecx, 0
	mov	esi, 4
	imul	esi, esi, 6
	mov	ecx, DWORD PTR _r$[ebp+ecx]
	mov	edi, 4
	imul	edi, edi, 0
	movss	xmm0, DWORD PTR [ecx+esi]
	mulss	xmm0, DWORD PTR _m$[ebp+edi]
	movss	xmm1, DWORD PTR [eax+edx]
	subss	xmm1, xmm0
	mulss	xmm1, DWORD PTR _s$[ebp]
	mov	edx, 4
	imul	eax, edx, 0
	mov	ecx, 4
	imul	edx, ecx, 6
	mov	eax, DWORD PTR _r$[ebp+eax]
	movss	DWORD PTR [edx+eax], xmm1

; 789  : 					r[0][7] = s * (r[0][7] - r[1][7] * m[0]);

	mov	ecx, 4
	imul	edx, ecx, 0
	mov	eax, 4
	imul	ecx, eax, 7
	mov	edx, DWORD PTR _r$[ebp+edx]
	mov	eax, 4
	shl	eax, 0
	mov	esi, 4
	imul	esi, esi, 7
	mov	eax, DWORD PTR _r$[ebp+eax]
	mov	edi, 4
	imul	edi, edi, 0
	movss	xmm0, DWORD PTR [eax+esi]
	mulss	xmm0, DWORD PTR _m$[ebp+edi]
	movss	xmm1, DWORD PTR [edx+ecx]
	subss	xmm1, xmm0
	mulss	xmm1, DWORD PTR _s$[ebp]
	mov	ecx, 4
	imul	edx, ecx, 0
	mov	eax, 4
	imul	ecx, eax, 7
	mov	edx, DWORD PTR _r$[ebp+edx]
	movss	DWORD PTR [ecx+edx], xmm1

; 790  : 
; 791  : 					out[0][0]	= r[0][4];

	mov	eax, 4
	imul	ecx, eax, 0
	mov	esi, 4
	shl	esi, 2
	mov	edi, DWORD PTR _r$[ebp+ecx]
	push	0
	lea	ecx, DWORD PTR _out$[ebp]
	call	??Amatrix4x4@@QAEPAMH@Z			; matrix4x4::operator[]
	mov	edx, 4
	imul	ecx, edx, 0
	mov	edx, DWORD PTR [esi+edi]
	mov	DWORD PTR [eax+ecx], edx

; 792  : 					out[0][1]	= r[1][4];

	mov	eax, 4
	shl	eax, 0
	mov	esi, 4
	shl	esi, 2
	mov	edi, DWORD PTR _r$[ebp+eax]
	push	0
	lea	ecx, DWORD PTR _out$[ebp]
	call	??Amatrix4x4@@QAEPAMH@Z			; matrix4x4::operator[]
	mov	ecx, 4
	shl	ecx, 0
	mov	edx, DWORD PTR [esi+edi]
	mov	DWORD PTR [eax+ecx], edx

; 793  : 					out[0][2]	= r[2][4];

	mov	eax, 4
	shl	eax, 1
	mov	esi, 4
	shl	esi, 2
	mov	edi, DWORD PTR _r$[ebp+eax]
	push	0
	lea	ecx, DWORD PTR _out$[ebp]
	call	??Amatrix4x4@@QAEPAMH@Z			; matrix4x4::operator[]
	mov	ecx, 4
	shl	ecx, 1
	mov	edx, DWORD PTR [esi+edi]
	mov	DWORD PTR [eax+ecx], edx

; 794  : 					out[0][3]	= r[3][4];

	mov	eax, 4
	imul	ecx, eax, 3
	mov	esi, 4
	shl	esi, 2
	mov	edi, DWORD PTR _r$[ebp+ecx]
	push	0
	lea	ecx, DWORD PTR _out$[ebp]
	call	??Amatrix4x4@@QAEPAMH@Z			; matrix4x4::operator[]
	mov	edx, 4
	imul	ecx, edx, 3
	mov	edx, DWORD PTR [esi+edi]
	mov	DWORD PTR [eax+ecx], edx

; 795  : 					out[1][0]	= r[0][5];

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, 4
	imul	esi, edx, 5
	mov	edi, DWORD PTR _r$[ebp+ecx]
	push	1
	lea	ecx, DWORD PTR _out$[ebp]
	call	??Amatrix4x4@@QAEPAMH@Z			; matrix4x4::operator[]
	mov	ecx, 4
	imul	edx, ecx, 0
	mov	ecx, DWORD PTR [esi+edi]
	mov	DWORD PTR [eax+edx], ecx

; 796  : 					out[1][1]	= r[1][5];

	mov	edx, 4
	shl	edx, 0
	mov	eax, 4
	imul	esi, eax, 5
	mov	edi, DWORD PTR _r$[ebp+edx]
	push	1
	lea	ecx, DWORD PTR _out$[ebp]
	call	??Amatrix4x4@@QAEPAMH@Z			; matrix4x4::operator[]
	mov	ecx, 4
	shl	ecx, 0
	mov	edx, DWORD PTR [esi+edi]
	mov	DWORD PTR [eax+ecx], edx

; 797  : 					out[1][2]	= r[2][5];

	mov	eax, 4
	shl	eax, 1
	mov	ecx, 4
	imul	esi, ecx, 5
	mov	edi, DWORD PTR _r$[ebp+eax]
	push	1
	lea	ecx, DWORD PTR _out$[ebp]
	call	??Amatrix4x4@@QAEPAMH@Z			; matrix4x4::operator[]
	mov	edx, 4
	shl	edx, 1
	mov	ecx, DWORD PTR [esi+edi]
	mov	DWORD PTR [eax+edx], ecx

; 798  : 					out[1][3]	= r[3][5];

	mov	edx, 4
	imul	eax, edx, 3
	mov	ecx, 4
	imul	esi, ecx, 5
	mov	edi, DWORD PTR _r$[ebp+eax]
	push	1
	lea	ecx, DWORD PTR _out$[ebp]
	call	??Amatrix4x4@@QAEPAMH@Z			; matrix4x4::operator[]
	mov	edx, 4
	imul	ecx, edx, 3
	mov	edx, DWORD PTR [esi+edi]
	mov	DWORD PTR [eax+ecx], edx

; 799  : 					out[2][0]	= r[0][6];

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, 4
	imul	esi, edx, 6
	mov	edi, DWORD PTR _r$[ebp+ecx]
	push	2
	lea	ecx, DWORD PTR _out$[ebp]
	call	??Amatrix4x4@@QAEPAMH@Z			; matrix4x4::operator[]
	mov	ecx, 4
	imul	edx, ecx, 0
	mov	ecx, DWORD PTR [esi+edi]
	mov	DWORD PTR [eax+edx], ecx

; 800  : 					out[2][1]	= r[1][6];

	mov	edx, 4
	shl	edx, 0
	mov	eax, 4
	imul	esi, eax, 6
	mov	edi, DWORD PTR _r$[ebp+edx]
	push	2
	lea	ecx, DWORD PTR _out$[ebp]
	call	??Amatrix4x4@@QAEPAMH@Z			; matrix4x4::operator[]
	mov	ecx, 4
	shl	ecx, 0
	mov	edx, DWORD PTR [esi+edi]
	mov	DWORD PTR [eax+ecx], edx

; 801  : 					out[2][2]	= r[2][6];

	mov	eax, 4
	shl	eax, 1
	mov	ecx, 4
	imul	esi, ecx, 6
	mov	edi, DWORD PTR _r$[ebp+eax]
	push	2
	lea	ecx, DWORD PTR _out$[ebp]
	call	??Amatrix4x4@@QAEPAMH@Z			; matrix4x4::operator[]
	mov	edx, 4
	shl	edx, 1
	mov	ecx, DWORD PTR [esi+edi]
	mov	DWORD PTR [eax+edx], ecx

; 802  : 					out[2][3]	= r[3][6];

	mov	edx, 4
	imul	eax, edx, 3
	mov	ecx, 4
	imul	esi, ecx, 6
	mov	edi, DWORD PTR _r$[ebp+eax]
	push	2
	lea	ecx, DWORD PTR _out$[ebp]
	call	??Amatrix4x4@@QAEPAMH@Z			; matrix4x4::operator[]
	mov	edx, 4
	imul	ecx, edx, 3
	mov	edx, DWORD PTR [esi+edi]
	mov	DWORD PTR [eax+ecx], edx

; 803  : 					out[3][0]	= r[0][7];

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, 4
	imul	esi, edx, 7
	mov	edi, DWORD PTR _r$[ebp+ecx]
	push	3
	lea	ecx, DWORD PTR _out$[ebp]
	call	??Amatrix4x4@@QAEPAMH@Z			; matrix4x4::operator[]
	mov	ecx, 4
	imul	edx, ecx, 0
	mov	ecx, DWORD PTR [esi+edi]
	mov	DWORD PTR [eax+edx], ecx

; 804  : 					out[3][1]	= r[1][7];

	mov	edx, 4
	shl	edx, 0
	mov	eax, 4
	imul	esi, eax, 7
	mov	edi, DWORD PTR _r$[ebp+edx]
	push	3
	lea	ecx, DWORD PTR _out$[ebp]
	call	??Amatrix4x4@@QAEPAMH@Z			; matrix4x4::operator[]
	mov	ecx, 4
	shl	ecx, 0
	mov	edx, DWORD PTR [esi+edi]
	mov	DWORD PTR [eax+ecx], edx

; 805  : 					out[3][2]	= r[2][7];

	mov	eax, 4
	shl	eax, 1
	mov	ecx, 4
	imul	esi, ecx, 7
	mov	edi, DWORD PTR _r$[ebp+eax]
	push	3
	lea	ecx, DWORD PTR _out$[ebp]
	call	??Amatrix4x4@@QAEPAMH@Z			; matrix4x4::operator[]
	mov	edx, 4
	shl	edx, 1
	mov	ecx, DWORD PTR [esi+edi]
	mov	DWORD PTR [eax+edx], ecx

; 806  : 					out[3][3]	= r[3][7];

	mov	edx, 4
	imul	eax, edx, 3
	mov	ecx, 4
	imul	esi, ecx, 7
	mov	edi, DWORD PTR _r$[ebp+eax]
	push	3
	lea	ecx, DWORD PTR _out$[ebp]
	call	??Amatrix4x4@@QAEPAMH@Z			; matrix4x4::operator[]
	mov	edx, 4
	imul	ecx, edx, 3
	mov	edx, DWORD PTR [esi+edi]
	mov	DWORD PTR [eax+ecx], edx

; 807  : 
; 808  : 					return out;

	lea	eax, DWORD PTR _out$[ebp]
	push	eax
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0matrix4x4@@QAE@ABV0@@Z
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	SHORT $LN1@InvertFull
$LN19@InvertFull:

; 809  : 				}
; 810  : 			}
; 811  : 		}
; 812  : 	}
; 813  : 
; 814  : 	// failed
; 815  : 	return *this;

	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0matrix4x4@@QAE@ABV0@@Z
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
$LN1@InvertFull:

; 816  : }

	pop	edi
	pop	esi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	4
?InvertFull@matrix4x4@@QBE?AV1@XZ ENDP			; matrix4x4::InvertFull
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xashxt_v0.81_rev.1_with_sources\xashxt_v0.81_rev.1_src\game_shared\matrix.cpp
_TEXT	SEGMENT
tv619 = -156						; size = 4
tv617 = -152						; size = 4
tv615 = -148						; size = 4
tv613 = -144						; size = 4
tv611 = -140						; size = 4
tv609 = -136						; size = 4
tv607 = -132						; size = 4
tv605 = -128						; size = 4
tv603 = -124						; size = 4
tv601 = -120						; size = 4
tv599 = -116						; size = 4
tv597 = -112						; size = 4
tv595 = -108						; size = 4
tv593 = -104						; size = 4
tv591 = -100						; size = 4
tv589 = -96						; size = 4
tv587 = -92						; size = 4
tv585 = -88						; size = 4
tv583 = -84						; size = 4
tv581 = -80						; size = 4
_scale$ = -76						; size = 4
_this$ = -72						; size = 4
_out$ = -68						; size = 64
__$ArrayPad$ = -4					; size = 4
___$ReturnUdt$ = 8					; size = 4
?Invert@matrix4x4@@QBE?AV1@XZ PROC			; matrix4x4::Invert
; _this$ = ecx

; 521  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 156				; 0000009cH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 522  : 	// we only support uniform scaling, so assume the first row is enough
; 523  : 	// (note the lack of sqrt here, because we're trying to undo the scaling,
; 524  : 	// this means multiplying by the inverse scale twice - squaring it, which
; 525  : 	// makes the sqrt a waste of time)
; 526  : 	float scale = 1.0 / (mat[0][0] * mat[0][0] + mat[0][1] * mat[0][1] + mat[0][2] * mat[0][2]);

	mov	eax, 16					; 00000010H
	imul	ecx, eax, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector4D@@QBEPBMXZ			; Vector4D::operator float const *
	mov	esi, eax
	mov	ecx, 4
	imul	edi, ecx, 0
	mov	edx, 16					; 00000010H
	imul	ecx, edx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector4D@@QBEPBMXZ			; Vector4D::operator float const *
	mov	ecx, 4
	imul	edx, ecx, 0
	movss	xmm0, DWORD PTR [esi+edi]
	mulss	xmm0, DWORD PTR [eax+edx]
	mov	eax, 16					; 00000010H
	imul	ecx, eax, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv581[ebp], xmm0
	call	??BVector4D@@QBEPBMXZ			; Vector4D::operator float const *
	mov	esi, eax
	mov	edi, 4
	shl	edi, 0
	mov	ecx, 16					; 00000010H
	imul	ecx, ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector4D@@QBEPBMXZ			; Vector4D::operator float const *
	mov	edx, 4
	shl	edx, 0
	movss	xmm0, DWORD PTR [esi+edi]
	mulss	xmm0, DWORD PTR [eax+edx]
	movss	xmm1, DWORD PTR tv581[ebp]
	addss	xmm1, xmm0
	mov	eax, 16					; 00000010H
	imul	ecx, eax, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv583[ebp], xmm1
	call	??BVector4D@@QBEPBMXZ			; Vector4D::operator float const *
	mov	esi, eax
	mov	edi, 4
	shl	edi, 1
	mov	ecx, 16					; 00000010H
	imul	ecx, ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector4D@@QBEPBMXZ			; Vector4D::operator float const *
	mov	edx, 4
	shl	edx, 1
	movss	xmm0, DWORD PTR [esi+edi]
	mulss	xmm0, DWORD PTR [eax+edx]
	movss	xmm1, DWORD PTR tv583[ebp]
	addss	xmm1, xmm0
	cvtss2sd xmm0, xmm1
	movsd	xmm1, QWORD PTR __real@3ff0000000000000
	divsd	xmm1, xmm0
	cvtsd2ss xmm0, xmm1
	movss	DWORD PTR _scale$[ebp], xmm0

; 527  : 
; 528  : 	matrix4x4 out;

	lea	ecx, DWORD PTR _out$[ebp]
	call	??0matrix4x4@@QAE@XZ			; matrix4x4::matrix4x4

; 529  : 
; 530  : 	// invert the rotation by transposing and multiplying by the squared
; 531  : 	// recipricol of the input matrix scale as described above
; 532  : 	out[0][0] = mat[0][0] * scale;

	mov	eax, 16					; 00000010H
	imul	ecx, eax, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector4D@@QBEPBMXZ			; Vector4D::operator float const *
	mov	ecx, 4
	imul	edx, ecx, 0
	movss	xmm0, DWORD PTR [eax+edx]
	mulss	xmm0, DWORD PTR _scale$[ebp]
	push	0
	lea	ecx, DWORD PTR _out$[ebp]
	movss	DWORD PTR tv585[ebp], xmm0
	call	??Amatrix4x4@@QAEPAMH@Z			; matrix4x4::operator[]
	mov	ecx, 4
	imul	edx, ecx, 0
	movss	xmm0, DWORD PTR tv585[ebp]
	movss	DWORD PTR [eax+edx], xmm0

; 533  : 	out[1][0] = mat[0][1] * scale;

	mov	eax, 16					; 00000010H
	imul	ecx, eax, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector4D@@QBEPBMXZ			; Vector4D::operator float const *
	mov	ecx, 4
	shl	ecx, 0
	movss	xmm0, DWORD PTR [eax+ecx]
	mulss	xmm0, DWORD PTR _scale$[ebp]
	push	1
	lea	ecx, DWORD PTR _out$[ebp]
	movss	DWORD PTR tv587[ebp], xmm0
	call	??Amatrix4x4@@QAEPAMH@Z			; matrix4x4::operator[]
	mov	edx, 4
	imul	ecx, edx, 0
	movss	xmm0, DWORD PTR tv587[ebp]
	movss	DWORD PTR [eax+ecx], xmm0

; 534  : 	out[2][0] = mat[0][2] * scale;

	mov	edx, 16					; 00000010H
	imul	ecx, edx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector4D@@QBEPBMXZ			; Vector4D::operator float const *
	mov	ecx, 4
	shl	ecx, 1
	movss	xmm0, DWORD PTR [eax+ecx]
	mulss	xmm0, DWORD PTR _scale$[ebp]
	push	2
	lea	ecx, DWORD PTR _out$[ebp]
	movss	DWORD PTR tv589[ebp], xmm0
	call	??Amatrix4x4@@QAEPAMH@Z			; matrix4x4::operator[]
	mov	edx, 4
	imul	ecx, edx, 0
	movss	xmm0, DWORD PTR tv589[ebp]
	movss	DWORD PTR [eax+ecx], xmm0

; 535  : 	out[0][1] = mat[1][0] * scale;

	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector4D@@QBEPBMXZ			; Vector4D::operator float const *
	mov	edx, 4
	imul	ecx, edx, 0
	movss	xmm0, DWORD PTR [eax+ecx]
	mulss	xmm0, DWORD PTR _scale$[ebp]
	push	0
	lea	ecx, DWORD PTR _out$[ebp]
	movss	DWORD PTR tv591[ebp], xmm0
	call	??Amatrix4x4@@QAEPAMH@Z			; matrix4x4::operator[]
	mov	edx, 4
	shl	edx, 0
	movss	xmm0, DWORD PTR tv591[ebp]
	movss	DWORD PTR [eax+edx], xmm0

; 536  : 	out[1][1] = mat[1][1] * scale;

	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector4D@@QBEPBMXZ			; Vector4D::operator float const *
	mov	ecx, 4
	shl	ecx, 0
	movss	xmm0, DWORD PTR [eax+ecx]
	mulss	xmm0, DWORD PTR _scale$[ebp]
	push	1
	lea	ecx, DWORD PTR _out$[ebp]
	movss	DWORD PTR tv593[ebp], xmm0
	call	??Amatrix4x4@@QAEPAMH@Z			; matrix4x4::operator[]
	mov	edx, 4
	shl	edx, 0
	movss	xmm0, DWORD PTR tv593[ebp]
	movss	DWORD PTR [eax+edx], xmm0

; 537  : 	out[2][1] = mat[1][2] * scale;

	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector4D@@QBEPBMXZ			; Vector4D::operator float const *
	mov	ecx, 4
	shl	ecx, 1
	movss	xmm0, DWORD PTR [eax+ecx]
	mulss	xmm0, DWORD PTR _scale$[ebp]
	push	2
	lea	ecx, DWORD PTR _out$[ebp]
	movss	DWORD PTR tv595[ebp], xmm0
	call	??Amatrix4x4@@QAEPAMH@Z			; matrix4x4::operator[]
	mov	edx, 4
	shl	edx, 0
	movss	xmm0, DWORD PTR tv595[ebp]
	movss	DWORD PTR [eax+edx], xmm0

; 538  : 	out[0][2] = mat[2][0] * scale;

	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector4D@@QBEPBMXZ			; Vector4D::operator float const *
	mov	ecx, 4
	imul	edx, ecx, 0
	movss	xmm0, DWORD PTR [eax+edx]
	mulss	xmm0, DWORD PTR _scale$[ebp]
	push	0
	lea	ecx, DWORD PTR _out$[ebp]
	movss	DWORD PTR tv597[ebp], xmm0
	call	??Amatrix4x4@@QAEPAMH@Z			; matrix4x4::operator[]
	mov	ecx, 4
	shl	ecx, 1
	movss	xmm0, DWORD PTR tv597[ebp]
	movss	DWORD PTR [eax+ecx], xmm0

; 539  : 	out[1][2] = mat[2][1] * scale;

	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector4D@@QBEPBMXZ			; Vector4D::operator float const *
	mov	edx, 4
	shl	edx, 0
	movss	xmm0, DWORD PTR [eax+edx]
	mulss	xmm0, DWORD PTR _scale$[ebp]
	push	1
	lea	ecx, DWORD PTR _out$[ebp]
	movss	DWORD PTR tv599[ebp], xmm0
	call	??Amatrix4x4@@QAEPAMH@Z			; matrix4x4::operator[]
	mov	ecx, 4
	shl	ecx, 1
	movss	xmm0, DWORD PTR tv599[ebp]
	movss	DWORD PTR [eax+ecx], xmm0

; 540  : 	out[2][2] = mat[2][2] * scale;

	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector4D@@QBEPBMXZ			; Vector4D::operator float const *
	mov	edx, 4
	shl	edx, 1
	movss	xmm0, DWORD PTR [eax+edx]
	mulss	xmm0, DWORD PTR _scale$[ebp]
	push	2
	lea	ecx, DWORD PTR _out$[ebp]
	movss	DWORD PTR tv601[ebp], xmm0
	call	??Amatrix4x4@@QAEPAMH@Z			; matrix4x4::operator[]
	mov	ecx, 4
	shl	ecx, 1
	movss	xmm0, DWORD PTR tv601[ebp]
	movss	DWORD PTR [eax+ecx], xmm0

; 541  : 
; 542  : 	// invert the translate
; 543  : 	out[3][0] = -(mat[3][0] * out[0][0] + mat[3][1] * out[1][0] + mat[3][2] * out[2][0]);

	mov	edx, 16					; 00000010H
	imul	ecx, edx, 3
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector4D@@QBEPBMXZ			; Vector4D::operator float const *
	mov	esi, eax
	mov	eax, 4
	imul	edi, eax, 0
	push	0
	lea	ecx, DWORD PTR _out$[ebp]
	call	??Amatrix4x4@@QAEPAMH@Z			; matrix4x4::operator[]
	mov	ecx, 4
	imul	edx, ecx, 0
	movss	xmm0, DWORD PTR [esi+edi]
	mulss	xmm0, DWORD PTR [eax+edx]
	mov	eax, 16					; 00000010H
	imul	ecx, eax, 3
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv603[ebp], xmm0
	call	??BVector4D@@QBEPBMXZ			; Vector4D::operator float const *
	mov	esi, eax
	mov	edi, 4
	shl	edi, 0
	push	1
	lea	ecx, DWORD PTR _out$[ebp]
	call	??Amatrix4x4@@QAEPAMH@Z			; matrix4x4::operator[]
	mov	ecx, 4
	imul	edx, ecx, 0
	movss	xmm0, DWORD PTR [esi+edi]
	mulss	xmm0, DWORD PTR [eax+edx]
	movss	xmm1, DWORD PTR tv603[ebp]
	addss	xmm1, xmm0
	mov	eax, 16					; 00000010H
	imul	ecx, eax, 3
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv605[ebp], xmm1
	call	??BVector4D@@QBEPBMXZ			; Vector4D::operator float const *
	mov	esi, eax
	mov	edi, 4
	shl	edi, 1
	push	2
	lea	ecx, DWORD PTR _out$[ebp]
	call	??Amatrix4x4@@QAEPAMH@Z			; matrix4x4::operator[]
	mov	ecx, 4
	imul	edx, ecx, 0
	movss	xmm0, DWORD PTR [esi+edi]
	mulss	xmm0, DWORD PTR [eax+edx]
	movss	xmm1, DWORD PTR tv605[ebp]
	addss	xmm1, xmm0
	xorps	xmm1, DWORD PTR __xmm@80000000800000008000000080000000
	push	3
	lea	ecx, DWORD PTR _out$[ebp]
	movss	DWORD PTR tv607[ebp], xmm1
	call	??Amatrix4x4@@QAEPAMH@Z			; matrix4x4::operator[]
	mov	ecx, 4
	imul	edx, ecx, 0
	movss	xmm0, DWORD PTR tv607[ebp]
	movss	DWORD PTR [eax+edx], xmm0

; 544  : 	out[3][1] = -(mat[3][0] * out[0][1] + mat[3][1] * out[1][1] + mat[3][2] * out[2][1]);

	mov	eax, 16					; 00000010H
	imul	ecx, eax, 3
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector4D@@QBEPBMXZ			; Vector4D::operator float const *
	mov	esi, eax
	mov	ecx, 4
	imul	edi, ecx, 0
	push	0
	lea	ecx, DWORD PTR _out$[ebp]
	call	??Amatrix4x4@@QAEPAMH@Z			; matrix4x4::operator[]
	mov	edx, 4
	shl	edx, 0
	movss	xmm0, DWORD PTR [esi+edi]
	mulss	xmm0, DWORD PTR [eax+edx]
	mov	eax, 16					; 00000010H
	imul	ecx, eax, 3
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv609[ebp], xmm0
	call	??BVector4D@@QBEPBMXZ			; Vector4D::operator float const *
	mov	esi, eax
	mov	edi, 4
	shl	edi, 0
	push	1
	lea	ecx, DWORD PTR _out$[ebp]
	call	??Amatrix4x4@@QAEPAMH@Z			; matrix4x4::operator[]
	mov	ecx, 4
	shl	ecx, 0
	movss	xmm0, DWORD PTR [esi+edi]
	mulss	xmm0, DWORD PTR [eax+ecx]
	movss	xmm1, DWORD PTR tv609[ebp]
	addss	xmm1, xmm0
	mov	edx, 16					; 00000010H
	imul	ecx, edx, 3
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv611[ebp], xmm1
	call	??BVector4D@@QBEPBMXZ			; Vector4D::operator float const *
	mov	esi, eax
	mov	edi, 4
	shl	edi, 1
	push	2
	lea	ecx, DWORD PTR _out$[ebp]
	call	??Amatrix4x4@@QAEPAMH@Z			; matrix4x4::operator[]
	mov	ecx, 4
	shl	ecx, 0
	movss	xmm0, DWORD PTR [esi+edi]
	mulss	xmm0, DWORD PTR [eax+ecx]
	movss	xmm1, DWORD PTR tv611[ebp]
	addss	xmm1, xmm0
	xorps	xmm1, DWORD PTR __xmm@80000000800000008000000080000000
	push	3
	lea	ecx, DWORD PTR _out$[ebp]
	movss	DWORD PTR tv613[ebp], xmm1
	call	??Amatrix4x4@@QAEPAMH@Z			; matrix4x4::operator[]
	mov	edx, 4
	shl	edx, 0
	movss	xmm0, DWORD PTR tv613[ebp]
	movss	DWORD PTR [eax+edx], xmm0

; 545  : 	out[3][2] = -(mat[3][0] * out[0][2] + mat[3][1] * out[1][2] + mat[3][2] * out[2][2]);

	mov	eax, 16					; 00000010H
	imul	ecx, eax, 3
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector4D@@QBEPBMXZ			; Vector4D::operator float const *
	mov	esi, eax
	mov	ecx, 4
	imul	edi, ecx, 0
	push	0
	lea	ecx, DWORD PTR _out$[ebp]
	call	??Amatrix4x4@@QAEPAMH@Z			; matrix4x4::operator[]
	mov	edx, 4
	shl	edx, 1
	movss	xmm0, DWORD PTR [esi+edi]
	mulss	xmm0, DWORD PTR [eax+edx]
	mov	eax, 16					; 00000010H
	imul	ecx, eax, 3
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv615[ebp], xmm0
	call	??BVector4D@@QBEPBMXZ			; Vector4D::operator float const *
	mov	esi, eax
	mov	edi, 4
	shl	edi, 0
	push	1
	lea	ecx, DWORD PTR _out$[ebp]
	call	??Amatrix4x4@@QAEPAMH@Z			; matrix4x4::operator[]
	mov	ecx, 4
	shl	ecx, 1
	movss	xmm0, DWORD PTR [esi+edi]
	mulss	xmm0, DWORD PTR [eax+ecx]
	movss	xmm1, DWORD PTR tv615[ebp]
	addss	xmm1, xmm0
	mov	edx, 16					; 00000010H
	imul	ecx, edx, 3
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv617[ebp], xmm1
	call	??BVector4D@@QBEPBMXZ			; Vector4D::operator float const *
	mov	esi, eax
	mov	edi, 4
	shl	edi, 1
	push	2
	lea	ecx, DWORD PTR _out$[ebp]
	call	??Amatrix4x4@@QAEPAMH@Z			; matrix4x4::operator[]
	mov	ecx, 4
	shl	ecx, 1
	movss	xmm0, DWORD PTR [esi+edi]
	mulss	xmm0, DWORD PTR [eax+ecx]
	movss	xmm1, DWORD PTR tv617[ebp]
	addss	xmm1, xmm0
	xorps	xmm1, DWORD PTR __xmm@80000000800000008000000080000000
	push	3
	lea	ecx, DWORD PTR _out$[ebp]
	movss	DWORD PTR tv619[ebp], xmm1
	call	??Amatrix4x4@@QAEPAMH@Z			; matrix4x4::operator[]
	mov	edx, 4
	shl	edx, 1
	movss	xmm0, DWORD PTR tv619[ebp]
	movss	DWORD PTR [eax+edx], xmm0

; 546  : 
; 547  : 	// don't know if there's anything worth doing here
; 548  : 	out[0][3] = 0.0f;

	push	0
	lea	ecx, DWORD PTR _out$[ebp]
	call	??Amatrix4x4@@QAEPAMH@Z			; matrix4x4::operator[]
	mov	ecx, 4
	imul	edx, ecx, 3
	xorps	xmm0, xmm0
	movss	DWORD PTR [eax+edx], xmm0

; 549  : 	out[1][3] = 0.0f;

	push	1
	lea	ecx, DWORD PTR _out$[ebp]
	call	??Amatrix4x4@@QAEPAMH@Z			; matrix4x4::operator[]
	mov	ecx, 4
	imul	edx, ecx, 3
	xorps	xmm0, xmm0
	movss	DWORD PTR [eax+edx], xmm0

; 550  : 	out[2][3] = 0.0f;

	push	2
	lea	ecx, DWORD PTR _out$[ebp]
	call	??Amatrix4x4@@QAEPAMH@Z			; matrix4x4::operator[]
	mov	ecx, 4
	imul	edx, ecx, 3
	xorps	xmm0, xmm0
	movss	DWORD PTR [eax+edx], xmm0

; 551  : 	out[3][3] = 1.0f;

	push	3
	lea	ecx, DWORD PTR _out$[ebp]
	call	??Amatrix4x4@@QAEPAMH@Z			; matrix4x4::operator[]
	mov	ecx, 4
	imul	edx, ecx, 3
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [eax+edx], xmm0

; 552  : 
; 553  : 	return out;

	lea	eax, DWORD PTR _out$[ebp]
	push	eax
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0matrix4x4@@QAE@ABV0@@Z
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 554  : }

	pop	edi
	pop	esi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	4
?Invert@matrix4x4@@QBE?AV1@XZ ENDP			; matrix4x4::Invert
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xashxt_v0.81_rev.1_with_sources\xashxt_v0.81_rev.1_src\game_shared\matrix.cpp
_TEXT	SEGMENT
_tmp$ = -72						; size = 16
tv391 = -56						; size = 4
tv395 = -52						; size = 4
tv393 = -48						; size = 4
tv389 = -44						; size = 4
tv387 = -40						; size = 4
tv385 = -36						; size = 4
tv383 = -32						; size = 4
tv381 = -28						; size = 4
tv379 = -24						; size = 4
tv377 = -20						; size = 4
tv375 = -16						; size = 4
_scale$ = -12						; size = 4
_iscale$ = -8						; size = 4
_this$ = -4						; size = 4
_in$ = 8						; size = 4
_out$ = 12						; size = 4
?TransformStandardPlane@matrix4x4@@QAEXABUplane_s@@AAU2@@Z PROC ; matrix4x4::TransformStandardPlane
; _this$ = ecx

; 466  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 467  : 	float scale = sqrt( mat[0][0] * mat[0][0] + mat[1][0] * mat[1][0] + mat[2][0] * mat[2][0] );

	mov	eax, 16					; 00000010H
	imul	ecx, eax, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	esi, eax
	mov	ecx, 4
	imul	edi, ecx, 0
	mov	edx, 16					; 00000010H
	imul	ecx, edx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	ecx, 4
	imul	edx, ecx, 0
	movss	xmm0, DWORD PTR [esi+edi]
	mulss	xmm0, DWORD PTR [eax+edx]
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv375[ebp], xmm0
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	esi, eax
	mov	eax, 4
	imul	edi, eax, 0
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	ecx, 4
	imul	edx, ecx, 0
	movss	xmm0, DWORD PTR [esi+edi]
	mulss	xmm0, DWORD PTR [eax+edx]
	movss	xmm1, DWORD PTR tv375[ebp]
	addss	xmm1, xmm0
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv377[ebp], xmm1
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	esi, eax
	mov	eax, 4
	imul	edi, eax, 0
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	ecx, 4
	imul	edx, ecx, 0
	movss	xmm0, DWORD PTR [esi+edi]
	mulss	xmm0, DWORD PTR [eax+edx]
	movss	xmm1, DWORD PTR tv377[ebp]
	addss	xmm1, xmm0
	cvtss2sd xmm0, xmm1
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	call	_sqrt
	add	esp, 8
	fstp	DWORD PTR _scale$[ebp]

; 468  : 	float iscale = 1.0f / scale;

	movss	xmm0, DWORD PTR __real@3f800000
	divss	xmm0, DWORD PTR _scale$[ebp]
	movss	DWORD PTR _iscale$[ebp], xmm0

; 469  : 	plane_t tmp = in;

	mov	eax, DWORD PTR _in$[ebp]
	push	eax
	lea	ecx, DWORD PTR _tmp$[ebp]
	call	??0plane_s@@QAE@ABU0@@Z

; 470  : 
; 471  : 	tmp.normal.x = (in.normal.x * mat[0][0] + in.normal.y * mat[1][0] + in.normal.z * mat[2][0]) * iscale;

	mov	ecx, 16					; 00000010H
	imul	ecx, ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	edx, 4
	imul	ecx, edx, 0
	mov	edx, DWORD PTR _in$[ebp]
	movss	xmm0, DWORD PTR [edx]
	mulss	xmm0, DWORD PTR [eax+ecx]
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv379[ebp], xmm0
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	ecx, 4
	imul	edx, ecx, 0
	mov	ecx, DWORD PTR _in$[ebp]
	movss	xmm0, DWORD PTR [ecx+4]
	mulss	xmm0, DWORD PTR [eax+edx]
	movss	xmm1, DWORD PTR tv379[ebp]
	addss	xmm1, xmm0
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv381[ebp], xmm1
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	edx, 4
	imul	ecx, edx, 0
	mov	edx, DWORD PTR _in$[ebp]
	movss	xmm0, DWORD PTR [edx+8]
	mulss	xmm0, DWORD PTR [eax+ecx]
	movss	xmm1, DWORD PTR tv381[ebp]
	addss	xmm1, xmm0
	mulss	xmm1, DWORD PTR _iscale$[ebp]
	movss	DWORD PTR _tmp$[ebp], xmm1

; 472  : 	tmp.normal.y = (in.normal.x * mat[0][1] + in.normal.y * mat[1][1] + in.normal.z * mat[2][1]) * iscale;

	mov	eax, 16					; 00000010H
	imul	ecx, eax, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	ecx, 4
	shl	ecx, 0
	mov	edx, DWORD PTR _in$[ebp]
	movss	xmm0, DWORD PTR [edx]
	mulss	xmm0, DWORD PTR [eax+ecx]
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv383[ebp], xmm0
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	ecx, 4
	shl	ecx, 0
	mov	edx, DWORD PTR _in$[ebp]
	movss	xmm0, DWORD PTR [edx+4]
	mulss	xmm0, DWORD PTR [eax+ecx]
	movss	xmm1, DWORD PTR tv383[ebp]
	addss	xmm1, xmm0
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv385[ebp], xmm1
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	ecx, 4
	shl	ecx, 0
	mov	edx, DWORD PTR _in$[ebp]
	movss	xmm0, DWORD PTR [edx+8]
	mulss	xmm0, DWORD PTR [eax+ecx]
	movss	xmm1, DWORD PTR tv385[ebp]
	addss	xmm1, xmm0
	mulss	xmm1, DWORD PTR _iscale$[ebp]
	movss	DWORD PTR _tmp$[ebp+4], xmm1

; 473  : 	tmp.normal.z = (in.normal.x * mat[0][2] + in.normal.y * mat[1][2] + in.normal.z * mat[2][2]) * iscale;

	mov	eax, 16					; 00000010H
	imul	ecx, eax, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	ecx, 4
	shl	ecx, 1
	mov	edx, DWORD PTR _in$[ebp]
	movss	xmm0, DWORD PTR [edx]
	mulss	xmm0, DWORD PTR [eax+ecx]
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv387[ebp], xmm0
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	ecx, 4
	shl	ecx, 1
	mov	edx, DWORD PTR _in$[ebp]
	movss	xmm0, DWORD PTR [edx+4]
	mulss	xmm0, DWORD PTR [eax+ecx]
	movss	xmm1, DWORD PTR tv387[ebp]
	addss	xmm1, xmm0
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv389[ebp], xmm1
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	ecx, 4
	shl	ecx, 1
	mov	edx, DWORD PTR _in$[ebp]
	movss	xmm0, DWORD PTR [edx+8]
	mulss	xmm0, DWORD PTR [eax+ecx]
	movss	xmm1, DWORD PTR tv389[ebp]
	addss	xmm1, xmm0
	mulss	xmm1, DWORD PTR _iscale$[ebp]
	movss	DWORD PTR _tmp$[ebp+8], xmm1

; 474  : 	tmp.dist = in.dist * scale - ( tmp.normal.x * mat[3][0] + tmp.normal.y * mat[3][1] + tmp.normal.z * mat[3][2] );

	mov	eax, DWORD PTR _in$[ebp]
	movss	xmm0, DWORD PTR [eax+12]
	mulss	xmm0, DWORD PTR _scale$[ebp]
	mov	ecx, 16					; 00000010H
	imul	ecx, ecx, 3
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv391[ebp], xmm0
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	edx, 4
	imul	ecx, edx, 0
	movss	xmm0, DWORD PTR _tmp$[ebp]
	mulss	xmm0, DWORD PTR [eax+ecx]
	mov	edx, 16					; 00000010H
	imul	ecx, edx, 3
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv393[ebp], xmm0
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	ecx, 4
	shl	ecx, 0
	movss	xmm0, DWORD PTR _tmp$[ebp+4]
	mulss	xmm0, DWORD PTR [eax+ecx]
	movss	xmm1, DWORD PTR tv393[ebp]
	addss	xmm1, xmm0
	mov	edx, 16					; 00000010H
	imul	ecx, edx, 3
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv395[ebp], xmm1
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	ecx, 4
	shl	ecx, 1
	movss	xmm0, DWORD PTR _tmp$[ebp+8]
	mulss	xmm0, DWORD PTR [eax+ecx]
	movss	xmm1, DWORD PTR tv395[ebp]
	addss	xmm1, xmm0
	movss	xmm0, DWORD PTR tv391[ebp]
	subss	xmm0, xmm1
	movss	DWORD PTR _tmp$[ebp+12], xmm0

; 475  : 
; 476  : 	out = tmp;

	mov	edx, DWORD PTR _out$[ebp]
	mov	eax, DWORD PTR _tmp$[ebp]
	mov	DWORD PTR [edx], eax
	mov	ecx, DWORD PTR _tmp$[ebp+4]
	mov	DWORD PTR [edx+4], ecx
	mov	eax, DWORD PTR _tmp$[ebp+8]
	mov	DWORD PTR [edx+8], eax
	mov	ecx, DWORD PTR _tmp$[ebp+12]
	mov	DWORD PTR [edx+12], ecx

; 477  : }

	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	8
?TransformStandardPlane@matrix4x4@@QAEXABUplane_s@@AAU2@@Z ENDP ; matrix4x4::TransformStandardPlane
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xashxt_v0.81_rev.1_with_sources\xashxt_v0.81_rev.1_src\game_shared\matrix.cpp
_TEXT	SEGMENT
tv393 = -80						; size = 4
tv397 = -76						; size = 4
tv395 = -72						; size = 4
tv391 = -68						; size = 4
tv389 = -64						; size = 4
tv387 = -60						; size = 4
tv385 = -56						; size = 4
tv383 = -52						; size = 4
tv381 = -48						; size = 4
tv379 = -44						; size = 4
tv377 = -40						; size = 4
_scale$ = -36						; size = 4
_iscale$ = -32						; size = 4
_this$ = -28						; size = 4
_tmp$ = -24						; size = 20
__$ArrayPad$ = -4					; size = 4
_in$ = 8						; size = 4
_out$ = 12						; size = 4
?TransformStandardPlane@matrix4x4@@QAEXABUmplane_s@@AAU2@@Z PROC ; matrix4x4::TransformStandardPlane
; _this$ = ecx

; 452  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 80					; 00000050H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 453  : 	float scale = sqrt( mat[0][0] * mat[0][0] + mat[1][0] * mat[1][0] + mat[2][0] * mat[2][0] );

	mov	eax, 16					; 00000010H
	imul	ecx, eax, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	esi, eax
	mov	ecx, 4
	imul	edi, ecx, 0
	mov	edx, 16					; 00000010H
	imul	ecx, edx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	ecx, 4
	imul	edx, ecx, 0
	movss	xmm0, DWORD PTR [esi+edi]
	mulss	xmm0, DWORD PTR [eax+edx]
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv377[ebp], xmm0
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	esi, eax
	mov	eax, 4
	imul	edi, eax, 0
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	ecx, 4
	imul	edx, ecx, 0
	movss	xmm0, DWORD PTR [esi+edi]
	mulss	xmm0, DWORD PTR [eax+edx]
	movss	xmm1, DWORD PTR tv377[ebp]
	addss	xmm1, xmm0
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv379[ebp], xmm1
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	esi, eax
	mov	eax, 4
	imul	edi, eax, 0
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	ecx, 4
	imul	edx, ecx, 0
	movss	xmm0, DWORD PTR [esi+edi]
	mulss	xmm0, DWORD PTR [eax+edx]
	movss	xmm1, DWORD PTR tv379[ebp]
	addss	xmm1, xmm0
	cvtss2sd xmm0, xmm1
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	call	_sqrt
	add	esp, 8
	fstp	DWORD PTR _scale$[ebp]

; 454  : 	float iscale = 1.0f / scale;

	movss	xmm0, DWORD PTR __real@3f800000
	divss	xmm0, DWORD PTR _scale$[ebp]
	movss	DWORD PTR _iscale$[ebp], xmm0

; 455  : 	mplane_t tmp = in;

	mov	eax, DWORD PTR _in$[ebp]
	push	eax
	lea	ecx, DWORD PTR _tmp$[ebp]
	call	??0mplane_s@@QAE@ABU0@@Z

; 456  : 
; 457  : 	tmp.normal.x = (in.normal.x * mat[0][0] + in.normal.y * mat[1][0] + in.normal.z * mat[2][0]) * iscale;

	mov	ecx, 16					; 00000010H
	imul	ecx, ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	edx, 4
	imul	ecx, edx, 0
	mov	edx, DWORD PTR _in$[ebp]
	movss	xmm0, DWORD PTR [edx]
	mulss	xmm0, DWORD PTR [eax+ecx]
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv381[ebp], xmm0
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	ecx, 4
	imul	edx, ecx, 0
	mov	ecx, DWORD PTR _in$[ebp]
	movss	xmm0, DWORD PTR [ecx+4]
	mulss	xmm0, DWORD PTR [eax+edx]
	movss	xmm1, DWORD PTR tv381[ebp]
	addss	xmm1, xmm0
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv383[ebp], xmm1
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	edx, 4
	imul	ecx, edx, 0
	mov	edx, DWORD PTR _in$[ebp]
	movss	xmm0, DWORD PTR [edx+8]
	mulss	xmm0, DWORD PTR [eax+ecx]
	movss	xmm1, DWORD PTR tv383[ebp]
	addss	xmm1, xmm0
	mulss	xmm1, DWORD PTR _iscale$[ebp]
	movss	DWORD PTR _tmp$[ebp], xmm1

; 458  : 	tmp.normal.y = (in.normal.x * mat[0][1] + in.normal.y * mat[1][1] + in.normal.z * mat[2][1]) * iscale;

	mov	eax, 16					; 00000010H
	imul	ecx, eax, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	ecx, 4
	shl	ecx, 0
	mov	edx, DWORD PTR _in$[ebp]
	movss	xmm0, DWORD PTR [edx]
	mulss	xmm0, DWORD PTR [eax+ecx]
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv385[ebp], xmm0
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	ecx, 4
	shl	ecx, 0
	mov	edx, DWORD PTR _in$[ebp]
	movss	xmm0, DWORD PTR [edx+4]
	mulss	xmm0, DWORD PTR [eax+ecx]
	movss	xmm1, DWORD PTR tv385[ebp]
	addss	xmm1, xmm0
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv387[ebp], xmm1
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	ecx, 4
	shl	ecx, 0
	mov	edx, DWORD PTR _in$[ebp]
	movss	xmm0, DWORD PTR [edx+8]
	mulss	xmm0, DWORD PTR [eax+ecx]
	movss	xmm1, DWORD PTR tv387[ebp]
	addss	xmm1, xmm0
	mulss	xmm1, DWORD PTR _iscale$[ebp]
	movss	DWORD PTR _tmp$[ebp+4], xmm1

; 459  : 	tmp.normal.z = (in.normal.x * mat[0][2] + in.normal.y * mat[1][2] + in.normal.z * mat[2][2]) * iscale;

	mov	eax, 16					; 00000010H
	imul	ecx, eax, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	ecx, 4
	shl	ecx, 1
	mov	edx, DWORD PTR _in$[ebp]
	movss	xmm0, DWORD PTR [edx]
	mulss	xmm0, DWORD PTR [eax+ecx]
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv389[ebp], xmm0
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	ecx, 4
	shl	ecx, 1
	mov	edx, DWORD PTR _in$[ebp]
	movss	xmm0, DWORD PTR [edx+4]
	mulss	xmm0, DWORD PTR [eax+ecx]
	movss	xmm1, DWORD PTR tv389[ebp]
	addss	xmm1, xmm0
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv391[ebp], xmm1
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	ecx, 4
	shl	ecx, 1
	mov	edx, DWORD PTR _in$[ebp]
	movss	xmm0, DWORD PTR [edx+8]
	mulss	xmm0, DWORD PTR [eax+ecx]
	movss	xmm1, DWORD PTR tv391[ebp]
	addss	xmm1, xmm0
	mulss	xmm1, DWORD PTR _iscale$[ebp]
	movss	DWORD PTR _tmp$[ebp+8], xmm1

; 460  : 	tmp.dist = in.dist * scale - ( tmp.normal.x * mat[3][0] + tmp.normal.y * mat[3][1] + tmp.normal.z * mat[3][2] );

	mov	eax, DWORD PTR _in$[ebp]
	movss	xmm0, DWORD PTR [eax+12]
	mulss	xmm0, DWORD PTR _scale$[ebp]
	mov	ecx, 16					; 00000010H
	imul	ecx, ecx, 3
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv393[ebp], xmm0
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	edx, 4
	imul	ecx, edx, 0
	movss	xmm0, DWORD PTR _tmp$[ebp]
	mulss	xmm0, DWORD PTR [eax+ecx]
	mov	edx, 16					; 00000010H
	imul	ecx, edx, 3
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv395[ebp], xmm0
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	ecx, 4
	shl	ecx, 0
	movss	xmm0, DWORD PTR _tmp$[ebp+4]
	mulss	xmm0, DWORD PTR [eax+ecx]
	movss	xmm1, DWORD PTR tv395[ebp]
	addss	xmm1, xmm0
	mov	edx, 16					; 00000010H
	imul	ecx, edx, 3
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv397[ebp], xmm1
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	ecx, 4
	shl	ecx, 1
	movss	xmm0, DWORD PTR _tmp$[ebp+8]
	mulss	xmm0, DWORD PTR [eax+ecx]
	movss	xmm1, DWORD PTR tv397[ebp]
	addss	xmm1, xmm0
	movss	xmm0, DWORD PTR tv393[ebp]
	subss	xmm0, xmm1
	movss	DWORD PTR _tmp$[ebp+12], xmm0

; 461  : 
; 462  : 	out = tmp;

	mov	edx, DWORD PTR _out$[ebp]
	mov	eax, DWORD PTR _tmp$[ebp]
	mov	DWORD PTR [edx], eax
	mov	ecx, DWORD PTR _tmp$[ebp+4]
	mov	DWORD PTR [edx+4], ecx
	mov	eax, DWORD PTR _tmp$[ebp+8]
	mov	DWORD PTR [edx+8], eax
	mov	ecx, DWORD PTR _tmp$[ebp+12]
	mov	DWORD PTR [edx+12], ecx
	mov	eax, DWORD PTR _tmp$[ebp+16]
	mov	DWORD PTR [edx+16], eax

; 463  : }

	pop	edi
	pop	esi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	8
?TransformStandardPlane@matrix4x4@@QAEXABUmplane_s@@AAU2@@Z ENDP ; matrix4x4::TransformStandardPlane
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xashxt_v0.81_rev.1_with_sources\xashxt_v0.81_rev.1_src\game_shared\matrix.cpp
_TEXT	SEGMENT
_tmp$ = -72						; size = 16
tv391 = -56						; size = 4
tv395 = -52						; size = 4
tv393 = -48						; size = 4
tv389 = -44						; size = 4
tv387 = -40						; size = 4
tv385 = -36						; size = 4
tv383 = -32						; size = 4
tv381 = -28						; size = 4
tv379 = -24						; size = 4
tv377 = -20						; size = 4
tv375 = -16						; size = 4
_scale$ = -12						; size = 4
_iscale$ = -8						; size = 4
_this$ = -4						; size = 4
_in$ = 8						; size = 4
_out$ = 12						; size = 4
?TransformPositivePlane@matrix4x4@@QAEXABUplane_s@@AAU2@@Z PROC ; matrix4x4::TransformPositivePlane
; _this$ = ecx

; 438  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 439  : 	float scale = sqrt( mat[0][0] * mat[0][0] + mat[1][0] * mat[1][0] + mat[2][0] * mat[2][0] );

	mov	eax, 16					; 00000010H
	imul	ecx, eax, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	esi, eax
	mov	ecx, 4
	imul	edi, ecx, 0
	mov	edx, 16					; 00000010H
	imul	ecx, edx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	ecx, 4
	imul	edx, ecx, 0
	movss	xmm0, DWORD PTR [esi+edi]
	mulss	xmm0, DWORD PTR [eax+edx]
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv375[ebp], xmm0
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	esi, eax
	mov	eax, 4
	imul	edi, eax, 0
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	ecx, 4
	imul	edx, ecx, 0
	movss	xmm0, DWORD PTR [esi+edi]
	mulss	xmm0, DWORD PTR [eax+edx]
	movss	xmm1, DWORD PTR tv375[ebp]
	addss	xmm1, xmm0
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv377[ebp], xmm1
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	esi, eax
	mov	eax, 4
	imul	edi, eax, 0
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	ecx, 4
	imul	edx, ecx, 0
	movss	xmm0, DWORD PTR [esi+edi]
	mulss	xmm0, DWORD PTR [eax+edx]
	movss	xmm1, DWORD PTR tv377[ebp]
	addss	xmm1, xmm0
	cvtss2sd xmm0, xmm1
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	call	_sqrt
	add	esp, 8
	fstp	DWORD PTR _scale$[ebp]

; 440  : 	float iscale = 1.0f / scale;

	movss	xmm0, DWORD PTR __real@3f800000
	divss	xmm0, DWORD PTR _scale$[ebp]
	movss	DWORD PTR _iscale$[ebp], xmm0

; 441  : 	plane_t tmp = in;

	mov	eax, DWORD PTR _in$[ebp]
	push	eax
	lea	ecx, DWORD PTR _tmp$[ebp]
	call	??0plane_s@@QAE@ABU0@@Z

; 442  : 
; 443  : 	tmp.normal.x = (in.normal.x * mat[0][0] + in.normal.y * mat[1][0] + in.normal.z * mat[2][0]) * iscale;

	mov	ecx, 16					; 00000010H
	imul	ecx, ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	edx, 4
	imul	ecx, edx, 0
	mov	edx, DWORD PTR _in$[ebp]
	movss	xmm0, DWORD PTR [edx]
	mulss	xmm0, DWORD PTR [eax+ecx]
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv379[ebp], xmm0
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	ecx, 4
	imul	edx, ecx, 0
	mov	ecx, DWORD PTR _in$[ebp]
	movss	xmm0, DWORD PTR [ecx+4]
	mulss	xmm0, DWORD PTR [eax+edx]
	movss	xmm1, DWORD PTR tv379[ebp]
	addss	xmm1, xmm0
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv381[ebp], xmm1
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	edx, 4
	imul	ecx, edx, 0
	mov	edx, DWORD PTR _in$[ebp]
	movss	xmm0, DWORD PTR [edx+8]
	mulss	xmm0, DWORD PTR [eax+ecx]
	movss	xmm1, DWORD PTR tv381[ebp]
	addss	xmm1, xmm0
	mulss	xmm1, DWORD PTR _iscale$[ebp]
	movss	DWORD PTR _tmp$[ebp], xmm1

; 444  : 	tmp.normal.y = (in.normal.x * mat[0][1] + in.normal.y * mat[1][1] + in.normal.z * mat[2][1]) * iscale;

	mov	eax, 16					; 00000010H
	imul	ecx, eax, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	ecx, 4
	shl	ecx, 0
	mov	edx, DWORD PTR _in$[ebp]
	movss	xmm0, DWORD PTR [edx]
	mulss	xmm0, DWORD PTR [eax+ecx]
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv383[ebp], xmm0
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	ecx, 4
	shl	ecx, 0
	mov	edx, DWORD PTR _in$[ebp]
	movss	xmm0, DWORD PTR [edx+4]
	mulss	xmm0, DWORD PTR [eax+ecx]
	movss	xmm1, DWORD PTR tv383[ebp]
	addss	xmm1, xmm0
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv385[ebp], xmm1
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	ecx, 4
	shl	ecx, 0
	mov	edx, DWORD PTR _in$[ebp]
	movss	xmm0, DWORD PTR [edx+8]
	mulss	xmm0, DWORD PTR [eax+ecx]
	movss	xmm1, DWORD PTR tv385[ebp]
	addss	xmm1, xmm0
	mulss	xmm1, DWORD PTR _iscale$[ebp]
	movss	DWORD PTR _tmp$[ebp+4], xmm1

; 445  : 	tmp.normal.z = (in.normal.x * mat[0][2] + in.normal.y * mat[1][2] + in.normal.z * mat[2][2]) * iscale;

	mov	eax, 16					; 00000010H
	imul	ecx, eax, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	ecx, 4
	shl	ecx, 1
	mov	edx, DWORD PTR _in$[ebp]
	movss	xmm0, DWORD PTR [edx]
	mulss	xmm0, DWORD PTR [eax+ecx]
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv387[ebp], xmm0
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	ecx, 4
	shl	ecx, 1
	mov	edx, DWORD PTR _in$[ebp]
	movss	xmm0, DWORD PTR [edx+4]
	mulss	xmm0, DWORD PTR [eax+ecx]
	movss	xmm1, DWORD PTR tv387[ebp]
	addss	xmm1, xmm0
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv389[ebp], xmm1
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	ecx, 4
	shl	ecx, 1
	mov	edx, DWORD PTR _in$[ebp]
	movss	xmm0, DWORD PTR [edx+8]
	mulss	xmm0, DWORD PTR [eax+ecx]
	movss	xmm1, DWORD PTR tv389[ebp]
	addss	xmm1, xmm0
	mulss	xmm1, DWORD PTR _iscale$[ebp]
	movss	DWORD PTR _tmp$[ebp+8], xmm1

; 446  : 	tmp.dist = in.dist * scale + ( tmp.normal.x * mat[3][0] + tmp.normal.y * mat[3][1] + tmp.normal.z * mat[3][2] );

	mov	eax, DWORD PTR _in$[ebp]
	movss	xmm0, DWORD PTR [eax+12]
	mulss	xmm0, DWORD PTR _scale$[ebp]
	mov	ecx, 16					; 00000010H
	imul	ecx, ecx, 3
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv391[ebp], xmm0
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	edx, 4
	imul	ecx, edx, 0
	movss	xmm0, DWORD PTR _tmp$[ebp]
	mulss	xmm0, DWORD PTR [eax+ecx]
	mov	edx, 16					; 00000010H
	imul	ecx, edx, 3
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv393[ebp], xmm0
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	ecx, 4
	shl	ecx, 0
	movss	xmm0, DWORD PTR _tmp$[ebp+4]
	mulss	xmm0, DWORD PTR [eax+ecx]
	movss	xmm1, DWORD PTR tv393[ebp]
	addss	xmm1, xmm0
	mov	edx, 16					; 00000010H
	imul	ecx, edx, 3
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv395[ebp], xmm1
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	ecx, 4
	shl	ecx, 1
	movss	xmm0, DWORD PTR _tmp$[ebp+8]
	mulss	xmm0, DWORD PTR [eax+ecx]
	movss	xmm1, DWORD PTR tv395[ebp]
	addss	xmm1, xmm0
	movss	xmm0, DWORD PTR tv391[ebp]
	addss	xmm0, xmm1
	movss	DWORD PTR _tmp$[ebp+12], xmm0

; 447  : 
; 448  : 	out = tmp;

	mov	edx, DWORD PTR _out$[ebp]
	mov	eax, DWORD PTR _tmp$[ebp]
	mov	DWORD PTR [edx], eax
	mov	ecx, DWORD PTR _tmp$[ebp+4]
	mov	DWORD PTR [edx+4], ecx
	mov	eax, DWORD PTR _tmp$[ebp+8]
	mov	DWORD PTR [edx+8], eax
	mov	ecx, DWORD PTR _tmp$[ebp+12]
	mov	DWORD PTR [edx+12], ecx

; 449  : }

	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	8
?TransformPositivePlane@matrix4x4@@QAEXABUplane_s@@AAU2@@Z ENDP ; matrix4x4::TransformPositivePlane
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xashxt_v0.81_rev.1_with_sources\xashxt_v0.81_rev.1_src\game_shared\matrix.cpp
_TEXT	SEGMENT
tv393 = -80						; size = 4
tv397 = -76						; size = 4
tv395 = -72						; size = 4
tv391 = -68						; size = 4
tv389 = -64						; size = 4
tv387 = -60						; size = 4
tv385 = -56						; size = 4
tv383 = -52						; size = 4
tv381 = -48						; size = 4
tv379 = -44						; size = 4
tv377 = -40						; size = 4
_scale$ = -36						; size = 4
_iscale$ = -32						; size = 4
_this$ = -28						; size = 4
_tmp$ = -24						; size = 20
__$ArrayPad$ = -4					; size = 4
_in$ = 8						; size = 4
_out$ = 12						; size = 4
?TransformPositivePlane@matrix4x4@@QAEXABUmplane_s@@AAU2@@Z PROC ; matrix4x4::TransformPositivePlane
; _this$ = ecx

; 424  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 80					; 00000050H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 425  : 	float scale = sqrt( mat[0][0] * mat[0][0] + mat[1][0] * mat[1][0] + mat[2][0] * mat[2][0] );

	mov	eax, 16					; 00000010H
	imul	ecx, eax, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	esi, eax
	mov	ecx, 4
	imul	edi, ecx, 0
	mov	edx, 16					; 00000010H
	imul	ecx, edx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	ecx, 4
	imul	edx, ecx, 0
	movss	xmm0, DWORD PTR [esi+edi]
	mulss	xmm0, DWORD PTR [eax+edx]
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv377[ebp], xmm0
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	esi, eax
	mov	eax, 4
	imul	edi, eax, 0
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	ecx, 4
	imul	edx, ecx, 0
	movss	xmm0, DWORD PTR [esi+edi]
	mulss	xmm0, DWORD PTR [eax+edx]
	movss	xmm1, DWORD PTR tv377[ebp]
	addss	xmm1, xmm0
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv379[ebp], xmm1
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	esi, eax
	mov	eax, 4
	imul	edi, eax, 0
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	ecx, 4
	imul	edx, ecx, 0
	movss	xmm0, DWORD PTR [esi+edi]
	mulss	xmm0, DWORD PTR [eax+edx]
	movss	xmm1, DWORD PTR tv379[ebp]
	addss	xmm1, xmm0
	cvtss2sd xmm0, xmm1
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	call	_sqrt
	add	esp, 8
	fstp	DWORD PTR _scale$[ebp]

; 426  : 	float iscale = 1.0f / scale;

	movss	xmm0, DWORD PTR __real@3f800000
	divss	xmm0, DWORD PTR _scale$[ebp]
	movss	DWORD PTR _iscale$[ebp], xmm0

; 427  : 	mplane_t tmp = in;

	mov	eax, DWORD PTR _in$[ebp]
	push	eax
	lea	ecx, DWORD PTR _tmp$[ebp]
	call	??0mplane_s@@QAE@ABU0@@Z

; 428  : 
; 429  : 	tmp.normal.x = (in.normal.x * mat[0][0] + in.normal.y * mat[1][0] + in.normal.z * mat[2][0]) * iscale;

	mov	ecx, 16					; 00000010H
	imul	ecx, ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	edx, 4
	imul	ecx, edx, 0
	mov	edx, DWORD PTR _in$[ebp]
	movss	xmm0, DWORD PTR [edx]
	mulss	xmm0, DWORD PTR [eax+ecx]
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv381[ebp], xmm0
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	ecx, 4
	imul	edx, ecx, 0
	mov	ecx, DWORD PTR _in$[ebp]
	movss	xmm0, DWORD PTR [ecx+4]
	mulss	xmm0, DWORD PTR [eax+edx]
	movss	xmm1, DWORD PTR tv381[ebp]
	addss	xmm1, xmm0
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv383[ebp], xmm1
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	edx, 4
	imul	ecx, edx, 0
	mov	edx, DWORD PTR _in$[ebp]
	movss	xmm0, DWORD PTR [edx+8]
	mulss	xmm0, DWORD PTR [eax+ecx]
	movss	xmm1, DWORD PTR tv383[ebp]
	addss	xmm1, xmm0
	mulss	xmm1, DWORD PTR _iscale$[ebp]
	movss	DWORD PTR _tmp$[ebp], xmm1

; 430  : 	tmp.normal.y = (in.normal.x * mat[0][1] + in.normal.y * mat[1][1] + in.normal.z * mat[2][1]) * iscale;

	mov	eax, 16					; 00000010H
	imul	ecx, eax, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	ecx, 4
	shl	ecx, 0
	mov	edx, DWORD PTR _in$[ebp]
	movss	xmm0, DWORD PTR [edx]
	mulss	xmm0, DWORD PTR [eax+ecx]
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv385[ebp], xmm0
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	ecx, 4
	shl	ecx, 0
	mov	edx, DWORD PTR _in$[ebp]
	movss	xmm0, DWORD PTR [edx+4]
	mulss	xmm0, DWORD PTR [eax+ecx]
	movss	xmm1, DWORD PTR tv385[ebp]
	addss	xmm1, xmm0
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv387[ebp], xmm1
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	ecx, 4
	shl	ecx, 0
	mov	edx, DWORD PTR _in$[ebp]
	movss	xmm0, DWORD PTR [edx+8]
	mulss	xmm0, DWORD PTR [eax+ecx]
	movss	xmm1, DWORD PTR tv387[ebp]
	addss	xmm1, xmm0
	mulss	xmm1, DWORD PTR _iscale$[ebp]
	movss	DWORD PTR _tmp$[ebp+4], xmm1

; 431  : 	tmp.normal.z = (in.normal.x * mat[0][2] + in.normal.y * mat[1][2] + in.normal.z * mat[2][2]) * iscale;

	mov	eax, 16					; 00000010H
	imul	ecx, eax, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	ecx, 4
	shl	ecx, 1
	mov	edx, DWORD PTR _in$[ebp]
	movss	xmm0, DWORD PTR [edx]
	mulss	xmm0, DWORD PTR [eax+ecx]
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv389[ebp], xmm0
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	ecx, 4
	shl	ecx, 1
	mov	edx, DWORD PTR _in$[ebp]
	movss	xmm0, DWORD PTR [edx+4]
	mulss	xmm0, DWORD PTR [eax+ecx]
	movss	xmm1, DWORD PTR tv389[ebp]
	addss	xmm1, xmm0
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv391[ebp], xmm1
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	ecx, 4
	shl	ecx, 1
	mov	edx, DWORD PTR _in$[ebp]
	movss	xmm0, DWORD PTR [edx+8]
	mulss	xmm0, DWORD PTR [eax+ecx]
	movss	xmm1, DWORD PTR tv391[ebp]
	addss	xmm1, xmm0
	mulss	xmm1, DWORD PTR _iscale$[ebp]
	movss	DWORD PTR _tmp$[ebp+8], xmm1

; 432  : 	tmp.dist = in.dist * scale + ( tmp.normal.x * mat[3][0] + tmp.normal.y * mat[3][1] + tmp.normal.z * mat[3][2] );

	mov	eax, DWORD PTR _in$[ebp]
	movss	xmm0, DWORD PTR [eax+12]
	mulss	xmm0, DWORD PTR _scale$[ebp]
	mov	ecx, 16					; 00000010H
	imul	ecx, ecx, 3
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv393[ebp], xmm0
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	edx, 4
	imul	ecx, edx, 0
	movss	xmm0, DWORD PTR _tmp$[ebp]
	mulss	xmm0, DWORD PTR [eax+ecx]
	mov	edx, 16					; 00000010H
	imul	ecx, edx, 3
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv395[ebp], xmm0
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	ecx, 4
	shl	ecx, 0
	movss	xmm0, DWORD PTR _tmp$[ebp+4]
	mulss	xmm0, DWORD PTR [eax+ecx]
	movss	xmm1, DWORD PTR tv395[ebp]
	addss	xmm1, xmm0
	mov	edx, 16					; 00000010H
	imul	ecx, edx, 3
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv397[ebp], xmm1
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	ecx, 4
	shl	ecx, 1
	movss	xmm0, DWORD PTR _tmp$[ebp+8]
	mulss	xmm0, DWORD PTR [eax+ecx]
	movss	xmm1, DWORD PTR tv397[ebp]
	addss	xmm1, xmm0
	movss	xmm0, DWORD PTR tv393[ebp]
	addss	xmm0, xmm1
	movss	DWORD PTR _tmp$[ebp+12], xmm0

; 433  : 
; 434  : 	out = tmp;

	mov	edx, DWORD PTR _out$[ebp]
	mov	eax, DWORD PTR _tmp$[ebp]
	mov	DWORD PTR [edx], eax
	mov	ecx, DWORD PTR _tmp$[ebp+4]
	mov	DWORD PTR [edx+4], ecx
	mov	eax, DWORD PTR _tmp$[ebp+8]
	mov	DWORD PTR [edx+8], eax
	mov	ecx, DWORD PTR _tmp$[ebp+12]
	mov	DWORD PTR [edx+12], ecx
	mov	eax, DWORD PTR _tmp$[ebp+16]
	mov	DWORD PTR [edx+16], eax

; 435  : }

	pop	edi
	pop	esi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	8
?TransformPositivePlane@matrix4x4@@QAEXABUmplane_s@@AAU2@@Z ENDP ; matrix4x4::TransformPositivePlane
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xashxt_v0.81_rev.1_with_sources\xashxt_v0.81_rev.1_src\game_shared\matrix.cpp
_TEXT	SEGMENT
_out$ = -52						; size = 12
tv304 = -40						; size = 4
tv302 = -36						; size = 4
tv300 = -32						; size = 4
tv298 = -28						; size = 4
tv296 = -24						; size = 4
tv294 = -20						; size = 4
tv292 = -16						; size = 4
tv290 = -12						; size = 4
tv288 = -8						; size = 4
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
_v$ = 12						; size = 4
?VectorIRotate@matrix4x4@@QBE?AVVector@@ABV2@@Z PROC	; matrix4x4::VectorIRotate
; _this$ = ecx

; 413  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 52					; 00000034H
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 414  : 	Vector out;

	lea	ecx, DWORD PTR _out$[ebp]
	call	??0Vector@@QAE@XZ			; Vector::Vector

; 415  : 
; 416  : 	out[0] = v[0] * mat[0][0] + v[1] * mat[0][1] + v[2] * mat[0][2];

	mov	ecx, DWORD PTR _v$[ebp]
	call	??BVector@@QBEPBMXZ			; Vector::operator float const *
	mov	esi, eax
	mov	eax, 4
	imul	edi, eax, 0
	mov	ecx, 16					; 00000010H
	imul	ecx, ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector4D@@QBEPBMXZ			; Vector4D::operator float const *
	mov	edx, 4
	imul	ecx, edx, 0
	movss	xmm0, DWORD PTR [esi+edi]
	mulss	xmm0, DWORD PTR [eax+ecx]
	mov	ecx, DWORD PTR _v$[ebp]
	movss	DWORD PTR tv288[ebp], xmm0
	call	??BVector@@QBEPBMXZ			; Vector::operator float const *
	mov	esi, eax
	mov	edi, 4
	shl	edi, 0
	mov	edx, 16					; 00000010H
	imul	ecx, edx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector4D@@QBEPBMXZ			; Vector4D::operator float const *
	mov	ecx, 4
	shl	ecx, 0
	movss	xmm0, DWORD PTR [esi+edi]
	mulss	xmm0, DWORD PTR [eax+ecx]
	movss	xmm1, DWORD PTR tv288[ebp]
	addss	xmm1, xmm0
	mov	ecx, DWORD PTR _v$[ebp]
	movss	DWORD PTR tv290[ebp], xmm1
	call	??BVector@@QBEPBMXZ			; Vector::operator float const *
	mov	esi, eax
	mov	edi, 4
	shl	edi, 1
	mov	edx, 16					; 00000010H
	imul	ecx, edx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector4D@@QBEPBMXZ			; Vector4D::operator float const *
	mov	ecx, 4
	shl	ecx, 1
	movss	xmm0, DWORD PTR [esi+edi]
	mulss	xmm0, DWORD PTR [eax+ecx]
	movss	xmm1, DWORD PTR tv290[ebp]
	addss	xmm1, xmm0
	lea	ecx, DWORD PTR _out$[ebp]
	movss	DWORD PTR tv292[ebp], xmm1
	call	??BVector@@QAEPAMXZ			; Vector::operator float *
	mov	edx, 4
	imul	ecx, edx, 0
	movss	xmm0, DWORD PTR tv292[ebp]
	movss	DWORD PTR [eax+ecx], xmm0

; 417  : 	out[1] = v[0] * mat[1][0] + v[1] * mat[1][1] + v[2] * mat[1][2];

	mov	ecx, DWORD PTR _v$[ebp]
	call	??BVector@@QBEPBMXZ			; Vector::operator float const *
	mov	esi, eax
	mov	edx, 4
	imul	edi, edx, 0
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector4D@@QBEPBMXZ			; Vector4D::operator float const *
	mov	ecx, 4
	imul	edx, ecx, 0
	movss	xmm0, DWORD PTR [esi+edi]
	mulss	xmm0, DWORD PTR [eax+edx]
	mov	ecx, DWORD PTR _v$[ebp]
	movss	DWORD PTR tv294[ebp], xmm0
	call	??BVector@@QBEPBMXZ			; Vector::operator float const *
	mov	esi, eax
	mov	edi, 4
	shl	edi, 0
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector4D@@QBEPBMXZ			; Vector4D::operator float const *
	mov	ecx, 4
	shl	ecx, 0
	movss	xmm0, DWORD PTR [esi+edi]
	mulss	xmm0, DWORD PTR [eax+ecx]
	movss	xmm1, DWORD PTR tv294[ebp]
	addss	xmm1, xmm0
	mov	ecx, DWORD PTR _v$[ebp]
	movss	DWORD PTR tv296[ebp], xmm1
	call	??BVector@@QBEPBMXZ			; Vector::operator float const *
	mov	esi, eax
	mov	edi, 4
	shl	edi, 1
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector4D@@QBEPBMXZ			; Vector4D::operator float const *
	mov	edx, 4
	shl	edx, 1
	movss	xmm0, DWORD PTR [esi+edi]
	mulss	xmm0, DWORD PTR [eax+edx]
	movss	xmm1, DWORD PTR tv296[ebp]
	addss	xmm1, xmm0
	lea	ecx, DWORD PTR _out$[ebp]
	movss	DWORD PTR tv298[ebp], xmm1
	call	??BVector@@QAEPAMXZ			; Vector::operator float *
	mov	ecx, 4
	shl	ecx, 0
	movss	xmm0, DWORD PTR tv298[ebp]
	movss	DWORD PTR [eax+ecx], xmm0

; 418  : 	out[2] = v[0] * mat[2][0] + v[1] * mat[2][1] + v[2] * mat[2][2];

	mov	ecx, DWORD PTR _v$[ebp]
	call	??BVector@@QBEPBMXZ			; Vector::operator float const *
	mov	esi, eax
	mov	edx, 4
	imul	edi, edx, 0
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector4D@@QBEPBMXZ			; Vector4D::operator float const *
	mov	ecx, 4
	imul	edx, ecx, 0
	movss	xmm0, DWORD PTR [esi+edi]
	mulss	xmm0, DWORD PTR [eax+edx]
	mov	ecx, DWORD PTR _v$[ebp]
	movss	DWORD PTR tv300[ebp], xmm0
	call	??BVector@@QBEPBMXZ			; Vector::operator float const *
	mov	esi, eax
	mov	edi, 4
	shl	edi, 0
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector4D@@QBEPBMXZ			; Vector4D::operator float const *
	mov	ecx, 4
	shl	ecx, 0
	movss	xmm0, DWORD PTR [esi+edi]
	mulss	xmm0, DWORD PTR [eax+ecx]
	movss	xmm1, DWORD PTR tv300[ebp]
	addss	xmm1, xmm0
	mov	ecx, DWORD PTR _v$[ebp]
	movss	DWORD PTR tv302[ebp], xmm1
	call	??BVector@@QBEPBMXZ			; Vector::operator float const *
	mov	esi, eax
	mov	edi, 4
	shl	edi, 1
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector4D@@QBEPBMXZ			; Vector4D::operator float const *
	mov	edx, 4
	shl	edx, 1
	movss	xmm0, DWORD PTR [esi+edi]
	mulss	xmm0, DWORD PTR [eax+edx]
	movss	xmm1, DWORD PTR tv302[ebp]
	addss	xmm1, xmm0
	lea	ecx, DWORD PTR _out$[ebp]
	movss	DWORD PTR tv304[ebp], xmm1
	call	??BVector@@QAEPAMXZ			; Vector::operator float *
	mov	ecx, 4
	shl	ecx, 1
	movss	xmm0, DWORD PTR tv304[ebp]
	movss	DWORD PTR [eax+ecx], xmm0

; 419  : 
; 420  : 	return out;

	lea	edx, DWORD PTR _out$[ebp]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0Vector@@QAE@ABV0@@Z			; Vector::Vector
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 421  : }

	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	8
?VectorIRotate@matrix4x4@@QBE?AVVector@@ABV2@@Z ENDP	; matrix4x4::VectorIRotate
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xashxt_v0.81_rev.1_with_sources\xashxt_v0.81_rev.1_src\game_shared\matrix.cpp
_TEXT	SEGMENT
_out$ = -52						; size = 12
tv304 = -40						; size = 4
tv302 = -36						; size = 4
tv300 = -32						; size = 4
tv298 = -28						; size = 4
tv296 = -24						; size = 4
tv294 = -20						; size = 4
tv292 = -16						; size = 4
tv290 = -12						; size = 4
tv288 = -8						; size = 4
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
_v$ = 12						; size = 4
?VectorRotate@matrix4x4@@QBE?AVVector@@ABV2@@Z PROC	; matrix4x4::VectorRotate
; _this$ = ecx

; 402  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 52					; 00000034H
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 403  : 	Vector out;

	lea	ecx, DWORD PTR _out$[ebp]
	call	??0Vector@@QAE@XZ			; Vector::Vector

; 404  : 
; 405  : 	out[0] = v[0] * mat[0][0] + v[1] * mat[1][0] + v[2] * mat[2][0];

	mov	ecx, DWORD PTR _v$[ebp]
	call	??BVector@@QBEPBMXZ			; Vector::operator float const *
	mov	esi, eax
	mov	eax, 4
	imul	edi, eax, 0
	mov	ecx, 16					; 00000010H
	imul	ecx, ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector4D@@QBEPBMXZ			; Vector4D::operator float const *
	mov	edx, 4
	imul	ecx, edx, 0
	movss	xmm0, DWORD PTR [esi+edi]
	mulss	xmm0, DWORD PTR [eax+ecx]
	mov	ecx, DWORD PTR _v$[ebp]
	movss	DWORD PTR tv288[ebp], xmm0
	call	??BVector@@QBEPBMXZ			; Vector::operator float const *
	mov	esi, eax
	mov	edi, 4
	shl	edi, 0
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector4D@@QBEPBMXZ			; Vector4D::operator float const *
	mov	edx, 4
	imul	ecx, edx, 0
	movss	xmm0, DWORD PTR [esi+edi]
	mulss	xmm0, DWORD PTR [eax+ecx]
	movss	xmm1, DWORD PTR tv288[ebp]
	addss	xmm1, xmm0
	mov	ecx, DWORD PTR _v$[ebp]
	movss	DWORD PTR tv290[ebp], xmm1
	call	??BVector@@QBEPBMXZ			; Vector::operator float const *
	mov	esi, eax
	mov	edi, 4
	shl	edi, 1
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector4D@@QBEPBMXZ			; Vector4D::operator float const *
	mov	edx, 4
	imul	ecx, edx, 0
	movss	xmm0, DWORD PTR [esi+edi]
	mulss	xmm0, DWORD PTR [eax+ecx]
	movss	xmm1, DWORD PTR tv290[ebp]
	addss	xmm1, xmm0
	lea	ecx, DWORD PTR _out$[ebp]
	movss	DWORD PTR tv292[ebp], xmm1
	call	??BVector@@QAEPAMXZ			; Vector::operator float *
	mov	edx, 4
	imul	ecx, edx, 0
	movss	xmm0, DWORD PTR tv292[ebp]
	movss	DWORD PTR [eax+ecx], xmm0

; 406  : 	out[1] = v[0] * mat[0][1] + v[1] * mat[1][1] + v[2] * mat[2][1];

	mov	ecx, DWORD PTR _v$[ebp]
	call	??BVector@@QBEPBMXZ			; Vector::operator float const *
	mov	esi, eax
	mov	edx, 4
	imul	edi, edx, 0
	mov	eax, 16					; 00000010H
	imul	ecx, eax, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector4D@@QBEPBMXZ			; Vector4D::operator float const *
	mov	ecx, 4
	shl	ecx, 0
	movss	xmm0, DWORD PTR [esi+edi]
	mulss	xmm0, DWORD PTR [eax+ecx]
	mov	ecx, DWORD PTR _v$[ebp]
	movss	DWORD PTR tv294[ebp], xmm0
	call	??BVector@@QBEPBMXZ			; Vector::operator float const *
	mov	esi, eax
	mov	edi, 4
	shl	edi, 0
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector4D@@QBEPBMXZ			; Vector4D::operator float const *
	mov	edx, 4
	shl	edx, 0
	movss	xmm0, DWORD PTR [esi+edi]
	mulss	xmm0, DWORD PTR [eax+edx]
	movss	xmm1, DWORD PTR tv294[ebp]
	addss	xmm1, xmm0
	mov	ecx, DWORD PTR _v$[ebp]
	movss	DWORD PTR tv296[ebp], xmm1
	call	??BVector@@QBEPBMXZ			; Vector::operator float const *
	mov	esi, eax
	mov	edi, 4
	shl	edi, 1
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector4D@@QBEPBMXZ			; Vector4D::operator float const *
	mov	ecx, 4
	shl	ecx, 0
	movss	xmm0, DWORD PTR [esi+edi]
	mulss	xmm0, DWORD PTR [eax+ecx]
	movss	xmm1, DWORD PTR tv296[ebp]
	addss	xmm1, xmm0
	lea	ecx, DWORD PTR _out$[ebp]
	movss	DWORD PTR tv298[ebp], xmm1
	call	??BVector@@QAEPAMXZ			; Vector::operator float *
	mov	edx, 4
	shl	edx, 0
	movss	xmm0, DWORD PTR tv298[ebp]
	movss	DWORD PTR [eax+edx], xmm0

; 407  : 	out[2] = v[0] * mat[0][2] + v[1] * mat[1][2] + v[2] * mat[2][2];

	mov	ecx, DWORD PTR _v$[ebp]
	call	??BVector@@QBEPBMXZ			; Vector::operator float const *
	mov	esi, eax
	mov	eax, 4
	imul	edi, eax, 0
	mov	ecx, 16					; 00000010H
	imul	ecx, ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector4D@@QBEPBMXZ			; Vector4D::operator float const *
	mov	edx, 4
	shl	edx, 1
	movss	xmm0, DWORD PTR [esi+edi]
	mulss	xmm0, DWORD PTR [eax+edx]
	mov	ecx, DWORD PTR _v$[ebp]
	movss	DWORD PTR tv300[ebp], xmm0
	call	??BVector@@QBEPBMXZ			; Vector::operator float const *
	mov	esi, eax
	mov	edi, 4
	shl	edi, 0
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector4D@@QBEPBMXZ			; Vector4D::operator float const *
	mov	ecx, 4
	shl	ecx, 1
	movss	xmm0, DWORD PTR [esi+edi]
	mulss	xmm0, DWORD PTR [eax+ecx]
	movss	xmm1, DWORD PTR tv300[ebp]
	addss	xmm1, xmm0
	mov	ecx, DWORD PTR _v$[ebp]
	movss	DWORD PTR tv302[ebp], xmm1
	call	??BVector@@QBEPBMXZ			; Vector::operator float const *
	mov	esi, eax
	mov	edi, 4
	shl	edi, 1
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector4D@@QBEPBMXZ			; Vector4D::operator float const *
	mov	edx, 4
	shl	edx, 1
	movss	xmm0, DWORD PTR [esi+edi]
	mulss	xmm0, DWORD PTR [eax+edx]
	movss	xmm1, DWORD PTR tv302[ebp]
	addss	xmm1, xmm0
	lea	ecx, DWORD PTR _out$[ebp]
	movss	DWORD PTR tv304[ebp], xmm1
	call	??BVector@@QAEPAMXZ			; Vector::operator float *
	mov	ecx, 4
	shl	ecx, 1
	movss	xmm0, DWORD PTR tv304[ebp]
	movss	DWORD PTR [eax+ecx], xmm0

; 408  : 
; 409  : 	return out;

	lea	edx, DWORD PTR _out$[ebp]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0Vector@@QAE@ABV0@@Z			; Vector::Vector
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 410  : }

	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	8
?VectorRotate@matrix4x4@@QBE?AVVector@@ABV2@@Z ENDP	; matrix4x4::VectorRotate
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xashxt_v0.81_rev.1_with_sources\xashxt_v0.81_rev.1_src\game_shared\matrix.cpp
_TEXT	SEGMENT
_out$ = -76						; size = 12
_iv$ = -64						; size = 12
tv383 = -52						; size = 4
tv381 = -48						; size = 4
tv379 = -44						; size = 4
tv377 = -40						; size = 4
tv375 = -36						; size = 4
tv373 = -32						; size = 4
tv371 = -28						; size = 4
tv369 = -24						; size = 4
tv367 = -20						; size = 4
tv365 = -16						; size = 4
tv363 = -12						; size = 4
tv361 = -8						; size = 4
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
_v$ = 12						; size = 4
?VectorITransform@matrix4x4@@QBE?AVVector@@ABV2@@Z PROC	; matrix4x4::VectorITransform
; _this$ = ecx

; 387  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 76					; 0000004cH
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 388  : 	Vector iv, out;

	lea	ecx, DWORD PTR _iv$[ebp]
	call	??0Vector@@QAE@XZ			; Vector::Vector
	lea	ecx, DWORD PTR _out$[ebp]
	call	??0Vector@@QAE@XZ			; Vector::Vector

; 389  : 
; 390  : 	iv[0] = v[0] - mat[3][0];

	mov	ecx, DWORD PTR _v$[ebp]
	call	??BVector@@QBEPBMXZ			; Vector::operator float const *
	mov	esi, eax
	mov	eax, 4
	imul	edi, eax, 0
	mov	ecx, 16					; 00000010H
	imul	ecx, ecx, 3
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector4D@@QBEPBMXZ			; Vector4D::operator float const *
	mov	edx, 4
	imul	ecx, edx, 0
	movss	xmm0, DWORD PTR [esi+edi]
	subss	xmm0, DWORD PTR [eax+ecx]
	lea	ecx, DWORD PTR _iv$[ebp]
	movss	DWORD PTR tv361[ebp], xmm0
	call	??BVector@@QAEPAMXZ			; Vector::operator float *
	mov	edx, 4
	imul	ecx, edx, 0
	movss	xmm0, DWORD PTR tv361[ebp]
	movss	DWORD PTR [eax+ecx], xmm0

; 391  : 	iv[1] = v[1] - mat[3][1];

	mov	ecx, DWORD PTR _v$[ebp]
	call	??BVector@@QBEPBMXZ			; Vector::operator float const *
	mov	esi, eax
	mov	edi, 4
	shl	edi, 0
	mov	edx, 16					; 00000010H
	imul	ecx, edx, 3
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector4D@@QBEPBMXZ			; Vector4D::operator float const *
	mov	ecx, 4
	shl	ecx, 0
	movss	xmm0, DWORD PTR [esi+edi]
	subss	xmm0, DWORD PTR [eax+ecx]
	lea	ecx, DWORD PTR _iv$[ebp]
	movss	DWORD PTR tv363[ebp], xmm0
	call	??BVector@@QAEPAMXZ			; Vector::operator float *
	mov	edx, 4
	shl	edx, 0
	movss	xmm0, DWORD PTR tv363[ebp]
	movss	DWORD PTR [eax+edx], xmm0

; 392  : 	iv[2] = v[2] - mat[3][2];

	mov	ecx, DWORD PTR _v$[ebp]
	call	??BVector@@QBEPBMXZ			; Vector::operator float const *
	mov	esi, eax
	mov	edi, 4
	shl	edi, 1
	mov	eax, 16					; 00000010H
	imul	ecx, eax, 3
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector4D@@QBEPBMXZ			; Vector4D::operator float const *
	mov	ecx, 4
	shl	ecx, 1
	movss	xmm0, DWORD PTR [esi+edi]
	subss	xmm0, DWORD PTR [eax+ecx]
	lea	ecx, DWORD PTR _iv$[ebp]
	movss	DWORD PTR tv365[ebp], xmm0
	call	??BVector@@QAEPAMXZ			; Vector::operator float *
	mov	edx, 4
	shl	edx, 1
	movss	xmm0, DWORD PTR tv365[ebp]
	movss	DWORD PTR [eax+edx], xmm0

; 393  : 
; 394  : 	out[0] = iv[0] * mat[0][0] + iv[1] * mat[0][1] + iv[2] * mat[0][2];

	lea	ecx, DWORD PTR _iv$[ebp]
	call	??BVector@@QAEPAMXZ			; Vector::operator float *
	mov	esi, eax
	mov	eax, 4
	imul	edi, eax, 0
	mov	ecx, 16					; 00000010H
	imul	ecx, ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector4D@@QBEPBMXZ			; Vector4D::operator float const *
	mov	edx, 4
	imul	ecx, edx, 0
	movss	xmm0, DWORD PTR [esi+edi]
	mulss	xmm0, DWORD PTR [eax+ecx]
	lea	ecx, DWORD PTR _iv$[ebp]
	movss	DWORD PTR tv367[ebp], xmm0
	call	??BVector@@QAEPAMXZ			; Vector::operator float *
	mov	esi, eax
	mov	edi, 4
	shl	edi, 0
	mov	edx, 16					; 00000010H
	imul	ecx, edx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector4D@@QBEPBMXZ			; Vector4D::operator float const *
	mov	ecx, 4
	shl	ecx, 0
	movss	xmm0, DWORD PTR [esi+edi]
	mulss	xmm0, DWORD PTR [eax+ecx]
	movss	xmm1, DWORD PTR tv367[ebp]
	addss	xmm1, xmm0
	lea	ecx, DWORD PTR _iv$[ebp]
	movss	DWORD PTR tv369[ebp], xmm1
	call	??BVector@@QAEPAMXZ			; Vector::operator float *
	mov	esi, eax
	mov	edi, 4
	shl	edi, 1
	mov	edx, 16					; 00000010H
	imul	ecx, edx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector4D@@QBEPBMXZ			; Vector4D::operator float const *
	mov	ecx, 4
	shl	ecx, 1
	movss	xmm0, DWORD PTR [esi+edi]
	mulss	xmm0, DWORD PTR [eax+ecx]
	movss	xmm1, DWORD PTR tv369[ebp]
	addss	xmm1, xmm0
	lea	ecx, DWORD PTR _out$[ebp]
	movss	DWORD PTR tv371[ebp], xmm1
	call	??BVector@@QAEPAMXZ			; Vector::operator float *
	mov	edx, 4
	imul	ecx, edx, 0
	movss	xmm0, DWORD PTR tv371[ebp]
	movss	DWORD PTR [eax+ecx], xmm0

; 395  : 	out[1] = iv[0] * mat[1][0] + iv[1] * mat[1][1] + iv[2] * mat[1][2];

	lea	ecx, DWORD PTR _iv$[ebp]
	call	??BVector@@QAEPAMXZ			; Vector::operator float *
	mov	esi, eax
	mov	edx, 4
	imul	edi, edx, 0
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector4D@@QBEPBMXZ			; Vector4D::operator float const *
	mov	ecx, 4
	imul	edx, ecx, 0
	movss	xmm0, DWORD PTR [esi+edi]
	mulss	xmm0, DWORD PTR [eax+edx]
	lea	ecx, DWORD PTR _iv$[ebp]
	movss	DWORD PTR tv373[ebp], xmm0
	call	??BVector@@QAEPAMXZ			; Vector::operator float *
	mov	esi, eax
	mov	edi, 4
	shl	edi, 0
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector4D@@QBEPBMXZ			; Vector4D::operator float const *
	mov	ecx, 4
	shl	ecx, 0
	movss	xmm0, DWORD PTR [esi+edi]
	mulss	xmm0, DWORD PTR [eax+ecx]
	movss	xmm1, DWORD PTR tv373[ebp]
	addss	xmm1, xmm0
	lea	ecx, DWORD PTR _iv$[ebp]
	movss	DWORD PTR tv375[ebp], xmm1
	call	??BVector@@QAEPAMXZ			; Vector::operator float *
	mov	esi, eax
	mov	edi, 4
	shl	edi, 1
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector4D@@QBEPBMXZ			; Vector4D::operator float const *
	mov	edx, 4
	shl	edx, 1
	movss	xmm0, DWORD PTR [esi+edi]
	mulss	xmm0, DWORD PTR [eax+edx]
	movss	xmm1, DWORD PTR tv375[ebp]
	addss	xmm1, xmm0
	lea	ecx, DWORD PTR _out$[ebp]
	movss	DWORD PTR tv377[ebp], xmm1
	call	??BVector@@QAEPAMXZ			; Vector::operator float *
	mov	ecx, 4
	shl	ecx, 0
	movss	xmm0, DWORD PTR tv377[ebp]
	movss	DWORD PTR [eax+ecx], xmm0

; 396  : 	out[2] = iv[0] * mat[2][0] + iv[1] * mat[2][1] + iv[2] * mat[2][2];

	lea	ecx, DWORD PTR _iv$[ebp]
	call	??BVector@@QAEPAMXZ			; Vector::operator float *
	mov	esi, eax
	mov	edx, 4
	imul	edi, edx, 0
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector4D@@QBEPBMXZ			; Vector4D::operator float const *
	mov	ecx, 4
	imul	edx, ecx, 0
	movss	xmm0, DWORD PTR [esi+edi]
	mulss	xmm0, DWORD PTR [eax+edx]
	lea	ecx, DWORD PTR _iv$[ebp]
	movss	DWORD PTR tv379[ebp], xmm0
	call	??BVector@@QAEPAMXZ			; Vector::operator float *
	mov	esi, eax
	mov	edi, 4
	shl	edi, 0
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector4D@@QBEPBMXZ			; Vector4D::operator float const *
	mov	ecx, 4
	shl	ecx, 0
	movss	xmm0, DWORD PTR [esi+edi]
	mulss	xmm0, DWORD PTR [eax+ecx]
	movss	xmm1, DWORD PTR tv379[ebp]
	addss	xmm1, xmm0
	lea	ecx, DWORD PTR _iv$[ebp]
	movss	DWORD PTR tv381[ebp], xmm1
	call	??BVector@@QAEPAMXZ			; Vector::operator float *
	mov	esi, eax
	mov	edi, 4
	shl	edi, 1
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector4D@@QBEPBMXZ			; Vector4D::operator float const *
	mov	edx, 4
	shl	edx, 1
	movss	xmm0, DWORD PTR [esi+edi]
	mulss	xmm0, DWORD PTR [eax+edx]
	movss	xmm1, DWORD PTR tv381[ebp]
	addss	xmm1, xmm0
	lea	ecx, DWORD PTR _out$[ebp]
	movss	DWORD PTR tv383[ebp], xmm1
	call	??BVector@@QAEPAMXZ			; Vector::operator float *
	mov	ecx, 4
	shl	ecx, 1
	movss	xmm0, DWORD PTR tv383[ebp]
	movss	DWORD PTR [eax+ecx], xmm0

; 397  : 
; 398  : 	return out;

	lea	edx, DWORD PTR _out$[ebp]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0Vector@@QAE@ABV0@@Z			; Vector::Vector
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 399  : }

	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	8
?VectorITransform@matrix4x4@@QBE?AVVector@@ABV2@@Z ENDP	; matrix4x4::VectorITransform
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xashxt_v0.81_rev.1_with_sources\xashxt_v0.81_rev.1_src\game_shared\matrix.cpp
_TEXT	SEGMENT
_out$ = -84						; size = 16
tv456 = -68						; size = 4
tv454 = -64						; size = 4
tv452 = -60						; size = 4
tv450 = -56						; size = 4
tv448 = -52						; size = 4
tv446 = -48						; size = 4
tv444 = -44						; size = 4
tv442 = -40						; size = 4
tv440 = -36						; size = 4
tv438 = -32						; size = 4
tv436 = -28						; size = 4
tv434 = -24						; size = 4
tv432 = -20						; size = 4
tv430 = -16						; size = 4
tv428 = -12						; size = 4
tv426 = -8						; size = 4
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
_v$ = 12						; size = 4
?VectorTransform@matrix4x4@@QBE?AVVector4D@@ABV2@@Z PROC ; matrix4x4::VectorTransform
; _this$ = ecx

; 375  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 84					; 00000054H
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 376  : 	Vector4D out;

	lea	ecx, DWORD PTR _out$[ebp]
	call	??0Vector4D@@QAE@XZ			; Vector4D::Vector4D

; 377  : 
; 378  : 	out[0] = v[0] * mat[0][0] + v[1] * mat[1][0] + v[2] * mat[2][0] + v[3] * mat[3][0];

	mov	ecx, DWORD PTR _v$[ebp]
	call	??BVector4D@@QBEPBMXZ			; Vector4D::operator float const *
	mov	esi, eax
	mov	eax, 4
	imul	edi, eax, 0
	mov	ecx, 16					; 00000010H
	imul	ecx, ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector4D@@QBEPBMXZ			; Vector4D::operator float const *
	mov	edx, 4
	imul	ecx, edx, 0
	movss	xmm0, DWORD PTR [esi+edi]
	mulss	xmm0, DWORD PTR [eax+ecx]
	mov	ecx, DWORD PTR _v$[ebp]
	movss	DWORD PTR tv426[ebp], xmm0
	call	??BVector4D@@QBEPBMXZ			; Vector4D::operator float const *
	mov	esi, eax
	mov	edi, 4
	shl	edi, 0
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector4D@@QBEPBMXZ			; Vector4D::operator float const *
	mov	edx, 4
	imul	ecx, edx, 0
	movss	xmm0, DWORD PTR [esi+edi]
	mulss	xmm0, DWORD PTR [eax+ecx]
	movss	xmm1, DWORD PTR tv426[ebp]
	addss	xmm1, xmm0
	mov	ecx, DWORD PTR _v$[ebp]
	movss	DWORD PTR tv428[ebp], xmm1
	call	??BVector4D@@QBEPBMXZ			; Vector4D::operator float const *
	mov	esi, eax
	mov	edi, 4
	shl	edi, 1
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector4D@@QBEPBMXZ			; Vector4D::operator float const *
	mov	edx, 4
	imul	ecx, edx, 0
	movss	xmm0, DWORD PTR [esi+edi]
	mulss	xmm0, DWORD PTR [eax+ecx]
	movss	xmm1, DWORD PTR tv428[ebp]
	addss	xmm1, xmm0
	mov	ecx, DWORD PTR _v$[ebp]
	movss	DWORD PTR tv430[ebp], xmm1
	call	??BVector4D@@QBEPBMXZ			; Vector4D::operator float const *
	mov	esi, eax
	mov	edx, 4
	imul	edi, edx, 3
	mov	eax, 16					; 00000010H
	imul	ecx, eax, 3
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector4D@@QBEPBMXZ			; Vector4D::operator float const *
	mov	ecx, 4
	imul	edx, ecx, 0
	movss	xmm0, DWORD PTR [esi+edi]
	mulss	xmm0, DWORD PTR [eax+edx]
	movss	xmm1, DWORD PTR tv430[ebp]
	addss	xmm1, xmm0
	lea	ecx, DWORD PTR _out$[ebp]
	movss	DWORD PTR tv432[ebp], xmm1
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	ecx, 4
	imul	edx, ecx, 0
	movss	xmm0, DWORD PTR tv432[ebp]
	movss	DWORD PTR [eax+edx], xmm0

; 379  : 	out[1] = v[0] * mat[0][1] + v[1] * mat[1][1] + v[2] * mat[2][1] + v[3] * mat[3][1];

	mov	ecx, DWORD PTR _v$[ebp]
	call	??BVector4D@@QBEPBMXZ			; Vector4D::operator float const *
	mov	esi, eax
	mov	eax, 4
	imul	edi, eax, 0
	mov	ecx, 16					; 00000010H
	imul	ecx, ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector4D@@QBEPBMXZ			; Vector4D::operator float const *
	mov	edx, 4
	shl	edx, 0
	movss	xmm0, DWORD PTR [esi+edi]
	mulss	xmm0, DWORD PTR [eax+edx]
	mov	ecx, DWORD PTR _v$[ebp]
	movss	DWORD PTR tv434[ebp], xmm0
	call	??BVector4D@@QBEPBMXZ			; Vector4D::operator float const *
	mov	esi, eax
	mov	edi, 4
	shl	edi, 0
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector4D@@QBEPBMXZ			; Vector4D::operator float const *
	mov	ecx, 4
	shl	ecx, 0
	movss	xmm0, DWORD PTR [esi+edi]
	mulss	xmm0, DWORD PTR [eax+ecx]
	movss	xmm1, DWORD PTR tv434[ebp]
	addss	xmm1, xmm0
	mov	ecx, DWORD PTR _v$[ebp]
	movss	DWORD PTR tv436[ebp], xmm1
	call	??BVector4D@@QBEPBMXZ			; Vector4D::operator float const *
	mov	esi, eax
	mov	edi, 4
	shl	edi, 1
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector4D@@QBEPBMXZ			; Vector4D::operator float const *
	mov	edx, 4
	shl	edx, 0
	movss	xmm0, DWORD PTR [esi+edi]
	mulss	xmm0, DWORD PTR [eax+edx]
	movss	xmm1, DWORD PTR tv436[ebp]
	addss	xmm1, xmm0
	mov	ecx, DWORD PTR _v$[ebp]
	movss	DWORD PTR tv438[ebp], xmm1
	call	??BVector4D@@QBEPBMXZ			; Vector4D::operator float const *
	mov	esi, eax
	mov	eax, 4
	imul	edi, eax, 3
	mov	ecx, 16					; 00000010H
	imul	ecx, ecx, 3
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector4D@@QBEPBMXZ			; Vector4D::operator float const *
	mov	edx, 4
	shl	edx, 0
	movss	xmm0, DWORD PTR [esi+edi]
	mulss	xmm0, DWORD PTR [eax+edx]
	movss	xmm1, DWORD PTR tv438[ebp]
	addss	xmm1, xmm0
	lea	ecx, DWORD PTR _out$[ebp]
	movss	DWORD PTR tv440[ebp], xmm1
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	ecx, 4
	shl	ecx, 0
	movss	xmm0, DWORD PTR tv440[ebp]
	movss	DWORD PTR [eax+ecx], xmm0

; 380  : 	out[2] = v[0] * mat[0][2] + v[1] * mat[1][2] + v[2] * mat[2][2] + v[3] * mat[3][2];

	mov	ecx, DWORD PTR _v$[ebp]
	call	??BVector4D@@QBEPBMXZ			; Vector4D::operator float const *
	mov	esi, eax
	mov	edx, 4
	imul	edi, edx, 0
	mov	eax, 16					; 00000010H
	imul	ecx, eax, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector4D@@QBEPBMXZ			; Vector4D::operator float const *
	mov	ecx, 4
	shl	ecx, 1
	movss	xmm0, DWORD PTR [esi+edi]
	mulss	xmm0, DWORD PTR [eax+ecx]
	mov	ecx, DWORD PTR _v$[ebp]
	movss	DWORD PTR tv442[ebp], xmm0
	call	??BVector4D@@QBEPBMXZ			; Vector4D::operator float const *
	mov	esi, eax
	mov	edi, 4
	shl	edi, 0
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector4D@@QBEPBMXZ			; Vector4D::operator float const *
	mov	edx, 4
	shl	edx, 1
	movss	xmm0, DWORD PTR [esi+edi]
	mulss	xmm0, DWORD PTR [eax+edx]
	movss	xmm1, DWORD PTR tv442[ebp]
	addss	xmm1, xmm0
	mov	ecx, DWORD PTR _v$[ebp]
	movss	DWORD PTR tv444[ebp], xmm1
	call	??BVector4D@@QBEPBMXZ			; Vector4D::operator float const *
	mov	esi, eax
	mov	edi, 4
	shl	edi, 1
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector4D@@QBEPBMXZ			; Vector4D::operator float const *
	mov	ecx, 4
	shl	ecx, 1
	movss	xmm0, DWORD PTR [esi+edi]
	mulss	xmm0, DWORD PTR [eax+ecx]
	movss	xmm1, DWORD PTR tv444[ebp]
	addss	xmm1, xmm0
	mov	ecx, DWORD PTR _v$[ebp]
	movss	DWORD PTR tv446[ebp], xmm1
	call	??BVector4D@@QBEPBMXZ			; Vector4D::operator float const *
	mov	esi, eax
	mov	edx, 4
	imul	edi, edx, 3
	mov	eax, 16					; 00000010H
	imul	ecx, eax, 3
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector4D@@QBEPBMXZ			; Vector4D::operator float const *
	mov	ecx, 4
	shl	ecx, 1
	movss	xmm0, DWORD PTR [esi+edi]
	mulss	xmm0, DWORD PTR [eax+ecx]
	movss	xmm1, DWORD PTR tv446[ebp]
	addss	xmm1, xmm0
	lea	ecx, DWORD PTR _out$[ebp]
	movss	DWORD PTR tv448[ebp], xmm1
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	edx, 4
	shl	edx, 1
	movss	xmm0, DWORD PTR tv448[ebp]
	movss	DWORD PTR [eax+edx], xmm0

; 381  : 	out[3] = v[0] * mat[0][3] + v[1] * mat[1][3] + v[2] * mat[2][3] + v[3] * mat[3][3];

	mov	ecx, DWORD PTR _v$[ebp]
	call	??BVector4D@@QBEPBMXZ			; Vector4D::operator float const *
	mov	esi, eax
	mov	eax, 4
	imul	edi, eax, 0
	mov	ecx, 16					; 00000010H
	imul	ecx, ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector4D@@QBEPBMXZ			; Vector4D::operator float const *
	mov	edx, 4
	imul	ecx, edx, 3
	movss	xmm0, DWORD PTR [esi+edi]
	mulss	xmm0, DWORD PTR [eax+ecx]
	mov	ecx, DWORD PTR _v$[ebp]
	movss	DWORD PTR tv450[ebp], xmm0
	call	??BVector4D@@QBEPBMXZ			; Vector4D::operator float const *
	mov	esi, eax
	mov	edi, 4
	shl	edi, 0
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector4D@@QBEPBMXZ			; Vector4D::operator float const *
	mov	edx, 4
	imul	ecx, edx, 3
	movss	xmm0, DWORD PTR [esi+edi]
	mulss	xmm0, DWORD PTR [eax+ecx]
	movss	xmm1, DWORD PTR tv450[ebp]
	addss	xmm1, xmm0
	mov	ecx, DWORD PTR _v$[ebp]
	movss	DWORD PTR tv452[ebp], xmm1
	call	??BVector4D@@QBEPBMXZ			; Vector4D::operator float const *
	mov	esi, eax
	mov	edi, 4
	shl	edi, 1
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector4D@@QBEPBMXZ			; Vector4D::operator float const *
	mov	edx, 4
	imul	ecx, edx, 3
	movss	xmm0, DWORD PTR [esi+edi]
	mulss	xmm0, DWORD PTR [eax+ecx]
	movss	xmm1, DWORD PTR tv452[ebp]
	addss	xmm1, xmm0
	mov	ecx, DWORD PTR _v$[ebp]
	movss	DWORD PTR tv454[ebp], xmm1
	call	??BVector4D@@QBEPBMXZ			; Vector4D::operator float const *
	mov	esi, eax
	mov	edx, 4
	imul	edi, edx, 3
	mov	eax, 16					; 00000010H
	imul	ecx, eax, 3
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector4D@@QBEPBMXZ			; Vector4D::operator float const *
	mov	ecx, 4
	imul	edx, ecx, 3
	movss	xmm0, DWORD PTR [esi+edi]
	mulss	xmm0, DWORD PTR [eax+edx]
	movss	xmm1, DWORD PTR tv454[ebp]
	addss	xmm1, xmm0
	lea	ecx, DWORD PTR _out$[ebp]
	movss	DWORD PTR tv456[ebp], xmm1
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	ecx, 4
	imul	edx, ecx, 3
	movss	xmm0, DWORD PTR tv456[ebp]
	movss	DWORD PTR [eax+edx], xmm0

; 382  : 
; 383  : 	return out;

	lea	eax, DWORD PTR _out$[ebp]
	push	eax
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0Vector4D@@QAE@ABV0@@Z		; Vector4D::Vector4D
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 384  : }

	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	8
?VectorTransform@matrix4x4@@QBE?AVVector4D@@ABV2@@Z ENDP ; matrix4x4::VectorTransform
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xashxt_v0.81_rev.1_with_sources\xashxt_v0.81_rev.1_src\game_shared\matrix.cpp
_TEXT	SEGMENT
_out$ = -64						; size = 12
tv343 = -52						; size = 4
tv341 = -48						; size = 4
tv339 = -44						; size = 4
tv337 = -40						; size = 4
tv335 = -36						; size = 4
tv333 = -32						; size = 4
tv331 = -28						; size = 4
tv329 = -24						; size = 4
tv327 = -20						; size = 4
tv325 = -16						; size = 4
tv323 = -12						; size = 4
tv321 = -8						; size = 4
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
_v$ = 12						; size = 4
?VectorTransform@matrix4x4@@QBE?AVVector@@ABV2@@Z PROC	; matrix4x4::VectorTransform
; _this$ = ecx

; 364  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 365  : 	Vector out;

	lea	ecx, DWORD PTR _out$[ebp]
	call	??0Vector@@QAE@XZ			; Vector::Vector

; 366  : 
; 367  : 	out[0] = v[0] * mat[0][0] + v[1] * mat[1][0] + v[2] * mat[2][0] + mat[3][0];

	mov	ecx, DWORD PTR _v$[ebp]
	call	??BVector@@QBEPBMXZ			; Vector::operator float const *
	mov	esi, eax
	mov	eax, 4
	imul	edi, eax, 0
	mov	ecx, 16					; 00000010H
	imul	ecx, ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector4D@@QBEPBMXZ			; Vector4D::operator float const *
	mov	edx, 4
	imul	ecx, edx, 0
	movss	xmm0, DWORD PTR [esi+edi]
	mulss	xmm0, DWORD PTR [eax+ecx]
	mov	ecx, DWORD PTR _v$[ebp]
	movss	DWORD PTR tv321[ebp], xmm0
	call	??BVector@@QBEPBMXZ			; Vector::operator float const *
	mov	esi, eax
	mov	edi, 4
	shl	edi, 0
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector4D@@QBEPBMXZ			; Vector4D::operator float const *
	mov	edx, 4
	imul	ecx, edx, 0
	movss	xmm0, DWORD PTR [esi+edi]
	mulss	xmm0, DWORD PTR [eax+ecx]
	movss	xmm1, DWORD PTR tv321[ebp]
	addss	xmm1, xmm0
	mov	ecx, DWORD PTR _v$[ebp]
	movss	DWORD PTR tv323[ebp], xmm1
	call	??BVector@@QBEPBMXZ			; Vector::operator float const *
	mov	esi, eax
	mov	edi, 4
	shl	edi, 1
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector4D@@QBEPBMXZ			; Vector4D::operator float const *
	mov	edx, 4
	imul	ecx, edx, 0
	movss	xmm0, DWORD PTR [esi+edi]
	mulss	xmm0, DWORD PTR [eax+ecx]
	movss	xmm1, DWORD PTR tv323[ebp]
	addss	xmm1, xmm0
	mov	edx, 16					; 00000010H
	imul	ecx, edx, 3
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv325[ebp], xmm1
	call	??BVector4D@@QBEPBMXZ			; Vector4D::operator float const *
	mov	ecx, 4
	imul	edx, ecx, 0
	movss	xmm0, DWORD PTR tv325[ebp]
	addss	xmm0, DWORD PTR [eax+edx]
	lea	ecx, DWORD PTR _out$[ebp]
	movss	DWORD PTR tv327[ebp], xmm0
	call	??BVector@@QAEPAMXZ			; Vector::operator float *
	mov	ecx, 4
	imul	edx, ecx, 0
	movss	xmm0, DWORD PTR tv327[ebp]
	movss	DWORD PTR [eax+edx], xmm0

; 368  : 	out[1] = v[0] * mat[0][1] + v[1] * mat[1][1] + v[2] * mat[2][1] + mat[3][1];

	mov	ecx, DWORD PTR _v$[ebp]
	call	??BVector@@QBEPBMXZ			; Vector::operator float const *
	mov	esi, eax
	mov	eax, 4
	imul	edi, eax, 0
	mov	ecx, 16					; 00000010H
	imul	ecx, ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector4D@@QBEPBMXZ			; Vector4D::operator float const *
	mov	edx, 4
	shl	edx, 0
	movss	xmm0, DWORD PTR [esi+edi]
	mulss	xmm0, DWORD PTR [eax+edx]
	mov	ecx, DWORD PTR _v$[ebp]
	movss	DWORD PTR tv329[ebp], xmm0
	call	??BVector@@QBEPBMXZ			; Vector::operator float const *
	mov	esi, eax
	mov	edi, 4
	shl	edi, 0
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector4D@@QBEPBMXZ			; Vector4D::operator float const *
	mov	ecx, 4
	shl	ecx, 0
	movss	xmm0, DWORD PTR [esi+edi]
	mulss	xmm0, DWORD PTR [eax+ecx]
	movss	xmm1, DWORD PTR tv329[ebp]
	addss	xmm1, xmm0
	mov	ecx, DWORD PTR _v$[ebp]
	movss	DWORD PTR tv331[ebp], xmm1
	call	??BVector@@QBEPBMXZ			; Vector::operator float const *
	mov	esi, eax
	mov	edi, 4
	shl	edi, 1
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector4D@@QBEPBMXZ			; Vector4D::operator float const *
	mov	edx, 4
	shl	edx, 0
	movss	xmm0, DWORD PTR [esi+edi]
	mulss	xmm0, DWORD PTR [eax+edx]
	movss	xmm1, DWORD PTR tv331[ebp]
	addss	xmm1, xmm0
	mov	eax, 16					; 00000010H
	imul	ecx, eax, 3
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv333[ebp], xmm1
	call	??BVector4D@@QBEPBMXZ			; Vector4D::operator float const *
	mov	ecx, 4
	shl	ecx, 0
	movss	xmm0, DWORD PTR tv333[ebp]
	addss	xmm0, DWORD PTR [eax+ecx]
	lea	ecx, DWORD PTR _out$[ebp]
	movss	DWORD PTR tv335[ebp], xmm0
	call	??BVector@@QAEPAMXZ			; Vector::operator float *
	mov	edx, 4
	shl	edx, 0
	movss	xmm0, DWORD PTR tv335[ebp]
	movss	DWORD PTR [eax+edx], xmm0

; 369  : 	out[2] = v[0] * mat[0][2] + v[1] * mat[1][2] + v[2] * mat[2][2] + mat[3][2];

	mov	ecx, DWORD PTR _v$[ebp]
	call	??BVector@@QBEPBMXZ			; Vector::operator float const *
	mov	esi, eax
	mov	eax, 4
	imul	edi, eax, 0
	mov	ecx, 16					; 00000010H
	imul	ecx, ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector4D@@QBEPBMXZ			; Vector4D::operator float const *
	mov	edx, 4
	shl	edx, 1
	movss	xmm0, DWORD PTR [esi+edi]
	mulss	xmm0, DWORD PTR [eax+edx]
	mov	ecx, DWORD PTR _v$[ebp]
	movss	DWORD PTR tv337[ebp], xmm0
	call	??BVector@@QBEPBMXZ			; Vector::operator float const *
	mov	esi, eax
	mov	edi, 4
	shl	edi, 0
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector4D@@QBEPBMXZ			; Vector4D::operator float const *
	mov	ecx, 4
	shl	ecx, 1
	movss	xmm0, DWORD PTR [esi+edi]
	mulss	xmm0, DWORD PTR [eax+ecx]
	movss	xmm1, DWORD PTR tv337[ebp]
	addss	xmm1, xmm0
	mov	ecx, DWORD PTR _v$[ebp]
	movss	DWORD PTR tv339[ebp], xmm1
	call	??BVector@@QBEPBMXZ			; Vector::operator float const *
	mov	esi, eax
	mov	edi, 4
	shl	edi, 1
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector4D@@QBEPBMXZ			; Vector4D::operator float const *
	mov	edx, 4
	shl	edx, 1
	movss	xmm0, DWORD PTR [esi+edi]
	mulss	xmm0, DWORD PTR [eax+edx]
	movss	xmm1, DWORD PTR tv339[ebp]
	addss	xmm1, xmm0
	mov	eax, 16					; 00000010H
	imul	ecx, eax, 3
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv341[ebp], xmm1
	call	??BVector4D@@QBEPBMXZ			; Vector4D::operator float const *
	mov	ecx, 4
	shl	ecx, 1
	movss	xmm0, DWORD PTR tv341[ebp]
	addss	xmm0, DWORD PTR [eax+ecx]
	lea	ecx, DWORD PTR _out$[ebp]
	movss	DWORD PTR tv343[ebp], xmm0
	call	??BVector@@QAEPAMXZ			; Vector::operator float *
	mov	edx, 4
	shl	edx, 1
	movss	xmm0, DWORD PTR tv343[ebp]
	movss	DWORD PTR [eax+edx], xmm0

; 370  : 
; 371  : 	return out;

	lea	eax, DWORD PTR _out$[ebp]
	push	eax
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0Vector@@QAE@ABV0@@Z			; Vector::Vector
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 372  : }

	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	8
?VectorTransform@matrix4x4@@QBE?AVVector@@ABV2@@Z ENDP	; matrix4x4::VectorTransform
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xashxt_v0.81_rev.1_with_sources\xashxt_v0.81_rev.1_src\game_shared\matrix.cpp
_TEXT	SEGMENT
tv741 = -148						; size = 4
tv771 = -144						; size = 4
tv769 = -140						; size = 4
tv767 = -136						; size = 4
tv765 = -132						; size = 4
tv763 = -128						; size = 4
tv761 = -124						; size = 4
tv759 = -120						; size = 4
tv757 = -116						; size = 4
tv755 = -112						; size = 4
tv753 = -108						; size = 4
tv751 = -104						; size = 4
tv749 = -100						; size = 4
tv747 = -96						; size = 4
tv745 = -92						; size = 4
tv743 = -88						; size = 4
tv739 = -84						; size = 4
tv737 = -80						; size = 4
tv735 = -76						; size = 4
tv733 = -72						; size = 4
tv731 = -68						; size = 4
tv729 = -64						; size = 4
tv727 = -60						; size = 4
_r$1 = -56						; size = 4
_r$2 = -52						; size = 4
_r$3 = -48						; size = 4
_r$4 = -44						; size = 4
_trace$ = -40						; size = 4
_inv$5 = -36						; size = 4
_inv$6 = -32						; size = 4
_inv$7 = -28						; size = 4
_inv$8 = -24						; size = 4
_quat$ = -20						; size = 16
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?GetQuaternion@matrix4x4@@QAE?AVVector4D@@XZ PROC	; matrix4x4::GetQuaternion
; _this$ = ecx

; 480  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 148				; 00000094H
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 481  : 	float trace = mat[0][0] + mat[1][1] + mat[2][2];

	mov	eax, 16					; 00000010H
	imul	ecx, eax, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	esi, eax
	mov	ecx, 4
	imul	edi, ecx, 0
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	edx, 4
	shl	edx, 0
	movss	xmm0, DWORD PTR [esi+edi]
	addss	xmm0, DWORD PTR [eax+edx]
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv727[ebp], xmm0
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	ecx, 4
	shl	ecx, 1
	movss	xmm0, DWORD PTR tv727[ebp]
	addss	xmm0, DWORD PTR [eax+ecx]
	movss	DWORD PTR _trace$[ebp], xmm0

; 482  : 	Vector4D quat;

	lea	ecx, DWORD PTR _quat$[ebp]
	call	??0Vector4D@@QAE@XZ			; Vector4D::Vector4D

; 483  : 
; 484  : 	if( trace > 0.0f )

	movss	xmm0, DWORD PTR _trace$[ebp]
	comiss	xmm0, DWORD PTR __real@00000000
	jbe	$LN2@GetQuatern

; 485  : 	{
; 486  : 		float r = sqrt(1.0f + trace), inv = 0.5f / r;

	movss	xmm0, DWORD PTR __real@3f800000
	addss	xmm0, DWORD PTR _trace$[ebp]
	cvtss2sd xmm0, xmm0
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	call	_sqrt
	add	esp, 8
	fstp	DWORD PTR _r$4[ebp]
	movss	xmm0, DWORD PTR __real@3f000000
	divss	xmm0, DWORD PTR _r$4[ebp]
	movss	DWORD PTR _inv$8[ebp], xmm0

; 487  : 		quat[0] = (mat[1][2] - mat[2][1]) * inv;

	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	esi, eax
	mov	edi, 4
	shl	edi, 1
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	edx, 4
	shl	edx, 0
	movss	xmm0, DWORD PTR [esi+edi]
	subss	xmm0, DWORD PTR [eax+edx]
	mulss	xmm0, DWORD PTR _inv$8[ebp]
	lea	ecx, DWORD PTR _quat$[ebp]
	movss	DWORD PTR tv729[ebp], xmm0
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	ecx, 4
	imul	edx, ecx, 0
	movss	xmm0, DWORD PTR tv729[ebp]
	movss	DWORD PTR [eax+edx], xmm0

; 488  : 		quat[1] = (mat[2][0] - mat[0][2]) * inv;

	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	esi, eax
	mov	eax, 4
	imul	edi, eax, 0
	mov	ecx, 16					; 00000010H
	imul	ecx, ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	edx, 4
	shl	edx, 1
	movss	xmm0, DWORD PTR [esi+edi]
	subss	xmm0, DWORD PTR [eax+edx]
	mulss	xmm0, DWORD PTR _inv$8[ebp]
	lea	ecx, DWORD PTR _quat$[ebp]
	movss	DWORD PTR tv731[ebp], xmm0
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	ecx, 4
	shl	ecx, 0
	movss	xmm0, DWORD PTR tv731[ebp]
	movss	DWORD PTR [eax+ecx], xmm0

; 489  : 		quat[2] = (mat[0][1] - mat[1][0]) * inv;

	mov	edx, 16					; 00000010H
	imul	ecx, edx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	esi, eax
	mov	edi, 4
	shl	edi, 0
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	ecx, 4
	imul	edx, ecx, 0
	movss	xmm0, DWORD PTR [esi+edi]
	subss	xmm0, DWORD PTR [eax+edx]
	mulss	xmm0, DWORD PTR _inv$8[ebp]
	lea	ecx, DWORD PTR _quat$[ebp]
	movss	DWORD PTR tv733[ebp], xmm0
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	ecx, 4
	shl	ecx, 1
	movss	xmm0, DWORD PTR tv733[ebp]
	movss	DWORD PTR [eax+ecx], xmm0

; 490  : 		quat[3] = 0.5f * r;

	movss	xmm0, DWORD PTR __real@3f000000
	mulss	xmm0, DWORD PTR _r$4[ebp]
	lea	ecx, DWORD PTR _quat$[ebp]
	movss	DWORD PTR tv735[ebp], xmm0
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	edx, 4
	imul	ecx, edx, 3
	movss	xmm0, DWORD PTR tv735[ebp]
	movss	DWORD PTR [eax+ecx], xmm0
	jmp	$LN7@GetQuatern
$LN2@GetQuatern:

; 491  : 	}
; 492  : 	else if( mat[0][0] > mat[1][1] && mat[0][0] > mat[2][2] )

	mov	edx, 16					; 00000010H
	imul	ecx, edx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	esi, eax
	mov	eax, 4
	imul	edi, eax, 0
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	ecx, 4
	shl	ecx, 0
	movss	xmm0, DWORD PTR [esi+edi]
	comiss	xmm0, DWORD PTR [eax+ecx]
	jbe	$LN4@GetQuatern
	mov	edx, 16					; 00000010H
	imul	ecx, edx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	esi, eax
	mov	eax, 4
	imul	edi, eax, 0
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	ecx, 4
	shl	ecx, 1
	movss	xmm0, DWORD PTR [esi+edi]
	comiss	xmm0, DWORD PTR [eax+ecx]
	jbe	$LN4@GetQuatern

; 493  : 	{
; 494  : 		float r = sqrt(1.0f + mat[0][0] - mat[1][1] - mat[2][2]), inv = 0.5f / r;

	mov	edx, 16					; 00000010H
	imul	ecx, edx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	ecx, 4
	imul	edx, ecx, 0
	movss	xmm0, DWORD PTR __real@3f800000
	addss	xmm0, DWORD PTR [eax+edx]
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv737[ebp], xmm0
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	ecx, 4
	shl	ecx, 0
	movss	xmm0, DWORD PTR tv737[ebp]
	subss	xmm0, DWORD PTR [eax+ecx]
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv739[ebp], xmm0
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	edx, 4
	shl	edx, 1
	movss	xmm0, DWORD PTR tv739[ebp]
	subss	xmm0, DWORD PTR [eax+edx]
	cvtss2sd xmm0, xmm0
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	call	_sqrt
	add	esp, 8
	fstp	DWORD PTR _r$3[ebp]
	movss	xmm0, DWORD PTR __real@3f000000
	divss	xmm0, DWORD PTR _r$3[ebp]
	movss	DWORD PTR _inv$7[ebp], xmm0

; 495  : 		quat[0] = 0.5f * r;

	movss	xmm0, DWORD PTR __real@3f000000
	mulss	xmm0, DWORD PTR _r$3[ebp]
	lea	ecx, DWORD PTR _quat$[ebp]
	movss	DWORD PTR tv741[ebp], xmm0
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	ecx, 4
	imul	edx, ecx, 0
	movss	xmm0, DWORD PTR tv741[ebp]
	movss	DWORD PTR [eax+edx], xmm0

; 496  : 		quat[1] = (mat[0][1] + mat[1][0]) * inv;

	mov	eax, 16					; 00000010H
	imul	ecx, eax, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	esi, eax
	mov	edi, 4
	shl	edi, 0
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	ecx, 4
	imul	edx, ecx, 0
	movss	xmm0, DWORD PTR [esi+edi]
	addss	xmm0, DWORD PTR [eax+edx]
	mulss	xmm0, DWORD PTR _inv$7[ebp]
	lea	ecx, DWORD PTR _quat$[ebp]
	movss	DWORD PTR tv743[ebp], xmm0
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	ecx, 4
	shl	ecx, 0
	movss	xmm0, DWORD PTR tv743[ebp]
	movss	DWORD PTR [eax+ecx], xmm0

; 497  : 		quat[2] = (mat[2][0] + mat[0][2]) * inv;

	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	esi, eax
	mov	edx, 4
	imul	edi, edx, 0
	mov	eax, 16					; 00000010H
	imul	ecx, eax, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	ecx, 4
	shl	ecx, 1
	movss	xmm0, DWORD PTR [esi+edi]
	addss	xmm0, DWORD PTR [eax+ecx]
	mulss	xmm0, DWORD PTR _inv$7[ebp]
	lea	ecx, DWORD PTR _quat$[ebp]
	movss	DWORD PTR tv745[ebp], xmm0
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	edx, 4
	shl	edx, 1
	movss	xmm0, DWORD PTR tv745[ebp]
	movss	DWORD PTR [eax+edx], xmm0

; 498  : 		quat[3] = (mat[1][2] - mat[2][1]) * inv;

	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	esi, eax
	mov	edi, 4
	shl	edi, 1
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	ecx, 4
	shl	ecx, 0
	movss	xmm0, DWORD PTR [esi+edi]
	subss	xmm0, DWORD PTR [eax+ecx]
	mulss	xmm0, DWORD PTR _inv$7[ebp]
	lea	ecx, DWORD PTR _quat$[ebp]
	movss	DWORD PTR tv747[ebp], xmm0
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	edx, 4
	imul	ecx, edx, 3
	movss	xmm0, DWORD PTR tv747[ebp]
	movss	DWORD PTR [eax+ecx], xmm0
	jmp	$LN7@GetQuatern
$LN4@GetQuatern:

; 499  : 	}
; 500  : 	else if( mat[1][1] > mat[2][2] )

	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	esi, eax
	mov	edi, 4
	shl	edi, 0
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	edx, 4
	shl	edx, 1
	movss	xmm0, DWORD PTR [esi+edi]
	comiss	xmm0, DWORD PTR [eax+edx]
	jbe	$LN6@GetQuatern

; 501  : 	{
; 502  : 		float r = sqrt(1.0f + mat[1][1] - mat[0][0] - mat[2][2]), inv = 0.5f / r;

	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	ecx, 4
	shl	ecx, 0
	movss	xmm0, DWORD PTR __real@3f800000
	addss	xmm0, DWORD PTR [eax+ecx]
	mov	edx, 16					; 00000010H
	imul	ecx, edx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv749[ebp], xmm0
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	ecx, 4
	imul	edx, ecx, 0
	movss	xmm0, DWORD PTR tv749[ebp]
	subss	xmm0, DWORD PTR [eax+edx]
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv751[ebp], xmm0
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	ecx, 4
	shl	ecx, 1
	movss	xmm0, DWORD PTR tv751[ebp]
	subss	xmm0, DWORD PTR [eax+ecx]
	cvtss2sd xmm0, xmm0
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	call	_sqrt
	add	esp, 8
	fstp	DWORD PTR _r$2[ebp]
	movss	xmm0, DWORD PTR __real@3f000000
	divss	xmm0, DWORD PTR _r$2[ebp]
	movss	DWORD PTR _inv$6[ebp], xmm0

; 503  : 		quat[0] = (mat[0][1] + mat[1][0]) * inv;

	mov	edx, 16					; 00000010H
	imul	ecx, edx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	esi, eax
	mov	edi, 4
	shl	edi, 0
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	ecx, 4
	imul	edx, ecx, 0
	movss	xmm0, DWORD PTR [esi+edi]
	addss	xmm0, DWORD PTR [eax+edx]
	mulss	xmm0, DWORD PTR _inv$6[ebp]
	lea	ecx, DWORD PTR _quat$[ebp]
	movss	DWORD PTR tv753[ebp], xmm0
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	ecx, 4
	imul	edx, ecx, 0
	movss	xmm0, DWORD PTR tv753[ebp]
	movss	DWORD PTR [eax+edx], xmm0

; 504  : 		quat[1] = 0.5f * r;

	movss	xmm0, DWORD PTR __real@3f000000
	mulss	xmm0, DWORD PTR _r$2[ebp]
	lea	ecx, DWORD PTR _quat$[ebp]
	movss	DWORD PTR tv755[ebp], xmm0
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	ecx, 4
	shl	ecx, 0
	movss	xmm0, DWORD PTR tv755[ebp]
	movss	DWORD PTR [eax+ecx], xmm0

; 505  : 		quat[2] = (mat[1][2] + mat[2][1]) * inv;

	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	esi, eax
	mov	edi, 4
	shl	edi, 1
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	edx, 4
	shl	edx, 0
	movss	xmm0, DWORD PTR [esi+edi]
	addss	xmm0, DWORD PTR [eax+edx]
	mulss	xmm0, DWORD PTR _inv$6[ebp]
	lea	ecx, DWORD PTR _quat$[ebp]
	movss	DWORD PTR tv757[ebp], xmm0
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	ecx, 4
	shl	ecx, 1
	movss	xmm0, DWORD PTR tv757[ebp]
	movss	DWORD PTR [eax+ecx], xmm0

; 506  : 		quat[3] = (mat[2][0] - mat[0][2]) * inv;

	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	esi, eax
	mov	edx, 4
	imul	edi, edx, 0
	mov	eax, 16					; 00000010H
	imul	ecx, eax, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	ecx, 4
	shl	ecx, 1
	movss	xmm0, DWORD PTR [esi+edi]
	subss	xmm0, DWORD PTR [eax+ecx]
	mulss	xmm0, DWORD PTR _inv$6[ebp]
	lea	ecx, DWORD PTR _quat$[ebp]
	movss	DWORD PTR tv759[ebp], xmm0
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	edx, 4
	imul	ecx, edx, 3
	movss	xmm0, DWORD PTR tv759[ebp]
	movss	DWORD PTR [eax+ecx], xmm0

; 507  : 	}
; 508  : 	else

	jmp	$LN7@GetQuatern
$LN6@GetQuatern:

; 509  : 	{
; 510  : 		float r = sqrt(1.0f + mat[2][2] - mat[0][0] - mat[1][1]), inv = 0.5f / r;

	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	edx, 4
	shl	edx, 1
	movss	xmm0, DWORD PTR __real@3f800000
	addss	xmm0, DWORD PTR [eax+edx]
	mov	eax, 16					; 00000010H
	imul	ecx, eax, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv761[ebp], xmm0
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	ecx, 4
	imul	edx, ecx, 0
	movss	xmm0, DWORD PTR tv761[ebp]
	subss	xmm0, DWORD PTR [eax+edx]
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv763[ebp], xmm0
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	ecx, 4
	shl	ecx, 0
	movss	xmm0, DWORD PTR tv763[ebp]
	subss	xmm0, DWORD PTR [eax+ecx]
	cvtss2sd xmm0, xmm0
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	call	_sqrt
	add	esp, 8
	fstp	DWORD PTR _r$1[ebp]
	movss	xmm0, DWORD PTR __real@3f000000
	divss	xmm0, DWORD PTR _r$1[ebp]
	movss	DWORD PTR _inv$5[ebp], xmm0

; 511  : 		quat[0] = (mat[2][0] + mat[0][2]) * inv;

	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	esi, eax
	mov	edx, 4
	imul	edi, edx, 0
	mov	eax, 16					; 00000010H
	imul	ecx, eax, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	ecx, 4
	shl	ecx, 1
	movss	xmm0, DWORD PTR [esi+edi]
	addss	xmm0, DWORD PTR [eax+ecx]
	mulss	xmm0, DWORD PTR _inv$5[ebp]
	lea	ecx, DWORD PTR _quat$[ebp]
	movss	DWORD PTR tv765[ebp], xmm0
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	edx, 4
	imul	ecx, edx, 0
	movss	xmm0, DWORD PTR tv765[ebp]
	movss	DWORD PTR [eax+ecx], xmm0

; 512  : 		quat[1] = (mat[1][2] + mat[2][1]) * inv;

	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	esi, eax
	mov	edi, 4
	shl	edi, 1
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	edx, 4
	shl	edx, 0
	movss	xmm0, DWORD PTR [esi+edi]
	addss	xmm0, DWORD PTR [eax+edx]
	mulss	xmm0, DWORD PTR _inv$5[ebp]
	lea	ecx, DWORD PTR _quat$[ebp]
	movss	DWORD PTR tv767[ebp], xmm0
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	ecx, 4
	shl	ecx, 0
	movss	xmm0, DWORD PTR tv767[ebp]
	movss	DWORD PTR [eax+ecx], xmm0

; 513  : 		quat[2] = 0.5f * r;

	movss	xmm0, DWORD PTR __real@3f000000
	mulss	xmm0, DWORD PTR _r$1[ebp]
	lea	ecx, DWORD PTR _quat$[ebp]
	movss	DWORD PTR tv769[ebp], xmm0
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	edx, 4
	shl	edx, 1
	movss	xmm0, DWORD PTR tv769[ebp]
	movss	DWORD PTR [eax+edx], xmm0

; 514  : 		quat[3] = (mat[0][1] - mat[1][0]) * inv;

	mov	eax, 16					; 00000010H
	imul	ecx, eax, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	esi, eax
	mov	edi, 4
	shl	edi, 0
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	ecx, 4
	imul	edx, ecx, 0
	movss	xmm0, DWORD PTR [esi+edi]
	subss	xmm0, DWORD PTR [eax+edx]
	mulss	xmm0, DWORD PTR _inv$5[ebp]
	lea	ecx, DWORD PTR _quat$[ebp]
	movss	DWORD PTR tv771[ebp], xmm0
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	ecx, 4
	imul	edx, ecx, 3
	movss	xmm0, DWORD PTR tv771[ebp]
	movss	DWORD PTR [eax+edx], xmm0
$LN7@GetQuatern:

; 515  : 	}
; 516  : 
; 517  : 	return quat;

	lea	eax, DWORD PTR _quat$[ebp]
	push	eax
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0Vector4D@@QAE@ABV0@@Z		; Vector4D::Vector4D
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 518  : }

	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
?GetQuaternion@matrix4x4@@QAE?AVVector4D@@XZ ENDP	; matrix4x4::GetQuaternion
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xashxt_v0.81_rev.1_with_sources\xashxt_v0.81_rev.1_src\game_shared\matrix.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
_vOther$ = 8						; size = 4
??4matrix4x4@@QAEAAV0@ABV0@@Z PROC			; matrix4x4::operator=
; _this$ = ecx

; 916  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 917  : 	mat[0][0] = vOther[0][0];

	push	0
	mov	ecx, DWORD PTR _vOther$[ebp]
	call	??Amatrix4x4@@QBEPBMH@Z			; matrix4x4::operator[]
	mov	esi, eax
	mov	eax, 4
	imul	edi, eax, 0
	mov	ecx, 16					; 00000010H
	imul	ecx, ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	edx, 4
	imul	ecx, edx, 0
	mov	edx, DWORD PTR [esi+edi]
	mov	DWORD PTR [eax+ecx], edx

; 918  : 	mat[1][0] = vOther[1][0];

	push	1
	mov	ecx, DWORD PTR _vOther$[ebp]
	call	??Amatrix4x4@@QBEPBMH@Z			; matrix4x4::operator[]
	mov	esi, eax
	mov	eax, 4
	imul	edi, eax, 0
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	ecx, 4
	imul	edx, ecx, 0
	mov	ecx, DWORD PTR [esi+edi]
	mov	DWORD PTR [eax+edx], ecx

; 919  : 	mat[2][0] = vOther[2][0];

	push	2
	mov	ecx, DWORD PTR _vOther$[ebp]
	call	??Amatrix4x4@@QBEPBMH@Z			; matrix4x4::operator[]
	mov	esi, eax
	mov	edx, 4
	imul	edi, edx, 0
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	ecx, 4
	imul	edx, ecx, 0
	mov	ecx, DWORD PTR [esi+edi]
	mov	DWORD PTR [eax+edx], ecx

; 920  : 	mat[3][0] = vOther[3][0];

	push	3
	mov	ecx, DWORD PTR _vOther$[ebp]
	call	??Amatrix4x4@@QBEPBMH@Z			; matrix4x4::operator[]
	mov	esi, eax
	mov	edx, 4
	imul	edi, edx, 0
	mov	eax, 16					; 00000010H
	imul	ecx, eax, 3
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	ecx, 4
	imul	edx, ecx, 0
	mov	ecx, DWORD PTR [esi+edi]
	mov	DWORD PTR [eax+edx], ecx

; 921  : 	mat[0][1] = vOther[0][1];

	push	0
	mov	ecx, DWORD PTR _vOther$[ebp]
	call	??Amatrix4x4@@QBEPBMH@Z			; matrix4x4::operator[]
	mov	esi, eax
	mov	edi, 4
	shl	edi, 0
	mov	edx, 16					; 00000010H
	imul	ecx, edx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	ecx, 4
	shl	ecx, 0
	mov	edx, DWORD PTR [esi+edi]
	mov	DWORD PTR [eax+ecx], edx

; 922  : 	mat[1][1] = vOther[1][1];

	push	1
	mov	ecx, DWORD PTR _vOther$[ebp]
	call	??Amatrix4x4@@QBEPBMH@Z			; matrix4x4::operator[]
	mov	esi, eax
	mov	edi, 4
	shl	edi, 0
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	ecx, 4
	shl	ecx, 0
	mov	edx, DWORD PTR [esi+edi]
	mov	DWORD PTR [eax+ecx], edx

; 923  : 	mat[2][1] = vOther[2][1];

	push	2
	mov	ecx, DWORD PTR _vOther$[ebp]
	call	??Amatrix4x4@@QBEPBMH@Z			; matrix4x4::operator[]
	mov	esi, eax
	mov	edi, 4
	shl	edi, 0
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	ecx, 4
	shl	ecx, 0
	mov	edx, DWORD PTR [esi+edi]
	mov	DWORD PTR [eax+ecx], edx

; 924  : 	mat[3][1] = vOther[3][1];

	push	3
	mov	ecx, DWORD PTR _vOther$[ebp]
	call	??Amatrix4x4@@QBEPBMH@Z			; matrix4x4::operator[]
	mov	esi, eax
	mov	edi, 4
	shl	edi, 0
	mov	eax, 16					; 00000010H
	imul	ecx, eax, 3
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	ecx, 4
	shl	ecx, 0
	mov	edx, DWORD PTR [esi+edi]
	mov	DWORD PTR [eax+ecx], edx

; 925  : 	mat[0][2] = vOther[0][2];

	push	0
	mov	ecx, DWORD PTR _vOther$[ebp]
	call	??Amatrix4x4@@QBEPBMH@Z			; matrix4x4::operator[]
	mov	esi, eax
	mov	edi, 4
	shl	edi, 1
	mov	eax, 16					; 00000010H
	imul	ecx, eax, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	ecx, 4
	shl	ecx, 1
	mov	edx, DWORD PTR [esi+edi]
	mov	DWORD PTR [eax+ecx], edx

; 926  : 	mat[1][2] = vOther[1][2];

	push	1
	mov	ecx, DWORD PTR _vOther$[ebp]
	call	??Amatrix4x4@@QBEPBMH@Z			; matrix4x4::operator[]
	mov	esi, eax
	mov	edi, 4
	shl	edi, 1
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	ecx, 4
	shl	ecx, 1
	mov	edx, DWORD PTR [esi+edi]
	mov	DWORD PTR [eax+ecx], edx

; 927  : 	mat[2][2] = vOther[2][2];

	push	2
	mov	ecx, DWORD PTR _vOther$[ebp]
	call	??Amatrix4x4@@QBEPBMH@Z			; matrix4x4::operator[]
	mov	esi, eax
	mov	edi, 4
	shl	edi, 1
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	ecx, 4
	shl	ecx, 1
	mov	edx, DWORD PTR [esi+edi]
	mov	DWORD PTR [eax+ecx], edx

; 928  : 	mat[3][2] = vOther[3][2];

	push	3
	mov	ecx, DWORD PTR _vOther$[ebp]
	call	??Amatrix4x4@@QBEPBMH@Z			; matrix4x4::operator[]
	mov	esi, eax
	mov	edi, 4
	shl	edi, 1
	mov	eax, 16					; 00000010H
	imul	ecx, eax, 3
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	ecx, 4
	shl	ecx, 1
	mov	edx, DWORD PTR [esi+edi]
	mov	DWORD PTR [eax+ecx], edx

; 929  : 	mat[0][3] = vOther[0][3];

	push	0
	mov	ecx, DWORD PTR _vOther$[ebp]
	call	??Amatrix4x4@@QBEPBMH@Z			; matrix4x4::operator[]
	mov	esi, eax
	mov	eax, 4
	imul	edi, eax, 3
	mov	ecx, 16					; 00000010H
	imul	ecx, ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	edx, 4
	imul	ecx, edx, 3
	mov	edx, DWORD PTR [esi+edi]
	mov	DWORD PTR [eax+ecx], edx

; 930  : 	mat[1][3] = vOther[1][3];

	push	1
	mov	ecx, DWORD PTR _vOther$[ebp]
	call	??Amatrix4x4@@QBEPBMH@Z			; matrix4x4::operator[]
	mov	esi, eax
	mov	eax, 4
	imul	edi, eax, 3
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	ecx, 4
	imul	edx, ecx, 3
	mov	ecx, DWORD PTR [esi+edi]
	mov	DWORD PTR [eax+edx], ecx

; 931  : 	mat[2][3] = vOther[2][3];

	push	2
	mov	ecx, DWORD PTR _vOther$[ebp]
	call	??Amatrix4x4@@QBEPBMH@Z			; matrix4x4::operator[]
	mov	esi, eax
	mov	edx, 4
	imul	edi, edx, 3
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	ecx, 4
	imul	edx, ecx, 3
	mov	ecx, DWORD PTR [esi+edi]
	mov	DWORD PTR [eax+edx], ecx

; 932  : 	mat[3][3] = vOther[3][3];

	push	3
	mov	ecx, DWORD PTR _vOther$[ebp]
	call	??Amatrix4x4@@QBEPBMH@Z			; matrix4x4::operator[]
	mov	esi, eax
	mov	edx, 4
	imul	edi, edx, 3
	mov	eax, 16					; 00000010H
	imul	ecx, eax, 3
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	ecx, 4
	imul	edx, ecx, 3
	mov	ecx, DWORD PTR [esi+edi]
	mov	DWORD PTR [eax+edx], ecx

; 933  : 
; 934  : 	return *this;

	mov	eax, DWORD PTR _this$[ebp]

; 935  : }

	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
??4matrix4x4@@QAEAAV0@ABV0@@Z ENDP			; matrix4x4::operator=
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xashxt_v0.81_rev.1_with_sources\xashxt_v0.81_rev.1_src\game_shared\matrix.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
_vOther$ = 8						; size = 4
??4matrix4x4@@QAEAAV0@ABVmatrix3x4@@@Z PROC		; matrix4x4::operator=
; _this$ = ecx

; 893  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 894  : 	mat[0][0] = vOther[0][0];

	push	0
	mov	ecx, DWORD PTR _vOther$[ebp]
	call	??Amatrix3x4@@QBEPBMH@Z			; matrix3x4::operator[]
	mov	esi, eax
	mov	eax, 4
	imul	edi, eax, 0
	mov	ecx, 16					; 00000010H
	imul	ecx, ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	edx, 4
	imul	ecx, edx, 0
	mov	edx, DWORD PTR [esi+edi]
	mov	DWORD PTR [eax+ecx], edx

; 895  : 	mat[1][0] = vOther[1][0];

	push	1
	mov	ecx, DWORD PTR _vOther$[ebp]
	call	??Amatrix3x4@@QBEPBMH@Z			; matrix3x4::operator[]
	mov	esi, eax
	mov	eax, 4
	imul	edi, eax, 0
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	ecx, 4
	imul	edx, ecx, 0
	mov	ecx, DWORD PTR [esi+edi]
	mov	DWORD PTR [eax+edx], ecx

; 896  : 	mat[2][0] = vOther[2][0];

	push	2
	mov	ecx, DWORD PTR _vOther$[ebp]
	call	??Amatrix3x4@@QBEPBMH@Z			; matrix3x4::operator[]
	mov	esi, eax
	mov	edx, 4
	imul	edi, edx, 0
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	ecx, 4
	imul	edx, ecx, 0
	mov	ecx, DWORD PTR [esi+edi]
	mov	DWORD PTR [eax+edx], ecx

; 897  : 	mat[3][0] = vOther[3][0];

	push	3
	mov	ecx, DWORD PTR _vOther$[ebp]
	call	??Amatrix3x4@@QBEPBMH@Z			; matrix3x4::operator[]
	mov	esi, eax
	mov	edx, 4
	imul	edi, edx, 0
	mov	eax, 16					; 00000010H
	imul	ecx, eax, 3
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	ecx, 4
	imul	edx, ecx, 0
	mov	ecx, DWORD PTR [esi+edi]
	mov	DWORD PTR [eax+edx], ecx

; 898  : 	mat[0][1] = vOther[0][1];

	push	0
	mov	ecx, DWORD PTR _vOther$[ebp]
	call	??Amatrix3x4@@QBEPBMH@Z			; matrix3x4::operator[]
	mov	esi, eax
	mov	edi, 4
	shl	edi, 0
	mov	edx, 16					; 00000010H
	imul	ecx, edx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	ecx, 4
	shl	ecx, 0
	mov	edx, DWORD PTR [esi+edi]
	mov	DWORD PTR [eax+ecx], edx

; 899  : 	mat[1][1] = vOther[1][1];

	push	1
	mov	ecx, DWORD PTR _vOther$[ebp]
	call	??Amatrix3x4@@QBEPBMH@Z			; matrix3x4::operator[]
	mov	esi, eax
	mov	edi, 4
	shl	edi, 0
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	ecx, 4
	shl	ecx, 0
	mov	edx, DWORD PTR [esi+edi]
	mov	DWORD PTR [eax+ecx], edx

; 900  : 	mat[2][1] = vOther[2][1];

	push	2
	mov	ecx, DWORD PTR _vOther$[ebp]
	call	??Amatrix3x4@@QBEPBMH@Z			; matrix3x4::operator[]
	mov	esi, eax
	mov	edi, 4
	shl	edi, 0
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	ecx, 4
	shl	ecx, 0
	mov	edx, DWORD PTR [esi+edi]
	mov	DWORD PTR [eax+ecx], edx

; 901  : 	mat[3][1] = vOther[3][1];

	push	3
	mov	ecx, DWORD PTR _vOther$[ebp]
	call	??Amatrix3x4@@QBEPBMH@Z			; matrix3x4::operator[]
	mov	esi, eax
	mov	edi, 4
	shl	edi, 0
	mov	eax, 16					; 00000010H
	imul	ecx, eax, 3
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	ecx, 4
	shl	ecx, 0
	mov	edx, DWORD PTR [esi+edi]
	mov	DWORD PTR [eax+ecx], edx

; 902  : 	mat[0][2] = vOther[0][2];

	push	0
	mov	ecx, DWORD PTR _vOther$[ebp]
	call	??Amatrix3x4@@QBEPBMH@Z			; matrix3x4::operator[]
	mov	esi, eax
	mov	edi, 4
	shl	edi, 1
	mov	eax, 16					; 00000010H
	imul	ecx, eax, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	ecx, 4
	shl	ecx, 1
	mov	edx, DWORD PTR [esi+edi]
	mov	DWORD PTR [eax+ecx], edx

; 903  : 	mat[1][2] = vOther[1][2];

	push	1
	mov	ecx, DWORD PTR _vOther$[ebp]
	call	??Amatrix3x4@@QBEPBMH@Z			; matrix3x4::operator[]
	mov	esi, eax
	mov	edi, 4
	shl	edi, 1
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	ecx, 4
	shl	ecx, 1
	mov	edx, DWORD PTR [esi+edi]
	mov	DWORD PTR [eax+ecx], edx

; 904  : 	mat[2][2] = vOther[2][2];

	push	2
	mov	ecx, DWORD PTR _vOther$[ebp]
	call	??Amatrix3x4@@QBEPBMH@Z			; matrix3x4::operator[]
	mov	esi, eax
	mov	edi, 4
	shl	edi, 1
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	ecx, 4
	shl	ecx, 1
	mov	edx, DWORD PTR [esi+edi]
	mov	DWORD PTR [eax+ecx], edx

; 905  : 	mat[3][2] = vOther[3][2];

	push	3
	mov	ecx, DWORD PTR _vOther$[ebp]
	call	??Amatrix3x4@@QBEPBMH@Z			; matrix3x4::operator[]
	mov	esi, eax
	mov	edi, 4
	shl	edi, 1
	mov	eax, 16					; 00000010H
	imul	ecx, eax, 3
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	ecx, 4
	shl	ecx, 1
	mov	edx, DWORD PTR [esi+edi]
	mov	DWORD PTR [eax+ecx], edx

; 906  : 	mat[0][3] = 0.0f;

	mov	eax, 16					; 00000010H
	imul	ecx, eax, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	ecx, 4
	imul	edx, ecx, 3
	xorps	xmm0, xmm0
	movss	DWORD PTR [eax+edx], xmm0

; 907  : 	mat[1][3] = 0.0f;

	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	ecx, 4
	imul	edx, ecx, 3
	xorps	xmm0, xmm0
	movss	DWORD PTR [eax+edx], xmm0

; 908  : 	mat[2][3] = 0.0f;

	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	ecx, 4
	imul	edx, ecx, 3
	xorps	xmm0, xmm0
	movss	DWORD PTR [eax+edx], xmm0

; 909  : 	mat[3][3] = 1.0f;

	mov	eax, 16					; 00000010H
	imul	ecx, eax, 3
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	ecx, 4
	imul	edx, ecx, 3
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [eax+edx], xmm0

; 910  : 
; 911  : 	return *this;

	mov	eax, DWORD PTR _this$[ebp]

; 912  : }

	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
??4matrix4x4@@QAEAAV0@ABVmatrix3x4@@@Z ENDP		; matrix4x4::operator=
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xashxt_v0.81_rev.1_with_sources\xashxt_v0.81_rev.1_src\game_shared\matrix.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
_vOther$ = 8						; size = 4
??4matrix4x4@@QAEAAV0@ABVmatrix3x3@@@Z PROC		; matrix4x4::operator=
; _this$ = ecx

; 870  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 871  : 	mat[0][0] = vOther[0][0];

	push	0
	mov	ecx, DWORD PTR _vOther$[ebp]
	call	??Amatrix3x3@@QBEPBMH@Z			; matrix3x3::operator[]
	mov	esi, eax
	mov	eax, 4
	imul	edi, eax, 0
	mov	ecx, 16					; 00000010H
	imul	ecx, ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	edx, 4
	imul	ecx, edx, 0
	mov	edx, DWORD PTR [esi+edi]
	mov	DWORD PTR [eax+ecx], edx

; 872  : 	mat[1][0] = vOther[1][0];

	push	1
	mov	ecx, DWORD PTR _vOther$[ebp]
	call	??Amatrix3x3@@QBEPBMH@Z			; matrix3x3::operator[]
	mov	esi, eax
	mov	eax, 4
	imul	edi, eax, 0
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	ecx, 4
	imul	edx, ecx, 0
	mov	ecx, DWORD PTR [esi+edi]
	mov	DWORD PTR [eax+edx], ecx

; 873  : 	mat[2][0] = vOther[2][0];

	push	2
	mov	ecx, DWORD PTR _vOther$[ebp]
	call	??Amatrix3x3@@QBEPBMH@Z			; matrix3x3::operator[]
	mov	esi, eax
	mov	edx, 4
	imul	edi, edx, 0
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	ecx, 4
	imul	edx, ecx, 0
	mov	ecx, DWORD PTR [esi+edi]
	mov	DWORD PTR [eax+edx], ecx

; 874  : 	mat[3][0] = 0.0f;

	mov	edx, 16					; 00000010H
	imul	ecx, edx, 3
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	ecx, 4
	imul	edx, ecx, 0
	xorps	xmm0, xmm0
	movss	DWORD PTR [eax+edx], xmm0

; 875  : 	mat[0][1] = vOther[0][1];

	push	0
	mov	ecx, DWORD PTR _vOther$[ebp]
	call	??Amatrix3x3@@QBEPBMH@Z			; matrix3x3::operator[]
	mov	esi, eax
	mov	edi, 4
	shl	edi, 0
	mov	eax, 16					; 00000010H
	imul	ecx, eax, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	ecx, 4
	shl	ecx, 0
	mov	edx, DWORD PTR [esi+edi]
	mov	DWORD PTR [eax+ecx], edx

; 876  : 	mat[1][1] = vOther[1][1];

	push	1
	mov	ecx, DWORD PTR _vOther$[ebp]
	call	??Amatrix3x3@@QBEPBMH@Z			; matrix3x3::operator[]
	mov	esi, eax
	mov	edi, 4
	shl	edi, 0
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	ecx, 4
	shl	ecx, 0
	mov	edx, DWORD PTR [esi+edi]
	mov	DWORD PTR [eax+ecx], edx

; 877  : 	mat[2][1] = vOther[2][1];

	push	2
	mov	ecx, DWORD PTR _vOther$[ebp]
	call	??Amatrix3x3@@QBEPBMH@Z			; matrix3x3::operator[]
	mov	esi, eax
	mov	edi, 4
	shl	edi, 0
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	ecx, 4
	shl	ecx, 0
	mov	edx, DWORD PTR [esi+edi]
	mov	DWORD PTR [eax+ecx], edx

; 878  : 	mat[3][1] = 0.0f;

	mov	eax, 16					; 00000010H
	imul	ecx, eax, 3
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	ecx, 4
	shl	ecx, 0
	xorps	xmm0, xmm0
	movss	DWORD PTR [eax+ecx], xmm0

; 879  : 	mat[0][2] = vOther[0][2];

	push	0
	mov	ecx, DWORD PTR _vOther$[ebp]
	call	??Amatrix3x3@@QBEPBMH@Z			; matrix3x3::operator[]
	mov	esi, eax
	mov	edi, 4
	shl	edi, 1
	mov	edx, 16					; 00000010H
	imul	ecx, edx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	ecx, 4
	shl	ecx, 1
	mov	edx, DWORD PTR [esi+edi]
	mov	DWORD PTR [eax+ecx], edx

; 880  : 	mat[1][2] = vOther[1][2];

	push	1
	mov	ecx, DWORD PTR _vOther$[ebp]
	call	??Amatrix3x3@@QBEPBMH@Z			; matrix3x3::operator[]
	mov	esi, eax
	mov	edi, 4
	shl	edi, 1
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	ecx, 4
	shl	ecx, 1
	mov	edx, DWORD PTR [esi+edi]
	mov	DWORD PTR [eax+ecx], edx

; 881  : 	mat[2][2] = vOther[2][2];

	push	2
	mov	ecx, DWORD PTR _vOther$[ebp]
	call	??Amatrix3x3@@QBEPBMH@Z			; matrix3x3::operator[]
	mov	esi, eax
	mov	edi, 4
	shl	edi, 1
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	ecx, 4
	shl	ecx, 1
	mov	edx, DWORD PTR [esi+edi]
	mov	DWORD PTR [eax+ecx], edx

; 882  : 	mat[3][2] = 0.0f;

	mov	eax, 16					; 00000010H
	imul	ecx, eax, 3
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	ecx, 4
	shl	ecx, 1
	xorps	xmm0, xmm0
	movss	DWORD PTR [eax+ecx], xmm0

; 883  : 	mat[0][3] = 0.0f;

	mov	edx, 16					; 00000010H
	imul	ecx, edx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	ecx, 4
	imul	edx, ecx, 3
	xorps	xmm0, xmm0
	movss	DWORD PTR [eax+edx], xmm0

; 884  : 	mat[1][3] = 0.0f;

	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	ecx, 4
	imul	edx, ecx, 3
	xorps	xmm0, xmm0
	movss	DWORD PTR [eax+edx], xmm0

; 885  : 	mat[2][3] = 0.0f;

	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	ecx, 4
	imul	edx, ecx, 3
	xorps	xmm0, xmm0
	movss	DWORD PTR [eax+edx], xmm0

; 886  : 	mat[3][3] = 1.0f;

	mov	eax, 16					; 00000010H
	imul	ecx, eax, 3
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	ecx, 4
	imul	edx, ecx, 3
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [eax+edx], xmm0

; 887  : 
; 888  : 	return *this;

	mov	eax, DWORD PTR _this$[ebp]

; 889  : }

	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
??4matrix4x4@@QAEAAV0@ABVmatrix3x3@@@Z ENDP		; matrix4x4::operator=
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xashxt_v0.81_rev.1_with_sources\xashxt_v0.81_rev.1_src\game_shared\matrix.h
;	COMDAT ??Amatrix4x4@@QBEPBMH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_i$ = 8							; size = 4
??Amatrix4x4@@QBEPBMH@Z PROC				; matrix4x4::operator[], COMDAT
; _this$ = ecx

; 942  : 	float const* operator[]( int i ) const { return mat[i]; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _i$[ebp]
	shl	ecx, 4
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector4D@@QBEPBMXZ			; Vector4D::operator float const *
	mov	esp, ebp
	pop	ebp
	ret	4
??Amatrix4x4@@QBEPBMH@Z ENDP				; matrix4x4::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xashxt_v0.81_rev.1_with_sources\xashxt_v0.81_rev.1_src\game_shared\matrix.h
;	COMDAT ??Amatrix4x4@@QAEPAMH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_i$ = 8							; size = 4
??Amatrix4x4@@QAEPAMH@Z PROC				; matrix4x4::operator[], COMDAT
; _this$ = ecx

; 941  : 	float* operator[]( int i ) { return mat[i]; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _i$[ebp]
	shl	ecx, 4
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	esp, ebp
	pop	ebp
	ret	4
??Amatrix4x4@@QAEPAMH@Z ENDP				; matrix4x4::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xashxt_v0.81_rev.1_with_sources\xashxt_v0.81_rev.1_src\game_shared\matrix.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
_x$ = 8							; size = 4
_y$ = 12						; size = 4
_z$ = 16						; size = 4
?CreateScale@matrix4x4@@QAEXMMM@Z PROC			; matrix4x4::CreateScale
; _this$ = ecx

; 1084 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1085 : 	mat[0][0] = x;

	mov	eax, 16					; 00000010H
	imul	ecx, eax, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	ecx, 4
	imul	edx, ecx, 0
	movss	xmm0, DWORD PTR _x$[ebp]
	movss	DWORD PTR [eax+edx], xmm0

; 1086 : 	mat[1][0] = 0.0f;

	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	ecx, 4
	imul	edx, ecx, 0
	xorps	xmm0, xmm0
	movss	DWORD PTR [eax+edx], xmm0

; 1087 : 	mat[2][0] = 0.0f;

	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	ecx, 4
	imul	edx, ecx, 0
	xorps	xmm0, xmm0
	movss	DWORD PTR [eax+edx], xmm0

; 1088 : 	mat[3][0] = 0.0f;

	mov	eax, 16					; 00000010H
	imul	ecx, eax, 3
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	ecx, 4
	imul	edx, ecx, 0
	xorps	xmm0, xmm0
	movss	DWORD PTR [eax+edx], xmm0

; 1089 : 	mat[0][1] = 0.0f;

	mov	eax, 16					; 00000010H
	imul	ecx, eax, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	ecx, 4
	shl	ecx, 0
	xorps	xmm0, xmm0
	movss	DWORD PTR [eax+ecx], xmm0

; 1090 : 	mat[1][1] = y;

	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	edx, 4
	shl	edx, 0
	movss	xmm0, DWORD PTR _y$[ebp]
	movss	DWORD PTR [eax+edx], xmm0

; 1091 : 	mat[2][1] = 0.0f;

	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	ecx, 4
	shl	ecx, 0
	xorps	xmm0, xmm0
	movss	DWORD PTR [eax+ecx], xmm0

; 1092 : 	mat[3][1] = 0.0f;

	mov	edx, 16					; 00000010H
	imul	ecx, edx, 3
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	ecx, 4
	shl	ecx, 0
	xorps	xmm0, xmm0
	movss	DWORD PTR [eax+ecx], xmm0

; 1093 : 	mat[0][2] = 0.0f;

	mov	edx, 16					; 00000010H
	imul	ecx, edx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	ecx, 4
	shl	ecx, 1
	xorps	xmm0, xmm0
	movss	DWORD PTR [eax+ecx], xmm0

; 1094 : 	mat[1][2] = 0.0f;

	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	edx, 4
	shl	edx, 1
	xorps	xmm0, xmm0
	movss	DWORD PTR [eax+edx], xmm0

; 1095 : 	mat[2][2] = z;

	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	ecx, 4
	shl	ecx, 1
	movss	xmm0, DWORD PTR _z$[ebp]
	movss	DWORD PTR [eax+ecx], xmm0

; 1096 : 	mat[3][2] = 0.0f;

	mov	edx, 16					; 00000010H
	imul	ecx, edx, 3
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	ecx, 4
	shl	ecx, 1
	xorps	xmm0, xmm0
	movss	DWORD PTR [eax+ecx], xmm0

; 1097 : 	mat[0][3] = 0.0f;

	mov	edx, 16					; 00000010H
	imul	ecx, edx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	ecx, 4
	imul	edx, ecx, 3
	xorps	xmm0, xmm0
	movss	DWORD PTR [eax+edx], xmm0

; 1098 : 	mat[1][3] = 0.0f;

	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	ecx, 4
	imul	edx, ecx, 3
	xorps	xmm0, xmm0
	movss	DWORD PTR [eax+edx], xmm0

; 1099 : 	mat[2][3] = 0.0f;

	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	ecx, 4
	imul	edx, ecx, 3
	xorps	xmm0, xmm0
	movss	DWORD PTR [eax+edx], xmm0

; 1100 : 	mat[3][3] = 1.0f;

	mov	eax, 16					; 00000010H
	imul	ecx, eax, 3
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	ecx, 4
	imul	edx, ecx, 3
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [eax+edx], xmm0

; 1101 : }

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?CreateScale@matrix4x4@@QAEXMMM@Z ENDP			; matrix4x4::CreateScale
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xashxt_v0.81_rev.1_with_sources\xashxt_v0.81_rev.1_src\game_shared\matrix.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
_scale$ = 8						; size = 4
?CreateScale@matrix4x4@@QAEXM@Z PROC			; matrix4x4::CreateScale
; _this$ = ecx

; 1064 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1065 : 	mat[0][0] = scale;

	mov	eax, 16					; 00000010H
	imul	ecx, eax, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	ecx, 4
	imul	edx, ecx, 0
	movss	xmm0, DWORD PTR _scale$[ebp]
	movss	DWORD PTR [eax+edx], xmm0

; 1066 : 	mat[1][0] = 0.0f;

	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	ecx, 4
	imul	edx, ecx, 0
	xorps	xmm0, xmm0
	movss	DWORD PTR [eax+edx], xmm0

; 1067 : 	mat[2][0] = 0.0f;

	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	ecx, 4
	imul	edx, ecx, 0
	xorps	xmm0, xmm0
	movss	DWORD PTR [eax+edx], xmm0

; 1068 : 	mat[3][0] = 0.0f;

	mov	eax, 16					; 00000010H
	imul	ecx, eax, 3
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	ecx, 4
	imul	edx, ecx, 0
	xorps	xmm0, xmm0
	movss	DWORD PTR [eax+edx], xmm0

; 1069 : 	mat[0][1] = 0.0f;

	mov	eax, 16					; 00000010H
	imul	ecx, eax, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	ecx, 4
	shl	ecx, 0
	xorps	xmm0, xmm0
	movss	DWORD PTR [eax+ecx], xmm0

; 1070 : 	mat[1][1] = scale;

	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	edx, 4
	shl	edx, 0
	movss	xmm0, DWORD PTR _scale$[ebp]
	movss	DWORD PTR [eax+edx], xmm0

; 1071 : 	mat[2][1] = 0.0f;

	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	ecx, 4
	shl	ecx, 0
	xorps	xmm0, xmm0
	movss	DWORD PTR [eax+ecx], xmm0

; 1072 : 	mat[3][1] = 0.0f;

	mov	edx, 16					; 00000010H
	imul	ecx, edx, 3
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	ecx, 4
	shl	ecx, 0
	xorps	xmm0, xmm0
	movss	DWORD PTR [eax+ecx], xmm0

; 1073 : 	mat[0][2] = 0.0f;

	mov	edx, 16					; 00000010H
	imul	ecx, edx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	ecx, 4
	shl	ecx, 1
	xorps	xmm0, xmm0
	movss	DWORD PTR [eax+ecx], xmm0

; 1074 : 	mat[1][2] = 0.0f;

	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	edx, 4
	shl	edx, 1
	xorps	xmm0, xmm0
	movss	DWORD PTR [eax+edx], xmm0

; 1075 : 	mat[2][2] = scale;

	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	ecx, 4
	shl	ecx, 1
	movss	xmm0, DWORD PTR _scale$[ebp]
	movss	DWORD PTR [eax+ecx], xmm0

; 1076 : 	mat[3][2] = 0.0f;

	mov	edx, 16					; 00000010H
	imul	ecx, edx, 3
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	ecx, 4
	shl	ecx, 1
	xorps	xmm0, xmm0
	movss	DWORD PTR [eax+ecx], xmm0

; 1077 : 	mat[0][3] = 0.0f;

	mov	edx, 16					; 00000010H
	imul	ecx, edx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	ecx, 4
	imul	edx, ecx, 3
	xorps	xmm0, xmm0
	movss	DWORD PTR [eax+edx], xmm0

; 1078 : 	mat[1][3] = 0.0f;

	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	ecx, 4
	imul	edx, ecx, 3
	xorps	xmm0, xmm0
	movss	DWORD PTR [eax+edx], xmm0

; 1079 : 	mat[2][3] = 0.0f;

	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	ecx, 4
	imul	edx, ecx, 3
	xorps	xmm0, xmm0
	movss	DWORD PTR [eax+edx], xmm0

; 1080 : 	mat[3][3] = 1.0f;

	mov	eax, 16					; 00000010H
	imul	ecx, eax, 3
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	ecx, 4
	imul	edx, ecx, 3
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [eax+edx], xmm0

; 1081 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?CreateScale@matrix4x4@@QAEXM@Z ENDP			; matrix4x4::CreateScale
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xashxt_v0.81_rev.1_with_sources\xashxt_v0.81_rev.1_src\game_shared\matrix.cpp
_TEXT	SEGMENT
tv281 = -60						; size = 8
tv394 = -52						; size = 4
tv392 = -48						; size = 4
tv390 = -44						; size = 4
tv388 = -40						; size = 4
tv386 = -36						; size = 4
tv384 = -32						; size = 4
tv382 = -28						; size = 4
tv380 = -24						; size = 4
tv378 = -20						; size = 4
_s$ = -16						; size = 4
_len$ = -12						; size = 4
_c$ = -8						; size = 4
_this$ = -4						; size = 4
_angle$ = 8						; size = 4
_x$ = 12						; size = 4
_y$ = 16						; size = 4
_z$ = 20						; size = 4
?CreateRotate@matrix4x4@@QAEXMMMM@Z PROC		; matrix4x4::CreateRotate
; _this$ = ecx

; 1032 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 60					; 0000003cH
	mov	DWORD PTR _this$[ebp], ecx

; 1033 : 	float	len, c, s;
; 1034 : 
; 1035 : 	len = x * x + y * y + z * z;

	movss	xmm0, DWORD PTR _x$[ebp]
	mulss	xmm0, DWORD PTR _x$[ebp]
	movss	xmm1, DWORD PTR _y$[ebp]
	mulss	xmm1, DWORD PTR _y$[ebp]
	addss	xmm0, xmm1
	movss	xmm1, DWORD PTR _z$[ebp]
	mulss	xmm1, DWORD PTR _z$[ebp]
	addss	xmm0, xmm1
	movss	DWORD PTR _len$[ebp], xmm0

; 1036 : 	if( len != 0.0f ) len = 1.0f / sqrt( len );

	movss	xmm0, DWORD PTR _len$[ebp]
	ucomiss	xmm0, DWORD PTR __real@00000000
	lahf
	test	ah, 68					; 00000044H
	jnp	SHORT $LN2@CreateRota
	cvtss2sd xmm0, DWORD PTR _len$[ebp]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	call	_sqrt
	add	esp, 8
	fstp	QWORD PTR tv281[ebp]
	movsd	xmm0, QWORD PTR __real@3ff0000000000000
	divsd	xmm0, QWORD PTR tv281[ebp]
	cvtsd2ss xmm0, xmm0
	movss	DWORD PTR _len$[ebp], xmm0
$LN2@CreateRota:

; 1037 : 
; 1038 : 	x *= len;

	movss	xmm0, DWORD PTR _x$[ebp]
	mulss	xmm0, DWORD PTR _len$[ebp]
	movss	DWORD PTR _x$[ebp], xmm0

; 1039 : 	y *= len;

	movss	xmm0, DWORD PTR _y$[ebp]
	mulss	xmm0, DWORD PTR _len$[ebp]
	movss	DWORD PTR _y$[ebp], xmm0

; 1040 : 	z *= len;

	movss	xmm0, DWORD PTR _z$[ebp]
	mulss	xmm0, DWORD PTR _len$[ebp]
	movss	DWORD PTR _z$[ebp], xmm0

; 1041 : 
; 1042 : 	angle *= (float)(-M_PI / 180.0f);

	movss	xmm0, DWORD PTR _angle$[ebp]
	mulss	xmm0, DWORD PTR __real@bc8efa35
	movss	DWORD PTR _angle$[ebp], xmm0

; 1043 : 	SinCos( angle, &s, &c );

	lea	eax, DWORD PTR _c$[ebp]
	push	eax
	lea	ecx, DWORD PTR _s$[ebp]
	push	ecx
	push	ecx
	movss	xmm0, DWORD PTR _angle$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	?SinCos@@YAXMPAM0@Z			; SinCos
	add	esp, 12					; 0000000cH

; 1044 : 
; 1045 : 	mat[0][0] = x * x + c * (1 - x * x);

	movss	xmm0, DWORD PTR _x$[ebp]
	mulss	xmm0, DWORD PTR _x$[ebp]
	movss	xmm1, DWORD PTR _x$[ebp]
	mulss	xmm1, DWORD PTR _x$[ebp]
	movss	xmm2, DWORD PTR __real@3f800000
	subss	xmm2, xmm1
	mulss	xmm2, DWORD PTR _c$[ebp]
	addss	xmm0, xmm2
	mov	edx, 16					; 00000010H
	imul	ecx, edx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv378[ebp], xmm0
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	ecx, 4
	imul	edx, ecx, 0
	movss	xmm0, DWORD PTR tv378[ebp]
	movss	DWORD PTR [eax+edx], xmm0

; 1046 : 	mat[1][0] = x * y * (1 - c) + z * s;

	movss	xmm0, DWORD PTR _x$[ebp]
	mulss	xmm0, DWORD PTR _y$[ebp]
	movss	xmm1, DWORD PTR __real@3f800000
	subss	xmm1, DWORD PTR _c$[ebp]
	mulss	xmm0, xmm1
	movss	xmm1, DWORD PTR _z$[ebp]
	mulss	xmm1, DWORD PTR _s$[ebp]
	addss	xmm0, xmm1
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv380[ebp], xmm0
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	ecx, 4
	imul	edx, ecx, 0
	movss	xmm0, DWORD PTR tv380[ebp]
	movss	DWORD PTR [eax+edx], xmm0

; 1047 : 	mat[2][0] = z * x * (1 - c) - y * s;

	movss	xmm0, DWORD PTR _z$[ebp]
	mulss	xmm0, DWORD PTR _x$[ebp]
	movss	xmm1, DWORD PTR __real@3f800000
	subss	xmm1, DWORD PTR _c$[ebp]
	mulss	xmm0, xmm1
	movss	xmm1, DWORD PTR _y$[ebp]
	mulss	xmm1, DWORD PTR _s$[ebp]
	subss	xmm0, xmm1
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv382[ebp], xmm0
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	ecx, 4
	imul	edx, ecx, 0
	movss	xmm0, DWORD PTR tv382[ebp]
	movss	DWORD PTR [eax+edx], xmm0

; 1048 : 	mat[3][0] = 0.0f;

	mov	eax, 16					; 00000010H
	imul	ecx, eax, 3
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	ecx, 4
	imul	edx, ecx, 0
	xorps	xmm0, xmm0
	movss	DWORD PTR [eax+edx], xmm0

; 1049 : 	mat[0][1] = x * y * (1 - c) - z * s;

	movss	xmm0, DWORD PTR _x$[ebp]
	mulss	xmm0, DWORD PTR _y$[ebp]
	movss	xmm1, DWORD PTR __real@3f800000
	subss	xmm1, DWORD PTR _c$[ebp]
	mulss	xmm0, xmm1
	movss	xmm1, DWORD PTR _z$[ebp]
	mulss	xmm1, DWORD PTR _s$[ebp]
	subss	xmm0, xmm1
	mov	eax, 16					; 00000010H
	imul	ecx, eax, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv384[ebp], xmm0
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	ecx, 4
	shl	ecx, 0
	movss	xmm0, DWORD PTR tv384[ebp]
	movss	DWORD PTR [eax+ecx], xmm0

; 1050 : 	mat[1][1] = y * y + c * (1 - y * y);

	movss	xmm0, DWORD PTR _y$[ebp]
	mulss	xmm0, DWORD PTR _y$[ebp]
	movss	xmm1, DWORD PTR _y$[ebp]
	mulss	xmm1, DWORD PTR _y$[ebp]
	movss	xmm2, DWORD PTR __real@3f800000
	subss	xmm2, xmm1
	mulss	xmm2, DWORD PTR _c$[ebp]
	addss	xmm0, xmm2
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv386[ebp], xmm0
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	edx, 4
	shl	edx, 0
	movss	xmm0, DWORD PTR tv386[ebp]
	movss	DWORD PTR [eax+edx], xmm0

; 1051 : 	mat[2][1] = y * z * (1 - c) + x * s;

	movss	xmm0, DWORD PTR _y$[ebp]
	mulss	xmm0, DWORD PTR _z$[ebp]
	movss	xmm1, DWORD PTR __real@3f800000
	subss	xmm1, DWORD PTR _c$[ebp]
	mulss	xmm0, xmm1
	movss	xmm1, DWORD PTR _x$[ebp]
	mulss	xmm1, DWORD PTR _s$[ebp]
	addss	xmm0, xmm1
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv388[ebp], xmm0
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	ecx, 4
	shl	ecx, 0
	movss	xmm0, DWORD PTR tv388[ebp]
	movss	DWORD PTR [eax+ecx], xmm0

; 1052 : 	mat[3][1] = 0.0f;

	mov	edx, 16					; 00000010H
	imul	ecx, edx, 3
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	ecx, 4
	shl	ecx, 0
	xorps	xmm0, xmm0
	movss	DWORD PTR [eax+ecx], xmm0

; 1053 : 	mat[0][2] = z * x * (1 - c) + y * s;

	movss	xmm0, DWORD PTR _z$[ebp]
	mulss	xmm0, DWORD PTR _x$[ebp]
	movss	xmm1, DWORD PTR __real@3f800000
	subss	xmm1, DWORD PTR _c$[ebp]
	mulss	xmm0, xmm1
	movss	xmm1, DWORD PTR _y$[ebp]
	mulss	xmm1, DWORD PTR _s$[ebp]
	addss	xmm0, xmm1
	mov	edx, 16					; 00000010H
	imul	ecx, edx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv390[ebp], xmm0
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	ecx, 4
	shl	ecx, 1
	movss	xmm0, DWORD PTR tv390[ebp]
	movss	DWORD PTR [eax+ecx], xmm0

; 1054 : 	mat[1][2] = y * z * (1 - c) - x * s;

	movss	xmm0, DWORD PTR _y$[ebp]
	mulss	xmm0, DWORD PTR _z$[ebp]
	movss	xmm1, DWORD PTR __real@3f800000
	subss	xmm1, DWORD PTR _c$[ebp]
	mulss	xmm0, xmm1
	movss	xmm1, DWORD PTR _x$[ebp]
	mulss	xmm1, DWORD PTR _s$[ebp]
	subss	xmm0, xmm1
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv392[ebp], xmm0
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	edx, 4
	shl	edx, 1
	movss	xmm0, DWORD PTR tv392[ebp]
	movss	DWORD PTR [eax+edx], xmm0

; 1055 : 	mat[2][2] = z * z + c * (1 - z * z);

	movss	xmm0, DWORD PTR _z$[ebp]
	mulss	xmm0, DWORD PTR _z$[ebp]
	movss	xmm1, DWORD PTR _z$[ebp]
	mulss	xmm1, DWORD PTR _z$[ebp]
	movss	xmm2, DWORD PTR __real@3f800000
	subss	xmm2, xmm1
	mulss	xmm2, DWORD PTR _c$[ebp]
	addss	xmm0, xmm2
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv394[ebp], xmm0
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	ecx, 4
	shl	ecx, 1
	movss	xmm0, DWORD PTR tv394[ebp]
	movss	DWORD PTR [eax+ecx], xmm0

; 1056 : 	mat[3][2] = 0.0f;

	mov	edx, 16					; 00000010H
	imul	ecx, edx, 3
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	ecx, 4
	shl	ecx, 1
	xorps	xmm0, xmm0
	movss	DWORD PTR [eax+ecx], xmm0

; 1057 : 	mat[0][3] = 0.0f;

	mov	edx, 16					; 00000010H
	imul	ecx, edx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	ecx, 4
	imul	edx, ecx, 3
	xorps	xmm0, xmm0
	movss	DWORD PTR [eax+edx], xmm0

; 1058 : 	mat[1][3] = 0.0f;

	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	ecx, 4
	imul	edx, ecx, 3
	xorps	xmm0, xmm0
	movss	DWORD PTR [eax+edx], xmm0

; 1059 : 	mat[2][3] = 0.0f;

	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	ecx, 4
	imul	edx, ecx, 3
	xorps	xmm0, xmm0
	movss	DWORD PTR [eax+edx], xmm0

; 1060 : 	mat[3][3] = 1.0f;

	mov	eax, 16					; 00000010H
	imul	ecx, eax, 3
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	ecx, 4
	imul	edx, ecx, 3
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [eax+edx], xmm0

; 1061 : }

	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
?CreateRotate@matrix4x4@@QAEXMMMM@Z ENDP		; matrix4x4::CreateRotate
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xashxt_v0.81_rev.1_with_sources\xashxt_v0.81_rev.1_src\game_shared\matrix.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
_x$ = 8							; size = 4
_y$ = 12						; size = 4
_z$ = 16						; size = 4
?CreateTranslate@matrix4x4@@QAEXMMM@Z PROC		; matrix4x4::CreateTranslate
; _this$ = ecx

; 1012 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1013 : 	mat[0][0] = 1.0f;

	mov	eax, 16					; 00000010H
	imul	ecx, eax, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	ecx, 4
	imul	edx, ecx, 0
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [eax+edx], xmm0

; 1014 : 	mat[1][0] = 0.0f;

	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	ecx, 4
	imul	edx, ecx, 0
	xorps	xmm0, xmm0
	movss	DWORD PTR [eax+edx], xmm0

; 1015 : 	mat[2][0] = 0.0f;

	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	ecx, 4
	imul	edx, ecx, 0
	xorps	xmm0, xmm0
	movss	DWORD PTR [eax+edx], xmm0

; 1016 : 	mat[3][0] = x;

	mov	eax, 16					; 00000010H
	imul	ecx, eax, 3
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	ecx, 4
	imul	edx, ecx, 0
	movss	xmm0, DWORD PTR _x$[ebp]
	movss	DWORD PTR [eax+edx], xmm0

; 1017 : 	mat[0][1] = 0.0f;

	mov	eax, 16					; 00000010H
	imul	ecx, eax, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	ecx, 4
	shl	ecx, 0
	xorps	xmm0, xmm0
	movss	DWORD PTR [eax+ecx], xmm0

; 1018 : 	mat[1][1] = 1.0f;

	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	edx, 4
	shl	edx, 0
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [eax+edx], xmm0

; 1019 : 	mat[2][1] = 0.0f;

	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	ecx, 4
	shl	ecx, 0
	xorps	xmm0, xmm0
	movss	DWORD PTR [eax+ecx], xmm0

; 1020 : 	mat[3][1] = y;

	mov	edx, 16					; 00000010H
	imul	ecx, edx, 3
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	ecx, 4
	shl	ecx, 0
	movss	xmm0, DWORD PTR _y$[ebp]
	movss	DWORD PTR [eax+ecx], xmm0

; 1021 : 	mat[0][2] = 0.0f;

	mov	edx, 16					; 00000010H
	imul	ecx, edx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	ecx, 4
	shl	ecx, 1
	xorps	xmm0, xmm0
	movss	DWORD PTR [eax+ecx], xmm0

; 1022 : 	mat[1][2] = 0.0f;

	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	edx, 4
	shl	edx, 1
	xorps	xmm0, xmm0
	movss	DWORD PTR [eax+edx], xmm0

; 1023 : 	mat[2][2] = 1.0f;

	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	ecx, 4
	shl	ecx, 1
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [eax+ecx], xmm0

; 1024 : 	mat[3][2] = z;

	mov	edx, 16					; 00000010H
	imul	ecx, edx, 3
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	ecx, 4
	shl	ecx, 1
	movss	xmm0, DWORD PTR _z$[ebp]
	movss	DWORD PTR [eax+ecx], xmm0

; 1025 : 	mat[0][3] = 0.0f;

	mov	edx, 16					; 00000010H
	imul	ecx, edx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	ecx, 4
	imul	edx, ecx, 3
	xorps	xmm0, xmm0
	movss	DWORD PTR [eax+edx], xmm0

; 1026 : 	mat[1][3] = 0.0f;

	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	ecx, 4
	imul	edx, ecx, 3
	xorps	xmm0, xmm0
	movss	DWORD PTR [eax+edx], xmm0

; 1027 : 	mat[2][3] = 0.0f;

	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	ecx, 4
	imul	edx, ecx, 3
	xorps	xmm0, xmm0
	movss	DWORD PTR [eax+edx], xmm0

; 1028 : 	mat[3][3] = 1.0f;

	mov	eax, 16					; 00000010H
	imul	ecx, eax, 3
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	ecx, 4
	imul	edx, ecx, 3
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [eax+edx], xmm0

; 1029 : }

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?CreateTranslate@matrix4x4@@QAEXMMM@Z ENDP		; matrix4x4::CreateTranslate
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xashxt_v0.81_rev.1_with_sources\xashxt_v0.81_rev.1_src\game_shared\matrix.cpp
_TEXT	SEGMENT
tv310 = -28						; size = 4
tv308 = -24						; size = 4
tv306 = -20						; size = 4
tv304 = -16						; size = 4
tv302 = -12						; size = 4
tv300 = -8						; size = 4
_this$ = -4						; size = 4
_xLeft$ = 8						; size = 4
_xRight$ = 12						; size = 4
_yBottom$ = 16						; size = 4
_yTop$ = 20						; size = 4
_zNear$ = 24						; size = 4
_zFar$ = 28						; size = 4
?CreateOrtho@matrix4x4@@QAEXMMMMMM@Z PROC		; matrix4x4::CreateOrtho
; _this$ = ecx

; 965  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH
	mov	DWORD PTR _this$[ebp], ecx

; 966  : 	mat[0][0] = 2.0f / (xRight - xLeft);

	movss	xmm0, DWORD PTR _xRight$[ebp]
	subss	xmm0, DWORD PTR _xLeft$[ebp]
	movss	xmm1, DWORD PTR __real@40000000
	divss	xmm1, xmm0
	mov	eax, 16					; 00000010H
	imul	ecx, eax, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv300[ebp], xmm1
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	ecx, 4
	imul	edx, ecx, 0
	movss	xmm0, DWORD PTR tv300[ebp]
	movss	DWORD PTR [eax+edx], xmm0

; 967  : 	mat[1][1] = 2.0f / (yTop - yBottom);

	movss	xmm0, DWORD PTR _yTop$[ebp]
	subss	xmm0, DWORD PTR _yBottom$[ebp]
	movss	xmm1, DWORD PTR __real@40000000
	divss	xmm1, xmm0
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv302[ebp], xmm1
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	ecx, 4
	shl	ecx, 0
	movss	xmm0, DWORD PTR tv302[ebp]
	movss	DWORD PTR [eax+ecx], xmm0

; 968  : 	mat[2][2] = -2.0f / (zFar - zNear);

	movss	xmm0, DWORD PTR _zFar$[ebp]
	subss	xmm0, DWORD PTR _zNear$[ebp]
	movss	xmm1, DWORD PTR __real@c0000000
	divss	xmm1, xmm0
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv304[ebp], xmm1
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	edx, 4
	shl	edx, 1
	movss	xmm0, DWORD PTR tv304[ebp]
	movss	DWORD PTR [eax+edx], xmm0

; 969  : 	mat[3][3] = 1.0f;

	mov	eax, 16					; 00000010H
	imul	ecx, eax, 3
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	ecx, 4
	imul	edx, ecx, 3
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [eax+edx], xmm0

; 970  : 	mat[0][1] = mat[1][0] = mat[2][0] = mat[2][1] = mat[0][3] = mat[1][3] = mat[2][3] = 0.0f;

	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	ecx, 4
	imul	edx, ecx, 3
	xorps	xmm0, xmm0
	movss	DWORD PTR [eax+edx], xmm0
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	ecx, 4
	imul	edx, ecx, 3
	xorps	xmm0, xmm0
	movss	DWORD PTR [eax+edx], xmm0
	mov	eax, 16					; 00000010H
	imul	ecx, eax, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	ecx, 4
	imul	edx, ecx, 3
	xorps	xmm0, xmm0
	movss	DWORD PTR [eax+edx], xmm0
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	ecx, 4
	shl	ecx, 0
	xorps	xmm0, xmm0
	movss	DWORD PTR [eax+ecx], xmm0
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	edx, 4
	imul	ecx, edx, 0
	xorps	xmm0, xmm0
	movss	DWORD PTR [eax+ecx], xmm0
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	edx, 4
	imul	ecx, edx, 0
	xorps	xmm0, xmm0
	movss	DWORD PTR [eax+ecx], xmm0
	mov	edx, 16					; 00000010H
	imul	ecx, edx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	ecx, 4
	shl	ecx, 0
	xorps	xmm0, xmm0
	movss	DWORD PTR [eax+ecx], xmm0

; 971  : 
; 972  : 	mat[0][2] = 0.0f;

	mov	edx, 16					; 00000010H
	imul	ecx, edx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	ecx, 4
	shl	ecx, 1
	xorps	xmm0, xmm0
	movss	DWORD PTR [eax+ecx], xmm0

; 973  : 	mat[1][2] = 0.0f;

	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	edx, 4
	shl	edx, 1
	xorps	xmm0, xmm0
	movss	DWORD PTR [eax+edx], xmm0

; 974  : 	mat[3][0] = -(xRight + xLeft) / (xRight - xLeft);

	movss	xmm0, DWORD PTR _xRight$[ebp]
	addss	xmm0, DWORD PTR _xLeft$[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	movss	xmm1, DWORD PTR _xRight$[ebp]
	subss	xmm1, DWORD PTR _xLeft$[ebp]
	divss	xmm0, xmm1
	mov	eax, 16					; 00000010H
	imul	ecx, eax, 3
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv306[ebp], xmm0
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	ecx, 4
	imul	edx, ecx, 0
	movss	xmm0, DWORD PTR tv306[ebp]
	movss	DWORD PTR [eax+edx], xmm0

; 975  : 	mat[3][1] = -(yTop + yBottom) / (yTop - yBottom);

	movss	xmm0, DWORD PTR _yTop$[ebp]
	addss	xmm0, DWORD PTR _yBottom$[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	movss	xmm1, DWORD PTR _yTop$[ebp]
	subss	xmm1, DWORD PTR _yBottom$[ebp]
	divss	xmm0, xmm1
	mov	eax, 16					; 00000010H
	imul	ecx, eax, 3
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv308[ebp], xmm0
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	ecx, 4
	shl	ecx, 0
	movss	xmm0, DWORD PTR tv308[ebp]
	movss	DWORD PTR [eax+ecx], xmm0

; 976  : 	mat[3][2] = -(zFar + zNear) / (zFar - zNear);

	movss	xmm0, DWORD PTR _zFar$[ebp]
	addss	xmm0, DWORD PTR _zNear$[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	movss	xmm1, DWORD PTR _zFar$[ebp]
	subss	xmm1, DWORD PTR _zNear$[ebp]
	divss	xmm0, xmm1
	mov	edx, 16					; 00000010H
	imul	ecx, edx, 3
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv310[ebp], xmm0
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	ecx, 4
	shl	ecx, 1
	movss	xmm0, DWORD PTR tv310[ebp]
	movss	DWORD PTR [eax+ecx], xmm0

; 977  : }

	mov	esp, ebp
	pop	ebp
	ret	24					; 00000018H
?CreateOrtho@matrix4x4@@QAEXMMMMMM@Z ENDP		; matrix4x4::CreateOrtho
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xashxt_v0.81_rev.1_with_sources\xashxt_v0.81_rev.1_src\game_shared\matrix.cpp
_TEXT	SEGMENT
tv312 = -28						; size = 4
tv310 = -24						; size = 4
tv308 = -20						; size = 4
tv306 = -16						; size = 4
tv304 = -12						; size = 4
tv302 = -8						; size = 4
_this$ = -4						; size = 4
_xMax$ = 8						; size = 4
_xMin$ = 12						; size = 4
_yMax$ = 16						; size = 4
_yMin$ = 20						; size = 4
_zNear$ = 24						; size = 4
_zFar$ = 28						; size = 4
?CreateProjection@matrix4x4@@QAEXMMMMMM@Z PROC		; matrix4x4::CreateProjection
; _this$ = ecx

; 938  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH
	mov	DWORD PTR _this$[ebp], ecx

; 939  : 	mat[0][0] = ( 2.0f * zNear ) / ( xMax - xMin );

	movss	xmm0, DWORD PTR __real@40000000
	mulss	xmm0, DWORD PTR _zNear$[ebp]
	movss	xmm1, DWORD PTR _xMax$[ebp]
	subss	xmm1, DWORD PTR _xMin$[ebp]
	divss	xmm0, xmm1
	mov	eax, 16					; 00000010H
	imul	ecx, eax, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv302[ebp], xmm0
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	ecx, 4
	imul	edx, ecx, 0
	movss	xmm0, DWORD PTR tv302[ebp]
	movss	DWORD PTR [eax+edx], xmm0

; 940  : 	mat[1][1] = ( 2.0f * zNear ) / ( yMax - yMin );

	movss	xmm0, DWORD PTR __real@40000000
	mulss	xmm0, DWORD PTR _zNear$[ebp]
	movss	xmm1, DWORD PTR _yMax$[ebp]
	subss	xmm1, DWORD PTR _yMin$[ebp]
	divss	xmm0, xmm1
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv304[ebp], xmm0
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	ecx, 4
	shl	ecx, 0
	movss	xmm0, DWORD PTR tv304[ebp]
	movss	DWORD PTR [eax+ecx], xmm0

; 941  : 	mat[2][2] = -( zFar + zNear ) / ( zFar - zNear );

	movss	xmm0, DWORD PTR _zFar$[ebp]
	addss	xmm0, DWORD PTR _zNear$[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	movss	xmm1, DWORD PTR _zFar$[ebp]
	subss	xmm1, DWORD PTR _zNear$[ebp]
	divss	xmm0, xmm1
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv306[ebp], xmm0
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	edx, 4
	shl	edx, 1
	movss	xmm0, DWORD PTR tv306[ebp]
	movss	DWORD PTR [eax+edx], xmm0

; 942  : 	mat[3][3] = mat[0][1] = mat[1][0] = mat[3][0] = mat[0][3] = mat[3][1] = mat[1][3] = 0.0f;

	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	ecx, 4
	imul	edx, ecx, 3
	xorps	xmm0, xmm0
	movss	DWORD PTR [eax+edx], xmm0
	mov	eax, 16					; 00000010H
	imul	ecx, eax, 3
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	ecx, 4
	shl	ecx, 0
	xorps	xmm0, xmm0
	movss	DWORD PTR [eax+ecx], xmm0
	mov	edx, 16					; 00000010H
	imul	ecx, edx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	ecx, 4
	imul	edx, ecx, 3
	xorps	xmm0, xmm0
	movss	DWORD PTR [eax+edx], xmm0
	mov	eax, 16					; 00000010H
	imul	ecx, eax, 3
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	ecx, 4
	imul	edx, ecx, 0
	xorps	xmm0, xmm0
	movss	DWORD PTR [eax+edx], xmm0
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	ecx, 4
	imul	edx, ecx, 0
	xorps	xmm0, xmm0
	movss	DWORD PTR [eax+edx], xmm0
	mov	eax, 16					; 00000010H
	imul	ecx, eax, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	ecx, 4
	shl	ecx, 0
	xorps	xmm0, xmm0
	movss	DWORD PTR [eax+ecx], xmm0
	mov	edx, 16					; 00000010H
	imul	ecx, edx, 3
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	ecx, 4
	imul	edx, ecx, 3
	xorps	xmm0, xmm0
	movss	DWORD PTR [eax+edx], xmm0

; 943  : 
; 944  : 	mat[0][2] = 0.0f;

	mov	eax, 16					; 00000010H
	imul	ecx, eax, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	ecx, 4
	shl	ecx, 1
	xorps	xmm0, xmm0
	movss	DWORD PTR [eax+ecx], xmm0

; 945  : 	mat[1][2] = 0.0f;

	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	edx, 4
	shl	edx, 1
	xorps	xmm0, xmm0
	movss	DWORD PTR [eax+edx], xmm0

; 946  : 	mat[2][0] = ( xMax + xMin ) / ( xMax - xMin );

	movss	xmm0, DWORD PTR _xMax$[ebp]
	addss	xmm0, DWORD PTR _xMin$[ebp]
	movss	xmm1, DWORD PTR _xMax$[ebp]
	subss	xmm1, DWORD PTR _xMin$[ebp]
	divss	xmm0, xmm1
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv308[ebp], xmm0
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	ecx, 4
	imul	edx, ecx, 0
	movss	xmm0, DWORD PTR tv308[ebp]
	movss	DWORD PTR [eax+edx], xmm0

; 947  : 	mat[2][1] = ( yMax + yMin ) / ( yMax - yMin );

	movss	xmm0, DWORD PTR _yMax$[ebp]
	addss	xmm0, DWORD PTR _yMin$[ebp]
	movss	xmm1, DWORD PTR _yMax$[ebp]
	subss	xmm1, DWORD PTR _yMin$[ebp]
	divss	xmm0, xmm1
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv310[ebp], xmm0
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	ecx, 4
	shl	ecx, 0
	movss	xmm0, DWORD PTR tv310[ebp]
	movss	DWORD PTR [eax+ecx], xmm0

; 948  : 	mat[2][3] = -1.0f;

	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	edx, 4
	imul	ecx, edx, 3
	movss	xmm0, DWORD PTR __real@bf800000
	movss	DWORD PTR [eax+ecx], xmm0

; 949  : 	mat[3][2] = -( 2.0f * zFar * zNear ) / ( zFar - zNear );

	movss	xmm0, DWORD PTR __real@40000000
	mulss	xmm0, DWORD PTR _zFar$[ebp]
	mulss	xmm0, DWORD PTR _zNear$[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	movss	xmm1, DWORD PTR _zFar$[ebp]
	subss	xmm1, DWORD PTR _zNear$[ebp]
	divss	xmm0, xmm1
	mov	edx, 16					; 00000010H
	imul	ecx, edx, 3
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv312[ebp], xmm0
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	ecx, 4
	shl	ecx, 1
	movss	xmm0, DWORD PTR tv312[ebp]
	movss	DWORD PTR [eax+ecx], xmm0

; 950  : }

	mov	esp, ebp
	pop	ebp
	ret	24					; 00000018H
?CreateProjection@matrix4x4@@QAEXMMMMMM@Z ENDP		; matrix4x4::CreateProjection
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xashxt_v0.81_rev.1_with_sources\xashxt_v0.81_rev.1_src\game_shared\matrix.cpp
_TEXT	SEGMENT
tv251 = -36						; size = 8
tv242 = -28						; size = 8
tv322 = -20						; size = 4
tv320 = -16						; size = 4
tv318 = -12						; size = 4
tv316 = -8						; size = 4
_this$ = -4						; size = 4
_fov_x$ = 8						; size = 4
_fov_y$ = 12						; size = 4
_zNear$ = 16						; size = 4
_zFar$ = 20						; size = 4
?CreateProjection@matrix4x4@@QAEXMMMM@Z PROC		; matrix4x4::CreateProjection
; _this$ = ecx

; 953  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 36					; 00000024H
	mov	DWORD PTR _this$[ebp], ecx

; 954  : 	mat[0][0] = 1.0f / tan( fov_x * M_PI / 360.0f );

	cvtss2sd xmm0, DWORD PTR _fov_x$[ebp]
	mulsd	xmm0, QWORD PTR __real@400921fb54442d18
	divsd	xmm0, QWORD PTR __real@4076800000000000
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	call	_tan
	add	esp, 8
	fstp	QWORD PTR tv242[ebp]
	movsd	xmm0, QWORD PTR __real@3ff0000000000000
	divsd	xmm0, QWORD PTR tv242[ebp]
	cvtsd2ss xmm0, xmm0
	mov	eax, 16					; 00000010H
	imul	ecx, eax, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv316[ebp], xmm0
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	ecx, 4
	imul	edx, ecx, 0
	movss	xmm0, DWORD PTR tv316[ebp]
	movss	DWORD PTR [eax+edx], xmm0

; 955  : 	mat[1][1] = 1.0f / tan( fov_y * M_PI / 360.0f );

	cvtss2sd xmm0, DWORD PTR _fov_y$[ebp]
	mulsd	xmm0, QWORD PTR __real@400921fb54442d18
	divsd	xmm0, QWORD PTR __real@4076800000000000
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	call	_tan
	add	esp, 8
	fstp	QWORD PTR tv251[ebp]
	movsd	xmm0, QWORD PTR __real@3ff0000000000000
	divsd	xmm0, QWORD PTR tv251[ebp]
	cvtsd2ss xmm0, xmm0
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv318[ebp], xmm0
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	ecx, 4
	shl	ecx, 0
	movss	xmm0, DWORD PTR tv318[ebp]
	movss	DWORD PTR [eax+ecx], xmm0

; 956  : 	mat[2][2] = -( zFar + zNear ) / ( zFar - zNear );

	movss	xmm0, DWORD PTR _zFar$[ebp]
	addss	xmm0, DWORD PTR _zNear$[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	movss	xmm1, DWORD PTR _zFar$[ebp]
	subss	xmm1, DWORD PTR _zNear$[ebp]
	divss	xmm0, xmm1
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv320[ebp], xmm0
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	edx, 4
	shl	edx, 1
	movss	xmm0, DWORD PTR tv320[ebp]
	movss	DWORD PTR [eax+edx], xmm0

; 957  : 	mat[3][2] = -( 2.0 * zFar * zNear ) / ( zFar - zNear );

	cvtss2sd xmm0, DWORD PTR _zFar$[ebp]
	mulsd	xmm0, QWORD PTR __real@4000000000000000
	cvtss2sd xmm1, DWORD PTR _zNear$[ebp]
	mulsd	xmm0, xmm1
	xorps	xmm0, QWORD PTR __xmm@80000000000000008000000000000000
	movss	xmm1, DWORD PTR _zFar$[ebp]
	subss	xmm1, DWORD PTR _zNear$[ebp]
	cvtss2sd xmm1, xmm1
	divsd	xmm0, xmm1
	cvtsd2ss xmm0, xmm0
	mov	eax, 16					; 00000010H
	imul	ecx, eax, 3
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv322[ebp], xmm0
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	ecx, 4
	shl	ecx, 1
	movss	xmm0, DWORD PTR tv322[ebp]
	movss	DWORD PTR [eax+ecx], xmm0

; 958  : 	mat[2][3] = -1.0f;

	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	edx, 4
	imul	ecx, edx, 3
	movss	xmm0, DWORD PTR __real@bf800000
	movss	DWORD PTR [eax+ecx], xmm0

; 959  : 
; 960  : 	mat[0][1] = mat[1][0] = mat[3][0] = mat[0][3] = mat[3][1] = mat[1][3] = 0.0f;

	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	edx, 4
	imul	ecx, edx, 3
	xorps	xmm0, xmm0
	movss	DWORD PTR [eax+ecx], xmm0
	mov	edx, 16					; 00000010H
	imul	ecx, edx, 3
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	ecx, 4
	shl	ecx, 0
	xorps	xmm0, xmm0
	movss	DWORD PTR [eax+ecx], xmm0
	mov	edx, 16					; 00000010H
	imul	ecx, edx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	ecx, 4
	imul	edx, ecx, 3
	xorps	xmm0, xmm0
	movss	DWORD PTR [eax+edx], xmm0
	mov	eax, 16					; 00000010H
	imul	ecx, eax, 3
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	ecx, 4
	imul	edx, ecx, 0
	xorps	xmm0, xmm0
	movss	DWORD PTR [eax+edx], xmm0
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	ecx, 4
	imul	edx, ecx, 0
	xorps	xmm0, xmm0
	movss	DWORD PTR [eax+edx], xmm0
	mov	eax, 16					; 00000010H
	imul	ecx, eax, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	ecx, 4
	shl	ecx, 0
	xorps	xmm0, xmm0
	movss	DWORD PTR [eax+ecx], xmm0

; 961  : 	mat[0][2] = mat[2][0] = mat[2][1] = mat[1][2] = mat[3][3] = 0.0f;

	mov	edx, 16					; 00000010H
	imul	ecx, edx, 3
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	ecx, 4
	imul	edx, ecx, 3
	xorps	xmm0, xmm0
	movss	DWORD PTR [eax+edx], xmm0
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	ecx, 4
	shl	ecx, 1
	xorps	xmm0, xmm0
	movss	DWORD PTR [eax+ecx], xmm0
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	edx, 4
	shl	edx, 0
	xorps	xmm0, xmm0
	movss	DWORD PTR [eax+edx], xmm0
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	ecx, 4
	imul	edx, ecx, 0
	xorps	xmm0, xmm0
	movss	DWORD PTR [eax+edx], xmm0
	mov	eax, 16					; 00000010H
	imul	ecx, eax, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	ecx, 4
	shl	ecx, 1
	xorps	xmm0, xmm0
	movss	DWORD PTR [eax+ecx], xmm0

; 962  : }

	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
?CreateProjection@matrix4x4@@QAEXMMMM@Z ENDP		; matrix4x4::CreateProjection
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xashxt_v0.81_rev.1_with_sources\xashxt_v0.81_rev.1_src\game_shared\matrix.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
?CreateTexture@matrix4x4@@QAEXXZ PROC			; matrix4x4::CreateTexture
; _this$ = ecx

; 992  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 993  : 	mat[0][0] = 0.5f;

	mov	eax, 16					; 00000010H
	imul	ecx, eax, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	ecx, 4
	imul	edx, ecx, 0
	movss	xmm0, DWORD PTR __real@3f000000
	movss	DWORD PTR [eax+edx], xmm0

; 994  : 	mat[1][0] = 0.0f;

	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	ecx, 4
	imul	edx, ecx, 0
	xorps	xmm0, xmm0
	movss	DWORD PTR [eax+edx], xmm0

; 995  : 	mat[2][0] = 0.0f;

	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	ecx, 4
	imul	edx, ecx, 0
	xorps	xmm0, xmm0
	movss	DWORD PTR [eax+edx], xmm0

; 996  : 	mat[3][0] = 0.5f;

	mov	eax, 16					; 00000010H
	imul	ecx, eax, 3
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	ecx, 4
	imul	edx, ecx, 0
	movss	xmm0, DWORD PTR __real@3f000000
	movss	DWORD PTR [eax+edx], xmm0

; 997  : 	mat[0][1] = 0.0f;

	mov	eax, 16					; 00000010H
	imul	ecx, eax, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	ecx, 4
	shl	ecx, 0
	xorps	xmm0, xmm0
	movss	DWORD PTR [eax+ecx], xmm0

; 998  : 	mat[1][1] = 0.5f;

	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	edx, 4
	shl	edx, 0
	movss	xmm0, DWORD PTR __real@3f000000
	movss	DWORD PTR [eax+edx], xmm0

; 999  : 	mat[2][1] = 0.0f;

	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	ecx, 4
	shl	ecx, 0
	xorps	xmm0, xmm0
	movss	DWORD PTR [eax+ecx], xmm0

; 1000 : 	mat[3][1] = 0.5f;

	mov	edx, 16					; 00000010H
	imul	ecx, edx, 3
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	ecx, 4
	shl	ecx, 0
	movss	xmm0, DWORD PTR __real@3f000000
	movss	DWORD PTR [eax+ecx], xmm0

; 1001 : 	mat[0][2] = 0.0f;

	mov	edx, 16					; 00000010H
	imul	ecx, edx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	ecx, 4
	shl	ecx, 1
	xorps	xmm0, xmm0
	movss	DWORD PTR [eax+ecx], xmm0

; 1002 : 	mat[1][2] = 0.0f;

	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	edx, 4
	shl	edx, 1
	xorps	xmm0, xmm0
	movss	DWORD PTR [eax+edx], xmm0

; 1003 : 	mat[2][2] = 0.5f;

	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	ecx, 4
	shl	ecx, 1
	movss	xmm0, DWORD PTR __real@3f000000
	movss	DWORD PTR [eax+ecx], xmm0

; 1004 : 	mat[3][2] = 0.5f;

	mov	edx, 16					; 00000010H
	imul	ecx, edx, 3
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	ecx, 4
	shl	ecx, 1
	movss	xmm0, DWORD PTR __real@3f000000
	movss	DWORD PTR [eax+ecx], xmm0

; 1005 : 	mat[0][3] = 0.0f;

	mov	edx, 16					; 00000010H
	imul	ecx, edx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	ecx, 4
	imul	edx, ecx, 3
	xorps	xmm0, xmm0
	movss	DWORD PTR [eax+edx], xmm0

; 1006 : 	mat[1][3] = 0.0f;

	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	ecx, 4
	imul	edx, ecx, 3
	xorps	xmm0, xmm0
	movss	DWORD PTR [eax+edx], xmm0

; 1007 : 	mat[2][3] = 0.0f;

	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	ecx, 4
	imul	edx, ecx, 3
	xorps	xmm0, xmm0
	movss	DWORD PTR [eax+edx], xmm0

; 1008 : 	mat[3][3] = 1.0f;

	mov	eax, 16					; 00000010H
	imul	ecx, eax, 3
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	ecx, 4
	imul	edx, ecx, 3
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [eax+edx], xmm0

; 1009 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?CreateTexture@matrix4x4@@QAEXXZ ENDP			; matrix4x4::CreateTexture
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xashxt_v0.81_rev.1_with_sources\xashxt_v0.81_rev.1_src\game_shared\matrix.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
?CreateModelview@matrix4x4@@QAEXXZ PROC			; matrix4x4::CreateModelview
; _this$ = ecx

; 980  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 981  : 	mat[0][0] = mat[1][1] = mat[2][2] = 0.0f;

	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	ecx, 4
	shl	ecx, 1
	xorps	xmm0, xmm0
	movss	DWORD PTR [eax+ecx], xmm0
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	edx, 4
	shl	edx, 0
	xorps	xmm0, xmm0
	movss	DWORD PTR [eax+edx], xmm0
	mov	eax, 16					; 00000010H
	imul	ecx, eax, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	ecx, 4
	imul	edx, ecx, 0
	xorps	xmm0, xmm0
	movss	DWORD PTR [eax+edx], xmm0

; 982  : 	mat[3][0] = mat[0][3] = 0.0f;

	mov	eax, 16					; 00000010H
	imul	ecx, eax, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	ecx, 4
	imul	edx, ecx, 3
	xorps	xmm0, xmm0
	movss	DWORD PTR [eax+edx], xmm0
	mov	eax, 16					; 00000010H
	imul	ecx, eax, 3
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	ecx, 4
	imul	edx, ecx, 0
	xorps	xmm0, xmm0
	movss	DWORD PTR [eax+edx], xmm0

; 983  : 	mat[3][1] = mat[1][3] = 0.0f;

	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	ecx, 4
	imul	edx, ecx, 3
	xorps	xmm0, xmm0
	movss	DWORD PTR [eax+edx], xmm0
	mov	eax, 16					; 00000010H
	imul	ecx, eax, 3
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	ecx, 4
	shl	ecx, 0
	xorps	xmm0, xmm0
	movss	DWORD PTR [eax+ecx], xmm0

; 984  : 	mat[3][2] = mat[2][3] = 0.0f;

	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	edx, 4
	imul	ecx, edx, 3
	xorps	xmm0, xmm0
	movss	DWORD PTR [eax+ecx], xmm0
	mov	edx, 16					; 00000010H
	imul	ecx, edx, 3
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	ecx, 4
	shl	ecx, 1
	xorps	xmm0, xmm0
	movss	DWORD PTR [eax+ecx], xmm0

; 985  : 	mat[3][3] = 1.0f;

	mov	edx, 16					; 00000010H
	imul	ecx, edx, 3
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	ecx, 4
	imul	edx, ecx, 3
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [eax+edx], xmm0

; 986  : 	mat[0][1] = mat[2][0] = mat[1][2] = 0.0f;

	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	ecx, 4
	shl	ecx, 1
	xorps	xmm0, xmm0
	movss	DWORD PTR [eax+ecx], xmm0
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	edx, 4
	imul	ecx, edx, 0
	xorps	xmm0, xmm0
	movss	DWORD PTR [eax+ecx], xmm0
	mov	edx, 16					; 00000010H
	imul	ecx, edx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	ecx, 4
	shl	ecx, 0
	xorps	xmm0, xmm0
	movss	DWORD PTR [eax+ecx], xmm0

; 987  : 	mat[0][2] = mat[1][0] = -1.0f;

	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	edx, 4
	imul	ecx, edx, 0
	movss	xmm0, DWORD PTR __real@bf800000
	movss	DWORD PTR [eax+ecx], xmm0
	mov	edx, 16					; 00000010H
	imul	ecx, edx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	ecx, 4
	shl	ecx, 1
	movss	xmm0, DWORD PTR __real@bf800000
	movss	DWORD PTR [eax+ecx], xmm0

; 988  : 	mat[2][1] = 1.0f;

	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	edx, 4
	shl	edx, 0
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [eax+edx], xmm0

; 989  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?CreateModelview@matrix4x4@@QAEXXZ ENDP			; matrix4x4::CreateModelview
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xashxt_v0.81_rev.1_with_sources\xashxt_v0.81_rev.1_src\game_shared\matrix.cpp
_TEXT	SEGMENT
$T1 = -68						; size = 16
$T2 = -52						; size = 16
$T3 = -36						; size = 16
$T4 = -20						; size = 16
_this$ = -4						; size = 4
?Identity@matrix4x4@@QAEXXZ PROC			; matrix4x4::Identity
; _this$ = ecx

; 356  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	mov	DWORD PTR _this$[ebp], ecx

; 357  : 	mat[0] = Vector4D( 1, 0, 0, 0 );

	push	ecx
	xorps	xmm0, xmm0
	movss	DWORD PTR [esp], xmm0
	push	ecx
	xorps	xmm0, xmm0
	movss	DWORD PTR [esp], xmm0
	push	ecx
	xorps	xmm0, xmm0
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [esp], xmm0
	lea	ecx, DWORD PTR $T4[ebp]
	call	??0Vector4D@@QAE@MMMM@Z			; Vector4D::Vector4D
	mov	ecx, 16					; 00000010H
	imul	edx, ecx, 0
	add	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR [edx], ecx
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR [edx+4], ecx
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR [edx+8], ecx
	mov	eax, DWORD PTR [eax+12]
	mov	DWORD PTR [edx+12], eax

; 358  : 	mat[1] = Vector4D( 0, 1, 0, 0 );

	push	ecx
	xorps	xmm0, xmm0
	movss	DWORD PTR [esp], xmm0
	push	ecx
	xorps	xmm0, xmm0
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	xorps	xmm0, xmm0
	movss	DWORD PTR [esp], xmm0
	lea	ecx, DWORD PTR $T3[ebp]
	call	??0Vector4D@@QAE@MMMM@Z			; Vector4D::Vector4D
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	edx, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], edx
	mov	eax, DWORD PTR [eax+12]
	mov	DWORD PTR [ecx+12], eax

; 359  : 	mat[2] = Vector4D( 0, 0, 1, 0 );

	push	ecx
	xorps	xmm0, xmm0
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	xorps	xmm0, xmm0
	movss	DWORD PTR [esp], xmm0
	push	ecx
	xorps	xmm0, xmm0
	movss	DWORD PTR [esp], xmm0
	lea	ecx, DWORD PTR $T2[ebp]
	call	??0Vector4D@@QAE@MMMM@Z			; Vector4D::Vector4D
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	edx, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], edx
	mov	eax, DWORD PTR [eax+12]
	mov	DWORD PTR [ecx+12], eax

; 360  : 	mat[3] = Vector4D( 0, 0, 0, 1 );

	push	ecx
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	xorps	xmm0, xmm0
	movss	DWORD PTR [esp], xmm0
	push	ecx
	xorps	xmm0, xmm0
	movss	DWORD PTR [esp], xmm0
	push	ecx
	xorps	xmm0, xmm0
	movss	DWORD PTR [esp], xmm0
	lea	ecx, DWORD PTR $T1[ebp]
	call	??0Vector4D@@QAE@MMMM@Z			; Vector4D::Vector4D
	mov	ecx, 16					; 00000010H
	imul	edx, ecx, 3
	add	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR [edx], ecx
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR [edx+4], ecx
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR [edx+8], ecx
	mov	eax, DWORD PTR [eax+12]
	mov	DWORD PTR [edx+12], eax

; 361  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?Identity@matrix4x4@@QAEXXZ ENDP			; matrix4x4::Identity
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xashxt_v0.81_rev.1_with_sources\xashxt_v0.81_rev.1_src\game_shared\matrix.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0matrix4x4@@QAE@XZ PROC				; matrix4x4::matrix4x4
; _this$ = ecx

; 352  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	push	OFFSET ??0Vector4D@@QAE@XZ		; Vector4D::Vector4D
	push	4
	push	16					; 00000010H
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??_H@YGXPAXIIP6EPAX0@Z@Z

; 353  : }

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0matrix4x4@@QAE@XZ ENDP				; matrix4x4::matrix4x4
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??0matrix3x4@@QAE@$$QAV0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??0matrix3x4@@QAE@$$QAV0@@Z PROC			; matrix3x4::matrix3x4, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	push	OFFSET ??0Vector@@QAE@ABV0@@Z		; Vector::Vector
	push	4
	push	12					; 0000000cH
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??__G@YGXPAX0IIP6EPAX00@Z@Z
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0matrix3x4@@QAE@$$QAV0@@Z ENDP			; matrix3x4::matrix3x4
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xashxt_v0.81_rev.1_with_sources\xashxt_v0.81_rev.1_src\game_shared\matrix.cpp
_TEXT	SEGMENT
tv965 = -212						; size = 4
tv1003 = -208						; size = 4
tv1001 = -204						; size = 4
tv999 = -200						; size = 4
tv997 = -196						; size = 4
tv995 = -192						; size = 4
tv993 = -188						; size = 4
tv991 = -184						; size = 4
tv989 = -180						; size = 4
tv987 = -176						; size = 4
tv985 = -172						; size = 4
tv983 = -168						; size = 4
tv981 = -164						; size = 4
tv979 = -160						; size = 4
tv977 = -156						; size = 4
tv975 = -152						; size = 4
tv973 = -148						; size = 4
tv971 = -144						; size = 4
tv969 = -140						; size = 4
tv967 = -136						; size = 4
tv963 = -132						; size = 4
tv961 = -128						; size = 4
tv959 = -124						; size = 4
tv957 = -120						; size = 4
tv955 = -116						; size = 4
tv953 = -112						; size = 4
tv951 = -108						; size = 4
tv949 = -104						; size = 4
tv947 = -100						; size = 4
tv945 = -96						; size = 4
tv943 = -92						; size = 4
tv941 = -88						; size = 4
tv939 = -84						; size = 4
tv937 = -80						; size = 4
tv935 = -76						; size = 4
tv933 = -72						; size = 4
tv931 = -68						; size = 4
tv929 = -64						; size = 4
tv927 = -60						; size = 4
_this$ = -56						; size = 4
_out$ = -52						; size = 48
__$ArrayPad$ = -4					; size = 4
___$ReturnUdt$ = 8					; size = 4
_mat2$ = 12						; size = 48
?ConcatTransforms@matrix3x4@@QBE?AV1@V1@@Z PROC		; matrix3x4::ConcatTransforms
; _this$ = ecx

; 294  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 212				; 000000d4H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 295  : 	matrix3x4 out;

	lea	ecx, DWORD PTR _out$[ebp]
	call	??0matrix3x4@@QAE@XZ			; matrix3x4::matrix3x4

; 296  : 
; 297  : 	out[0][0] = mat[0][0] * mat2[0][0] + mat[1][0] * mat2[0][1] + mat[2][0] * mat2[0][2];

	mov	eax, 12					; 0000000cH
	imul	ecx, eax, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector@@QBEPBMXZ			; Vector::operator float const *
	mov	esi, eax
	mov	ecx, 4
	imul	edi, ecx, 0
	push	0
	lea	ecx, DWORD PTR _mat2$[ebp]
	call	??Amatrix3x4@@QBEPBMH@Z			; matrix3x4::operator[]
	mov	edx, 4
	imul	ecx, edx, 0
	movss	xmm0, DWORD PTR [esi+edi]
	mulss	xmm0, DWORD PTR [eax+ecx]
	mov	ecx, 12					; 0000000cH
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv927[ebp], xmm0
	call	??BVector@@QBEPBMXZ			; Vector::operator float const *
	mov	esi, eax
	mov	edx, 4
	imul	edi, edx, 0
	push	0
	lea	ecx, DWORD PTR _mat2$[ebp]
	call	??Amatrix3x4@@QBEPBMH@Z			; matrix3x4::operator[]
	mov	ecx, 4
	shl	ecx, 0
	movss	xmm0, DWORD PTR [esi+edi]
	mulss	xmm0, DWORD PTR [eax+ecx]
	movss	xmm1, DWORD PTR tv927[ebp]
	addss	xmm1, xmm0
	mov	ecx, 12					; 0000000cH
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv929[ebp], xmm1
	call	??BVector@@QBEPBMXZ			; Vector::operator float const *
	mov	esi, eax
	mov	edx, 4
	imul	edi, edx, 0
	push	0
	lea	ecx, DWORD PTR _mat2$[ebp]
	call	??Amatrix3x4@@QBEPBMH@Z			; matrix3x4::operator[]
	mov	ecx, 4
	shl	ecx, 1
	movss	xmm0, DWORD PTR [esi+edi]
	mulss	xmm0, DWORD PTR [eax+ecx]
	movss	xmm1, DWORD PTR tv929[ebp]
	addss	xmm1, xmm0
	push	0
	lea	ecx, DWORD PTR _out$[ebp]
	movss	DWORD PTR tv931[ebp], xmm1
	call	??Amatrix3x4@@QAEPAMH@Z			; matrix3x4::operator[]
	mov	edx, 4
	imul	ecx, edx, 0
	movss	xmm0, DWORD PTR tv931[ebp]
	movss	DWORD PTR [eax+ecx], xmm0

; 298  : 	out[1][0] = mat[0][0] * mat2[1][0] + mat[1][0] * mat2[1][1] + mat[2][0] * mat2[1][2];

	mov	edx, 12					; 0000000cH
	imul	ecx, edx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector@@QBEPBMXZ			; Vector::operator float const *
	mov	esi, eax
	mov	eax, 4
	imul	edi, eax, 0
	push	1
	lea	ecx, DWORD PTR _mat2$[ebp]
	call	??Amatrix3x4@@QBEPBMH@Z			; matrix3x4::operator[]
	mov	ecx, 4
	imul	edx, ecx, 0
	movss	xmm0, DWORD PTR [esi+edi]
	mulss	xmm0, DWORD PTR [eax+edx]
	mov	ecx, 12					; 0000000cH
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv933[ebp], xmm0
	call	??BVector@@QBEPBMXZ			; Vector::operator float const *
	mov	esi, eax
	mov	eax, 4
	imul	edi, eax, 0
	push	1
	lea	ecx, DWORD PTR _mat2$[ebp]
	call	??Amatrix3x4@@QBEPBMH@Z			; matrix3x4::operator[]
	mov	ecx, 4
	shl	ecx, 0
	movss	xmm0, DWORD PTR [esi+edi]
	mulss	xmm0, DWORD PTR [eax+ecx]
	movss	xmm1, DWORD PTR tv933[ebp]
	addss	xmm1, xmm0
	mov	ecx, 12					; 0000000cH
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv935[ebp], xmm1
	call	??BVector@@QBEPBMXZ			; Vector::operator float const *
	mov	esi, eax
	mov	edx, 4
	imul	edi, edx, 0
	push	1
	lea	ecx, DWORD PTR _mat2$[ebp]
	call	??Amatrix3x4@@QBEPBMH@Z			; matrix3x4::operator[]
	mov	ecx, 4
	shl	ecx, 1
	movss	xmm0, DWORD PTR [esi+edi]
	mulss	xmm0, DWORD PTR [eax+ecx]
	movss	xmm1, DWORD PTR tv935[ebp]
	addss	xmm1, xmm0
	push	1
	lea	ecx, DWORD PTR _out$[ebp]
	movss	DWORD PTR tv937[ebp], xmm1
	call	??Amatrix3x4@@QAEPAMH@Z			; matrix3x4::operator[]
	mov	edx, 4
	imul	ecx, edx, 0
	movss	xmm0, DWORD PTR tv937[ebp]
	movss	DWORD PTR [eax+ecx], xmm0

; 299  : 	out[2][0] = mat[0][0] * mat2[2][0] + mat[1][0] * mat2[2][1] + mat[2][0] * mat2[2][2];

	mov	edx, 12					; 0000000cH
	imul	ecx, edx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector@@QBEPBMXZ			; Vector::operator float const *
	mov	esi, eax
	mov	eax, 4
	imul	edi, eax, 0
	push	2
	lea	ecx, DWORD PTR _mat2$[ebp]
	call	??Amatrix3x4@@QBEPBMH@Z			; matrix3x4::operator[]
	mov	ecx, 4
	imul	edx, ecx, 0
	movss	xmm0, DWORD PTR [esi+edi]
	mulss	xmm0, DWORD PTR [eax+edx]
	mov	ecx, 12					; 0000000cH
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv939[ebp], xmm0
	call	??BVector@@QBEPBMXZ			; Vector::operator float const *
	mov	esi, eax
	mov	eax, 4
	imul	edi, eax, 0
	push	2
	lea	ecx, DWORD PTR _mat2$[ebp]
	call	??Amatrix3x4@@QBEPBMH@Z			; matrix3x4::operator[]
	mov	ecx, 4
	shl	ecx, 0
	movss	xmm0, DWORD PTR [esi+edi]
	mulss	xmm0, DWORD PTR [eax+ecx]
	movss	xmm1, DWORD PTR tv939[ebp]
	addss	xmm1, xmm0
	mov	ecx, 12					; 0000000cH
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv941[ebp], xmm1
	call	??BVector@@QBEPBMXZ			; Vector::operator float const *
	mov	esi, eax
	mov	edx, 4
	imul	edi, edx, 0
	push	2
	lea	ecx, DWORD PTR _mat2$[ebp]
	call	??Amatrix3x4@@QBEPBMH@Z			; matrix3x4::operator[]
	mov	ecx, 4
	shl	ecx, 1
	movss	xmm0, DWORD PTR [esi+edi]
	mulss	xmm0, DWORD PTR [eax+ecx]
	movss	xmm1, DWORD PTR tv941[ebp]
	addss	xmm1, xmm0
	push	2
	lea	ecx, DWORD PTR _out$[ebp]
	movss	DWORD PTR tv943[ebp], xmm1
	call	??Amatrix3x4@@QAEPAMH@Z			; matrix3x4::operator[]
	mov	edx, 4
	imul	ecx, edx, 0
	movss	xmm0, DWORD PTR tv943[ebp]
	movss	DWORD PTR [eax+ecx], xmm0

; 300  : 	out[3][0] = mat[0][0] * mat2[3][0] + mat[1][0] * mat2[3][1] + mat[2][0] * mat2[3][2] + mat[3][0];

	mov	edx, 12					; 0000000cH
	imul	ecx, edx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector@@QBEPBMXZ			; Vector::operator float const *
	mov	esi, eax
	mov	eax, 4
	imul	edi, eax, 0
	push	3
	lea	ecx, DWORD PTR _mat2$[ebp]
	call	??Amatrix3x4@@QBEPBMH@Z			; matrix3x4::operator[]
	mov	ecx, 4
	imul	edx, ecx, 0
	movss	xmm0, DWORD PTR [esi+edi]
	mulss	xmm0, DWORD PTR [eax+edx]
	mov	ecx, 12					; 0000000cH
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv945[ebp], xmm0
	call	??BVector@@QBEPBMXZ			; Vector::operator float const *
	mov	esi, eax
	mov	eax, 4
	imul	edi, eax, 0
	push	3
	lea	ecx, DWORD PTR _mat2$[ebp]
	call	??Amatrix3x4@@QBEPBMH@Z			; matrix3x4::operator[]
	mov	ecx, 4
	shl	ecx, 0
	movss	xmm0, DWORD PTR [esi+edi]
	mulss	xmm0, DWORD PTR [eax+ecx]
	movss	xmm1, DWORD PTR tv945[ebp]
	addss	xmm1, xmm0
	mov	ecx, 12					; 0000000cH
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv947[ebp], xmm1
	call	??BVector@@QBEPBMXZ			; Vector::operator float const *
	mov	esi, eax
	mov	edx, 4
	imul	edi, edx, 0
	push	3
	lea	ecx, DWORD PTR _mat2$[ebp]
	call	??Amatrix3x4@@QBEPBMH@Z			; matrix3x4::operator[]
	mov	ecx, 4
	shl	ecx, 1
	movss	xmm0, DWORD PTR [esi+edi]
	mulss	xmm0, DWORD PTR [eax+ecx]
	movss	xmm1, DWORD PTR tv947[ebp]
	addss	xmm1, xmm0
	mov	edx, 12					; 0000000cH
	imul	ecx, edx, 3
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv949[ebp], xmm1
	call	??BVector@@QBEPBMXZ			; Vector::operator float const *
	mov	ecx, 4
	imul	edx, ecx, 0
	movss	xmm0, DWORD PTR tv949[ebp]
	addss	xmm0, DWORD PTR [eax+edx]
	push	3
	lea	ecx, DWORD PTR _out$[ebp]
	movss	DWORD PTR tv951[ebp], xmm0
	call	??Amatrix3x4@@QAEPAMH@Z			; matrix3x4::operator[]
	mov	ecx, 4
	imul	edx, ecx, 0
	movss	xmm0, DWORD PTR tv951[ebp]
	movss	DWORD PTR [eax+edx], xmm0

; 301  : 	out[0][1] = mat[0][1] * mat2[0][0] + mat[1][1] * mat2[0][1] + mat[2][1] * mat2[0][2];

	mov	eax, 12					; 0000000cH
	imul	ecx, eax, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector@@QBEPBMXZ			; Vector::operator float const *
	mov	esi, eax
	mov	edi, 4
	shl	edi, 0
	push	0
	lea	ecx, DWORD PTR _mat2$[ebp]
	call	??Amatrix3x4@@QBEPBMH@Z			; matrix3x4::operator[]
	mov	ecx, 4
	imul	edx, ecx, 0
	movss	xmm0, DWORD PTR [esi+edi]
	mulss	xmm0, DWORD PTR [eax+edx]
	mov	ecx, 12					; 0000000cH
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv953[ebp], xmm0
	call	??BVector@@QBEPBMXZ			; Vector::operator float const *
	mov	esi, eax
	mov	edi, 4
	shl	edi, 0
	push	0
	lea	ecx, DWORD PTR _mat2$[ebp]
	call	??Amatrix3x4@@QBEPBMH@Z			; matrix3x4::operator[]
	mov	ecx, 4
	shl	ecx, 0
	movss	xmm0, DWORD PTR [esi+edi]
	mulss	xmm0, DWORD PTR [eax+ecx]
	movss	xmm1, DWORD PTR tv953[ebp]
	addss	xmm1, xmm0
	mov	ecx, 12					; 0000000cH
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv955[ebp], xmm1
	call	??BVector@@QBEPBMXZ			; Vector::operator float const *
	mov	esi, eax
	mov	edi, 4
	shl	edi, 0
	push	0
	lea	ecx, DWORD PTR _mat2$[ebp]
	call	??Amatrix3x4@@QBEPBMH@Z			; matrix3x4::operator[]
	mov	edx, 4
	shl	edx, 1
	movss	xmm0, DWORD PTR [esi+edi]
	mulss	xmm0, DWORD PTR [eax+edx]
	movss	xmm1, DWORD PTR tv955[ebp]
	addss	xmm1, xmm0
	push	0
	lea	ecx, DWORD PTR _out$[ebp]
	movss	DWORD PTR tv957[ebp], xmm1
	call	??Amatrix3x4@@QAEPAMH@Z			; matrix3x4::operator[]
	mov	ecx, 4
	shl	ecx, 0
	movss	xmm0, DWORD PTR tv957[ebp]
	movss	DWORD PTR [eax+ecx], xmm0

; 302  : 	out[1][1] = mat[0][1] * mat2[1][0] + mat[1][1] * mat2[1][1] + mat[2][1] * mat2[1][2];

	mov	edx, 12					; 0000000cH
	imul	ecx, edx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector@@QBEPBMXZ			; Vector::operator float const *
	mov	esi, eax
	mov	edi, 4
	shl	edi, 0
	push	1
	lea	ecx, DWORD PTR _mat2$[ebp]
	call	??Amatrix3x4@@QBEPBMH@Z			; matrix3x4::operator[]
	mov	ecx, 4
	imul	edx, ecx, 0
	movss	xmm0, DWORD PTR [esi+edi]
	mulss	xmm0, DWORD PTR [eax+edx]
	mov	ecx, 12					; 0000000cH
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv959[ebp], xmm0
	call	??BVector@@QBEPBMXZ			; Vector::operator float const *
	mov	esi, eax
	mov	edi, 4
	shl	edi, 0
	push	1
	lea	ecx, DWORD PTR _mat2$[ebp]
	call	??Amatrix3x4@@QBEPBMH@Z			; matrix3x4::operator[]
	mov	ecx, 4
	shl	ecx, 0
	movss	xmm0, DWORD PTR [esi+edi]
	mulss	xmm0, DWORD PTR [eax+ecx]
	movss	xmm1, DWORD PTR tv959[ebp]
	addss	xmm1, xmm0
	mov	ecx, 12					; 0000000cH
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv961[ebp], xmm1
	call	??BVector@@QBEPBMXZ			; Vector::operator float const *
	mov	esi, eax
	mov	edi, 4
	shl	edi, 0
	push	1
	lea	ecx, DWORD PTR _mat2$[ebp]
	call	??Amatrix3x4@@QBEPBMH@Z			; matrix3x4::operator[]
	mov	edx, 4
	shl	edx, 1
	movss	xmm0, DWORD PTR [esi+edi]
	mulss	xmm0, DWORD PTR [eax+edx]
	movss	xmm1, DWORD PTR tv961[ebp]
	addss	xmm1, xmm0
	push	1
	lea	ecx, DWORD PTR _out$[ebp]
	movss	DWORD PTR tv963[ebp], xmm1
	call	??Amatrix3x4@@QAEPAMH@Z			; matrix3x4::operator[]
	mov	ecx, 4
	shl	ecx, 0
	movss	xmm0, DWORD PTR tv963[ebp]
	movss	DWORD PTR [eax+ecx], xmm0

; 303  : 	out[2][1] = mat[0][1] * mat2[2][0] + mat[1][1] * mat2[2][1] + mat[2][1] * mat2[2][2];

	mov	edx, 12					; 0000000cH
	imul	ecx, edx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector@@QBEPBMXZ			; Vector::operator float const *
	mov	esi, eax
	mov	edi, 4
	shl	edi, 0
	push	2
	lea	ecx, DWORD PTR _mat2$[ebp]
	call	??Amatrix3x4@@QBEPBMH@Z			; matrix3x4::operator[]
	mov	ecx, 4
	imul	edx, ecx, 0
	movss	xmm0, DWORD PTR [esi+edi]
	mulss	xmm0, DWORD PTR [eax+edx]
	mov	ecx, 12					; 0000000cH
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv965[ebp], xmm0
	call	??BVector@@QBEPBMXZ			; Vector::operator float const *
	mov	esi, eax
	mov	edi, 4
	shl	edi, 0
	push	2
	lea	ecx, DWORD PTR _mat2$[ebp]
	call	??Amatrix3x4@@QBEPBMH@Z			; matrix3x4::operator[]
	mov	ecx, 4
	shl	ecx, 0
	movss	xmm0, DWORD PTR [esi+edi]
	mulss	xmm0, DWORD PTR [eax+ecx]
	movss	xmm1, DWORD PTR tv965[ebp]
	addss	xmm1, xmm0
	mov	ecx, 12					; 0000000cH
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv967[ebp], xmm1
	call	??BVector@@QBEPBMXZ			; Vector::operator float const *
	mov	esi, eax
	mov	edi, 4
	shl	edi, 0
	push	2
	lea	ecx, DWORD PTR _mat2$[ebp]
	call	??Amatrix3x4@@QBEPBMH@Z			; matrix3x4::operator[]
	mov	edx, 4
	shl	edx, 1
	movss	xmm0, DWORD PTR [esi+edi]
	mulss	xmm0, DWORD PTR [eax+edx]
	movss	xmm1, DWORD PTR tv967[ebp]
	addss	xmm1, xmm0
	push	2
	lea	ecx, DWORD PTR _out$[ebp]
	movss	DWORD PTR tv969[ebp], xmm1
	call	??Amatrix3x4@@QAEPAMH@Z			; matrix3x4::operator[]
	mov	ecx, 4
	shl	ecx, 0
	movss	xmm0, DWORD PTR tv969[ebp]
	movss	DWORD PTR [eax+ecx], xmm0

; 304  : 	out[3][1] = mat[0][1] * mat2[3][0] + mat[1][1] * mat2[3][1] + mat[2][1] * mat2[3][2] + mat[3][1];

	mov	edx, 12					; 0000000cH
	imul	ecx, edx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector@@QBEPBMXZ			; Vector::operator float const *
	mov	esi, eax
	mov	edi, 4
	shl	edi, 0
	push	3
	lea	ecx, DWORD PTR _mat2$[ebp]
	call	??Amatrix3x4@@QBEPBMH@Z			; matrix3x4::operator[]
	mov	ecx, 4
	imul	edx, ecx, 0
	movss	xmm0, DWORD PTR [esi+edi]
	mulss	xmm0, DWORD PTR [eax+edx]
	mov	ecx, 12					; 0000000cH
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv971[ebp], xmm0
	call	??BVector@@QBEPBMXZ			; Vector::operator float const *
	mov	esi, eax
	mov	edi, 4
	shl	edi, 0
	push	3
	lea	ecx, DWORD PTR _mat2$[ebp]
	call	??Amatrix3x4@@QBEPBMH@Z			; matrix3x4::operator[]
	mov	ecx, 4
	shl	ecx, 0
	movss	xmm0, DWORD PTR [esi+edi]
	mulss	xmm0, DWORD PTR [eax+ecx]
	movss	xmm1, DWORD PTR tv971[ebp]
	addss	xmm1, xmm0
	mov	ecx, 12					; 0000000cH
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv973[ebp], xmm1
	call	??BVector@@QBEPBMXZ			; Vector::operator float const *
	mov	esi, eax
	mov	edi, 4
	shl	edi, 0
	push	3
	lea	ecx, DWORD PTR _mat2$[ebp]
	call	??Amatrix3x4@@QBEPBMH@Z			; matrix3x4::operator[]
	mov	edx, 4
	shl	edx, 1
	movss	xmm0, DWORD PTR [esi+edi]
	mulss	xmm0, DWORD PTR [eax+edx]
	movss	xmm1, DWORD PTR tv973[ebp]
	addss	xmm1, xmm0
	mov	eax, 12					; 0000000cH
	imul	ecx, eax, 3
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv975[ebp], xmm1
	call	??BVector@@QBEPBMXZ			; Vector::operator float const *
	mov	ecx, 4
	shl	ecx, 0
	movss	xmm0, DWORD PTR tv975[ebp]
	addss	xmm0, DWORD PTR [eax+ecx]
	push	3
	lea	ecx, DWORD PTR _out$[ebp]
	movss	DWORD PTR tv977[ebp], xmm0
	call	??Amatrix3x4@@QAEPAMH@Z			; matrix3x4::operator[]
	mov	edx, 4
	shl	edx, 0
	movss	xmm0, DWORD PTR tv977[ebp]
	movss	DWORD PTR [eax+edx], xmm0

; 305  : 	out[0][2] = mat[0][2] * mat2[0][0] + mat[1][2] * mat2[0][1] + mat[2][2] * mat2[0][2];

	mov	eax, 12					; 0000000cH
	imul	ecx, eax, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector@@QBEPBMXZ			; Vector::operator float const *
	mov	esi, eax
	mov	edi, 4
	shl	edi, 1
	push	0
	lea	ecx, DWORD PTR _mat2$[ebp]
	call	??Amatrix3x4@@QBEPBMH@Z			; matrix3x4::operator[]
	mov	ecx, 4
	imul	edx, ecx, 0
	movss	xmm0, DWORD PTR [esi+edi]
	mulss	xmm0, DWORD PTR [eax+edx]
	mov	ecx, 12					; 0000000cH
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv979[ebp], xmm0
	call	??BVector@@QBEPBMXZ			; Vector::operator float const *
	mov	esi, eax
	mov	edi, 4
	shl	edi, 1
	push	0
	lea	ecx, DWORD PTR _mat2$[ebp]
	call	??Amatrix3x4@@QBEPBMH@Z			; matrix3x4::operator[]
	mov	ecx, 4
	shl	ecx, 0
	movss	xmm0, DWORD PTR [esi+edi]
	mulss	xmm0, DWORD PTR [eax+ecx]
	movss	xmm1, DWORD PTR tv979[ebp]
	addss	xmm1, xmm0
	mov	ecx, 12					; 0000000cH
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv981[ebp], xmm1
	call	??BVector@@QBEPBMXZ			; Vector::operator float const *
	mov	esi, eax
	mov	edi, 4
	shl	edi, 1
	push	0
	lea	ecx, DWORD PTR _mat2$[ebp]
	call	??Amatrix3x4@@QBEPBMH@Z			; matrix3x4::operator[]
	mov	edx, 4
	shl	edx, 1
	movss	xmm0, DWORD PTR [esi+edi]
	mulss	xmm0, DWORD PTR [eax+edx]
	movss	xmm1, DWORD PTR tv981[ebp]
	addss	xmm1, xmm0
	push	0
	lea	ecx, DWORD PTR _out$[ebp]
	movss	DWORD PTR tv983[ebp], xmm1
	call	??Amatrix3x4@@QAEPAMH@Z			; matrix3x4::operator[]
	mov	ecx, 4
	shl	ecx, 1
	movss	xmm0, DWORD PTR tv983[ebp]
	movss	DWORD PTR [eax+ecx], xmm0

; 306  : 	out[1][2] = mat[0][2] * mat2[1][0] + mat[1][2] * mat2[1][1] + mat[2][2] * mat2[1][2];

	mov	edx, 12					; 0000000cH
	imul	ecx, edx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector@@QBEPBMXZ			; Vector::operator float const *
	mov	esi, eax
	mov	edi, 4
	shl	edi, 1
	push	1
	lea	ecx, DWORD PTR _mat2$[ebp]
	call	??Amatrix3x4@@QBEPBMH@Z			; matrix3x4::operator[]
	mov	ecx, 4
	imul	edx, ecx, 0
	movss	xmm0, DWORD PTR [esi+edi]
	mulss	xmm0, DWORD PTR [eax+edx]
	mov	ecx, 12					; 0000000cH
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv985[ebp], xmm0
	call	??BVector@@QBEPBMXZ			; Vector::operator float const *
	mov	esi, eax
	mov	edi, 4
	shl	edi, 1
	push	1
	lea	ecx, DWORD PTR _mat2$[ebp]
	call	??Amatrix3x4@@QBEPBMH@Z			; matrix3x4::operator[]
	mov	ecx, 4
	shl	ecx, 0
	movss	xmm0, DWORD PTR [esi+edi]
	mulss	xmm0, DWORD PTR [eax+ecx]
	movss	xmm1, DWORD PTR tv985[ebp]
	addss	xmm1, xmm0
	mov	ecx, 12					; 0000000cH
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv987[ebp], xmm1
	call	??BVector@@QBEPBMXZ			; Vector::operator float const *
	mov	esi, eax
	mov	edi, 4
	shl	edi, 1
	push	1
	lea	ecx, DWORD PTR _mat2$[ebp]
	call	??Amatrix3x4@@QBEPBMH@Z			; matrix3x4::operator[]
	mov	edx, 4
	shl	edx, 1
	movss	xmm0, DWORD PTR [esi+edi]
	mulss	xmm0, DWORD PTR [eax+edx]
	movss	xmm1, DWORD PTR tv987[ebp]
	addss	xmm1, xmm0
	push	1
	lea	ecx, DWORD PTR _out$[ebp]
	movss	DWORD PTR tv989[ebp], xmm1
	call	??Amatrix3x4@@QAEPAMH@Z			; matrix3x4::operator[]
	mov	ecx, 4
	shl	ecx, 1
	movss	xmm0, DWORD PTR tv989[ebp]
	movss	DWORD PTR [eax+ecx], xmm0

; 307  : 	out[2][2] = mat[0][2] * mat2[2][0] + mat[1][2] * mat2[2][1] + mat[2][2] * mat2[2][2];

	mov	edx, 12					; 0000000cH
	imul	ecx, edx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector@@QBEPBMXZ			; Vector::operator float const *
	mov	esi, eax
	mov	edi, 4
	shl	edi, 1
	push	2
	lea	ecx, DWORD PTR _mat2$[ebp]
	call	??Amatrix3x4@@QBEPBMH@Z			; matrix3x4::operator[]
	mov	ecx, 4
	imul	edx, ecx, 0
	movss	xmm0, DWORD PTR [esi+edi]
	mulss	xmm0, DWORD PTR [eax+edx]
	mov	ecx, 12					; 0000000cH
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv991[ebp], xmm0
	call	??BVector@@QBEPBMXZ			; Vector::operator float const *
	mov	esi, eax
	mov	edi, 4
	shl	edi, 1
	push	2
	lea	ecx, DWORD PTR _mat2$[ebp]
	call	??Amatrix3x4@@QBEPBMH@Z			; matrix3x4::operator[]
	mov	ecx, 4
	shl	ecx, 0
	movss	xmm0, DWORD PTR [esi+edi]
	mulss	xmm0, DWORD PTR [eax+ecx]
	movss	xmm1, DWORD PTR tv991[ebp]
	addss	xmm1, xmm0
	mov	ecx, 12					; 0000000cH
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv993[ebp], xmm1
	call	??BVector@@QBEPBMXZ			; Vector::operator float const *
	mov	esi, eax
	mov	edi, 4
	shl	edi, 1
	push	2
	lea	ecx, DWORD PTR _mat2$[ebp]
	call	??Amatrix3x4@@QBEPBMH@Z			; matrix3x4::operator[]
	mov	edx, 4
	shl	edx, 1
	movss	xmm0, DWORD PTR [esi+edi]
	mulss	xmm0, DWORD PTR [eax+edx]
	movss	xmm1, DWORD PTR tv993[ebp]
	addss	xmm1, xmm0
	push	2
	lea	ecx, DWORD PTR _out$[ebp]
	movss	DWORD PTR tv995[ebp], xmm1
	call	??Amatrix3x4@@QAEPAMH@Z			; matrix3x4::operator[]
	mov	ecx, 4
	shl	ecx, 1
	movss	xmm0, DWORD PTR tv995[ebp]
	movss	DWORD PTR [eax+ecx], xmm0

; 308  : 	out[3][2] = mat[0][2] * mat2[3][0] + mat[1][2] * mat2[3][1] + mat[2][2] * mat2[3][2] + mat[3][2];

	mov	edx, 12					; 0000000cH
	imul	ecx, edx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector@@QBEPBMXZ			; Vector::operator float const *
	mov	esi, eax
	mov	edi, 4
	shl	edi, 1
	push	3
	lea	ecx, DWORD PTR _mat2$[ebp]
	call	??Amatrix3x4@@QBEPBMH@Z			; matrix3x4::operator[]
	mov	ecx, 4
	imul	edx, ecx, 0
	movss	xmm0, DWORD PTR [esi+edi]
	mulss	xmm0, DWORD PTR [eax+edx]
	mov	ecx, 12					; 0000000cH
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv997[ebp], xmm0
	call	??BVector@@QBEPBMXZ			; Vector::operator float const *
	mov	esi, eax
	mov	edi, 4
	shl	edi, 1
	push	3
	lea	ecx, DWORD PTR _mat2$[ebp]
	call	??Amatrix3x4@@QBEPBMH@Z			; matrix3x4::operator[]
	mov	ecx, 4
	shl	ecx, 0
	movss	xmm0, DWORD PTR [esi+edi]
	mulss	xmm0, DWORD PTR [eax+ecx]
	movss	xmm1, DWORD PTR tv997[ebp]
	addss	xmm1, xmm0
	mov	ecx, 12					; 0000000cH
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv999[ebp], xmm1
	call	??BVector@@QBEPBMXZ			; Vector::operator float const *
	mov	esi, eax
	mov	edi, 4
	shl	edi, 1
	push	3
	lea	ecx, DWORD PTR _mat2$[ebp]
	call	??Amatrix3x4@@QBEPBMH@Z			; matrix3x4::operator[]
	mov	edx, 4
	shl	edx, 1
	movss	xmm0, DWORD PTR [esi+edi]
	mulss	xmm0, DWORD PTR [eax+edx]
	movss	xmm1, DWORD PTR tv999[ebp]
	addss	xmm1, xmm0
	mov	eax, 12					; 0000000cH
	imul	ecx, eax, 3
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv1001[ebp], xmm1
	call	??BVector@@QBEPBMXZ			; Vector::operator float const *
	mov	ecx, 4
	shl	ecx, 1
	movss	xmm0, DWORD PTR tv1001[ebp]
	addss	xmm0, DWORD PTR [eax+ecx]
	push	3
	lea	ecx, DWORD PTR _out$[ebp]
	movss	DWORD PTR tv1003[ebp], xmm0
	call	??Amatrix3x4@@QAEPAMH@Z			; matrix3x4::operator[]
	mov	edx, 4
	shl	edx, 1
	movss	xmm0, DWORD PTR tv1003[ebp]
	movss	DWORD PTR [eax+edx], xmm0

; 309  : 
; 310  : 	return out;

	lea	eax, DWORD PTR _out$[ebp]
	push	eax
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0matrix3x4@@QAE@$$QAV0@@Z
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 311  : }

	pop	edi
	pop	esi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	52					; 00000034H
?ConcatTransforms@matrix3x4@@QBE?AV1@V1@@Z ENDP		; matrix3x4::ConcatTransforms
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xashxt_v0.81_rev.1_with_sources\xashxt_v0.81_rev.1_src\game_shared\matrix.cpp
_TEXT	SEGMENT
tv965 = -212						; size = 4
tv1003 = -208						; size = 4
tv1001 = -204						; size = 4
tv999 = -200						; size = 4
tv997 = -196						; size = 4
tv995 = -192						; size = 4
tv993 = -188						; size = 4
tv991 = -184						; size = 4
tv989 = -180						; size = 4
tv987 = -176						; size = 4
tv985 = -172						; size = 4
tv983 = -168						; size = 4
tv981 = -164						; size = 4
tv979 = -160						; size = 4
tv977 = -156						; size = 4
tv975 = -152						; size = 4
tv973 = -148						; size = 4
tv971 = -144						; size = 4
tv969 = -140						; size = 4
tv967 = -136						; size = 4
tv963 = -132						; size = 4
tv961 = -128						; size = 4
tv959 = -124						; size = 4
tv957 = -120						; size = 4
tv955 = -116						; size = 4
tv953 = -112						; size = 4
tv951 = -108						; size = 4
tv949 = -104						; size = 4
tv947 = -100						; size = 4
tv945 = -96						; size = 4
tv943 = -92						; size = 4
tv941 = -88						; size = 4
tv939 = -84						; size = 4
tv937 = -80						; size = 4
tv935 = -76						; size = 4
tv933 = -72						; size = 4
tv931 = -68						; size = 4
tv929 = -64						; size = 4
tv927 = -60						; size = 4
_this$ = -56						; size = 4
_out$ = -52						; size = 48
__$ArrayPad$ = -4					; size = 4
___$ReturnUdt$ = 8					; size = 4
_mat2$ = 12						; size = 48
?ConcatTransforms@matrix3x4@@QAE?AV1@V1@@Z PROC		; matrix3x4::ConcatTransforms
; _this$ = ecx

; 274  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 212				; 000000d4H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 275  : 	matrix3x4 out;

	lea	ecx, DWORD PTR _out$[ebp]
	call	??0matrix3x4@@QAE@XZ			; matrix3x4::matrix3x4

; 276  : 
; 277  : 	out[0][0] = mat[0][0] * mat2[0][0] + mat[1][0] * mat2[0][1] + mat[2][0] * mat2[0][2];

	mov	eax, 12					; 0000000cH
	imul	ecx, eax, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector@@QAEPAMXZ			; Vector::operator float *
	mov	esi, eax
	mov	ecx, 4
	imul	edi, ecx, 0
	push	0
	lea	ecx, DWORD PTR _mat2$[ebp]
	call	??Amatrix3x4@@QBEPBMH@Z			; matrix3x4::operator[]
	mov	edx, 4
	imul	ecx, edx, 0
	movss	xmm0, DWORD PTR [esi+edi]
	mulss	xmm0, DWORD PTR [eax+ecx]
	mov	ecx, 12					; 0000000cH
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv927[ebp], xmm0
	call	??BVector@@QAEPAMXZ			; Vector::operator float *
	mov	esi, eax
	mov	edx, 4
	imul	edi, edx, 0
	push	0
	lea	ecx, DWORD PTR _mat2$[ebp]
	call	??Amatrix3x4@@QBEPBMH@Z			; matrix3x4::operator[]
	mov	ecx, 4
	shl	ecx, 0
	movss	xmm0, DWORD PTR [esi+edi]
	mulss	xmm0, DWORD PTR [eax+ecx]
	movss	xmm1, DWORD PTR tv927[ebp]
	addss	xmm1, xmm0
	mov	ecx, 12					; 0000000cH
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv929[ebp], xmm1
	call	??BVector@@QAEPAMXZ			; Vector::operator float *
	mov	esi, eax
	mov	edx, 4
	imul	edi, edx, 0
	push	0
	lea	ecx, DWORD PTR _mat2$[ebp]
	call	??Amatrix3x4@@QBEPBMH@Z			; matrix3x4::operator[]
	mov	ecx, 4
	shl	ecx, 1
	movss	xmm0, DWORD PTR [esi+edi]
	mulss	xmm0, DWORD PTR [eax+ecx]
	movss	xmm1, DWORD PTR tv929[ebp]
	addss	xmm1, xmm0
	push	0
	lea	ecx, DWORD PTR _out$[ebp]
	movss	DWORD PTR tv931[ebp], xmm1
	call	??Amatrix3x4@@QAEPAMH@Z			; matrix3x4::operator[]
	mov	edx, 4
	imul	ecx, edx, 0
	movss	xmm0, DWORD PTR tv931[ebp]
	movss	DWORD PTR [eax+ecx], xmm0

; 278  : 	out[1][0] = mat[0][0] * mat2[1][0] + mat[1][0] * mat2[1][1] + mat[2][0] * mat2[1][2];

	mov	edx, 12					; 0000000cH
	imul	ecx, edx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector@@QAEPAMXZ			; Vector::operator float *
	mov	esi, eax
	mov	eax, 4
	imul	edi, eax, 0
	push	1
	lea	ecx, DWORD PTR _mat2$[ebp]
	call	??Amatrix3x4@@QBEPBMH@Z			; matrix3x4::operator[]
	mov	ecx, 4
	imul	edx, ecx, 0
	movss	xmm0, DWORD PTR [esi+edi]
	mulss	xmm0, DWORD PTR [eax+edx]
	mov	ecx, 12					; 0000000cH
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv933[ebp], xmm0
	call	??BVector@@QAEPAMXZ			; Vector::operator float *
	mov	esi, eax
	mov	eax, 4
	imul	edi, eax, 0
	push	1
	lea	ecx, DWORD PTR _mat2$[ebp]
	call	??Amatrix3x4@@QBEPBMH@Z			; matrix3x4::operator[]
	mov	ecx, 4
	shl	ecx, 0
	movss	xmm0, DWORD PTR [esi+edi]
	mulss	xmm0, DWORD PTR [eax+ecx]
	movss	xmm1, DWORD PTR tv933[ebp]
	addss	xmm1, xmm0
	mov	ecx, 12					; 0000000cH
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv935[ebp], xmm1
	call	??BVector@@QAEPAMXZ			; Vector::operator float *
	mov	esi, eax
	mov	edx, 4
	imul	edi, edx, 0
	push	1
	lea	ecx, DWORD PTR _mat2$[ebp]
	call	??Amatrix3x4@@QBEPBMH@Z			; matrix3x4::operator[]
	mov	ecx, 4
	shl	ecx, 1
	movss	xmm0, DWORD PTR [esi+edi]
	mulss	xmm0, DWORD PTR [eax+ecx]
	movss	xmm1, DWORD PTR tv935[ebp]
	addss	xmm1, xmm0
	push	1
	lea	ecx, DWORD PTR _out$[ebp]
	movss	DWORD PTR tv937[ebp], xmm1
	call	??Amatrix3x4@@QAEPAMH@Z			; matrix3x4::operator[]
	mov	edx, 4
	imul	ecx, edx, 0
	movss	xmm0, DWORD PTR tv937[ebp]
	movss	DWORD PTR [eax+ecx], xmm0

; 279  : 	out[2][0] = mat[0][0] * mat2[2][0] + mat[1][0] * mat2[2][1] + mat[2][0] * mat2[2][2];

	mov	edx, 12					; 0000000cH
	imul	ecx, edx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector@@QAEPAMXZ			; Vector::operator float *
	mov	esi, eax
	mov	eax, 4
	imul	edi, eax, 0
	push	2
	lea	ecx, DWORD PTR _mat2$[ebp]
	call	??Amatrix3x4@@QBEPBMH@Z			; matrix3x4::operator[]
	mov	ecx, 4
	imul	edx, ecx, 0
	movss	xmm0, DWORD PTR [esi+edi]
	mulss	xmm0, DWORD PTR [eax+edx]
	mov	ecx, 12					; 0000000cH
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv939[ebp], xmm0
	call	??BVector@@QAEPAMXZ			; Vector::operator float *
	mov	esi, eax
	mov	eax, 4
	imul	edi, eax, 0
	push	2
	lea	ecx, DWORD PTR _mat2$[ebp]
	call	??Amatrix3x4@@QBEPBMH@Z			; matrix3x4::operator[]
	mov	ecx, 4
	shl	ecx, 0
	movss	xmm0, DWORD PTR [esi+edi]
	mulss	xmm0, DWORD PTR [eax+ecx]
	movss	xmm1, DWORD PTR tv939[ebp]
	addss	xmm1, xmm0
	mov	ecx, 12					; 0000000cH
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv941[ebp], xmm1
	call	??BVector@@QAEPAMXZ			; Vector::operator float *
	mov	esi, eax
	mov	edx, 4
	imul	edi, edx, 0
	push	2
	lea	ecx, DWORD PTR _mat2$[ebp]
	call	??Amatrix3x4@@QBEPBMH@Z			; matrix3x4::operator[]
	mov	ecx, 4
	shl	ecx, 1
	movss	xmm0, DWORD PTR [esi+edi]
	mulss	xmm0, DWORD PTR [eax+ecx]
	movss	xmm1, DWORD PTR tv941[ebp]
	addss	xmm1, xmm0
	push	2
	lea	ecx, DWORD PTR _out$[ebp]
	movss	DWORD PTR tv943[ebp], xmm1
	call	??Amatrix3x4@@QAEPAMH@Z			; matrix3x4::operator[]
	mov	edx, 4
	imul	ecx, edx, 0
	movss	xmm0, DWORD PTR tv943[ebp]
	movss	DWORD PTR [eax+ecx], xmm0

; 280  : 	out[3][0] = mat[0][0] * mat2[3][0] + mat[1][0] * mat2[3][1] + mat[2][0] * mat2[3][2] + mat[3][0];

	mov	edx, 12					; 0000000cH
	imul	ecx, edx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector@@QAEPAMXZ			; Vector::operator float *
	mov	esi, eax
	mov	eax, 4
	imul	edi, eax, 0
	push	3
	lea	ecx, DWORD PTR _mat2$[ebp]
	call	??Amatrix3x4@@QBEPBMH@Z			; matrix3x4::operator[]
	mov	ecx, 4
	imul	edx, ecx, 0
	movss	xmm0, DWORD PTR [esi+edi]
	mulss	xmm0, DWORD PTR [eax+edx]
	mov	ecx, 12					; 0000000cH
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv945[ebp], xmm0
	call	??BVector@@QAEPAMXZ			; Vector::operator float *
	mov	esi, eax
	mov	eax, 4
	imul	edi, eax, 0
	push	3
	lea	ecx, DWORD PTR _mat2$[ebp]
	call	??Amatrix3x4@@QBEPBMH@Z			; matrix3x4::operator[]
	mov	ecx, 4
	shl	ecx, 0
	movss	xmm0, DWORD PTR [esi+edi]
	mulss	xmm0, DWORD PTR [eax+ecx]
	movss	xmm1, DWORD PTR tv945[ebp]
	addss	xmm1, xmm0
	mov	ecx, 12					; 0000000cH
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv947[ebp], xmm1
	call	??BVector@@QAEPAMXZ			; Vector::operator float *
	mov	esi, eax
	mov	edx, 4
	imul	edi, edx, 0
	push	3
	lea	ecx, DWORD PTR _mat2$[ebp]
	call	??Amatrix3x4@@QBEPBMH@Z			; matrix3x4::operator[]
	mov	ecx, 4
	shl	ecx, 1
	movss	xmm0, DWORD PTR [esi+edi]
	mulss	xmm0, DWORD PTR [eax+ecx]
	movss	xmm1, DWORD PTR tv947[ebp]
	addss	xmm1, xmm0
	mov	edx, 12					; 0000000cH
	imul	ecx, edx, 3
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv949[ebp], xmm1
	call	??BVector@@QAEPAMXZ			; Vector::operator float *
	mov	ecx, 4
	imul	edx, ecx, 0
	movss	xmm0, DWORD PTR tv949[ebp]
	addss	xmm0, DWORD PTR [eax+edx]
	push	3
	lea	ecx, DWORD PTR _out$[ebp]
	movss	DWORD PTR tv951[ebp], xmm0
	call	??Amatrix3x4@@QAEPAMH@Z			; matrix3x4::operator[]
	mov	ecx, 4
	imul	edx, ecx, 0
	movss	xmm0, DWORD PTR tv951[ebp]
	movss	DWORD PTR [eax+edx], xmm0

; 281  : 	out[0][1] = mat[0][1] * mat2[0][0] + mat[1][1] * mat2[0][1] + mat[2][1] * mat2[0][2];

	mov	eax, 12					; 0000000cH
	imul	ecx, eax, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector@@QAEPAMXZ			; Vector::operator float *
	mov	esi, eax
	mov	edi, 4
	shl	edi, 0
	push	0
	lea	ecx, DWORD PTR _mat2$[ebp]
	call	??Amatrix3x4@@QBEPBMH@Z			; matrix3x4::operator[]
	mov	ecx, 4
	imul	edx, ecx, 0
	movss	xmm0, DWORD PTR [esi+edi]
	mulss	xmm0, DWORD PTR [eax+edx]
	mov	ecx, 12					; 0000000cH
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv953[ebp], xmm0
	call	??BVector@@QAEPAMXZ			; Vector::operator float *
	mov	esi, eax
	mov	edi, 4
	shl	edi, 0
	push	0
	lea	ecx, DWORD PTR _mat2$[ebp]
	call	??Amatrix3x4@@QBEPBMH@Z			; matrix3x4::operator[]
	mov	ecx, 4
	shl	ecx, 0
	movss	xmm0, DWORD PTR [esi+edi]
	mulss	xmm0, DWORD PTR [eax+ecx]
	movss	xmm1, DWORD PTR tv953[ebp]
	addss	xmm1, xmm0
	mov	ecx, 12					; 0000000cH
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv955[ebp], xmm1
	call	??BVector@@QAEPAMXZ			; Vector::operator float *
	mov	esi, eax
	mov	edi, 4
	shl	edi, 0
	push	0
	lea	ecx, DWORD PTR _mat2$[ebp]
	call	??Amatrix3x4@@QBEPBMH@Z			; matrix3x4::operator[]
	mov	edx, 4
	shl	edx, 1
	movss	xmm0, DWORD PTR [esi+edi]
	mulss	xmm0, DWORD PTR [eax+edx]
	movss	xmm1, DWORD PTR tv955[ebp]
	addss	xmm1, xmm0
	push	0
	lea	ecx, DWORD PTR _out$[ebp]
	movss	DWORD PTR tv957[ebp], xmm1
	call	??Amatrix3x4@@QAEPAMH@Z			; matrix3x4::operator[]
	mov	ecx, 4
	shl	ecx, 0
	movss	xmm0, DWORD PTR tv957[ebp]
	movss	DWORD PTR [eax+ecx], xmm0

; 282  : 	out[1][1] = mat[0][1] * mat2[1][0] + mat[1][1] * mat2[1][1] + mat[2][1] * mat2[1][2];

	mov	edx, 12					; 0000000cH
	imul	ecx, edx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector@@QAEPAMXZ			; Vector::operator float *
	mov	esi, eax
	mov	edi, 4
	shl	edi, 0
	push	1
	lea	ecx, DWORD PTR _mat2$[ebp]
	call	??Amatrix3x4@@QBEPBMH@Z			; matrix3x4::operator[]
	mov	ecx, 4
	imul	edx, ecx, 0
	movss	xmm0, DWORD PTR [esi+edi]
	mulss	xmm0, DWORD PTR [eax+edx]
	mov	ecx, 12					; 0000000cH
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv959[ebp], xmm0
	call	??BVector@@QAEPAMXZ			; Vector::operator float *
	mov	esi, eax
	mov	edi, 4
	shl	edi, 0
	push	1
	lea	ecx, DWORD PTR _mat2$[ebp]
	call	??Amatrix3x4@@QBEPBMH@Z			; matrix3x4::operator[]
	mov	ecx, 4
	shl	ecx, 0
	movss	xmm0, DWORD PTR [esi+edi]
	mulss	xmm0, DWORD PTR [eax+ecx]
	movss	xmm1, DWORD PTR tv959[ebp]
	addss	xmm1, xmm0
	mov	ecx, 12					; 0000000cH
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv961[ebp], xmm1
	call	??BVector@@QAEPAMXZ			; Vector::operator float *
	mov	esi, eax
	mov	edi, 4
	shl	edi, 0
	push	1
	lea	ecx, DWORD PTR _mat2$[ebp]
	call	??Amatrix3x4@@QBEPBMH@Z			; matrix3x4::operator[]
	mov	edx, 4
	shl	edx, 1
	movss	xmm0, DWORD PTR [esi+edi]
	mulss	xmm0, DWORD PTR [eax+edx]
	movss	xmm1, DWORD PTR tv961[ebp]
	addss	xmm1, xmm0
	push	1
	lea	ecx, DWORD PTR _out$[ebp]
	movss	DWORD PTR tv963[ebp], xmm1
	call	??Amatrix3x4@@QAEPAMH@Z			; matrix3x4::operator[]
	mov	ecx, 4
	shl	ecx, 0
	movss	xmm0, DWORD PTR tv963[ebp]
	movss	DWORD PTR [eax+ecx], xmm0

; 283  : 	out[2][1] = mat[0][1] * mat2[2][0] + mat[1][1] * mat2[2][1] + mat[2][1] * mat2[2][2];

	mov	edx, 12					; 0000000cH
	imul	ecx, edx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector@@QAEPAMXZ			; Vector::operator float *
	mov	esi, eax
	mov	edi, 4
	shl	edi, 0
	push	2
	lea	ecx, DWORD PTR _mat2$[ebp]
	call	??Amatrix3x4@@QBEPBMH@Z			; matrix3x4::operator[]
	mov	ecx, 4
	imul	edx, ecx, 0
	movss	xmm0, DWORD PTR [esi+edi]
	mulss	xmm0, DWORD PTR [eax+edx]
	mov	ecx, 12					; 0000000cH
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv965[ebp], xmm0
	call	??BVector@@QAEPAMXZ			; Vector::operator float *
	mov	esi, eax
	mov	edi, 4
	shl	edi, 0
	push	2
	lea	ecx, DWORD PTR _mat2$[ebp]
	call	??Amatrix3x4@@QBEPBMH@Z			; matrix3x4::operator[]
	mov	ecx, 4
	shl	ecx, 0
	movss	xmm0, DWORD PTR [esi+edi]
	mulss	xmm0, DWORD PTR [eax+ecx]
	movss	xmm1, DWORD PTR tv965[ebp]
	addss	xmm1, xmm0
	mov	ecx, 12					; 0000000cH
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv967[ebp], xmm1
	call	??BVector@@QAEPAMXZ			; Vector::operator float *
	mov	esi, eax
	mov	edi, 4
	shl	edi, 0
	push	2
	lea	ecx, DWORD PTR _mat2$[ebp]
	call	??Amatrix3x4@@QBEPBMH@Z			; matrix3x4::operator[]
	mov	edx, 4
	shl	edx, 1
	movss	xmm0, DWORD PTR [esi+edi]
	mulss	xmm0, DWORD PTR [eax+edx]
	movss	xmm1, DWORD PTR tv967[ebp]
	addss	xmm1, xmm0
	push	2
	lea	ecx, DWORD PTR _out$[ebp]
	movss	DWORD PTR tv969[ebp], xmm1
	call	??Amatrix3x4@@QAEPAMH@Z			; matrix3x4::operator[]
	mov	ecx, 4
	shl	ecx, 0
	movss	xmm0, DWORD PTR tv969[ebp]
	movss	DWORD PTR [eax+ecx], xmm0

; 284  : 	out[3][1] = mat[0][1] * mat2[3][0] + mat[1][1] * mat2[3][1] + mat[2][1] * mat2[3][2] + mat[3][1];

	mov	edx, 12					; 0000000cH
	imul	ecx, edx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector@@QAEPAMXZ			; Vector::operator float *
	mov	esi, eax
	mov	edi, 4
	shl	edi, 0
	push	3
	lea	ecx, DWORD PTR _mat2$[ebp]
	call	??Amatrix3x4@@QBEPBMH@Z			; matrix3x4::operator[]
	mov	ecx, 4
	imul	edx, ecx, 0
	movss	xmm0, DWORD PTR [esi+edi]
	mulss	xmm0, DWORD PTR [eax+edx]
	mov	ecx, 12					; 0000000cH
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv971[ebp], xmm0
	call	??BVector@@QAEPAMXZ			; Vector::operator float *
	mov	esi, eax
	mov	edi, 4
	shl	edi, 0
	push	3
	lea	ecx, DWORD PTR _mat2$[ebp]
	call	??Amatrix3x4@@QBEPBMH@Z			; matrix3x4::operator[]
	mov	ecx, 4
	shl	ecx, 0
	movss	xmm0, DWORD PTR [esi+edi]
	mulss	xmm0, DWORD PTR [eax+ecx]
	movss	xmm1, DWORD PTR tv971[ebp]
	addss	xmm1, xmm0
	mov	ecx, 12					; 0000000cH
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv973[ebp], xmm1
	call	??BVector@@QAEPAMXZ			; Vector::operator float *
	mov	esi, eax
	mov	edi, 4
	shl	edi, 0
	push	3
	lea	ecx, DWORD PTR _mat2$[ebp]
	call	??Amatrix3x4@@QBEPBMH@Z			; matrix3x4::operator[]
	mov	edx, 4
	shl	edx, 1
	movss	xmm0, DWORD PTR [esi+edi]
	mulss	xmm0, DWORD PTR [eax+edx]
	movss	xmm1, DWORD PTR tv973[ebp]
	addss	xmm1, xmm0
	mov	eax, 12					; 0000000cH
	imul	ecx, eax, 3
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv975[ebp], xmm1
	call	??BVector@@QAEPAMXZ			; Vector::operator float *
	mov	ecx, 4
	shl	ecx, 0
	movss	xmm0, DWORD PTR tv975[ebp]
	addss	xmm0, DWORD PTR [eax+ecx]
	push	3
	lea	ecx, DWORD PTR _out$[ebp]
	movss	DWORD PTR tv977[ebp], xmm0
	call	??Amatrix3x4@@QAEPAMH@Z			; matrix3x4::operator[]
	mov	edx, 4
	shl	edx, 0
	movss	xmm0, DWORD PTR tv977[ebp]
	movss	DWORD PTR [eax+edx], xmm0

; 285  : 	out[0][2] = mat[0][2] * mat2[0][0] + mat[1][2] * mat2[0][1] + mat[2][2] * mat2[0][2];

	mov	eax, 12					; 0000000cH
	imul	ecx, eax, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector@@QAEPAMXZ			; Vector::operator float *
	mov	esi, eax
	mov	edi, 4
	shl	edi, 1
	push	0
	lea	ecx, DWORD PTR _mat2$[ebp]
	call	??Amatrix3x4@@QBEPBMH@Z			; matrix3x4::operator[]
	mov	ecx, 4
	imul	edx, ecx, 0
	movss	xmm0, DWORD PTR [esi+edi]
	mulss	xmm0, DWORD PTR [eax+edx]
	mov	ecx, 12					; 0000000cH
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv979[ebp], xmm0
	call	??BVector@@QAEPAMXZ			; Vector::operator float *
	mov	esi, eax
	mov	edi, 4
	shl	edi, 1
	push	0
	lea	ecx, DWORD PTR _mat2$[ebp]
	call	??Amatrix3x4@@QBEPBMH@Z			; matrix3x4::operator[]
	mov	ecx, 4
	shl	ecx, 0
	movss	xmm0, DWORD PTR [esi+edi]
	mulss	xmm0, DWORD PTR [eax+ecx]
	movss	xmm1, DWORD PTR tv979[ebp]
	addss	xmm1, xmm0
	mov	ecx, 12					; 0000000cH
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv981[ebp], xmm1
	call	??BVector@@QAEPAMXZ			; Vector::operator float *
	mov	esi, eax
	mov	edi, 4
	shl	edi, 1
	push	0
	lea	ecx, DWORD PTR _mat2$[ebp]
	call	??Amatrix3x4@@QBEPBMH@Z			; matrix3x4::operator[]
	mov	edx, 4
	shl	edx, 1
	movss	xmm0, DWORD PTR [esi+edi]
	mulss	xmm0, DWORD PTR [eax+edx]
	movss	xmm1, DWORD PTR tv981[ebp]
	addss	xmm1, xmm0
	push	0
	lea	ecx, DWORD PTR _out$[ebp]
	movss	DWORD PTR tv983[ebp], xmm1
	call	??Amatrix3x4@@QAEPAMH@Z			; matrix3x4::operator[]
	mov	ecx, 4
	shl	ecx, 1
	movss	xmm0, DWORD PTR tv983[ebp]
	movss	DWORD PTR [eax+ecx], xmm0

; 286  : 	out[1][2] = mat[0][2] * mat2[1][0] + mat[1][2] * mat2[1][1] + mat[2][2] * mat2[1][2];

	mov	edx, 12					; 0000000cH
	imul	ecx, edx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector@@QAEPAMXZ			; Vector::operator float *
	mov	esi, eax
	mov	edi, 4
	shl	edi, 1
	push	1
	lea	ecx, DWORD PTR _mat2$[ebp]
	call	??Amatrix3x4@@QBEPBMH@Z			; matrix3x4::operator[]
	mov	ecx, 4
	imul	edx, ecx, 0
	movss	xmm0, DWORD PTR [esi+edi]
	mulss	xmm0, DWORD PTR [eax+edx]
	mov	ecx, 12					; 0000000cH
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv985[ebp], xmm0
	call	??BVector@@QAEPAMXZ			; Vector::operator float *
	mov	esi, eax
	mov	edi, 4
	shl	edi, 1
	push	1
	lea	ecx, DWORD PTR _mat2$[ebp]
	call	??Amatrix3x4@@QBEPBMH@Z			; matrix3x4::operator[]
	mov	ecx, 4
	shl	ecx, 0
	movss	xmm0, DWORD PTR [esi+edi]
	mulss	xmm0, DWORD PTR [eax+ecx]
	movss	xmm1, DWORD PTR tv985[ebp]
	addss	xmm1, xmm0
	mov	ecx, 12					; 0000000cH
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv987[ebp], xmm1
	call	??BVector@@QAEPAMXZ			; Vector::operator float *
	mov	esi, eax
	mov	edi, 4
	shl	edi, 1
	push	1
	lea	ecx, DWORD PTR _mat2$[ebp]
	call	??Amatrix3x4@@QBEPBMH@Z			; matrix3x4::operator[]
	mov	edx, 4
	shl	edx, 1
	movss	xmm0, DWORD PTR [esi+edi]
	mulss	xmm0, DWORD PTR [eax+edx]
	movss	xmm1, DWORD PTR tv987[ebp]
	addss	xmm1, xmm0
	push	1
	lea	ecx, DWORD PTR _out$[ebp]
	movss	DWORD PTR tv989[ebp], xmm1
	call	??Amatrix3x4@@QAEPAMH@Z			; matrix3x4::operator[]
	mov	ecx, 4
	shl	ecx, 1
	movss	xmm0, DWORD PTR tv989[ebp]
	movss	DWORD PTR [eax+ecx], xmm0

; 287  : 	out[2][2] = mat[0][2] * mat2[2][0] + mat[1][2] * mat2[2][1] + mat[2][2] * mat2[2][2];

	mov	edx, 12					; 0000000cH
	imul	ecx, edx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector@@QAEPAMXZ			; Vector::operator float *
	mov	esi, eax
	mov	edi, 4
	shl	edi, 1
	push	2
	lea	ecx, DWORD PTR _mat2$[ebp]
	call	??Amatrix3x4@@QBEPBMH@Z			; matrix3x4::operator[]
	mov	ecx, 4
	imul	edx, ecx, 0
	movss	xmm0, DWORD PTR [esi+edi]
	mulss	xmm0, DWORD PTR [eax+edx]
	mov	ecx, 12					; 0000000cH
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv991[ebp], xmm0
	call	??BVector@@QAEPAMXZ			; Vector::operator float *
	mov	esi, eax
	mov	edi, 4
	shl	edi, 1
	push	2
	lea	ecx, DWORD PTR _mat2$[ebp]
	call	??Amatrix3x4@@QBEPBMH@Z			; matrix3x4::operator[]
	mov	ecx, 4
	shl	ecx, 0
	movss	xmm0, DWORD PTR [esi+edi]
	mulss	xmm0, DWORD PTR [eax+ecx]
	movss	xmm1, DWORD PTR tv991[ebp]
	addss	xmm1, xmm0
	mov	ecx, 12					; 0000000cH
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv993[ebp], xmm1
	call	??BVector@@QAEPAMXZ			; Vector::operator float *
	mov	esi, eax
	mov	edi, 4
	shl	edi, 1
	push	2
	lea	ecx, DWORD PTR _mat2$[ebp]
	call	??Amatrix3x4@@QBEPBMH@Z			; matrix3x4::operator[]
	mov	edx, 4
	shl	edx, 1
	movss	xmm0, DWORD PTR [esi+edi]
	mulss	xmm0, DWORD PTR [eax+edx]
	movss	xmm1, DWORD PTR tv993[ebp]
	addss	xmm1, xmm0
	push	2
	lea	ecx, DWORD PTR _out$[ebp]
	movss	DWORD PTR tv995[ebp], xmm1
	call	??Amatrix3x4@@QAEPAMH@Z			; matrix3x4::operator[]
	mov	ecx, 4
	shl	ecx, 1
	movss	xmm0, DWORD PTR tv995[ebp]
	movss	DWORD PTR [eax+ecx], xmm0

; 288  : 	out[3][2] = mat[0][2] * mat2[3][0] + mat[1][2] * mat2[3][1] + mat[2][2] * mat2[3][2] + mat[3][2];

	mov	edx, 12					; 0000000cH
	imul	ecx, edx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector@@QAEPAMXZ			; Vector::operator float *
	mov	esi, eax
	mov	edi, 4
	shl	edi, 1
	push	3
	lea	ecx, DWORD PTR _mat2$[ebp]
	call	??Amatrix3x4@@QBEPBMH@Z			; matrix3x4::operator[]
	mov	ecx, 4
	imul	edx, ecx, 0
	movss	xmm0, DWORD PTR [esi+edi]
	mulss	xmm0, DWORD PTR [eax+edx]
	mov	ecx, 12					; 0000000cH
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv997[ebp], xmm0
	call	??BVector@@QAEPAMXZ			; Vector::operator float *
	mov	esi, eax
	mov	edi, 4
	shl	edi, 1
	push	3
	lea	ecx, DWORD PTR _mat2$[ebp]
	call	??Amatrix3x4@@QBEPBMH@Z			; matrix3x4::operator[]
	mov	ecx, 4
	shl	ecx, 0
	movss	xmm0, DWORD PTR [esi+edi]
	mulss	xmm0, DWORD PTR [eax+ecx]
	movss	xmm1, DWORD PTR tv997[ebp]
	addss	xmm1, xmm0
	mov	ecx, 12					; 0000000cH
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv999[ebp], xmm1
	call	??BVector@@QAEPAMXZ			; Vector::operator float *
	mov	esi, eax
	mov	edi, 4
	shl	edi, 1
	push	3
	lea	ecx, DWORD PTR _mat2$[ebp]
	call	??Amatrix3x4@@QBEPBMH@Z			; matrix3x4::operator[]
	mov	edx, 4
	shl	edx, 1
	movss	xmm0, DWORD PTR [esi+edi]
	mulss	xmm0, DWORD PTR [eax+edx]
	movss	xmm1, DWORD PTR tv999[ebp]
	addss	xmm1, xmm0
	mov	eax, 12					; 0000000cH
	imul	ecx, eax, 3
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv1001[ebp], xmm1
	call	??BVector@@QAEPAMXZ			; Vector::operator float *
	mov	ecx, 4
	shl	ecx, 1
	movss	xmm0, DWORD PTR tv1001[ebp]
	addss	xmm0, DWORD PTR [eax+ecx]
	push	3
	lea	ecx, DWORD PTR _out$[ebp]
	movss	DWORD PTR tv1003[ebp], xmm0
	call	??Amatrix3x4@@QAEPAMH@Z			; matrix3x4::operator[]
	mov	edx, 4
	shl	edx, 1
	movss	xmm0, DWORD PTR tv1003[ebp]
	movss	DWORD PTR [eax+edx], xmm0

; 289  : 
; 290  : 	return out;

	lea	eax, DWORD PTR _out$[ebp]
	push	eax
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0matrix3x4@@QAE@$$QAV0@@Z
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 291  : }

	pop	edi
	pop	esi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	52					; 00000034H
?ConcatTransforms@matrix3x4@@QAE?AV1@V1@@Z ENDP		; matrix3x4::ConcatTransforms
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xashxt_v0.81_rev.1_with_sources\xashxt_v0.81_rev.1_src\game_shared\matrix.cpp
_TEXT	SEGMENT
tv587 = -140						; size = 4
tv585 = -136						; size = 4
tv583 = -132						; size = 4
tv581 = -128						; size = 4
tv579 = -124						; size = 4
tv577 = -120						; size = 4
tv575 = -116						; size = 4
tv573 = -112						; size = 4
tv571 = -108						; size = 4
tv569 = -104						; size = 4
tv567 = -100						; size = 4
tv565 = -96						; size = 4
tv563 = -92						; size = 4
tv561 = -88						; size = 4
tv559 = -84						; size = 4
tv557 = -80						; size = 4
tv555 = -76						; size = 4
tv553 = -72						; size = 4
tv551 = -68						; size = 4
tv549 = -64						; size = 4
_scale$ = -60						; size = 4
_this$ = -56						; size = 4
_out$ = -52						; size = 48
__$ArrayPad$ = -4					; size = 4
___$ReturnUdt$ = 8					; size = 4
?Invert@matrix3x4@@QBE?AV1@XZ PROC			; matrix3x4::Invert
; _this$ = ecx

; 244  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 140				; 0000008cH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 245  : 	// we only support uniform scaling, so assume the first row is enough
; 246  : 	// (note the lack of sqrt here, because we're trying to undo the scaling,
; 247  : 	// this means multiplying by the inverse scale twice - squaring it, which
; 248  : 	// makes the sqrt a waste of time)
; 249  : 	float scale = 1.0 / (mat[0][0] * mat[0][0] + mat[0][1] * mat[0][1] + mat[0][2] * mat[0][2]);

	mov	eax, 12					; 0000000cH
	imul	ecx, eax, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector@@QBEPBMXZ			; Vector::operator float const *
	mov	esi, eax
	mov	ecx, 4
	imul	edi, ecx, 0
	mov	edx, 12					; 0000000cH
	imul	ecx, edx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector@@QBEPBMXZ			; Vector::operator float const *
	mov	ecx, 4
	imul	edx, ecx, 0
	movss	xmm0, DWORD PTR [esi+edi]
	mulss	xmm0, DWORD PTR [eax+edx]
	mov	eax, 12					; 0000000cH
	imul	ecx, eax, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv549[ebp], xmm0
	call	??BVector@@QBEPBMXZ			; Vector::operator float const *
	mov	esi, eax
	mov	edi, 4
	shl	edi, 0
	mov	ecx, 12					; 0000000cH
	imul	ecx, ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector@@QBEPBMXZ			; Vector::operator float const *
	mov	edx, 4
	shl	edx, 0
	movss	xmm0, DWORD PTR [esi+edi]
	mulss	xmm0, DWORD PTR [eax+edx]
	movss	xmm1, DWORD PTR tv549[ebp]
	addss	xmm1, xmm0
	mov	eax, 12					; 0000000cH
	imul	ecx, eax, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv551[ebp], xmm1
	call	??BVector@@QBEPBMXZ			; Vector::operator float const *
	mov	esi, eax
	mov	edi, 4
	shl	edi, 1
	mov	ecx, 12					; 0000000cH
	imul	ecx, ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector@@QBEPBMXZ			; Vector::operator float const *
	mov	edx, 4
	shl	edx, 1
	movss	xmm0, DWORD PTR [esi+edi]
	mulss	xmm0, DWORD PTR [eax+edx]
	movss	xmm1, DWORD PTR tv551[ebp]
	addss	xmm1, xmm0
	cvtss2sd xmm0, xmm1
	movsd	xmm1, QWORD PTR __real@3ff0000000000000
	divsd	xmm1, xmm0
	cvtsd2ss xmm0, xmm1
	movss	DWORD PTR _scale$[ebp], xmm0

; 250  : 
; 251  : 	matrix3x4 out;

	lea	ecx, DWORD PTR _out$[ebp]
	call	??0matrix3x4@@QAE@XZ			; matrix3x4::matrix3x4

; 252  : 
; 253  : 	// invert the rotation by transposing and multiplying by the squared
; 254  : 	// recipricol of the input matrix scale as described above
; 255  : 	out[0][0] = mat[0][0] * scale;

	mov	eax, 12					; 0000000cH
	imul	ecx, eax, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector@@QBEPBMXZ			; Vector::operator float const *
	mov	ecx, 4
	imul	edx, ecx, 0
	movss	xmm0, DWORD PTR [eax+edx]
	mulss	xmm0, DWORD PTR _scale$[ebp]
	push	0
	lea	ecx, DWORD PTR _out$[ebp]
	movss	DWORD PTR tv553[ebp], xmm0
	call	??Amatrix3x4@@QAEPAMH@Z			; matrix3x4::operator[]
	mov	ecx, 4
	imul	edx, ecx, 0
	movss	xmm0, DWORD PTR tv553[ebp]
	movss	DWORD PTR [eax+edx], xmm0

; 256  : 	out[0][1] = mat[1][0] * scale;

	mov	ecx, 12					; 0000000cH
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector@@QBEPBMXZ			; Vector::operator float const *
	mov	ecx, 4
	imul	edx, ecx, 0
	movss	xmm0, DWORD PTR [eax+edx]
	mulss	xmm0, DWORD PTR _scale$[ebp]
	push	0
	lea	ecx, DWORD PTR _out$[ebp]
	movss	DWORD PTR tv555[ebp], xmm0
	call	??Amatrix3x4@@QAEPAMH@Z			; matrix3x4::operator[]
	mov	ecx, 4
	shl	ecx, 0
	movss	xmm0, DWORD PTR tv555[ebp]
	movss	DWORD PTR [eax+ecx], xmm0

; 257  : 	out[0][2] = mat[2][0] * scale;

	mov	ecx, 12					; 0000000cH
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector@@QBEPBMXZ			; Vector::operator float const *
	mov	edx, 4
	imul	ecx, edx, 0
	movss	xmm0, DWORD PTR [eax+ecx]
	mulss	xmm0, DWORD PTR _scale$[ebp]
	push	0
	lea	ecx, DWORD PTR _out$[ebp]
	movss	DWORD PTR tv557[ebp], xmm0
	call	??Amatrix3x4@@QAEPAMH@Z			; matrix3x4::operator[]
	mov	edx, 4
	shl	edx, 1
	movss	xmm0, DWORD PTR tv557[ebp]
	movss	DWORD PTR [eax+edx], xmm0

; 258  : 	out[1][0] = mat[0][1] * scale;

	mov	eax, 12					; 0000000cH
	imul	ecx, eax, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector@@QBEPBMXZ			; Vector::operator float const *
	mov	ecx, 4
	shl	ecx, 0
	movss	xmm0, DWORD PTR [eax+ecx]
	mulss	xmm0, DWORD PTR _scale$[ebp]
	push	1
	lea	ecx, DWORD PTR _out$[ebp]
	movss	DWORD PTR tv559[ebp], xmm0
	call	??Amatrix3x4@@QAEPAMH@Z			; matrix3x4::operator[]
	mov	edx, 4
	imul	ecx, edx, 0
	movss	xmm0, DWORD PTR tv559[ebp]
	movss	DWORD PTR [eax+ecx], xmm0

; 259  : 	out[1][1] = mat[1][1] * scale;

	mov	ecx, 12					; 0000000cH
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector@@QBEPBMXZ			; Vector::operator float const *
	mov	edx, 4
	shl	edx, 0
	movss	xmm0, DWORD PTR [eax+edx]
	mulss	xmm0, DWORD PTR _scale$[ebp]
	push	1
	lea	ecx, DWORD PTR _out$[ebp]
	movss	DWORD PTR tv561[ebp], xmm0
	call	??Amatrix3x4@@QAEPAMH@Z			; matrix3x4::operator[]
	mov	ecx, 4
	shl	ecx, 0
	movss	xmm0, DWORD PTR tv561[ebp]
	movss	DWORD PTR [eax+ecx], xmm0

; 260  : 	out[1][2] = mat[2][1] * scale;

	mov	ecx, 12					; 0000000cH
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector@@QBEPBMXZ			; Vector::operator float const *
	mov	edx, 4
	shl	edx, 0
	movss	xmm0, DWORD PTR [eax+edx]
	mulss	xmm0, DWORD PTR _scale$[ebp]
	push	1
	lea	ecx, DWORD PTR _out$[ebp]
	movss	DWORD PTR tv563[ebp], xmm0
	call	??Amatrix3x4@@QAEPAMH@Z			; matrix3x4::operator[]
	mov	ecx, 4
	shl	ecx, 1
	movss	xmm0, DWORD PTR tv563[ebp]
	movss	DWORD PTR [eax+ecx], xmm0

; 261  : 	out[2][0] = mat[0][2] * scale;

	mov	edx, 12					; 0000000cH
	imul	ecx, edx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector@@QBEPBMXZ			; Vector::operator float const *
	mov	ecx, 4
	shl	ecx, 1
	movss	xmm0, DWORD PTR [eax+ecx]
	mulss	xmm0, DWORD PTR _scale$[ebp]
	push	2
	lea	ecx, DWORD PTR _out$[ebp]
	movss	DWORD PTR tv565[ebp], xmm0
	call	??Amatrix3x4@@QAEPAMH@Z			; matrix3x4::operator[]
	mov	edx, 4
	imul	ecx, edx, 0
	movss	xmm0, DWORD PTR tv565[ebp]
	movss	DWORD PTR [eax+ecx], xmm0

; 262  : 	out[2][1] = mat[1][2] * scale;

	mov	ecx, 12					; 0000000cH
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector@@QBEPBMXZ			; Vector::operator float const *
	mov	edx, 4
	shl	edx, 1
	movss	xmm0, DWORD PTR [eax+edx]
	mulss	xmm0, DWORD PTR _scale$[ebp]
	push	2
	lea	ecx, DWORD PTR _out$[ebp]
	movss	DWORD PTR tv567[ebp], xmm0
	call	??Amatrix3x4@@QAEPAMH@Z			; matrix3x4::operator[]
	mov	ecx, 4
	shl	ecx, 0
	movss	xmm0, DWORD PTR tv567[ebp]
	movss	DWORD PTR [eax+ecx], xmm0

; 263  : 	out[2][2] = mat[2][2] * scale;

	mov	ecx, 12					; 0000000cH
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector@@QBEPBMXZ			; Vector::operator float const *
	mov	edx, 4
	shl	edx, 1
	movss	xmm0, DWORD PTR [eax+edx]
	mulss	xmm0, DWORD PTR _scale$[ebp]
	push	2
	lea	ecx, DWORD PTR _out$[ebp]
	movss	DWORD PTR tv569[ebp], xmm0
	call	??Amatrix3x4@@QAEPAMH@Z			; matrix3x4::operator[]
	mov	ecx, 4
	shl	ecx, 1
	movss	xmm0, DWORD PTR tv569[ebp]
	movss	DWORD PTR [eax+ecx], xmm0

; 264  : 
; 265  : 	// invert the translate
; 266  : 	out[3][0] = -(mat[3][0] * out[0][0] + mat[3][1] * out[1][0] + mat[3][2] * out[2][0]);

	mov	edx, 12					; 0000000cH
	imul	ecx, edx, 3
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector@@QBEPBMXZ			; Vector::operator float const *
	mov	esi, eax
	mov	eax, 4
	imul	edi, eax, 0
	push	0
	lea	ecx, DWORD PTR _out$[ebp]
	call	??Amatrix3x4@@QAEPAMH@Z			; matrix3x4::operator[]
	mov	ecx, 4
	imul	edx, ecx, 0
	movss	xmm0, DWORD PTR [esi+edi]
	mulss	xmm0, DWORD PTR [eax+edx]
	mov	eax, 12					; 0000000cH
	imul	ecx, eax, 3
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv571[ebp], xmm0
	call	??BVector@@QBEPBMXZ			; Vector::operator float const *
	mov	esi, eax
	mov	edi, 4
	shl	edi, 0
	push	1
	lea	ecx, DWORD PTR _out$[ebp]
	call	??Amatrix3x4@@QAEPAMH@Z			; matrix3x4::operator[]
	mov	ecx, 4
	imul	edx, ecx, 0
	movss	xmm0, DWORD PTR [esi+edi]
	mulss	xmm0, DWORD PTR [eax+edx]
	movss	xmm1, DWORD PTR tv571[ebp]
	addss	xmm1, xmm0
	mov	eax, 12					; 0000000cH
	imul	ecx, eax, 3
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv573[ebp], xmm1
	call	??BVector@@QBEPBMXZ			; Vector::operator float const *
	mov	esi, eax
	mov	edi, 4
	shl	edi, 1
	push	2
	lea	ecx, DWORD PTR _out$[ebp]
	call	??Amatrix3x4@@QAEPAMH@Z			; matrix3x4::operator[]
	mov	ecx, 4
	imul	edx, ecx, 0
	movss	xmm0, DWORD PTR [esi+edi]
	mulss	xmm0, DWORD PTR [eax+edx]
	movss	xmm1, DWORD PTR tv573[ebp]
	addss	xmm1, xmm0
	xorps	xmm1, DWORD PTR __xmm@80000000800000008000000080000000
	push	3
	lea	ecx, DWORD PTR _out$[ebp]
	movss	DWORD PTR tv575[ebp], xmm1
	call	??Amatrix3x4@@QAEPAMH@Z			; matrix3x4::operator[]
	mov	ecx, 4
	imul	edx, ecx, 0
	movss	xmm0, DWORD PTR tv575[ebp]
	movss	DWORD PTR [eax+edx], xmm0

; 267  : 	out[3][1] = -(mat[3][0] * out[0][1] + mat[3][1] * out[1][1] + mat[3][2] * out[2][1]);

	mov	eax, 12					; 0000000cH
	imul	ecx, eax, 3
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector@@QBEPBMXZ			; Vector::operator float const *
	mov	esi, eax
	mov	ecx, 4
	imul	edi, ecx, 0
	push	0
	lea	ecx, DWORD PTR _out$[ebp]
	call	??Amatrix3x4@@QAEPAMH@Z			; matrix3x4::operator[]
	mov	edx, 4
	shl	edx, 0
	movss	xmm0, DWORD PTR [esi+edi]
	mulss	xmm0, DWORD PTR [eax+edx]
	mov	eax, 12					; 0000000cH
	imul	ecx, eax, 3
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv577[ebp], xmm0
	call	??BVector@@QBEPBMXZ			; Vector::operator float const *
	mov	esi, eax
	mov	edi, 4
	shl	edi, 0
	push	1
	lea	ecx, DWORD PTR _out$[ebp]
	call	??Amatrix3x4@@QAEPAMH@Z			; matrix3x4::operator[]
	mov	ecx, 4
	shl	ecx, 0
	movss	xmm0, DWORD PTR [esi+edi]
	mulss	xmm0, DWORD PTR [eax+ecx]
	movss	xmm1, DWORD PTR tv577[ebp]
	addss	xmm1, xmm0
	mov	edx, 12					; 0000000cH
	imul	ecx, edx, 3
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv579[ebp], xmm1
	call	??BVector@@QBEPBMXZ			; Vector::operator float const *
	mov	esi, eax
	mov	edi, 4
	shl	edi, 1
	push	2
	lea	ecx, DWORD PTR _out$[ebp]
	call	??Amatrix3x4@@QAEPAMH@Z			; matrix3x4::operator[]
	mov	ecx, 4
	shl	ecx, 0
	movss	xmm0, DWORD PTR [esi+edi]
	mulss	xmm0, DWORD PTR [eax+ecx]
	movss	xmm1, DWORD PTR tv579[ebp]
	addss	xmm1, xmm0
	xorps	xmm1, DWORD PTR __xmm@80000000800000008000000080000000
	push	3
	lea	ecx, DWORD PTR _out$[ebp]
	movss	DWORD PTR tv581[ebp], xmm1
	call	??Amatrix3x4@@QAEPAMH@Z			; matrix3x4::operator[]
	mov	edx, 4
	shl	edx, 0
	movss	xmm0, DWORD PTR tv581[ebp]
	movss	DWORD PTR [eax+edx], xmm0

; 268  : 	out[3][2] = -(mat[3][0] * out[0][2] + mat[3][1] * out[1][2] + mat[3][2] * out[2][2]);

	mov	eax, 12					; 0000000cH
	imul	ecx, eax, 3
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector@@QBEPBMXZ			; Vector::operator float const *
	mov	esi, eax
	mov	ecx, 4
	imul	edi, ecx, 0
	push	0
	lea	ecx, DWORD PTR _out$[ebp]
	call	??Amatrix3x4@@QAEPAMH@Z			; matrix3x4::operator[]
	mov	edx, 4
	shl	edx, 1
	movss	xmm0, DWORD PTR [esi+edi]
	mulss	xmm0, DWORD PTR [eax+edx]
	mov	eax, 12					; 0000000cH
	imul	ecx, eax, 3
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv583[ebp], xmm0
	call	??BVector@@QBEPBMXZ			; Vector::operator float const *
	mov	esi, eax
	mov	edi, 4
	shl	edi, 0
	push	1
	lea	ecx, DWORD PTR _out$[ebp]
	call	??Amatrix3x4@@QAEPAMH@Z			; matrix3x4::operator[]
	mov	ecx, 4
	shl	ecx, 1
	movss	xmm0, DWORD PTR [esi+edi]
	mulss	xmm0, DWORD PTR [eax+ecx]
	movss	xmm1, DWORD PTR tv583[ebp]
	addss	xmm1, xmm0
	mov	edx, 12					; 0000000cH
	imul	ecx, edx, 3
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv585[ebp], xmm1
	call	??BVector@@QBEPBMXZ			; Vector::operator float const *
	mov	esi, eax
	mov	edi, 4
	shl	edi, 1
	push	2
	lea	ecx, DWORD PTR _out$[ebp]
	call	??Amatrix3x4@@QAEPAMH@Z			; matrix3x4::operator[]
	mov	ecx, 4
	shl	ecx, 1
	movss	xmm0, DWORD PTR [esi+edi]
	mulss	xmm0, DWORD PTR [eax+ecx]
	movss	xmm1, DWORD PTR tv585[ebp]
	addss	xmm1, xmm0
	xorps	xmm1, DWORD PTR __xmm@80000000800000008000000080000000
	push	3
	lea	ecx, DWORD PTR _out$[ebp]
	movss	DWORD PTR tv587[ebp], xmm1
	call	??Amatrix3x4@@QAEPAMH@Z			; matrix3x4::operator[]
	mov	edx, 4
	shl	edx, 1
	movss	xmm0, DWORD PTR tv587[ebp]
	movss	DWORD PTR [eax+edx], xmm0

; 269  : 
; 270  : 	return out;

	lea	eax, DWORD PTR _out$[ebp]
	push	eax
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0matrix3x4@@QAE@$$QAV0@@Z
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 271  : }

	pop	edi
	pop	esi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	4
?Invert@matrix3x4@@QBE?AV1@XZ ENDP			; matrix3x4::Invert
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xashxt_v0.81_rev.1_with_sources\xashxt_v0.81_rev.1_src\game_shared\matrix.cpp
_TEXT	SEGMENT
_out$ = -52						; size = 12
tv304 = -40						; size = 4
tv302 = -36						; size = 4
tv300 = -32						; size = 4
tv298 = -28						; size = 4
tv296 = -24						; size = 4
tv294 = -20						; size = 4
tv292 = -16						; size = 4
tv290 = -12						; size = 4
tv288 = -8						; size = 4
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
_v$ = 12						; size = 4
?VectorIRotate@matrix3x4@@QBE?AVVector@@ABV2@@Z PROC	; matrix3x4::VectorIRotate
; _this$ = ecx

; 192  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 52					; 00000034H
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 193  : 	Vector out;

	lea	ecx, DWORD PTR _out$[ebp]
	call	??0Vector@@QAE@XZ			; Vector::Vector

; 194  : 
; 195  : 	out[0] = v[0] * mat[0][0] + v[1] * mat[0][1] + v[2] * mat[0][2];

	mov	ecx, DWORD PTR _v$[ebp]
	call	??BVector@@QBEPBMXZ			; Vector::operator float const *
	mov	esi, eax
	mov	eax, 4
	imul	edi, eax, 0
	mov	ecx, 12					; 0000000cH
	imul	ecx, ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector@@QBEPBMXZ			; Vector::operator float const *
	mov	edx, 4
	imul	ecx, edx, 0
	movss	xmm0, DWORD PTR [esi+edi]
	mulss	xmm0, DWORD PTR [eax+ecx]
	mov	ecx, DWORD PTR _v$[ebp]
	movss	DWORD PTR tv288[ebp], xmm0
	call	??BVector@@QBEPBMXZ			; Vector::operator float const *
	mov	esi, eax
	mov	edi, 4
	shl	edi, 0
	mov	edx, 12					; 0000000cH
	imul	ecx, edx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector@@QBEPBMXZ			; Vector::operator float const *
	mov	ecx, 4
	shl	ecx, 0
	movss	xmm0, DWORD PTR [esi+edi]
	mulss	xmm0, DWORD PTR [eax+ecx]
	movss	xmm1, DWORD PTR tv288[ebp]
	addss	xmm1, xmm0
	mov	ecx, DWORD PTR _v$[ebp]
	movss	DWORD PTR tv290[ebp], xmm1
	call	??BVector@@QBEPBMXZ			; Vector::operator float const *
	mov	esi, eax
	mov	edi, 4
	shl	edi, 1
	mov	edx, 12					; 0000000cH
	imul	ecx, edx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector@@QBEPBMXZ			; Vector::operator float const *
	mov	ecx, 4
	shl	ecx, 1
	movss	xmm0, DWORD PTR [esi+edi]
	mulss	xmm0, DWORD PTR [eax+ecx]
	movss	xmm1, DWORD PTR tv290[ebp]
	addss	xmm1, xmm0
	lea	ecx, DWORD PTR _out$[ebp]
	movss	DWORD PTR tv292[ebp], xmm1
	call	??BVector@@QAEPAMXZ			; Vector::operator float *
	mov	edx, 4
	imul	ecx, edx, 0
	movss	xmm0, DWORD PTR tv292[ebp]
	movss	DWORD PTR [eax+ecx], xmm0

; 196  : 	out[1] = v[0] * mat[1][0] + v[1] * mat[1][1] + v[2] * mat[1][2];

	mov	ecx, DWORD PTR _v$[ebp]
	call	??BVector@@QBEPBMXZ			; Vector::operator float const *
	mov	esi, eax
	mov	edx, 4
	imul	edi, edx, 0
	mov	ecx, 12					; 0000000cH
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector@@QBEPBMXZ			; Vector::operator float const *
	mov	ecx, 4
	imul	edx, ecx, 0
	movss	xmm0, DWORD PTR [esi+edi]
	mulss	xmm0, DWORD PTR [eax+edx]
	mov	ecx, DWORD PTR _v$[ebp]
	movss	DWORD PTR tv294[ebp], xmm0
	call	??BVector@@QBEPBMXZ			; Vector::operator float const *
	mov	esi, eax
	mov	edi, 4
	shl	edi, 0
	mov	ecx, 12					; 0000000cH
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector@@QBEPBMXZ			; Vector::operator float const *
	mov	ecx, 4
	shl	ecx, 0
	movss	xmm0, DWORD PTR [esi+edi]
	mulss	xmm0, DWORD PTR [eax+ecx]
	movss	xmm1, DWORD PTR tv294[ebp]
	addss	xmm1, xmm0
	mov	ecx, DWORD PTR _v$[ebp]
	movss	DWORD PTR tv296[ebp], xmm1
	call	??BVector@@QBEPBMXZ			; Vector::operator float const *
	mov	esi, eax
	mov	edi, 4
	shl	edi, 1
	mov	ecx, 12					; 0000000cH
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector@@QBEPBMXZ			; Vector::operator float const *
	mov	edx, 4
	shl	edx, 1
	movss	xmm0, DWORD PTR [esi+edi]
	mulss	xmm0, DWORD PTR [eax+edx]
	movss	xmm1, DWORD PTR tv296[ebp]
	addss	xmm1, xmm0
	lea	ecx, DWORD PTR _out$[ebp]
	movss	DWORD PTR tv298[ebp], xmm1
	call	??BVector@@QAEPAMXZ			; Vector::operator float *
	mov	ecx, 4
	shl	ecx, 0
	movss	xmm0, DWORD PTR tv298[ebp]
	movss	DWORD PTR [eax+ecx], xmm0

; 197  : 	out[2] = v[0] * mat[2][0] + v[1] * mat[2][1] + v[2] * mat[2][2];

	mov	ecx, DWORD PTR _v$[ebp]
	call	??BVector@@QBEPBMXZ			; Vector::operator float const *
	mov	esi, eax
	mov	edx, 4
	imul	edi, edx, 0
	mov	ecx, 12					; 0000000cH
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector@@QBEPBMXZ			; Vector::operator float const *
	mov	ecx, 4
	imul	edx, ecx, 0
	movss	xmm0, DWORD PTR [esi+edi]
	mulss	xmm0, DWORD PTR [eax+edx]
	mov	ecx, DWORD PTR _v$[ebp]
	movss	DWORD PTR tv300[ebp], xmm0
	call	??BVector@@QBEPBMXZ			; Vector::operator float const *
	mov	esi, eax
	mov	edi, 4
	shl	edi, 0
	mov	ecx, 12					; 0000000cH
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector@@QBEPBMXZ			; Vector::operator float const *
	mov	ecx, 4
	shl	ecx, 0
	movss	xmm0, DWORD PTR [esi+edi]
	mulss	xmm0, DWORD PTR [eax+ecx]
	movss	xmm1, DWORD PTR tv300[ebp]
	addss	xmm1, xmm0
	mov	ecx, DWORD PTR _v$[ebp]
	movss	DWORD PTR tv302[ebp], xmm1
	call	??BVector@@QBEPBMXZ			; Vector::operator float const *
	mov	esi, eax
	mov	edi, 4
	shl	edi, 1
	mov	ecx, 12					; 0000000cH
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector@@QBEPBMXZ			; Vector::operator float const *
	mov	edx, 4
	shl	edx, 1
	movss	xmm0, DWORD PTR [esi+edi]
	mulss	xmm0, DWORD PTR [eax+edx]
	movss	xmm1, DWORD PTR tv302[ebp]
	addss	xmm1, xmm0
	lea	ecx, DWORD PTR _out$[ebp]
	movss	DWORD PTR tv304[ebp], xmm1
	call	??BVector@@QAEPAMXZ			; Vector::operator float *
	mov	ecx, 4
	shl	ecx, 1
	movss	xmm0, DWORD PTR tv304[ebp]
	movss	DWORD PTR [eax+ecx], xmm0

; 198  : 
; 199  : 	return out;

	lea	edx, DWORD PTR _out$[ebp]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0Vector@@QAE@ABV0@@Z			; Vector::Vector
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 200  : }

	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	8
?VectorIRotate@matrix3x4@@QBE?AVVector@@ABV2@@Z ENDP	; matrix3x4::VectorIRotate
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xashxt_v0.81_rev.1_with_sources\xashxt_v0.81_rev.1_src\game_shared\matrix.cpp
_TEXT	SEGMENT
_out$ = -52						; size = 12
tv304 = -40						; size = 4
tv302 = -36						; size = 4
tv300 = -32						; size = 4
tv298 = -28						; size = 4
tv296 = -24						; size = 4
tv294 = -20						; size = 4
tv292 = -16						; size = 4
tv290 = -12						; size = 4
tv288 = -8						; size = 4
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
_v$ = 12						; size = 4
?VectorRotate@matrix3x4@@QBE?AVVector@@ABV2@@Z PROC	; matrix3x4::VectorRotate
; _this$ = ecx

; 181  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 52					; 00000034H
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 182  : 	Vector out;

	lea	ecx, DWORD PTR _out$[ebp]
	call	??0Vector@@QAE@XZ			; Vector::Vector

; 183  : 
; 184  : 	out[0] = v[0] * mat[0][0] + v[1] * mat[1][0] + v[2] * mat[2][0];

	mov	ecx, DWORD PTR _v$[ebp]
	call	??BVector@@QBEPBMXZ			; Vector::operator float const *
	mov	esi, eax
	mov	eax, 4
	imul	edi, eax, 0
	mov	ecx, 12					; 0000000cH
	imul	ecx, ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector@@QBEPBMXZ			; Vector::operator float const *
	mov	edx, 4
	imul	ecx, edx, 0
	movss	xmm0, DWORD PTR [esi+edi]
	mulss	xmm0, DWORD PTR [eax+ecx]
	mov	ecx, DWORD PTR _v$[ebp]
	movss	DWORD PTR tv288[ebp], xmm0
	call	??BVector@@QBEPBMXZ			; Vector::operator float const *
	mov	esi, eax
	mov	edi, 4
	shl	edi, 0
	mov	ecx, 12					; 0000000cH
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector@@QBEPBMXZ			; Vector::operator float const *
	mov	edx, 4
	imul	ecx, edx, 0
	movss	xmm0, DWORD PTR [esi+edi]
	mulss	xmm0, DWORD PTR [eax+ecx]
	movss	xmm1, DWORD PTR tv288[ebp]
	addss	xmm1, xmm0
	mov	ecx, DWORD PTR _v$[ebp]
	movss	DWORD PTR tv290[ebp], xmm1
	call	??BVector@@QBEPBMXZ			; Vector::operator float const *
	mov	esi, eax
	mov	edi, 4
	shl	edi, 1
	mov	ecx, 12					; 0000000cH
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector@@QBEPBMXZ			; Vector::operator float const *
	mov	edx, 4
	imul	ecx, edx, 0
	movss	xmm0, DWORD PTR [esi+edi]
	mulss	xmm0, DWORD PTR [eax+ecx]
	movss	xmm1, DWORD PTR tv290[ebp]
	addss	xmm1, xmm0
	lea	ecx, DWORD PTR _out$[ebp]
	movss	DWORD PTR tv292[ebp], xmm1
	call	??BVector@@QAEPAMXZ			; Vector::operator float *
	mov	edx, 4
	imul	ecx, edx, 0
	movss	xmm0, DWORD PTR tv292[ebp]
	movss	DWORD PTR [eax+ecx], xmm0

; 185  : 	out[1] = v[0] * mat[0][1] + v[1] * mat[1][1] + v[2] * mat[2][1];

	mov	ecx, DWORD PTR _v$[ebp]
	call	??BVector@@QBEPBMXZ			; Vector::operator float const *
	mov	esi, eax
	mov	edx, 4
	imul	edi, edx, 0
	mov	eax, 12					; 0000000cH
	imul	ecx, eax, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector@@QBEPBMXZ			; Vector::operator float const *
	mov	ecx, 4
	shl	ecx, 0
	movss	xmm0, DWORD PTR [esi+edi]
	mulss	xmm0, DWORD PTR [eax+ecx]
	mov	ecx, DWORD PTR _v$[ebp]
	movss	DWORD PTR tv294[ebp], xmm0
	call	??BVector@@QBEPBMXZ			; Vector::operator float const *
	mov	esi, eax
	mov	edi, 4
	shl	edi, 0
	mov	ecx, 12					; 0000000cH
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector@@QBEPBMXZ			; Vector::operator float const *
	mov	edx, 4
	shl	edx, 0
	movss	xmm0, DWORD PTR [esi+edi]
	mulss	xmm0, DWORD PTR [eax+edx]
	movss	xmm1, DWORD PTR tv294[ebp]
	addss	xmm1, xmm0
	mov	ecx, DWORD PTR _v$[ebp]
	movss	DWORD PTR tv296[ebp], xmm1
	call	??BVector@@QBEPBMXZ			; Vector::operator float const *
	mov	esi, eax
	mov	edi, 4
	shl	edi, 1
	mov	ecx, 12					; 0000000cH
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector@@QBEPBMXZ			; Vector::operator float const *
	mov	ecx, 4
	shl	ecx, 0
	movss	xmm0, DWORD PTR [esi+edi]
	mulss	xmm0, DWORD PTR [eax+ecx]
	movss	xmm1, DWORD PTR tv296[ebp]
	addss	xmm1, xmm0
	lea	ecx, DWORD PTR _out$[ebp]
	movss	DWORD PTR tv298[ebp], xmm1
	call	??BVector@@QAEPAMXZ			; Vector::operator float *
	mov	edx, 4
	shl	edx, 0
	movss	xmm0, DWORD PTR tv298[ebp]
	movss	DWORD PTR [eax+edx], xmm0

; 186  : 	out[2] = v[0] * mat[0][2] + v[1] * mat[1][2] + v[2] * mat[2][2];

	mov	ecx, DWORD PTR _v$[ebp]
	call	??BVector@@QBEPBMXZ			; Vector::operator float const *
	mov	esi, eax
	mov	eax, 4
	imul	edi, eax, 0
	mov	ecx, 12					; 0000000cH
	imul	ecx, ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector@@QBEPBMXZ			; Vector::operator float const *
	mov	edx, 4
	shl	edx, 1
	movss	xmm0, DWORD PTR [esi+edi]
	mulss	xmm0, DWORD PTR [eax+edx]
	mov	ecx, DWORD PTR _v$[ebp]
	movss	DWORD PTR tv300[ebp], xmm0
	call	??BVector@@QBEPBMXZ			; Vector::operator float const *
	mov	esi, eax
	mov	edi, 4
	shl	edi, 0
	mov	ecx, 12					; 0000000cH
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector@@QBEPBMXZ			; Vector::operator float const *
	mov	ecx, 4
	shl	ecx, 1
	movss	xmm0, DWORD PTR [esi+edi]
	mulss	xmm0, DWORD PTR [eax+ecx]
	movss	xmm1, DWORD PTR tv300[ebp]
	addss	xmm1, xmm0
	mov	ecx, DWORD PTR _v$[ebp]
	movss	DWORD PTR tv302[ebp], xmm1
	call	??BVector@@QBEPBMXZ			; Vector::operator float const *
	mov	esi, eax
	mov	edi, 4
	shl	edi, 1
	mov	ecx, 12					; 0000000cH
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector@@QBEPBMXZ			; Vector::operator float const *
	mov	edx, 4
	shl	edx, 1
	movss	xmm0, DWORD PTR [esi+edi]
	mulss	xmm0, DWORD PTR [eax+edx]
	movss	xmm1, DWORD PTR tv302[ebp]
	addss	xmm1, xmm0
	lea	ecx, DWORD PTR _out$[ebp]
	movss	DWORD PTR tv304[ebp], xmm1
	call	??BVector@@QAEPAMXZ			; Vector::operator float *
	mov	ecx, 4
	shl	ecx, 1
	movss	xmm0, DWORD PTR tv304[ebp]
	movss	DWORD PTR [eax+ecx], xmm0

; 187  : 
; 188  : 	return out;

	lea	edx, DWORD PTR _out$[ebp]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0Vector@@QAE@ABV0@@Z			; Vector::Vector
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 189  : }

	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	8
?VectorRotate@matrix3x4@@QBE?AVVector@@ABV2@@Z ENDP	; matrix3x4::VectorRotate
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xashxt_v0.81_rev.1_with_sources\xashxt_v0.81_rev.1_src\game_shared\matrix.cpp
_TEXT	SEGMENT
_out$ = -76						; size = 12
_iv$ = -64						; size = 12
tv383 = -52						; size = 4
tv381 = -48						; size = 4
tv379 = -44						; size = 4
tv377 = -40						; size = 4
tv375 = -36						; size = 4
tv373 = -32						; size = 4
tv371 = -28						; size = 4
tv369 = -24						; size = 4
tv367 = -20						; size = 4
tv365 = -16						; size = 4
tv363 = -12						; size = 4
tv361 = -8						; size = 4
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
_v$ = 12						; size = 4
?VectorITransform@matrix3x4@@QBE?AVVector@@ABV2@@Z PROC	; matrix3x4::VectorITransform
; _this$ = ecx

; 166  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 76					; 0000004cH
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 167  : 	Vector iv, out;

	lea	ecx, DWORD PTR _iv$[ebp]
	call	??0Vector@@QAE@XZ			; Vector::Vector
	lea	ecx, DWORD PTR _out$[ebp]
	call	??0Vector@@QAE@XZ			; Vector::Vector

; 168  : 
; 169  : 	iv[0] = v[0] - mat[3][0];

	mov	ecx, DWORD PTR _v$[ebp]
	call	??BVector@@QBEPBMXZ			; Vector::operator float const *
	mov	esi, eax
	mov	eax, 4
	imul	edi, eax, 0
	mov	ecx, 12					; 0000000cH
	imul	ecx, ecx, 3
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector@@QBEPBMXZ			; Vector::operator float const *
	mov	edx, 4
	imul	ecx, edx, 0
	movss	xmm0, DWORD PTR [esi+edi]
	subss	xmm0, DWORD PTR [eax+ecx]
	lea	ecx, DWORD PTR _iv$[ebp]
	movss	DWORD PTR tv361[ebp], xmm0
	call	??BVector@@QAEPAMXZ			; Vector::operator float *
	mov	edx, 4
	imul	ecx, edx, 0
	movss	xmm0, DWORD PTR tv361[ebp]
	movss	DWORD PTR [eax+ecx], xmm0

; 170  : 	iv[1] = v[1] - mat[3][1];

	mov	ecx, DWORD PTR _v$[ebp]
	call	??BVector@@QBEPBMXZ			; Vector::operator float const *
	mov	esi, eax
	mov	edi, 4
	shl	edi, 0
	mov	edx, 12					; 0000000cH
	imul	ecx, edx, 3
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector@@QBEPBMXZ			; Vector::operator float const *
	mov	ecx, 4
	shl	ecx, 0
	movss	xmm0, DWORD PTR [esi+edi]
	subss	xmm0, DWORD PTR [eax+ecx]
	lea	ecx, DWORD PTR _iv$[ebp]
	movss	DWORD PTR tv363[ebp], xmm0
	call	??BVector@@QAEPAMXZ			; Vector::operator float *
	mov	edx, 4
	shl	edx, 0
	movss	xmm0, DWORD PTR tv363[ebp]
	movss	DWORD PTR [eax+edx], xmm0

; 171  : 	iv[2] = v[2] - mat[3][2];

	mov	ecx, DWORD PTR _v$[ebp]
	call	??BVector@@QBEPBMXZ			; Vector::operator float const *
	mov	esi, eax
	mov	edi, 4
	shl	edi, 1
	mov	eax, 12					; 0000000cH
	imul	ecx, eax, 3
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector@@QBEPBMXZ			; Vector::operator float const *
	mov	ecx, 4
	shl	ecx, 1
	movss	xmm0, DWORD PTR [esi+edi]
	subss	xmm0, DWORD PTR [eax+ecx]
	lea	ecx, DWORD PTR _iv$[ebp]
	movss	DWORD PTR tv365[ebp], xmm0
	call	??BVector@@QAEPAMXZ			; Vector::operator float *
	mov	edx, 4
	shl	edx, 1
	movss	xmm0, DWORD PTR tv365[ebp]
	movss	DWORD PTR [eax+edx], xmm0

; 172  : 
; 173  : 	out[0] = iv[0] * mat[0][0] + iv[1] * mat[0][1] + iv[2] * mat[0][2];

	lea	ecx, DWORD PTR _iv$[ebp]
	call	??BVector@@QAEPAMXZ			; Vector::operator float *
	mov	esi, eax
	mov	eax, 4
	imul	edi, eax, 0
	mov	ecx, 12					; 0000000cH
	imul	ecx, ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector@@QBEPBMXZ			; Vector::operator float const *
	mov	edx, 4
	imul	ecx, edx, 0
	movss	xmm0, DWORD PTR [esi+edi]
	mulss	xmm0, DWORD PTR [eax+ecx]
	lea	ecx, DWORD PTR _iv$[ebp]
	movss	DWORD PTR tv367[ebp], xmm0
	call	??BVector@@QAEPAMXZ			; Vector::operator float *
	mov	esi, eax
	mov	edi, 4
	shl	edi, 0
	mov	edx, 12					; 0000000cH
	imul	ecx, edx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector@@QBEPBMXZ			; Vector::operator float const *
	mov	ecx, 4
	shl	ecx, 0
	movss	xmm0, DWORD PTR [esi+edi]
	mulss	xmm0, DWORD PTR [eax+ecx]
	movss	xmm1, DWORD PTR tv367[ebp]
	addss	xmm1, xmm0
	lea	ecx, DWORD PTR _iv$[ebp]
	movss	DWORD PTR tv369[ebp], xmm1
	call	??BVector@@QAEPAMXZ			; Vector::operator float *
	mov	esi, eax
	mov	edi, 4
	shl	edi, 1
	mov	edx, 12					; 0000000cH
	imul	ecx, edx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector@@QBEPBMXZ			; Vector::operator float const *
	mov	ecx, 4
	shl	ecx, 1
	movss	xmm0, DWORD PTR [esi+edi]
	mulss	xmm0, DWORD PTR [eax+ecx]
	movss	xmm1, DWORD PTR tv369[ebp]
	addss	xmm1, xmm0
	lea	ecx, DWORD PTR _out$[ebp]
	movss	DWORD PTR tv371[ebp], xmm1
	call	??BVector@@QAEPAMXZ			; Vector::operator float *
	mov	edx, 4
	imul	ecx, edx, 0
	movss	xmm0, DWORD PTR tv371[ebp]
	movss	DWORD PTR [eax+ecx], xmm0

; 174  : 	out[1] = iv[0] * mat[1][0] + iv[1] * mat[1][1] + iv[2] * mat[1][2];

	lea	ecx, DWORD PTR _iv$[ebp]
	call	??BVector@@QAEPAMXZ			; Vector::operator float *
	mov	esi, eax
	mov	edx, 4
	imul	edi, edx, 0
	mov	ecx, 12					; 0000000cH
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector@@QBEPBMXZ			; Vector::operator float const *
	mov	ecx, 4
	imul	edx, ecx, 0
	movss	xmm0, DWORD PTR [esi+edi]
	mulss	xmm0, DWORD PTR [eax+edx]
	lea	ecx, DWORD PTR _iv$[ebp]
	movss	DWORD PTR tv373[ebp], xmm0
	call	??BVector@@QAEPAMXZ			; Vector::operator float *
	mov	esi, eax
	mov	edi, 4
	shl	edi, 0
	mov	ecx, 12					; 0000000cH
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector@@QBEPBMXZ			; Vector::operator float const *
	mov	ecx, 4
	shl	ecx, 0
	movss	xmm0, DWORD PTR [esi+edi]
	mulss	xmm0, DWORD PTR [eax+ecx]
	movss	xmm1, DWORD PTR tv373[ebp]
	addss	xmm1, xmm0
	lea	ecx, DWORD PTR _iv$[ebp]
	movss	DWORD PTR tv375[ebp], xmm1
	call	??BVector@@QAEPAMXZ			; Vector::operator float *
	mov	esi, eax
	mov	edi, 4
	shl	edi, 1
	mov	ecx, 12					; 0000000cH
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector@@QBEPBMXZ			; Vector::operator float const *
	mov	edx, 4
	shl	edx, 1
	movss	xmm0, DWORD PTR [esi+edi]
	mulss	xmm0, DWORD PTR [eax+edx]
	movss	xmm1, DWORD PTR tv375[ebp]
	addss	xmm1, xmm0
	lea	ecx, DWORD PTR _out$[ebp]
	movss	DWORD PTR tv377[ebp], xmm1
	call	??BVector@@QAEPAMXZ			; Vector::operator float *
	mov	ecx, 4
	shl	ecx, 0
	movss	xmm0, DWORD PTR tv377[ebp]
	movss	DWORD PTR [eax+ecx], xmm0

; 175  : 	out[2] = iv[0] * mat[2][0] + iv[1] * mat[2][1] + iv[2] * mat[2][2];

	lea	ecx, DWORD PTR _iv$[ebp]
	call	??BVector@@QAEPAMXZ			; Vector::operator float *
	mov	esi, eax
	mov	edx, 4
	imul	edi, edx, 0
	mov	ecx, 12					; 0000000cH
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector@@QBEPBMXZ			; Vector::operator float const *
	mov	ecx, 4
	imul	edx, ecx, 0
	movss	xmm0, DWORD PTR [esi+edi]
	mulss	xmm0, DWORD PTR [eax+edx]
	lea	ecx, DWORD PTR _iv$[ebp]
	movss	DWORD PTR tv379[ebp], xmm0
	call	??BVector@@QAEPAMXZ			; Vector::operator float *
	mov	esi, eax
	mov	edi, 4
	shl	edi, 0
	mov	ecx, 12					; 0000000cH
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector@@QBEPBMXZ			; Vector::operator float const *
	mov	ecx, 4
	shl	ecx, 0
	movss	xmm0, DWORD PTR [esi+edi]
	mulss	xmm0, DWORD PTR [eax+ecx]
	movss	xmm1, DWORD PTR tv379[ebp]
	addss	xmm1, xmm0
	lea	ecx, DWORD PTR _iv$[ebp]
	movss	DWORD PTR tv381[ebp], xmm1
	call	??BVector@@QAEPAMXZ			; Vector::operator float *
	mov	esi, eax
	mov	edi, 4
	shl	edi, 1
	mov	ecx, 12					; 0000000cH
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector@@QBEPBMXZ			; Vector::operator float const *
	mov	edx, 4
	shl	edx, 1
	movss	xmm0, DWORD PTR [esi+edi]
	mulss	xmm0, DWORD PTR [eax+edx]
	movss	xmm1, DWORD PTR tv381[ebp]
	addss	xmm1, xmm0
	lea	ecx, DWORD PTR _out$[ebp]
	movss	DWORD PTR tv383[ebp], xmm1
	call	??BVector@@QAEPAMXZ			; Vector::operator float *
	mov	ecx, 4
	shl	ecx, 1
	movss	xmm0, DWORD PTR tv383[ebp]
	movss	DWORD PTR [eax+ecx], xmm0

; 176  : 
; 177  : 	return out;

	lea	edx, DWORD PTR _out$[ebp]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0Vector@@QAE@ABV0@@Z			; Vector::Vector
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 178  : }

	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	8
?VectorITransform@matrix3x4@@QBE?AVVector@@ABV2@@Z ENDP	; matrix3x4::VectorITransform
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xashxt_v0.81_rev.1_with_sources\xashxt_v0.81_rev.1_src\game_shared\matrix.cpp
_TEXT	SEGMENT
_out$ = -64						; size = 12
tv343 = -52						; size = 4
tv341 = -48						; size = 4
tv339 = -44						; size = 4
tv337 = -40						; size = 4
tv335 = -36						; size = 4
tv333 = -32						; size = 4
tv331 = -28						; size = 4
tv329 = -24						; size = 4
tv327 = -20						; size = 4
tv325 = -16						; size = 4
tv323 = -12						; size = 4
tv321 = -8						; size = 4
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
_v$ = 12						; size = 4
?VectorTransform@matrix3x4@@QBE?AVVector@@ABV2@@Z PROC	; matrix3x4::VectorTransform
; _this$ = ecx

; 155  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 156  : 	Vector out;

	lea	ecx, DWORD PTR _out$[ebp]
	call	??0Vector@@QAE@XZ			; Vector::Vector

; 157  : 
; 158  : 	out[0] = v[0] * mat[0][0] + v[1] * mat[1][0] + v[2] * mat[2][0] + mat[3][0];

	mov	ecx, DWORD PTR _v$[ebp]
	call	??BVector@@QBEPBMXZ			; Vector::operator float const *
	mov	esi, eax
	mov	eax, 4
	imul	edi, eax, 0
	mov	ecx, 12					; 0000000cH
	imul	ecx, ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector@@QBEPBMXZ			; Vector::operator float const *
	mov	edx, 4
	imul	ecx, edx, 0
	movss	xmm0, DWORD PTR [esi+edi]
	mulss	xmm0, DWORD PTR [eax+ecx]
	mov	ecx, DWORD PTR _v$[ebp]
	movss	DWORD PTR tv321[ebp], xmm0
	call	??BVector@@QBEPBMXZ			; Vector::operator float const *
	mov	esi, eax
	mov	edi, 4
	shl	edi, 0
	mov	ecx, 12					; 0000000cH
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector@@QBEPBMXZ			; Vector::operator float const *
	mov	edx, 4
	imul	ecx, edx, 0
	movss	xmm0, DWORD PTR [esi+edi]
	mulss	xmm0, DWORD PTR [eax+ecx]
	movss	xmm1, DWORD PTR tv321[ebp]
	addss	xmm1, xmm0
	mov	ecx, DWORD PTR _v$[ebp]
	movss	DWORD PTR tv323[ebp], xmm1
	call	??BVector@@QBEPBMXZ			; Vector::operator float const *
	mov	esi, eax
	mov	edi, 4
	shl	edi, 1
	mov	ecx, 12					; 0000000cH
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector@@QBEPBMXZ			; Vector::operator float const *
	mov	edx, 4
	imul	ecx, edx, 0
	movss	xmm0, DWORD PTR [esi+edi]
	mulss	xmm0, DWORD PTR [eax+ecx]
	movss	xmm1, DWORD PTR tv323[ebp]
	addss	xmm1, xmm0
	mov	edx, 12					; 0000000cH
	imul	ecx, edx, 3
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv325[ebp], xmm1
	call	??BVector@@QBEPBMXZ			; Vector::operator float const *
	mov	ecx, 4
	imul	edx, ecx, 0
	movss	xmm0, DWORD PTR tv325[ebp]
	addss	xmm0, DWORD PTR [eax+edx]
	lea	ecx, DWORD PTR _out$[ebp]
	movss	DWORD PTR tv327[ebp], xmm0
	call	??BVector@@QAEPAMXZ			; Vector::operator float *
	mov	ecx, 4
	imul	edx, ecx, 0
	movss	xmm0, DWORD PTR tv327[ebp]
	movss	DWORD PTR [eax+edx], xmm0

; 159  : 	out[1] = v[0] * mat[0][1] + v[1] * mat[1][1] + v[2] * mat[2][1] + mat[3][1];

	mov	ecx, DWORD PTR _v$[ebp]
	call	??BVector@@QBEPBMXZ			; Vector::operator float const *
	mov	esi, eax
	mov	eax, 4
	imul	edi, eax, 0
	mov	ecx, 12					; 0000000cH
	imul	ecx, ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector@@QBEPBMXZ			; Vector::operator float const *
	mov	edx, 4
	shl	edx, 0
	movss	xmm0, DWORD PTR [esi+edi]
	mulss	xmm0, DWORD PTR [eax+edx]
	mov	ecx, DWORD PTR _v$[ebp]
	movss	DWORD PTR tv329[ebp], xmm0
	call	??BVector@@QBEPBMXZ			; Vector::operator float const *
	mov	esi, eax
	mov	edi, 4
	shl	edi, 0
	mov	ecx, 12					; 0000000cH
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector@@QBEPBMXZ			; Vector::operator float const *
	mov	ecx, 4
	shl	ecx, 0
	movss	xmm0, DWORD PTR [esi+edi]
	mulss	xmm0, DWORD PTR [eax+ecx]
	movss	xmm1, DWORD PTR tv329[ebp]
	addss	xmm1, xmm0
	mov	ecx, DWORD PTR _v$[ebp]
	movss	DWORD PTR tv331[ebp], xmm1
	call	??BVector@@QBEPBMXZ			; Vector::operator float const *
	mov	esi, eax
	mov	edi, 4
	shl	edi, 1
	mov	ecx, 12					; 0000000cH
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector@@QBEPBMXZ			; Vector::operator float const *
	mov	edx, 4
	shl	edx, 0
	movss	xmm0, DWORD PTR [esi+edi]
	mulss	xmm0, DWORD PTR [eax+edx]
	movss	xmm1, DWORD PTR tv331[ebp]
	addss	xmm1, xmm0
	mov	eax, 12					; 0000000cH
	imul	ecx, eax, 3
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv333[ebp], xmm1
	call	??BVector@@QBEPBMXZ			; Vector::operator float const *
	mov	ecx, 4
	shl	ecx, 0
	movss	xmm0, DWORD PTR tv333[ebp]
	addss	xmm0, DWORD PTR [eax+ecx]
	lea	ecx, DWORD PTR _out$[ebp]
	movss	DWORD PTR tv335[ebp], xmm0
	call	??BVector@@QAEPAMXZ			; Vector::operator float *
	mov	edx, 4
	shl	edx, 0
	movss	xmm0, DWORD PTR tv335[ebp]
	movss	DWORD PTR [eax+edx], xmm0

; 160  : 	out[2] = v[0] * mat[0][2] + v[1] * mat[1][2] + v[2] * mat[2][2] + mat[3][2];

	mov	ecx, DWORD PTR _v$[ebp]
	call	??BVector@@QBEPBMXZ			; Vector::operator float const *
	mov	esi, eax
	mov	eax, 4
	imul	edi, eax, 0
	mov	ecx, 12					; 0000000cH
	imul	ecx, ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector@@QBEPBMXZ			; Vector::operator float const *
	mov	edx, 4
	shl	edx, 1
	movss	xmm0, DWORD PTR [esi+edi]
	mulss	xmm0, DWORD PTR [eax+edx]
	mov	ecx, DWORD PTR _v$[ebp]
	movss	DWORD PTR tv337[ebp], xmm0
	call	??BVector@@QBEPBMXZ			; Vector::operator float const *
	mov	esi, eax
	mov	edi, 4
	shl	edi, 0
	mov	ecx, 12					; 0000000cH
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector@@QBEPBMXZ			; Vector::operator float const *
	mov	ecx, 4
	shl	ecx, 1
	movss	xmm0, DWORD PTR [esi+edi]
	mulss	xmm0, DWORD PTR [eax+ecx]
	movss	xmm1, DWORD PTR tv337[ebp]
	addss	xmm1, xmm0
	mov	ecx, DWORD PTR _v$[ebp]
	movss	DWORD PTR tv339[ebp], xmm1
	call	??BVector@@QBEPBMXZ			; Vector::operator float const *
	mov	esi, eax
	mov	edi, 4
	shl	edi, 1
	mov	ecx, 12					; 0000000cH
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector@@QBEPBMXZ			; Vector::operator float const *
	mov	edx, 4
	shl	edx, 1
	movss	xmm0, DWORD PTR [esi+edi]
	mulss	xmm0, DWORD PTR [eax+edx]
	movss	xmm1, DWORD PTR tv339[ebp]
	addss	xmm1, xmm0
	mov	eax, 12					; 0000000cH
	imul	ecx, eax, 3
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv341[ebp], xmm1
	call	??BVector@@QBEPBMXZ			; Vector::operator float const *
	mov	ecx, 4
	shl	ecx, 1
	movss	xmm0, DWORD PTR tv341[ebp]
	addss	xmm0, DWORD PTR [eax+ecx]
	lea	ecx, DWORD PTR _out$[ebp]
	movss	DWORD PTR tv343[ebp], xmm0
	call	??BVector@@QAEPAMXZ			; Vector::operator float *
	mov	edx, 4
	shl	edx, 1
	movss	xmm0, DWORD PTR tv343[ebp]
	movss	DWORD PTR [eax+edx], xmm0

; 161  : 
; 162  : 	return out;

	lea	eax, DWORD PTR _out$[ebp]
	push	eax
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0Vector@@QAE@ABV0@@Z			; Vector::Vector
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 163  : }

	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	8
?VectorTransform@matrix3x4@@QBE?AVVector@@ABV2@@Z ENDP	; matrix3x4::VectorTransform
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xashxt_v0.81_rev.1_with_sources\xashxt_v0.81_rev.1_src\game_shared\matrix.cpp
_TEXT	SEGMENT
tv741 = -148						; size = 4
tv771 = -144						; size = 4
tv769 = -140						; size = 4
tv767 = -136						; size = 4
tv765 = -132						; size = 4
tv763 = -128						; size = 4
tv761 = -124						; size = 4
tv759 = -120						; size = 4
tv757 = -116						; size = 4
tv755 = -112						; size = 4
tv753 = -108						; size = 4
tv751 = -104						; size = 4
tv749 = -100						; size = 4
tv747 = -96						; size = 4
tv745 = -92						; size = 4
tv743 = -88						; size = 4
tv739 = -84						; size = 4
tv737 = -80						; size = 4
tv735 = -76						; size = 4
tv733 = -72						; size = 4
tv731 = -68						; size = 4
tv729 = -64						; size = 4
tv727 = -60						; size = 4
_r$1 = -56						; size = 4
_r$2 = -52						; size = 4
_r$3 = -48						; size = 4
_r$4 = -44						; size = 4
_trace$ = -40						; size = 4
_inv$5 = -36						; size = 4
_inv$6 = -32						; size = 4
_inv$7 = -28						; size = 4
_inv$8 = -24						; size = 4
_quat$ = -20						; size = 16
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?GetQuaternion@matrix3x4@@QAE?AVVector4D@@XZ PROC	; matrix3x4::GetQuaternion
; _this$ = ecx

; 203  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 148				; 00000094H
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 204  : 	float trace = mat[0][0] + mat[1][1] + mat[2][2];

	mov	eax, 12					; 0000000cH
	imul	ecx, eax, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector@@QAEPAMXZ			; Vector::operator float *
	mov	esi, eax
	mov	ecx, 4
	imul	edi, ecx, 0
	mov	ecx, 12					; 0000000cH
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector@@QAEPAMXZ			; Vector::operator float *
	mov	edx, 4
	shl	edx, 0
	movss	xmm0, DWORD PTR [esi+edi]
	addss	xmm0, DWORD PTR [eax+edx]
	mov	ecx, 12					; 0000000cH
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv727[ebp], xmm0
	call	??BVector@@QAEPAMXZ			; Vector::operator float *
	mov	ecx, 4
	shl	ecx, 1
	movss	xmm0, DWORD PTR tv727[ebp]
	addss	xmm0, DWORD PTR [eax+ecx]
	movss	DWORD PTR _trace$[ebp], xmm0

; 205  : 	Vector4D quat;

	lea	ecx, DWORD PTR _quat$[ebp]
	call	??0Vector4D@@QAE@XZ			; Vector4D::Vector4D

; 206  : 
; 207  : 	if( trace > 0.0f )

	movss	xmm0, DWORD PTR _trace$[ebp]
	comiss	xmm0, DWORD PTR __real@00000000
	jbe	$LN2@GetQuatern

; 208  : 	{
; 209  : 		float r = sqrt(1.0f + trace), inv = 0.5f / r;

	movss	xmm0, DWORD PTR __real@3f800000
	addss	xmm0, DWORD PTR _trace$[ebp]
	cvtss2sd xmm0, xmm0
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	call	_sqrt
	add	esp, 8
	fstp	DWORD PTR _r$4[ebp]
	movss	xmm0, DWORD PTR __real@3f000000
	divss	xmm0, DWORD PTR _r$4[ebp]
	movss	DWORD PTR _inv$8[ebp], xmm0

; 210  : 		quat[0] = (mat[1][2] - mat[2][1]) * inv;

	mov	ecx, 12					; 0000000cH
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector@@QAEPAMXZ			; Vector::operator float *
	mov	esi, eax
	mov	edi, 4
	shl	edi, 1
	mov	ecx, 12					; 0000000cH
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector@@QAEPAMXZ			; Vector::operator float *
	mov	edx, 4
	shl	edx, 0
	movss	xmm0, DWORD PTR [esi+edi]
	subss	xmm0, DWORD PTR [eax+edx]
	mulss	xmm0, DWORD PTR _inv$8[ebp]
	lea	ecx, DWORD PTR _quat$[ebp]
	movss	DWORD PTR tv729[ebp], xmm0
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	ecx, 4
	imul	edx, ecx, 0
	movss	xmm0, DWORD PTR tv729[ebp]
	movss	DWORD PTR [eax+edx], xmm0

; 211  : 		quat[1] = (mat[2][0] - mat[0][2]) * inv;

	mov	ecx, 12					; 0000000cH
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector@@QAEPAMXZ			; Vector::operator float *
	mov	esi, eax
	mov	eax, 4
	imul	edi, eax, 0
	mov	ecx, 12					; 0000000cH
	imul	ecx, ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector@@QAEPAMXZ			; Vector::operator float *
	mov	edx, 4
	shl	edx, 1
	movss	xmm0, DWORD PTR [esi+edi]
	subss	xmm0, DWORD PTR [eax+edx]
	mulss	xmm0, DWORD PTR _inv$8[ebp]
	lea	ecx, DWORD PTR _quat$[ebp]
	movss	DWORD PTR tv731[ebp], xmm0
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	ecx, 4
	shl	ecx, 0
	movss	xmm0, DWORD PTR tv731[ebp]
	movss	DWORD PTR [eax+ecx], xmm0

; 212  : 		quat[2] = (mat[0][1] - mat[1][0]) * inv;

	mov	edx, 12					; 0000000cH
	imul	ecx, edx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector@@QAEPAMXZ			; Vector::operator float *
	mov	esi, eax
	mov	edi, 4
	shl	edi, 0
	mov	ecx, 12					; 0000000cH
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector@@QAEPAMXZ			; Vector::operator float *
	mov	ecx, 4
	imul	edx, ecx, 0
	movss	xmm0, DWORD PTR [esi+edi]
	subss	xmm0, DWORD PTR [eax+edx]
	mulss	xmm0, DWORD PTR _inv$8[ebp]
	lea	ecx, DWORD PTR _quat$[ebp]
	movss	DWORD PTR tv733[ebp], xmm0
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	ecx, 4
	shl	ecx, 1
	movss	xmm0, DWORD PTR tv733[ebp]
	movss	DWORD PTR [eax+ecx], xmm0

; 213  : 		quat[3] = 0.5f * r;

	movss	xmm0, DWORD PTR __real@3f000000
	mulss	xmm0, DWORD PTR _r$4[ebp]
	lea	ecx, DWORD PTR _quat$[ebp]
	movss	DWORD PTR tv735[ebp], xmm0
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	edx, 4
	imul	ecx, edx, 3
	movss	xmm0, DWORD PTR tv735[ebp]
	movss	DWORD PTR [eax+ecx], xmm0
	jmp	$LN7@GetQuatern
$LN2@GetQuatern:

; 214  : 	}
; 215  : 	else if( mat[0][0] > mat[1][1] && mat[0][0] > mat[2][2] )

	mov	edx, 12					; 0000000cH
	imul	ecx, edx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector@@QAEPAMXZ			; Vector::operator float *
	mov	esi, eax
	mov	eax, 4
	imul	edi, eax, 0
	mov	ecx, 12					; 0000000cH
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector@@QAEPAMXZ			; Vector::operator float *
	mov	ecx, 4
	shl	ecx, 0
	movss	xmm0, DWORD PTR [esi+edi]
	comiss	xmm0, DWORD PTR [eax+ecx]
	jbe	$LN4@GetQuatern
	mov	edx, 12					; 0000000cH
	imul	ecx, edx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector@@QAEPAMXZ			; Vector::operator float *
	mov	esi, eax
	mov	eax, 4
	imul	edi, eax, 0
	mov	ecx, 12					; 0000000cH
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector@@QAEPAMXZ			; Vector::operator float *
	mov	ecx, 4
	shl	ecx, 1
	movss	xmm0, DWORD PTR [esi+edi]
	comiss	xmm0, DWORD PTR [eax+ecx]
	jbe	$LN4@GetQuatern

; 216  : 	{
; 217  : 		float r = sqrt(1.0f + mat[0][0] - mat[1][1] - mat[2][2]), inv = 0.5f / r;

	mov	edx, 12					; 0000000cH
	imul	ecx, edx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector@@QAEPAMXZ			; Vector::operator float *
	mov	ecx, 4
	imul	edx, ecx, 0
	movss	xmm0, DWORD PTR __real@3f800000
	addss	xmm0, DWORD PTR [eax+edx]
	mov	ecx, 12					; 0000000cH
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv737[ebp], xmm0
	call	??BVector@@QAEPAMXZ			; Vector::operator float *
	mov	ecx, 4
	shl	ecx, 0
	movss	xmm0, DWORD PTR tv737[ebp]
	subss	xmm0, DWORD PTR [eax+ecx]
	mov	ecx, 12					; 0000000cH
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv739[ebp], xmm0
	call	??BVector@@QAEPAMXZ			; Vector::operator float *
	mov	edx, 4
	shl	edx, 1
	movss	xmm0, DWORD PTR tv739[ebp]
	subss	xmm0, DWORD PTR [eax+edx]
	cvtss2sd xmm0, xmm0
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	call	_sqrt
	add	esp, 8
	fstp	DWORD PTR _r$3[ebp]
	movss	xmm0, DWORD PTR __real@3f000000
	divss	xmm0, DWORD PTR _r$3[ebp]
	movss	DWORD PTR _inv$7[ebp], xmm0

; 218  : 		quat[0] = 0.5f * r;

	movss	xmm0, DWORD PTR __real@3f000000
	mulss	xmm0, DWORD PTR _r$3[ebp]
	lea	ecx, DWORD PTR _quat$[ebp]
	movss	DWORD PTR tv741[ebp], xmm0
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	ecx, 4
	imul	edx, ecx, 0
	movss	xmm0, DWORD PTR tv741[ebp]
	movss	DWORD PTR [eax+edx], xmm0

; 219  : 		quat[1] = (mat[0][1] + mat[1][0]) * inv;

	mov	eax, 12					; 0000000cH
	imul	ecx, eax, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector@@QAEPAMXZ			; Vector::operator float *
	mov	esi, eax
	mov	edi, 4
	shl	edi, 0
	mov	ecx, 12					; 0000000cH
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector@@QAEPAMXZ			; Vector::operator float *
	mov	ecx, 4
	imul	edx, ecx, 0
	movss	xmm0, DWORD PTR [esi+edi]
	addss	xmm0, DWORD PTR [eax+edx]
	mulss	xmm0, DWORD PTR _inv$7[ebp]
	lea	ecx, DWORD PTR _quat$[ebp]
	movss	DWORD PTR tv743[ebp], xmm0
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	ecx, 4
	shl	ecx, 0
	movss	xmm0, DWORD PTR tv743[ebp]
	movss	DWORD PTR [eax+ecx], xmm0

; 220  : 		quat[2] = (mat[2][0] + mat[0][2]) * inv;

	mov	ecx, 12					; 0000000cH
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector@@QAEPAMXZ			; Vector::operator float *
	mov	esi, eax
	mov	edx, 4
	imul	edi, edx, 0
	mov	eax, 12					; 0000000cH
	imul	ecx, eax, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector@@QAEPAMXZ			; Vector::operator float *
	mov	ecx, 4
	shl	ecx, 1
	movss	xmm0, DWORD PTR [esi+edi]
	addss	xmm0, DWORD PTR [eax+ecx]
	mulss	xmm0, DWORD PTR _inv$7[ebp]
	lea	ecx, DWORD PTR _quat$[ebp]
	movss	DWORD PTR tv745[ebp], xmm0
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	edx, 4
	shl	edx, 1
	movss	xmm0, DWORD PTR tv745[ebp]
	movss	DWORD PTR [eax+edx], xmm0

; 221  : 		quat[3] = (mat[1][2] - mat[2][1]) * inv;

	mov	ecx, 12					; 0000000cH
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector@@QAEPAMXZ			; Vector::operator float *
	mov	esi, eax
	mov	edi, 4
	shl	edi, 1
	mov	ecx, 12					; 0000000cH
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector@@QAEPAMXZ			; Vector::operator float *
	mov	ecx, 4
	shl	ecx, 0
	movss	xmm0, DWORD PTR [esi+edi]
	subss	xmm0, DWORD PTR [eax+ecx]
	mulss	xmm0, DWORD PTR _inv$7[ebp]
	lea	ecx, DWORD PTR _quat$[ebp]
	movss	DWORD PTR tv747[ebp], xmm0
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	edx, 4
	imul	ecx, edx, 3
	movss	xmm0, DWORD PTR tv747[ebp]
	movss	DWORD PTR [eax+ecx], xmm0
	jmp	$LN7@GetQuatern
$LN4@GetQuatern:

; 222  : 	}
; 223  : 	else if( mat[1][1] > mat[2][2] )

	mov	ecx, 12					; 0000000cH
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector@@QAEPAMXZ			; Vector::operator float *
	mov	esi, eax
	mov	edi, 4
	shl	edi, 0
	mov	ecx, 12					; 0000000cH
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector@@QAEPAMXZ			; Vector::operator float *
	mov	edx, 4
	shl	edx, 1
	movss	xmm0, DWORD PTR [esi+edi]
	comiss	xmm0, DWORD PTR [eax+edx]
	jbe	$LN6@GetQuatern

; 224  : 	{
; 225  : 		float r = sqrt(1.0f + mat[1][1] - mat[0][0] - mat[2][2]), inv = 0.5f / r;

	mov	ecx, 12					; 0000000cH
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector@@QAEPAMXZ			; Vector::operator float *
	mov	ecx, 4
	shl	ecx, 0
	movss	xmm0, DWORD PTR __real@3f800000
	addss	xmm0, DWORD PTR [eax+ecx]
	mov	edx, 12					; 0000000cH
	imul	ecx, edx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv749[ebp], xmm0
	call	??BVector@@QAEPAMXZ			; Vector::operator float *
	mov	ecx, 4
	imul	edx, ecx, 0
	movss	xmm0, DWORD PTR tv749[ebp]
	subss	xmm0, DWORD PTR [eax+edx]
	mov	ecx, 12					; 0000000cH
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv751[ebp], xmm0
	call	??BVector@@QAEPAMXZ			; Vector::operator float *
	mov	ecx, 4
	shl	ecx, 1
	movss	xmm0, DWORD PTR tv751[ebp]
	subss	xmm0, DWORD PTR [eax+ecx]
	cvtss2sd xmm0, xmm0
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	call	_sqrt
	add	esp, 8
	fstp	DWORD PTR _r$2[ebp]
	movss	xmm0, DWORD PTR __real@3f000000
	divss	xmm0, DWORD PTR _r$2[ebp]
	movss	DWORD PTR _inv$6[ebp], xmm0

; 226  : 		quat[0] = (mat[0][1] + mat[1][0]) * inv;

	mov	edx, 12					; 0000000cH
	imul	ecx, edx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector@@QAEPAMXZ			; Vector::operator float *
	mov	esi, eax
	mov	edi, 4
	shl	edi, 0
	mov	ecx, 12					; 0000000cH
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector@@QAEPAMXZ			; Vector::operator float *
	mov	ecx, 4
	imul	edx, ecx, 0
	movss	xmm0, DWORD PTR [esi+edi]
	addss	xmm0, DWORD PTR [eax+edx]
	mulss	xmm0, DWORD PTR _inv$6[ebp]
	lea	ecx, DWORD PTR _quat$[ebp]
	movss	DWORD PTR tv753[ebp], xmm0
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	ecx, 4
	imul	edx, ecx, 0
	movss	xmm0, DWORD PTR tv753[ebp]
	movss	DWORD PTR [eax+edx], xmm0

; 227  : 		quat[1] = 0.5f * r;

	movss	xmm0, DWORD PTR __real@3f000000
	mulss	xmm0, DWORD PTR _r$2[ebp]
	lea	ecx, DWORD PTR _quat$[ebp]
	movss	DWORD PTR tv755[ebp], xmm0
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	ecx, 4
	shl	ecx, 0
	movss	xmm0, DWORD PTR tv755[ebp]
	movss	DWORD PTR [eax+ecx], xmm0

; 228  : 		quat[2] = (mat[1][2] + mat[2][1]) * inv;

	mov	ecx, 12					; 0000000cH
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector@@QAEPAMXZ			; Vector::operator float *
	mov	esi, eax
	mov	edi, 4
	shl	edi, 1
	mov	ecx, 12					; 0000000cH
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector@@QAEPAMXZ			; Vector::operator float *
	mov	edx, 4
	shl	edx, 0
	movss	xmm0, DWORD PTR [esi+edi]
	addss	xmm0, DWORD PTR [eax+edx]
	mulss	xmm0, DWORD PTR _inv$6[ebp]
	lea	ecx, DWORD PTR _quat$[ebp]
	movss	DWORD PTR tv757[ebp], xmm0
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	ecx, 4
	shl	ecx, 1
	movss	xmm0, DWORD PTR tv757[ebp]
	movss	DWORD PTR [eax+ecx], xmm0

; 229  : 		quat[3] = (mat[2][0] - mat[0][2]) * inv;

	mov	ecx, 12					; 0000000cH
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector@@QAEPAMXZ			; Vector::operator float *
	mov	esi, eax
	mov	edx, 4
	imul	edi, edx, 0
	mov	eax, 12					; 0000000cH
	imul	ecx, eax, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector@@QAEPAMXZ			; Vector::operator float *
	mov	ecx, 4
	shl	ecx, 1
	movss	xmm0, DWORD PTR [esi+edi]
	subss	xmm0, DWORD PTR [eax+ecx]
	mulss	xmm0, DWORD PTR _inv$6[ebp]
	lea	ecx, DWORD PTR _quat$[ebp]
	movss	DWORD PTR tv759[ebp], xmm0
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	edx, 4
	imul	ecx, edx, 3
	movss	xmm0, DWORD PTR tv759[ebp]
	movss	DWORD PTR [eax+ecx], xmm0

; 230  : 	}
; 231  : 	else

	jmp	$LN7@GetQuatern
$LN6@GetQuatern:

; 232  : 	{
; 233  : 		float r = sqrt(1.0f + mat[2][2] - mat[0][0] - mat[1][1]), inv = 0.5f / r;

	mov	ecx, 12					; 0000000cH
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector@@QAEPAMXZ			; Vector::operator float *
	mov	edx, 4
	shl	edx, 1
	movss	xmm0, DWORD PTR __real@3f800000
	addss	xmm0, DWORD PTR [eax+edx]
	mov	eax, 12					; 0000000cH
	imul	ecx, eax, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv761[ebp], xmm0
	call	??BVector@@QAEPAMXZ			; Vector::operator float *
	mov	ecx, 4
	imul	edx, ecx, 0
	movss	xmm0, DWORD PTR tv761[ebp]
	subss	xmm0, DWORD PTR [eax+edx]
	mov	ecx, 12					; 0000000cH
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv763[ebp], xmm0
	call	??BVector@@QAEPAMXZ			; Vector::operator float *
	mov	ecx, 4
	shl	ecx, 0
	movss	xmm0, DWORD PTR tv763[ebp]
	subss	xmm0, DWORD PTR [eax+ecx]
	cvtss2sd xmm0, xmm0
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	call	_sqrt
	add	esp, 8
	fstp	DWORD PTR _r$1[ebp]
	movss	xmm0, DWORD PTR __real@3f000000
	divss	xmm0, DWORD PTR _r$1[ebp]
	movss	DWORD PTR _inv$5[ebp], xmm0

; 234  : 		quat[0] = (mat[2][0] + mat[0][2]) * inv;

	mov	ecx, 12					; 0000000cH
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector@@QAEPAMXZ			; Vector::operator float *
	mov	esi, eax
	mov	edx, 4
	imul	edi, edx, 0
	mov	eax, 12					; 0000000cH
	imul	ecx, eax, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector@@QAEPAMXZ			; Vector::operator float *
	mov	ecx, 4
	shl	ecx, 1
	movss	xmm0, DWORD PTR [esi+edi]
	addss	xmm0, DWORD PTR [eax+ecx]
	mulss	xmm0, DWORD PTR _inv$5[ebp]
	lea	ecx, DWORD PTR _quat$[ebp]
	movss	DWORD PTR tv765[ebp], xmm0
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	edx, 4
	imul	ecx, edx, 0
	movss	xmm0, DWORD PTR tv765[ebp]
	movss	DWORD PTR [eax+ecx], xmm0

; 235  : 		quat[1] = (mat[1][2] + mat[2][1]) * inv;

	mov	ecx, 12					; 0000000cH
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector@@QAEPAMXZ			; Vector::operator float *
	mov	esi, eax
	mov	edi, 4
	shl	edi, 1
	mov	ecx, 12					; 0000000cH
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector@@QAEPAMXZ			; Vector::operator float *
	mov	edx, 4
	shl	edx, 0
	movss	xmm0, DWORD PTR [esi+edi]
	addss	xmm0, DWORD PTR [eax+edx]
	mulss	xmm0, DWORD PTR _inv$5[ebp]
	lea	ecx, DWORD PTR _quat$[ebp]
	movss	DWORD PTR tv767[ebp], xmm0
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	ecx, 4
	shl	ecx, 0
	movss	xmm0, DWORD PTR tv767[ebp]
	movss	DWORD PTR [eax+ecx], xmm0

; 236  : 		quat[2] = 0.5f * r;

	movss	xmm0, DWORD PTR __real@3f000000
	mulss	xmm0, DWORD PTR _r$1[ebp]
	lea	ecx, DWORD PTR _quat$[ebp]
	movss	DWORD PTR tv769[ebp], xmm0
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	edx, 4
	shl	edx, 1
	movss	xmm0, DWORD PTR tv769[ebp]
	movss	DWORD PTR [eax+edx], xmm0

; 237  : 		quat[3] = (mat[0][1] - mat[1][0]) * inv;

	mov	eax, 12					; 0000000cH
	imul	ecx, eax, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector@@QAEPAMXZ			; Vector::operator float *
	mov	esi, eax
	mov	edi, 4
	shl	edi, 0
	mov	ecx, 12					; 0000000cH
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector@@QAEPAMXZ			; Vector::operator float *
	mov	ecx, 4
	imul	edx, ecx, 0
	movss	xmm0, DWORD PTR [esi+edi]
	subss	xmm0, DWORD PTR [eax+edx]
	mulss	xmm0, DWORD PTR _inv$5[ebp]
	lea	ecx, DWORD PTR _quat$[ebp]
	movss	DWORD PTR tv771[ebp], xmm0
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	ecx, 4
	imul	edx, ecx, 3
	movss	xmm0, DWORD PTR tv771[ebp]
	movss	DWORD PTR [eax+edx], xmm0
$LN7@GetQuatern:

; 238  : 	}
; 239  : 
; 240  : 	return quat;

	lea	eax, DWORD PTR _quat$[ebp]
	push	eax
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0Vector4D@@QAE@ABV0@@Z		; Vector4D::Vector4D
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 241  : }

	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
?GetQuaternion@matrix3x4@@QAE?AVVector4D@@XZ ENDP	; matrix3x4::GetQuaternion
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xashxt_v0.81_rev.1_with_sources\xashxt_v0.81_rev.1_src\game_shared\matrix.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
_vOther$ = 8						; size = 4
??4matrix3x4@@QAEAAV0@ABVmatrix4x4@@@Z PROC		; matrix3x4::operator=
; _this$ = ecx

; 334  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 335  : 	mat[0][0] = vOther[0][0];

	push	0
	mov	ecx, DWORD PTR _vOther$[ebp]
	call	??Amatrix4x4@@QBEPBMH@Z			; matrix4x4::operator[]
	mov	esi, eax
	mov	eax, 4
	imul	edi, eax, 0
	mov	ecx, 12					; 0000000cH
	imul	ecx, ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector@@QAEPAMXZ			; Vector::operator float *
	mov	edx, 4
	imul	ecx, edx, 0
	mov	edx, DWORD PTR [esi+edi]
	mov	DWORD PTR [eax+ecx], edx

; 336  : 	mat[1][0] = vOther[1][0];

	push	1
	mov	ecx, DWORD PTR _vOther$[ebp]
	call	??Amatrix4x4@@QBEPBMH@Z			; matrix4x4::operator[]
	mov	esi, eax
	mov	eax, 4
	imul	edi, eax, 0
	mov	ecx, 12					; 0000000cH
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector@@QAEPAMXZ			; Vector::operator float *
	mov	ecx, 4
	imul	edx, ecx, 0
	mov	ecx, DWORD PTR [esi+edi]
	mov	DWORD PTR [eax+edx], ecx

; 337  : 	mat[2][0] = vOther[2][0];

	push	2
	mov	ecx, DWORD PTR _vOther$[ebp]
	call	??Amatrix4x4@@QBEPBMH@Z			; matrix4x4::operator[]
	mov	esi, eax
	mov	edx, 4
	imul	edi, edx, 0
	mov	ecx, 12					; 0000000cH
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector@@QAEPAMXZ			; Vector::operator float *
	mov	ecx, 4
	imul	edx, ecx, 0
	mov	ecx, DWORD PTR [esi+edi]
	mov	DWORD PTR [eax+edx], ecx

; 338  : 	mat[3][0] = vOther[3][0];

	push	3
	mov	ecx, DWORD PTR _vOther$[ebp]
	call	??Amatrix4x4@@QBEPBMH@Z			; matrix4x4::operator[]
	mov	esi, eax
	mov	edx, 4
	imul	edi, edx, 0
	mov	eax, 12					; 0000000cH
	imul	ecx, eax, 3
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector@@QAEPAMXZ			; Vector::operator float *
	mov	ecx, 4
	imul	edx, ecx, 0
	mov	ecx, DWORD PTR [esi+edi]
	mov	DWORD PTR [eax+edx], ecx

; 339  : 	mat[0][1] = vOther[0][1];

	push	0
	mov	ecx, DWORD PTR _vOther$[ebp]
	call	??Amatrix4x4@@QBEPBMH@Z			; matrix4x4::operator[]
	mov	esi, eax
	mov	edi, 4
	shl	edi, 0
	mov	edx, 12					; 0000000cH
	imul	ecx, edx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector@@QAEPAMXZ			; Vector::operator float *
	mov	ecx, 4
	shl	ecx, 0
	mov	edx, DWORD PTR [esi+edi]
	mov	DWORD PTR [eax+ecx], edx

; 340  : 	mat[1][1] = vOther[1][1];

	push	1
	mov	ecx, DWORD PTR _vOther$[ebp]
	call	??Amatrix4x4@@QBEPBMH@Z			; matrix4x4::operator[]
	mov	esi, eax
	mov	edi, 4
	shl	edi, 0
	mov	ecx, 12					; 0000000cH
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector@@QAEPAMXZ			; Vector::operator float *
	mov	ecx, 4
	shl	ecx, 0
	mov	edx, DWORD PTR [esi+edi]
	mov	DWORD PTR [eax+ecx], edx

; 341  : 	mat[2][1] = vOther[2][1];

	push	2
	mov	ecx, DWORD PTR _vOther$[ebp]
	call	??Amatrix4x4@@QBEPBMH@Z			; matrix4x4::operator[]
	mov	esi, eax
	mov	edi, 4
	shl	edi, 0
	mov	ecx, 12					; 0000000cH
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector@@QAEPAMXZ			; Vector::operator float *
	mov	ecx, 4
	shl	ecx, 0
	mov	edx, DWORD PTR [esi+edi]
	mov	DWORD PTR [eax+ecx], edx

; 342  : 	mat[3][1] = vOther[3][1];

	push	3
	mov	ecx, DWORD PTR _vOther$[ebp]
	call	??Amatrix4x4@@QBEPBMH@Z			; matrix4x4::operator[]
	mov	esi, eax
	mov	edi, 4
	shl	edi, 0
	mov	eax, 12					; 0000000cH
	imul	ecx, eax, 3
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector@@QAEPAMXZ			; Vector::operator float *
	mov	ecx, 4
	shl	ecx, 0
	mov	edx, DWORD PTR [esi+edi]
	mov	DWORD PTR [eax+ecx], edx

; 343  : 	mat[0][2] = vOther[0][2];

	push	0
	mov	ecx, DWORD PTR _vOther$[ebp]
	call	??Amatrix4x4@@QBEPBMH@Z			; matrix4x4::operator[]
	mov	esi, eax
	mov	edi, 4
	shl	edi, 1
	mov	eax, 12					; 0000000cH
	imul	ecx, eax, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector@@QAEPAMXZ			; Vector::operator float *
	mov	ecx, 4
	shl	ecx, 1
	mov	edx, DWORD PTR [esi+edi]
	mov	DWORD PTR [eax+ecx], edx

; 344  : 	mat[1][2] = vOther[1][2];

	push	1
	mov	ecx, DWORD PTR _vOther$[ebp]
	call	??Amatrix4x4@@QBEPBMH@Z			; matrix4x4::operator[]
	mov	esi, eax
	mov	edi, 4
	shl	edi, 1
	mov	ecx, 12					; 0000000cH
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector@@QAEPAMXZ			; Vector::operator float *
	mov	ecx, 4
	shl	ecx, 1
	mov	edx, DWORD PTR [esi+edi]
	mov	DWORD PTR [eax+ecx], edx

; 345  : 	mat[2][2] = vOther[2][2];

	push	2
	mov	ecx, DWORD PTR _vOther$[ebp]
	call	??Amatrix4x4@@QBEPBMH@Z			; matrix4x4::operator[]
	mov	esi, eax
	mov	edi, 4
	shl	edi, 1
	mov	ecx, 12					; 0000000cH
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector@@QAEPAMXZ			; Vector::operator float *
	mov	ecx, 4
	shl	ecx, 1
	mov	edx, DWORD PTR [esi+edi]
	mov	DWORD PTR [eax+ecx], edx

; 346  : 	mat[3][2] = vOther[3][2];

	push	3
	mov	ecx, DWORD PTR _vOther$[ebp]
	call	??Amatrix4x4@@QBEPBMH@Z			; matrix4x4::operator[]
	mov	esi, eax
	mov	edi, 4
	shl	edi, 1
	mov	eax, 12					; 0000000cH
	imul	ecx, eax, 3
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector@@QAEPAMXZ			; Vector::operator float *
	mov	ecx, 4
	shl	ecx, 1
	mov	edx, DWORD PTR [esi+edi]
	mov	DWORD PTR [eax+ecx], edx

; 347  : 
; 348  : 	return *this;

	mov	eax, DWORD PTR _this$[ebp]

; 349  : }

	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
??4matrix3x4@@QAEAAV0@ABVmatrix4x4@@@Z ENDP		; matrix3x4::operator=
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xashxt_v0.81_rev.1_with_sources\xashxt_v0.81_rev.1_src\game_shared\matrix.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
_vOther$ = 8						; size = 4
??4matrix3x4@@QAEAAV0@ABVmatrix3x3@@@Z PROC		; matrix3x4::operator=
; _this$ = ecx

; 315  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 316  : 	mat[0][0] = vOther[0][0];

	push	0
	mov	ecx, DWORD PTR _vOther$[ebp]
	call	??Amatrix3x3@@QBEPBMH@Z			; matrix3x3::operator[]
	mov	esi, eax
	mov	eax, 4
	imul	edi, eax, 0
	mov	ecx, 12					; 0000000cH
	imul	ecx, ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector@@QAEPAMXZ			; Vector::operator float *
	mov	edx, 4
	imul	ecx, edx, 0
	mov	edx, DWORD PTR [esi+edi]
	mov	DWORD PTR [eax+ecx], edx

; 317  : 	mat[1][0] = vOther[1][0];

	push	1
	mov	ecx, DWORD PTR _vOther$[ebp]
	call	??Amatrix3x3@@QBEPBMH@Z			; matrix3x3::operator[]
	mov	esi, eax
	mov	eax, 4
	imul	edi, eax, 0
	mov	ecx, 12					; 0000000cH
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector@@QAEPAMXZ			; Vector::operator float *
	mov	ecx, 4
	imul	edx, ecx, 0
	mov	ecx, DWORD PTR [esi+edi]
	mov	DWORD PTR [eax+edx], ecx

; 318  : 	mat[2][0] = vOther[2][0];

	push	2
	mov	ecx, DWORD PTR _vOther$[ebp]
	call	??Amatrix3x3@@QBEPBMH@Z			; matrix3x3::operator[]
	mov	esi, eax
	mov	edx, 4
	imul	edi, edx, 0
	mov	ecx, 12					; 0000000cH
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector@@QAEPAMXZ			; Vector::operator float *
	mov	ecx, 4
	imul	edx, ecx, 0
	mov	ecx, DWORD PTR [esi+edi]
	mov	DWORD PTR [eax+edx], ecx

; 319  : 	mat[3][0] = 0.0f;

	mov	edx, 12					; 0000000cH
	imul	ecx, edx, 3
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector@@QAEPAMXZ			; Vector::operator float *
	mov	ecx, 4
	imul	edx, ecx, 0
	xorps	xmm0, xmm0
	movss	DWORD PTR [eax+edx], xmm0

; 320  : 	mat[0][1] = vOther[0][1];

	push	0
	mov	ecx, DWORD PTR _vOther$[ebp]
	call	??Amatrix3x3@@QBEPBMH@Z			; matrix3x3::operator[]
	mov	esi, eax
	mov	edi, 4
	shl	edi, 0
	mov	eax, 12					; 0000000cH
	imul	ecx, eax, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector@@QAEPAMXZ			; Vector::operator float *
	mov	ecx, 4
	shl	ecx, 0
	mov	edx, DWORD PTR [esi+edi]
	mov	DWORD PTR [eax+ecx], edx

; 321  : 	mat[1][1] = vOther[1][1];

	push	1
	mov	ecx, DWORD PTR _vOther$[ebp]
	call	??Amatrix3x3@@QBEPBMH@Z			; matrix3x3::operator[]
	mov	esi, eax
	mov	edi, 4
	shl	edi, 0
	mov	ecx, 12					; 0000000cH
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector@@QAEPAMXZ			; Vector::operator float *
	mov	ecx, 4
	shl	ecx, 0
	mov	edx, DWORD PTR [esi+edi]
	mov	DWORD PTR [eax+ecx], edx

; 322  : 	mat[2][1] = vOther[2][1];

	push	2
	mov	ecx, DWORD PTR _vOther$[ebp]
	call	??Amatrix3x3@@QBEPBMH@Z			; matrix3x3::operator[]
	mov	esi, eax
	mov	edi, 4
	shl	edi, 0
	mov	ecx, 12					; 0000000cH
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector@@QAEPAMXZ			; Vector::operator float *
	mov	ecx, 4
	shl	ecx, 0
	mov	edx, DWORD PTR [esi+edi]
	mov	DWORD PTR [eax+ecx], edx

; 323  : 	mat[3][1] = 0.0f;

	mov	eax, 12					; 0000000cH
	imul	ecx, eax, 3
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector@@QAEPAMXZ			; Vector::operator float *
	mov	ecx, 4
	shl	ecx, 0
	xorps	xmm0, xmm0
	movss	DWORD PTR [eax+ecx], xmm0

; 324  : 	mat[0][2] = vOther[0][2];

	push	0
	mov	ecx, DWORD PTR _vOther$[ebp]
	call	??Amatrix3x3@@QBEPBMH@Z			; matrix3x3::operator[]
	mov	esi, eax
	mov	edi, 4
	shl	edi, 1
	mov	edx, 12					; 0000000cH
	imul	ecx, edx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector@@QAEPAMXZ			; Vector::operator float *
	mov	ecx, 4
	shl	ecx, 1
	mov	edx, DWORD PTR [esi+edi]
	mov	DWORD PTR [eax+ecx], edx

; 325  : 	mat[1][2] = vOther[1][2];

	push	1
	mov	ecx, DWORD PTR _vOther$[ebp]
	call	??Amatrix3x3@@QBEPBMH@Z			; matrix3x3::operator[]
	mov	esi, eax
	mov	edi, 4
	shl	edi, 1
	mov	ecx, 12					; 0000000cH
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector@@QAEPAMXZ			; Vector::operator float *
	mov	ecx, 4
	shl	ecx, 1
	mov	edx, DWORD PTR [esi+edi]
	mov	DWORD PTR [eax+ecx], edx

; 326  : 	mat[2][2] = vOther[2][2];

	push	2
	mov	ecx, DWORD PTR _vOther$[ebp]
	call	??Amatrix3x3@@QBEPBMH@Z			; matrix3x3::operator[]
	mov	esi, eax
	mov	edi, 4
	shl	edi, 1
	mov	ecx, 12					; 0000000cH
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector@@QAEPAMXZ			; Vector::operator float *
	mov	ecx, 4
	shl	ecx, 1
	mov	edx, DWORD PTR [esi+edi]
	mov	DWORD PTR [eax+ecx], edx

; 327  : 	mat[3][2] = 0.0f;

	mov	eax, 12					; 0000000cH
	imul	ecx, eax, 3
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector@@QAEPAMXZ			; Vector::operator float *
	mov	ecx, 4
	shl	ecx, 1
	xorps	xmm0, xmm0
	movss	DWORD PTR [eax+ecx], xmm0

; 328  : 
; 329  : 	return *this;

	mov	eax, DWORD PTR _this$[ebp]

; 330  : }

	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
??4matrix3x4@@QAEAAV0@ABVmatrix3x3@@@Z ENDP		; matrix3x4::operator=
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xashxt_v0.81_rev.1_with_sources\xashxt_v0.81_rev.1_src\game_shared\matrix.h
;	COMDAT ??Amatrix3x4@@QBEPBMH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_i$ = 8							; size = 4
??Amatrix3x4@@QBEPBMH@Z PROC				; matrix3x4::operator[], COMDAT
; _this$ = ecx

; 487  : 	float const* operator[]( int i ) const { return mat[i]; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	imul	ecx, DWORD PTR _i$[ebp], 12
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector@@QBEPBMXZ			; Vector::operator float const *
	mov	esp, ebp
	pop	ebp
	ret	4
??Amatrix3x4@@QBEPBMH@Z ENDP				; matrix3x4::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xashxt_v0.81_rev.1_with_sources\xashxt_v0.81_rev.1_src\game_shared\matrix.h
;	COMDAT ??Amatrix3x4@@QAEPAMH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_i$ = 8							; size = 4
??Amatrix3x4@@QAEPAMH@Z PROC				; matrix3x4::operator[], COMDAT
; _this$ = ecx

; 486  : 	float* operator[]( int i ) { return mat[i]; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	imul	ecx, DWORD PTR _i$[ebp], 12
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector@@QAEPAMXZ			; Vector::operator float *
	mov	esp, ebp
	pop	ebp
	ret	4
??Amatrix3x4@@QAEPAMH@Z ENDP				; matrix3x4::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xashxt_v0.81_rev.1_with_sources\xashxt_v0.81_rev.1_src\game_shared\matrix.cpp
_TEXT	SEGMENT
$T1 = -52						; size = 12
$T2 = -40						; size = 12
$T3 = -28						; size = 12
$T4 = -16						; size = 12
_this$ = -4						; size = 4
?Identity@matrix3x4@@QAEXXZ PROC			; matrix3x4::Identity
; _this$ = ecx

; 147  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 52					; 00000034H
	mov	DWORD PTR _this$[ebp], ecx

; 148  : 	mat[0] = Vector( 1, 0, 0 );

	push	ecx
	xorps	xmm0, xmm0
	movss	DWORD PTR [esp], xmm0
	push	ecx
	xorps	xmm0, xmm0
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [esp], xmm0
	lea	ecx, DWORD PTR $T4[ebp]
	call	??0Vector@@QAE@MMM@Z			; Vector::Vector
	mov	ecx, 12					; 0000000cH
	imul	edx, ecx, 0
	add	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR [edx], ecx
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR [edx+4], ecx
	mov	eax, DWORD PTR [eax+8]
	mov	DWORD PTR [edx+8], eax

; 149  : 	mat[1] = Vector( 0, 1, 0 );

	push	ecx
	xorps	xmm0, xmm0
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	xorps	xmm0, xmm0
	movss	DWORD PTR [esp], xmm0
	lea	ecx, DWORD PTR $T3[ebp]
	call	??0Vector@@QAE@MMM@Z			; Vector::Vector
	mov	ecx, 12					; 0000000cH
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	eax, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], eax

; 150  : 	mat[2] = Vector( 0, 0, 1 );

	push	ecx
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	xorps	xmm0, xmm0
	movss	DWORD PTR [esp], xmm0
	push	ecx
	xorps	xmm0, xmm0
	movss	DWORD PTR [esp], xmm0
	lea	ecx, DWORD PTR $T2[ebp]
	call	??0Vector@@QAE@MMM@Z			; Vector::Vector
	mov	ecx, 12					; 0000000cH
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	eax, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], eax

; 151  : 	mat[3] = Vector( 0, 0, 0 );

	push	ecx
	xorps	xmm0, xmm0
	movss	DWORD PTR [esp], xmm0
	push	ecx
	xorps	xmm0, xmm0
	movss	DWORD PTR [esp], xmm0
	push	ecx
	xorps	xmm0, xmm0
	movss	DWORD PTR [esp], xmm0
	lea	ecx, DWORD PTR $T1[ebp]
	call	??0Vector@@QAE@MMM@Z			; Vector::Vector
	mov	ecx, 12					; 0000000cH
	imul	edx, ecx, 3
	add	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR [edx], ecx
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR [edx+4], ecx
	mov	eax, DWORD PTR [eax+8]
	mov	DWORD PTR [edx+8], eax

; 152  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?Identity@matrix3x4@@QAEXXZ ENDP			; matrix3x4::Identity
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xashxt_v0.81_rev.1_with_sources\xashxt_v0.81_rev.1_src\game_shared\matrix.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0matrix3x4@@QAE@XZ PROC				; matrix3x4::matrix3x4
; _this$ = ecx

; 143  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	push	OFFSET ??0Vector@@QAE@XZ		; Vector::Vector
	push	4
	push	12					; 0000000cH
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??_H@YGXPAXIIP6EPAX0@Z@Z

; 144  : }

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0matrix3x4@@QAE@XZ ENDP				; matrix3x4::matrix3x4
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??0matrix3x3@@QAE@$$QAV0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??0matrix3x3@@QAE@$$QAV0@@Z PROC			; matrix3x3::matrix3x3, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	push	OFFSET ??0Vector@@QAE@ABV0@@Z		; Vector::Vector
	push	3
	push	12					; 0000000cH
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??__G@YGXPAX0IIP6EPAX00@Z@Z
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0matrix3x3@@QAE@$$QAV0@@Z ENDP			; matrix3x3::matrix3x3
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xashxt_v0.81_rev.1_with_sources\xashxt_v0.81_rev.1_src\game_shared\matrix.cpp
_TEXT	SEGMENT
tv748 = -152						; size = 4
tv746 = -148						; size = 4
tv744 = -144						; size = 4
tv742 = -140						; size = 4
tv740 = -136						; size = 4
tv738 = -132						; size = 4
tv736 = -128						; size = 4
tv734 = -124						; size = 4
tv732 = -120						; size = 4
tv730 = -116						; size = 4
tv728 = -112						; size = 4
tv726 = -108						; size = 4
tv724 = -104						; size = 4
tv722 = -100						; size = 4
tv720 = -96						; size = 4
tv718 = -92						; size = 4
tv716 = -88						; size = 4
tv714 = -84						; size = 4
tv712 = -80						; size = 4
tv710 = -76						; size = 4
tv708 = -72						; size = 4
tv706 = -68						; size = 4
tv704 = -64						; size = 4
tv702 = -60						; size = 4
tv700 = -56						; size = 4
tv698 = -52						; size = 4
tv696 = -48						; size = 4
_this$ = -44						; size = 4
_out$ = -40						; size = 36
__$ArrayPad$ = -4					; size = 4
___$ReturnUdt$ = 8					; size = 4
_mat2$ = 12						; size = 36
?Concat@matrix3x3@@QAE?AV1@V1@@Z PROC			; matrix3x3::Concat
; _this$ = ecx

; 126  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 152				; 00000098H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 127  : 	matrix3x3 out;

	lea	ecx, DWORD PTR _out$[ebp]
	call	??0matrix3x3@@QAE@XZ			; matrix3x3::matrix3x3

; 128  : 
; 129  : 	out[0][0] = mat[0][0] * mat2[0][0] + mat[0][1] * mat2[1][0] + mat[0][2] * mat2[2][0];

	mov	eax, 12					; 0000000cH
	imul	ecx, eax, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector@@QAEPAMXZ			; Vector::operator float *
	mov	esi, eax
	mov	ecx, 4
	imul	edi, ecx, 0
	push	0
	lea	ecx, DWORD PTR _mat2$[ebp]
	call	??Amatrix3x3@@QBEPBMH@Z			; matrix3x3::operator[]
	mov	edx, 4
	imul	ecx, edx, 0
	movss	xmm0, DWORD PTR [esi+edi]
	mulss	xmm0, DWORD PTR [eax+ecx]
	mov	edx, 12					; 0000000cH
	imul	ecx, edx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv696[ebp], xmm0
	call	??BVector@@QAEPAMXZ			; Vector::operator float *
	mov	esi, eax
	mov	edi, 4
	shl	edi, 0
	push	1
	lea	ecx, DWORD PTR _mat2$[ebp]
	call	??Amatrix3x3@@QBEPBMH@Z			; matrix3x3::operator[]
	mov	ecx, 4
	imul	edx, ecx, 0
	movss	xmm0, DWORD PTR [esi+edi]
	mulss	xmm0, DWORD PTR [eax+edx]
	movss	xmm1, DWORD PTR tv696[ebp]
	addss	xmm1, xmm0
	mov	eax, 12					; 0000000cH
	imul	ecx, eax, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv698[ebp], xmm1
	call	??BVector@@QAEPAMXZ			; Vector::operator float *
	mov	esi, eax
	mov	edi, 4
	shl	edi, 1
	push	2
	lea	ecx, DWORD PTR _mat2$[ebp]
	call	??Amatrix3x3@@QBEPBMH@Z			; matrix3x3::operator[]
	mov	ecx, 4
	imul	edx, ecx, 0
	movss	xmm0, DWORD PTR [esi+edi]
	mulss	xmm0, DWORD PTR [eax+edx]
	movss	xmm1, DWORD PTR tv698[ebp]
	addss	xmm1, xmm0
	push	0
	lea	ecx, DWORD PTR _out$[ebp]
	movss	DWORD PTR tv700[ebp], xmm1
	call	??Amatrix3x3@@QAEPAMH@Z			; matrix3x3::operator[]
	mov	ecx, 4
	imul	edx, ecx, 0
	movss	xmm0, DWORD PTR tv700[ebp]
	movss	DWORD PTR [eax+edx], xmm0

; 130  : 	out[0][1] = mat[0][0] * mat2[0][1] + mat[0][1] * mat2[1][1] + mat[0][2] * mat2[2][1];

	mov	eax, 12					; 0000000cH
	imul	ecx, eax, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector@@QAEPAMXZ			; Vector::operator float *
	mov	esi, eax
	mov	ecx, 4
	imul	edi, ecx, 0
	push	0
	lea	ecx, DWORD PTR _mat2$[ebp]
	call	??Amatrix3x3@@QBEPBMH@Z			; matrix3x3::operator[]
	mov	edx, 4
	shl	edx, 0
	movss	xmm0, DWORD PTR [esi+edi]
	mulss	xmm0, DWORD PTR [eax+edx]
	mov	eax, 12					; 0000000cH
	imul	ecx, eax, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv702[ebp], xmm0
	call	??BVector@@QAEPAMXZ			; Vector::operator float *
	mov	esi, eax
	mov	edi, 4
	shl	edi, 0
	push	1
	lea	ecx, DWORD PTR _mat2$[ebp]
	call	??Amatrix3x3@@QBEPBMH@Z			; matrix3x3::operator[]
	mov	ecx, 4
	shl	ecx, 0
	movss	xmm0, DWORD PTR [esi+edi]
	mulss	xmm0, DWORD PTR [eax+ecx]
	movss	xmm1, DWORD PTR tv702[ebp]
	addss	xmm1, xmm0
	mov	edx, 12					; 0000000cH
	imul	ecx, edx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv704[ebp], xmm1
	call	??BVector@@QAEPAMXZ			; Vector::operator float *
	mov	esi, eax
	mov	edi, 4
	shl	edi, 1
	push	2
	lea	ecx, DWORD PTR _mat2$[ebp]
	call	??Amatrix3x3@@QBEPBMH@Z			; matrix3x3::operator[]
	mov	ecx, 4
	shl	ecx, 0
	movss	xmm0, DWORD PTR [esi+edi]
	mulss	xmm0, DWORD PTR [eax+ecx]
	movss	xmm1, DWORD PTR tv704[ebp]
	addss	xmm1, xmm0
	push	0
	lea	ecx, DWORD PTR _out$[ebp]
	movss	DWORD PTR tv706[ebp], xmm1
	call	??Amatrix3x3@@QAEPAMH@Z			; matrix3x3::operator[]
	mov	edx, 4
	shl	edx, 0
	movss	xmm0, DWORD PTR tv706[ebp]
	movss	DWORD PTR [eax+edx], xmm0

; 131  : 	out[0][2] = mat[0][0] * mat2[0][2] + mat[0][1] * mat2[1][2] + mat[0][2] * mat2[2][2];

	mov	eax, 12					; 0000000cH
	imul	ecx, eax, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector@@QAEPAMXZ			; Vector::operator float *
	mov	esi, eax
	mov	ecx, 4
	imul	edi, ecx, 0
	push	0
	lea	ecx, DWORD PTR _mat2$[ebp]
	call	??Amatrix3x3@@QBEPBMH@Z			; matrix3x3::operator[]
	mov	edx, 4
	shl	edx, 1
	movss	xmm0, DWORD PTR [esi+edi]
	mulss	xmm0, DWORD PTR [eax+edx]
	mov	eax, 12					; 0000000cH
	imul	ecx, eax, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv708[ebp], xmm0
	call	??BVector@@QAEPAMXZ			; Vector::operator float *
	mov	esi, eax
	mov	edi, 4
	shl	edi, 0
	push	1
	lea	ecx, DWORD PTR _mat2$[ebp]
	call	??Amatrix3x3@@QBEPBMH@Z			; matrix3x3::operator[]
	mov	ecx, 4
	shl	ecx, 1
	movss	xmm0, DWORD PTR [esi+edi]
	mulss	xmm0, DWORD PTR [eax+ecx]
	movss	xmm1, DWORD PTR tv708[ebp]
	addss	xmm1, xmm0
	mov	edx, 12					; 0000000cH
	imul	ecx, edx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv710[ebp], xmm1
	call	??BVector@@QAEPAMXZ			; Vector::operator float *
	mov	esi, eax
	mov	edi, 4
	shl	edi, 1
	push	2
	lea	ecx, DWORD PTR _mat2$[ebp]
	call	??Amatrix3x3@@QBEPBMH@Z			; matrix3x3::operator[]
	mov	ecx, 4
	shl	ecx, 1
	movss	xmm0, DWORD PTR [esi+edi]
	mulss	xmm0, DWORD PTR [eax+ecx]
	movss	xmm1, DWORD PTR tv710[ebp]
	addss	xmm1, xmm0
	push	0
	lea	ecx, DWORD PTR _out$[ebp]
	movss	DWORD PTR tv712[ebp], xmm1
	call	??Amatrix3x3@@QAEPAMH@Z			; matrix3x3::operator[]
	mov	edx, 4
	shl	edx, 1
	movss	xmm0, DWORD PTR tv712[ebp]
	movss	DWORD PTR [eax+edx], xmm0

; 132  : 	out[1][0] = mat[1][0] * mat2[0][0] + mat[1][1] * mat2[1][0] + mat[1][2] * mat2[2][0];

	mov	ecx, 12					; 0000000cH
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector@@QAEPAMXZ			; Vector::operator float *
	mov	esi, eax
	mov	eax, 4
	imul	edi, eax, 0
	push	0
	lea	ecx, DWORD PTR _mat2$[ebp]
	call	??Amatrix3x3@@QBEPBMH@Z			; matrix3x3::operator[]
	mov	ecx, 4
	imul	edx, ecx, 0
	movss	xmm0, DWORD PTR [esi+edi]
	mulss	xmm0, DWORD PTR [eax+edx]
	mov	ecx, 12					; 0000000cH
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv714[ebp], xmm0
	call	??BVector@@QAEPAMXZ			; Vector::operator float *
	mov	esi, eax
	mov	edi, 4
	shl	edi, 0
	push	1
	lea	ecx, DWORD PTR _mat2$[ebp]
	call	??Amatrix3x3@@QBEPBMH@Z			; matrix3x3::operator[]
	mov	ecx, 4
	imul	edx, ecx, 0
	movss	xmm0, DWORD PTR [esi+edi]
	mulss	xmm0, DWORD PTR [eax+edx]
	movss	xmm1, DWORD PTR tv714[ebp]
	addss	xmm1, xmm0
	mov	ecx, 12					; 0000000cH
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv716[ebp], xmm1
	call	??BVector@@QAEPAMXZ			; Vector::operator float *
	mov	esi, eax
	mov	edi, 4
	shl	edi, 1
	push	2
	lea	ecx, DWORD PTR _mat2$[ebp]
	call	??Amatrix3x3@@QBEPBMH@Z			; matrix3x3::operator[]
	mov	ecx, 4
	imul	edx, ecx, 0
	movss	xmm0, DWORD PTR [esi+edi]
	mulss	xmm0, DWORD PTR [eax+edx]
	movss	xmm1, DWORD PTR tv716[ebp]
	addss	xmm1, xmm0
	push	1
	lea	ecx, DWORD PTR _out$[ebp]
	movss	DWORD PTR tv718[ebp], xmm1
	call	??Amatrix3x3@@QAEPAMH@Z			; matrix3x3::operator[]
	mov	ecx, 4
	imul	edx, ecx, 0
	movss	xmm0, DWORD PTR tv718[ebp]
	movss	DWORD PTR [eax+edx], xmm0

; 133  : 	out[1][1] = mat[1][0] * mat2[0][1] + mat[1][1] * mat2[1][1] + mat[1][2] * mat2[2][1];

	mov	ecx, 12					; 0000000cH
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector@@QAEPAMXZ			; Vector::operator float *
	mov	esi, eax
	mov	eax, 4
	imul	edi, eax, 0
	push	0
	lea	ecx, DWORD PTR _mat2$[ebp]
	call	??Amatrix3x3@@QBEPBMH@Z			; matrix3x3::operator[]
	mov	ecx, 4
	shl	ecx, 0
	movss	xmm0, DWORD PTR [esi+edi]
	mulss	xmm0, DWORD PTR [eax+ecx]
	mov	ecx, 12					; 0000000cH
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv720[ebp], xmm0
	call	??BVector@@QAEPAMXZ			; Vector::operator float *
	mov	esi, eax
	mov	edi, 4
	shl	edi, 0
	push	1
	lea	ecx, DWORD PTR _mat2$[ebp]
	call	??Amatrix3x3@@QBEPBMH@Z			; matrix3x3::operator[]
	mov	edx, 4
	shl	edx, 0
	movss	xmm0, DWORD PTR [esi+edi]
	mulss	xmm0, DWORD PTR [eax+edx]
	movss	xmm1, DWORD PTR tv720[ebp]
	addss	xmm1, xmm0
	mov	ecx, 12					; 0000000cH
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv722[ebp], xmm1
	call	??BVector@@QAEPAMXZ			; Vector::operator float *
	mov	esi, eax
	mov	edi, 4
	shl	edi, 1
	push	2
	lea	ecx, DWORD PTR _mat2$[ebp]
	call	??Amatrix3x3@@QBEPBMH@Z			; matrix3x3::operator[]
	mov	ecx, 4
	shl	ecx, 0
	movss	xmm0, DWORD PTR [esi+edi]
	mulss	xmm0, DWORD PTR [eax+ecx]
	movss	xmm1, DWORD PTR tv722[ebp]
	addss	xmm1, xmm0
	push	1
	lea	ecx, DWORD PTR _out$[ebp]
	movss	DWORD PTR tv724[ebp], xmm1
	call	??Amatrix3x3@@QAEPAMH@Z			; matrix3x3::operator[]
	mov	edx, 4
	shl	edx, 0
	movss	xmm0, DWORD PTR tv724[ebp]
	movss	DWORD PTR [eax+edx], xmm0

; 134  : 	out[1][2] = mat[1][0] * mat2[0][2] + mat[1][1] * mat2[1][2] + mat[1][2] * mat2[2][2];

	mov	ecx, 12					; 0000000cH
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector@@QAEPAMXZ			; Vector::operator float *
	mov	esi, eax
	mov	eax, 4
	imul	edi, eax, 0
	push	0
	lea	ecx, DWORD PTR _mat2$[ebp]
	call	??Amatrix3x3@@QBEPBMH@Z			; matrix3x3::operator[]
	mov	ecx, 4
	shl	ecx, 1
	movss	xmm0, DWORD PTR [esi+edi]
	mulss	xmm0, DWORD PTR [eax+ecx]
	mov	ecx, 12					; 0000000cH
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv726[ebp], xmm0
	call	??BVector@@QAEPAMXZ			; Vector::operator float *
	mov	esi, eax
	mov	edi, 4
	shl	edi, 0
	push	1
	lea	ecx, DWORD PTR _mat2$[ebp]
	call	??Amatrix3x3@@QBEPBMH@Z			; matrix3x3::operator[]
	mov	edx, 4
	shl	edx, 1
	movss	xmm0, DWORD PTR [esi+edi]
	mulss	xmm0, DWORD PTR [eax+edx]
	movss	xmm1, DWORD PTR tv726[ebp]
	addss	xmm1, xmm0
	mov	ecx, 12					; 0000000cH
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv728[ebp], xmm1
	call	??BVector@@QAEPAMXZ			; Vector::operator float *
	mov	esi, eax
	mov	edi, 4
	shl	edi, 1
	push	2
	lea	ecx, DWORD PTR _mat2$[ebp]
	call	??Amatrix3x3@@QBEPBMH@Z			; matrix3x3::operator[]
	mov	ecx, 4
	shl	ecx, 1
	movss	xmm0, DWORD PTR [esi+edi]
	mulss	xmm0, DWORD PTR [eax+ecx]
	movss	xmm1, DWORD PTR tv728[ebp]
	addss	xmm1, xmm0
	push	1
	lea	ecx, DWORD PTR _out$[ebp]
	movss	DWORD PTR tv730[ebp], xmm1
	call	??Amatrix3x3@@QAEPAMH@Z			; matrix3x3::operator[]
	mov	edx, 4
	shl	edx, 1
	movss	xmm0, DWORD PTR tv730[ebp]
	movss	DWORD PTR [eax+edx], xmm0

; 135  : 	out[2][0] = mat[2][0] * mat2[0][0] + mat[2][1] * mat2[1][0] + mat[2][2] * mat2[2][0];

	mov	ecx, 12					; 0000000cH
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector@@QAEPAMXZ			; Vector::operator float *
	mov	esi, eax
	mov	eax, 4
	imul	edi, eax, 0
	push	0
	lea	ecx, DWORD PTR _mat2$[ebp]
	call	??Amatrix3x3@@QBEPBMH@Z			; matrix3x3::operator[]
	mov	ecx, 4
	imul	edx, ecx, 0
	movss	xmm0, DWORD PTR [esi+edi]
	mulss	xmm0, DWORD PTR [eax+edx]
	mov	ecx, 12					; 0000000cH
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv732[ebp], xmm0
	call	??BVector@@QAEPAMXZ			; Vector::operator float *
	mov	esi, eax
	mov	edi, 4
	shl	edi, 0
	push	1
	lea	ecx, DWORD PTR _mat2$[ebp]
	call	??Amatrix3x3@@QBEPBMH@Z			; matrix3x3::operator[]
	mov	ecx, 4
	imul	edx, ecx, 0
	movss	xmm0, DWORD PTR [esi+edi]
	mulss	xmm0, DWORD PTR [eax+edx]
	movss	xmm1, DWORD PTR tv732[ebp]
	addss	xmm1, xmm0
	mov	ecx, 12					; 0000000cH
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv734[ebp], xmm1
	call	??BVector@@QAEPAMXZ			; Vector::operator float *
	mov	esi, eax
	mov	edi, 4
	shl	edi, 1
	push	2
	lea	ecx, DWORD PTR _mat2$[ebp]
	call	??Amatrix3x3@@QBEPBMH@Z			; matrix3x3::operator[]
	mov	ecx, 4
	imul	edx, ecx, 0
	movss	xmm0, DWORD PTR [esi+edi]
	mulss	xmm0, DWORD PTR [eax+edx]
	movss	xmm1, DWORD PTR tv734[ebp]
	addss	xmm1, xmm0
	push	2
	lea	ecx, DWORD PTR _out$[ebp]
	movss	DWORD PTR tv736[ebp], xmm1
	call	??Amatrix3x3@@QAEPAMH@Z			; matrix3x3::operator[]
	mov	ecx, 4
	imul	edx, ecx, 0
	movss	xmm0, DWORD PTR tv736[ebp]
	movss	DWORD PTR [eax+edx], xmm0

; 136  : 	out[2][1] = mat[2][0] * mat2[0][1] + mat[2][1] * mat2[1][1] + mat[2][2] * mat2[2][1];

	mov	ecx, 12					; 0000000cH
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector@@QAEPAMXZ			; Vector::operator float *
	mov	esi, eax
	mov	eax, 4
	imul	edi, eax, 0
	push	0
	lea	ecx, DWORD PTR _mat2$[ebp]
	call	??Amatrix3x3@@QBEPBMH@Z			; matrix3x3::operator[]
	mov	ecx, 4
	shl	ecx, 0
	movss	xmm0, DWORD PTR [esi+edi]
	mulss	xmm0, DWORD PTR [eax+ecx]
	mov	ecx, 12					; 0000000cH
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv738[ebp], xmm0
	call	??BVector@@QAEPAMXZ			; Vector::operator float *
	mov	esi, eax
	mov	edi, 4
	shl	edi, 0
	push	1
	lea	ecx, DWORD PTR _mat2$[ebp]
	call	??Amatrix3x3@@QBEPBMH@Z			; matrix3x3::operator[]
	mov	edx, 4
	shl	edx, 0
	movss	xmm0, DWORD PTR [esi+edi]
	mulss	xmm0, DWORD PTR [eax+edx]
	movss	xmm1, DWORD PTR tv738[ebp]
	addss	xmm1, xmm0
	mov	ecx, 12					; 0000000cH
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv740[ebp], xmm1
	call	??BVector@@QAEPAMXZ			; Vector::operator float *
	mov	esi, eax
	mov	edi, 4
	shl	edi, 1
	push	2
	lea	ecx, DWORD PTR _mat2$[ebp]
	call	??Amatrix3x3@@QBEPBMH@Z			; matrix3x3::operator[]
	mov	ecx, 4
	shl	ecx, 0
	movss	xmm0, DWORD PTR [esi+edi]
	mulss	xmm0, DWORD PTR [eax+ecx]
	movss	xmm1, DWORD PTR tv740[ebp]
	addss	xmm1, xmm0
	push	2
	lea	ecx, DWORD PTR _out$[ebp]
	movss	DWORD PTR tv742[ebp], xmm1
	call	??Amatrix3x3@@QAEPAMH@Z			; matrix3x3::operator[]
	mov	edx, 4
	shl	edx, 0
	movss	xmm0, DWORD PTR tv742[ebp]
	movss	DWORD PTR [eax+edx], xmm0

; 137  : 	out[2][2] = mat[2][0] * mat2[0][2] + mat[2][1] * mat2[1][2] + mat[2][2] * mat2[2][2];

	mov	ecx, 12					; 0000000cH
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector@@QAEPAMXZ			; Vector::operator float *
	mov	esi, eax
	mov	eax, 4
	imul	edi, eax, 0
	push	0
	lea	ecx, DWORD PTR _mat2$[ebp]
	call	??Amatrix3x3@@QBEPBMH@Z			; matrix3x3::operator[]
	mov	ecx, 4
	shl	ecx, 1
	movss	xmm0, DWORD PTR [esi+edi]
	mulss	xmm0, DWORD PTR [eax+ecx]
	mov	ecx, 12					; 0000000cH
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv744[ebp], xmm0
	call	??BVector@@QAEPAMXZ			; Vector::operator float *
	mov	esi, eax
	mov	edi, 4
	shl	edi, 0
	push	1
	lea	ecx, DWORD PTR _mat2$[ebp]
	call	??Amatrix3x3@@QBEPBMH@Z			; matrix3x3::operator[]
	mov	edx, 4
	shl	edx, 1
	movss	xmm0, DWORD PTR [esi+edi]
	mulss	xmm0, DWORD PTR [eax+edx]
	movss	xmm1, DWORD PTR tv744[ebp]
	addss	xmm1, xmm0
	mov	ecx, 12					; 0000000cH
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv746[ebp], xmm1
	call	??BVector@@QAEPAMXZ			; Vector::operator float *
	mov	esi, eax
	mov	edi, 4
	shl	edi, 1
	push	2
	lea	ecx, DWORD PTR _mat2$[ebp]
	call	??Amatrix3x3@@QBEPBMH@Z			; matrix3x3::operator[]
	mov	ecx, 4
	shl	ecx, 1
	movss	xmm0, DWORD PTR [esi+edi]
	mulss	xmm0, DWORD PTR [eax+ecx]
	movss	xmm1, DWORD PTR tv746[ebp]
	addss	xmm1, xmm0
	push	2
	lea	ecx, DWORD PTR _out$[ebp]
	movss	DWORD PTR tv748[ebp], xmm1
	call	??Amatrix3x3@@QAEPAMH@Z			; matrix3x3::operator[]
	mov	edx, 4
	shl	edx, 1
	movss	xmm0, DWORD PTR tv748[ebp]
	movss	DWORD PTR [eax+edx], xmm0

; 138  : 
; 139  : 	return out;

	lea	eax, DWORD PTR _out$[ebp]
	push	eax
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0matrix3x3@@QAE@$$QAV0@@Z
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 140  : }

	pop	edi
	pop	esi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	40					; 00000028H
?Concat@matrix3x3@@QAE?AV1@V1@@Z ENDP			; matrix3x3::Concat
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xashxt_v0.81_rev.1_with_sources\xashxt_v0.81_rev.1_src\game_shared\matrix.cpp
_TEXT	SEGMENT
_out$ = -52						; size = 12
tv304 = -40						; size = 4
tv302 = -36						; size = 4
tv300 = -32						; size = 4
tv298 = -28						; size = 4
tv296 = -24						; size = 4
tv294 = -20						; size = 4
tv292 = -16						; size = 4
tv290 = -12						; size = 4
tv288 = -8						; size = 4
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
_v$ = 12						; size = 4
?VectorIRotate@matrix3x3@@QBE?AVVector@@ABV2@@Z PROC	; matrix3x3::VectorIRotate
; _this$ = ecx

; 74   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 52					; 00000034H
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 75   : 	Vector out;

	lea	ecx, DWORD PTR _out$[ebp]
	call	??0Vector@@QAE@XZ			; Vector::Vector

; 76   : 
; 77   : 	out[0] = v[0] * mat[0][0] + v[1] * mat[0][1] + v[2] * mat[0][2];

	mov	ecx, DWORD PTR _v$[ebp]
	call	??BVector@@QBEPBMXZ			; Vector::operator float const *
	mov	esi, eax
	mov	eax, 4
	imul	edi, eax, 0
	mov	ecx, 12					; 0000000cH
	imul	ecx, ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector@@QBEPBMXZ			; Vector::operator float const *
	mov	edx, 4
	imul	ecx, edx, 0
	movss	xmm0, DWORD PTR [esi+edi]
	mulss	xmm0, DWORD PTR [eax+ecx]
	mov	ecx, DWORD PTR _v$[ebp]
	movss	DWORD PTR tv288[ebp], xmm0
	call	??BVector@@QBEPBMXZ			; Vector::operator float const *
	mov	esi, eax
	mov	edi, 4
	shl	edi, 0
	mov	edx, 12					; 0000000cH
	imul	ecx, edx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector@@QBEPBMXZ			; Vector::operator float const *
	mov	ecx, 4
	shl	ecx, 0
	movss	xmm0, DWORD PTR [esi+edi]
	mulss	xmm0, DWORD PTR [eax+ecx]
	movss	xmm1, DWORD PTR tv288[ebp]
	addss	xmm1, xmm0
	mov	ecx, DWORD PTR _v$[ebp]
	movss	DWORD PTR tv290[ebp], xmm1
	call	??BVector@@QBEPBMXZ			; Vector::operator float const *
	mov	esi, eax
	mov	edi, 4
	shl	edi, 1
	mov	edx, 12					; 0000000cH
	imul	ecx, edx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector@@QBEPBMXZ			; Vector::operator float const *
	mov	ecx, 4
	shl	ecx, 1
	movss	xmm0, DWORD PTR [esi+edi]
	mulss	xmm0, DWORD PTR [eax+ecx]
	movss	xmm1, DWORD PTR tv290[ebp]
	addss	xmm1, xmm0
	lea	ecx, DWORD PTR _out$[ebp]
	movss	DWORD PTR tv292[ebp], xmm1
	call	??BVector@@QAEPAMXZ			; Vector::operator float *
	mov	edx, 4
	imul	ecx, edx, 0
	movss	xmm0, DWORD PTR tv292[ebp]
	movss	DWORD PTR [eax+ecx], xmm0

; 78   : 	out[1] = v[0] * mat[1][0] + v[1] * mat[1][1] + v[2] * mat[1][2];

	mov	ecx, DWORD PTR _v$[ebp]
	call	??BVector@@QBEPBMXZ			; Vector::operator float const *
	mov	esi, eax
	mov	edx, 4
	imul	edi, edx, 0
	mov	ecx, 12					; 0000000cH
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector@@QBEPBMXZ			; Vector::operator float const *
	mov	ecx, 4
	imul	edx, ecx, 0
	movss	xmm0, DWORD PTR [esi+edi]
	mulss	xmm0, DWORD PTR [eax+edx]
	mov	ecx, DWORD PTR _v$[ebp]
	movss	DWORD PTR tv294[ebp], xmm0
	call	??BVector@@QBEPBMXZ			; Vector::operator float const *
	mov	esi, eax
	mov	edi, 4
	shl	edi, 0
	mov	ecx, 12					; 0000000cH
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector@@QBEPBMXZ			; Vector::operator float const *
	mov	ecx, 4
	shl	ecx, 0
	movss	xmm0, DWORD PTR [esi+edi]
	mulss	xmm0, DWORD PTR [eax+ecx]
	movss	xmm1, DWORD PTR tv294[ebp]
	addss	xmm1, xmm0
	mov	ecx, DWORD PTR _v$[ebp]
	movss	DWORD PTR tv296[ebp], xmm1
	call	??BVector@@QBEPBMXZ			; Vector::operator float const *
	mov	esi, eax
	mov	edi, 4
	shl	edi, 1
	mov	ecx, 12					; 0000000cH
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector@@QBEPBMXZ			; Vector::operator float const *
	mov	edx, 4
	shl	edx, 1
	movss	xmm0, DWORD PTR [esi+edi]
	mulss	xmm0, DWORD PTR [eax+edx]
	movss	xmm1, DWORD PTR tv296[ebp]
	addss	xmm1, xmm0
	lea	ecx, DWORD PTR _out$[ebp]
	movss	DWORD PTR tv298[ebp], xmm1
	call	??BVector@@QAEPAMXZ			; Vector::operator float *
	mov	ecx, 4
	shl	ecx, 0
	movss	xmm0, DWORD PTR tv298[ebp]
	movss	DWORD PTR [eax+ecx], xmm0

; 79   : 	out[2] = v[0] * mat[2][0] + v[1] * mat[2][1] + v[2] * mat[2][2];

	mov	ecx, DWORD PTR _v$[ebp]
	call	??BVector@@QBEPBMXZ			; Vector::operator float const *
	mov	esi, eax
	mov	edx, 4
	imul	edi, edx, 0
	mov	ecx, 12					; 0000000cH
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector@@QBEPBMXZ			; Vector::operator float const *
	mov	ecx, 4
	imul	edx, ecx, 0
	movss	xmm0, DWORD PTR [esi+edi]
	mulss	xmm0, DWORD PTR [eax+edx]
	mov	ecx, DWORD PTR _v$[ebp]
	movss	DWORD PTR tv300[ebp], xmm0
	call	??BVector@@QBEPBMXZ			; Vector::operator float const *
	mov	esi, eax
	mov	edi, 4
	shl	edi, 0
	mov	ecx, 12					; 0000000cH
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector@@QBEPBMXZ			; Vector::operator float const *
	mov	ecx, 4
	shl	ecx, 0
	movss	xmm0, DWORD PTR [esi+edi]
	mulss	xmm0, DWORD PTR [eax+ecx]
	movss	xmm1, DWORD PTR tv300[ebp]
	addss	xmm1, xmm0
	mov	ecx, DWORD PTR _v$[ebp]
	movss	DWORD PTR tv302[ebp], xmm1
	call	??BVector@@QBEPBMXZ			; Vector::operator float const *
	mov	esi, eax
	mov	edi, 4
	shl	edi, 1
	mov	ecx, 12					; 0000000cH
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector@@QBEPBMXZ			; Vector::operator float const *
	mov	edx, 4
	shl	edx, 1
	movss	xmm0, DWORD PTR [esi+edi]
	mulss	xmm0, DWORD PTR [eax+edx]
	movss	xmm1, DWORD PTR tv302[ebp]
	addss	xmm1, xmm0
	lea	ecx, DWORD PTR _out$[ebp]
	movss	DWORD PTR tv304[ebp], xmm1
	call	??BVector@@QAEPAMXZ			; Vector::operator float *
	mov	ecx, 4
	shl	ecx, 1
	movss	xmm0, DWORD PTR tv304[ebp]
	movss	DWORD PTR [eax+ecx], xmm0

; 80   : 
; 81   : 	return out;

	lea	edx, DWORD PTR _out$[ebp]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0Vector@@QAE@ABV0@@Z			; Vector::Vector
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 82   : }

	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	8
?VectorIRotate@matrix3x3@@QBE?AVVector@@ABV2@@Z ENDP	; matrix3x3::VectorIRotate
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xashxt_v0.81_rev.1_with_sources\xashxt_v0.81_rev.1_src\game_shared\matrix.cpp
_TEXT	SEGMENT
_out$ = -52						; size = 12
tv304 = -40						; size = 4
tv302 = -36						; size = 4
tv300 = -32						; size = 4
tv298 = -28						; size = 4
tv296 = -24						; size = 4
tv294 = -20						; size = 4
tv292 = -16						; size = 4
tv290 = -12						; size = 4
tv288 = -8						; size = 4
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
_v$ = 12						; size = 4
?VectorRotate@matrix3x3@@QBE?AVVector@@ABV2@@Z PROC	; matrix3x3::VectorRotate
; _this$ = ecx

; 63   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 52					; 00000034H
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 64   : 	Vector out;

	lea	ecx, DWORD PTR _out$[ebp]
	call	??0Vector@@QAE@XZ			; Vector::Vector

; 65   : 
; 66   : 	out[0] = v[0] * mat[0][0] + v[1] * mat[1][0] + v[2] * mat[2][0];

	mov	ecx, DWORD PTR _v$[ebp]
	call	??BVector@@QBEPBMXZ			; Vector::operator float const *
	mov	esi, eax
	mov	eax, 4
	imul	edi, eax, 0
	mov	ecx, 12					; 0000000cH
	imul	ecx, ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector@@QBEPBMXZ			; Vector::operator float const *
	mov	edx, 4
	imul	ecx, edx, 0
	movss	xmm0, DWORD PTR [esi+edi]
	mulss	xmm0, DWORD PTR [eax+ecx]
	mov	ecx, DWORD PTR _v$[ebp]
	movss	DWORD PTR tv288[ebp], xmm0
	call	??BVector@@QBEPBMXZ			; Vector::operator float const *
	mov	esi, eax
	mov	edi, 4
	shl	edi, 0
	mov	ecx, 12					; 0000000cH
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector@@QBEPBMXZ			; Vector::operator float const *
	mov	edx, 4
	imul	ecx, edx, 0
	movss	xmm0, DWORD PTR [esi+edi]
	mulss	xmm0, DWORD PTR [eax+ecx]
	movss	xmm1, DWORD PTR tv288[ebp]
	addss	xmm1, xmm0
	mov	ecx, DWORD PTR _v$[ebp]
	movss	DWORD PTR tv290[ebp], xmm1
	call	??BVector@@QBEPBMXZ			; Vector::operator float const *
	mov	esi, eax
	mov	edi, 4
	shl	edi, 1
	mov	ecx, 12					; 0000000cH
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector@@QBEPBMXZ			; Vector::operator float const *
	mov	edx, 4
	imul	ecx, edx, 0
	movss	xmm0, DWORD PTR [esi+edi]
	mulss	xmm0, DWORD PTR [eax+ecx]
	movss	xmm1, DWORD PTR tv290[ebp]
	addss	xmm1, xmm0
	lea	ecx, DWORD PTR _out$[ebp]
	movss	DWORD PTR tv292[ebp], xmm1
	call	??BVector@@QAEPAMXZ			; Vector::operator float *
	mov	edx, 4
	imul	ecx, edx, 0
	movss	xmm0, DWORD PTR tv292[ebp]
	movss	DWORD PTR [eax+ecx], xmm0

; 67   : 	out[1] = v[0] * mat[0][1] + v[1] * mat[1][1] + v[2] * mat[2][1];

	mov	ecx, DWORD PTR _v$[ebp]
	call	??BVector@@QBEPBMXZ			; Vector::operator float const *
	mov	esi, eax
	mov	edx, 4
	imul	edi, edx, 0
	mov	eax, 12					; 0000000cH
	imul	ecx, eax, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector@@QBEPBMXZ			; Vector::operator float const *
	mov	ecx, 4
	shl	ecx, 0
	movss	xmm0, DWORD PTR [esi+edi]
	mulss	xmm0, DWORD PTR [eax+ecx]
	mov	ecx, DWORD PTR _v$[ebp]
	movss	DWORD PTR tv294[ebp], xmm0
	call	??BVector@@QBEPBMXZ			; Vector::operator float const *
	mov	esi, eax
	mov	edi, 4
	shl	edi, 0
	mov	ecx, 12					; 0000000cH
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector@@QBEPBMXZ			; Vector::operator float const *
	mov	edx, 4
	shl	edx, 0
	movss	xmm0, DWORD PTR [esi+edi]
	mulss	xmm0, DWORD PTR [eax+edx]
	movss	xmm1, DWORD PTR tv294[ebp]
	addss	xmm1, xmm0
	mov	ecx, DWORD PTR _v$[ebp]
	movss	DWORD PTR tv296[ebp], xmm1
	call	??BVector@@QBEPBMXZ			; Vector::operator float const *
	mov	esi, eax
	mov	edi, 4
	shl	edi, 1
	mov	ecx, 12					; 0000000cH
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector@@QBEPBMXZ			; Vector::operator float const *
	mov	ecx, 4
	shl	ecx, 0
	movss	xmm0, DWORD PTR [esi+edi]
	mulss	xmm0, DWORD PTR [eax+ecx]
	movss	xmm1, DWORD PTR tv296[ebp]
	addss	xmm1, xmm0
	lea	ecx, DWORD PTR _out$[ebp]
	movss	DWORD PTR tv298[ebp], xmm1
	call	??BVector@@QAEPAMXZ			; Vector::operator float *
	mov	edx, 4
	shl	edx, 0
	movss	xmm0, DWORD PTR tv298[ebp]
	movss	DWORD PTR [eax+edx], xmm0

; 68   : 	out[2] = v[0] * mat[0][2] + v[1] * mat[1][2] + v[2] * mat[2][2];

	mov	ecx, DWORD PTR _v$[ebp]
	call	??BVector@@QBEPBMXZ			; Vector::operator float const *
	mov	esi, eax
	mov	eax, 4
	imul	edi, eax, 0
	mov	ecx, 12					; 0000000cH
	imul	ecx, ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector@@QBEPBMXZ			; Vector::operator float const *
	mov	edx, 4
	shl	edx, 1
	movss	xmm0, DWORD PTR [esi+edi]
	mulss	xmm0, DWORD PTR [eax+edx]
	mov	ecx, DWORD PTR _v$[ebp]
	movss	DWORD PTR tv300[ebp], xmm0
	call	??BVector@@QBEPBMXZ			; Vector::operator float const *
	mov	esi, eax
	mov	edi, 4
	shl	edi, 0
	mov	ecx, 12					; 0000000cH
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector@@QBEPBMXZ			; Vector::operator float const *
	mov	ecx, 4
	shl	ecx, 1
	movss	xmm0, DWORD PTR [esi+edi]
	mulss	xmm0, DWORD PTR [eax+ecx]
	movss	xmm1, DWORD PTR tv300[ebp]
	addss	xmm1, xmm0
	mov	ecx, DWORD PTR _v$[ebp]
	movss	DWORD PTR tv302[ebp], xmm1
	call	??BVector@@QBEPBMXZ			; Vector::operator float const *
	mov	esi, eax
	mov	edi, 4
	shl	edi, 1
	mov	ecx, 12					; 0000000cH
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector@@QBEPBMXZ			; Vector::operator float const *
	mov	edx, 4
	shl	edx, 1
	movss	xmm0, DWORD PTR [esi+edi]
	mulss	xmm0, DWORD PTR [eax+edx]
	movss	xmm1, DWORD PTR tv302[ebp]
	addss	xmm1, xmm0
	lea	ecx, DWORD PTR _out$[ebp]
	movss	DWORD PTR tv304[ebp], xmm1
	call	??BVector@@QAEPAMXZ			; Vector::operator float *
	mov	ecx, 4
	shl	ecx, 1
	movss	xmm0, DWORD PTR tv304[ebp]
	movss	DWORD PTR [eax+ecx], xmm0

; 69   : 
; 70   : 	return out;

	lea	edx, DWORD PTR _out$[ebp]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0Vector@@QAE@ABV0@@Z			; Vector::Vector
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 71   : }

	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	8
?VectorRotate@matrix3x3@@QBE?AVVector@@ABV2@@Z ENDP	; matrix3x3::VectorRotate
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xashxt_v0.81_rev.1_with_sources\xashxt_v0.81_rev.1_src\game_shared\matrix.cpp
_TEXT	SEGMENT
tv741 = -148						; size = 4
tv771 = -144						; size = 4
tv769 = -140						; size = 4
tv767 = -136						; size = 4
tv765 = -132						; size = 4
tv763 = -128						; size = 4
tv761 = -124						; size = 4
tv759 = -120						; size = 4
tv757 = -116						; size = 4
tv755 = -112						; size = 4
tv753 = -108						; size = 4
tv751 = -104						; size = 4
tv749 = -100						; size = 4
tv747 = -96						; size = 4
tv745 = -92						; size = 4
tv743 = -88						; size = 4
tv739 = -84						; size = 4
tv737 = -80						; size = 4
tv735 = -76						; size = 4
tv733 = -72						; size = 4
tv731 = -68						; size = 4
tv729 = -64						; size = 4
tv727 = -60						; size = 4
_r$1 = -56						; size = 4
_r$2 = -52						; size = 4
_r$3 = -48						; size = 4
_r$4 = -44						; size = 4
_trace$ = -40						; size = 4
_inv$5 = -36						; size = 4
_inv$6 = -32						; size = 4
_inv$7 = -28						; size = 4
_inv$8 = -24						; size = 4
_quat$ = -20						; size = 16
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?GetQuaternion@matrix3x3@@QAE?AVVector4D@@XZ PROC	; matrix3x3::GetQuaternion
; _this$ = ecx

; 85   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 148				; 00000094H
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 86   : 	float trace = mat[0][0] + mat[1][1] + mat[2][2];

	mov	eax, 12					; 0000000cH
	imul	ecx, eax, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector@@QAEPAMXZ			; Vector::operator float *
	mov	esi, eax
	mov	ecx, 4
	imul	edi, ecx, 0
	mov	ecx, 12					; 0000000cH
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector@@QAEPAMXZ			; Vector::operator float *
	mov	edx, 4
	shl	edx, 0
	movss	xmm0, DWORD PTR [esi+edi]
	addss	xmm0, DWORD PTR [eax+edx]
	mov	ecx, 12					; 0000000cH
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv727[ebp], xmm0
	call	??BVector@@QAEPAMXZ			; Vector::operator float *
	mov	ecx, 4
	shl	ecx, 1
	movss	xmm0, DWORD PTR tv727[ebp]
	addss	xmm0, DWORD PTR [eax+ecx]
	movss	DWORD PTR _trace$[ebp], xmm0

; 87   : 	Vector4D quat;

	lea	ecx, DWORD PTR _quat$[ebp]
	call	??0Vector4D@@QAE@XZ			; Vector4D::Vector4D

; 88   : 
; 89   : 	if(trace > 0.0f)

	movss	xmm0, DWORD PTR _trace$[ebp]
	comiss	xmm0, DWORD PTR __real@00000000
	jbe	$LN2@GetQuatern

; 90   : 	{
; 91   : 		float r = sqrt(1.0f + trace), inv = 0.5f / r;

	movss	xmm0, DWORD PTR __real@3f800000
	addss	xmm0, DWORD PTR _trace$[ebp]
	cvtss2sd xmm0, xmm0
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	call	_sqrt
	add	esp, 8
	fstp	DWORD PTR _r$4[ebp]
	movss	xmm0, DWORD PTR __real@3f000000
	divss	xmm0, DWORD PTR _r$4[ebp]
	movss	DWORD PTR _inv$8[ebp], xmm0

; 92   : 		quat[0] = (mat[1][2] - mat[2][1]) * inv;

	mov	ecx, 12					; 0000000cH
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector@@QAEPAMXZ			; Vector::operator float *
	mov	esi, eax
	mov	edi, 4
	shl	edi, 1
	mov	ecx, 12					; 0000000cH
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector@@QAEPAMXZ			; Vector::operator float *
	mov	edx, 4
	shl	edx, 0
	movss	xmm0, DWORD PTR [esi+edi]
	subss	xmm0, DWORD PTR [eax+edx]
	mulss	xmm0, DWORD PTR _inv$8[ebp]
	lea	ecx, DWORD PTR _quat$[ebp]
	movss	DWORD PTR tv729[ebp], xmm0
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	ecx, 4
	imul	edx, ecx, 0
	movss	xmm0, DWORD PTR tv729[ebp]
	movss	DWORD PTR [eax+edx], xmm0

; 93   : 		quat[1] = (mat[2][0] - mat[0][2]) * inv;

	mov	ecx, 12					; 0000000cH
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector@@QAEPAMXZ			; Vector::operator float *
	mov	esi, eax
	mov	eax, 4
	imul	edi, eax, 0
	mov	ecx, 12					; 0000000cH
	imul	ecx, ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector@@QAEPAMXZ			; Vector::operator float *
	mov	edx, 4
	shl	edx, 1
	movss	xmm0, DWORD PTR [esi+edi]
	subss	xmm0, DWORD PTR [eax+edx]
	mulss	xmm0, DWORD PTR _inv$8[ebp]
	lea	ecx, DWORD PTR _quat$[ebp]
	movss	DWORD PTR tv731[ebp], xmm0
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	ecx, 4
	shl	ecx, 0
	movss	xmm0, DWORD PTR tv731[ebp]
	movss	DWORD PTR [eax+ecx], xmm0

; 94   : 		quat[2] = (mat[0][1] - mat[1][0]) * inv;

	mov	edx, 12					; 0000000cH
	imul	ecx, edx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector@@QAEPAMXZ			; Vector::operator float *
	mov	esi, eax
	mov	edi, 4
	shl	edi, 0
	mov	ecx, 12					; 0000000cH
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector@@QAEPAMXZ			; Vector::operator float *
	mov	ecx, 4
	imul	edx, ecx, 0
	movss	xmm0, DWORD PTR [esi+edi]
	subss	xmm0, DWORD PTR [eax+edx]
	mulss	xmm0, DWORD PTR _inv$8[ebp]
	lea	ecx, DWORD PTR _quat$[ebp]
	movss	DWORD PTR tv733[ebp], xmm0
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	ecx, 4
	shl	ecx, 1
	movss	xmm0, DWORD PTR tv733[ebp]
	movss	DWORD PTR [eax+ecx], xmm0

; 95   : 		quat[3] = 0.5f * r;

	movss	xmm0, DWORD PTR __real@3f000000
	mulss	xmm0, DWORD PTR _r$4[ebp]
	lea	ecx, DWORD PTR _quat$[ebp]
	movss	DWORD PTR tv735[ebp], xmm0
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	edx, 4
	imul	ecx, edx, 3
	movss	xmm0, DWORD PTR tv735[ebp]
	movss	DWORD PTR [eax+ecx], xmm0
	jmp	$LN7@GetQuatern
$LN2@GetQuatern:

; 96   : 	}
; 97   : 	else if(mat[0][0] > mat[1][1] && mat[0][0] > mat[2][2])

	mov	edx, 12					; 0000000cH
	imul	ecx, edx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector@@QAEPAMXZ			; Vector::operator float *
	mov	esi, eax
	mov	eax, 4
	imul	edi, eax, 0
	mov	ecx, 12					; 0000000cH
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector@@QAEPAMXZ			; Vector::operator float *
	mov	ecx, 4
	shl	ecx, 0
	movss	xmm0, DWORD PTR [esi+edi]
	comiss	xmm0, DWORD PTR [eax+ecx]
	jbe	$LN4@GetQuatern
	mov	edx, 12					; 0000000cH
	imul	ecx, edx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector@@QAEPAMXZ			; Vector::operator float *
	mov	esi, eax
	mov	eax, 4
	imul	edi, eax, 0
	mov	ecx, 12					; 0000000cH
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector@@QAEPAMXZ			; Vector::operator float *
	mov	ecx, 4
	shl	ecx, 1
	movss	xmm0, DWORD PTR [esi+edi]
	comiss	xmm0, DWORD PTR [eax+ecx]
	jbe	$LN4@GetQuatern

; 98   : 	{
; 99   : 		float r = sqrt(1.0f + mat[0][0] - mat[1][1] - mat[2][2]), inv = 0.5f / r;

	mov	edx, 12					; 0000000cH
	imul	ecx, edx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector@@QAEPAMXZ			; Vector::operator float *
	mov	ecx, 4
	imul	edx, ecx, 0
	movss	xmm0, DWORD PTR __real@3f800000
	addss	xmm0, DWORD PTR [eax+edx]
	mov	ecx, 12					; 0000000cH
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv737[ebp], xmm0
	call	??BVector@@QAEPAMXZ			; Vector::operator float *
	mov	ecx, 4
	shl	ecx, 0
	movss	xmm0, DWORD PTR tv737[ebp]
	subss	xmm0, DWORD PTR [eax+ecx]
	mov	ecx, 12					; 0000000cH
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv739[ebp], xmm0
	call	??BVector@@QAEPAMXZ			; Vector::operator float *
	mov	edx, 4
	shl	edx, 1
	movss	xmm0, DWORD PTR tv739[ebp]
	subss	xmm0, DWORD PTR [eax+edx]
	cvtss2sd xmm0, xmm0
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	call	_sqrt
	add	esp, 8
	fstp	DWORD PTR _r$3[ebp]
	movss	xmm0, DWORD PTR __real@3f000000
	divss	xmm0, DWORD PTR _r$3[ebp]
	movss	DWORD PTR _inv$7[ebp], xmm0

; 100  : 		quat[0] = 0.5f * r;

	movss	xmm0, DWORD PTR __real@3f000000
	mulss	xmm0, DWORD PTR _r$3[ebp]
	lea	ecx, DWORD PTR _quat$[ebp]
	movss	DWORD PTR tv741[ebp], xmm0
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	ecx, 4
	imul	edx, ecx, 0
	movss	xmm0, DWORD PTR tv741[ebp]
	movss	DWORD PTR [eax+edx], xmm0

; 101  : 		quat[1] = (mat[0][1] + mat[1][0]) * inv;

	mov	eax, 12					; 0000000cH
	imul	ecx, eax, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector@@QAEPAMXZ			; Vector::operator float *
	mov	esi, eax
	mov	edi, 4
	shl	edi, 0
	mov	ecx, 12					; 0000000cH
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector@@QAEPAMXZ			; Vector::operator float *
	mov	ecx, 4
	imul	edx, ecx, 0
	movss	xmm0, DWORD PTR [esi+edi]
	addss	xmm0, DWORD PTR [eax+edx]
	mulss	xmm0, DWORD PTR _inv$7[ebp]
	lea	ecx, DWORD PTR _quat$[ebp]
	movss	DWORD PTR tv743[ebp], xmm0
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	ecx, 4
	shl	ecx, 0
	movss	xmm0, DWORD PTR tv743[ebp]
	movss	DWORD PTR [eax+ecx], xmm0

; 102  : 		quat[2] = (mat[2][0] + mat[0][2]) * inv;

	mov	ecx, 12					; 0000000cH
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector@@QAEPAMXZ			; Vector::operator float *
	mov	esi, eax
	mov	edx, 4
	imul	edi, edx, 0
	mov	eax, 12					; 0000000cH
	imul	ecx, eax, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector@@QAEPAMXZ			; Vector::operator float *
	mov	ecx, 4
	shl	ecx, 1
	movss	xmm0, DWORD PTR [esi+edi]
	addss	xmm0, DWORD PTR [eax+ecx]
	mulss	xmm0, DWORD PTR _inv$7[ebp]
	lea	ecx, DWORD PTR _quat$[ebp]
	movss	DWORD PTR tv745[ebp], xmm0
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	edx, 4
	shl	edx, 1
	movss	xmm0, DWORD PTR tv745[ebp]
	movss	DWORD PTR [eax+edx], xmm0

; 103  : 		quat[3] = (mat[1][2] - mat[2][1]) * inv;

	mov	ecx, 12					; 0000000cH
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector@@QAEPAMXZ			; Vector::operator float *
	mov	esi, eax
	mov	edi, 4
	shl	edi, 1
	mov	ecx, 12					; 0000000cH
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector@@QAEPAMXZ			; Vector::operator float *
	mov	ecx, 4
	shl	ecx, 0
	movss	xmm0, DWORD PTR [esi+edi]
	subss	xmm0, DWORD PTR [eax+ecx]
	mulss	xmm0, DWORD PTR _inv$7[ebp]
	lea	ecx, DWORD PTR _quat$[ebp]
	movss	DWORD PTR tv747[ebp], xmm0
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	edx, 4
	imul	ecx, edx, 3
	movss	xmm0, DWORD PTR tv747[ebp]
	movss	DWORD PTR [eax+ecx], xmm0
	jmp	$LN7@GetQuatern
$LN4@GetQuatern:

; 104  : 	}
; 105  : 	else if(mat[1][1] > mat[2][2])

	mov	ecx, 12					; 0000000cH
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector@@QAEPAMXZ			; Vector::operator float *
	mov	esi, eax
	mov	edi, 4
	shl	edi, 0
	mov	ecx, 12					; 0000000cH
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector@@QAEPAMXZ			; Vector::operator float *
	mov	edx, 4
	shl	edx, 1
	movss	xmm0, DWORD PTR [esi+edi]
	comiss	xmm0, DWORD PTR [eax+edx]
	jbe	$LN6@GetQuatern

; 106  : 	{
; 107  : 		float r = sqrt(1.0f + mat[1][1] - mat[0][0] - mat[2][2]), inv = 0.5f / r;

	mov	ecx, 12					; 0000000cH
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector@@QAEPAMXZ			; Vector::operator float *
	mov	ecx, 4
	shl	ecx, 0
	movss	xmm0, DWORD PTR __real@3f800000
	addss	xmm0, DWORD PTR [eax+ecx]
	mov	edx, 12					; 0000000cH
	imul	ecx, edx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv749[ebp], xmm0
	call	??BVector@@QAEPAMXZ			; Vector::operator float *
	mov	ecx, 4
	imul	edx, ecx, 0
	movss	xmm0, DWORD PTR tv749[ebp]
	subss	xmm0, DWORD PTR [eax+edx]
	mov	ecx, 12					; 0000000cH
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv751[ebp], xmm0
	call	??BVector@@QAEPAMXZ			; Vector::operator float *
	mov	ecx, 4
	shl	ecx, 1
	movss	xmm0, DWORD PTR tv751[ebp]
	subss	xmm0, DWORD PTR [eax+ecx]
	cvtss2sd xmm0, xmm0
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	call	_sqrt
	add	esp, 8
	fstp	DWORD PTR _r$2[ebp]
	movss	xmm0, DWORD PTR __real@3f000000
	divss	xmm0, DWORD PTR _r$2[ebp]
	movss	DWORD PTR _inv$6[ebp], xmm0

; 108  : 		quat[0] = (mat[0][1] + mat[1][0]) * inv;

	mov	edx, 12					; 0000000cH
	imul	ecx, edx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector@@QAEPAMXZ			; Vector::operator float *
	mov	esi, eax
	mov	edi, 4
	shl	edi, 0
	mov	ecx, 12					; 0000000cH
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector@@QAEPAMXZ			; Vector::operator float *
	mov	ecx, 4
	imul	edx, ecx, 0
	movss	xmm0, DWORD PTR [esi+edi]
	addss	xmm0, DWORD PTR [eax+edx]
	mulss	xmm0, DWORD PTR _inv$6[ebp]
	lea	ecx, DWORD PTR _quat$[ebp]
	movss	DWORD PTR tv753[ebp], xmm0
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	ecx, 4
	imul	edx, ecx, 0
	movss	xmm0, DWORD PTR tv753[ebp]
	movss	DWORD PTR [eax+edx], xmm0

; 109  : 		quat[1] = 0.5f * r;

	movss	xmm0, DWORD PTR __real@3f000000
	mulss	xmm0, DWORD PTR _r$2[ebp]
	lea	ecx, DWORD PTR _quat$[ebp]
	movss	DWORD PTR tv755[ebp], xmm0
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	ecx, 4
	shl	ecx, 0
	movss	xmm0, DWORD PTR tv755[ebp]
	movss	DWORD PTR [eax+ecx], xmm0

; 110  : 		quat[2] = (mat[1][2] + mat[2][1]) * inv;

	mov	ecx, 12					; 0000000cH
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector@@QAEPAMXZ			; Vector::operator float *
	mov	esi, eax
	mov	edi, 4
	shl	edi, 1
	mov	ecx, 12					; 0000000cH
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector@@QAEPAMXZ			; Vector::operator float *
	mov	edx, 4
	shl	edx, 0
	movss	xmm0, DWORD PTR [esi+edi]
	addss	xmm0, DWORD PTR [eax+edx]
	mulss	xmm0, DWORD PTR _inv$6[ebp]
	lea	ecx, DWORD PTR _quat$[ebp]
	movss	DWORD PTR tv757[ebp], xmm0
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	ecx, 4
	shl	ecx, 1
	movss	xmm0, DWORD PTR tv757[ebp]
	movss	DWORD PTR [eax+ecx], xmm0

; 111  : 		quat[3] = (mat[2][0] - mat[0][2]) * inv;

	mov	ecx, 12					; 0000000cH
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector@@QAEPAMXZ			; Vector::operator float *
	mov	esi, eax
	mov	edx, 4
	imul	edi, edx, 0
	mov	eax, 12					; 0000000cH
	imul	ecx, eax, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector@@QAEPAMXZ			; Vector::operator float *
	mov	ecx, 4
	shl	ecx, 1
	movss	xmm0, DWORD PTR [esi+edi]
	subss	xmm0, DWORD PTR [eax+ecx]
	mulss	xmm0, DWORD PTR _inv$6[ebp]
	lea	ecx, DWORD PTR _quat$[ebp]
	movss	DWORD PTR tv759[ebp], xmm0
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	edx, 4
	imul	ecx, edx, 3
	movss	xmm0, DWORD PTR tv759[ebp]
	movss	DWORD PTR [eax+ecx], xmm0

; 112  : 	}
; 113  : 	else

	jmp	$LN7@GetQuatern
$LN6@GetQuatern:

; 114  : 	{
; 115  : 		float r = sqrt(1.0f + mat[2][2] - mat[0][0] - mat[1][1]), inv = 0.5f / r;

	mov	ecx, 12					; 0000000cH
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector@@QAEPAMXZ			; Vector::operator float *
	mov	edx, 4
	shl	edx, 1
	movss	xmm0, DWORD PTR __real@3f800000
	addss	xmm0, DWORD PTR [eax+edx]
	mov	eax, 12					; 0000000cH
	imul	ecx, eax, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv761[ebp], xmm0
	call	??BVector@@QAEPAMXZ			; Vector::operator float *
	mov	ecx, 4
	imul	edx, ecx, 0
	movss	xmm0, DWORD PTR tv761[ebp]
	subss	xmm0, DWORD PTR [eax+edx]
	mov	ecx, 12					; 0000000cH
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv763[ebp], xmm0
	call	??BVector@@QAEPAMXZ			; Vector::operator float *
	mov	ecx, 4
	shl	ecx, 0
	movss	xmm0, DWORD PTR tv763[ebp]
	subss	xmm0, DWORD PTR [eax+ecx]
	cvtss2sd xmm0, xmm0
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	call	_sqrt
	add	esp, 8
	fstp	DWORD PTR _r$1[ebp]
	movss	xmm0, DWORD PTR __real@3f000000
	divss	xmm0, DWORD PTR _r$1[ebp]
	movss	DWORD PTR _inv$5[ebp], xmm0

; 116  : 		quat[0] = (mat[2][0] + mat[0][2]) * inv;

	mov	ecx, 12					; 0000000cH
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector@@QAEPAMXZ			; Vector::operator float *
	mov	esi, eax
	mov	edx, 4
	imul	edi, edx, 0
	mov	eax, 12					; 0000000cH
	imul	ecx, eax, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector@@QAEPAMXZ			; Vector::operator float *
	mov	ecx, 4
	shl	ecx, 1
	movss	xmm0, DWORD PTR [esi+edi]
	addss	xmm0, DWORD PTR [eax+ecx]
	mulss	xmm0, DWORD PTR _inv$5[ebp]
	lea	ecx, DWORD PTR _quat$[ebp]
	movss	DWORD PTR tv765[ebp], xmm0
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	edx, 4
	imul	ecx, edx, 0
	movss	xmm0, DWORD PTR tv765[ebp]
	movss	DWORD PTR [eax+ecx], xmm0

; 117  : 		quat[1] = (mat[1][2] + mat[2][1]) * inv;

	mov	ecx, 12					; 0000000cH
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector@@QAEPAMXZ			; Vector::operator float *
	mov	esi, eax
	mov	edi, 4
	shl	edi, 1
	mov	ecx, 12					; 0000000cH
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector@@QAEPAMXZ			; Vector::operator float *
	mov	edx, 4
	shl	edx, 0
	movss	xmm0, DWORD PTR [esi+edi]
	addss	xmm0, DWORD PTR [eax+edx]
	mulss	xmm0, DWORD PTR _inv$5[ebp]
	lea	ecx, DWORD PTR _quat$[ebp]
	movss	DWORD PTR tv767[ebp], xmm0
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	ecx, 4
	shl	ecx, 0
	movss	xmm0, DWORD PTR tv767[ebp]
	movss	DWORD PTR [eax+ecx], xmm0

; 118  : 		quat[2] = 0.5f * r;

	movss	xmm0, DWORD PTR __real@3f000000
	mulss	xmm0, DWORD PTR _r$1[ebp]
	lea	ecx, DWORD PTR _quat$[ebp]
	movss	DWORD PTR tv769[ebp], xmm0
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	edx, 4
	shl	edx, 1
	movss	xmm0, DWORD PTR tv769[ebp]
	movss	DWORD PTR [eax+edx], xmm0

; 119  : 		quat[3] = (mat[0][1] - mat[1][0]) * inv;

	mov	eax, 12					; 0000000cH
	imul	ecx, eax, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector@@QAEPAMXZ			; Vector::operator float *
	mov	esi, eax
	mov	edi, 4
	shl	edi, 0
	mov	ecx, 12					; 0000000cH
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector@@QAEPAMXZ			; Vector::operator float *
	mov	ecx, 4
	imul	edx, ecx, 0
	movss	xmm0, DWORD PTR [esi+edi]
	subss	xmm0, DWORD PTR [eax+edx]
	mulss	xmm0, DWORD PTR _inv$5[ebp]
	lea	ecx, DWORD PTR _quat$[ebp]
	movss	DWORD PTR tv771[ebp], xmm0
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	ecx, 4
	imul	edx, ecx, 3
	movss	xmm0, DWORD PTR tv771[ebp]
	movss	DWORD PTR [eax+edx], xmm0
$LN7@GetQuatern:

; 120  : 	}
; 121  : 
; 122  : 	return quat;

	lea	eax, DWORD PTR _quat$[ebp]
	push	eax
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0Vector4D@@QAE@ABV0@@Z		; Vector4D::Vector4D
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 123  : }

	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
?GetQuaternion@matrix3x3@@QAE?AVVector4D@@XZ ENDP	; matrix3x3::GetQuaternion
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xashxt_v0.81_rev.1_with_sources\xashxt_v0.81_rev.1_src\game_shared\matrix.cpp
_TEXT	SEGMENT
$T1 = -80						; size = 12
$T2 = -68						; size = 12
$T3 = -56						; size = 12
$T4 = -44						; size = 12
$T5 = -32						; size = 12
$T6 = -20						; size = 12
_d$ = -8						; size = 4
_this$ = -4						; size = 4
_forward$ = 8						; size = 4
?FromVector@matrix3x3@@QAEXABVVector@@@Z PROC		; matrix3x3::FromVector
; _this$ = ecx

; 22   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 80					; 00000050H
	mov	DWORD PTR _this$[ebp], ecx

; 23   : 	mat[0] = forward;

	mov	eax, 12					; 0000000cH
	imul	ecx, eax, 0
	add	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _forward$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR [ecx], eax
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR [ecx+4], eax
	mov	edx, DWORD PTR [edx+8]
	mov	DWORD PTR [ecx+8], edx

; 24   : 	mat[1] = Vector( forward.z, -forward.x, forward.y );

	mov	eax, DWORD PTR _forward$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [eax+4]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _forward$[ebp]
	movss	xmm0, DWORD PTR [ecx]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _forward$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [edx+8]
	movss	DWORD PTR [esp], xmm0
	lea	ecx, DWORD PTR $T6[ebp]
	call	??0Vector@@QAE@MMM@Z			; Vector::Vector
	mov	ecx, 12					; 0000000cH
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	eax, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], eax

; 25   : 	float d = DotProduct( mat[0], mat[1] );

	mov	ecx, 12					; 0000000cH
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	push	ecx
	mov	edx, 12					; 0000000cH
	imul	eax, edx, 0
	add	eax, DWORD PTR _this$[ebp]
	push	eax
	call	?DotProduct@@YAMABVVector@@0@Z		; DotProduct
	add	esp, 8
	fstp	DWORD PTR _d$[ebp]

; 26   : 	mat[1] = (mat[1] + mat[0] * -d).Normalize();

	lea	ecx, DWORD PTR $T5[ebp]
	push	ecx
	movss	xmm0, DWORD PTR _d$[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	lea	edx, DWORD PTR $T4[ebp]
	push	edx
	mov	eax, 12					; 0000000cH
	imul	ecx, eax, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??DVector@@QBE?AV0@M@Z			; Vector::operator*
	push	eax
	lea	ecx, DWORD PTR $T3[ebp]
	push	ecx
	mov	ecx, 12					; 0000000cH
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??HVector@@QBE?AV0@ABV0@@Z		; Vector::operator+
	mov	ecx, eax
	call	?Normalize@Vector@@QBE?AV1@XZ		; Vector::Normalize
	mov	edx, 12					; 0000000cH
	shl	edx, 0
	add	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR [edx], ecx
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR [edx+4], ecx
	mov	eax, DWORD PTR [eax+8]
	mov	DWORD PTR [edx+8], eax

; 27   : 	mat[2] = CrossProduct( mat[1], mat[0] );

	mov	ecx, 12					; 0000000cH
	imul	edx, ecx, 0
	add	edx, DWORD PTR _this$[ebp]
	push	edx
	mov	eax, 12					; 0000000cH
	shl	eax, 0
	add	eax, DWORD PTR _this$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T2[ebp]
	push	ecx
	call	?CrossProduct@@YA?AVVector@@ABV1@0@Z	; CrossProduct
	add	esp, 12					; 0000000cH
	mov	edx, 12					; 0000000cH
	shl	edx, 1
	add	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR [edx], ecx
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR [edx+4], ecx
	mov	eax, DWORD PTR [eax+8]
	mov	DWORD PTR [edx+8], eax

; 28   : 	mat[2] = mat[2].Normalize();

	lea	ecx, DWORD PTR $T1[ebp]
	push	ecx
	mov	ecx, 12					; 0000000cH
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	?Normalize@Vector@@QBE?AV1@XZ		; Vector::Normalize
	mov	edx, 12					; 0000000cH
	shl	edx, 1
	add	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR [edx], ecx
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR [edx+4], ecx
	mov	eax, DWORD PTR [eax+8]
	mov	DWORD PTR [edx+8], eax

; 29   : }

	mov	esp, ebp
	pop	ebp
	ret	4
?FromVector@matrix3x3@@QAEXABVVector@@@Z ENDP		; matrix3x3::FromVector
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xashxt_v0.81_rev.1_with_sources\xashxt_v0.81_rev.1_src\game_shared\matrix.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
_vOther$ = 8						; size = 4
??4matrix3x3@@QAEAAV0@ABVmatrix4x4@@@Z PROC		; matrix3x3::operator=
; _this$ = ecx

; 49   : {

	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 50   : 	mat[0][0] = vOther[0][0];

	push	0
	mov	ecx, DWORD PTR _vOther$[ebp]
	call	??Amatrix4x4@@QBEPBMH@Z			; matrix4x4::operator[]
	mov	esi, eax
	mov	eax, 4
	imul	edi, eax, 0
	mov	ecx, 12					; 0000000cH
	imul	ecx, ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector@@QAEPAMXZ			; Vector::operator float *
	mov	edx, 4
	imul	ecx, edx, 0
	mov	edx, DWORD PTR [esi+edi]
	mov	DWORD PTR [eax+ecx], edx

; 51   : 	mat[1][1] = vOther[1][1];

	push	1
	mov	ecx, DWORD PTR _vOther$[ebp]
	call	??Amatrix4x4@@QBEPBMH@Z			; matrix4x4::operator[]
	mov	esi, eax
	mov	edi, 4
	shl	edi, 0
	mov	ecx, 12					; 0000000cH
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector@@QAEPAMXZ			; Vector::operator float *
	mov	ecx, 4
	shl	ecx, 0
	mov	edx, DWORD PTR [esi+edi]
	mov	DWORD PTR [eax+ecx], edx

; 52   : 	mat[2][2] = vOther[2][2];

	push	2
	mov	ecx, DWORD PTR _vOther$[ebp]
	call	??Amatrix4x4@@QBEPBMH@Z			; matrix4x4::operator[]
	mov	esi, eax
	mov	edi, 4
	shl	edi, 1
	mov	ecx, 12					; 0000000cH
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector@@QAEPAMXZ			; Vector::operator float *
	mov	ecx, 4
	shl	ecx, 1
	mov	edx, DWORD PTR [esi+edi]
	mov	DWORD PTR [eax+ecx], edx

; 53   : 	mat[0][1] = vOther[1][0];

	push	1
	mov	ecx, DWORD PTR _vOther$[ebp]
	call	??Amatrix4x4@@QBEPBMH@Z			; matrix4x4::operator[]
	mov	esi, eax
	mov	eax, 4
	imul	edi, eax, 0
	mov	ecx, 12					; 0000000cH
	imul	ecx, ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector@@QAEPAMXZ			; Vector::operator float *
	mov	edx, 4
	shl	edx, 0
	mov	ecx, DWORD PTR [esi+edi]
	mov	DWORD PTR [eax+edx], ecx

; 54   : 	mat[0][2] = vOther[1][0];

	push	1
	mov	ecx, DWORD PTR _vOther$[ebp]
	call	??Amatrix4x4@@QBEPBMH@Z			; matrix4x4::operator[]
	mov	esi, eax
	mov	edx, 4
	imul	edi, edx, 0
	mov	eax, 12					; 0000000cH
	imul	ecx, eax, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector@@QAEPAMXZ			; Vector::operator float *
	mov	ecx, 4
	shl	ecx, 1
	mov	edx, DWORD PTR [esi+edi]
	mov	DWORD PTR [eax+ecx], edx

; 55   : 	mat[1][0] = vOther[0][1];

	push	0
	mov	ecx, DWORD PTR _vOther$[ebp]
	call	??Amatrix4x4@@QBEPBMH@Z			; matrix4x4::operator[]
	mov	esi, eax
	mov	edi, 4
	shl	edi, 0
	mov	ecx, 12					; 0000000cH
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector@@QAEPAMXZ			; Vector::operator float *
	mov	ecx, 4
	imul	edx, ecx, 0
	mov	ecx, DWORD PTR [esi+edi]
	mov	DWORD PTR [eax+edx], ecx

; 56   : 	mat[1][2] = vOther[2][1];

	push	2
	mov	ecx, DWORD PTR _vOther$[ebp]
	call	??Amatrix4x4@@QBEPBMH@Z			; matrix4x4::operator[]
	mov	esi, eax
	mov	edi, 4
	shl	edi, 0
	mov	ecx, 12					; 0000000cH
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector@@QAEPAMXZ			; Vector::operator float *
	mov	edx, 4
	shl	edx, 1
	mov	ecx, DWORD PTR [esi+edi]
	mov	DWORD PTR [eax+edx], ecx

; 57   : 	mat[2][0] = vOther[0][2];

	push	0
	mov	ecx, DWORD PTR _vOther$[ebp]
	call	??Amatrix4x4@@QBEPBMH@Z			; matrix4x4::operator[]
	mov	esi, eax
	mov	edi, 4
	shl	edi, 1
	mov	ecx, 12					; 0000000cH
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector@@QAEPAMXZ			; Vector::operator float *
	mov	edx, 4
	imul	ecx, edx, 0
	mov	edx, DWORD PTR [esi+edi]
	mov	DWORD PTR [eax+ecx], edx

; 58   : 	mat[2][1] = vOther[1][2];

	push	1
	mov	ecx, DWORD PTR _vOther$[ebp]
	call	??Amatrix4x4@@QBEPBMH@Z			; matrix4x4::operator[]
	mov	esi, eax
	mov	edi, 4
	shl	edi, 1
	mov	ecx, 12					; 0000000cH
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector@@QAEPAMXZ			; Vector::operator float *
	mov	ecx, 4
	shl	ecx, 0
	mov	edx, DWORD PTR [esi+edi]
	mov	DWORD PTR [eax+ecx], edx

; 59   : 	return *this;

	mov	eax, DWORD PTR _this$[ebp]

; 60   : }

	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
??4matrix3x3@@QAEAAV0@ABVmatrix4x4@@@Z ENDP		; matrix3x3::operator=
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xashxt_v0.81_rev.1_with_sources\xashxt_v0.81_rev.1_src\game_shared\matrix.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
_vOther$ = 8						; size = 4
??4matrix3x3@@QAEAAV0@ABVmatrix3x4@@@Z PROC		; matrix3x3::operator=
; _this$ = ecx

; 33   : {

	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 34   : 	mat[0][0] = vOther[0][0];

	push	0
	mov	ecx, DWORD PTR _vOther$[ebp]
	call	??Amatrix3x4@@QBEPBMH@Z			; matrix3x4::operator[]
	mov	esi, eax
	mov	eax, 4
	imul	edi, eax, 0
	mov	ecx, 12					; 0000000cH
	imul	ecx, ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector@@QAEPAMXZ			; Vector::operator float *
	mov	edx, 4
	imul	ecx, edx, 0
	mov	edx, DWORD PTR [esi+edi]
	mov	DWORD PTR [eax+ecx], edx

; 35   : 	mat[1][1] = vOther[1][1];

	push	1
	mov	ecx, DWORD PTR _vOther$[ebp]
	call	??Amatrix3x4@@QBEPBMH@Z			; matrix3x4::operator[]
	mov	esi, eax
	mov	edi, 4
	shl	edi, 0
	mov	ecx, 12					; 0000000cH
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector@@QAEPAMXZ			; Vector::operator float *
	mov	ecx, 4
	shl	ecx, 0
	mov	edx, DWORD PTR [esi+edi]
	mov	DWORD PTR [eax+ecx], edx

; 36   : 	mat[2][2] = vOther[2][2];

	push	2
	mov	ecx, DWORD PTR _vOther$[ebp]
	call	??Amatrix3x4@@QBEPBMH@Z			; matrix3x4::operator[]
	mov	esi, eax
	mov	edi, 4
	shl	edi, 1
	mov	ecx, 12					; 0000000cH
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector@@QAEPAMXZ			; Vector::operator float *
	mov	ecx, 4
	shl	ecx, 1
	mov	edx, DWORD PTR [esi+edi]
	mov	DWORD PTR [eax+ecx], edx

; 37   : 	mat[0][1] = vOther[1][0];

	push	1
	mov	ecx, DWORD PTR _vOther$[ebp]
	call	??Amatrix3x4@@QBEPBMH@Z			; matrix3x4::operator[]
	mov	esi, eax
	mov	eax, 4
	imul	edi, eax, 0
	mov	ecx, 12					; 0000000cH
	imul	ecx, ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector@@QAEPAMXZ			; Vector::operator float *
	mov	edx, 4
	shl	edx, 0
	mov	ecx, DWORD PTR [esi+edi]
	mov	DWORD PTR [eax+edx], ecx

; 38   : 	mat[0][2] = vOther[1][0];

	push	1
	mov	ecx, DWORD PTR _vOther$[ebp]
	call	??Amatrix3x4@@QBEPBMH@Z			; matrix3x4::operator[]
	mov	esi, eax
	mov	edx, 4
	imul	edi, edx, 0
	mov	eax, 12					; 0000000cH
	imul	ecx, eax, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector@@QAEPAMXZ			; Vector::operator float *
	mov	ecx, 4
	shl	ecx, 1
	mov	edx, DWORD PTR [esi+edi]
	mov	DWORD PTR [eax+ecx], edx

; 39   : 	mat[1][0] = vOther[0][1];

	push	0
	mov	ecx, DWORD PTR _vOther$[ebp]
	call	??Amatrix3x4@@QBEPBMH@Z			; matrix3x4::operator[]
	mov	esi, eax
	mov	edi, 4
	shl	edi, 0
	mov	ecx, 12					; 0000000cH
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector@@QAEPAMXZ			; Vector::operator float *
	mov	ecx, 4
	imul	edx, ecx, 0
	mov	ecx, DWORD PTR [esi+edi]
	mov	DWORD PTR [eax+edx], ecx

; 40   : 	mat[1][2] = vOther[2][1];

	push	2
	mov	ecx, DWORD PTR _vOther$[ebp]
	call	??Amatrix3x4@@QBEPBMH@Z			; matrix3x4::operator[]
	mov	esi, eax
	mov	edi, 4
	shl	edi, 0
	mov	ecx, 12					; 0000000cH
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector@@QAEPAMXZ			; Vector::operator float *
	mov	edx, 4
	shl	edx, 1
	mov	ecx, DWORD PTR [esi+edi]
	mov	DWORD PTR [eax+edx], ecx

; 41   : 	mat[2][0] = vOther[0][2];

	push	0
	mov	ecx, DWORD PTR _vOther$[ebp]
	call	??Amatrix3x4@@QBEPBMH@Z			; matrix3x4::operator[]
	mov	esi, eax
	mov	edi, 4
	shl	edi, 1
	mov	ecx, 12					; 0000000cH
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector@@QAEPAMXZ			; Vector::operator float *
	mov	edx, 4
	imul	ecx, edx, 0
	mov	edx, DWORD PTR [esi+edi]
	mov	DWORD PTR [eax+ecx], edx

; 42   : 	mat[2][1] = vOther[1][2];

	push	1
	mov	ecx, DWORD PTR _vOther$[ebp]
	call	??Amatrix3x4@@QBEPBMH@Z			; matrix3x4::operator[]
	mov	esi, eax
	mov	edi, 4
	shl	edi, 1
	mov	ecx, 12					; 0000000cH
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector@@QAEPAMXZ			; Vector::operator float *
	mov	ecx, 4
	shl	ecx, 0
	mov	edx, DWORD PTR [esi+edi]
	mov	DWORD PTR [eax+ecx], edx

; 43   : 
; 44   : 	return *this;

	mov	eax, DWORD PTR _this$[ebp]

; 45   : }

	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
??4matrix3x3@@QAEAAV0@ABVmatrix3x4@@@Z ENDP		; matrix3x3::operator=
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xashxt_v0.81_rev.1_with_sources\xashxt_v0.81_rev.1_src\game_shared\matrix.h
;	COMDAT ??Amatrix3x3@@QBEPBMH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_i$ = 8							; size = 4
??Amatrix3x3@@QBEPBMH@Z PROC				; matrix3x3::operator[], COMDAT
; _this$ = ecx

; 123  : 	float const* operator[]( int i ) const { return mat[i]; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	imul	ecx, DWORD PTR _i$[ebp], 12
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector@@QBEPBMXZ			; Vector::operator float const *
	mov	esp, ebp
	pop	ebp
	ret	4
??Amatrix3x3@@QBEPBMH@Z ENDP				; matrix3x3::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xashxt_v0.81_rev.1_with_sources\xashxt_v0.81_rev.1_src\game_shared\matrix.h
;	COMDAT ??Amatrix3x3@@QAEPAMH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_i$ = 8							; size = 4
??Amatrix3x3@@QAEPAMH@Z PROC				; matrix3x3::operator[], COMDAT
; _this$ = ecx

; 122  : 	float* operator[]( int i ) { return mat[i]; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	imul	ecx, DWORD PTR _i$[ebp], 12
	add	ecx, DWORD PTR _this$[ebp]
	call	??BVector@@QAEPAMXZ			; Vector::operator float *
	mov	esp, ebp
	pop	ebp
	ret	4
??Amatrix3x3@@QAEPAMH@Z ENDP				; matrix3x3::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xashxt_v0.81_rev.1_with_sources\xashxt_v0.81_rev.1_src\game_shared\matrix.cpp
_TEXT	SEGMENT
$T1 = -40						; size = 12
$T2 = -28						; size = 12
$T3 = -16						; size = 12
_this$ = -4						; size = 4
?Identity@matrix3x3@@QAEXXZ PROC			; matrix3x3::Identity
; _this$ = ecx

; 15   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 40					; 00000028H
	mov	DWORD PTR _this$[ebp], ecx

; 16   : 	mat[0] = Vector( 1, 0, 0 );

	push	ecx
	xorps	xmm0, xmm0
	movss	DWORD PTR [esp], xmm0
	push	ecx
	xorps	xmm0, xmm0
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [esp], xmm0
	lea	ecx, DWORD PTR $T3[ebp]
	call	??0Vector@@QAE@MMM@Z			; Vector::Vector
	mov	ecx, 12					; 0000000cH
	imul	edx, ecx, 0
	add	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR [edx], ecx
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR [edx+4], ecx
	mov	eax, DWORD PTR [eax+8]
	mov	DWORD PTR [edx+8], eax

; 17   : 	mat[1] = Vector( 0, 1, 0 );

	push	ecx
	xorps	xmm0, xmm0
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	xorps	xmm0, xmm0
	movss	DWORD PTR [esp], xmm0
	lea	ecx, DWORD PTR $T2[ebp]
	call	??0Vector@@QAE@MMM@Z			; Vector::Vector
	mov	ecx, 12					; 0000000cH
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	eax, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], eax

; 18   : 	mat[2] = Vector( 0, 0, 1 );

	push	ecx
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	xorps	xmm0, xmm0
	movss	DWORD PTR [esp], xmm0
	push	ecx
	xorps	xmm0, xmm0
	movss	DWORD PTR [esp], xmm0
	lea	ecx, DWORD PTR $T1[ebp]
	call	??0Vector@@QAE@MMM@Z			; Vector::Vector
	mov	ecx, 12					; 0000000cH
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	eax, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], eax

; 19   : }

	mov	esp, ebp
	pop	ebp
	ret	0
?Identity@matrix3x3@@QAEXXZ ENDP			; matrix3x3::Identity
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xashxt_v0.81_rev.1_with_sources\xashxt_v0.81_rev.1_src\game_shared\matrix.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0matrix3x3@@QAE@XZ PROC				; matrix3x3::matrix3x3
; _this$ = ecx

; 11   : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	push	OFFSET ??0Vector@@QAE@XZ		; Vector::Vector
	push	3
	push	12					; 0000000cH
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??_H@YGXPAXIIP6EPAX0@Z@Z

; 12   : }

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0matrix3x3@@QAE@XZ ENDP				; matrix3x3::matrix3x3
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xashxt_v0.81_rev.1_with_sources\xashxt_v0.81_rev.1_src\game_shared\vector.h
;	COMDAT ??BVector4D@@QBEPBMXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??BVector4D@@QBEPBMXZ PROC				; Vector4D::operator float const *, COMDAT
; _this$ = ecx

; 315  : 	operator const float *() const			{ return &x; } 

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??BVector4D@@QBEPBMXZ ENDP				; Vector4D::operator float const *
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xashxt_v0.81_rev.1_with_sources\xashxt_v0.81_rev.1_src\game_shared\vector.h
;	COMDAT ??BVector4D@@QAEPAMXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??BVector4D@@QAEPAMXZ PROC				; Vector4D::operator float *, COMDAT
; _this$ = ecx

; 314  : 	operator float *()					{ return &x; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??BVector4D@@QAEPAMXZ ENDP				; Vector4D::operator float *
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xashxt_v0.81_rev.1_with_sources\xashxt_v0.81_rev.1_src\game_shared\vector.h
;	COMDAT ??0Vector4D@@QAE@ABV0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_v$ = 8							; size = 4
??0Vector4D@@QAE@ABV0@@Z PROC				; Vector4D::Vector4D, COMDAT
; _this$ = ecx

; 302  : 	inline Vector4D( const Vector4D& v ) { x = v.x; y = v.y; z = v.z, w = v.w; } 

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _v$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _v$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _v$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR [eax+8], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _v$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR [eax+12], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0Vector4D@@QAE@ABV0@@Z ENDP				; Vector4D::Vector4D
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xashxt_v0.81_rev.1_with_sources\xashxt_v0.81_rev.1_src\game_shared\vector.h
;	COMDAT ??0Vector4D@@QAE@MMMM@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_X$ = 8							; size = 4
_Y$ = 12						; size = 4
_Z$ = 16						; size = 4
_W$ = 20						; size = 4
??0Vector4D@@QAE@MMMM@Z PROC				; Vector4D::Vector4D, COMDAT
; _this$ = ecx

; 301  : 	inline Vector4D( float X, float Y, float Z, float W ) { x = X; y = Y; z = Z; w = W; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _X$[ebp]
	movss	DWORD PTR [eax], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _Y$[ebp]
	movss	DWORD PTR [ecx+4], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _Z$[ebp]
	movss	DWORD PTR [edx+8], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _W$[ebp]
	movss	DWORD PTR [eax+12], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
??0Vector4D@@QAE@MMMM@Z ENDP				; Vector4D::Vector4D
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xashxt_v0.81_rev.1_with_sources\xashxt_v0.81_rev.1_src\game_shared\vector.h
;	COMDAT ??0Vector4D@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0Vector4D@@QAE@XZ PROC				; Vector4D::Vector4D, COMDAT
; _this$ = ecx

; 300  : 	inline Vector4D( void ) { }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0Vector4D@@QAE@XZ ENDP				; Vector4D::Vector4D
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xashxt_v0.81_rev.1_with_sources\xashxt_v0.81_rev.1_src\game_shared\vector.h
;	COMDAT ?CrossProduct@@YA?AVVector@@ABV1@0@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
_a$ = 12						; size = 4
_b$ = 16						; size = 4
?CrossProduct@@YA?AVVector@@ABV1@0@Z PROC		; CrossProduct, COMDAT

; 280  : inline Vector CrossProduct( const Vector& a, const Vector& b ) { return Vector( a.y*b.z - a.z*b.y, a.z*b.x - a.x*b.z, a.x*b.y - a.y*b.x ); }

	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR _a$[ebp]
	mov	ecx, DWORD PTR _b$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR [ecx+4]
	mov	edx, DWORD PTR _a$[ebp]
	mov	eax, DWORD PTR _b$[ebp]
	movss	xmm1, DWORD PTR [edx+4]
	mulss	xmm1, DWORD PTR [eax]
	subss	xmm0, xmm1
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _a$[ebp]
	mov	edx, DWORD PTR _b$[ebp]
	movss	xmm0, DWORD PTR [ecx+8]
	mulss	xmm0, DWORD PTR [edx]
	mov	eax, DWORD PTR _a$[ebp]
	mov	ecx, DWORD PTR _b$[ebp]
	movss	xmm1, DWORD PTR [eax]
	mulss	xmm1, DWORD PTR [ecx+8]
	subss	xmm0, xmm1
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _a$[ebp]
	mov	eax, DWORD PTR _b$[ebp]
	movss	xmm0, DWORD PTR [edx+4]
	mulss	xmm0, DWORD PTR [eax+8]
	mov	ecx, DWORD PTR _a$[ebp]
	mov	edx, DWORD PTR _b$[ebp]
	movss	xmm1, DWORD PTR [ecx+8]
	mulss	xmm1, DWORD PTR [edx+4]
	subss	xmm0, xmm1
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0Vector@@QAE@MMM@Z			; Vector::Vector
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	pop	ebp
	ret	0
?CrossProduct@@YA?AVVector@@ABV1@0@Z ENDP		; CrossProduct
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xashxt_v0.81_rev.1_with_sources\xashxt_v0.81_rev.1_src\game_shared\vector.h
;	COMDAT ?DotProduct@@YAMABVVector@@0@Z
_TEXT	SEGMENT
tv86 = -4						; size = 4
_a$ = 8							; size = 4
_b$ = 12						; size = 4
?DotProduct@@YAMABVVector@@0@Z PROC			; DotProduct, COMDAT

; 278  : inline float DotProduct(const Vector& a, const Vector& b ) { return( a.x * b.x + a.y * b.y + a.z * b.z ); }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	eax, DWORD PTR _a$[ebp]
	mov	ecx, DWORD PTR _b$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR [ecx]
	mov	edx, DWORD PTR _a$[ebp]
	mov	eax, DWORD PTR _b$[ebp]
	movss	xmm1, DWORD PTR [edx+4]
	mulss	xmm1, DWORD PTR [eax+4]
	addss	xmm0, xmm1
	mov	ecx, DWORD PTR _a$[ebp]
	mov	edx, DWORD PTR _b$[ebp]
	movss	xmm1, DWORD PTR [ecx+8]
	mulss	xmm1, DWORD PTR [edx+8]
	addss	xmm0, xmm1
	movss	DWORD PTR tv86[ebp], xmm0
	fld	DWORD PTR tv86[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
?DotProduct@@YAMABVVector@@0@Z ENDP			; DotProduct
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xashxt_v0.81_rev.1_with_sources\xashxt_v0.81_rev.1_src\game_shared\vector.h
;	COMDAT ?Normalize@Vector@@QBE?AV1@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
_flLen$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?Normalize@Vector@@QBE?AV1@XZ PROC			; Vector::Normalize, COMDAT
; _this$ = ecx

; 229  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 230  : 		float flLen = Length();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Length@Vector@@QBEMXZ			; Vector::Length
	fstp	DWORD PTR _flLen$[ebp]

; 231  : 
; 232  : 		if( flLen )

	movss	xmm0, DWORD PTR _flLen$[ebp]
	ucomiss	xmm0, DWORD PTR __real@00000000
	lahf
	test	ah, 68					; 00000044H
	jnp	SHORT $LN2@Normalize

; 233  : 		{
; 234  : 			flLen = 1.0f / flLen;

	movss	xmm0, DWORD PTR __real@3f800000
	divss	xmm0, DWORD PTR _flLen$[ebp]
	movss	DWORD PTR _flLen$[ebp], xmm0

; 235  : 			return Vector( x * flLen, y * flLen, z * flLen );

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+8]
	mulss	xmm0, DWORD PTR _flLen$[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+4]
	mulss	xmm0, DWORD PTR _flLen$[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx]
	mulss	xmm0, DWORD PTR _flLen$[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0Vector@@QAE@MMM@Z			; Vector::Vector
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	SHORT $LN1@Normalize
$LN2@Normalize:

; 236  : 		}
; 237  : 
; 238  : 		return *this; // can't normalize

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0Vector@@QAE@ABV0@@Z			; Vector::Vector
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
$LN1@Normalize:

; 239  : 	}

	mov	esp, ebp
	pop	ebp
	ret	4
?Normalize@Vector@@QBE?AV1@XZ ENDP			; Vector::Normalize
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xashxt_v0.81_rev.1_with_sources\xashxt_v0.81_rev.1_src\game_shared\vector.h
;	COMDAT ??BVector@@QBEPBMXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??BVector@@QBEPBMXZ PROC				; Vector::operator float const *, COMDAT
; _this$ = ecx

; 226  : 	operator const float *() const		{ return &x; } 

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??BVector@@QBEPBMXZ ENDP				; Vector::operator float const *
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xashxt_v0.81_rev.1_with_sources\xashxt_v0.81_rev.1_src\game_shared\vector.h
;	COMDAT ??BVector@@QAEPAMXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??BVector@@QAEPAMXZ PROC				; Vector::operator float *, COMDAT
; _this$ = ecx

; 225  : 	operator float *()				{ return &x; } // Vectors will now automatically convert to float * when needed

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??BVector@@QAEPAMXZ ENDP				; Vector::operator float *
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xashxt_v0.81_rev.1_with_sources\xashxt_v0.81_rev.1_src\game_shared\vector.h
;	COMDAT ?Length@Vector@@QBEMXZ
_TEXT	SEGMENT
tv91 = -8						; size = 4
_this$ = -4						; size = 4
?Length@Vector@@QBEMXZ PROC				; Vector::Length, COMDAT
; _this$ = ecx

; 223  : 	inline float Length(void) const		{ return sqrt( x*x + y*y + z*z ); }

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR [ecx]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [edx+4]
	mulss	xmm1, DWORD PTR [eax+4]
	addss	xmm0, xmm1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [ecx+8]
	mulss	xmm1, DWORD PTR [edx+8]
	addss	xmm0, xmm1
	cvtss2sd xmm0, xmm0
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	call	_sqrt
	add	esp, 8
	fstp	DWORD PTR tv91[ebp]
	fld	DWORD PTR tv91[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
?Length@Vector@@QBEMXZ ENDP				; Vector::Length
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xashxt_v0.81_rev.1_with_sources\xashxt_v0.81_rev.1_src\game_shared\vector.h
;	COMDAT ??DVector@@QBE?AV0@M@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
_fl$ = 12						; size = 4
??DVector@@QBE?AV0@M@Z PROC				; Vector::operator*, COMDAT
; _this$ = ecx

; 150  : 	inline Vector operator*(float fl) const		{ return Vector(x*fl, y*fl, z*fl);	   }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+8]
	mulss	xmm0, DWORD PTR _fl$[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+4]
	mulss	xmm0, DWORD PTR _fl$[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx]
	mulss	xmm0, DWORD PTR _fl$[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0Vector@@QAE@MMM@Z			; Vector::Vector
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	8
??DVector@@QBE?AV0@M@Z ENDP				; Vector::operator*
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xashxt_v0.81_rev.1_with_sources\xashxt_v0.81_rev.1_src\game_shared\vector.h
;	COMDAT ??HVector@@QBE?AV0@ABV0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
_v$ = 12						; size = 4
??HVector@@QBE?AV0@ABV0@@Z PROC				; Vector::operator+, COMDAT
; _this$ = ecx

; 146  : 	inline Vector operator+(const Vector& v) const	{ return Vector(x+v.x, y+v.y, z+v.z);	   }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [eax+8]
	addss	xmm0, DWORD PTR [ecx+8]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [edx+4]
	addss	xmm0, DWORD PTR [eax+4]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [ecx]
	addss	xmm0, DWORD PTR [edx]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0Vector@@QAE@MMM@Z			; Vector::Vector
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	8
??HVector@@QBE?AV0@ABV0@@Z ENDP				; Vector::operator+
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xashxt_v0.81_rev.1_with_sources\xashxt_v0.81_rev.1_src\game_shared\vector.h
;	COMDAT ??0Vector@@QAE@ABV0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_v$ = 8							; size = 4
??0Vector@@QAE@ABV0@@Z PROC				; Vector::Vector, COMDAT
; _this$ = ecx

; 133  : 	inline Vector(const Vector& v)		{ x = v.x; y = v.y; z = v.z;		   }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _v$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _v$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _v$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR [eax+8], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0Vector@@QAE@ABV0@@Z ENDP				; Vector::Vector
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xashxt_v0.81_rev.1_with_sources\xashxt_v0.81_rev.1_src\game_shared\vector.h
;	COMDAT ??0Vector@@QAE@MMM@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_X$ = 8							; size = 4
_Y$ = 12						; size = 4
_Z$ = 16						; size = 4
??0Vector@@QAE@MMM@Z PROC				; Vector::Vector, COMDAT
; _this$ = ecx

; 132  : 	inline Vector(float X, float Y, float Z)	{ x = X; y = Y; z = Z;                     }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _X$[ebp]
	movss	DWORD PTR [eax], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _Y$[ebp]
	movss	DWORD PTR [ecx+4], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _Z$[ebp]
	movss	DWORD PTR [edx+8], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
??0Vector@@QAE@MMM@Z ENDP				; Vector::Vector
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xashxt_v0.81_rev.1_with_sources\xashxt_v0.81_rev.1_src\game_shared\vector.h
;	COMDAT ??0Vector@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0Vector@@QAE@XZ PROC					; Vector::Vector, COMDAT
; _this$ = ecx

; 131  : 	inline Vector(void)				{ }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0Vector@@QAE@XZ ENDP					; Vector::Vector
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\user\downloads\xashxt_v0.81_rev.1_with_sources\xashxt_v0.81_rev.1_src\game_shared\vector.h
;	COMDAT ?SinCos@@YAXMPAM0@Z
_TEXT	SEGMENT
_angle$ = 8						; size = 4
_sine$ = 12						; size = 4
_cosine$ = 16						; size = 4
?SinCos@@YAXMPAM0@Z PROC				; SinCos, COMDAT

; 33   : {

	push	ebp
	mov	ebp, esp

; 34   : 	__asm
; 35   : 	{
; 36   : 		push	ecx

	push	ecx

; 37   : 		fld	dword ptr angle

	fld	DWORD PTR _angle$[ebp]

; 38   : 		fsincos

	fsincos

; 39   : 		mov	ecx, dword ptr[cosine]

	mov	ecx, DWORD PTR _cosine$[ebp]

; 40   : 		fstp      dword ptr [ecx]

	fstp	DWORD PTR [ecx]

; 41   : 		mov 	ecx, dword ptr[sine]

	mov	ecx, DWORD PTR _sine$[ebp]

; 42   : 		fstp	dword ptr [ecx]

	fstp	DWORD PTR [ecx]

; 43   : 		pop	ecx

	pop	ecx

; 44   : 	}
; 45   : }

	pop	ebp
	ret	0
?SinCos@@YAXMPAM0@Z ENDP				; SinCos
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??__G@YGXPAX0IIP6EPAX00@Z@Z
_TEXT	SEGMENT
tv66 = -4						; size = 4
___t$ = 8						; size = 4
___u$ = 12						; size = 4
___s$ = 16						; size = 4
___n$ = 20						; size = 4
___f$ = 24						; size = 4
??__G@YGXPAX0IIP6EPAX00@Z@Z PROC			; `vector copy constructor iterator', COMDAT
	push	ebp
	mov	ebp, esp
	push	ecx
$LN2@vector:
	mov	eax, DWORD PTR ___n$[ebp]
	mov	DWORD PTR tv66[ebp], eax
	mov	ecx, DWORD PTR ___n$[ebp]
	sub	ecx, 1
	mov	DWORD PTR ___n$[ebp], ecx
	cmp	DWORD PTR tv66[ebp], 0
	jbe	SHORT $LN1@vector
	mov	edx, DWORD PTR ___u$[ebp]
	push	edx
	mov	ecx, DWORD PTR ___t$[ebp]
	call	DWORD PTR ___f$[ebp]
	mov	eax, DWORD PTR ___t$[ebp]
	add	eax, DWORD PTR ___s$[ebp]
	mov	DWORD PTR ___t$[ebp], eax
	mov	ecx, DWORD PTR ___u$[ebp]
	add	ecx, DWORD PTR ___s$[ebp]
	mov	DWORD PTR ___u$[ebp], ecx
	jmp	SHORT $LN2@vector
$LN1@vector:
	mov	esp, ebp
	pop	ebp
	ret	20					; 00000014H
??__G@YGXPAX0IIP6EPAX00@Z@Z ENDP			; `vector copy constructor iterator'
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_H@YGXPAXIIP6EPAX0@Z@Z
_TEXT	SEGMENT
tv66 = -4						; size = 4
___t$ = 8						; size = 4
___s$ = 12						; size = 4
___n$ = 16						; size = 4
___f$ = 20						; size = 4
??_H@YGXPAXIIP6EPAX0@Z@Z PROC				; `vector constructor iterator', COMDAT
	push	ebp
	mov	ebp, esp
	push	ecx
$LN2@vector:
	mov	eax, DWORD PTR ___n$[ebp]
	mov	DWORD PTR tv66[ebp], eax
	mov	ecx, DWORD PTR ___n$[ebp]
	sub	ecx, 1
	mov	DWORD PTR ___n$[ebp], ecx
	cmp	DWORD PTR tv66[ebp], 0
	jbe	SHORT $LN1@vector
	mov	ecx, DWORD PTR ___t$[ebp]
	call	DWORD PTR ___f$[ebp]
	mov	edx, DWORD PTR ___t$[ebp]
	add	edx, DWORD PTR ___s$[ebp]
	mov	DWORD PTR ___t$[ebp], edx
	jmp	SHORT $LN2@vector
$LN1@vector:
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
??_H@YGXPAXIIP6EPAX0@Z@Z ENDP				; `vector constructor iterator'
_TEXT	ENDS
END
